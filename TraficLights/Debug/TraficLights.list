
TraficLights.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08003984  08003984  00013984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003aec  08003aec  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  08003aec  08003aec  00013aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003af4  08003af4  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003af4  08003af4  00013af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003af8  08003af8  00013af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08003afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  200000b4  08003bb0  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08003bb0  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c752  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001990  00000000  00000000  0002c836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  0002e1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b50  00000000  00000000  0002edb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016404  00000000  00000000  0002f900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce19  00000000  00000000  00045d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d8b8  00000000  00000000  00052b1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e03d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000362c  00000000  00000000  000e0428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b4 	.word	0x200000b4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800396c 	.word	0x0800396c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b8 	.word	0x200000b8
 80001dc:	0800396c 	.word	0x0800396c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <abuzz_start>:
void abuzz_p_short();



void abuzz_start()
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
	TIM3->PSC 	= 42000-1;
 8000588:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <abuzz_start+0x2c>)
 800058a:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800058e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR   = 0xFFFF;
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <abuzz_start+0x2c>)
 8000592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000596:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR1  = 0x0064;
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <abuzz_start+0x2c>)
 800059a:	2264      	movs	r2, #100	; 0x64
 800059c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CNT   = 0x0000;
 800059e:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <abuzz_start+0x2c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40000400 	.word	0x40000400

080005b4 <abuzz_stop>:



void abuzz_stop()
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
	TIM3->PSC  = 0x0000;
 80005b8:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <abuzz_stop+0x24>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR  = 0xFFFF;
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <abuzz_stop+0x24>)
 80005c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005c4:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR1 = 0x0000;
 80005c6:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <abuzz_stop+0x24>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	635a      	str	r2, [r3, #52]	; 0x34
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40000400 	.word	0x40000400

080005dc <abuzz_p_long>:

void abuzz_p_long()
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
	TIM3->ARR = 0x0F90;
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <abuzz_p_long+0x1c>)
 80005e2:	f44f 6279 	mov.w	r2, #3984	; 0xf90
 80005e6:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CNT = 0x0000;
 80005e8:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <abuzz_p_long+0x1c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005ee:	bf00      	nop
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	40000400 	.word	0x40000400

080005fc <abuzz_p_short>:


void abuzz_p_short()
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
	TIM3->ARR = 0x012b;
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <abuzz_p_short+0x1c>)
 8000602:	f240 122b 	movw	r2, #299	; 0x12b
 8000606:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CNT = 0x0000;
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <abuzz_p_short+0x1c>)
 800060a:	2200      	movs	r2, #0
 800060c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800060e:	bf00      	nop
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	40000400 	.word	0x40000400

0800061c <evq_push_back>:

int evq_count = 0;
int evq_front_ix = 0;
int evq_rear_ix = 0;

void evq_push_back(event e){
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
	// if queue is full, ignore e
	if ( evq_count < EVQ_SIZE )
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <evq_push_back+0x5c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b09      	cmp	r3, #9
 800062c:	dc1d      	bgt.n	800066a <evq_push_back+0x4e>
	{
		evq[evq_rear_ix] = e;
 800062e:	4b13      	ldr	r3, [pc, #76]	; (800067c <evq_push_back+0x60>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4913      	ldr	r1, [pc, #76]	; (8000680 <evq_push_back+0x64>)
 8000634:	79fa      	ldrb	r2, [r7, #7]
 8000636:	54ca      	strb	r2, [r1, r3]
		evq_rear_ix++;
 8000638:	4b10      	ldr	r3, [pc, #64]	; (800067c <evq_push_back+0x60>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	4a0f      	ldr	r2, [pc, #60]	; (800067c <evq_push_back+0x60>)
 8000640:	6013      	str	r3, [r2, #0]
		evq_rear_ix %= EVQ_SIZE;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <evq_push_back+0x60>)
 8000644:	6819      	ldr	r1, [r3, #0]
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <evq_push_back+0x68>)
 8000648:	fb83 2301 	smull	r2, r3, r3, r1
 800064c:	109a      	asrs	r2, r3, #2
 800064e:	17cb      	asrs	r3, r1, #31
 8000650:	1ad2      	subs	r2, r2, r3
 8000652:	4613      	mov	r3, r2
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	4413      	add	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	1aca      	subs	r2, r1, r3
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <evq_push_back+0x60>)
 800065e:	601a      	str	r2, [r3, #0]
		evq_count++;
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <evq_push_back+0x5c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	3301      	adds	r3, #1
 8000666:	4a04      	ldr	r2, [pc, #16]	; (8000678 <evq_push_back+0x5c>)
 8000668:	6013      	str	r3, [r2, #0]
	}
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	20000168 	.word	0x20000168
 800067c:	20000170 	.word	0x20000170
 8000680:	2000015c 	.word	0x2000015c
 8000684:	66666667 	.word	0x66666667

08000688 <evq_pop_front>:

event evq_pop_front(){
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
	event e = ev_none;
 800068e:	2300      	movs	r3, #0
 8000690:	71fb      	strb	r3, [r7, #7]
	if ( evq_count > 0 )
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <evq_pop_front+0x68>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	dd22      	ble.n	80006e0 <evq_pop_front+0x58>
	{
		e = evq[evq_front_ix];
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <evq_pop_front+0x6c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a16      	ldr	r2, [pc, #88]	; (80006f8 <evq_pop_front+0x70>)
 80006a0:	5cd3      	ldrb	r3, [r2, r3]
 80006a2:	71fb      	strb	r3, [r7, #7]
		// replace data in cell to detect stupidity:
		evq[evq_front_ix] = ev_error;
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <evq_pop_front+0x6c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a13      	ldr	r2, [pc, #76]	; (80006f8 <evq_pop_front+0x70>)
 80006aa:	2104      	movs	r1, #4
 80006ac:	54d1      	strb	r1, [r2, r3]
		evq_front_ix++;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <evq_pop_front+0x6c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	3301      	adds	r3, #1
 80006b4:	4a0f      	ldr	r2, [pc, #60]	; (80006f4 <evq_pop_front+0x6c>)
 80006b6:	6013      	str	r3, [r2, #0]
		evq_front_ix %= EVQ_SIZE;
 80006b8:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <evq_pop_front+0x6c>)
 80006ba:	6819      	ldr	r1, [r3, #0]
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <evq_pop_front+0x74>)
 80006be:	fb83 2301 	smull	r2, r3, r3, r1
 80006c2:	109a      	asrs	r2, r3, #2
 80006c4:	17cb      	asrs	r3, r1, #31
 80006c6:	1ad2      	subs	r2, r2, r3
 80006c8:	4613      	mov	r3, r2
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	4413      	add	r3, r2
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	1aca      	subs	r2, r1, r3
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <evq_pop_front+0x6c>)
 80006d4:	601a      	str	r2, [r3, #0]
		evq_count--;
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <evq_pop_front+0x68>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3b01      	subs	r3, #1
 80006dc:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <evq_pop_front+0x68>)
 80006de:	6013      	str	r3, [r2, #0]
	}
	return e;
 80006e0:	79fb      	ldrb	r3, [r7, #7]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	20000168 	.word	0x20000168
 80006f4:	2000016c 	.word	0x2000016c
 80006f8:	2000015c 	.word	0x2000015c
 80006fc:	66666667 	.word	0x66666667

08000700 <setLights>:

int blueButtonPressed(){
	return 0 == (B1_GPIO_Port->IDR & B1_Pin);
}

void setLights(state s){
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	char lights = lightsDecode[s];
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <setLights+0x48>)
 800070e:	5cd3      	ldrb	r3, [r2, r3]
 8000710:	73fb      	strb	r3, [r7, #15]
	const char mask = TrafficLightA_Pin | TrafficLightB_Pin | TrafficLightC_Pin | TrafficLightD_Pin | TrafficLightE_Pin | TrafficLightIndicator_Pin;
 8000712:	233f      	movs	r3, #63	; 0x3f
 8000714:	73bb      	strb	r3, [r7, #14]
	char * tmp = (char*)&(TrafficLightA_GPIO_Port->ODR);//using 8 bit assesses
 8000716:	4b0d      	ldr	r3, [pc, #52]	; (800074c <setLights+0x4c>)
 8000718:	60bb      	str	r3, [r7, #8]
	*tmp = (*tmp & ~mask) | lights;
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	b25a      	sxtb	r2, r3
 8000720:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000724:	43db      	mvns	r3, r3
 8000726:	b25b      	sxtb	r3, r3
 8000728:	4013      	ands	r3, r2
 800072a:	b25a      	sxtb	r2, r3
 800072c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000730:	4313      	orrs	r3, r2
 8000732:	b25b      	sxtb	r3, r3
 8000734:	b2da      	uxtb	r2, r3
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	701a      	strb	r2, [r3, #0]
}
 800073a:	bf00      	nop
 800073c:	3714      	adds	r7, #20
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	20000038 	.word	0x20000038
 800074c:	40020814 	.word	0x40020814

08000750 <printState>:

int ticks_left = 0;

void printState(event ev, state s){
 8000750:	b580      	push	{r7, lr}
 8000752:	b09c      	sub	sp, #112	; 0x70
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	460a      	mov	r2, r1
 800075a:	71fb      	strb	r3, [r7, #7]
 800075c:	4613      	mov	r3, r2
 800075e:	71bb      	strb	r3, [r7, #6]
	static event l_ev = ev_error;
	static state l_s = s_error;
	if(ev == l_ev && s == l_s)return;//discard repeated inputs
 8000760:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <printState+0x84>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	79fa      	ldrb	r2, [r7, #7]
 8000766:	429a      	cmp	r2, r3
 8000768:	d104      	bne.n	8000774 <printState+0x24>
 800076a:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <printState+0x88>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	79ba      	ldrb	r2, [r7, #6]
 8000770:	429a      	cmp	r2, r3
 8000772:	d02b      	beq.n	80007cc <printState+0x7c>
	l_ev = ev;
 8000774:	4a17      	ldr	r2, [pc, #92]	; (80007d4 <printState+0x84>)
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	7013      	strb	r3, [r2, #0]
	l_s = s;
 800077a:	4a17      	ldr	r2, [pc, #92]	; (80007d8 <printState+0x88>)
 800077c:	79bb      	ldrb	r3, [r7, #6]
 800077e:	7013      	strb	r3, [r2, #0]

	char str[100] = {'\0'};
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2260      	movs	r2, #96	; 0x60
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f002 fc77 	bl	8003080 <memset>
	uint16_t str_len = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	str_len = sprintf(str, "EV: %s \t state: %s\r\n", eventName[ev], stateName[s]);
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	4a10      	ldr	r2, [pc, #64]	; (80007dc <printState+0x8c>)
 800079c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007a0:	79bb      	ldrb	r3, [r7, #6]
 80007a2:	490f      	ldr	r1, [pc, #60]	; (80007e0 <printState+0x90>)
 80007a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007a8:	f107 0008 	add.w	r0, r7, #8
 80007ac:	490d      	ldr	r1, [pc, #52]	; (80007e4 <printState+0x94>)
 80007ae:	f002 fc6f 	bl	8003090 <siprintf>
 80007b2:	4603      	mov	r3, r0
 80007b4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80007b8:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80007bc:	f107 0108 	add.w	r1, r7, #8
 80007c0:	f04f 33ff 	mov.w	r3, #4294967295
 80007c4:	4808      	ldr	r0, [pc, #32]	; (80007e8 <printState+0x98>)
 80007c6:	f002 f8bc 	bl	8002942 <HAL_UART_Transmit>
 80007ca:	e000      	b.n	80007ce <printState+0x7e>
	if(ev == l_ev && s == l_s)return;//discard repeated inputs
 80007cc:	bf00      	nop
}
 80007ce:	3770      	adds	r7, #112	; 0x70
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000041 	.word	0x20000041
 80007d8:	20000042 	.word	0x20000042
 80007dc:	20000000 	.word	0x20000000
 80007e0:	20000014 	.word	0x20000014
 80007e4:	08003a88 	.word	0x08003a88
 80007e8:	20000118 	.word	0x20000118

080007ec <stateMachine>:

void stateMachine(event ev){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
	static state s = s_reset;
	printState(ev, s);
 80007f6:	4b73      	ldr	r3, [pc, #460]	; (80009c4 <stateMachine+0x1d8>)
 80007f8:	781a      	ldrb	r2, [r3, #0]
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	4611      	mov	r1, r2
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ffa6 	bl	8000750 <printState>
	switch(s){
 8000804:	4b6f      	ldr	r3, [pc, #444]	; (80009c4 <stateMachine+0x1d8>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b07      	cmp	r3, #7
 800080a:	f200 80be 	bhi.w	800098a <stateMachine+0x19e>
 800080e:	a201      	add	r2, pc, #4	; (adr r2, 8000814 <stateMachine+0x28>)
 8000810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000814:	08000835 	.word	0x08000835
 8000818:	0800087d 	.word	0x0800087d
 800081c:	080008a3 	.word	0x080008a3
 8000820:	080008cf 	.word	0x080008cf
 8000824:	080008f3 	.word	0x080008f3
 8000828:	08000917 	.word	0x08000917
 800082c:	0800093f 	.word	0x0800093f
 8000830:	08000967 	.word	0x08000967
	case s_reset:{
		if(ev == ev_reset){
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	2b03      	cmp	r3, #3
 8000838:	d10d      	bne.n	8000856 <stateMachine+0x6a>
			ticks_left = 2500;
 800083a:	4b63      	ldr	r3, [pc, #396]	; (80009c8 <stateMachine+0x1dc>)
 800083c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000840:	601a      	str	r2, [r3, #0]
			ev = ev_none;
 8000842:	2300      	movs	r3, #0
 8000844:	71fb      	strb	r3, [r7, #7]
			s = s_reset;
 8000846:	4b5f      	ldr	r3, [pc, #380]	; (80009c4 <stateMachine+0x1d8>)
 8000848:	2200      	movs	r2, #0
 800084a:	701a      	strb	r2, [r3, #0]
			setLights(s);
 800084c:	4b5d      	ldr	r3, [pc, #372]	; (80009c4 <stateMachine+0x1d8>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff55 	bl	8000700 <setLights>
		}
		if(ev == ev_state_timeout){
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	2b02      	cmp	r3, #2
 800085a:	f040 809f 	bne.w	800099c <stateMachine+0x1b0>
			ticks_left = 2500;
 800085e:	4b5a      	ldr	r3, [pc, #360]	; (80009c8 <stateMachine+0x1dc>)
 8000860:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000864:	601a      	str	r2, [r3, #0]
			ev = ev_none;
 8000866:	2300      	movs	r3, #0
 8000868:	71fb      	strb	r3, [r7, #7]
			s = s_yellow_car_start;
 800086a:	4b56      	ldr	r3, [pc, #344]	; (80009c4 <stateMachine+0x1d8>)
 800086c:	2201      	movs	r2, #1
 800086e:	701a      	strb	r2, [r3, #0]
			setLights(s);
 8000870:	4b54      	ldr	r3, [pc, #336]	; (80009c4 <stateMachine+0x1d8>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff43 	bl	8000700 <setLights>
		}
		break;
 800087a:	e08f      	b.n	800099c <stateMachine+0x1b0>
	}
	case s_yellow_car_start:{
		if(ev == ev_state_timeout){
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	2b02      	cmp	r3, #2
 8000880:	f040 808e 	bne.w	80009a0 <stateMachine+0x1b4>
			ticks_left = 2500;
 8000884:	4b50      	ldr	r3, [pc, #320]	; (80009c8 <stateMachine+0x1dc>)
 8000886:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800088a:	601a      	str	r2, [r3, #0]
			ev = ev_none;
 800088c:	2300      	movs	r3, #0
 800088e:	71fb      	strb	r3, [r7, #7]
			s = s_green_car_go;
 8000890:	4b4c      	ldr	r3, [pc, #304]	; (80009c4 <stateMachine+0x1d8>)
 8000892:	2202      	movs	r2, #2
 8000894:	701a      	strb	r2, [r3, #0]
			setLights(s);
 8000896:	4b4b      	ldr	r3, [pc, #300]	; (80009c4 <stateMachine+0x1d8>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ff30 	bl	8000700 <setLights>
		}
		break;
 80008a0:	e07e      	b.n	80009a0 <stateMachine+0x1b4>
	}
	case s_green_car_go:{
		if(ev == ev_button_push){
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d17d      	bne.n	80009a4 <stateMachine+0x1b8>
			ticks_left = 2500;
 80008a8:	4b47      	ldr	r3, [pc, #284]	; (80009c8 <stateMachine+0x1dc>)
 80008aa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80008ae:	601a      	str	r2, [r3, #0]
			ev = ev_none;
 80008b0:	2300      	movs	r3, #0
 80008b2:	71fb      	strb	r3, [r7, #7]
			s = s_button_pressed_car_go;
 80008b4:	4b43      	ldr	r3, [pc, #268]	; (80009c4 <stateMachine+0x1d8>)
 80008b6:	2203      	movs	r2, #3
 80008b8:	701a      	strb	r2, [r3, #0]
			setLights(s);
 80008ba:	4b42      	ldr	r3, [pc, #264]	; (80009c4 <stateMachine+0x1d8>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff ff1e 	bl	8000700 <setLights>
			abuzz_start();
 80008c4:	f7ff fe5e 	bl	8000584 <abuzz_start>
			abuzz_p_long();
 80008c8:	f7ff fe88 	bl	80005dc <abuzz_p_long>
		}
		break;
 80008cc:	e06a      	b.n	80009a4 <stateMachine+0x1b8>
	}
	case s_button_pressed_car_go:{
		if(ev == ev_state_timeout){
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d169      	bne.n	80009a8 <stateMachine+0x1bc>
			ticks_left = 2500;
 80008d4:	4b3c      	ldr	r3, [pc, #240]	; (80009c8 <stateMachine+0x1dc>)
 80008d6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80008da:	601a      	str	r2, [r3, #0]
			ev = ev_none;
 80008dc:	2300      	movs	r3, #0
 80008de:	71fb      	strb	r3, [r7, #7]
			s = s_yellow_car_stop;
 80008e0:	4b38      	ldr	r3, [pc, #224]	; (80009c4 <stateMachine+0x1d8>)
 80008e2:	2204      	movs	r2, #4
 80008e4:	701a      	strb	r2, [r3, #0]
			setLights(s);
 80008e6:	4b37      	ldr	r3, [pc, #220]	; (80009c4 <stateMachine+0x1d8>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff ff08 	bl	8000700 <setLights>
		}
		break;
 80008f0:	e05a      	b.n	80009a8 <stateMachine+0x1bc>
	}
	case s_yellow_car_stop:{
		if(ev == ev_state_timeout){
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d159      	bne.n	80009ac <stateMachine+0x1c0>
			ticks_left = 2500;
 80008f8:	4b33      	ldr	r3, [pc, #204]	; (80009c8 <stateMachine+0x1dc>)
 80008fa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80008fe:	601a      	str	r2, [r3, #0]
			ev = ev_none;
 8000900:	2300      	movs	r3, #0
 8000902:	71fb      	strb	r3, [r7, #7]
			s = s_red_car_stoped;
 8000904:	4b2f      	ldr	r3, [pc, #188]	; (80009c4 <stateMachine+0x1d8>)
 8000906:	2205      	movs	r2, #5
 8000908:	701a      	strb	r2, [r3, #0]
			setLights(s);
 800090a:	4b2e      	ldr	r3, [pc, #184]	; (80009c4 <stateMachine+0x1d8>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fef6 	bl	8000700 <setLights>
		}
		break;
 8000914:	e04a      	b.n	80009ac <stateMachine+0x1c0>
	}
	case s_red_car_stoped:{
		if(ev == ev_state_timeout){
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	2b02      	cmp	r3, #2
 800091a:	d149      	bne.n	80009b0 <stateMachine+0x1c4>
			ticks_left = 5000;
 800091c:	4b2a      	ldr	r3, [pc, #168]	; (80009c8 <stateMachine+0x1dc>)
 800091e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000922:	601a      	str	r2, [r3, #0]
			ev = ev_none;
 8000924:	2300      	movs	r3, #0
 8000926:	71fb      	strb	r3, [r7, #7]
			s = s_red_pedestrian_go;
 8000928:	4b26      	ldr	r3, [pc, #152]	; (80009c4 <stateMachine+0x1d8>)
 800092a:	2206      	movs	r2, #6
 800092c:	701a      	strb	r2, [r3, #0]
			setLights(s);
 800092e:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <stateMachine+0x1d8>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fee4 	bl	8000700 <setLights>
			abuzz_p_short();
 8000938:	f7ff fe60 	bl	80005fc <abuzz_p_short>
		}
		break;
 800093c:	e038      	b.n	80009b0 <stateMachine+0x1c4>
	}
	case s_red_pedestrian_go:{
		if(ev == ev_state_timeout){
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	2b02      	cmp	r3, #2
 8000942:	d137      	bne.n	80009b4 <stateMachine+0x1c8>
			ticks_left = 2500;
 8000944:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <stateMachine+0x1dc>)
 8000946:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800094a:	601a      	str	r2, [r3, #0]
			ev = ev_none;
 800094c:	2300      	movs	r3, #0
 800094e:	71fb      	strb	r3, [r7, #7]
			s = s_red_pedestrian_clear;
 8000950:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <stateMachine+0x1d8>)
 8000952:	2207      	movs	r2, #7
 8000954:	701a      	strb	r2, [r3, #0]
			setLights(s);
 8000956:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <stateMachine+0x1d8>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fed0 	bl	8000700 <setLights>
			abuzz_stop();
 8000960:	f7ff fe28 	bl	80005b4 <abuzz_stop>
		}
		break;
 8000964:	e026      	b.n	80009b4 <stateMachine+0x1c8>
	}
	case s_red_pedestrian_clear:{
		if(ev == ev_state_timeout){
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	2b02      	cmp	r3, #2
 800096a:	d125      	bne.n	80009b8 <stateMachine+0x1cc>
			ticks_left = 2500;
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <stateMachine+0x1dc>)
 800096e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000972:	601a      	str	r2, [r3, #0]
			ev = ev_none;
 8000974:	2300      	movs	r3, #0
 8000976:	71fb      	strb	r3, [r7, #7]
			s = s_yellow_car_start;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <stateMachine+0x1d8>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
			setLights(s);
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <stateMachine+0x1d8>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff febc 	bl	8000700 <setLights>
		}
		break;
 8000988:	e016      	b.n	80009b8 <stateMachine+0x1cc>
	}
	default:{
		s = s_error;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <stateMachine+0x1d8>)
 800098c:	2208      	movs	r2, #8
 800098e:	701a      	strb	r2, [r3, #0]
		setLights(s);
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <stateMachine+0x1d8>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff feb3 	bl	8000700 <setLights>
		break;
 800099a:	e00e      	b.n	80009ba <stateMachine+0x1ce>
		break;
 800099c:	bf00      	nop
 800099e:	e00c      	b.n	80009ba <stateMachine+0x1ce>
		break;
 80009a0:	bf00      	nop
 80009a2:	e00a      	b.n	80009ba <stateMachine+0x1ce>
		break;
 80009a4:	bf00      	nop
 80009a6:	e008      	b.n	80009ba <stateMachine+0x1ce>
		break;
 80009a8:	bf00      	nop
 80009aa:	e006      	b.n	80009ba <stateMachine+0x1ce>
		break;
 80009ac:	bf00      	nop
 80009ae:	e004      	b.n	80009ba <stateMachine+0x1ce>
		break;
 80009b0:	bf00      	nop
 80009b2:	e002      	b.n	80009ba <stateMachine+0x1ce>
		break;
 80009b4:	bf00      	nop
 80009b6:	e000      	b.n	80009ba <stateMachine+0x1ce>
		break;
 80009b8:	bf00      	nop
		}
	}
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000178 	.word	0x20000178
 80009c8:	20000174 	.word	0x20000174

080009cc <my_EXTI15_10_IRQHandler>:


void my_EXTI15_10_IRQHandler(){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	evq_push_back(ev_button_push);
 80009d0:	2001      	movs	r0, #1
 80009d2:	f7ff fe23 	bl	800061c <evq_push_back>

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <my_SysTick_Handler>:

void my_SysTick_Handler()
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	if(ticks_left != 0){
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <my_SysTick_Handler+0x28>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d00b      	beq.n	8000a00 <my_SysTick_Handler+0x24>
		ticks_left--;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <my_SysTick_Handler+0x28>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	3b01      	subs	r3, #1
 80009ee:	4a05      	ldr	r2, [pc, #20]	; (8000a04 <my_SysTick_Handler+0x28>)
 80009f0:	6013      	str	r3, [r2, #0]
		if(ticks_left == 0){
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <my_SysTick_Handler+0x28>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d102      	bne.n	8000a00 <my_SysTick_Handler+0x24>
			evq_push_back(ev_state_timeout);
 80009fa:	2002      	movs	r0, #2
 80009fc:	f7ff fe0e 	bl	800061c <evq_push_back>
		}
	}
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000174 	.word	0x20000174

08000a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a0c:	f000 fb0c 	bl	8001028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a10:	f000 f816 	bl	8000a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a14:	f000 f904 	bl	8000c20 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a18:	f000 f8d8 	bl	8000bcc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000a1c:	f000 f87c 	bl	8000b18 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a20:	2100      	movs	r1, #0
 8000a22:	4806      	ldr	r0, [pc, #24]	; (8000a3c <main+0x34>)
 8000a24:	f001 fb2e 	bl	8002084 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  stateMachine(ev_reset);
 8000a28:	2003      	movs	r0, #3
 8000a2a:	f7ff fedf 	bl	80007ec <stateMachine>

  while (1)
  {
	  stateMachine(evq_pop_front());
 8000a2e:	f7ff fe2b 	bl	8000688 <evq_pop_front>
 8000a32:	4603      	mov	r3, r0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff fed9 	bl	80007ec <stateMachine>
 8000a3a:	e7f8      	b.n	8000a2e <main+0x26>
 8000a3c:	200000d0 	.word	0x200000d0

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b094      	sub	sp, #80	; 0x50
 8000a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a46:	f107 0320 	add.w	r3, r7, #32
 8000a4a:	2230      	movs	r2, #48	; 0x30
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f002 fb16 	bl	8003080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a64:	2300      	movs	r3, #0
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	4b29      	ldr	r3, [pc, #164]	; (8000b10 <SystemClock_Config+0xd0>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	4a28      	ldr	r2, [pc, #160]	; (8000b10 <SystemClock_Config+0xd0>)
 8000a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a72:	6413      	str	r3, [r2, #64]	; 0x40
 8000a74:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <SystemClock_Config+0xd0>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a80:	2300      	movs	r3, #0
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <SystemClock_Config+0xd4>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a8c:	4a21      	ldr	r2, [pc, #132]	; (8000b14 <SystemClock_Config+0xd4>)
 8000a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a92:	6013      	str	r3, [r2, #0]
 8000a94:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <SystemClock_Config+0xd4>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa8:	2310      	movs	r3, #16
 8000aaa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aac:	2302      	movs	r3, #2
 8000aae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ab4:	2310      	movs	r3, #16
 8000ab6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ab8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000abc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ac2:	2307      	movs	r3, #7
 8000ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac6:	f107 0320 	add.w	r3, r7, #32
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 fdf2 	bl	80016b4 <HAL_RCC_OscConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ad6:	f000 f92d 	bl	8000d34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ada:	230f      	movs	r3, #15
 8000adc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ae6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	2102      	movs	r1, #2
 8000af6:	4618      	mov	r0, r3
 8000af8:	f001 f854 	bl	8001ba4 <HAL_RCC_ClockConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b02:	f000 f917 	bl	8000d34 <Error_Handler>
  }
}
 8000b06:	bf00      	nop
 8000b08:	3750      	adds	r7, #80	; 0x50
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40007000 	.word	0x40007000

08000b18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1e:	f107 0320 	add.w	r3, r7, #32
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]
 8000b36:	615a      	str	r2, [r3, #20]
 8000b38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b3a:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <MX_TIM3_Init+0xac>)
 8000b3c:	4a22      	ldr	r2, [pc, #136]	; (8000bc8 <MX_TIM3_Init+0xb0>)
 8000b3e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b40:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <MX_TIM3_Init+0xac>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b46:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <MX_TIM3_Init+0xac>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <MX_TIM3_Init+0xac>)
 8000b4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <MX_TIM3_Init+0xac>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <MX_TIM3_Init+0xac>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b60:	4818      	ldr	r0, [pc, #96]	; (8000bc4 <MX_TIM3_Init+0xac>)
 8000b62:	f001 fa3f 	bl	8001fe4 <HAL_TIM_PWM_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000b6c:	f000 f8e2 	bl	8000d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b78:	f107 0320 	add.w	r3, r7, #32
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4811      	ldr	r0, [pc, #68]	; (8000bc4 <MX_TIM3_Init+0xac>)
 8000b80:	f001 fe24 	bl	80027cc <HAL_TIMEx_MasterConfigSynchronization>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000b8a:	f000 f8d3 	bl	8000d34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b8e:	2360      	movs	r3, #96	; 0x60
 8000b90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4807      	ldr	r0, [pc, #28]	; (8000bc4 <MX_TIM3_Init+0xac>)
 8000ba6:	f001 fb1d 	bl	80021e4 <HAL_TIM_PWM_ConfigChannel>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000bb0:	f000 f8c0 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bb4:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <MX_TIM3_Init+0xac>)
 8000bb6:	f000 f90d 	bl	8000dd4 <HAL_TIM_MspPostInit>

}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	; 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200000d0 	.word	0x200000d0
 8000bc8:	40000400 	.word	0x40000400

08000bcc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <MX_USART2_UART_Init+0x4c>)
 8000bd2:	4a12      	ldr	r2, [pc, #72]	; (8000c1c <MX_USART2_UART_Init+0x50>)
 8000bd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <MX_USART2_UART_Init+0x4c>)
 8000bd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_USART2_UART_Init+0x4c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_USART2_UART_Init+0x4c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <MX_USART2_UART_Init+0x4c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_USART2_UART_Init+0x4c>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <MX_USART2_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_USART2_UART_Init+0x4c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c02:	4805      	ldr	r0, [pc, #20]	; (8000c18 <MX_USART2_UART_Init+0x4c>)
 8000c04:	f001 fe50 	bl	80028a8 <HAL_UART_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c0e:	f000 f891 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000118 	.word	0x20000118
 8000c1c:	40004400 	.word	0x40004400

08000c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b3b      	ldr	r3, [pc, #236]	; (8000d28 <MX_GPIO_Init+0x108>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a3a      	ldr	r2, [pc, #232]	; (8000d28 <MX_GPIO_Init+0x108>)
 8000c40:	f043 0304 	orr.w	r3, r3, #4
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b38      	ldr	r3, [pc, #224]	; (8000d28 <MX_GPIO_Init+0x108>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b34      	ldr	r3, [pc, #208]	; (8000d28 <MX_GPIO_Init+0x108>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a33      	ldr	r2, [pc, #204]	; (8000d28 <MX_GPIO_Init+0x108>)
 8000c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b31      	ldr	r3, [pc, #196]	; (8000d28 <MX_GPIO_Init+0x108>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	4b2d      	ldr	r3, [pc, #180]	; (8000d28 <MX_GPIO_Init+0x108>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a2c      	ldr	r2, [pc, #176]	; (8000d28 <MX_GPIO_Init+0x108>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b2a      	ldr	r3, [pc, #168]	; (8000d28 <MX_GPIO_Init+0x108>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <MX_GPIO_Init+0x108>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a25      	ldr	r2, [pc, #148]	; (8000d28 <MX_GPIO_Init+0x108>)
 8000c94:	f043 0302 	orr.w	r3, r3, #2
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b23      	ldr	r3, [pc, #140]	; (8000d28 <MX_GPIO_Init+0x108>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TrafficLightA_Pin|TrafficLightB_Pin|TrafficLightC_Pin|TrafficLightD_Pin
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	213f      	movs	r1, #63	; 0x3f
 8000caa:	4820      	ldr	r0, [pc, #128]	; (8000d2c <MX_GPIO_Init+0x10c>)
 8000cac:	f000 fcc4 	bl	8001638 <HAL_GPIO_WritePin>
                          |TrafficLightE_Pin|TrafficLightIndicator_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2120      	movs	r1, #32
 8000cb4:	481e      	ldr	r0, [pc, #120]	; (8000d30 <MX_GPIO_Init+0x110>)
 8000cb6:	f000 fcbf 	bl	8001638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cc0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4816      	ldr	r0, [pc, #88]	; (8000d2c <MX_GPIO_Init+0x10c>)
 8000cd2:	f000 fb2d 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pins : TrafficLightA_Pin TrafficLightB_Pin TrafficLightC_Pin TrafficLightD_Pin
                           TrafficLightE_Pin TrafficLightIndicator_Pin */
  GPIO_InitStruct.Pin = TrafficLightA_Pin|TrafficLightB_Pin|TrafficLightC_Pin|TrafficLightD_Pin
 8000cd6:	233f      	movs	r3, #63	; 0x3f
 8000cd8:	617b      	str	r3, [r7, #20]
                          |TrafficLightE_Pin|TrafficLightIndicator_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	480f      	ldr	r0, [pc, #60]	; (8000d2c <MX_GPIO_Init+0x10c>)
 8000cee:	f000 fb1f 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cf2:	2320      	movs	r3, #32
 8000cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	4809      	ldr	r0, [pc, #36]	; (8000d30 <MX_GPIO_Init+0x110>)
 8000d0a:	f000 fb11 	bl	8001330 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	2028      	movs	r0, #40	; 0x28
 8000d14:	f000 fad5 	bl	80012c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d18:	2028      	movs	r0, #40	; 0x28
 8000d1a:	f000 faee 	bl	80012fa <HAL_NVIC_EnableIRQ>

}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	; 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020800 	.word	0x40020800
 8000d30:	40020000 	.word	0x40020000

08000d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d38:	b672      	cpsid	i
}
 8000d3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <Error_Handler+0x8>
	...

08000d40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	4a0f      	ldr	r2, [pc, #60]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d54:	6453      	str	r3, [r2, #68]	; 0x44
 8000d56:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	603b      	str	r3, [r7, #0]
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	4a08      	ldr	r2, [pc, #32]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d70:	6413      	str	r3, [r2, #64]	; 0x40
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d7e:	2007      	movs	r0, #7
 8000d80:	f000 fa94 	bl	80012ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40023800 	.word	0x40023800

08000d90 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <HAL_TIM_PWM_MspInit+0x3c>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d10d      	bne.n	8000dbe <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <HAL_TIM_PWM_MspInit+0x40>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	4a09      	ldr	r2, [pc, #36]	; (8000dd0 <HAL_TIM_PWM_MspInit+0x40>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
 8000db2:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <HAL_TIM_PWM_MspInit+0x40>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000dbe:	bf00      	nop
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40000400 	.word	0x40000400
 8000dd0:	40023800 	.word	0x40023800

08000dd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <HAL_TIM_MspPostInit+0x68>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d11d      	bne.n	8000e32 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <HAL_TIM_MspPostInit+0x6c>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a10      	ldr	r2, [pc, #64]	; (8000e40 <HAL_TIM_MspPostInit+0x6c>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <HAL_TIM_MspPostInit+0x6c>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e12:	2340      	movs	r3, #64	; 0x40
 8000e14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e22:	2302      	movs	r3, #2
 8000e24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 030c 	add.w	r3, r7, #12
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4805      	ldr	r0, [pc, #20]	; (8000e44 <HAL_TIM_MspPostInit+0x70>)
 8000e2e:	f000 fa7f 	bl	8001330 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e32:	bf00      	nop
 8000e34:	3720      	adds	r7, #32
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40000400 	.word	0x40000400
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40020000 	.word	0x40020000

08000e48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a19      	ldr	r2, [pc, #100]	; (8000ecc <HAL_UART_MspInit+0x84>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d12b      	bne.n	8000ec2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e78:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a10      	ldr	r2, [pc, #64]	; (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ea2:	230c      	movs	r3, #12
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <HAL_UART_MspInit+0x8c>)
 8000ebe:	f000 fa37 	bl	8001330 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ec2:	bf00      	nop
 8000ec4:	3728      	adds	r7, #40	; 0x28
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40004400 	.word	0x40004400
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020000 	.word	0x40020000

08000ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <NMI_Handler+0x4>

08000ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <HardFault_Handler+0x4>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <BusFault_Handler+0x4>

08000ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <UsageFault_Handler+0x4>

08000ef6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	my_SysTick_Handler();
 8000f24:	f7ff fd5a 	bl	80009dc <my_SysTick_Handler>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f28:	f000 f8d0 	bl	80010cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	my_EXTI15_10_IRQHandler();
 8000f34:	f7ff fd4a 	bl	80009cc <my_EXTI15_10_IRQHandler>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f38:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f3c:	f000 fb96 	bl	800166c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <_sbrk>:
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	4a14      	ldr	r2, [pc, #80]	; (8000fa0 <_sbrk+0x5c>)
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <_sbrk+0x60>)
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <_sbrk+0x22>
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <_sbrk+0x64>)
 8000f62:	4a12      	ldr	r2, [pc, #72]	; (8000fac <_sbrk+0x68>)
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <_sbrk+0x64>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d207      	bcs.n	8000f84 <_sbrk+0x40>
 8000f74:	f002 f85a 	bl	800302c <__errno>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	e009      	b.n	8000f98 <_sbrk+0x54>
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <_sbrk+0x64>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <_sbrk+0x64>)
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20018000 	.word	0x20018000
 8000fa4:	00000400 	.word	0x00000400
 8000fa8:	2000017c 	.word	0x2000017c
 8000fac:	20000198 	.word	0x20000198

08000fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <SystemInit+0x20>)
 8000fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <SystemInit+0x20>)
 8000fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <Reset_Handler>:
 8000fd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800100c <LoopFillZerobss+0x12>
 8000fd8:	480d      	ldr	r0, [pc, #52]	; (8001010 <LoopFillZerobss+0x16>)
 8000fda:	490e      	ldr	r1, [pc, #56]	; (8001014 <LoopFillZerobss+0x1a>)
 8000fdc:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <LoopFillZerobss+0x1e>)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e002      	b.n	8000fe8 <LoopCopyDataInit>

08000fe2 <CopyDataInit>:
 8000fe2:	58d4      	ldr	r4, [r2, r3]
 8000fe4:	50c4      	str	r4, [r0, r3]
 8000fe6:	3304      	adds	r3, #4

08000fe8 <LoopCopyDataInit>:
 8000fe8:	18c4      	adds	r4, r0, r3
 8000fea:	428c      	cmp	r4, r1
 8000fec:	d3f9      	bcc.n	8000fe2 <CopyDataInit>
 8000fee:	4a0b      	ldr	r2, [pc, #44]	; (800101c <LoopFillZerobss+0x22>)
 8000ff0:	4c0b      	ldr	r4, [pc, #44]	; (8001020 <LoopFillZerobss+0x26>)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e001      	b.n	8000ffa <LoopFillZerobss>

08000ff6 <FillZerobss>:
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	3204      	adds	r2, #4

08000ffa <LoopFillZerobss>:
 8000ffa:	42a2      	cmp	r2, r4
 8000ffc:	d3fb      	bcc.n	8000ff6 <FillZerobss>
 8000ffe:	f7ff ffd7 	bl	8000fb0 <SystemInit>
 8001002:	f002 f819 	bl	8003038 <__libc_init_array>
 8001006:	f7ff fcff 	bl	8000a08 <main>
 800100a:	4770      	bx	lr
 800100c:	20018000 	.word	0x20018000
 8001010:	20000000 	.word	0x20000000
 8001014:	200000b4 	.word	0x200000b4
 8001018:	08003afc 	.word	0x08003afc
 800101c:	200000b4 	.word	0x200000b4
 8001020:	20000194 	.word	0x20000194

08001024 <ADC_IRQHandler>:
 8001024:	e7fe      	b.n	8001024 <ADC_IRQHandler>
	...

08001028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <HAL_Init+0x40>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0d      	ldr	r2, [pc, #52]	; (8001068 <HAL_Init+0x40>)
 8001032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001036:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001038:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <HAL_Init+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <HAL_Init+0x40>)
 800103e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001042:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a07      	ldr	r2, [pc, #28]	; (8001068 <HAL_Init+0x40>)
 800104a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001050:	2003      	movs	r0, #3
 8001052:	f000 f92b 	bl	80012ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001056:	2000      	movs	r0, #0
 8001058:	f000 f808 	bl	800106c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800105c:	f7ff fe70 	bl	8000d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023c00 	.word	0x40023c00

0800106c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_InitTick+0x54>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_InitTick+0x58>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4619      	mov	r1, r3
 800107e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001082:	fbb3 f3f1 	udiv	r3, r3, r1
 8001086:	fbb2 f3f3 	udiv	r3, r2, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f000 f943 	bl	8001316 <HAL_SYSTICK_Config>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e00e      	b.n	80010b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b0f      	cmp	r3, #15
 800109e:	d80a      	bhi.n	80010b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a0:	2200      	movs	r2, #0
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f000 f90b 	bl	80012c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ac:	4a06      	ldr	r2, [pc, #24]	; (80010c8 <HAL_InitTick+0x5c>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
 80010b4:	e000      	b.n	80010b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000044 	.word	0x20000044
 80010c4:	2000004c 	.word	0x2000004c
 80010c8:	20000048 	.word	0x20000048

080010cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_IncTick+0x20>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_IncTick+0x24>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <HAL_IncTick+0x24>)
 80010de:	6013      	str	r3, [r2, #0]
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	2000004c 	.word	0x2000004c
 80010f0:	20000180 	.word	0x20000180

080010f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return uwTick;
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <HAL_GetTick+0x14>)
 80010fa:	681b      	ldr	r3, [r3, #0]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000180 	.word	0x20000180

0800110c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001128:	4013      	ands	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113e:	4a04      	ldr	r2, [pc, #16]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	60d3      	str	r3, [r2, #12]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <__NVIC_GetPriorityGrouping+0x18>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	f003 0307 	and.w	r3, r3, #7
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	2b00      	cmp	r3, #0
 8001180:	db0b      	blt.n	800119a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f003 021f 	and.w	r2, r3, #31
 8001188:	4907      	ldr	r1, [pc, #28]	; (80011a8 <__NVIC_EnableIRQ+0x38>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	095b      	lsrs	r3, r3, #5
 8001190:	2001      	movs	r0, #1
 8001192:	fa00 f202 	lsl.w	r2, r0, r2
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000e100 	.word	0xe000e100

080011ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	db0a      	blt.n	80011d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	490c      	ldr	r1, [pc, #48]	; (80011f8 <__NVIC_SetPriority+0x4c>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	0112      	lsls	r2, r2, #4
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	440b      	add	r3, r1
 80011d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d4:	e00a      	b.n	80011ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4908      	ldr	r1, [pc, #32]	; (80011fc <__NVIC_SetPriority+0x50>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	3b04      	subs	r3, #4
 80011e4:	0112      	lsls	r2, r2, #4
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	440b      	add	r3, r1
 80011ea:	761a      	strb	r2, [r3, #24]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000e100 	.word	0xe000e100
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f1c3 0307 	rsb	r3, r3, #7
 800121a:	2b04      	cmp	r3, #4
 800121c:	bf28      	it	cs
 800121e:	2304      	movcs	r3, #4
 8001220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3304      	adds	r3, #4
 8001226:	2b06      	cmp	r3, #6
 8001228:	d902      	bls.n	8001230 <NVIC_EncodePriority+0x30>
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3b03      	subs	r3, #3
 800122e:	e000      	b.n	8001232 <NVIC_EncodePriority+0x32>
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	f04f 32ff 	mov.w	r2, #4294967295
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	401a      	ands	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001248:	f04f 31ff 	mov.w	r1, #4294967295
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43d9      	mvns	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	4313      	orrs	r3, r2
         );
}
 800125a:	4618      	mov	r0, r3
 800125c:	3724      	adds	r7, #36	; 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3b01      	subs	r3, #1
 8001274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001278:	d301      	bcc.n	800127e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127a:	2301      	movs	r3, #1
 800127c:	e00f      	b.n	800129e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <SysTick_Config+0x40>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001286:	210f      	movs	r1, #15
 8001288:	f04f 30ff 	mov.w	r0, #4294967295
 800128c:	f7ff ff8e 	bl	80011ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <SysTick_Config+0x40>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <SysTick_Config+0x40>)
 8001298:	2207      	movs	r2, #7
 800129a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	e000e010 	.word	0xe000e010

080012ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ff29 	bl	800110c <__NVIC_SetPriorityGrouping>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d4:	f7ff ff3e 	bl	8001154 <__NVIC_GetPriorityGrouping>
 80012d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	68b9      	ldr	r1, [r7, #8]
 80012de:	6978      	ldr	r0, [r7, #20]
 80012e0:	f7ff ff8e 	bl	8001200 <NVIC_EncodePriority>
 80012e4:	4602      	mov	r2, r0
 80012e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff5d 	bl	80011ac <__NVIC_SetPriority>
}
 80012f2:	bf00      	nop
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff31 	bl	8001170 <__NVIC_EnableIRQ>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff ffa2 	bl	8001268 <SysTick_Config>
 8001324:	4603      	mov	r3, r0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	; 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001342:	2300      	movs	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
 800134a:	e159      	b.n	8001600 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800134c:	2201      	movs	r2, #1
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	429a      	cmp	r2, r3
 8001366:	f040 8148 	bne.w	80015fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	2b01      	cmp	r3, #1
 8001374:	d005      	beq.n	8001382 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800137e:	2b02      	cmp	r3, #2
 8001380:	d130      	bne.n	80013e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	2203      	movs	r2, #3
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	68da      	ldr	r2, [r3, #12]
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013b8:	2201      	movs	r2, #1
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	091b      	lsrs	r3, r3, #4
 80013ce:	f003 0201 	and.w	r2, r3, #1
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	d017      	beq.n	8001420 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d123      	bne.n	8001474 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	08da      	lsrs	r2, r3, #3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3208      	adds	r2, #8
 8001434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	220f      	movs	r2, #15
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	08da      	lsrs	r2, r3, #3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3208      	adds	r2, #8
 800146e:	69b9      	ldr	r1, [r7, #24]
 8001470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	2203      	movs	r2, #3
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0203 	and.w	r2, r3, #3
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 80a2 	beq.w	80015fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b57      	ldr	r3, [pc, #348]	; (8001618 <HAL_GPIO_Init+0x2e8>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	4a56      	ldr	r2, [pc, #344]	; (8001618 <HAL_GPIO_Init+0x2e8>)
 80014c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c4:	6453      	str	r3, [r2, #68]	; 0x44
 80014c6:	4b54      	ldr	r3, [pc, #336]	; (8001618 <HAL_GPIO_Init+0x2e8>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014d2:	4a52      	ldr	r2, [pc, #328]	; (800161c <HAL_GPIO_Init+0x2ec>)
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	089b      	lsrs	r3, r3, #2
 80014d8:	3302      	adds	r3, #2
 80014da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f003 0303 	and.w	r3, r3, #3
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	220f      	movs	r2, #15
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a49      	ldr	r2, [pc, #292]	; (8001620 <HAL_GPIO_Init+0x2f0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d019      	beq.n	8001532 <HAL_GPIO_Init+0x202>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a48      	ldr	r2, [pc, #288]	; (8001624 <HAL_GPIO_Init+0x2f4>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d013      	beq.n	800152e <HAL_GPIO_Init+0x1fe>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a47      	ldr	r2, [pc, #284]	; (8001628 <HAL_GPIO_Init+0x2f8>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d00d      	beq.n	800152a <HAL_GPIO_Init+0x1fa>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a46      	ldr	r2, [pc, #280]	; (800162c <HAL_GPIO_Init+0x2fc>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d007      	beq.n	8001526 <HAL_GPIO_Init+0x1f6>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a45      	ldr	r2, [pc, #276]	; (8001630 <HAL_GPIO_Init+0x300>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d101      	bne.n	8001522 <HAL_GPIO_Init+0x1f2>
 800151e:	2304      	movs	r3, #4
 8001520:	e008      	b.n	8001534 <HAL_GPIO_Init+0x204>
 8001522:	2307      	movs	r3, #7
 8001524:	e006      	b.n	8001534 <HAL_GPIO_Init+0x204>
 8001526:	2303      	movs	r3, #3
 8001528:	e004      	b.n	8001534 <HAL_GPIO_Init+0x204>
 800152a:	2302      	movs	r3, #2
 800152c:	e002      	b.n	8001534 <HAL_GPIO_Init+0x204>
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <HAL_GPIO_Init+0x204>
 8001532:	2300      	movs	r3, #0
 8001534:	69fa      	ldr	r2, [r7, #28]
 8001536:	f002 0203 	and.w	r2, r2, #3
 800153a:	0092      	lsls	r2, r2, #2
 800153c:	4093      	lsls	r3, r2
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001544:	4935      	ldr	r1, [pc, #212]	; (800161c <HAL_GPIO_Init+0x2ec>)
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	3302      	adds	r3, #2
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001552:	4b38      	ldr	r3, [pc, #224]	; (8001634 <HAL_GPIO_Init+0x304>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001576:	4a2f      	ldr	r2, [pc, #188]	; (8001634 <HAL_GPIO_Init+0x304>)
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800157c:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <HAL_GPIO_Init+0x304>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015a0:	4a24      	ldr	r2, [pc, #144]	; (8001634 <HAL_GPIO_Init+0x304>)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015a6:	4b23      	ldr	r3, [pc, #140]	; (8001634 <HAL_GPIO_Init+0x304>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015ca:	4a1a      	ldr	r2, [pc, #104]	; (8001634 <HAL_GPIO_Init+0x304>)
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <HAL_GPIO_Init+0x304>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015f4:	4a0f      	ldr	r2, [pc, #60]	; (8001634 <HAL_GPIO_Init+0x304>)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3301      	adds	r3, #1
 80015fe:	61fb      	str	r3, [r7, #28]
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	2b0f      	cmp	r3, #15
 8001604:	f67f aea2 	bls.w	800134c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	3724      	adds	r7, #36	; 0x24
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	40013800 	.word	0x40013800
 8001620:	40020000 	.word	0x40020000
 8001624:	40020400 	.word	0x40020400
 8001628:	40020800 	.word	0x40020800
 800162c:	40020c00 	.word	0x40020c00
 8001630:	40021000 	.word	0x40021000
 8001634:	40013c00 	.word	0x40013c00

08001638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	807b      	strh	r3, [r7, #2]
 8001644:	4613      	mov	r3, r2
 8001646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001648:	787b      	ldrb	r3, [r7, #1]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800164e:	887a      	ldrh	r2, [r7, #2]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001654:	e003      	b.n	800165e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001656:	887b      	ldrh	r3, [r7, #2]
 8001658:	041a      	lsls	r2, r3, #16
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	619a      	str	r2, [r3, #24]
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
	...

0800166c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001678:	695a      	ldr	r2, [r3, #20]
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	4013      	ands	r3, r2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d006      	beq.n	8001690 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001684:	88fb      	ldrh	r3, [r7, #6]
 8001686:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f806 	bl	800169c <HAL_GPIO_EXTI_Callback>
  }
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40013c00 	.word	0x40013c00

0800169c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e267      	b.n	8001b96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d075      	beq.n	80017be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016d2:	4b88      	ldr	r3, [pc, #544]	; (80018f4 <HAL_RCC_OscConfig+0x240>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d00c      	beq.n	80016f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016de:	4b85      	ldr	r3, [pc, #532]	; (80018f4 <HAL_RCC_OscConfig+0x240>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016e6:	2b08      	cmp	r3, #8
 80016e8:	d112      	bne.n	8001710 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ea:	4b82      	ldr	r3, [pc, #520]	; (80018f4 <HAL_RCC_OscConfig+0x240>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016f6:	d10b      	bne.n	8001710 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f8:	4b7e      	ldr	r3, [pc, #504]	; (80018f4 <HAL_RCC_OscConfig+0x240>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d05b      	beq.n	80017bc <HAL_RCC_OscConfig+0x108>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d157      	bne.n	80017bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e242      	b.n	8001b96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001718:	d106      	bne.n	8001728 <HAL_RCC_OscConfig+0x74>
 800171a:	4b76      	ldr	r3, [pc, #472]	; (80018f4 <HAL_RCC_OscConfig+0x240>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a75      	ldr	r2, [pc, #468]	; (80018f4 <HAL_RCC_OscConfig+0x240>)
 8001720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	e01d      	b.n	8001764 <HAL_RCC_OscConfig+0xb0>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001730:	d10c      	bne.n	800174c <HAL_RCC_OscConfig+0x98>
 8001732:	4b70      	ldr	r3, [pc, #448]	; (80018f4 <HAL_RCC_OscConfig+0x240>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a6f      	ldr	r2, [pc, #444]	; (80018f4 <HAL_RCC_OscConfig+0x240>)
 8001738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	4b6d      	ldr	r3, [pc, #436]	; (80018f4 <HAL_RCC_OscConfig+0x240>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a6c      	ldr	r2, [pc, #432]	; (80018f4 <HAL_RCC_OscConfig+0x240>)
 8001744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e00b      	b.n	8001764 <HAL_RCC_OscConfig+0xb0>
 800174c:	4b69      	ldr	r3, [pc, #420]	; (80018f4 <HAL_RCC_OscConfig+0x240>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a68      	ldr	r2, [pc, #416]	; (80018f4 <HAL_RCC_OscConfig+0x240>)
 8001752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	4b66      	ldr	r3, [pc, #408]	; (80018f4 <HAL_RCC_OscConfig+0x240>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a65      	ldr	r2, [pc, #404]	; (80018f4 <HAL_RCC_OscConfig+0x240>)
 800175e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d013      	beq.n	8001794 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176c:	f7ff fcc2 	bl	80010f4 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001774:	f7ff fcbe 	bl	80010f4 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b64      	cmp	r3, #100	; 0x64
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e207      	b.n	8001b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001786:	4b5b      	ldr	r3, [pc, #364]	; (80018f4 <HAL_RCC_OscConfig+0x240>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0xc0>
 8001792:	e014      	b.n	80017be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff fcae 	bl	80010f4 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800179c:	f7ff fcaa 	bl	80010f4 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b64      	cmp	r3, #100	; 0x64
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e1f3      	b.n	8001b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ae:	4b51      	ldr	r3, [pc, #324]	; (80018f4 <HAL_RCC_OscConfig+0x240>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0xe8>
 80017ba:	e000      	b.n	80017be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d063      	beq.n	8001892 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ca:	4b4a      	ldr	r3, [pc, #296]	; (80018f4 <HAL_RCC_OscConfig+0x240>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00b      	beq.n	80017ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017d6:	4b47      	ldr	r3, [pc, #284]	; (80018f4 <HAL_RCC_OscConfig+0x240>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017de:	2b08      	cmp	r3, #8
 80017e0:	d11c      	bne.n	800181c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017e2:	4b44      	ldr	r3, [pc, #272]	; (80018f4 <HAL_RCC_OscConfig+0x240>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d116      	bne.n	800181c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ee:	4b41      	ldr	r3, [pc, #260]	; (80018f4 <HAL_RCC_OscConfig+0x240>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d005      	beq.n	8001806 <HAL_RCC_OscConfig+0x152>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d001      	beq.n	8001806 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e1c7      	b.n	8001b96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001806:	4b3b      	ldr	r3, [pc, #236]	; (80018f4 <HAL_RCC_OscConfig+0x240>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4937      	ldr	r1, [pc, #220]	; (80018f4 <HAL_RCC_OscConfig+0x240>)
 8001816:	4313      	orrs	r3, r2
 8001818:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800181a:	e03a      	b.n	8001892 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d020      	beq.n	8001866 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001824:	4b34      	ldr	r3, [pc, #208]	; (80018f8 <HAL_RCC_OscConfig+0x244>)
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182a:	f7ff fc63 	bl	80010f4 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001832:	f7ff fc5f 	bl	80010f4 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e1a8      	b.n	8001b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001844:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <HAL_RCC_OscConfig+0x240>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001850:	4b28      	ldr	r3, [pc, #160]	; (80018f4 <HAL_RCC_OscConfig+0x240>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	4925      	ldr	r1, [pc, #148]	; (80018f4 <HAL_RCC_OscConfig+0x240>)
 8001860:	4313      	orrs	r3, r2
 8001862:	600b      	str	r3, [r1, #0]
 8001864:	e015      	b.n	8001892 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001866:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <HAL_RCC_OscConfig+0x244>)
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7ff fc42 	bl	80010f4 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001874:	f7ff fc3e 	bl	80010f4 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e187      	b.n	8001b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001886:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <HAL_RCC_OscConfig+0x240>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	2b00      	cmp	r3, #0
 800189c:	d036      	beq.n	800190c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d016      	beq.n	80018d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <HAL_RCC_OscConfig+0x248>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ac:	f7ff fc22 	bl	80010f4 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018b4:	f7ff fc1e 	bl	80010f4 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e167      	b.n	8001b96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <HAL_RCC_OscConfig+0x240>)
 80018c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0f0      	beq.n	80018b4 <HAL_RCC_OscConfig+0x200>
 80018d2:	e01b      	b.n	800190c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018d4:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_RCC_OscConfig+0x248>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018da:	f7ff fc0b 	bl	80010f4 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e0:	e00e      	b.n	8001900 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018e2:	f7ff fc07 	bl	80010f4 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d907      	bls.n	8001900 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e150      	b.n	8001b96 <HAL_RCC_OscConfig+0x4e2>
 80018f4:	40023800 	.word	0x40023800
 80018f8:	42470000 	.word	0x42470000
 80018fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001900:	4b88      	ldr	r3, [pc, #544]	; (8001b24 <HAL_RCC_OscConfig+0x470>)
 8001902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1ea      	bne.n	80018e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 8097 	beq.w	8001a48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800191a:	2300      	movs	r3, #0
 800191c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800191e:	4b81      	ldr	r3, [pc, #516]	; (8001b24 <HAL_RCC_OscConfig+0x470>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10f      	bne.n	800194a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	4b7d      	ldr	r3, [pc, #500]	; (8001b24 <HAL_RCC_OscConfig+0x470>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	4a7c      	ldr	r2, [pc, #496]	; (8001b24 <HAL_RCC_OscConfig+0x470>)
 8001934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001938:	6413      	str	r3, [r2, #64]	; 0x40
 800193a:	4b7a      	ldr	r3, [pc, #488]	; (8001b24 <HAL_RCC_OscConfig+0x470>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001946:	2301      	movs	r3, #1
 8001948:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194a:	4b77      	ldr	r3, [pc, #476]	; (8001b28 <HAL_RCC_OscConfig+0x474>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001952:	2b00      	cmp	r3, #0
 8001954:	d118      	bne.n	8001988 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001956:	4b74      	ldr	r3, [pc, #464]	; (8001b28 <HAL_RCC_OscConfig+0x474>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a73      	ldr	r2, [pc, #460]	; (8001b28 <HAL_RCC_OscConfig+0x474>)
 800195c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001960:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001962:	f7ff fbc7 	bl	80010f4 <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800196a:	f7ff fbc3 	bl	80010f4 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e10c      	b.n	8001b96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197c:	4b6a      	ldr	r3, [pc, #424]	; (8001b28 <HAL_RCC_OscConfig+0x474>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0f0      	beq.n	800196a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d106      	bne.n	800199e <HAL_RCC_OscConfig+0x2ea>
 8001990:	4b64      	ldr	r3, [pc, #400]	; (8001b24 <HAL_RCC_OscConfig+0x470>)
 8001992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001994:	4a63      	ldr	r2, [pc, #396]	; (8001b24 <HAL_RCC_OscConfig+0x470>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6713      	str	r3, [r2, #112]	; 0x70
 800199c:	e01c      	b.n	80019d8 <HAL_RCC_OscConfig+0x324>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b05      	cmp	r3, #5
 80019a4:	d10c      	bne.n	80019c0 <HAL_RCC_OscConfig+0x30c>
 80019a6:	4b5f      	ldr	r3, [pc, #380]	; (8001b24 <HAL_RCC_OscConfig+0x470>)
 80019a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019aa:	4a5e      	ldr	r2, [pc, #376]	; (8001b24 <HAL_RCC_OscConfig+0x470>)
 80019ac:	f043 0304 	orr.w	r3, r3, #4
 80019b0:	6713      	str	r3, [r2, #112]	; 0x70
 80019b2:	4b5c      	ldr	r3, [pc, #368]	; (8001b24 <HAL_RCC_OscConfig+0x470>)
 80019b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b6:	4a5b      	ldr	r2, [pc, #364]	; (8001b24 <HAL_RCC_OscConfig+0x470>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6713      	str	r3, [r2, #112]	; 0x70
 80019be:	e00b      	b.n	80019d8 <HAL_RCC_OscConfig+0x324>
 80019c0:	4b58      	ldr	r3, [pc, #352]	; (8001b24 <HAL_RCC_OscConfig+0x470>)
 80019c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c4:	4a57      	ldr	r2, [pc, #348]	; (8001b24 <HAL_RCC_OscConfig+0x470>)
 80019c6:	f023 0301 	bic.w	r3, r3, #1
 80019ca:	6713      	str	r3, [r2, #112]	; 0x70
 80019cc:	4b55      	ldr	r3, [pc, #340]	; (8001b24 <HAL_RCC_OscConfig+0x470>)
 80019ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d0:	4a54      	ldr	r2, [pc, #336]	; (8001b24 <HAL_RCC_OscConfig+0x470>)
 80019d2:	f023 0304 	bic.w	r3, r3, #4
 80019d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d015      	beq.n	8001a0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e0:	f7ff fb88 	bl	80010f4 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e6:	e00a      	b.n	80019fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e8:	f7ff fb84 	bl	80010f4 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e0cb      	b.n	8001b96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019fe:	4b49      	ldr	r3, [pc, #292]	; (8001b24 <HAL_RCC_OscConfig+0x470>)
 8001a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0ee      	beq.n	80019e8 <HAL_RCC_OscConfig+0x334>
 8001a0a:	e014      	b.n	8001a36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0c:	f7ff fb72 	bl	80010f4 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a12:	e00a      	b.n	8001a2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a14:	f7ff fb6e 	bl	80010f4 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e0b5      	b.n	8001b96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a2a:	4b3e      	ldr	r3, [pc, #248]	; (8001b24 <HAL_RCC_OscConfig+0x470>)
 8001a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1ee      	bne.n	8001a14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a36:	7dfb      	ldrb	r3, [r7, #23]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d105      	bne.n	8001a48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a3c:	4b39      	ldr	r3, [pc, #228]	; (8001b24 <HAL_RCC_OscConfig+0x470>)
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	4a38      	ldr	r2, [pc, #224]	; (8001b24 <HAL_RCC_OscConfig+0x470>)
 8001a42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 80a1 	beq.w	8001b94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a52:	4b34      	ldr	r3, [pc, #208]	; (8001b24 <HAL_RCC_OscConfig+0x470>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 030c 	and.w	r3, r3, #12
 8001a5a:	2b08      	cmp	r3, #8
 8001a5c:	d05c      	beq.n	8001b18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d141      	bne.n	8001aea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a66:	4b31      	ldr	r3, [pc, #196]	; (8001b2c <HAL_RCC_OscConfig+0x478>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6c:	f7ff fb42 	bl	80010f4 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a74:	f7ff fb3e 	bl	80010f4 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e087      	b.n	8001b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a86:	4b27      	ldr	r3, [pc, #156]	; (8001b24 <HAL_RCC_OscConfig+0x470>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69da      	ldr	r2, [r3, #28]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa0:	019b      	lsls	r3, r3, #6
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa8:	085b      	lsrs	r3, r3, #1
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	041b      	lsls	r3, r3, #16
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab4:	061b      	lsls	r3, r3, #24
 8001ab6:	491b      	ldr	r1, [pc, #108]	; (8001b24 <HAL_RCC_OscConfig+0x470>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001abc:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <HAL_RCC_OscConfig+0x478>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac2:	f7ff fb17 	bl	80010f4 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aca:	f7ff fb13 	bl	80010f4 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e05c      	b.n	8001b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <HAL_RCC_OscConfig+0x470>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x416>
 8001ae8:	e054      	b.n	8001b94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aea:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <HAL_RCC_OscConfig+0x478>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7ff fb00 	bl	80010f4 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af8:	f7ff fafc 	bl	80010f4 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e045      	b.n	8001b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_RCC_OscConfig+0x470>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0x444>
 8001b16:	e03d      	b.n	8001b94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d107      	bne.n	8001b30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e038      	b.n	8001b96 <HAL_RCC_OscConfig+0x4e2>
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40007000 	.word	0x40007000
 8001b2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b30:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <HAL_RCC_OscConfig+0x4ec>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d028      	beq.n	8001b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d121      	bne.n	8001b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d11a      	bne.n	8001b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b60:	4013      	ands	r3, r2
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d111      	bne.n	8001b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b76:	085b      	lsrs	r3, r3, #1
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d107      	bne.n	8001b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800

08001ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0cc      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb8:	4b68      	ldr	r3, [pc, #416]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d90c      	bls.n	8001be0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc6:	4b65      	ldr	r3, [pc, #404]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bce:	4b63      	ldr	r3, [pc, #396]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d001      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0b8      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d020      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bf8:	4b59      	ldr	r3, [pc, #356]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	4a58      	ldr	r2, [pc, #352]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c10:	4b53      	ldr	r3, [pc, #332]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	4a52      	ldr	r2, [pc, #328]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c1c:	4b50      	ldr	r3, [pc, #320]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	494d      	ldr	r1, [pc, #308]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d044      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d107      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	4b47      	ldr	r3, [pc, #284]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d119      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e07f      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d003      	beq.n	8001c62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d107      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c62:	4b3f      	ldr	r3, [pc, #252]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d109      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e06f      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c72:	4b3b      	ldr	r3, [pc, #236]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e067      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c82:	4b37      	ldr	r3, [pc, #220]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f023 0203 	bic.w	r2, r3, #3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	4934      	ldr	r1, [pc, #208]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c94:	f7ff fa2e 	bl	80010f4 <HAL_GetTick>
 8001c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9a:	e00a      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c9c:	f7ff fa2a 	bl	80010f4 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e04f      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb2:	4b2b      	ldr	r3, [pc, #172]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 020c 	and.w	r2, r3, #12
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d1eb      	bne.n	8001c9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc4:	4b25      	ldr	r3, [pc, #148]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d20c      	bcs.n	8001cec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd2:	4b22      	ldr	r3, [pc, #136]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cda:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e032      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d008      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf8:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	4916      	ldr	r1, [pc, #88]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d009      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d16:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	490e      	ldr	r1, [pc, #56]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d2a:	f000 f821 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	490a      	ldr	r1, [pc, #40]	; (8001d64 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	5ccb      	ldrb	r3, [r1, r3]
 8001d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d42:	4a09      	ldr	r2, [pc, #36]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_RCC_ClockConfig+0x1c8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff f98e 	bl	800106c <HAL_InitTick>

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023c00 	.word	0x40023c00
 8001d60:	40023800 	.word	0x40023800
 8001d64:	08003aa0 	.word	0x08003aa0
 8001d68:	20000044 	.word	0x20000044
 8001d6c:	20000048 	.word	0x20000048

08001d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d74:	b094      	sub	sp, #80	; 0x50
 8001d76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	647b      	str	r3, [r7, #68]	; 0x44
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d80:	2300      	movs	r3, #0
 8001d82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d88:	4b79      	ldr	r3, [pc, #484]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 030c 	and.w	r3, r3, #12
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d00d      	beq.n	8001db0 <HAL_RCC_GetSysClockFreq+0x40>
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	f200 80e1 	bhi.w	8001f5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0x34>
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d003      	beq.n	8001daa <HAL_RCC_GetSysClockFreq+0x3a>
 8001da2:	e0db      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001da4:	4b73      	ldr	r3, [pc, #460]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001da6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001da8:	e0db      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001daa:	4b73      	ldr	r3, [pc, #460]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x208>)
 8001dac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dae:	e0d8      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001db0:	4b6f      	ldr	r3, [pc, #444]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001db8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dba:	4b6d      	ldr	r3, [pc, #436]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d063      	beq.n	8001e8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dc6:	4b6a      	ldr	r3, [pc, #424]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	099b      	lsrs	r3, r3, #6
 8001dcc:	2200      	movs	r2, #0
 8001dce:	63bb      	str	r3, [r7, #56]	; 0x38
 8001dd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dd8:	633b      	str	r3, [r7, #48]	; 0x30
 8001dda:	2300      	movs	r3, #0
 8001ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8001dde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001de2:	4622      	mov	r2, r4
 8001de4:	462b      	mov	r3, r5
 8001de6:	f04f 0000 	mov.w	r0, #0
 8001dea:	f04f 0100 	mov.w	r1, #0
 8001dee:	0159      	lsls	r1, r3, #5
 8001df0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001df4:	0150      	lsls	r0, r2, #5
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4621      	mov	r1, r4
 8001dfc:	1a51      	subs	r1, r2, r1
 8001dfe:	6139      	str	r1, [r7, #16]
 8001e00:	4629      	mov	r1, r5
 8001e02:	eb63 0301 	sbc.w	r3, r3, r1
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e14:	4659      	mov	r1, fp
 8001e16:	018b      	lsls	r3, r1, #6
 8001e18:	4651      	mov	r1, sl
 8001e1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e1e:	4651      	mov	r1, sl
 8001e20:	018a      	lsls	r2, r1, #6
 8001e22:	4651      	mov	r1, sl
 8001e24:	ebb2 0801 	subs.w	r8, r2, r1
 8001e28:	4659      	mov	r1, fp
 8001e2a:	eb63 0901 	sbc.w	r9, r3, r1
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	f04f 0300 	mov.w	r3, #0
 8001e36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e42:	4690      	mov	r8, r2
 8001e44:	4699      	mov	r9, r3
 8001e46:	4623      	mov	r3, r4
 8001e48:	eb18 0303 	adds.w	r3, r8, r3
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	462b      	mov	r3, r5
 8001e50:	eb49 0303 	adc.w	r3, r9, r3
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	f04f 0300 	mov.w	r3, #0
 8001e5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e62:	4629      	mov	r1, r5
 8001e64:	024b      	lsls	r3, r1, #9
 8001e66:	4621      	mov	r1, r4
 8001e68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e6c:	4621      	mov	r1, r4
 8001e6e:	024a      	lsls	r2, r1, #9
 8001e70:	4610      	mov	r0, r2
 8001e72:	4619      	mov	r1, r3
 8001e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e76:	2200      	movs	r2, #0
 8001e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e80:	f7fe f9fe 	bl	8000280 <__aeabi_uldivmod>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4613      	mov	r3, r2
 8001e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e8c:	e058      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e8e:	4b38      	ldr	r3, [pc, #224]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	099b      	lsrs	r3, r3, #6
 8001e94:	2200      	movs	r2, #0
 8001e96:	4618      	mov	r0, r3
 8001e98:	4611      	mov	r1, r2
 8001e9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e9e:	623b      	str	r3, [r7, #32]
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ea8:	4642      	mov	r2, r8
 8001eaa:	464b      	mov	r3, r9
 8001eac:	f04f 0000 	mov.w	r0, #0
 8001eb0:	f04f 0100 	mov.w	r1, #0
 8001eb4:	0159      	lsls	r1, r3, #5
 8001eb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eba:	0150      	lsls	r0, r2, #5
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4641      	mov	r1, r8
 8001ec2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ec6:	4649      	mov	r1, r9
 8001ec8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ed8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001edc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ee0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ee4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	f04f 0300 	mov.w	r3, #0
 8001ef0:	00eb      	lsls	r3, r5, #3
 8001ef2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ef6:	00e2      	lsls	r2, r4, #3
 8001ef8:	4614      	mov	r4, r2
 8001efa:	461d      	mov	r5, r3
 8001efc:	4643      	mov	r3, r8
 8001efe:	18e3      	adds	r3, r4, r3
 8001f00:	603b      	str	r3, [r7, #0]
 8001f02:	464b      	mov	r3, r9
 8001f04:	eb45 0303 	adc.w	r3, r5, r3
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f16:	4629      	mov	r1, r5
 8001f18:	028b      	lsls	r3, r1, #10
 8001f1a:	4621      	mov	r1, r4
 8001f1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f20:	4621      	mov	r1, r4
 8001f22:	028a      	lsls	r2, r1, #10
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	61bb      	str	r3, [r7, #24]
 8001f2e:	61fa      	str	r2, [r7, #28]
 8001f30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f34:	f7fe f9a4 	bl	8000280 <__aeabi_uldivmod>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f40:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	0c1b      	lsrs	r3, r3, #16
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001f50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f5a:	e002      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f5c:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3750      	adds	r7, #80	; 0x50
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f6e:	bf00      	nop
 8001f70:	40023800 	.word	0x40023800
 8001f74:	00f42400 	.word	0x00f42400
 8001f78:	007a1200 	.word	0x007a1200

08001f7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f80:	4b03      	ldr	r3, [pc, #12]	; (8001f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f82:	681b      	ldr	r3, [r3, #0]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	20000044 	.word	0x20000044

08001f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f98:	f7ff fff0 	bl	8001f7c <HAL_RCC_GetHCLKFreq>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	0a9b      	lsrs	r3, r3, #10
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	4903      	ldr	r1, [pc, #12]	; (8001fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001faa:	5ccb      	ldrb	r3, [r1, r3]
 8001fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	08003ab0 	.word	0x08003ab0

08001fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fc0:	f7ff ffdc 	bl	8001f7c <HAL_RCC_GetHCLKFreq>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	0b5b      	lsrs	r3, r3, #13
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	4903      	ldr	r1, [pc, #12]	; (8001fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fd2:	5ccb      	ldrb	r3, [r1, r3]
 8001fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	08003ab0 	.word	0x08003ab0

08001fe4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e041      	b.n	800207a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d106      	bne.n	8002010 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7fe fec0 	bl	8000d90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2202      	movs	r2, #2
 8002014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3304      	adds	r3, #4
 8002020:	4619      	mov	r1, r3
 8002022:	4610      	mov	r0, r2
 8002024:	f000 f9a0 	bl	8002368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d109      	bne.n	80020a8 <HAL_TIM_PWM_Start+0x24>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b01      	cmp	r3, #1
 800209e:	bf14      	ite	ne
 80020a0:	2301      	movne	r3, #1
 80020a2:	2300      	moveq	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	e022      	b.n	80020ee <HAL_TIM_PWM_Start+0x6a>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d109      	bne.n	80020c2 <HAL_TIM_PWM_Start+0x3e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	bf14      	ite	ne
 80020ba:	2301      	movne	r3, #1
 80020bc:	2300      	moveq	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	e015      	b.n	80020ee <HAL_TIM_PWM_Start+0x6a>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d109      	bne.n	80020dc <HAL_TIM_PWM_Start+0x58>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	bf14      	ite	ne
 80020d4:	2301      	movne	r3, #1
 80020d6:	2300      	moveq	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	e008      	b.n	80020ee <HAL_TIM_PWM_Start+0x6a>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	bf14      	ite	ne
 80020e8:	2301      	movne	r3, #1
 80020ea:	2300      	moveq	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e068      	b.n	80021c8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d104      	bne.n	8002106 <HAL_TIM_PWM_Start+0x82>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002104:	e013      	b.n	800212e <HAL_TIM_PWM_Start+0xaa>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b04      	cmp	r3, #4
 800210a:	d104      	bne.n	8002116 <HAL_TIM_PWM_Start+0x92>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2202      	movs	r2, #2
 8002110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002114:	e00b      	b.n	800212e <HAL_TIM_PWM_Start+0xaa>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	2b08      	cmp	r3, #8
 800211a:	d104      	bne.n	8002126 <HAL_TIM_PWM_Start+0xa2>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2202      	movs	r2, #2
 8002120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002124:	e003      	b.n	800212e <HAL_TIM_PWM_Start+0xaa>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2202      	movs	r2, #2
 800212a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2201      	movs	r2, #1
 8002134:	6839      	ldr	r1, [r7, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f000 fb22 	bl	8002780 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a23      	ldr	r2, [pc, #140]	; (80021d0 <HAL_TIM_PWM_Start+0x14c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d107      	bne.n	8002156 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002154:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a1d      	ldr	r2, [pc, #116]	; (80021d0 <HAL_TIM_PWM_Start+0x14c>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d018      	beq.n	8002192 <HAL_TIM_PWM_Start+0x10e>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002168:	d013      	beq.n	8002192 <HAL_TIM_PWM_Start+0x10e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a19      	ldr	r2, [pc, #100]	; (80021d4 <HAL_TIM_PWM_Start+0x150>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d00e      	beq.n	8002192 <HAL_TIM_PWM_Start+0x10e>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a17      	ldr	r2, [pc, #92]	; (80021d8 <HAL_TIM_PWM_Start+0x154>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d009      	beq.n	8002192 <HAL_TIM_PWM_Start+0x10e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a16      	ldr	r2, [pc, #88]	; (80021dc <HAL_TIM_PWM_Start+0x158>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d004      	beq.n	8002192 <HAL_TIM_PWM_Start+0x10e>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a14      	ldr	r2, [pc, #80]	; (80021e0 <HAL_TIM_PWM_Start+0x15c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d111      	bne.n	80021b6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2b06      	cmp	r3, #6
 80021a2:	d010      	beq.n	80021c6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0201 	orr.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b4:	e007      	b.n	80021c6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f042 0201 	orr.w	r2, r2, #1
 80021c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40010000 	.word	0x40010000
 80021d4:	40000400 	.word	0x40000400
 80021d8:	40000800 	.word	0x40000800
 80021dc:	40000c00 	.word	0x40000c00
 80021e0:	40014000 	.word	0x40014000

080021e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d101      	bne.n	8002202 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80021fe:	2302      	movs	r3, #2
 8002200:	e0ae      	b.n	8002360 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b0c      	cmp	r3, #12
 800220e:	f200 809f 	bhi.w	8002350 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002212:	a201      	add	r2, pc, #4	; (adr r2, 8002218 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002218:	0800224d 	.word	0x0800224d
 800221c:	08002351 	.word	0x08002351
 8002220:	08002351 	.word	0x08002351
 8002224:	08002351 	.word	0x08002351
 8002228:	0800228d 	.word	0x0800228d
 800222c:	08002351 	.word	0x08002351
 8002230:	08002351 	.word	0x08002351
 8002234:	08002351 	.word	0x08002351
 8002238:	080022cf 	.word	0x080022cf
 800223c:	08002351 	.word	0x08002351
 8002240:	08002351 	.word	0x08002351
 8002244:	08002351 	.word	0x08002351
 8002248:	0800230f 	.word	0x0800230f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	4618      	mov	r0, r3
 8002254:	f000 f908 	bl	8002468 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699a      	ldr	r2, [r3, #24]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0208 	orr.w	r2, r2, #8
 8002266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699a      	ldr	r2, [r3, #24]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0204 	bic.w	r2, r2, #4
 8002276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6999      	ldr	r1, [r3, #24]
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	691a      	ldr	r2, [r3, #16]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	619a      	str	r2, [r3, #24]
      break;
 800228a:	e064      	b.n	8002356 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	4618      	mov	r0, r3
 8002294:	f000 f94e 	bl	8002534 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	699a      	ldr	r2, [r3, #24]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699a      	ldr	r2, [r3, #24]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6999      	ldr	r1, [r3, #24]
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	021a      	lsls	r2, r3, #8
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	619a      	str	r2, [r3, #24]
      break;
 80022cc:	e043      	b.n	8002356 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68b9      	ldr	r1, [r7, #8]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 f999 	bl	800260c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	69da      	ldr	r2, [r3, #28]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f042 0208 	orr.w	r2, r2, #8
 80022e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	69da      	ldr	r2, [r3, #28]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0204 	bic.w	r2, r2, #4
 80022f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	69d9      	ldr	r1, [r3, #28]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	61da      	str	r2, [r3, #28]
      break;
 800230c:	e023      	b.n	8002356 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68b9      	ldr	r1, [r7, #8]
 8002314:	4618      	mov	r0, r3
 8002316:	f000 f9e3 	bl	80026e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	69da      	ldr	r2, [r3, #28]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	69da      	ldr	r2, [r3, #28]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	69d9      	ldr	r1, [r3, #28]
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	021a      	lsls	r2, r3, #8
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	61da      	str	r2, [r3, #28]
      break;
 800234e:	e002      	b.n	8002356 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	75fb      	strb	r3, [r7, #23]
      break;
 8002354:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800235e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a34      	ldr	r2, [pc, #208]	; (800244c <TIM_Base_SetConfig+0xe4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d00f      	beq.n	80023a0 <TIM_Base_SetConfig+0x38>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002386:	d00b      	beq.n	80023a0 <TIM_Base_SetConfig+0x38>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a31      	ldr	r2, [pc, #196]	; (8002450 <TIM_Base_SetConfig+0xe8>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d007      	beq.n	80023a0 <TIM_Base_SetConfig+0x38>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a30      	ldr	r2, [pc, #192]	; (8002454 <TIM_Base_SetConfig+0xec>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d003      	beq.n	80023a0 <TIM_Base_SetConfig+0x38>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a2f      	ldr	r2, [pc, #188]	; (8002458 <TIM_Base_SetConfig+0xf0>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d108      	bne.n	80023b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a25      	ldr	r2, [pc, #148]	; (800244c <TIM_Base_SetConfig+0xe4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d01b      	beq.n	80023f2 <TIM_Base_SetConfig+0x8a>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c0:	d017      	beq.n	80023f2 <TIM_Base_SetConfig+0x8a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a22      	ldr	r2, [pc, #136]	; (8002450 <TIM_Base_SetConfig+0xe8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d013      	beq.n	80023f2 <TIM_Base_SetConfig+0x8a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a21      	ldr	r2, [pc, #132]	; (8002454 <TIM_Base_SetConfig+0xec>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d00f      	beq.n	80023f2 <TIM_Base_SetConfig+0x8a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a20      	ldr	r2, [pc, #128]	; (8002458 <TIM_Base_SetConfig+0xf0>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d00b      	beq.n	80023f2 <TIM_Base_SetConfig+0x8a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a1f      	ldr	r2, [pc, #124]	; (800245c <TIM_Base_SetConfig+0xf4>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d007      	beq.n	80023f2 <TIM_Base_SetConfig+0x8a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a1e      	ldr	r2, [pc, #120]	; (8002460 <TIM_Base_SetConfig+0xf8>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d003      	beq.n	80023f2 <TIM_Base_SetConfig+0x8a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a1d      	ldr	r2, [pc, #116]	; (8002464 <TIM_Base_SetConfig+0xfc>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d108      	bne.n	8002404 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	4313      	orrs	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	4313      	orrs	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a08      	ldr	r2, [pc, #32]	; (800244c <TIM_Base_SetConfig+0xe4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d103      	bne.n	8002438 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	615a      	str	r2, [r3, #20]
}
 800243e:	bf00      	nop
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40010000 	.word	0x40010000
 8002450:	40000400 	.word	0x40000400
 8002454:	40000800 	.word	0x40000800
 8002458:	40000c00 	.word	0x40000c00
 800245c:	40014000 	.word	0x40014000
 8002460:	40014400 	.word	0x40014400
 8002464:	40014800 	.word	0x40014800

08002468 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002468:	b480      	push	{r7}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	f023 0201 	bic.w	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f023 0303 	bic.w	r3, r3, #3
 800249e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f023 0302 	bic.w	r3, r3, #2
 80024b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a1c      	ldr	r2, [pc, #112]	; (8002530 <TIM_OC1_SetConfig+0xc8>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d10c      	bne.n	80024de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f023 0308 	bic.w	r3, r3, #8
 80024ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f023 0304 	bic.w	r3, r3, #4
 80024dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a13      	ldr	r2, [pc, #76]	; (8002530 <TIM_OC1_SetConfig+0xc8>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d111      	bne.n	800250a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4313      	orrs	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	621a      	str	r2, [r3, #32]
}
 8002524:	bf00      	nop
 8002526:	371c      	adds	r7, #28
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	40010000 	.word	0x40010000

08002534 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002534:	b480      	push	{r7}
 8002536:	b087      	sub	sp, #28
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	f023 0210 	bic.w	r2, r3, #16
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800256a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	021b      	lsls	r3, r3, #8
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	4313      	orrs	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f023 0320 	bic.w	r3, r3, #32
 800257e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	4313      	orrs	r3, r2
 800258a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a1e      	ldr	r2, [pc, #120]	; (8002608 <TIM_OC2_SetConfig+0xd4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d10d      	bne.n	80025b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800259a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a15      	ldr	r2, [pc, #84]	; (8002608 <TIM_OC2_SetConfig+0xd4>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d113      	bne.n	80025e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	621a      	str	r2, [r3, #32]
}
 80025fa:	bf00      	nop
 80025fc:	371c      	adds	r7, #28
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40010000 	.word	0x40010000

0800260c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800260c:	b480      	push	{r7}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800263a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f023 0303 	bic.w	r3, r3, #3
 8002642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	4313      	orrs	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	021b      	lsls	r3, r3, #8
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	4313      	orrs	r3, r2
 8002660:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a1d      	ldr	r2, [pc, #116]	; (80026dc <TIM_OC3_SetConfig+0xd0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d10d      	bne.n	8002686 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002670:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	021b      	lsls	r3, r3, #8
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	4313      	orrs	r3, r2
 800267c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a14      	ldr	r2, [pc, #80]	; (80026dc <TIM_OC3_SetConfig+0xd0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d113      	bne.n	80026b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800269c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	011b      	lsls	r3, r3, #4
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	621a      	str	r2, [r3, #32]
}
 80026d0:	bf00      	nop
 80026d2:	371c      	adds	r7, #28
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	40010000 	.word	0x40010000

080026e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800270e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	021b      	lsls	r3, r3, #8
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	4313      	orrs	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800272a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	031b      	lsls	r3, r3, #12
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a10      	ldr	r2, [pc, #64]	; (800277c <TIM_OC4_SetConfig+0x9c>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d109      	bne.n	8002754 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002746:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	019b      	lsls	r3, r3, #6
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	4313      	orrs	r3, r2
 8002752:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	621a      	str	r2, [r3, #32]
}
 800276e:	bf00      	nop
 8002770:	371c      	adds	r7, #28
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40010000 	.word	0x40010000

08002780 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002780:	b480      	push	{r7}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f003 031f 	and.w	r3, r3, #31
 8002792:	2201      	movs	r2, #1
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a1a      	ldr	r2, [r3, #32]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	43db      	mvns	r3, r3
 80027a2:	401a      	ands	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a1a      	ldr	r2, [r3, #32]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	fa01 f303 	lsl.w	r3, r1, r3
 80027b8:	431a      	orrs	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	621a      	str	r2, [r3, #32]
}
 80027be:	bf00      	nop
 80027c0:	371c      	adds	r7, #28
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027e0:	2302      	movs	r3, #2
 80027e2:	e050      	b.n	8002886 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800280a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4313      	orrs	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a1c      	ldr	r2, [pc, #112]	; (8002894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d018      	beq.n	800285a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002830:	d013      	beq.n	800285a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a18      	ldr	r2, [pc, #96]	; (8002898 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d00e      	beq.n	800285a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a16      	ldr	r2, [pc, #88]	; (800289c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d009      	beq.n	800285a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a15      	ldr	r2, [pc, #84]	; (80028a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d004      	beq.n	800285a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a13      	ldr	r2, [pc, #76]	; (80028a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d10c      	bne.n	8002874 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002860:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	4313      	orrs	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40010000 	.word	0x40010000
 8002898:	40000400 	.word	0x40000400
 800289c:	40000800 	.word	0x40000800
 80028a0:	40000c00 	.word	0x40000c00
 80028a4:	40014000 	.word	0x40014000

080028a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e03f      	b.n	800293a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d106      	bne.n	80028d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7fe faba 	bl	8000e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2224      	movs	r2, #36	; 0x24
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f929 	bl	8002b44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	691a      	ldr	r2, [r3, #16]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002900:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695a      	ldr	r2, [r3, #20]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002910:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002920:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b08a      	sub	sp, #40	; 0x28
 8002946:	af02      	add	r7, sp, #8
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	603b      	str	r3, [r7, #0]
 800294e:	4613      	mov	r3, r2
 8002950:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b20      	cmp	r3, #32
 8002960:	d17c      	bne.n	8002a5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d002      	beq.n	800296e <HAL_UART_Transmit+0x2c>
 8002968:	88fb      	ldrh	r3, [r7, #6]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e075      	b.n	8002a5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <HAL_UART_Transmit+0x3e>
 800297c:	2302      	movs	r3, #2
 800297e:	e06e      	b.n	8002a5e <HAL_UART_Transmit+0x11c>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2221      	movs	r2, #33	; 0x21
 8002992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002996:	f7fe fbad 	bl	80010f4 <HAL_GetTick>
 800299a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	88fa      	ldrh	r2, [r7, #6]
 80029a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	88fa      	ldrh	r2, [r7, #6]
 80029a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b0:	d108      	bne.n	80029c4 <HAL_UART_Transmit+0x82>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d104      	bne.n	80029c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	61bb      	str	r3, [r7, #24]
 80029c2:	e003      	b.n	80029cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80029d4:	e02a      	b.n	8002a2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2200      	movs	r2, #0
 80029de:	2180      	movs	r1, #128	; 0x80
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f840 	bl	8002a66 <UART_WaitOnFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e036      	b.n	8002a5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10b      	bne.n	8002a0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	3302      	adds	r3, #2
 8002a0a:	61bb      	str	r3, [r7, #24]
 8002a0c:	e007      	b.n	8002a1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	781a      	ldrb	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	3b01      	subs	r3, #1
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1cf      	bne.n	80029d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2140      	movs	r1, #64	; 0x40
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 f810 	bl	8002a66 <UART_WaitOnFlagUntilTimeout>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e006      	b.n	8002a5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	e000      	b.n	8002a5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a5c:	2302      	movs	r3, #2
  }
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3720      	adds	r7, #32
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b090      	sub	sp, #64	; 0x40
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	603b      	str	r3, [r7, #0]
 8002a72:	4613      	mov	r3, r2
 8002a74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a76:	e050      	b.n	8002b1a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7e:	d04c      	beq.n	8002b1a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d007      	beq.n	8002a96 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a86:	f7fe fb35 	bl	80010f4 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d241      	bcs.n	8002b1a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	330c      	adds	r3, #12
 8002a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa0:	e853 3f00 	ldrex	r3, [r3]
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002aac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	330c      	adds	r3, #12
 8002ab4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ab6:	637a      	str	r2, [r7, #52]	; 0x34
 8002ab8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002abc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002abe:	e841 2300 	strex	r3, r2, [r1]
 8002ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1e5      	bne.n	8002a96 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	3314      	adds	r3, #20
 8002ad0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	e853 3f00 	ldrex	r3, [r3]
 8002ad8:	613b      	str	r3, [r7, #16]
   return(result);
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f023 0301 	bic.w	r3, r3, #1
 8002ae0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	3314      	adds	r3, #20
 8002ae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aea:	623a      	str	r2, [r7, #32]
 8002aec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aee:	69f9      	ldr	r1, [r7, #28]
 8002af0:	6a3a      	ldr	r2, [r7, #32]
 8002af2:	e841 2300 	strex	r3, r2, [r1]
 8002af6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1e5      	bne.n	8002aca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2220      	movs	r2, #32
 8002b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e00f      	b.n	8002b3a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	4013      	ands	r3, r2
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	bf0c      	ite	eq
 8002b2a:	2301      	moveq	r3, #1
 8002b2c:	2300      	movne	r3, #0
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d09f      	beq.n	8002a78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3740      	adds	r7, #64	; 0x40
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b48:	b0c0      	sub	sp, #256	; 0x100
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b60:	68d9      	ldr	r1, [r3, #12]
 8002b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	ea40 0301 	orr.w	r3, r0, r1
 8002b6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	431a      	orrs	r2, r3
 8002b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b9c:	f021 010c 	bic.w	r1, r1, #12
 8002ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002baa:	430b      	orrs	r3, r1
 8002bac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bbe:	6999      	ldr	r1, [r3, #24]
 8002bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	ea40 0301 	orr.w	r3, r0, r1
 8002bca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	4b8f      	ldr	r3, [pc, #572]	; (8002e10 <UART_SetConfig+0x2cc>)
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d005      	beq.n	8002be4 <UART_SetConfig+0xa0>
 8002bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	4b8d      	ldr	r3, [pc, #564]	; (8002e14 <UART_SetConfig+0x2d0>)
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d104      	bne.n	8002bee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002be4:	f7ff f9ea 	bl	8001fbc <HAL_RCC_GetPCLK2Freq>
 8002be8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002bec:	e003      	b.n	8002bf6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bee:	f7ff f9d1 	bl	8001f94 <HAL_RCC_GetPCLK1Freq>
 8002bf2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c00:	f040 810c 	bne.w	8002e1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c16:	4622      	mov	r2, r4
 8002c18:	462b      	mov	r3, r5
 8002c1a:	1891      	adds	r1, r2, r2
 8002c1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c1e:	415b      	adcs	r3, r3
 8002c20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c26:	4621      	mov	r1, r4
 8002c28:	eb12 0801 	adds.w	r8, r2, r1
 8002c2c:	4629      	mov	r1, r5
 8002c2e:	eb43 0901 	adc.w	r9, r3, r1
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	f04f 0300 	mov.w	r3, #0
 8002c3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c46:	4690      	mov	r8, r2
 8002c48:	4699      	mov	r9, r3
 8002c4a:	4623      	mov	r3, r4
 8002c4c:	eb18 0303 	adds.w	r3, r8, r3
 8002c50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c54:	462b      	mov	r3, r5
 8002c56:	eb49 0303 	adc.w	r3, r9, r3
 8002c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c72:	460b      	mov	r3, r1
 8002c74:	18db      	adds	r3, r3, r3
 8002c76:	653b      	str	r3, [r7, #80]	; 0x50
 8002c78:	4613      	mov	r3, r2
 8002c7a:	eb42 0303 	adc.w	r3, r2, r3
 8002c7e:	657b      	str	r3, [r7, #84]	; 0x54
 8002c80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c88:	f7fd fafa 	bl	8000280 <__aeabi_uldivmod>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4b61      	ldr	r3, [pc, #388]	; (8002e18 <UART_SetConfig+0x2d4>)
 8002c92:	fba3 2302 	umull	r2, r3, r3, r2
 8002c96:	095b      	lsrs	r3, r3, #5
 8002c98:	011c      	lsls	r4, r3, #4
 8002c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ca4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ca8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002cac:	4642      	mov	r2, r8
 8002cae:	464b      	mov	r3, r9
 8002cb0:	1891      	adds	r1, r2, r2
 8002cb2:	64b9      	str	r1, [r7, #72]	; 0x48
 8002cb4:	415b      	adcs	r3, r3
 8002cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002cbc:	4641      	mov	r1, r8
 8002cbe:	eb12 0a01 	adds.w	sl, r2, r1
 8002cc2:	4649      	mov	r1, r9
 8002cc4:	eb43 0b01 	adc.w	fp, r3, r1
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cdc:	4692      	mov	sl, r2
 8002cde:	469b      	mov	fp, r3
 8002ce0:	4643      	mov	r3, r8
 8002ce2:	eb1a 0303 	adds.w	r3, sl, r3
 8002ce6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cea:	464b      	mov	r3, r9
 8002cec:	eb4b 0303 	adc.w	r3, fp, r3
 8002cf0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	18db      	adds	r3, r3, r3
 8002d0c:	643b      	str	r3, [r7, #64]	; 0x40
 8002d0e:	4613      	mov	r3, r2
 8002d10:	eb42 0303 	adc.w	r3, r2, r3
 8002d14:	647b      	str	r3, [r7, #68]	; 0x44
 8002d16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d1e:	f7fd faaf 	bl	8000280 <__aeabi_uldivmod>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4611      	mov	r1, r2
 8002d28:	4b3b      	ldr	r3, [pc, #236]	; (8002e18 <UART_SetConfig+0x2d4>)
 8002d2a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	2264      	movs	r2, #100	; 0x64
 8002d32:	fb02 f303 	mul.w	r3, r2, r3
 8002d36:	1acb      	subs	r3, r1, r3
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d3e:	4b36      	ldr	r3, [pc, #216]	; (8002e18 <UART_SetConfig+0x2d4>)
 8002d40:	fba3 2302 	umull	r2, r3, r3, r2
 8002d44:	095b      	lsrs	r3, r3, #5
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d4c:	441c      	add	r4, r3
 8002d4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d52:	2200      	movs	r2, #0
 8002d54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d60:	4642      	mov	r2, r8
 8002d62:	464b      	mov	r3, r9
 8002d64:	1891      	adds	r1, r2, r2
 8002d66:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d68:	415b      	adcs	r3, r3
 8002d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d70:	4641      	mov	r1, r8
 8002d72:	1851      	adds	r1, r2, r1
 8002d74:	6339      	str	r1, [r7, #48]	; 0x30
 8002d76:	4649      	mov	r1, r9
 8002d78:	414b      	adcs	r3, r1
 8002d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d88:	4659      	mov	r1, fp
 8002d8a:	00cb      	lsls	r3, r1, #3
 8002d8c:	4651      	mov	r1, sl
 8002d8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d92:	4651      	mov	r1, sl
 8002d94:	00ca      	lsls	r2, r1, #3
 8002d96:	4610      	mov	r0, r2
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	4642      	mov	r2, r8
 8002d9e:	189b      	adds	r3, r3, r2
 8002da0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002da4:	464b      	mov	r3, r9
 8002da6:	460a      	mov	r2, r1
 8002da8:	eb42 0303 	adc.w	r3, r2, r3
 8002dac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002dbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002dc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	18db      	adds	r3, r3, r3
 8002dc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dca:	4613      	mov	r3, r2
 8002dcc:	eb42 0303 	adc.w	r3, r2, r3
 8002dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002dda:	f7fd fa51 	bl	8000280 <__aeabi_uldivmod>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <UART_SetConfig+0x2d4>)
 8002de4:	fba3 1302 	umull	r1, r3, r3, r2
 8002de8:	095b      	lsrs	r3, r3, #5
 8002dea:	2164      	movs	r1, #100	; 0x64
 8002dec:	fb01 f303 	mul.w	r3, r1, r3
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	3332      	adds	r3, #50	; 0x32
 8002df6:	4a08      	ldr	r2, [pc, #32]	; (8002e18 <UART_SetConfig+0x2d4>)
 8002df8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfc:	095b      	lsrs	r3, r3, #5
 8002dfe:	f003 0207 	and.w	r2, r3, #7
 8002e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4422      	add	r2, r4
 8002e0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e0c:	e105      	b.n	800301a <UART_SetConfig+0x4d6>
 8002e0e:	bf00      	nop
 8002e10:	40011000 	.word	0x40011000
 8002e14:	40011400 	.word	0x40011400
 8002e18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e20:	2200      	movs	r2, #0
 8002e22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e2e:	4642      	mov	r2, r8
 8002e30:	464b      	mov	r3, r9
 8002e32:	1891      	adds	r1, r2, r2
 8002e34:	6239      	str	r1, [r7, #32]
 8002e36:	415b      	adcs	r3, r3
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
 8002e3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e3e:	4641      	mov	r1, r8
 8002e40:	1854      	adds	r4, r2, r1
 8002e42:	4649      	mov	r1, r9
 8002e44:	eb43 0501 	adc.w	r5, r3, r1
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	00eb      	lsls	r3, r5, #3
 8002e52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e56:	00e2      	lsls	r2, r4, #3
 8002e58:	4614      	mov	r4, r2
 8002e5a:	461d      	mov	r5, r3
 8002e5c:	4643      	mov	r3, r8
 8002e5e:	18e3      	adds	r3, r4, r3
 8002e60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e64:	464b      	mov	r3, r9
 8002e66:	eb45 0303 	adc.w	r3, r5, r3
 8002e6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e8a:	4629      	mov	r1, r5
 8002e8c:	008b      	lsls	r3, r1, #2
 8002e8e:	4621      	mov	r1, r4
 8002e90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e94:	4621      	mov	r1, r4
 8002e96:	008a      	lsls	r2, r1, #2
 8002e98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e9c:	f7fd f9f0 	bl	8000280 <__aeabi_uldivmod>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	4b60      	ldr	r3, [pc, #384]	; (8003028 <UART_SetConfig+0x4e4>)
 8002ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	011c      	lsls	r4, r3, #4
 8002eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002eb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ebc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002ec0:	4642      	mov	r2, r8
 8002ec2:	464b      	mov	r3, r9
 8002ec4:	1891      	adds	r1, r2, r2
 8002ec6:	61b9      	str	r1, [r7, #24]
 8002ec8:	415b      	adcs	r3, r3
 8002eca:	61fb      	str	r3, [r7, #28]
 8002ecc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ed0:	4641      	mov	r1, r8
 8002ed2:	1851      	adds	r1, r2, r1
 8002ed4:	6139      	str	r1, [r7, #16]
 8002ed6:	4649      	mov	r1, r9
 8002ed8:	414b      	adcs	r3, r1
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ee8:	4659      	mov	r1, fp
 8002eea:	00cb      	lsls	r3, r1, #3
 8002eec:	4651      	mov	r1, sl
 8002eee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ef2:	4651      	mov	r1, sl
 8002ef4:	00ca      	lsls	r2, r1, #3
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4603      	mov	r3, r0
 8002efc:	4642      	mov	r2, r8
 8002efe:	189b      	adds	r3, r3, r2
 8002f00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f04:	464b      	mov	r3, r9
 8002f06:	460a      	mov	r2, r1
 8002f08:	eb42 0303 	adc.w	r3, r2, r3
 8002f0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f28:	4649      	mov	r1, r9
 8002f2a:	008b      	lsls	r3, r1, #2
 8002f2c:	4641      	mov	r1, r8
 8002f2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f32:	4641      	mov	r1, r8
 8002f34:	008a      	lsls	r2, r1, #2
 8002f36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f3a:	f7fd f9a1 	bl	8000280 <__aeabi_uldivmod>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4b39      	ldr	r3, [pc, #228]	; (8003028 <UART_SetConfig+0x4e4>)
 8002f44:	fba3 1302 	umull	r1, r3, r3, r2
 8002f48:	095b      	lsrs	r3, r3, #5
 8002f4a:	2164      	movs	r1, #100	; 0x64
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	3332      	adds	r3, #50	; 0x32
 8002f56:	4a34      	ldr	r2, [pc, #208]	; (8003028 <UART_SetConfig+0x4e4>)
 8002f58:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5c:	095b      	lsrs	r3, r3, #5
 8002f5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f62:	441c      	add	r4, r3
 8002f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f68:	2200      	movs	r2, #0
 8002f6a:	673b      	str	r3, [r7, #112]	; 0x70
 8002f6c:	677a      	str	r2, [r7, #116]	; 0x74
 8002f6e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f72:	4642      	mov	r2, r8
 8002f74:	464b      	mov	r3, r9
 8002f76:	1891      	adds	r1, r2, r2
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	415b      	adcs	r3, r3
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f82:	4641      	mov	r1, r8
 8002f84:	1851      	adds	r1, r2, r1
 8002f86:	6039      	str	r1, [r7, #0]
 8002f88:	4649      	mov	r1, r9
 8002f8a:	414b      	adcs	r3, r1
 8002f8c:	607b      	str	r3, [r7, #4]
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	f04f 0300 	mov.w	r3, #0
 8002f96:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f9a:	4659      	mov	r1, fp
 8002f9c:	00cb      	lsls	r3, r1, #3
 8002f9e:	4651      	mov	r1, sl
 8002fa0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fa4:	4651      	mov	r1, sl
 8002fa6:	00ca      	lsls	r2, r1, #3
 8002fa8:	4610      	mov	r0, r2
 8002faa:	4619      	mov	r1, r3
 8002fac:	4603      	mov	r3, r0
 8002fae:	4642      	mov	r2, r8
 8002fb0:	189b      	adds	r3, r3, r2
 8002fb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fb4:	464b      	mov	r3, r9
 8002fb6:	460a      	mov	r2, r1
 8002fb8:	eb42 0303 	adc.w	r3, r2, r3
 8002fbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	663b      	str	r3, [r7, #96]	; 0x60
 8002fc8:	667a      	str	r2, [r7, #100]	; 0x64
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002fd6:	4649      	mov	r1, r9
 8002fd8:	008b      	lsls	r3, r1, #2
 8002fda:	4641      	mov	r1, r8
 8002fdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fe0:	4641      	mov	r1, r8
 8002fe2:	008a      	lsls	r2, r1, #2
 8002fe4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002fe8:	f7fd f94a 	bl	8000280 <__aeabi_uldivmod>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4b0d      	ldr	r3, [pc, #52]	; (8003028 <UART_SetConfig+0x4e4>)
 8002ff2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	2164      	movs	r1, #100	; 0x64
 8002ffa:	fb01 f303 	mul.w	r3, r1, r3
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	3332      	adds	r3, #50	; 0x32
 8003004:	4a08      	ldr	r2, [pc, #32]	; (8003028 <UART_SetConfig+0x4e4>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	f003 020f 	and.w	r2, r3, #15
 8003010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4422      	add	r2, r4
 8003018:	609a      	str	r2, [r3, #8]
}
 800301a:	bf00      	nop
 800301c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003020:	46bd      	mov	sp, r7
 8003022:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003026:	bf00      	nop
 8003028:	51eb851f 	.word	0x51eb851f

0800302c <__errno>:
 800302c:	4b01      	ldr	r3, [pc, #4]	; (8003034 <__errno+0x8>)
 800302e:	6818      	ldr	r0, [r3, #0]
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	20000050 	.word	0x20000050

08003038 <__libc_init_array>:
 8003038:	b570      	push	{r4, r5, r6, lr}
 800303a:	4d0d      	ldr	r5, [pc, #52]	; (8003070 <__libc_init_array+0x38>)
 800303c:	4c0d      	ldr	r4, [pc, #52]	; (8003074 <__libc_init_array+0x3c>)
 800303e:	1b64      	subs	r4, r4, r5
 8003040:	10a4      	asrs	r4, r4, #2
 8003042:	2600      	movs	r6, #0
 8003044:	42a6      	cmp	r6, r4
 8003046:	d109      	bne.n	800305c <__libc_init_array+0x24>
 8003048:	4d0b      	ldr	r5, [pc, #44]	; (8003078 <__libc_init_array+0x40>)
 800304a:	4c0c      	ldr	r4, [pc, #48]	; (800307c <__libc_init_array+0x44>)
 800304c:	f000 fc8e 	bl	800396c <_init>
 8003050:	1b64      	subs	r4, r4, r5
 8003052:	10a4      	asrs	r4, r4, #2
 8003054:	2600      	movs	r6, #0
 8003056:	42a6      	cmp	r6, r4
 8003058:	d105      	bne.n	8003066 <__libc_init_array+0x2e>
 800305a:	bd70      	pop	{r4, r5, r6, pc}
 800305c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003060:	4798      	blx	r3
 8003062:	3601      	adds	r6, #1
 8003064:	e7ee      	b.n	8003044 <__libc_init_array+0xc>
 8003066:	f855 3b04 	ldr.w	r3, [r5], #4
 800306a:	4798      	blx	r3
 800306c:	3601      	adds	r6, #1
 800306e:	e7f2      	b.n	8003056 <__libc_init_array+0x1e>
 8003070:	08003af4 	.word	0x08003af4
 8003074:	08003af4 	.word	0x08003af4
 8003078:	08003af4 	.word	0x08003af4
 800307c:	08003af8 	.word	0x08003af8

08003080 <memset>:
 8003080:	4402      	add	r2, r0
 8003082:	4603      	mov	r3, r0
 8003084:	4293      	cmp	r3, r2
 8003086:	d100      	bne.n	800308a <memset+0xa>
 8003088:	4770      	bx	lr
 800308a:	f803 1b01 	strb.w	r1, [r3], #1
 800308e:	e7f9      	b.n	8003084 <memset+0x4>

08003090 <siprintf>:
 8003090:	b40e      	push	{r1, r2, r3}
 8003092:	b500      	push	{lr}
 8003094:	b09c      	sub	sp, #112	; 0x70
 8003096:	ab1d      	add	r3, sp, #116	; 0x74
 8003098:	9002      	str	r0, [sp, #8]
 800309a:	9006      	str	r0, [sp, #24]
 800309c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80030a0:	4809      	ldr	r0, [pc, #36]	; (80030c8 <siprintf+0x38>)
 80030a2:	9107      	str	r1, [sp, #28]
 80030a4:	9104      	str	r1, [sp, #16]
 80030a6:	4909      	ldr	r1, [pc, #36]	; (80030cc <siprintf+0x3c>)
 80030a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80030ac:	9105      	str	r1, [sp, #20]
 80030ae:	6800      	ldr	r0, [r0, #0]
 80030b0:	9301      	str	r3, [sp, #4]
 80030b2:	a902      	add	r1, sp, #8
 80030b4:	f000 f868 	bl	8003188 <_svfiprintf_r>
 80030b8:	9b02      	ldr	r3, [sp, #8]
 80030ba:	2200      	movs	r2, #0
 80030bc:	701a      	strb	r2, [r3, #0]
 80030be:	b01c      	add	sp, #112	; 0x70
 80030c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80030c4:	b003      	add	sp, #12
 80030c6:	4770      	bx	lr
 80030c8:	20000050 	.word	0x20000050
 80030cc:	ffff0208 	.word	0xffff0208

080030d0 <__ssputs_r>:
 80030d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030d4:	688e      	ldr	r6, [r1, #8]
 80030d6:	429e      	cmp	r6, r3
 80030d8:	4682      	mov	sl, r0
 80030da:	460c      	mov	r4, r1
 80030dc:	4690      	mov	r8, r2
 80030de:	461f      	mov	r7, r3
 80030e0:	d838      	bhi.n	8003154 <__ssputs_r+0x84>
 80030e2:	898a      	ldrh	r2, [r1, #12]
 80030e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80030e8:	d032      	beq.n	8003150 <__ssputs_r+0x80>
 80030ea:	6825      	ldr	r5, [r4, #0]
 80030ec:	6909      	ldr	r1, [r1, #16]
 80030ee:	eba5 0901 	sub.w	r9, r5, r1
 80030f2:	6965      	ldr	r5, [r4, #20]
 80030f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80030f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80030fc:	3301      	adds	r3, #1
 80030fe:	444b      	add	r3, r9
 8003100:	106d      	asrs	r5, r5, #1
 8003102:	429d      	cmp	r5, r3
 8003104:	bf38      	it	cc
 8003106:	461d      	movcc	r5, r3
 8003108:	0553      	lsls	r3, r2, #21
 800310a:	d531      	bpl.n	8003170 <__ssputs_r+0xa0>
 800310c:	4629      	mov	r1, r5
 800310e:	f000 fb63 	bl	80037d8 <_malloc_r>
 8003112:	4606      	mov	r6, r0
 8003114:	b950      	cbnz	r0, 800312c <__ssputs_r+0x5c>
 8003116:	230c      	movs	r3, #12
 8003118:	f8ca 3000 	str.w	r3, [sl]
 800311c:	89a3      	ldrh	r3, [r4, #12]
 800311e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003122:	81a3      	strh	r3, [r4, #12]
 8003124:	f04f 30ff 	mov.w	r0, #4294967295
 8003128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800312c:	6921      	ldr	r1, [r4, #16]
 800312e:	464a      	mov	r2, r9
 8003130:	f000 fabe 	bl	80036b0 <memcpy>
 8003134:	89a3      	ldrh	r3, [r4, #12]
 8003136:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800313a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800313e:	81a3      	strh	r3, [r4, #12]
 8003140:	6126      	str	r6, [r4, #16]
 8003142:	6165      	str	r5, [r4, #20]
 8003144:	444e      	add	r6, r9
 8003146:	eba5 0509 	sub.w	r5, r5, r9
 800314a:	6026      	str	r6, [r4, #0]
 800314c:	60a5      	str	r5, [r4, #8]
 800314e:	463e      	mov	r6, r7
 8003150:	42be      	cmp	r6, r7
 8003152:	d900      	bls.n	8003156 <__ssputs_r+0x86>
 8003154:	463e      	mov	r6, r7
 8003156:	6820      	ldr	r0, [r4, #0]
 8003158:	4632      	mov	r2, r6
 800315a:	4641      	mov	r1, r8
 800315c:	f000 fab6 	bl	80036cc <memmove>
 8003160:	68a3      	ldr	r3, [r4, #8]
 8003162:	1b9b      	subs	r3, r3, r6
 8003164:	60a3      	str	r3, [r4, #8]
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	4433      	add	r3, r6
 800316a:	6023      	str	r3, [r4, #0]
 800316c:	2000      	movs	r0, #0
 800316e:	e7db      	b.n	8003128 <__ssputs_r+0x58>
 8003170:	462a      	mov	r2, r5
 8003172:	f000 fba5 	bl	80038c0 <_realloc_r>
 8003176:	4606      	mov	r6, r0
 8003178:	2800      	cmp	r0, #0
 800317a:	d1e1      	bne.n	8003140 <__ssputs_r+0x70>
 800317c:	6921      	ldr	r1, [r4, #16]
 800317e:	4650      	mov	r0, sl
 8003180:	f000 fabe 	bl	8003700 <_free_r>
 8003184:	e7c7      	b.n	8003116 <__ssputs_r+0x46>
	...

08003188 <_svfiprintf_r>:
 8003188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800318c:	4698      	mov	r8, r3
 800318e:	898b      	ldrh	r3, [r1, #12]
 8003190:	061b      	lsls	r3, r3, #24
 8003192:	b09d      	sub	sp, #116	; 0x74
 8003194:	4607      	mov	r7, r0
 8003196:	460d      	mov	r5, r1
 8003198:	4614      	mov	r4, r2
 800319a:	d50e      	bpl.n	80031ba <_svfiprintf_r+0x32>
 800319c:	690b      	ldr	r3, [r1, #16]
 800319e:	b963      	cbnz	r3, 80031ba <_svfiprintf_r+0x32>
 80031a0:	2140      	movs	r1, #64	; 0x40
 80031a2:	f000 fb19 	bl	80037d8 <_malloc_r>
 80031a6:	6028      	str	r0, [r5, #0]
 80031a8:	6128      	str	r0, [r5, #16]
 80031aa:	b920      	cbnz	r0, 80031b6 <_svfiprintf_r+0x2e>
 80031ac:	230c      	movs	r3, #12
 80031ae:	603b      	str	r3, [r7, #0]
 80031b0:	f04f 30ff 	mov.w	r0, #4294967295
 80031b4:	e0d1      	b.n	800335a <_svfiprintf_r+0x1d2>
 80031b6:	2340      	movs	r3, #64	; 0x40
 80031b8:	616b      	str	r3, [r5, #20]
 80031ba:	2300      	movs	r3, #0
 80031bc:	9309      	str	r3, [sp, #36]	; 0x24
 80031be:	2320      	movs	r3, #32
 80031c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80031c8:	2330      	movs	r3, #48	; 0x30
 80031ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003374 <_svfiprintf_r+0x1ec>
 80031ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031d2:	f04f 0901 	mov.w	r9, #1
 80031d6:	4623      	mov	r3, r4
 80031d8:	469a      	mov	sl, r3
 80031da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031de:	b10a      	cbz	r2, 80031e4 <_svfiprintf_r+0x5c>
 80031e0:	2a25      	cmp	r2, #37	; 0x25
 80031e2:	d1f9      	bne.n	80031d8 <_svfiprintf_r+0x50>
 80031e4:	ebba 0b04 	subs.w	fp, sl, r4
 80031e8:	d00b      	beq.n	8003202 <_svfiprintf_r+0x7a>
 80031ea:	465b      	mov	r3, fp
 80031ec:	4622      	mov	r2, r4
 80031ee:	4629      	mov	r1, r5
 80031f0:	4638      	mov	r0, r7
 80031f2:	f7ff ff6d 	bl	80030d0 <__ssputs_r>
 80031f6:	3001      	adds	r0, #1
 80031f8:	f000 80aa 	beq.w	8003350 <_svfiprintf_r+0x1c8>
 80031fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031fe:	445a      	add	r2, fp
 8003200:	9209      	str	r2, [sp, #36]	; 0x24
 8003202:	f89a 3000 	ldrb.w	r3, [sl]
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 80a2 	beq.w	8003350 <_svfiprintf_r+0x1c8>
 800320c:	2300      	movs	r3, #0
 800320e:	f04f 32ff 	mov.w	r2, #4294967295
 8003212:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003216:	f10a 0a01 	add.w	sl, sl, #1
 800321a:	9304      	str	r3, [sp, #16]
 800321c:	9307      	str	r3, [sp, #28]
 800321e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003222:	931a      	str	r3, [sp, #104]	; 0x68
 8003224:	4654      	mov	r4, sl
 8003226:	2205      	movs	r2, #5
 8003228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800322c:	4851      	ldr	r0, [pc, #324]	; (8003374 <_svfiprintf_r+0x1ec>)
 800322e:	f7fc ffd7 	bl	80001e0 <memchr>
 8003232:	9a04      	ldr	r2, [sp, #16]
 8003234:	b9d8      	cbnz	r0, 800326e <_svfiprintf_r+0xe6>
 8003236:	06d0      	lsls	r0, r2, #27
 8003238:	bf44      	itt	mi
 800323a:	2320      	movmi	r3, #32
 800323c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003240:	0711      	lsls	r1, r2, #28
 8003242:	bf44      	itt	mi
 8003244:	232b      	movmi	r3, #43	; 0x2b
 8003246:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800324a:	f89a 3000 	ldrb.w	r3, [sl]
 800324e:	2b2a      	cmp	r3, #42	; 0x2a
 8003250:	d015      	beq.n	800327e <_svfiprintf_r+0xf6>
 8003252:	9a07      	ldr	r2, [sp, #28]
 8003254:	4654      	mov	r4, sl
 8003256:	2000      	movs	r0, #0
 8003258:	f04f 0c0a 	mov.w	ip, #10
 800325c:	4621      	mov	r1, r4
 800325e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003262:	3b30      	subs	r3, #48	; 0x30
 8003264:	2b09      	cmp	r3, #9
 8003266:	d94e      	bls.n	8003306 <_svfiprintf_r+0x17e>
 8003268:	b1b0      	cbz	r0, 8003298 <_svfiprintf_r+0x110>
 800326a:	9207      	str	r2, [sp, #28]
 800326c:	e014      	b.n	8003298 <_svfiprintf_r+0x110>
 800326e:	eba0 0308 	sub.w	r3, r0, r8
 8003272:	fa09 f303 	lsl.w	r3, r9, r3
 8003276:	4313      	orrs	r3, r2
 8003278:	9304      	str	r3, [sp, #16]
 800327a:	46a2      	mov	sl, r4
 800327c:	e7d2      	b.n	8003224 <_svfiprintf_r+0x9c>
 800327e:	9b03      	ldr	r3, [sp, #12]
 8003280:	1d19      	adds	r1, r3, #4
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	9103      	str	r1, [sp, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	bfbb      	ittet	lt
 800328a:	425b      	neglt	r3, r3
 800328c:	f042 0202 	orrlt.w	r2, r2, #2
 8003290:	9307      	strge	r3, [sp, #28]
 8003292:	9307      	strlt	r3, [sp, #28]
 8003294:	bfb8      	it	lt
 8003296:	9204      	strlt	r2, [sp, #16]
 8003298:	7823      	ldrb	r3, [r4, #0]
 800329a:	2b2e      	cmp	r3, #46	; 0x2e
 800329c:	d10c      	bne.n	80032b8 <_svfiprintf_r+0x130>
 800329e:	7863      	ldrb	r3, [r4, #1]
 80032a0:	2b2a      	cmp	r3, #42	; 0x2a
 80032a2:	d135      	bne.n	8003310 <_svfiprintf_r+0x188>
 80032a4:	9b03      	ldr	r3, [sp, #12]
 80032a6:	1d1a      	adds	r2, r3, #4
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	9203      	str	r2, [sp, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	bfb8      	it	lt
 80032b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80032b4:	3402      	adds	r4, #2
 80032b6:	9305      	str	r3, [sp, #20]
 80032b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003384 <_svfiprintf_r+0x1fc>
 80032bc:	7821      	ldrb	r1, [r4, #0]
 80032be:	2203      	movs	r2, #3
 80032c0:	4650      	mov	r0, sl
 80032c2:	f7fc ff8d 	bl	80001e0 <memchr>
 80032c6:	b140      	cbz	r0, 80032da <_svfiprintf_r+0x152>
 80032c8:	2340      	movs	r3, #64	; 0x40
 80032ca:	eba0 000a 	sub.w	r0, r0, sl
 80032ce:	fa03 f000 	lsl.w	r0, r3, r0
 80032d2:	9b04      	ldr	r3, [sp, #16]
 80032d4:	4303      	orrs	r3, r0
 80032d6:	3401      	adds	r4, #1
 80032d8:	9304      	str	r3, [sp, #16]
 80032da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032de:	4826      	ldr	r0, [pc, #152]	; (8003378 <_svfiprintf_r+0x1f0>)
 80032e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032e4:	2206      	movs	r2, #6
 80032e6:	f7fc ff7b 	bl	80001e0 <memchr>
 80032ea:	2800      	cmp	r0, #0
 80032ec:	d038      	beq.n	8003360 <_svfiprintf_r+0x1d8>
 80032ee:	4b23      	ldr	r3, [pc, #140]	; (800337c <_svfiprintf_r+0x1f4>)
 80032f0:	bb1b      	cbnz	r3, 800333a <_svfiprintf_r+0x1b2>
 80032f2:	9b03      	ldr	r3, [sp, #12]
 80032f4:	3307      	adds	r3, #7
 80032f6:	f023 0307 	bic.w	r3, r3, #7
 80032fa:	3308      	adds	r3, #8
 80032fc:	9303      	str	r3, [sp, #12]
 80032fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003300:	4433      	add	r3, r6
 8003302:	9309      	str	r3, [sp, #36]	; 0x24
 8003304:	e767      	b.n	80031d6 <_svfiprintf_r+0x4e>
 8003306:	fb0c 3202 	mla	r2, ip, r2, r3
 800330a:	460c      	mov	r4, r1
 800330c:	2001      	movs	r0, #1
 800330e:	e7a5      	b.n	800325c <_svfiprintf_r+0xd4>
 8003310:	2300      	movs	r3, #0
 8003312:	3401      	adds	r4, #1
 8003314:	9305      	str	r3, [sp, #20]
 8003316:	4619      	mov	r1, r3
 8003318:	f04f 0c0a 	mov.w	ip, #10
 800331c:	4620      	mov	r0, r4
 800331e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003322:	3a30      	subs	r2, #48	; 0x30
 8003324:	2a09      	cmp	r2, #9
 8003326:	d903      	bls.n	8003330 <_svfiprintf_r+0x1a8>
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0c5      	beq.n	80032b8 <_svfiprintf_r+0x130>
 800332c:	9105      	str	r1, [sp, #20]
 800332e:	e7c3      	b.n	80032b8 <_svfiprintf_r+0x130>
 8003330:	fb0c 2101 	mla	r1, ip, r1, r2
 8003334:	4604      	mov	r4, r0
 8003336:	2301      	movs	r3, #1
 8003338:	e7f0      	b.n	800331c <_svfiprintf_r+0x194>
 800333a:	ab03      	add	r3, sp, #12
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	462a      	mov	r2, r5
 8003340:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <_svfiprintf_r+0x1f8>)
 8003342:	a904      	add	r1, sp, #16
 8003344:	4638      	mov	r0, r7
 8003346:	f3af 8000 	nop.w
 800334a:	1c42      	adds	r2, r0, #1
 800334c:	4606      	mov	r6, r0
 800334e:	d1d6      	bne.n	80032fe <_svfiprintf_r+0x176>
 8003350:	89ab      	ldrh	r3, [r5, #12]
 8003352:	065b      	lsls	r3, r3, #25
 8003354:	f53f af2c 	bmi.w	80031b0 <_svfiprintf_r+0x28>
 8003358:	9809      	ldr	r0, [sp, #36]	; 0x24
 800335a:	b01d      	add	sp, #116	; 0x74
 800335c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003360:	ab03      	add	r3, sp, #12
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	462a      	mov	r2, r5
 8003366:	4b06      	ldr	r3, [pc, #24]	; (8003380 <_svfiprintf_r+0x1f8>)
 8003368:	a904      	add	r1, sp, #16
 800336a:	4638      	mov	r0, r7
 800336c:	f000 f87a 	bl	8003464 <_printf_i>
 8003370:	e7eb      	b.n	800334a <_svfiprintf_r+0x1c2>
 8003372:	bf00      	nop
 8003374:	08003ab8 	.word	0x08003ab8
 8003378:	08003ac2 	.word	0x08003ac2
 800337c:	00000000 	.word	0x00000000
 8003380:	080030d1 	.word	0x080030d1
 8003384:	08003abe 	.word	0x08003abe

08003388 <_printf_common>:
 8003388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800338c:	4616      	mov	r6, r2
 800338e:	4699      	mov	r9, r3
 8003390:	688a      	ldr	r2, [r1, #8]
 8003392:	690b      	ldr	r3, [r1, #16]
 8003394:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003398:	4293      	cmp	r3, r2
 800339a:	bfb8      	it	lt
 800339c:	4613      	movlt	r3, r2
 800339e:	6033      	str	r3, [r6, #0]
 80033a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033a4:	4607      	mov	r7, r0
 80033a6:	460c      	mov	r4, r1
 80033a8:	b10a      	cbz	r2, 80033ae <_printf_common+0x26>
 80033aa:	3301      	adds	r3, #1
 80033ac:	6033      	str	r3, [r6, #0]
 80033ae:	6823      	ldr	r3, [r4, #0]
 80033b0:	0699      	lsls	r1, r3, #26
 80033b2:	bf42      	ittt	mi
 80033b4:	6833      	ldrmi	r3, [r6, #0]
 80033b6:	3302      	addmi	r3, #2
 80033b8:	6033      	strmi	r3, [r6, #0]
 80033ba:	6825      	ldr	r5, [r4, #0]
 80033bc:	f015 0506 	ands.w	r5, r5, #6
 80033c0:	d106      	bne.n	80033d0 <_printf_common+0x48>
 80033c2:	f104 0a19 	add.w	sl, r4, #25
 80033c6:	68e3      	ldr	r3, [r4, #12]
 80033c8:	6832      	ldr	r2, [r6, #0]
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	42ab      	cmp	r3, r5
 80033ce:	dc26      	bgt.n	800341e <_printf_common+0x96>
 80033d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80033d4:	1e13      	subs	r3, r2, #0
 80033d6:	6822      	ldr	r2, [r4, #0]
 80033d8:	bf18      	it	ne
 80033da:	2301      	movne	r3, #1
 80033dc:	0692      	lsls	r2, r2, #26
 80033de:	d42b      	bmi.n	8003438 <_printf_common+0xb0>
 80033e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033e4:	4649      	mov	r1, r9
 80033e6:	4638      	mov	r0, r7
 80033e8:	47c0      	blx	r8
 80033ea:	3001      	adds	r0, #1
 80033ec:	d01e      	beq.n	800342c <_printf_common+0xa4>
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	68e5      	ldr	r5, [r4, #12]
 80033f2:	6832      	ldr	r2, [r6, #0]
 80033f4:	f003 0306 	and.w	r3, r3, #6
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	bf08      	it	eq
 80033fc:	1aad      	subeq	r5, r5, r2
 80033fe:	68a3      	ldr	r3, [r4, #8]
 8003400:	6922      	ldr	r2, [r4, #16]
 8003402:	bf0c      	ite	eq
 8003404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003408:	2500      	movne	r5, #0
 800340a:	4293      	cmp	r3, r2
 800340c:	bfc4      	itt	gt
 800340e:	1a9b      	subgt	r3, r3, r2
 8003410:	18ed      	addgt	r5, r5, r3
 8003412:	2600      	movs	r6, #0
 8003414:	341a      	adds	r4, #26
 8003416:	42b5      	cmp	r5, r6
 8003418:	d11a      	bne.n	8003450 <_printf_common+0xc8>
 800341a:	2000      	movs	r0, #0
 800341c:	e008      	b.n	8003430 <_printf_common+0xa8>
 800341e:	2301      	movs	r3, #1
 8003420:	4652      	mov	r2, sl
 8003422:	4649      	mov	r1, r9
 8003424:	4638      	mov	r0, r7
 8003426:	47c0      	blx	r8
 8003428:	3001      	adds	r0, #1
 800342a:	d103      	bne.n	8003434 <_printf_common+0xac>
 800342c:	f04f 30ff 	mov.w	r0, #4294967295
 8003430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003434:	3501      	adds	r5, #1
 8003436:	e7c6      	b.n	80033c6 <_printf_common+0x3e>
 8003438:	18e1      	adds	r1, r4, r3
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	2030      	movs	r0, #48	; 0x30
 800343e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003442:	4422      	add	r2, r4
 8003444:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003448:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800344c:	3302      	adds	r3, #2
 800344e:	e7c7      	b.n	80033e0 <_printf_common+0x58>
 8003450:	2301      	movs	r3, #1
 8003452:	4622      	mov	r2, r4
 8003454:	4649      	mov	r1, r9
 8003456:	4638      	mov	r0, r7
 8003458:	47c0      	blx	r8
 800345a:	3001      	adds	r0, #1
 800345c:	d0e6      	beq.n	800342c <_printf_common+0xa4>
 800345e:	3601      	adds	r6, #1
 8003460:	e7d9      	b.n	8003416 <_printf_common+0x8e>
	...

08003464 <_printf_i>:
 8003464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003468:	7e0f      	ldrb	r7, [r1, #24]
 800346a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800346c:	2f78      	cmp	r7, #120	; 0x78
 800346e:	4691      	mov	r9, r2
 8003470:	4680      	mov	r8, r0
 8003472:	460c      	mov	r4, r1
 8003474:	469a      	mov	sl, r3
 8003476:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800347a:	d807      	bhi.n	800348c <_printf_i+0x28>
 800347c:	2f62      	cmp	r7, #98	; 0x62
 800347e:	d80a      	bhi.n	8003496 <_printf_i+0x32>
 8003480:	2f00      	cmp	r7, #0
 8003482:	f000 80d8 	beq.w	8003636 <_printf_i+0x1d2>
 8003486:	2f58      	cmp	r7, #88	; 0x58
 8003488:	f000 80a3 	beq.w	80035d2 <_printf_i+0x16e>
 800348c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003490:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003494:	e03a      	b.n	800350c <_printf_i+0xa8>
 8003496:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800349a:	2b15      	cmp	r3, #21
 800349c:	d8f6      	bhi.n	800348c <_printf_i+0x28>
 800349e:	a101      	add	r1, pc, #4	; (adr r1, 80034a4 <_printf_i+0x40>)
 80034a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034a4:	080034fd 	.word	0x080034fd
 80034a8:	08003511 	.word	0x08003511
 80034ac:	0800348d 	.word	0x0800348d
 80034b0:	0800348d 	.word	0x0800348d
 80034b4:	0800348d 	.word	0x0800348d
 80034b8:	0800348d 	.word	0x0800348d
 80034bc:	08003511 	.word	0x08003511
 80034c0:	0800348d 	.word	0x0800348d
 80034c4:	0800348d 	.word	0x0800348d
 80034c8:	0800348d 	.word	0x0800348d
 80034cc:	0800348d 	.word	0x0800348d
 80034d0:	0800361d 	.word	0x0800361d
 80034d4:	08003541 	.word	0x08003541
 80034d8:	080035ff 	.word	0x080035ff
 80034dc:	0800348d 	.word	0x0800348d
 80034e0:	0800348d 	.word	0x0800348d
 80034e4:	0800363f 	.word	0x0800363f
 80034e8:	0800348d 	.word	0x0800348d
 80034ec:	08003541 	.word	0x08003541
 80034f0:	0800348d 	.word	0x0800348d
 80034f4:	0800348d 	.word	0x0800348d
 80034f8:	08003607 	.word	0x08003607
 80034fc:	682b      	ldr	r3, [r5, #0]
 80034fe:	1d1a      	adds	r2, r3, #4
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	602a      	str	r2, [r5, #0]
 8003504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003508:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800350c:	2301      	movs	r3, #1
 800350e:	e0a3      	b.n	8003658 <_printf_i+0x1f4>
 8003510:	6820      	ldr	r0, [r4, #0]
 8003512:	6829      	ldr	r1, [r5, #0]
 8003514:	0606      	lsls	r6, r0, #24
 8003516:	f101 0304 	add.w	r3, r1, #4
 800351a:	d50a      	bpl.n	8003532 <_printf_i+0xce>
 800351c:	680e      	ldr	r6, [r1, #0]
 800351e:	602b      	str	r3, [r5, #0]
 8003520:	2e00      	cmp	r6, #0
 8003522:	da03      	bge.n	800352c <_printf_i+0xc8>
 8003524:	232d      	movs	r3, #45	; 0x2d
 8003526:	4276      	negs	r6, r6
 8003528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800352c:	485e      	ldr	r0, [pc, #376]	; (80036a8 <_printf_i+0x244>)
 800352e:	230a      	movs	r3, #10
 8003530:	e019      	b.n	8003566 <_printf_i+0x102>
 8003532:	680e      	ldr	r6, [r1, #0]
 8003534:	602b      	str	r3, [r5, #0]
 8003536:	f010 0f40 	tst.w	r0, #64	; 0x40
 800353a:	bf18      	it	ne
 800353c:	b236      	sxthne	r6, r6
 800353e:	e7ef      	b.n	8003520 <_printf_i+0xbc>
 8003540:	682b      	ldr	r3, [r5, #0]
 8003542:	6820      	ldr	r0, [r4, #0]
 8003544:	1d19      	adds	r1, r3, #4
 8003546:	6029      	str	r1, [r5, #0]
 8003548:	0601      	lsls	r1, r0, #24
 800354a:	d501      	bpl.n	8003550 <_printf_i+0xec>
 800354c:	681e      	ldr	r6, [r3, #0]
 800354e:	e002      	b.n	8003556 <_printf_i+0xf2>
 8003550:	0646      	lsls	r6, r0, #25
 8003552:	d5fb      	bpl.n	800354c <_printf_i+0xe8>
 8003554:	881e      	ldrh	r6, [r3, #0]
 8003556:	4854      	ldr	r0, [pc, #336]	; (80036a8 <_printf_i+0x244>)
 8003558:	2f6f      	cmp	r7, #111	; 0x6f
 800355a:	bf0c      	ite	eq
 800355c:	2308      	moveq	r3, #8
 800355e:	230a      	movne	r3, #10
 8003560:	2100      	movs	r1, #0
 8003562:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003566:	6865      	ldr	r5, [r4, #4]
 8003568:	60a5      	str	r5, [r4, #8]
 800356a:	2d00      	cmp	r5, #0
 800356c:	bfa2      	ittt	ge
 800356e:	6821      	ldrge	r1, [r4, #0]
 8003570:	f021 0104 	bicge.w	r1, r1, #4
 8003574:	6021      	strge	r1, [r4, #0]
 8003576:	b90e      	cbnz	r6, 800357c <_printf_i+0x118>
 8003578:	2d00      	cmp	r5, #0
 800357a:	d04d      	beq.n	8003618 <_printf_i+0x1b4>
 800357c:	4615      	mov	r5, r2
 800357e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003582:	fb03 6711 	mls	r7, r3, r1, r6
 8003586:	5dc7      	ldrb	r7, [r0, r7]
 8003588:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800358c:	4637      	mov	r7, r6
 800358e:	42bb      	cmp	r3, r7
 8003590:	460e      	mov	r6, r1
 8003592:	d9f4      	bls.n	800357e <_printf_i+0x11a>
 8003594:	2b08      	cmp	r3, #8
 8003596:	d10b      	bne.n	80035b0 <_printf_i+0x14c>
 8003598:	6823      	ldr	r3, [r4, #0]
 800359a:	07de      	lsls	r6, r3, #31
 800359c:	d508      	bpl.n	80035b0 <_printf_i+0x14c>
 800359e:	6923      	ldr	r3, [r4, #16]
 80035a0:	6861      	ldr	r1, [r4, #4]
 80035a2:	4299      	cmp	r1, r3
 80035a4:	bfde      	ittt	le
 80035a6:	2330      	movle	r3, #48	; 0x30
 80035a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80035ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80035b0:	1b52      	subs	r2, r2, r5
 80035b2:	6122      	str	r2, [r4, #16]
 80035b4:	f8cd a000 	str.w	sl, [sp]
 80035b8:	464b      	mov	r3, r9
 80035ba:	aa03      	add	r2, sp, #12
 80035bc:	4621      	mov	r1, r4
 80035be:	4640      	mov	r0, r8
 80035c0:	f7ff fee2 	bl	8003388 <_printf_common>
 80035c4:	3001      	adds	r0, #1
 80035c6:	d14c      	bne.n	8003662 <_printf_i+0x1fe>
 80035c8:	f04f 30ff 	mov.w	r0, #4294967295
 80035cc:	b004      	add	sp, #16
 80035ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035d2:	4835      	ldr	r0, [pc, #212]	; (80036a8 <_printf_i+0x244>)
 80035d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80035d8:	6829      	ldr	r1, [r5, #0]
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80035e0:	6029      	str	r1, [r5, #0]
 80035e2:	061d      	lsls	r5, r3, #24
 80035e4:	d514      	bpl.n	8003610 <_printf_i+0x1ac>
 80035e6:	07df      	lsls	r7, r3, #31
 80035e8:	bf44      	itt	mi
 80035ea:	f043 0320 	orrmi.w	r3, r3, #32
 80035ee:	6023      	strmi	r3, [r4, #0]
 80035f0:	b91e      	cbnz	r6, 80035fa <_printf_i+0x196>
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	f023 0320 	bic.w	r3, r3, #32
 80035f8:	6023      	str	r3, [r4, #0]
 80035fa:	2310      	movs	r3, #16
 80035fc:	e7b0      	b.n	8003560 <_printf_i+0xfc>
 80035fe:	6823      	ldr	r3, [r4, #0]
 8003600:	f043 0320 	orr.w	r3, r3, #32
 8003604:	6023      	str	r3, [r4, #0]
 8003606:	2378      	movs	r3, #120	; 0x78
 8003608:	4828      	ldr	r0, [pc, #160]	; (80036ac <_printf_i+0x248>)
 800360a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800360e:	e7e3      	b.n	80035d8 <_printf_i+0x174>
 8003610:	0659      	lsls	r1, r3, #25
 8003612:	bf48      	it	mi
 8003614:	b2b6      	uxthmi	r6, r6
 8003616:	e7e6      	b.n	80035e6 <_printf_i+0x182>
 8003618:	4615      	mov	r5, r2
 800361a:	e7bb      	b.n	8003594 <_printf_i+0x130>
 800361c:	682b      	ldr	r3, [r5, #0]
 800361e:	6826      	ldr	r6, [r4, #0]
 8003620:	6961      	ldr	r1, [r4, #20]
 8003622:	1d18      	adds	r0, r3, #4
 8003624:	6028      	str	r0, [r5, #0]
 8003626:	0635      	lsls	r5, r6, #24
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	d501      	bpl.n	8003630 <_printf_i+0x1cc>
 800362c:	6019      	str	r1, [r3, #0]
 800362e:	e002      	b.n	8003636 <_printf_i+0x1d2>
 8003630:	0670      	lsls	r0, r6, #25
 8003632:	d5fb      	bpl.n	800362c <_printf_i+0x1c8>
 8003634:	8019      	strh	r1, [r3, #0]
 8003636:	2300      	movs	r3, #0
 8003638:	6123      	str	r3, [r4, #16]
 800363a:	4615      	mov	r5, r2
 800363c:	e7ba      	b.n	80035b4 <_printf_i+0x150>
 800363e:	682b      	ldr	r3, [r5, #0]
 8003640:	1d1a      	adds	r2, r3, #4
 8003642:	602a      	str	r2, [r5, #0]
 8003644:	681d      	ldr	r5, [r3, #0]
 8003646:	6862      	ldr	r2, [r4, #4]
 8003648:	2100      	movs	r1, #0
 800364a:	4628      	mov	r0, r5
 800364c:	f7fc fdc8 	bl	80001e0 <memchr>
 8003650:	b108      	cbz	r0, 8003656 <_printf_i+0x1f2>
 8003652:	1b40      	subs	r0, r0, r5
 8003654:	6060      	str	r0, [r4, #4]
 8003656:	6863      	ldr	r3, [r4, #4]
 8003658:	6123      	str	r3, [r4, #16]
 800365a:	2300      	movs	r3, #0
 800365c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003660:	e7a8      	b.n	80035b4 <_printf_i+0x150>
 8003662:	6923      	ldr	r3, [r4, #16]
 8003664:	462a      	mov	r2, r5
 8003666:	4649      	mov	r1, r9
 8003668:	4640      	mov	r0, r8
 800366a:	47d0      	blx	sl
 800366c:	3001      	adds	r0, #1
 800366e:	d0ab      	beq.n	80035c8 <_printf_i+0x164>
 8003670:	6823      	ldr	r3, [r4, #0]
 8003672:	079b      	lsls	r3, r3, #30
 8003674:	d413      	bmi.n	800369e <_printf_i+0x23a>
 8003676:	68e0      	ldr	r0, [r4, #12]
 8003678:	9b03      	ldr	r3, [sp, #12]
 800367a:	4298      	cmp	r0, r3
 800367c:	bfb8      	it	lt
 800367e:	4618      	movlt	r0, r3
 8003680:	e7a4      	b.n	80035cc <_printf_i+0x168>
 8003682:	2301      	movs	r3, #1
 8003684:	4632      	mov	r2, r6
 8003686:	4649      	mov	r1, r9
 8003688:	4640      	mov	r0, r8
 800368a:	47d0      	blx	sl
 800368c:	3001      	adds	r0, #1
 800368e:	d09b      	beq.n	80035c8 <_printf_i+0x164>
 8003690:	3501      	adds	r5, #1
 8003692:	68e3      	ldr	r3, [r4, #12]
 8003694:	9903      	ldr	r1, [sp, #12]
 8003696:	1a5b      	subs	r3, r3, r1
 8003698:	42ab      	cmp	r3, r5
 800369a:	dcf2      	bgt.n	8003682 <_printf_i+0x21e>
 800369c:	e7eb      	b.n	8003676 <_printf_i+0x212>
 800369e:	2500      	movs	r5, #0
 80036a0:	f104 0619 	add.w	r6, r4, #25
 80036a4:	e7f5      	b.n	8003692 <_printf_i+0x22e>
 80036a6:	bf00      	nop
 80036a8:	08003ac9 	.word	0x08003ac9
 80036ac:	08003ada 	.word	0x08003ada

080036b0 <memcpy>:
 80036b0:	440a      	add	r2, r1
 80036b2:	4291      	cmp	r1, r2
 80036b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80036b8:	d100      	bne.n	80036bc <memcpy+0xc>
 80036ba:	4770      	bx	lr
 80036bc:	b510      	push	{r4, lr}
 80036be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036c6:	4291      	cmp	r1, r2
 80036c8:	d1f9      	bne.n	80036be <memcpy+0xe>
 80036ca:	bd10      	pop	{r4, pc}

080036cc <memmove>:
 80036cc:	4288      	cmp	r0, r1
 80036ce:	b510      	push	{r4, lr}
 80036d0:	eb01 0402 	add.w	r4, r1, r2
 80036d4:	d902      	bls.n	80036dc <memmove+0x10>
 80036d6:	4284      	cmp	r4, r0
 80036d8:	4623      	mov	r3, r4
 80036da:	d807      	bhi.n	80036ec <memmove+0x20>
 80036dc:	1e43      	subs	r3, r0, #1
 80036de:	42a1      	cmp	r1, r4
 80036e0:	d008      	beq.n	80036f4 <memmove+0x28>
 80036e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80036ea:	e7f8      	b.n	80036de <memmove+0x12>
 80036ec:	4402      	add	r2, r0
 80036ee:	4601      	mov	r1, r0
 80036f0:	428a      	cmp	r2, r1
 80036f2:	d100      	bne.n	80036f6 <memmove+0x2a>
 80036f4:	bd10      	pop	{r4, pc}
 80036f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80036fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80036fe:	e7f7      	b.n	80036f0 <memmove+0x24>

08003700 <_free_r>:
 8003700:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003702:	2900      	cmp	r1, #0
 8003704:	d044      	beq.n	8003790 <_free_r+0x90>
 8003706:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800370a:	9001      	str	r0, [sp, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	f1a1 0404 	sub.w	r4, r1, #4
 8003712:	bfb8      	it	lt
 8003714:	18e4      	addlt	r4, r4, r3
 8003716:	f000 f913 	bl	8003940 <__malloc_lock>
 800371a:	4a1e      	ldr	r2, [pc, #120]	; (8003794 <_free_r+0x94>)
 800371c:	9801      	ldr	r0, [sp, #4]
 800371e:	6813      	ldr	r3, [r2, #0]
 8003720:	b933      	cbnz	r3, 8003730 <_free_r+0x30>
 8003722:	6063      	str	r3, [r4, #4]
 8003724:	6014      	str	r4, [r2, #0]
 8003726:	b003      	add	sp, #12
 8003728:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800372c:	f000 b90e 	b.w	800394c <__malloc_unlock>
 8003730:	42a3      	cmp	r3, r4
 8003732:	d908      	bls.n	8003746 <_free_r+0x46>
 8003734:	6825      	ldr	r5, [r4, #0]
 8003736:	1961      	adds	r1, r4, r5
 8003738:	428b      	cmp	r3, r1
 800373a:	bf01      	itttt	eq
 800373c:	6819      	ldreq	r1, [r3, #0]
 800373e:	685b      	ldreq	r3, [r3, #4]
 8003740:	1949      	addeq	r1, r1, r5
 8003742:	6021      	streq	r1, [r4, #0]
 8003744:	e7ed      	b.n	8003722 <_free_r+0x22>
 8003746:	461a      	mov	r2, r3
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	b10b      	cbz	r3, 8003750 <_free_r+0x50>
 800374c:	42a3      	cmp	r3, r4
 800374e:	d9fa      	bls.n	8003746 <_free_r+0x46>
 8003750:	6811      	ldr	r1, [r2, #0]
 8003752:	1855      	adds	r5, r2, r1
 8003754:	42a5      	cmp	r5, r4
 8003756:	d10b      	bne.n	8003770 <_free_r+0x70>
 8003758:	6824      	ldr	r4, [r4, #0]
 800375a:	4421      	add	r1, r4
 800375c:	1854      	adds	r4, r2, r1
 800375e:	42a3      	cmp	r3, r4
 8003760:	6011      	str	r1, [r2, #0]
 8003762:	d1e0      	bne.n	8003726 <_free_r+0x26>
 8003764:	681c      	ldr	r4, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	6053      	str	r3, [r2, #4]
 800376a:	4421      	add	r1, r4
 800376c:	6011      	str	r1, [r2, #0]
 800376e:	e7da      	b.n	8003726 <_free_r+0x26>
 8003770:	d902      	bls.n	8003778 <_free_r+0x78>
 8003772:	230c      	movs	r3, #12
 8003774:	6003      	str	r3, [r0, #0]
 8003776:	e7d6      	b.n	8003726 <_free_r+0x26>
 8003778:	6825      	ldr	r5, [r4, #0]
 800377a:	1961      	adds	r1, r4, r5
 800377c:	428b      	cmp	r3, r1
 800377e:	bf04      	itt	eq
 8003780:	6819      	ldreq	r1, [r3, #0]
 8003782:	685b      	ldreq	r3, [r3, #4]
 8003784:	6063      	str	r3, [r4, #4]
 8003786:	bf04      	itt	eq
 8003788:	1949      	addeq	r1, r1, r5
 800378a:	6021      	streq	r1, [r4, #0]
 800378c:	6054      	str	r4, [r2, #4]
 800378e:	e7ca      	b.n	8003726 <_free_r+0x26>
 8003790:	b003      	add	sp, #12
 8003792:	bd30      	pop	{r4, r5, pc}
 8003794:	20000184 	.word	0x20000184

08003798 <sbrk_aligned>:
 8003798:	b570      	push	{r4, r5, r6, lr}
 800379a:	4e0e      	ldr	r6, [pc, #56]	; (80037d4 <sbrk_aligned+0x3c>)
 800379c:	460c      	mov	r4, r1
 800379e:	6831      	ldr	r1, [r6, #0]
 80037a0:	4605      	mov	r5, r0
 80037a2:	b911      	cbnz	r1, 80037aa <sbrk_aligned+0x12>
 80037a4:	f000 f8bc 	bl	8003920 <_sbrk_r>
 80037a8:	6030      	str	r0, [r6, #0]
 80037aa:	4621      	mov	r1, r4
 80037ac:	4628      	mov	r0, r5
 80037ae:	f000 f8b7 	bl	8003920 <_sbrk_r>
 80037b2:	1c43      	adds	r3, r0, #1
 80037b4:	d00a      	beq.n	80037cc <sbrk_aligned+0x34>
 80037b6:	1cc4      	adds	r4, r0, #3
 80037b8:	f024 0403 	bic.w	r4, r4, #3
 80037bc:	42a0      	cmp	r0, r4
 80037be:	d007      	beq.n	80037d0 <sbrk_aligned+0x38>
 80037c0:	1a21      	subs	r1, r4, r0
 80037c2:	4628      	mov	r0, r5
 80037c4:	f000 f8ac 	bl	8003920 <_sbrk_r>
 80037c8:	3001      	adds	r0, #1
 80037ca:	d101      	bne.n	80037d0 <sbrk_aligned+0x38>
 80037cc:	f04f 34ff 	mov.w	r4, #4294967295
 80037d0:	4620      	mov	r0, r4
 80037d2:	bd70      	pop	{r4, r5, r6, pc}
 80037d4:	20000188 	.word	0x20000188

080037d8 <_malloc_r>:
 80037d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037dc:	1ccd      	adds	r5, r1, #3
 80037de:	f025 0503 	bic.w	r5, r5, #3
 80037e2:	3508      	adds	r5, #8
 80037e4:	2d0c      	cmp	r5, #12
 80037e6:	bf38      	it	cc
 80037e8:	250c      	movcc	r5, #12
 80037ea:	2d00      	cmp	r5, #0
 80037ec:	4607      	mov	r7, r0
 80037ee:	db01      	blt.n	80037f4 <_malloc_r+0x1c>
 80037f0:	42a9      	cmp	r1, r5
 80037f2:	d905      	bls.n	8003800 <_malloc_r+0x28>
 80037f4:	230c      	movs	r3, #12
 80037f6:	603b      	str	r3, [r7, #0]
 80037f8:	2600      	movs	r6, #0
 80037fa:	4630      	mov	r0, r6
 80037fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003800:	4e2e      	ldr	r6, [pc, #184]	; (80038bc <_malloc_r+0xe4>)
 8003802:	f000 f89d 	bl	8003940 <__malloc_lock>
 8003806:	6833      	ldr	r3, [r6, #0]
 8003808:	461c      	mov	r4, r3
 800380a:	bb34      	cbnz	r4, 800385a <_malloc_r+0x82>
 800380c:	4629      	mov	r1, r5
 800380e:	4638      	mov	r0, r7
 8003810:	f7ff ffc2 	bl	8003798 <sbrk_aligned>
 8003814:	1c43      	adds	r3, r0, #1
 8003816:	4604      	mov	r4, r0
 8003818:	d14d      	bne.n	80038b6 <_malloc_r+0xde>
 800381a:	6834      	ldr	r4, [r6, #0]
 800381c:	4626      	mov	r6, r4
 800381e:	2e00      	cmp	r6, #0
 8003820:	d140      	bne.n	80038a4 <_malloc_r+0xcc>
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	4631      	mov	r1, r6
 8003826:	4638      	mov	r0, r7
 8003828:	eb04 0803 	add.w	r8, r4, r3
 800382c:	f000 f878 	bl	8003920 <_sbrk_r>
 8003830:	4580      	cmp	r8, r0
 8003832:	d13a      	bne.n	80038aa <_malloc_r+0xd2>
 8003834:	6821      	ldr	r1, [r4, #0]
 8003836:	3503      	adds	r5, #3
 8003838:	1a6d      	subs	r5, r5, r1
 800383a:	f025 0503 	bic.w	r5, r5, #3
 800383e:	3508      	adds	r5, #8
 8003840:	2d0c      	cmp	r5, #12
 8003842:	bf38      	it	cc
 8003844:	250c      	movcc	r5, #12
 8003846:	4629      	mov	r1, r5
 8003848:	4638      	mov	r0, r7
 800384a:	f7ff ffa5 	bl	8003798 <sbrk_aligned>
 800384e:	3001      	adds	r0, #1
 8003850:	d02b      	beq.n	80038aa <_malloc_r+0xd2>
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	442b      	add	r3, r5
 8003856:	6023      	str	r3, [r4, #0]
 8003858:	e00e      	b.n	8003878 <_malloc_r+0xa0>
 800385a:	6822      	ldr	r2, [r4, #0]
 800385c:	1b52      	subs	r2, r2, r5
 800385e:	d41e      	bmi.n	800389e <_malloc_r+0xc6>
 8003860:	2a0b      	cmp	r2, #11
 8003862:	d916      	bls.n	8003892 <_malloc_r+0xba>
 8003864:	1961      	adds	r1, r4, r5
 8003866:	42a3      	cmp	r3, r4
 8003868:	6025      	str	r5, [r4, #0]
 800386a:	bf18      	it	ne
 800386c:	6059      	strne	r1, [r3, #4]
 800386e:	6863      	ldr	r3, [r4, #4]
 8003870:	bf08      	it	eq
 8003872:	6031      	streq	r1, [r6, #0]
 8003874:	5162      	str	r2, [r4, r5]
 8003876:	604b      	str	r3, [r1, #4]
 8003878:	4638      	mov	r0, r7
 800387a:	f104 060b 	add.w	r6, r4, #11
 800387e:	f000 f865 	bl	800394c <__malloc_unlock>
 8003882:	f026 0607 	bic.w	r6, r6, #7
 8003886:	1d23      	adds	r3, r4, #4
 8003888:	1af2      	subs	r2, r6, r3
 800388a:	d0b6      	beq.n	80037fa <_malloc_r+0x22>
 800388c:	1b9b      	subs	r3, r3, r6
 800388e:	50a3      	str	r3, [r4, r2]
 8003890:	e7b3      	b.n	80037fa <_malloc_r+0x22>
 8003892:	6862      	ldr	r2, [r4, #4]
 8003894:	42a3      	cmp	r3, r4
 8003896:	bf0c      	ite	eq
 8003898:	6032      	streq	r2, [r6, #0]
 800389a:	605a      	strne	r2, [r3, #4]
 800389c:	e7ec      	b.n	8003878 <_malloc_r+0xa0>
 800389e:	4623      	mov	r3, r4
 80038a0:	6864      	ldr	r4, [r4, #4]
 80038a2:	e7b2      	b.n	800380a <_malloc_r+0x32>
 80038a4:	4634      	mov	r4, r6
 80038a6:	6876      	ldr	r6, [r6, #4]
 80038a8:	e7b9      	b.n	800381e <_malloc_r+0x46>
 80038aa:	230c      	movs	r3, #12
 80038ac:	603b      	str	r3, [r7, #0]
 80038ae:	4638      	mov	r0, r7
 80038b0:	f000 f84c 	bl	800394c <__malloc_unlock>
 80038b4:	e7a1      	b.n	80037fa <_malloc_r+0x22>
 80038b6:	6025      	str	r5, [r4, #0]
 80038b8:	e7de      	b.n	8003878 <_malloc_r+0xa0>
 80038ba:	bf00      	nop
 80038bc:	20000184 	.word	0x20000184

080038c0 <_realloc_r>:
 80038c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038c4:	4680      	mov	r8, r0
 80038c6:	4614      	mov	r4, r2
 80038c8:	460e      	mov	r6, r1
 80038ca:	b921      	cbnz	r1, 80038d6 <_realloc_r+0x16>
 80038cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038d0:	4611      	mov	r1, r2
 80038d2:	f7ff bf81 	b.w	80037d8 <_malloc_r>
 80038d6:	b92a      	cbnz	r2, 80038e4 <_realloc_r+0x24>
 80038d8:	f7ff ff12 	bl	8003700 <_free_r>
 80038dc:	4625      	mov	r5, r4
 80038de:	4628      	mov	r0, r5
 80038e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038e4:	f000 f838 	bl	8003958 <_malloc_usable_size_r>
 80038e8:	4284      	cmp	r4, r0
 80038ea:	4607      	mov	r7, r0
 80038ec:	d802      	bhi.n	80038f4 <_realloc_r+0x34>
 80038ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80038f2:	d812      	bhi.n	800391a <_realloc_r+0x5a>
 80038f4:	4621      	mov	r1, r4
 80038f6:	4640      	mov	r0, r8
 80038f8:	f7ff ff6e 	bl	80037d8 <_malloc_r>
 80038fc:	4605      	mov	r5, r0
 80038fe:	2800      	cmp	r0, #0
 8003900:	d0ed      	beq.n	80038de <_realloc_r+0x1e>
 8003902:	42bc      	cmp	r4, r7
 8003904:	4622      	mov	r2, r4
 8003906:	4631      	mov	r1, r6
 8003908:	bf28      	it	cs
 800390a:	463a      	movcs	r2, r7
 800390c:	f7ff fed0 	bl	80036b0 <memcpy>
 8003910:	4631      	mov	r1, r6
 8003912:	4640      	mov	r0, r8
 8003914:	f7ff fef4 	bl	8003700 <_free_r>
 8003918:	e7e1      	b.n	80038de <_realloc_r+0x1e>
 800391a:	4635      	mov	r5, r6
 800391c:	e7df      	b.n	80038de <_realloc_r+0x1e>
	...

08003920 <_sbrk_r>:
 8003920:	b538      	push	{r3, r4, r5, lr}
 8003922:	4d06      	ldr	r5, [pc, #24]	; (800393c <_sbrk_r+0x1c>)
 8003924:	2300      	movs	r3, #0
 8003926:	4604      	mov	r4, r0
 8003928:	4608      	mov	r0, r1
 800392a:	602b      	str	r3, [r5, #0]
 800392c:	f7fd fb0a 	bl	8000f44 <_sbrk>
 8003930:	1c43      	adds	r3, r0, #1
 8003932:	d102      	bne.n	800393a <_sbrk_r+0x1a>
 8003934:	682b      	ldr	r3, [r5, #0]
 8003936:	b103      	cbz	r3, 800393a <_sbrk_r+0x1a>
 8003938:	6023      	str	r3, [r4, #0]
 800393a:	bd38      	pop	{r3, r4, r5, pc}
 800393c:	2000018c 	.word	0x2000018c

08003940 <__malloc_lock>:
 8003940:	4801      	ldr	r0, [pc, #4]	; (8003948 <__malloc_lock+0x8>)
 8003942:	f000 b811 	b.w	8003968 <__retarget_lock_acquire_recursive>
 8003946:	bf00      	nop
 8003948:	20000190 	.word	0x20000190

0800394c <__malloc_unlock>:
 800394c:	4801      	ldr	r0, [pc, #4]	; (8003954 <__malloc_unlock+0x8>)
 800394e:	f000 b80c 	b.w	800396a <__retarget_lock_release_recursive>
 8003952:	bf00      	nop
 8003954:	20000190 	.word	0x20000190

08003958 <_malloc_usable_size_r>:
 8003958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800395c:	1f18      	subs	r0, r3, #4
 800395e:	2b00      	cmp	r3, #0
 8003960:	bfbc      	itt	lt
 8003962:	580b      	ldrlt	r3, [r1, r0]
 8003964:	18c0      	addlt	r0, r0, r3
 8003966:	4770      	bx	lr

08003968 <__retarget_lock_acquire_recursive>:
 8003968:	4770      	bx	lr

0800396a <__retarget_lock_release_recursive>:
 800396a:	4770      	bx	lr

0800396c <_init>:
 800396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396e:	bf00      	nop
 8003970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003972:	bc08      	pop	{r3}
 8003974:	469e      	mov	lr, r3
 8003976:	4770      	bx	lr

08003978 <_fini>:
 8003978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397a:	bf00      	nop
 800397c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800397e:	bc08      	pop	{r3}
 8003980:	469e      	mov	lr, r3
 8003982:	4770      	bx	lr
