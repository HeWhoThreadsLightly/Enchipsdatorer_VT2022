
vgaGraphics2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dc8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08004f68  08004f68  00014f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005190  08005190  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005190  08005190  00015190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005198  08005198  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005198  08005198  00015198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800519c  0800519c  0001519c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080051a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046a4  20000070  08005210  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004714  08005210  00024714  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f33c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021dc  00000000  00000000  0002f3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  000315b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca0  00000000  00000000  000322d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c77  00000000  00000000  00032f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f355  00000000  00000000  00035be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008df44  00000000  00000000  00044f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2e80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a8c  00000000  00000000  000d2ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004f50 	.word	0x08004f50

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004f50 	.word	0x08004f50

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vga_DMA_XFER_CPLT_CB_ID>:
UART_HandleTypeDef * huartD;
char str_d[81] = { '\0' };
int str_len_d = 0;
DMA_HandleTypeDef * toDebug_m;
//HAL_DMA_XFER_CPLT_CB_ID         = 0x00U,  /*!< Full transfer     */
void vga_DMA_XFER_CPLT_CB_ID(){
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	str_len_d = sprintf(str_d, "Full transfer\r\n");
 8000588:	4909      	ldr	r1, [pc, #36]	; (80005b0 <vga_DMA_XFER_CPLT_CB_ID+0x2c>)
 800058a:	480a      	ldr	r0, [pc, #40]	; (80005b4 <vga_DMA_XFER_CPLT_CB_ID+0x30>)
 800058c:	f004 f872 	bl	8004674 <siprintf>
 8000590:	4603      	mov	r3, r0
 8000592:	4a09      	ldr	r2, [pc, #36]	; (80005b8 <vga_DMA_XFER_CPLT_CB_ID+0x34>)
 8000594:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(huartD, (uint8_t*) str_d, str_len_d, HAL_MAX_DELAY);
 8000596:	4b09      	ldr	r3, [pc, #36]	; (80005bc <vga_DMA_XFER_CPLT_CB_ID+0x38>)
 8000598:	6818      	ldr	r0, [r3, #0]
 800059a:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <vga_DMA_XFER_CPLT_CB_ID+0x34>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	b29a      	uxth	r2, r3
 80005a0:	f04f 33ff 	mov.w	r3, #4294967295
 80005a4:	4903      	ldr	r1, [pc, #12]	; (80005b4 <vga_DMA_XFER_CPLT_CB_ID+0x30>)
 80005a6:	f003 fcbe 	bl	8003f26 <HAL_UART_Transmit>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	08004f68 	.word	0x08004f68
 80005b4:	20000090 	.word	0x20000090
 80005b8:	200000e4 	.word	0x200000e4
 80005bc:	2000008c 	.word	0x2000008c

080005c0 <vga_DMA_XFER_HALFCPLT_CB_ID>:

//HAL_DMA_XFER_HALFCPLT_CB_ID     = 0x01U,  /*!< Half Transfer     */
void vga_DMA_XFER_HALFCPLT_CB_ID(){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	str_len_d = sprintf(str_d, "Half Transfer\r\n");
 80005c4:	4909      	ldr	r1, [pc, #36]	; (80005ec <vga_DMA_XFER_HALFCPLT_CB_ID+0x2c>)
 80005c6:	480a      	ldr	r0, [pc, #40]	; (80005f0 <vga_DMA_XFER_HALFCPLT_CB_ID+0x30>)
 80005c8:	f004 f854 	bl	8004674 <siprintf>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4a09      	ldr	r2, [pc, #36]	; (80005f4 <vga_DMA_XFER_HALFCPLT_CB_ID+0x34>)
 80005d0:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(huartD, (uint8_t*) str_d, str_len_d, HAL_MAX_DELAY);
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <vga_DMA_XFER_HALFCPLT_CB_ID+0x38>)
 80005d4:	6818      	ldr	r0, [r3, #0]
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <vga_DMA_XFER_HALFCPLT_CB_ID+0x34>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	b29a      	uxth	r2, r3
 80005dc:	f04f 33ff 	mov.w	r3, #4294967295
 80005e0:	4903      	ldr	r1, [pc, #12]	; (80005f0 <vga_DMA_XFER_HALFCPLT_CB_ID+0x30>)
 80005e2:	f003 fca0 	bl	8003f26 <HAL_UART_Transmit>
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	08004f78 	.word	0x08004f78
 80005f0:	20000090 	.word	0x20000090
 80005f4:	200000e4 	.word	0x200000e4
 80005f8:	2000008c 	.word	0x2000008c

080005fc <vga_DMA_XFER_M1CPLT_CB_ID>:

//HAL_DMA_XFER_M1CPLT_CB_ID       = 0x02U,  /*!< M1 Full Transfer  */
void vga_DMA_XFER_M1CPLT_CB_ID(){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	str_len_d = sprintf(str_d, "M1 Full Transfer\r\n");
 8000600:	4909      	ldr	r1, [pc, #36]	; (8000628 <vga_DMA_XFER_M1CPLT_CB_ID+0x2c>)
 8000602:	480a      	ldr	r0, [pc, #40]	; (800062c <vga_DMA_XFER_M1CPLT_CB_ID+0x30>)
 8000604:	f004 f836 	bl	8004674 <siprintf>
 8000608:	4603      	mov	r3, r0
 800060a:	4a09      	ldr	r2, [pc, #36]	; (8000630 <vga_DMA_XFER_M1CPLT_CB_ID+0x34>)
 800060c:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(huartD, (uint8_t*) str_d, str_len_d, HAL_MAX_DELAY);
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <vga_DMA_XFER_M1CPLT_CB_ID+0x38>)
 8000610:	6818      	ldr	r0, [r3, #0]
 8000612:	4b07      	ldr	r3, [pc, #28]	; (8000630 <vga_DMA_XFER_M1CPLT_CB_ID+0x34>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	b29a      	uxth	r2, r3
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	4903      	ldr	r1, [pc, #12]	; (800062c <vga_DMA_XFER_M1CPLT_CB_ID+0x30>)
 800061e:	f003 fc82 	bl	8003f26 <HAL_UART_Transmit>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	08004f88 	.word	0x08004f88
 800062c:	20000090 	.word	0x20000090
 8000630:	200000e4 	.word	0x200000e4
 8000634:	2000008c 	.word	0x2000008c

08000638 <vga_DMA_XFER_M1HALFCPLT_CB_ID>:

//HAL_DMA_XFER_M1HALFCPLT_CB_ID   = 0x03U,  /*!< M1 Half Transfer  */
void vga_DMA_XFER_M1HALFCPLT_CB_ID(){
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	str_len_d = sprintf(str_d, "M1 Half Transfer\r\n");
 800063c:	4909      	ldr	r1, [pc, #36]	; (8000664 <vga_DMA_XFER_M1HALFCPLT_CB_ID+0x2c>)
 800063e:	480a      	ldr	r0, [pc, #40]	; (8000668 <vga_DMA_XFER_M1HALFCPLT_CB_ID+0x30>)
 8000640:	f004 f818 	bl	8004674 <siprintf>
 8000644:	4603      	mov	r3, r0
 8000646:	4a09      	ldr	r2, [pc, #36]	; (800066c <vga_DMA_XFER_M1HALFCPLT_CB_ID+0x34>)
 8000648:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(huartD, (uint8_t*) str_d, str_len_d, HAL_MAX_DELAY);
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <vga_DMA_XFER_M1HALFCPLT_CB_ID+0x38>)
 800064c:	6818      	ldr	r0, [r3, #0]
 800064e:	4b07      	ldr	r3, [pc, #28]	; (800066c <vga_DMA_XFER_M1HALFCPLT_CB_ID+0x34>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	b29a      	uxth	r2, r3
 8000654:	f04f 33ff 	mov.w	r3, #4294967295
 8000658:	4903      	ldr	r1, [pc, #12]	; (8000668 <vga_DMA_XFER_M1HALFCPLT_CB_ID+0x30>)
 800065a:	f003 fc64 	bl	8003f26 <HAL_UART_Transmit>
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	08004f9c 	.word	0x08004f9c
 8000668:	20000090 	.word	0x20000090
 800066c:	200000e4 	.word	0x200000e4
 8000670:	2000008c 	.word	0x2000008c

08000674 <vga_DMA_XFER_ERROR_CB_ID>:

//HAL_DMA_XFER_ERROR_CB_ID        = 0x04U,  /*!< Error             */
void vga_DMA_XFER_ERROR_CB_ID(){
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
	char * err = "Default";
 800067a:	4b5a      	ldr	r3, [pc, #360]	; (80007e4 <vga_DMA_XFER_ERROR_CB_ID+0x170>)
 800067c:	607b      	str	r3, [r7, #4]
	uint32_t errorCode = HAL_DMA_GetError(toDebug_m);
 800067e:	4b5a      	ldr	r3, [pc, #360]	; (80007e8 <vga_DMA_XFER_ERROR_CB_ID+0x174>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4618      	mov	r0, r3
 8000684:	f001 fd2e 	bl	80020e4 <HAL_DMA_GetError>
 8000688:	6038      	str	r0, [r7, #0]
	if(errorCode == HAL_DMA_ERROR_NONE){
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	f040 80a0 	bne.w	80007d2 <vga_DMA_XFER_ERROR_CB_ID+0x15e>
		str_len_d = sprintf(str_d, "DMA %s\r\n", "No error");
 8000692:	4a56      	ldr	r2, [pc, #344]	; (80007ec <vga_DMA_XFER_ERROR_CB_ID+0x178>)
 8000694:	4956      	ldr	r1, [pc, #344]	; (80007f0 <vga_DMA_XFER_ERROR_CB_ID+0x17c>)
 8000696:	4857      	ldr	r0, [pc, #348]	; (80007f4 <vga_DMA_XFER_ERROR_CB_ID+0x180>)
 8000698:	f003 ffec 	bl	8004674 <siprintf>
 800069c:	4603      	mov	r3, r0
 800069e:	4a56      	ldr	r2, [pc, #344]	; (80007f8 <vga_DMA_XFER_ERROR_CB_ID+0x184>)
 80006a0:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(huartD, (uint8_t*) str_d, str_len_d, HAL_MAX_DELAY);
 80006a2:	4b56      	ldr	r3, [pc, #344]	; (80007fc <vga_DMA_XFER_ERROR_CB_ID+0x188>)
 80006a4:	6818      	ldr	r0, [r3, #0]
 80006a6:	4b54      	ldr	r3, [pc, #336]	; (80007f8 <vga_DMA_XFER_ERROR_CB_ID+0x184>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	f04f 33ff 	mov.w	r3, #4294967295
 80006b0:	4950      	ldr	r1, [pc, #320]	; (80007f4 <vga_DMA_XFER_ERROR_CB_ID+0x180>)
 80006b2:	f003 fc38 	bl	8003f26 <HAL_UART_Transmit>
	}
	while(errorCode){
 80006b6:	e08c      	b.n	80007d2 <vga_DMA_XFER_ERROR_CB_ID+0x15e>
		switch(errorCode){
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006be:	d06e      	beq.n	800079e <vga_DMA_XFER_ERROR_CB_ID+0x12a>
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006c6:	d86d      	bhi.n	80007a4 <vga_DMA_XFER_ERROR_CB_ID+0x130>
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	2b80      	cmp	r3, #128	; 0x80
 80006cc:	d064      	beq.n	8000798 <vga_DMA_XFER_ERROR_CB_ID+0x124>
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	2b80      	cmp	r3, #128	; 0x80
 80006d2:	d867      	bhi.n	80007a4 <vga_DMA_XFER_ERROR_CB_ID+0x130>
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	2b20      	cmp	r3, #32
 80006d8:	d848      	bhi.n	800076c <vga_DMA_XFER_ERROR_CB_ID+0xf8>
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	2b20      	cmp	r3, #32
 80006de:	d861      	bhi.n	80007a4 <vga_DMA_XFER_ERROR_CB_ID+0x130>
 80006e0:	a201      	add	r2, pc, #4	; (adr r2, 80006e8 <vga_DMA_XFER_ERROR_CB_ID+0x74>)
 80006e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e6:	bf00      	nop
 80006e8:	08000775 	.word	0x08000775
 80006ec:	0800077b 	.word	0x0800077b
 80006f0:	08000781 	.word	0x08000781
 80006f4:	080007a5 	.word	0x080007a5
 80006f8:	08000787 	.word	0x08000787
 80006fc:	080007a5 	.word	0x080007a5
 8000700:	080007a5 	.word	0x080007a5
 8000704:	080007a5 	.word	0x080007a5
 8000708:	080007a5 	.word	0x080007a5
 800070c:	080007a5 	.word	0x080007a5
 8000710:	080007a5 	.word	0x080007a5
 8000714:	080007a5 	.word	0x080007a5
 8000718:	080007a5 	.word	0x080007a5
 800071c:	080007a5 	.word	0x080007a5
 8000720:	080007a5 	.word	0x080007a5
 8000724:	080007a5 	.word	0x080007a5
 8000728:	080007a5 	.word	0x080007a5
 800072c:	080007a5 	.word	0x080007a5
 8000730:	080007a5 	.word	0x080007a5
 8000734:	080007a5 	.word	0x080007a5
 8000738:	080007a5 	.word	0x080007a5
 800073c:	080007a5 	.word	0x080007a5
 8000740:	080007a5 	.word	0x080007a5
 8000744:	080007a5 	.word	0x080007a5
 8000748:	080007a5 	.word	0x080007a5
 800074c:	080007a5 	.word	0x080007a5
 8000750:	080007a5 	.word	0x080007a5
 8000754:	080007a5 	.word	0x080007a5
 8000758:	080007a5 	.word	0x080007a5
 800075c:	080007a5 	.word	0x080007a5
 8000760:	080007a5 	.word	0x080007a5
 8000764:	080007a5 	.word	0x080007a5
 8000768:	0800078d 	.word	0x0800078d
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	2b40      	cmp	r3, #64	; 0x40
 8000770:	d00f      	beq.n	8000792 <vga_DMA_XFER_ERROR_CB_ID+0x11e>
 8000772:	e017      	b.n	80007a4 <vga_DMA_XFER_ERROR_CB_ID+0x130>
		case HAL_DMA_ERROR_NONE            : err = "No error";break;    /*!< No error                               */
 8000774:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <vga_DMA_XFER_ERROR_CB_ID+0x178>)
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	e014      	b.n	80007a4 <vga_DMA_XFER_ERROR_CB_ID+0x130>
		case HAL_DMA_ERROR_TE              : err = "Transfer error";break;    /*!< Transfer error                         */
 800077a:	4b21      	ldr	r3, [pc, #132]	; (8000800 <vga_DMA_XFER_ERROR_CB_ID+0x18c>)
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	e011      	b.n	80007a4 <vga_DMA_XFER_ERROR_CB_ID+0x130>
		case HAL_DMA_ERROR_FE              : err = "FIFO error";break;    /*!< FIFO error                             */
 8000780:	4b20      	ldr	r3, [pc, #128]	; (8000804 <vga_DMA_XFER_ERROR_CB_ID+0x190>)
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	e00e      	b.n	80007a4 <vga_DMA_XFER_ERROR_CB_ID+0x130>
		case HAL_DMA_ERROR_DME             : err = "Direct Mode error";break;    /*!< Direct Mode error                      */
 8000786:	4b20      	ldr	r3, [pc, #128]	; (8000808 <vga_DMA_XFER_ERROR_CB_ID+0x194>)
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	e00b      	b.n	80007a4 <vga_DMA_XFER_ERROR_CB_ID+0x130>
		case HAL_DMA_ERROR_TIMEOUT         : err = "Timeout error";break;    /*!< Timeout error                          */
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <vga_DMA_XFER_ERROR_CB_ID+0x198>)
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	e008      	b.n	80007a4 <vga_DMA_XFER_ERROR_CB_ID+0x130>
		case HAL_DMA_ERROR_PARAM           : err = "Parameter error";break;    /*!< Parameter error                        */
 8000792:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <vga_DMA_XFER_ERROR_CB_ID+0x19c>)
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	e005      	b.n	80007a4 <vga_DMA_XFER_ERROR_CB_ID+0x130>
		case HAL_DMA_ERROR_NO_XFER         : err = "Abort requested with no Xfer ongoing";break;    /*!< Abort requested with no Xfer ongoing   */
 8000798:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <vga_DMA_XFER_ERROR_CB_ID+0x1a0>)
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	e002      	b.n	80007a4 <vga_DMA_XFER_ERROR_CB_ID+0x130>
		case HAL_DMA_ERROR_NOT_SUPPORTED   : err = "Not supported mode";break;    /*!< Not supported mode                     */
 800079e:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <vga_DMA_XFER_ERROR_CB_ID+0x1a4>)
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	bf00      	nop
		}

		str_len_d = sprintf(str_d, "DMA %s\r\n", err);
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	4912      	ldr	r1, [pc, #72]	; (80007f0 <vga_DMA_XFER_ERROR_CB_ID+0x17c>)
 80007a8:	4812      	ldr	r0, [pc, #72]	; (80007f4 <vga_DMA_XFER_ERROR_CB_ID+0x180>)
 80007aa:	f003 ff63 	bl	8004674 <siprintf>
 80007ae:	4603      	mov	r3, r0
 80007b0:	4a11      	ldr	r2, [pc, #68]	; (80007f8 <vga_DMA_XFER_ERROR_CB_ID+0x184>)
 80007b2:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(huartD, (uint8_t*) str_d, str_len_d, HAL_MAX_DELAY);
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <vga_DMA_XFER_ERROR_CB_ID+0x188>)
 80007b6:	6818      	ldr	r0, [r3, #0]
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <vga_DMA_XFER_ERROR_CB_ID+0x184>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	b29a      	uxth	r2, r3
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
 80007c2:	490c      	ldr	r1, [pc, #48]	; (80007f4 <vga_DMA_XFER_ERROR_CB_ID+0x180>)
 80007c4:	f003 fbaf 	bl	8003f26 <HAL_UART_Transmit>
		errorCode &= errorCode - 1;
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	3b01      	subs	r3, #1
 80007cc:	683a      	ldr	r2, [r7, #0]
 80007ce:	4013      	ands	r3, r2
 80007d0:	603b      	str	r3, [r7, #0]
	while(errorCode){
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	f47f af6f 	bne.w	80006b8 <vga_DMA_XFER_ERROR_CB_ID+0x44>
	};

}
 80007da:	bf00      	nop
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	08004fb0 	.word	0x08004fb0
 80007e8:	200000e8 	.word	0x200000e8
 80007ec:	08004fb8 	.word	0x08004fb8
 80007f0:	08004fc4 	.word	0x08004fc4
 80007f4:	20000090 	.word	0x20000090
 80007f8:	200000e4 	.word	0x200000e4
 80007fc:	2000008c 	.word	0x2000008c
 8000800:	08004fd0 	.word	0x08004fd0
 8000804:	08004fe0 	.word	0x08004fe0
 8000808:	08004fec 	.word	0x08004fec
 800080c:	08005000 	.word	0x08005000
 8000810:	08005010 	.word	0x08005010
 8000814:	08005020 	.word	0x08005020
 8000818:	08005048 	.word	0x08005048

0800081c <vga_DMA_XFER_ABORT_CB_ID>:
//HAL_DMA_XFER_ABORT_CB_ID        = 0x05U,  /*!< Abort             */
void vga_DMA_XFER_ABORT_CB_ID(){
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	str_len_d = sprintf(str_d, "DMA Abort\r\n");
 8000820:	4909      	ldr	r1, [pc, #36]	; (8000848 <vga_DMA_XFER_ABORT_CB_ID+0x2c>)
 8000822:	480a      	ldr	r0, [pc, #40]	; (800084c <vga_DMA_XFER_ABORT_CB_ID+0x30>)
 8000824:	f003 ff26 	bl	8004674 <siprintf>
 8000828:	4603      	mov	r3, r0
 800082a:	4a09      	ldr	r2, [pc, #36]	; (8000850 <vga_DMA_XFER_ABORT_CB_ID+0x34>)
 800082c:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(huartD, (uint8_t*) str_d, str_len_d, HAL_MAX_DELAY);
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <vga_DMA_XFER_ABORT_CB_ID+0x38>)
 8000830:	6818      	ldr	r0, [r3, #0]
 8000832:	4b07      	ldr	r3, [pc, #28]	; (8000850 <vga_DMA_XFER_ABORT_CB_ID+0x34>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	b29a      	uxth	r2, r3
 8000838:	f04f 33ff 	mov.w	r3, #4294967295
 800083c:	4903      	ldr	r1, [pc, #12]	; (800084c <vga_DMA_XFER_ABORT_CB_ID+0x30>)
 800083e:	f003 fb72 	bl	8003f26 <HAL_UART_Transmit>
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	0800505c 	.word	0x0800505c
 800084c:	20000090 	.word	0x20000090
 8000850:	200000e4 	.word	0x200000e4
 8000854:	2000008c 	.word	0x2000008c

08000858 <vga_DMA_XFER_ALL_CB_ID>:
//HAL_DMA_XFER_ALL_CB_ID          = 0x06U   /*!< All               */
void vga_DMA_XFER_ALL_CB_ID(){
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	str_len_d = sprintf(str_d, "Full transfstrer\r\n");
 800085c:	4909      	ldr	r1, [pc, #36]	; (8000884 <vga_DMA_XFER_ALL_CB_ID+0x2c>)
 800085e:	480a      	ldr	r0, [pc, #40]	; (8000888 <vga_DMA_XFER_ALL_CB_ID+0x30>)
 8000860:	f003 ff08 	bl	8004674 <siprintf>
 8000864:	4603      	mov	r3, r0
 8000866:	4a09      	ldr	r2, [pc, #36]	; (800088c <vga_DMA_XFER_ALL_CB_ID+0x34>)
 8000868:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(huartD, (uint8_t*) str_d, str_len_d, HAL_MAX_DELAY);
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <vga_DMA_XFER_ALL_CB_ID+0x38>)
 800086c:	6818      	ldr	r0, [r3, #0]
 800086e:	4b07      	ldr	r3, [pc, #28]	; (800088c <vga_DMA_XFER_ALL_CB_ID+0x34>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	b29a      	uxth	r2, r3
 8000874:	f04f 33ff 	mov.w	r3, #4294967295
 8000878:	4903      	ldr	r1, [pc, #12]	; (8000888 <vga_DMA_XFER_ALL_CB_ID+0x30>)
 800087a:	f003 fb54 	bl	8003f26 <HAL_UART_Transmit>
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	08005068 	.word	0x08005068
 8000888:	20000090 	.word	0x20000090
 800088c:	200000e4 	.word	0x200000e4
 8000890:	2000008c 	.word	0x2000008c

08000894 <registerDebugInterupts>:

void registerDebugInterupts(DMA_HandleTypeDef * toDebug){
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	toDebug_m = toDebug;
 800089c:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <registerDebugInterupts+0x5c>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6013      	str	r3, [r2, #0]
	HAL_DMA_RegisterCallback(toDebug, HAL_DMA_XFER_ABORT_CB_ID, vga_DMA_XFER_CPLT_CB_ID);
 80008a2:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <registerDebugInterupts+0x60>)
 80008a4:	2105      	movs	r1, #5
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f001 fbc8 	bl	800203c <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(toDebug, HAL_DMA_XFER_HALFCPLT_CB_ID, vga_DMA_XFER_HALFCPLT_CB_ID);
 80008ac:	4a12      	ldr	r2, [pc, #72]	; (80008f8 <registerDebugInterupts+0x64>)
 80008ae:	2101      	movs	r1, #1
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f001 fbc3 	bl	800203c <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(toDebug, HAL_DMA_XFER_M1CPLT_CB_ID, vga_DMA_XFER_M1CPLT_CB_ID);
 80008b6:	4a11      	ldr	r2, [pc, #68]	; (80008fc <registerDebugInterupts+0x68>)
 80008b8:	2102      	movs	r1, #2
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f001 fbbe 	bl	800203c <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(toDebug, HAL_DMA_XFER_M1HALFCPLT_CB_ID, vga_DMA_XFER_M1HALFCPLT_CB_ID);
 80008c0:	4a0f      	ldr	r2, [pc, #60]	; (8000900 <registerDebugInterupts+0x6c>)
 80008c2:	2103      	movs	r1, #3
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f001 fbb9 	bl	800203c <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(toDebug, HAL_DMA_XFER_ERROR_CB_ID, vga_DMA_XFER_ERROR_CB_ID);
 80008ca:	4a0e      	ldr	r2, [pc, #56]	; (8000904 <registerDebugInterupts+0x70>)
 80008cc:	2104      	movs	r1, #4
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f001 fbb4 	bl	800203c <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(toDebug, HAL_DMA_XFER_ABORT_CB_ID, vga_DMA_XFER_ABORT_CB_ID);
 80008d4:	4a0c      	ldr	r2, [pc, #48]	; (8000908 <registerDebugInterupts+0x74>)
 80008d6:	2105      	movs	r1, #5
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f001 fbaf 	bl	800203c <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(toDebug, HAL_DMA_XFER_ALL_CB_ID, vga_DMA_XFER_ALL_CB_ID);
 80008de:	4a0b      	ldr	r2, [pc, #44]	; (800090c <registerDebugInterupts+0x78>)
 80008e0:	2106      	movs	r1, #6
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f001 fbaa 	bl	800203c <HAL_DMA_RegisterCallback>
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200000e8 	.word	0x200000e8
 80008f4:	08000585 	.word	0x08000585
 80008f8:	080005c1 	.word	0x080005c1
 80008fc:	080005fd 	.word	0x080005fd
 8000900:	08000639 	.word	0x08000639
 8000904:	08000675 	.word	0x08000675
 8000908:	0800081d 	.word	0x0800081d
 800090c:	08000859 	.word	0x08000859

08000910 <registerHUARTdmaDebug>:

void registerHUARTdmaDebug(UART_HandleTypeDef * huart){
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	huartD = huart;
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <registerHUARTdmaDebug+0x1c>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6013      	str	r3, [r2, #0]
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	2000008c 	.word	0x2000008c

08000930 <HAL_TIM_PeriodElapsedCallback>:
	HAL_UART_Transmit(&huart2, (uint8_t*) strR, sizeof(strR), HAL_MAX_DELAY);
}

int lastLine = -100;
uint32_t profileCount = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	if(htim == &htim5){
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a0f      	ldr	r2, [pc, #60]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d116      	bne.n	800096e <HAL_TIM_PeriodElapsedCallback+0x3e>
		str_len = sprintf(str, "Profile %8lu ticks clock\t line %i\r\n", profileCount, lineCount);
 8000940:	4b0e      	ldr	r3, [pc, #56]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	490e      	ldr	r1, [pc, #56]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800094a:	480f      	ldr	r0, [pc, #60]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800094c:	f003 fe92 	bl	8004674 <siprintf>
 8000950:	4603      	mov	r3, r0
 8000952:	b29a      	uxth	r2, r3
 8000954:	4b0d      	ldr	r3, [pc, #52]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000956:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800095a:	881a      	ldrh	r2, [r3, #0]
 800095c:	f04f 33ff 	mov.w	r3, #4294967295
 8000960:	4909      	ldr	r1, [pc, #36]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000962:	480b      	ldr	r0, [pc, #44]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000964:	f003 fadf 	bl	8003f26 <HAL_UART_Transmit>
		profileCount = 0;
 8000968:	4b04      	ldr	r3, [pc, #16]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
	}
	return;
 800096e:	bf00      	nop
	if(htim == &htim5){
		timerReset();
	}else if(htim == &htim1){
		timerReset();
	}
}
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000134 	.word	0x20000134
 800097c:	200002d4 	.word	0x200002d4
 8000980:	20004300 	.word	0x20004300
 8000984:	0800508c 	.word	0x0800508c
 8000988:	20000280 	.word	0x20000280
 800098c:	200002d2 	.word	0x200002d2
 8000990:	200001dc 	.word	0x200001dc

08000994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b09c      	sub	sp, #112	; 0x70
 8000998:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099a:	f000 ff3b 	bl	8001814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800099e:	f000 f8a5 	bl	8000aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a2:	f000 fa7d 	bl	8000ea0 <MX_GPIO_Init>
  MX_DMA_Init();
 80009a6:	f000 fa23 	bl	8000df0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80009aa:	f000 f9f7 	bl	8000d9c <MX_USART2_UART_Init>
  MX_TIM5_Init();
 80009ae:	f000 f9a7 	bl	8000d00 <MX_TIM5_Init>
  MX_TIM1_Init();
 80009b2:	f000 f905 	bl	8000bc0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	char str[81] = { '\0' };
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	224d      	movs	r2, #77	; 0x4d
 80009be:	2100      	movs	r1, #0
 80009c0:	4618      	mov	r0, r3
 80009c2:	f003 fe4f 	bl	8004664 <memset>
	uint16_t str_len = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	str_len = sprintf(str, "Starting up!\r\n");
 80009cc:	463b      	mov	r3, r7
 80009ce:	493e      	ldr	r1, [pc, #248]	; (8000ac8 <main+0x134>)
 80009d0:	4618      	mov	r0, r3
 80009d2:	f003 fe4f 	bl	8004674 <siprintf>
 80009d6:	4603      	mov	r3, r0
 80009d8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80009dc:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80009e0:	4639      	mov	r1, r7
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
 80009e6:	4839      	ldr	r0, [pc, #228]	; (8000acc <main+0x138>)
 80009e8:	f003 fa9d 	bl	8003f26 <HAL_UART_Transmit>

	for(int i = 0; i < vertRes; i++){//load a test pattern
 80009ec:	2300      	movs	r3, #0
 80009ee:	667b      	str	r3, [r7, #100]	; 0x64
 80009f0:	e02c      	b.n	8000a4c <main+0xb8>
		for(int j = 0; j < horiRes; j++){
 80009f2:	2300      	movs	r3, #0
 80009f4:	663b      	str	r3, [r7, #96]	; 0x60
 80009f6:	e00d      	b.n	8000a14 <main+0x80>
			screenBuff[i*horiRes + j].value = 0b00111111;
 80009f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80009fa:	4613      	mov	r3, r2
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	4413      	add	r3, r2
 8000a00:	015b      	lsls	r3, r3, #5
 8000a02:	461a      	mov	r2, r3
 8000a04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a06:	4413      	add	r3, r2
 8000a08:	4a31      	ldr	r2, [pc, #196]	; (8000ad0 <main+0x13c>)
 8000a0a:	213f      	movs	r1, #63	; 0x3f
 8000a0c:	54d1      	strb	r1, [r2, r3]
		for(int j = 0; j < horiRes; j++){
 8000a0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a10:	3301      	adds	r3, #1
 8000a12:	663b      	str	r3, [r7, #96]	; 0x60
 8000a14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a16:	2b9f      	cmp	r3, #159	; 0x9f
 8000a18:	ddee      	ble.n	80009f8 <main+0x64>
			//screenBuff[i*vertRes + j].value = j & 0b111111;
		}
		for(int j = 0; j<64;j++){
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000a1e:	e00f      	b.n	8000a40 <main+0xac>
			screenBuff[i*horiRes + 8 + j].value = 0b00000000 + j;
 8000a20:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000a22:	4613      	mov	r3, r2
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	4413      	add	r3, r2
 8000a28:	015b      	lsls	r3, r3, #5
 8000a2a:	f103 0208 	add.w	r2, r3, #8
 8000a2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a30:	4413      	add	r3, r2
 8000a32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000a34:	b2d1      	uxtb	r1, r2
 8000a36:	4a26      	ldr	r2, [pc, #152]	; (8000ad0 <main+0x13c>)
 8000a38:	54d1      	strb	r1, [r2, r3]
		for(int j = 0; j<64;j++){
 8000a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000a40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a42:	2b3f      	cmp	r3, #63	; 0x3f
 8000a44:	ddec      	ble.n	8000a20 <main+0x8c>
	for(int i = 0; i < vertRes; i++){//load a test pattern
 8000a46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a48:	3301      	adds	r3, #1
 8000a4a:	667b      	str	r3, [r7, #100]	; 0x64
 8000a4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a4e:	2b63      	cmp	r3, #99	; 0x63
 8000a50:	ddcf      	ble.n	80009f2 <main+0x5e>
		}
	}

	for(int i = 0; i < vertRes; i++){//load a clear test pattern
 8000a52:	2300      	movs	r3, #0
 8000a54:	65bb      	str	r3, [r7, #88]	; 0x58
 8000a56:	e00b      	b.n	8000a70 <main+0xdc>
		for(int j = 0; j < horiRes; j++){
 8000a58:	2300      	movs	r3, #0
 8000a5a:	657b      	str	r3, [r7, #84]	; 0x54
 8000a5c:	e002      	b.n	8000a64 <main+0xd0>
 8000a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a60:	3301      	adds	r3, #1
 8000a62:	657b      	str	r3, [r7, #84]	; 0x54
 8000a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a66:	2b9f      	cmp	r3, #159	; 0x9f
 8000a68:	ddf9      	ble.n	8000a5e <main+0xca>
	for(int i = 0; i < vertRes; i++){//load a clear test pattern
 8000a6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8000a70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a72:	2b63      	cmp	r3, #99	; 0x63
 8000a74:	ddf0      	ble.n	8000a58 <main+0xc4>
			//screenBuff[i*horiRes + j].value = 0;
		}
	}

	vgaSetup(&htim1, &hdma_tim1_up, &hdma_memtomem_dma2_stream0, vgaPin13_Vsync_GPIO_Port, vgaPin13_Vsync_Pin);
 8000a76:	2302      	movs	r3, #2
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <main+0x140>)
 8000a7c:	4a16      	ldr	r2, [pc, #88]	; (8000ad8 <main+0x144>)
 8000a7e:	4917      	ldr	r1, [pc, #92]	; (8000adc <main+0x148>)
 8000a80:	4817      	ldr	r0, [pc, #92]	; (8000ae0 <main+0x14c>)
 8000a82:	f000 fdc9 	bl	8001618 <vgaSetup>
	registerHUARTvga(&huart2);
 8000a86:	4811      	ldr	r0, [pc, #68]	; (8000acc <main+0x138>)
 8000a88:	f000 fc4e 	bl	8001328 <registerHUARTvga>
	registerHUARTdmaDebug(&huart2);
 8000a8c:	480f      	ldr	r0, [pc, #60]	; (8000acc <main+0x138>)
 8000a8e:	f7ff ff3f 	bl	8000910 <registerHUARTdmaDebug>
	registerDebugInterupts(&hdma_tim1_up);
 8000a92:	4812      	ldr	r0, [pc, #72]	; (8000adc <main+0x148>)
 8000a94:	f7ff fefe 	bl	8000894 <registerDebugInterupts>

	//HAL_TIM_Base_Start_IT(&htim5);//profile performance

	str_len = sprintf(str, "\r\nDone\r\n");
 8000a98:	463b      	mov	r3, r7
 8000a9a:	4912      	ldr	r1, [pc, #72]	; (8000ae4 <main+0x150>)
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f003 fde9 	bl	8004674 <siprintf>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8000aa8:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8000aac:	4639      	mov	r1, r7
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	4806      	ldr	r0, [pc, #24]	; (8000acc <main+0x138>)
 8000ab4:	f003 fa37 	bl	8003f26 <HAL_UART_Transmit>

	vgaStart();
 8000ab8:	f000 fe32 	bl	8001720 <vgaStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		profileCount++;
 8000abc:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <main+0x154>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	4a09      	ldr	r2, [pc, #36]	; (8000ae8 <main+0x154>)
 8000ac4:	6013      	str	r3, [r2, #0]
 8000ac6:	e7f9      	b.n	8000abc <main+0x128>
 8000ac8:	080050b0 	.word	0x080050b0
 8000acc:	200001dc 	.word	0x200001dc
 8000ad0:	2000046c 	.word	0x2000046c
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	20000220 	.word	0x20000220
 8000adc:	2000017c 	.word	0x2000017c
 8000ae0:	200000ec 	.word	0x200000ec
 8000ae4:	080050c0 	.word	0x080050c0
 8000ae8:	200002d4 	.word	0x200002d4

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b094      	sub	sp, #80	; 0x50
 8000af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	f107 0320 	add.w	r3, r7, #32
 8000af6:	2230      	movs	r2, #48	; 0x30
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f003 fdb2 	bl	8004664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	4b28      	ldr	r3, [pc, #160]	; (8000bb8 <SystemClock_Config+0xcc>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	4a27      	ldr	r2, [pc, #156]	; (8000bb8 <SystemClock_Config+0xcc>)
 8000b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b20:	4b25      	ldr	r3, [pc, #148]	; (8000bb8 <SystemClock_Config+0xcc>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <SystemClock_Config+0xd0>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b38:	4a20      	ldr	r2, [pc, #128]	; (8000bbc <SystemClock_Config+0xd0>)
 8000b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b3e:	6013      	str	r3, [r2, #0]
 8000b40:	4b1e      	ldr	r3, [pc, #120]	; (8000bbc <SystemClock_Config+0xd0>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b50:	2301      	movs	r3, #1
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b54:	2310      	movs	r3, #16
 8000b56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b60:	2308      	movs	r3, #8
 8000b62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 151;
 8000b64:	2397      	movs	r3, #151	; 0x97
 8000b66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b68:	2304      	movs	r3, #4
 8000b6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b6c:	2307      	movs	r3, #7
 8000b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b70:	f107 0320 	add.w	r3, r7, #32
 8000b74:	4618      	mov	r0, r3
 8000b76:	f001 fd3f 	bl	80025f8 <HAL_RCC_OscConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b80:	f000 fa20 	bl	8000fc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b84:	230f      	movs	r3, #15
 8000b86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	2102      	movs	r1, #2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f001 ffa1 	bl	8002ae8 <HAL_RCC_ClockConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000bac:	f000 fa0a 	bl	8000fc4 <Error_Handler>
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	3750      	adds	r7, #80	; 0x50
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40007000 	.word	0x40007000

08000bc0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b096      	sub	sp, #88	; 0x58
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]
 8000bee:	615a      	str	r2, [r3, #20]
 8000bf0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2220      	movs	r2, #32
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f003 fd33 	bl	8004664 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bfe:	4b3e      	ldr	r3, [pc, #248]	; (8000cf8 <MX_TIM1_Init+0x138>)
 8000c00:	4a3e      	ldr	r2, [pc, #248]	; (8000cfc <MX_TIM1_Init+0x13c>)
 8000c02:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8000c04:	4b3c      	ldr	r3, [pc, #240]	; (8000cf8 <MX_TIM1_Init+0x138>)
 8000c06:	22c7      	movs	r2, #199	; 0xc7
 8000c08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0a:	4b3b      	ldr	r3, [pc, #236]	; (8000cf8 <MX_TIM1_Init+0x138>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3-1;
 8000c10:	4b39      	ldr	r3, [pc, #228]	; (8000cf8 <MX_TIM1_Init+0x138>)
 8000c12:	2202      	movs	r2, #2
 8000c14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c16:	4b38      	ldr	r3, [pc, #224]	; (8000cf8 <MX_TIM1_Init+0x138>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c1c:	4b36      	ldr	r3, [pc, #216]	; (8000cf8 <MX_TIM1_Init+0x138>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c22:	4b35      	ldr	r3, [pc, #212]	; (8000cf8 <MX_TIM1_Init+0x138>)
 8000c24:	2280      	movs	r2, #128	; 0x80
 8000c26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c28:	4833      	ldr	r0, [pc, #204]	; (8000cf8 <MX_TIM1_Init+0x138>)
 8000c2a:	f002 f97d 	bl	8002f28 <HAL_TIM_Base_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000c34:	f000 f9c6 	bl	8000fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c42:	4619      	mov	r1, r3
 8000c44:	482c      	ldr	r0, [pc, #176]	; (8000cf8 <MX_TIM1_Init+0x138>)
 8000c46:	f002 fc91 	bl	800356c <HAL_TIM_ConfigClockSource>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000c50:	f000 f9b8 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c54:	4828      	ldr	r0, [pc, #160]	; (8000cf8 <MX_TIM1_Init+0x138>)
 8000c56:	f002 f9b6 	bl	8002fc6 <HAL_TIM_PWM_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000c60:	f000 f9b0 	bl	8000fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c64:	2300      	movs	r3, #0
 8000c66:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c70:	4619      	mov	r1, r3
 8000c72:	4821      	ldr	r0, [pc, #132]	; (8000cf8 <MX_TIM1_Init+0x138>)
 8000c74:	f003 f836 	bl	8003ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000c7e:	f000 f9a1 	bl	8000fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c82:	2360      	movs	r3, #96	; 0x60
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 8000c86:	2302      	movs	r3, #2
 8000c88:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c96:	2300      	movs	r3, #0
 8000c98:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4814      	ldr	r0, [pc, #80]	; (8000cf8 <MX_TIM1_Init+0x138>)
 8000ca8:	f002 fb9e 	bl	80033e8 <HAL_TIM_PWM_ConfigChannel>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000cb2:	f000 f987 	bl	8000fc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4807      	ldr	r0, [pc, #28]	; (8000cf8 <MX_TIM1_Init+0x138>)
 8000cda:	f003 f871 	bl	8003dc0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000ce4:	f000 f96e 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ce8:	4803      	ldr	r0, [pc, #12]	; (8000cf8 <MX_TIM1_Init+0x138>)
 8000cea:	f000 fa15 	bl	8001118 <HAL_TIM_MspPostInit>

}
 8000cee:	bf00      	nop
 8000cf0:	3758      	adds	r7, #88	; 0x58
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200000ec 	.word	0x200000ec
 8000cfc:	40010000 	.word	0x40010000

08000d00 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d06:	f107 0308 	add.w	r3, r7, #8
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d14:	463b      	mov	r3, r7
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d1c:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <MX_TIM5_Init+0x94>)
 8000d1e:	4a1e      	ldr	r2, [pc, #120]	; (8000d98 <MX_TIM5_Init+0x98>)
 8000d20:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 7550-1;
 8000d22:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <MX_TIM5_Init+0x94>)
 8000d24:	f641 527d 	movw	r2, #7549	; 0x1d7d
 8000d28:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <MX_TIM5_Init+0x94>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 8000d30:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <MX_TIM5_Init+0x94>)
 8000d32:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d36:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <MX_TIM5_Init+0x94>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <MX_TIM5_Init+0x94>)
 8000d40:	2280      	movs	r2, #128	; 0x80
 8000d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000d44:	4813      	ldr	r0, [pc, #76]	; (8000d94 <MX_TIM5_Init+0x94>)
 8000d46:	f002 f8ef 	bl	8002f28 <HAL_TIM_Base_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000d50:	f000 f938 	bl	8000fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000d5a:	f107 0308 	add.w	r3, r7, #8
 8000d5e:	4619      	mov	r1, r3
 8000d60:	480c      	ldr	r0, [pc, #48]	; (8000d94 <MX_TIM5_Init+0x94>)
 8000d62:	f002 fc03 	bl	800356c <HAL_TIM_ConfigClockSource>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000d6c:	f000 f92a 	bl	8000fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d70:	2300      	movs	r3, #0
 8000d72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d78:	463b      	mov	r3, r7
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_TIM5_Init+0x94>)
 8000d7e:	f002 ffb1 	bl	8003ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000d88:	f000 f91c 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000134 	.word	0x20000134
 8000d98:	40000c00 	.word	0x40000c00

08000d9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000da2:	4a12      	ldr	r2, [pc, #72]	; (8000dec <MX_USART2_UART_Init+0x50>)
 8000da4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000da8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000dd4:	f003 f85a 	bl	8003e8c <HAL_UART_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dde:	f000 f8f1 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200001dc 	.word	0x200001dc
 8000dec:	40004400 	.word	0x40004400

08000df0 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	4b26      	ldr	r3, [pc, #152]	; (8000e94 <MX_DMA_Init+0xa4>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a25      	ldr	r2, [pc, #148]	; (8000e94 <MX_DMA_Init+0xa4>)
 8000e00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b23      	ldr	r3, [pc, #140]	; (8000e94 <MX_DMA_Init+0xa4>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000e12:	4b21      	ldr	r3, [pc, #132]	; (8000e98 <MX_DMA_Init+0xa8>)
 8000e14:	4a21      	ldr	r2, [pc, #132]	; (8000e9c <MX_DMA_Init+0xac>)
 8000e16:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000e18:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <MX_DMA_Init+0xa8>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000e1e:	4b1e      	ldr	r3, [pc, #120]	; (8000e98 <MX_DMA_Init+0xa8>)
 8000e20:	2280      	movs	r2, #128	; 0x80
 8000e22:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000e24:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <MX_DMA_Init+0xa8>)
 8000e26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e2a:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <MX_DMA_Init+0xa8>)
 8000e2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e32:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e34:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <MX_DMA_Init+0xa8>)
 8000e36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e3a:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e3c:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <MX_DMA_Init+0xa8>)
 8000e3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e42:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <MX_DMA_Init+0xa8>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <MX_DMA_Init+0xa8>)
 8000e4c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e50:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <MX_DMA_Init+0xa8>)
 8000e54:	2204      	movs	r2, #4
 8000e56:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <MX_DMA_Init+0xa8>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <MX_DMA_Init+0xa8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <MX_DMA_Init+0xa8>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000e6a:	480b      	ldr	r0, [pc, #44]	; (8000e98 <MX_DMA_Init+0xa8>)
 8000e6c:	f000 fe56 	bl	8001b1c <HAL_DMA_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_DMA_Init+0x8a>
  {
    Error_Handler( );
 8000e76:	f000 f8a5 	bl	8000fc4 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2044      	movs	r0, #68	; 0x44
 8000e80:	f000 fe15 	bl	8001aae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000e84:	2044      	movs	r0, #68	; 0x44
 8000e86:	f000 fe2e 	bl	8001ae6 <HAL_NVIC_EnableIRQ>

}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800
 8000e98:	20000220 	.word	0x20000220
 8000e9c:	40026410 	.word	0x40026410

08000ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	4b3f      	ldr	r3, [pc, #252]	; (8000fb8 <MX_GPIO_Init+0x118>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a3e      	ldr	r2, [pc, #248]	; (8000fb8 <MX_GPIO_Init+0x118>)
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b3c      	ldr	r3, [pc, #240]	; (8000fb8 <MX_GPIO_Init+0x118>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	4b38      	ldr	r3, [pc, #224]	; (8000fb8 <MX_GPIO_Init+0x118>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a37      	ldr	r2, [pc, #220]	; (8000fb8 <MX_GPIO_Init+0x118>)
 8000edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b35      	ldr	r3, [pc, #212]	; (8000fb8 <MX_GPIO_Init+0x118>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	4b31      	ldr	r3, [pc, #196]	; (8000fb8 <MX_GPIO_Init+0x118>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a30      	ldr	r2, [pc, #192]	; (8000fb8 <MX_GPIO_Init+0x118>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b2e      	ldr	r3, [pc, #184]	; (8000fb8 <MX_GPIO_Init+0x118>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <MX_GPIO_Init+0x118>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a29      	ldr	r2, [pc, #164]	; (8000fb8 <MX_GPIO_Init+0x118>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b27      	ldr	r3, [pc, #156]	; (8000fb8 <MX_GPIO_Init+0x118>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, vgaPin0_B0_Pin|vgaPin1_B1_Pin|vgaPin2_B2_Pin|vgaPin3_B3_Pin
 8000f26:	2200      	movs	r2, #0
 8000f28:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8000f2c:	4823      	ldr	r0, [pc, #140]	; (8000fbc <MX_GPIO_Init+0x11c>)
 8000f2e:	f001 fb49 	bl	80025c4 <HAL_GPIO_WritePin>
                          |vgaPin4_G0_Pin|vgaPin5_G1_Pin|vgaPin6_G2_Pin|vgaPin7_G3_Pin
                          |vgaPin8_R0_Pin|vgaPin9_R1_Pin|vgaPin10_R2_Pin|vgaPin11_R3_Pin
                          |vgaPin12_Hsync_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, vgaPin13_Vsync_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2122      	movs	r1, #34	; 0x22
 8000f36:	4822      	ldr	r0, [pc, #136]	; (8000fc0 <MX_GPIO_Init+0x120>)
 8000f38:	f001 fb44 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f42:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	481a      	ldr	r0, [pc, #104]	; (8000fbc <MX_GPIO_Init+0x11c>)
 8000f54:	f001 f9b2 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pins : vgaPin0_B0_Pin vgaPin1_B1_Pin vgaPin2_B2_Pin vgaPin3_B3_Pin
                           vgaPin4_G0_Pin vgaPin5_G1_Pin vgaPin6_G2_Pin vgaPin7_G3_Pin
                           vgaPin8_R0_Pin vgaPin9_R1_Pin vgaPin10_R2_Pin vgaPin11_R3_Pin
                           vgaPin12_Hsync_Pin */
  GPIO_InitStruct.Pin = vgaPin0_B0_Pin|vgaPin1_B1_Pin|vgaPin2_B2_Pin|vgaPin3_B3_Pin
 8000f58:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000f5c:	617b      	str	r3, [r7, #20]
                          |vgaPin4_G0_Pin|vgaPin5_G1_Pin|vgaPin6_G2_Pin|vgaPin7_G3_Pin
                          |vgaPin8_R0_Pin|vgaPin9_R1_Pin|vgaPin10_R2_Pin|vgaPin11_R3_Pin
                          |vgaPin12_Hsync_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f66:	2303      	movs	r3, #3
 8000f68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4812      	ldr	r0, [pc, #72]	; (8000fbc <MX_GPIO_Init+0x11c>)
 8000f72:	f001 f9a3 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pin : vgaPin13_Vsync_Pin */
  GPIO_InitStruct.Pin = vgaPin13_Vsync_Pin;
 8000f76:	2302      	movs	r3, #2
 8000f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f82:	2302      	movs	r3, #2
 8000f84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(vgaPin13_Vsync_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <MX_GPIO_Init+0x120>)
 8000f8e:	f001 f995 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f92:	2320      	movs	r3, #32
 8000f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_GPIO_Init+0x120>)
 8000faa:	f001 f987 	bl	80022bc <HAL_GPIO_Init>

}
 8000fae:	bf00      	nop
 8000fb0:	3728      	adds	r7, #40	; 0x28
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020800 	.word	0x40020800
 8000fc0:	40020000 	.word	0x40020000

08000fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc8:	b672      	cpsid	i
}
 8000fca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000fcc:	e7fe      	b.n	8000fcc <Error_Handler+0x8>
	...

08000fd0 <HAL_MspInit>:
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <HAL_MspInit+0x4c>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	4a0f      	ldr	r2, [pc, #60]	; (800101c <HAL_MspInit+0x4c>)
 8000fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	; (800101c <HAL_MspInit+0x4c>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	603b      	str	r3, [r7, #0]
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <HAL_MspInit+0x4c>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	4a08      	ldr	r2, [pc, #32]	; (800101c <HAL_MspInit+0x4c>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001000:	6413      	str	r3, [r2, #64]	; 0x40
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_MspInit+0x4c>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	2007      	movs	r0, #7
 8001010:	f000 fd42 	bl	8001a98 <HAL_NVIC_SetPriorityGrouping>
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40023800 	.word	0x40023800

08001020 <HAL_TIM_Base_MspInit>:
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a35      	ldr	r2, [pc, #212]	; (8001104 <HAL_TIM_Base_MspInit+0xe4>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d148      	bne.n	80010c4 <HAL_TIM_Base_MspInit+0xa4>
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b34      	ldr	r3, [pc, #208]	; (8001108 <HAL_TIM_Base_MspInit+0xe8>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	4a33      	ldr	r2, [pc, #204]	; (8001108 <HAL_TIM_Base_MspInit+0xe8>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6453      	str	r3, [r2, #68]	; 0x44
 8001042:	4b31      	ldr	r3, [pc, #196]	; (8001108 <HAL_TIM_Base_MspInit+0xe8>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4b2f      	ldr	r3, [pc, #188]	; (800110c <HAL_TIM_Base_MspInit+0xec>)
 8001050:	4a2f      	ldr	r2, [pc, #188]	; (8001110 <HAL_TIM_Base_MspInit+0xf0>)
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	4b2d      	ldr	r3, [pc, #180]	; (800110c <HAL_TIM_Base_MspInit+0xec>)
 8001056:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	4b2b      	ldr	r3, [pc, #172]	; (800110c <HAL_TIM_Base_MspInit+0xec>)
 800105e:	2240      	movs	r2, #64	; 0x40
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	4b2a      	ldr	r3, [pc, #168]	; (800110c <HAL_TIM_Base_MspInit+0xec>)
 8001064:	2200      	movs	r2, #0
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	4b28      	ldr	r3, [pc, #160]	; (800110c <HAL_TIM_Base_MspInit+0xec>)
 800106a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800106e:	611a      	str	r2, [r3, #16]
 8001070:	4b26      	ldr	r3, [pc, #152]	; (800110c <HAL_TIM_Base_MspInit+0xec>)
 8001072:	2200      	movs	r2, #0
 8001074:	615a      	str	r2, [r3, #20]
 8001076:	4b25      	ldr	r3, [pc, #148]	; (800110c <HAL_TIM_Base_MspInit+0xec>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
 800107c:	4b23      	ldr	r3, [pc, #140]	; (800110c <HAL_TIM_Base_MspInit+0xec>)
 800107e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001082:	61da      	str	r2, [r3, #28]
 8001084:	4b21      	ldr	r3, [pc, #132]	; (800110c <HAL_TIM_Base_MspInit+0xec>)
 8001086:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800108a:	621a      	str	r2, [r3, #32]
 800108c:	4b1f      	ldr	r3, [pc, #124]	; (800110c <HAL_TIM_Base_MspInit+0xec>)
 800108e:	2204      	movs	r2, #4
 8001090:	625a      	str	r2, [r3, #36]	; 0x24
 8001092:	4b1e      	ldr	r3, [pc, #120]	; (800110c <HAL_TIM_Base_MspInit+0xec>)
 8001094:	2201      	movs	r2, #1
 8001096:	629a      	str	r2, [r3, #40]	; 0x28
 8001098:	4b1c      	ldr	r3, [pc, #112]	; (800110c <HAL_TIM_Base_MspInit+0xec>)
 800109a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800109e:	62da      	str	r2, [r3, #44]	; 0x2c
 80010a0:	4b1a      	ldr	r3, [pc, #104]	; (800110c <HAL_TIM_Base_MspInit+0xec>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	631a      	str	r2, [r3, #48]	; 0x30
 80010a6:	4819      	ldr	r0, [pc, #100]	; (800110c <HAL_TIM_Base_MspInit+0xec>)
 80010a8:	f000 fd38 	bl	8001b1c <HAL_DMA_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_TIM_Base_MspInit+0x96>
 80010b2:	f7ff ff87 	bl	8000fc4 <Error_Handler>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a14      	ldr	r2, [pc, #80]	; (800110c <HAL_TIM_Base_MspInit+0xec>)
 80010ba:	621a      	str	r2, [r3, #32]
 80010bc:	4a13      	ldr	r2, [pc, #76]	; (800110c <HAL_TIM_Base_MspInit+0xec>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6393      	str	r3, [r2, #56]	; 0x38
 80010c2:	e01a      	b.n	80010fa <HAL_TIM_Base_MspInit+0xda>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a12      	ldr	r2, [pc, #72]	; (8001114 <HAL_TIM_Base_MspInit+0xf4>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d115      	bne.n	80010fa <HAL_TIM_Base_MspInit+0xda>
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <HAL_TIM_Base_MspInit+0xe8>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	4a0c      	ldr	r2, [pc, #48]	; (8001108 <HAL_TIM_Base_MspInit+0xe8>)
 80010d8:	f043 0308 	orr.w	r3, r3, #8
 80010dc:	6413      	str	r3, [r2, #64]	; 0x40
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_TIM_Base_MspInit+0xe8>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f003 0308 	and.w	r3, r3, #8
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	2201      	movs	r2, #1
 80010ec:	2100      	movs	r1, #0
 80010ee:	2032      	movs	r0, #50	; 0x32
 80010f0:	f000 fcdd 	bl	8001aae <HAL_NVIC_SetPriority>
 80010f4:	2032      	movs	r0, #50	; 0x32
 80010f6:	f000 fcf6 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40010000 	.word	0x40010000
 8001108:	40023800 	.word	0x40023800
 800110c:	2000017c 	.word	0x2000017c
 8001110:	40026488 	.word	0x40026488
 8001114:	40000c00 	.word	0x40000c00

08001118 <HAL_TIM_MspPostInit>:
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a12      	ldr	r2, [pc, #72]	; (8001180 <HAL_TIM_MspPostInit+0x68>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d11e      	bne.n	8001178 <HAL_TIM_MspPostInit+0x60>
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <HAL_TIM_MspPostInit+0x6c>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a10      	ldr	r2, [pc, #64]	; (8001184 <HAL_TIM_MspPostInit+0x6c>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <HAL_TIM_MspPostInit+0x6c>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	f44f 7380 	mov.w	r3, #256	; 0x100
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	2302      	movs	r3, #2
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	2303      	movs	r3, #3
 8001166:	61bb      	str	r3, [r7, #24]
 8001168:	2301      	movs	r3, #1
 800116a:	61fb      	str	r3, [r7, #28]
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	4619      	mov	r1, r3
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <HAL_TIM_MspPostInit+0x70>)
 8001174:	f001 f8a2 	bl	80022bc <HAL_GPIO_Init>
 8001178:	bf00      	nop
 800117a:	3720      	adds	r7, #32
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40010000 	.word	0x40010000
 8001184:	40023800 	.word	0x40023800
 8001188:	40020000 	.word	0x40020000

0800118c <HAL_UART_MspInit>:
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	; 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a19      	ldr	r2, [pc, #100]	; (8001210 <HAL_UART_MspInit+0x84>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d12b      	bne.n	8001206 <HAL_UART_MspInit+0x7a>
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <HAL_UART_MspInit+0x88>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	4a17      	ldr	r2, [pc, #92]	; (8001214 <HAL_UART_MspInit+0x88>)
 80011b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011bc:	6413      	str	r3, [r2, #64]	; 0x40
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <HAL_UART_MspInit+0x88>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <HAL_UART_MspInit+0x88>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a10      	ldr	r2, [pc, #64]	; (8001214 <HAL_UART_MspInit+0x88>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <HAL_UART_MspInit+0x88>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	230c      	movs	r3, #12
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	2302      	movs	r3, #2
 80011ec:	61bb      	str	r3, [r7, #24]
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
 80011f2:	2300      	movs	r3, #0
 80011f4:	623b      	str	r3, [r7, #32]
 80011f6:	2307      	movs	r3, #7
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4619      	mov	r1, r3
 8001200:	4805      	ldr	r0, [pc, #20]	; (8001218 <HAL_UART_MspInit+0x8c>)
 8001202:	f001 f85b 	bl	80022bc <HAL_GPIO_Init>
 8001206:	bf00      	nop
 8001208:	3728      	adds	r7, #40	; 0x28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40004400 	.word	0x40004400
 8001214:	40023800 	.word	0x40023800
 8001218:	40020000 	.word	0x40020000

0800121c <NMI_Handler>:
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
 8001220:	e7fe      	b.n	8001220 <NMI_Handler+0x4>

08001222 <HardFault_Handler>:
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
 8001226:	e7fe      	b.n	8001226 <HardFault_Handler+0x4>

08001228 <MemManage_Handler>:
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
 800122c:	e7fe      	b.n	800122c <MemManage_Handler+0x4>

0800122e <BusFault_Handler>:
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
 8001232:	e7fe      	b.n	8001232 <BusFault_Handler+0x4>

08001234 <UsageFault_Handler>:
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
 8001238:	e7fe      	b.n	8001238 <UsageFault_Handler+0x4>

0800123a <SVC_Handler>:
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <DebugMon_Handler>:
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <PendSV_Handler>:
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <SysTick_Handler>:
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
 8001268:	f000 fb26 	bl	80018b8 <HAL_IncTick>
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <TIM5_IRQHandler>:
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <TIM5_IRQHandler+0x10>)
 8001276:	f001 ffaf 	bl	80031d8 <HAL_TIM_IRQHandler>
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000134 	.word	0x20000134

08001284 <DMA2_Stream5_IRQHandler>:
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
 8001288:	4802      	ldr	r0, [pc, #8]	; (8001294 <DMA2_Stream5_IRQHandler+0x10>)
 800128a:	f000 fd4d 	bl	8001d28 <HAL_DMA_IRQHandler>
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2000017c 	.word	0x2000017c

08001298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a0:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <_sbrk+0x5c>)
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <_sbrk+0x60>)
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <_sbrk+0x64>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d102      	bne.n	80012ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <_sbrk+0x64>)
 80012b6:	4a12      	ldr	r2, [pc, #72]	; (8001300 <_sbrk+0x68>)
 80012b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <_sbrk+0x64>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d207      	bcs.n	80012d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c8:	f003 f9a2 	bl	8004610 <__errno>
 80012cc:	4603      	mov	r3, r0
 80012ce:	220c      	movs	r2, #12
 80012d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
 80012d6:	e009      	b.n	80012ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <_sbrk+0x64>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <_sbrk+0x64>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	4a05      	ldr	r2, [pc, #20]	; (80012fc <_sbrk+0x64>)
 80012e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ea:	68fb      	ldr	r3, [r7, #12]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20018000 	.word	0x20018000
 80012f8:	00000400 	.word	0x00000400
 80012fc:	200002d8 	.word	0x200002d8
 8001300:	20004718 	.word	0x20004718

08001304 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <SystemInit+0x20>)
 800130a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800130e:	4a05      	ldr	r2, [pc, #20]	; (8001324 <SystemInit+0x20>)
 8001310:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <registerHUARTvga>:

	_Static_assert(horiWhole == horiRes+horiFront+horiSync+horiBack, "Horizontal vga configuration does not sum up");
	_Static_assert(vertWhole == vertArea+vertFront+vertSync+vertBack, "Vertical vga configuration does not sum up");
}

void registerHUARTvga(UART_HandleTypeDef * huart){
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	huartE = huart;
 8001330:	4a04      	ldr	r2, [pc, #16]	; (8001344 <registerHUARTvga+0x1c>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6013      	str	r3, [r2, #0]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	20004314 	.word	0x20004314

08001348 <dumpBuffer>:
	//old_memCopy((uint32_t*)&screenBuff[horiRes*lineCount], (uint32_t *)&lineBuffPart[horiFront+horiSync+horiBack], horiRes/4);
}


char strDumpBuff[1000];
void dumpBuffer(char * dump, uint32_t bytes, uint32_t * indicatorLength, char * indicator, uint32_t columnSets){
 8001348:	b580      	push	{r7, lr}
 800134a:	b08e      	sub	sp, #56	; 0x38
 800134c:	af02      	add	r7, sp, #8
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
 8001354:	603b      	str	r3, [r7, #0]
	char * str = strDumpBuff;
 8001356:	4b66      	ldr	r3, [pc, #408]	; (80014f0 <dumpBuffer+0x1a8>)
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t nextIndicator;
	if(indicatorLength != NULL){
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d002      	beq.n	8001366 <dumpBuffer+0x1e>
		nextIndicator = *indicatorLength;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	str += sprintf(str, "      ");
 8001366:	4963      	ldr	r1, [pc, #396]	; (80014f4 <dumpBuffer+0x1ac>)
 8001368:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800136a:	f003 f983 	bl	8004674 <siprintf>
 800136e:	4603      	mov	r3, r0
 8001370:	461a      	mov	r2, r3
 8001372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001374:	4413      	add	r3, r2
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint32_t i = 0; i < columnSets; i++){
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
 800137c:	e00b      	b.n	8001396 <dumpBuffer+0x4e>
		str += sprintf(str, "0   1   2   3   4   5   6   7   8   9   a   b   c   d   e   f    ");
 800137e:	495e      	ldr	r1, [pc, #376]	; (80014f8 <dumpBuffer+0x1b0>)
 8001380:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001382:	f003 f977 	bl	8004674 <siprintf>
 8001386:	4603      	mov	r3, r0
 8001388:	461a      	mov	r2, r3
 800138a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138c:	4413      	add	r3, r2
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint32_t i = 0; i < columnSets; i++){
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	3301      	adds	r3, #1
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
 8001396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800139a:	429a      	cmp	r2, r3
 800139c:	d3ef      	bcc.n	800137e <dumpBuffer+0x36>
	}
	str += sprintf(str, "\n\r");
 800139e:	4957      	ldr	r1, [pc, #348]	; (80014fc <dumpBuffer+0x1b4>)
 80013a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80013a2:	f003 f967 	bl	8004674 <siprintf>
 80013a6:	4603      	mov	r3, r0
 80013a8:	461a      	mov	r2, r3
 80013aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ac:	4413      	add	r3, r2
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint32_t i = 0; i < bytes;){
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
 80013b4:	e07f      	b.n	80014b6 <dumpBuffer+0x16e>

		str += sprintf(str, "%3lx ", i / (16));
 80013b6:	6a3b      	ldr	r3, [r7, #32]
 80013b8:	091b      	lsrs	r3, r3, #4
 80013ba:	461a      	mov	r2, r3
 80013bc:	4950      	ldr	r1, [pc, #320]	; (8001500 <dumpBuffer+0x1b8>)
 80013be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80013c0:	f003 f958 	bl	8004674 <siprintf>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ca:	4413      	add	r3, r2
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(uint32_t columnSetI = 0; columnSetI < columnSets; columnSetI++){
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
 80013d2:	e063      	b.n	800149c <dumpBuffer+0x154>
			for(uint32_t j = i+16; i<j && i < bytes; i++){
 80013d4:	6a3b      	ldr	r3, [r7, #32]
 80013d6:	3310      	adds	r3, #16
 80013d8:	61bb      	str	r3, [r7, #24]
 80013da:	e038      	b.n	800144e <dumpBuffer+0x106>
				uint32_t tmp = dump[i];
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	4413      	add	r3, r2
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	617b      	str	r3, [r7, #20]
				if(indicatorLength == NULL){
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10a      	bne.n	8001402 <dumpBuffer+0xba>
					str += sprintf(str, " %02lx ", tmp);
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	4945      	ldr	r1, [pc, #276]	; (8001504 <dumpBuffer+0x1bc>)
 80013f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80013f2:	f003 f93f 	bl	8004674 <siprintf>
 80013f6:	4603      	mov	r3, r0
 80013f8:	461a      	mov	r2, r3
 80013fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013fc:	4413      	add	r3, r2
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001400:	e022      	b.n	8001448 <dumpBuffer+0x100>
				}else{
					if(i == nextIndicator){
 8001402:	6a3a      	ldr	r2, [r7, #32]
 8001404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001406:	429a      	cmp	r2, r3
 8001408:	d10d      	bne.n	8001426 <dumpBuffer+0xde>
						indicatorLength++;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3304      	adds	r3, #4
 800140e:	607b      	str	r3, [r7, #4]
						nextIndicator += *indicatorLength;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001416:	4413      	add	r3, r2
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
						indicator++;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	603b      	str	r3, [r7, #0]
						indicator++;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	3301      	adds	r3, #1
 8001424:	603b      	str	r3, [r7, #0]
					}
					str += sprintf(str, "%c%02lx%c", *indicator, tmp, *(indicator+1));
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	461a      	mov	r2, r3
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	3301      	adds	r3, #1
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	4934      	ldr	r1, [pc, #208]	; (8001508 <dumpBuffer+0x1c0>)
 8001438:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800143a:	f003 f91b 	bl	8004674 <siprintf>
 800143e:	4603      	mov	r3, r0
 8001440:	461a      	mov	r2, r3
 8001442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001444:	4413      	add	r3, r2
 8001446:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(uint32_t j = i+16; i<j && i < bytes; i++){
 8001448:	6a3b      	ldr	r3, [r7, #32]
 800144a:	3301      	adds	r3, #1
 800144c:	623b      	str	r3, [r7, #32]
 800144e:	6a3a      	ldr	r2, [r7, #32]
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	429a      	cmp	r2, r3
 8001454:	d203      	bcs.n	800145e <dumpBuffer+0x116>
 8001456:	6a3a      	ldr	r2, [r7, #32]
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	429a      	cmp	r2, r3
 800145c:	d3be      	bcc.n	80013dc <dumpBuffer+0x94>
				}
			}
			str += sprintf(str, "  ");
 800145e:	492b      	ldr	r1, [pc, #172]	; (800150c <dumpBuffer+0x1c4>)
 8001460:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001462:	f003 f907 	bl	8004674 <siprintf>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800146c:	4413      	add	r3, r2
 800146e:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(str - strDumpBuff > sizeof(strDumpBuff)/2){
 8001470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001472:	4a1f      	ldr	r2, [pc, #124]	; (80014f0 <dumpBuffer+0x1a8>)
 8001474:	1a9b      	subs	r3, r3, r2
 8001476:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800147a:	d90c      	bls.n	8001496 <dumpBuffer+0x14e>
				HAL_UART_Transmit(huartE, (uint8_t*) strDumpBuff, str - strDumpBuff, HAL_MAX_DELAY);
 800147c:	4b24      	ldr	r3, [pc, #144]	; (8001510 <dumpBuffer+0x1c8>)
 800147e:	6818      	ldr	r0, [r3, #0]
 8001480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001482:	4a1b      	ldr	r2, [pc, #108]	; (80014f0 <dumpBuffer+0x1a8>)
 8001484:	1a9b      	subs	r3, r3, r2
 8001486:	b29a      	uxth	r2, r3
 8001488:	f04f 33ff 	mov.w	r3, #4294967295
 800148c:	4918      	ldr	r1, [pc, #96]	; (80014f0 <dumpBuffer+0x1a8>)
 800148e:	f002 fd4a 	bl	8003f26 <HAL_UART_Transmit>
				str = strDumpBuff;
 8001492:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <dumpBuffer+0x1a8>)
 8001494:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(uint32_t columnSetI = 0; columnSetI < columnSets; columnSetI++){
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3301      	adds	r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
 800149c:	69fa      	ldr	r2, [r7, #28]
 800149e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d397      	bcc.n	80013d4 <dumpBuffer+0x8c>
			}
		}
		str += sprintf(str, "\n\r");
 80014a4:	4915      	ldr	r1, [pc, #84]	; (80014fc <dumpBuffer+0x1b4>)
 80014a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014a8:	f003 f8e4 	bl	8004674 <siprintf>
 80014ac:	4603      	mov	r3, r0
 80014ae:	461a      	mov	r2, r3
 80014b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b2:	4413      	add	r3, r2
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint32_t i = 0; i < bytes;){
 80014b6:	6a3a      	ldr	r2, [r7, #32]
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	f4ff af7b 	bcc.w	80013b6 <dumpBuffer+0x6e>
	}
	str += sprintf(str, "\n\r");
 80014c0:	490e      	ldr	r1, [pc, #56]	; (80014fc <dumpBuffer+0x1b4>)
 80014c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014c4:	f003 f8d6 	bl	8004674 <siprintf>
 80014c8:	4603      	mov	r3, r0
 80014ca:	461a      	mov	r2, r3
 80014cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ce:	4413      	add	r3, r2
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	//str += sprintf(str, "\0");
	HAL_UART_Transmit(huartE, (uint8_t*) strDumpBuff, str - strDumpBuff, HAL_MAX_DELAY);
 80014d2:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <dumpBuffer+0x1c8>)
 80014d4:	6818      	ldr	r0, [r3, #0]
 80014d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d8:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <dumpBuffer+0x1a8>)
 80014da:	1a9b      	subs	r3, r3, r2
 80014dc:	b29a      	uxth	r2, r3
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
 80014e2:	4903      	ldr	r1, [pc, #12]	; (80014f0 <dumpBuffer+0x1a8>)
 80014e4:	f002 fd1f 	bl	8003f26 <HAL_UART_Transmit>
}
 80014e8:	bf00      	nop
 80014ea:	3730      	adds	r7, #48	; 0x30
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20004318 	.word	0x20004318
 80014f4:	080050e4 	.word	0x080050e4
 80014f8:	080050ec 	.word	0x080050ec
 80014fc:	08005130 	.word	0x08005130
 8001500:	08005134 	.word	0x08005134
 8001504:	0800513c 	.word	0x0800513c
 8001508:	08005144 	.word	0x08005144
 800150c:	080050e8 	.word	0x080050e8
 8001510:	20004314 	.word	0x20004314

08001514 <vgaDriver>:
#ifdef vgaDebug
	int str_len;
	char str[81] = {'\0'};
	static char * ref_str = "null";
#endif
	lineCount++;
 8001514:	4b30      	ldr	r3, [pc, #192]	; (80015d8 <vgaDriver+0xc4>)
		activeBuffer = oldBuffer;
 8001516:	4931      	ldr	r1, [pc, #196]	; (80015dc <vgaDriver+0xc8>)
		Color * tmp = activeBuffer;
 8001518:	4a31      	ldr	r2, [pc, #196]	; (80015e0 <vgaDriver+0xcc>)
		activeBuffer = oldBuffer;
 800151a:	6808      	ldr	r0, [r1, #0]
void __attribute__((optimize("O3"))) vgaDriver(){
 800151c:	b430      	push	{r4, r5}
	lineCount++;
 800151e:	681c      	ldr	r4, [r3, #0]
		Color * tmp = activeBuffer;
 8001520:	6815      	ldr	r5, [r2, #0]
		activeBuffer = oldBuffer;
 8001522:	6010      	str	r0, [r2, #0]
	lineCount++;
 8001524:	1c62      	adds	r2, r4, #1
	if(lineCount < vertArea){//send line
 8001526:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
		oldBuffer = tmp;
 800152a:	600d      	str	r5, [r1, #0]
	lineCount++;
 800152c:	601a      	str	r2, [r3, #0]
	if(lineCount < vertArea){//send line
 800152e:	da1f      	bge.n	8001570 <vgaDriver+0x5c>
		ref_str = "render line";
#endif
		//renderLine(activeBuffer, lineCount);
		//while(HAL_DMA_PollForTransfer(memCopyDMA, HAL_DMA_FULL_TRANSFER, 100)){HAL_Delay(1);};
		uint32_t * active32 = (uint32_t*)&activeBuffer[horiWhole-horiRes];
		uint32_t * screen32 = (uint32_t*)&screenBuff[(lineCount/vgaUpscale)*horiRes];
 8001530:	1e11      	subs	r1, r2, #0
 8001532:	bfb8      	it	lt
 8001534:	1d21      	addlt	r1, r4, #4
 8001536:	4a2b      	ldr	r2, [pc, #172]	; (80015e4 <vgaDriver+0xd0>)
 8001538:	f021 0c03 	bic.w	ip, r1, #3
 800153c:	eb0c 01a1 	add.w	r1, ip, r1, asr #2
 8001540:	eb02 1441 	add.w	r4, r2, r1, lsl #5
		uint32_t * active32 = (uint32_t*)&activeBuffer[horiWhole-horiRes];
 8001544:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8001548:	3404      	adds	r4, #4
 800154a:	42a3      	cmp	r3, r4
		uint32_t * screen32 = (uint32_t*)&screenBuff[(lineCount/vgaUpscale)*horiRes];
 800154c:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 8001550:	d028      	beq.n	80015a4 <vgaDriver+0x90>
 8001552:	ea42 0103 	orr.w	r1, r2, r3
 8001556:	0749      	lsls	r1, r1, #29
 8001558:	d124      	bne.n	80015a4 <vgaDriver+0x90>
 800155a:	3a08      	subs	r2, #8
 800155c:	f100 0cc8 	add.w	ip, r0, #200	; 0xc8
		for(uint32_t i = 0; i < horiRes/4;i++){
			*active32 = *screen32;
 8001560:	e9f2 0102 	ldrd	r0, r1, [r2, #8]!
 8001564:	e8e3 0102 	strd	r0, r1, [r3], #8
 8001568:	459c      	cmp	ip, r3
 800156a:	d1f9      	bne.n	8001560 <vgaDriver+0x4c>
	str_len = sprintf(str, "Line %i\t %s \n\r", lineCount, ref_str);
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
	uint32_t indicatorLengths[] = {horiFront, horiSync, horiBack, horiRes, horiFront, horiSync, horiBack, horiRes};
	dumpBuffer((char*)lineBuff, horiWhole*2, indicatorLengths, "  []  ||  []  ||EE", 2);
#endif
}
 800156c:	bc30      	pop	{r4, r5}
 800156e:	4770      	bx	lr
	}else if(lineCount == vertArea){//last line clear
 8001570:	d012      	beq.n	8001598 <vgaDriver+0x84>
	}else if(lineCount == vertArea + 1){//last line clear buffer
 8001572:	f240 1191 	movw	r1, #401	; 0x191
 8001576:	428a      	cmp	r2, r1
 8001578:	d00e      	beq.n	8001598 <vgaDriver+0x84>
	}else if(lineCount == vertArea + vertFront){//enter vertical sync todo check for of by one error
 800157a:	f5b2 7fce 	cmp.w	r2, #412	; 0x19c
 800157e:	d01a      	beq.n	80015b6 <vgaDriver+0xa2>
	}else if(lineCount == vertArea + vertFront + vertSync){//exit vertical sync
 8001580:	f5b2 7fcf 	cmp.w	r2, #414	; 0x19e
 8001584:	d01f      	beq.n	80015c6 <vgaDriver+0xb2>
	}else if(lineCount >= vertWhole){//return to beginning
 8001586:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
		lineCount = -1;
 800158a:	bfc8      	it	gt
 800158c:	f04f 32ff 	movgt.w	r2, #4294967295
}
 8001590:	bc30      	pop	{r4, r5}
		lineCount = -1;
 8001592:	bfc8      	it	gt
 8001594:	601a      	strgt	r2, [r3, #0]
}
 8001596:	4770      	bx	lr
 8001598:	bc30      	pop	{r4, r5}
			*active32 = 0;
 800159a:	22a0      	movs	r2, #160	; 0xa0
 800159c:	2100      	movs	r1, #0
 800159e:	3028      	adds	r0, #40	; 0x28
 80015a0:	f003 b860 	b.w	8004664 <memset>
 80015a4:	3a04      	subs	r2, #4
 80015a6:	30c8      	adds	r0, #200	; 0xc8
			*active32 = *screen32;
 80015a8:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80015ac:	f843 1b04 	str.w	r1, [r3], #4
		for(uint32_t i = 0; i < horiRes/4;i++){
 80015b0:	4298      	cmp	r0, r3
 80015b2:	d1f9      	bne.n	80015a8 <vgaDriver+0x94>
 80015b4:	e7da      	b.n	800156c <vgaDriver+0x58>
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_SET);
 80015b6:	4a0c      	ldr	r2, [pc, #48]	; (80015e8 <vgaDriver+0xd4>)
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <vgaDriver+0xd8>)
 80015ba:	8811      	ldrh	r1, [r2, #0]
 80015bc:	6818      	ldr	r0, [r3, #0]
}
 80015be:	bc30      	pop	{r4, r5}
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_SET);
 80015c0:	2201      	movs	r2, #1
 80015c2:	f000 bfff 	b.w	80025c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_RESET);
 80015c6:	4a08      	ldr	r2, [pc, #32]	; (80015e8 <vgaDriver+0xd4>)
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <vgaDriver+0xd8>)
 80015ca:	8811      	ldrh	r1, [r2, #0]
 80015cc:	6818      	ldr	r0, [r3, #0]
}
 80015ce:	bc30      	pop	{r4, r5}
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	f000 bff7 	b.w	80025c4 <HAL_GPIO_WritePin>
 80015d6:	bf00      	nop
 80015d8:	20004300 	.word	0x20004300
 80015dc:	20004310 	.word	0x20004310
 80015e0:	2000430c 	.word	0x2000430c
 80015e4:	2000046c 	.word	0x2000046c
 80015e8:	200042fc 	.word	0x200042fc
 80015ec:	200042f8 	.word	0x200042f8

080015f0 <vgaHalfCallBack>:

void vgaHalfCallBack(DMA_HandleTypeDef *_hdma){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	//readyForNextLine++;
	vgaDriver();
 80015f8:	f7ff ff8c 	bl	8001514 <vgaDriver>
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <vgaFullCallBack>:

void vgaFullCallBack(DMA_HandleTypeDef *_hdma){
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	//readyForNextLine++;
	vgaDriver();
 800160c:	f7ff ff82 	bl	8001514 <vgaDriver>
}
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <vgaSetup>:
		TIM_HandleTypeDef * vgaPixelTimer_,
		DMA_HandleTypeDef * vgaCircularDMA_,
		DMA_HandleTypeDef * memCopyDMA_,
		GPIO_TypeDef* Vsync_GPIO_Port_,
		uint16_t Vsync_Pin_
		){
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	; 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	603b      	str	r3, [r7, #0]

	vgaPixelTimer = vgaPixelTimer_;
 8001626:	4a32      	ldr	r2, [pc, #200]	; (80016f0 <vgaSetup+0xd8>)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6013      	str	r3, [r2, #0]
	vgaCircularDMA = vgaCircularDMA_;
 800162c:	4a31      	ldr	r2, [pc, #196]	; (80016f4 <vgaSetup+0xdc>)
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	6013      	str	r3, [r2, #0]
	memCopyDMA = memCopyDMA_;
 8001632:	4a31      	ldr	r2, [pc, #196]	; (80016f8 <vgaSetup+0xe0>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6013      	str	r3, [r2, #0]

	Vsync_GPIO_Port = Vsync_GPIO_Port_;
 8001638:	4a30      	ldr	r2, [pc, #192]	; (80016fc <vgaSetup+0xe4>)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	6013      	str	r3, [r2, #0]
	Vsync_Pin = Vsync_Pin_;
 800163e:	4a30      	ldr	r2, [pc, #192]	; (8001700 <vgaSetup+0xe8>)
 8001640:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001642:	8013      	strh	r3, [r2, #0]

	lineCount = 0; //vertArea + vertFront - 1 - 2;//start right after a vertical sync
 8001644:	4b2f      	ldr	r3, [pc, #188]	; (8001704 <vgaSetup+0xec>)
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
	lineUpscale = 0;//copy old buffer if non zero
 800164a:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <vgaSetup+0xf0>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
	readyForNextLine = 1;
 8001650:	4b2e      	ldr	r3, [pc, #184]	; (800170c <vgaSetup+0xf4>)
 8001652:	2201      	movs	r2, #1
 8001654:	601a      	str	r2, [r3, #0]
	activeBuffer = lineBuff;
 8001656:	4b2e      	ldr	r3, [pc, #184]	; (8001710 <vgaSetup+0xf8>)
 8001658:	4a2e      	ldr	r2, [pc, #184]	; (8001714 <vgaSetup+0xfc>)
 800165a:	601a      	str	r2, [r3, #0]
	oldBuffer = &lineBuff[horiWhole];
 800165c:	4b2e      	ldr	r3, [pc, #184]	; (8001718 <vgaSetup+0x100>)
 800165e:	4a2f      	ldr	r2, [pc, #188]	; (800171c <vgaSetup+0x104>)
 8001660:	601a      	str	r2, [r3, #0]

	for(uint32_t i = 0; i < horiWhole; i += 2){//clear all
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
 8001666:	e00e      	b.n	8001686 <vgaSetup+0x6e>
		activeBuffer[i].value = 0;
 8001668:	4b29      	ldr	r3, [pc, #164]	; (8001710 <vgaSetup+0xf8>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	4413      	add	r3, r2
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
		oldBuffer[i].value = 0;
 8001674:	4b28      	ldr	r3, [pc, #160]	; (8001718 <vgaSetup+0x100>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	4413      	add	r3, r2
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < horiWhole; i += 2){//clear all
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	3302      	adds	r3, #2
 8001684:	61fb      	str	r3, [r7, #28]
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	2bc7      	cmp	r3, #199	; 0xc7
 800168a:	d9ed      	bls.n	8001668 <vgaSetup+0x50>
	}
	for(uint32_t i = 0; i < horiRes; i++){//load test data
 800168c:	2300      	movs	r3, #0
 800168e:	61bb      	str	r3, [r7, #24]
 8001690:	e00e      	b.n	80016b0 <vgaSetup+0x98>
		activeBuffer[i].value = 0x0;
 8001692:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <vgaSetup+0xf8>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	4413      	add	r3, r2
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
		oldBuffer[i].value = 0x00;
 800169e:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <vgaSetup+0x100>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	4413      	add	r3, r2
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < horiRes; i++){//load test data
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	3301      	adds	r3, #1
 80016ae:	61bb      	str	r3, [r7, #24]
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	2b9f      	cmp	r3, #159	; 0x9f
 80016b4:	d9ed      	bls.n	8001692 <vgaSetup+0x7a>
	}
	for(uint32_t i = horiFront; i < horiFront + horiSync; i++){//set horizontal sync
 80016b6:	2304      	movs	r3, #4
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	e00e      	b.n	80016da <vgaSetup+0xc2>
		activeBuffer[i].value = 0x80;
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <vgaSetup+0xf8>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	4413      	add	r3, r2
 80016c4:	2280      	movs	r2, #128	; 0x80
 80016c6:	701a      	strb	r2, [r3, #0]
		oldBuffer[i].value = 0x80;
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <vgaSetup+0x100>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	4413      	add	r3, r2
 80016d0:	2280      	movs	r2, #128	; 0x80
 80016d2:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = horiFront; i < horiFront + horiSync; i++){//set horizontal sync
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	3301      	adds	r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	2b1b      	cmp	r3, #27
 80016de:	d9ed      	bls.n	80016bc <vgaSetup+0xa4>
	}
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	3724      	adds	r7, #36	; 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	200042ec 	.word	0x200042ec
 80016f4:	200042f0 	.word	0x200042f0
 80016f8:	200042f4 	.word	0x200042f4
 80016fc:	200042f8 	.word	0x200042f8
 8001700:	200042fc 	.word	0x200042fc
 8001704:	20004300 	.word	0x20004300
 8001708:	20004304 	.word	0x20004304
 800170c:	20004308 	.word	0x20004308
 8001710:	2000430c 	.word	0x2000430c
 8001714:	200002dc 	.word	0x200002dc
 8001718:	20004310 	.word	0x20004310
 800171c:	200003a4 	.word	0x200003a4

08001720 <vgaStart>:

void vgaStart(){
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af02      	add	r7, sp, #8

	dumpBuffer((char*)screenBuff, horiRes*vertRes, NULL, "", 2);
 8001726:	2302      	movs	r3, #2
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <vgaStart+0x80>)
 800172c:	2200      	movs	r2, #0
 800172e:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8001732:	481c      	ldr	r0, [pc, #112]	; (80017a4 <vgaStart+0x84>)
 8001734:	f7ff fe08 	bl	8001348 <dumpBuffer>
	//HAL_DMA_Init(vgaCircularDMA);
	__HAL_TIM_ENABLE_DMA(vgaPixelTimer, TIM_DMA_UPDATE);
 8001738:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <vgaStart+0x88>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68da      	ldr	r2, [r3, #12]
 8001740:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <vgaStart+0x88>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800174a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE(vgaPixelTimer);
 800174c:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <vgaStart+0x88>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <vgaStart+0x88>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 0201 	orr.w	r2, r2, #1
 800175e:	601a      	str	r2, [r3, #0]

	HAL_TIM_PWM_Start(vgaPixelTimer, TIM_CHANNEL_1);
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <vgaStart+0x88>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2100      	movs	r1, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f001 fc86 	bl	8003078 <HAL_TIM_PWM_Start>

	HAL_DMA_RegisterCallback(vgaCircularDMA, HAL_DMA_XFER_HALFCPLT_CB_ID, vgaHalfCallBack);
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <vgaStart+0x8c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0f      	ldr	r2, [pc, #60]	; (80017b0 <vgaStart+0x90>)
 8001772:	2101      	movs	r1, #1
 8001774:	4618      	mov	r0, r3
 8001776:	f000 fc61 	bl	800203c <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(vgaCircularDMA, HAL_DMA_XFER_CPLT_CB_ID, vgaFullCallBack);
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <vgaStart+0x8c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a0d      	ldr	r2, [pc, #52]	; (80017b4 <vgaStart+0x94>)
 8001780:	2100      	movs	r1, #0
 8001782:	4618      	mov	r0, r3
 8001784:	f000 fc5a 	bl	800203c <HAL_DMA_RegisterCallback>
	//__HAL_TIM_ENABLE(&htim5);

	//start the circular buffer dma transfer aka vga main loop
	HAL_DMA_Start_IT(vgaCircularDMA, (uint32_t)&lineBuff[0], (uint32_t)&(GPIOC->ODR), horiWhole*2);
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <vgaStart+0x8c>)
 800178a:	6818      	ldr	r0, [r3, #0]
 800178c:	490a      	ldr	r1, [pc, #40]	; (80017b8 <vgaStart+0x98>)
 800178e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001792:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <vgaStart+0x9c>)
 8001794:	f000 fa70 	bl	8001c78 <HAL_DMA_Start_IT>

	//HAL_DMAEx_MultiBufferStart_IT(hdma, SrcAddress, DstAddress, SecondMemAddress, DataLength);
	//vgaLoop();
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	08005150 	.word	0x08005150
 80017a4:	2000046c 	.word	0x2000046c
 80017a8:	200042ec 	.word	0x200042ec
 80017ac:	200042f0 	.word	0x200042f0
 80017b0:	080015f1 	.word	0x080015f1
 80017b4:	08001605 	.word	0x08001605
 80017b8:	200002dc 	.word	0x200002dc
 80017bc:	40020814 	.word	0x40020814

080017c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017c4:	480d      	ldr	r0, [pc, #52]	; (80017fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017c6:	490e      	ldr	r1, [pc, #56]	; (8001800 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017c8:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017cc:	e002      	b.n	80017d4 <LoopCopyDataInit>

080017ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d2:	3304      	adds	r3, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d8:	d3f9      	bcc.n	80017ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017da:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017dc:	4c0b      	ldr	r4, [pc, #44]	; (800180c <LoopFillZerobss+0x26>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e0:	e001      	b.n	80017e6 <LoopFillZerobss>

080017e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e4:	3204      	adds	r2, #4

080017e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e8:	d3fb      	bcc.n	80017e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ea:	f7ff fd8b 	bl	8001304 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ee:	f002 ff15 	bl	800461c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017f2:	f7ff f8cf 	bl	8000994 <main>
  bx  lr    
 80017f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001800:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001804:	080051a0 	.word	0x080051a0
  ldr r2, =_sbss
 8001808:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800180c:	20004714 	.word	0x20004714

08001810 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001810:	e7fe      	b.n	8001810 <ADC_IRQHandler>
	...

08001814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001818:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <HAL_Init+0x40>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0d      	ldr	r2, [pc, #52]	; (8001854 <HAL_Init+0x40>)
 800181e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001822:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_Init+0x40>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <HAL_Init+0x40>)
 800182a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800182e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <HAL_Init+0x40>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a07      	ldr	r2, [pc, #28]	; (8001854 <HAL_Init+0x40>)
 8001836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800183c:	2003      	movs	r0, #3
 800183e:	f000 f92b 	bl	8001a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001842:	2000      	movs	r0, #0
 8001844:	f000 f808 	bl	8001858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001848:	f7ff fbc2 	bl	8000fd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023c00 	.word	0x40023c00

08001858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_InitTick+0x54>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_InitTick+0x58>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4619      	mov	r1, r3
 800186a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001872:	fbb2 f3f3 	udiv	r3, r2, r3
 8001876:	4618      	mov	r0, r3
 8001878:	f000 f943 	bl	8001b02 <HAL_SYSTICK_Config>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e00e      	b.n	80018a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b0f      	cmp	r3, #15
 800188a:	d80a      	bhi.n	80018a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800188c:	2200      	movs	r2, #0
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	f04f 30ff 	mov.w	r0, #4294967295
 8001894:	f000 f90b 	bl	8001aae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001898:	4a06      	ldr	r2, [pc, #24]	; (80018b4 <HAL_InitTick+0x5c>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	e000      	b.n	80018a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000000 	.word	0x20000000
 80018b0:	20000008 	.word	0x20000008
 80018b4:	20000004 	.word	0x20000004

080018b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_IncTick+0x20>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_IncTick+0x24>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	4a04      	ldr	r2, [pc, #16]	; (80018dc <HAL_IncTick+0x24>)
 80018ca:	6013      	str	r3, [r2, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000008 	.word	0x20000008
 80018dc:	20004700 	.word	0x20004700

080018e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <HAL_GetTick+0x14>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20004700 	.word	0x20004700

080018f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001914:	4013      	ands	r3, r2
 8001916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192a:	4a04      	ldr	r2, [pc, #16]	; (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	60d3      	str	r3, [r2, #12]
}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <__NVIC_GetPriorityGrouping+0x18>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	f003 0307 	and.w	r3, r3, #7
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	2b00      	cmp	r3, #0
 800196c:	db0b      	blt.n	8001986 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	f003 021f 	and.w	r2, r3, #31
 8001974:	4907      	ldr	r1, [pc, #28]	; (8001994 <__NVIC_EnableIRQ+0x38>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	095b      	lsrs	r3, r3, #5
 800197c:	2001      	movs	r0, #1
 800197e:	fa00 f202 	lsl.w	r2, r0, r2
 8001982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000e100 	.word	0xe000e100

08001998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	6039      	str	r1, [r7, #0]
 80019a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	db0a      	blt.n	80019c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	490c      	ldr	r1, [pc, #48]	; (80019e4 <__NVIC_SetPriority+0x4c>)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	0112      	lsls	r2, r2, #4
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	440b      	add	r3, r1
 80019bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c0:	e00a      	b.n	80019d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4908      	ldr	r1, [pc, #32]	; (80019e8 <__NVIC_SetPriority+0x50>)
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	3b04      	subs	r3, #4
 80019d0:	0112      	lsls	r2, r2, #4
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	440b      	add	r3, r1
 80019d6:	761a      	strb	r2, [r3, #24]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000e100 	.word	0xe000e100
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	; 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f1c3 0307 	rsb	r3, r3, #7
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	bf28      	it	cs
 8001a0a:	2304      	movcs	r3, #4
 8001a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3304      	adds	r3, #4
 8001a12:	2b06      	cmp	r3, #6
 8001a14:	d902      	bls.n	8001a1c <NVIC_EncodePriority+0x30>
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3b03      	subs	r3, #3
 8001a1a:	e000      	b.n	8001a1e <NVIC_EncodePriority+0x32>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	f04f 32ff 	mov.w	r2, #4294967295
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	401a      	ands	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a34:	f04f 31ff 	mov.w	r1, #4294967295
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3e:	43d9      	mvns	r1, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	4313      	orrs	r3, r2
         );
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3724      	adds	r7, #36	; 0x24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a64:	d301      	bcc.n	8001a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00f      	b.n	8001a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <SysTick_Config+0x40>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a72:	210f      	movs	r1, #15
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295
 8001a78:	f7ff ff8e 	bl	8001998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <SysTick_Config+0x40>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a82:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <SysTick_Config+0x40>)
 8001a84:	2207      	movs	r2, #7
 8001a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	e000e010 	.word	0xe000e010

08001a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ff29 	bl	80018f8 <__NVIC_SetPriorityGrouping>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
 8001aba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac0:	f7ff ff3e 	bl	8001940 <__NVIC_GetPriorityGrouping>
 8001ac4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	6978      	ldr	r0, [r7, #20]
 8001acc:	f7ff ff8e 	bl	80019ec <NVIC_EncodePriority>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff5d 	bl	8001998 <__NVIC_SetPriority>
}
 8001ade:	bf00      	nop
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	4603      	mov	r3, r0
 8001aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff31 	bl	800195c <__NVIC_EnableIRQ>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ffa2 	bl	8001a54 <SysTick_Config>
 8001b10:	4603      	mov	r3, r0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b28:	f7ff feda 	bl	80018e0 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e099      	b.n	8001c6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0201 	bic.w	r2, r2, #1
 8001b56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b58:	e00f      	b.n	8001b7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b5a:	f7ff fec1 	bl	80018e0 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b05      	cmp	r3, #5
 8001b66:	d908      	bls.n	8001b7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2203      	movs	r2, #3
 8001b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e078      	b.n	8001c6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1e8      	bne.n	8001b5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	4b38      	ldr	r3, [pc, #224]	; (8001c74 <HAL_DMA_Init+0x158>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ba6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d107      	bne.n	8001be4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f023 0307 	bic.w	r3, r3, #7
 8001bfa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d117      	bne.n	8001c3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00e      	beq.n	8001c3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 facf 	bl	80021c4 <DMA_CheckFifoParam>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d008      	beq.n	8001c3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2240      	movs	r2, #64	; 0x40
 8001c30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e016      	b.n	8001c6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 fa86 	bl	8002158 <DMA_CalcBaseAndBitshift>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c54:	223f      	movs	r2, #63	; 0x3f
 8001c56:	409a      	lsls	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	f010803f 	.word	0xf010803f

08001c78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d101      	bne.n	8001c9e <HAL_DMA_Start_IT+0x26>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e040      	b.n	8001d20 <HAL_DMA_Start_IT+0xa8>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d12f      	bne.n	8001d12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f000 fa18 	bl	80020fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd0:	223f      	movs	r2, #63	; 0x3f
 8001cd2:	409a      	lsls	r2, r3
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0216 	orr.w	r2, r2, #22
 8001ce6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d007      	beq.n	8001d00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0208 	orr.w	r2, r2, #8
 8001cfe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f042 0201 	orr.w	r2, r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	e005      	b.n	8001d1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d34:	4b8e      	ldr	r3, [pc, #568]	; (8001f70 <HAL_DMA_IRQHandler+0x248>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a8e      	ldr	r2, [pc, #568]	; (8001f74 <HAL_DMA_IRQHandler+0x24c>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	0a9b      	lsrs	r3, r3, #10
 8001d40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d52:	2208      	movs	r2, #8
 8001d54:	409a      	lsls	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d01a      	beq.n	8001d94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d013      	beq.n	8001d94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0204 	bic.w	r2, r2, #4
 8001d7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d80:	2208      	movs	r2, #8
 8001d82:	409a      	lsls	r2, r3
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8c:	f043 0201 	orr.w	r2, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d98:	2201      	movs	r2, #1
 8001d9a:	409a      	lsls	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d012      	beq.n	8001dca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00b      	beq.n	8001dca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db6:	2201      	movs	r2, #1
 8001db8:	409a      	lsls	r2, r3
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc2:	f043 0202 	orr.w	r2, r3, #2
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dce:	2204      	movs	r2, #4
 8001dd0:	409a      	lsls	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d012      	beq.n	8001e00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00b      	beq.n	8001e00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dec:	2204      	movs	r2, #4
 8001dee:	409a      	lsls	r2, r3
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df8:	f043 0204 	orr.w	r2, r3, #4
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e04:	2210      	movs	r2, #16
 8001e06:	409a      	lsls	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d043      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d03c      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e22:	2210      	movs	r2, #16
 8001e24:	409a      	lsls	r2, r3
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d018      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d108      	bne.n	8001e58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d024      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	4798      	blx	r3
 8001e56:	e01f      	b.n	8001e98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d01b      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	4798      	blx	r3
 8001e68:	e016      	b.n	8001e98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d107      	bne.n	8001e88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0208 	bic.w	r2, r2, #8
 8001e86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 808f 	beq.w	8001fc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0310 	and.w	r3, r3, #16
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 8087 	beq.w	8001fc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b05      	cmp	r3, #5
 8001ed0:	d136      	bne.n	8001f40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0216 	bic.w	r2, r2, #22
 8001ee0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	695a      	ldr	r2, [r3, #20]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ef0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d103      	bne.n	8001f02 <HAL_DMA_IRQHandler+0x1da>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d007      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0208 	bic.w	r2, r2, #8
 8001f10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f16:	223f      	movs	r2, #63	; 0x3f
 8001f18:	409a      	lsls	r2, r3
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d07e      	beq.n	8002034 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	4798      	blx	r3
        }
        return;
 8001f3e:	e079      	b.n	8002034 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d01d      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10d      	bne.n	8001f78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d031      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	4798      	blx	r3
 8001f6c:	e02c      	b.n	8001fc8 <HAL_DMA_IRQHandler+0x2a0>
 8001f6e:	bf00      	nop
 8001f70:	20000000 	.word	0x20000000
 8001f74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d023      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	4798      	blx	r3
 8001f88:	e01e      	b.n	8001fc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10f      	bne.n	8001fb8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0210 	bic.w	r2, r2, #16
 8001fa6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d032      	beq.n	8002036 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d022      	beq.n	8002022 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2205      	movs	r2, #5
 8001fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0201 	bic.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d307      	bcc.n	8002010 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f2      	bne.n	8001ff4 <HAL_DMA_IRQHandler+0x2cc>
 800200e:	e000      	b.n	8002012 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002010:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002026:	2b00      	cmp	r3, #0
 8002028:	d005      	beq.n	8002036 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	4798      	blx	r3
 8002032:	e000      	b.n	8002036 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002034:	bf00      	nop
    }
  }
}
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 800203c:	b480      	push	{r7}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	460b      	mov	r3, r1
 8002046:	607a      	str	r2, [r7, #4]
 8002048:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_DMA_RegisterCallback+0x20>
 8002058:	2302      	movs	r3, #2
 800205a:	e03d      	b.n	80020d8 <HAL_DMA_RegisterCallback+0x9c>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b01      	cmp	r3, #1
 800206e:	d12c      	bne.n	80020ca <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 8002070:	7afb      	ldrb	r3, [r7, #11]
 8002072:	2b05      	cmp	r3, #5
 8002074:	d826      	bhi.n	80020c4 <HAL_DMA_RegisterCallback+0x88>
 8002076:	a201      	add	r2, pc, #4	; (adr r2, 800207c <HAL_DMA_RegisterCallback+0x40>)
 8002078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207c:	08002095 	.word	0x08002095
 8002080:	0800209d 	.word	0x0800209d
 8002084:	080020a5 	.word	0x080020a5
 8002088:	080020ad 	.word	0x080020ad
 800208c:	080020b5 	.word	0x080020b5
 8002090:	080020bd 	.word	0x080020bd
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 800209a:	e018      	b.n	80020ce <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80020a2:	e014      	b.n	80020ce <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80020aa:	e010      	b.n	80020ce <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80020b2:	e00c      	b.n	80020ce <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80020ba:	e008      	b.n	80020ce <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80020c2:	e004      	b.n	80020ce <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	75fb      	strb	r3, [r7, #23]
      break;
 80020c8:	e001      	b.n	80020ce <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 80020d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	371c      	adds	r7, #28
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002118:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b40      	cmp	r3, #64	; 0x40
 8002128:	d108      	bne.n	800213c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800213a:	e007      	b.n	800214c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	60da      	str	r2, [r3, #12]
}
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	3b10      	subs	r3, #16
 8002168:	4a14      	ldr	r2, [pc, #80]	; (80021bc <DMA_CalcBaseAndBitshift+0x64>)
 800216a:	fba2 2303 	umull	r2, r3, r2, r3
 800216e:	091b      	lsrs	r3, r3, #4
 8002170:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002172:	4a13      	ldr	r2, [pc, #76]	; (80021c0 <DMA_CalcBaseAndBitshift+0x68>)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4413      	add	r3, r2
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	461a      	mov	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2b03      	cmp	r3, #3
 8002184:	d909      	bls.n	800219a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800218e:	f023 0303 	bic.w	r3, r3, #3
 8002192:	1d1a      	adds	r2, r3, #4
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	659a      	str	r2, [r3, #88]	; 0x58
 8002198:	e007      	b.n	80021aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021a2:	f023 0303 	bic.w	r3, r3, #3
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	aaaaaaab 	.word	0xaaaaaaab
 80021c0:	08005154 	.word	0x08005154

080021c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021cc:	2300      	movs	r3, #0
 80021ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d11f      	bne.n	800221e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d856      	bhi.n	8002292 <DMA_CheckFifoParam+0xce>
 80021e4:	a201      	add	r2, pc, #4	; (adr r2, 80021ec <DMA_CheckFifoParam+0x28>)
 80021e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ea:	bf00      	nop
 80021ec:	080021fd 	.word	0x080021fd
 80021f0:	0800220f 	.word	0x0800220f
 80021f4:	080021fd 	.word	0x080021fd
 80021f8:	08002293 	.word	0x08002293
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d046      	beq.n	8002296 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800220c:	e043      	b.n	8002296 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002212:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002216:	d140      	bne.n	800229a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800221c:	e03d      	b.n	800229a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002226:	d121      	bne.n	800226c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2b03      	cmp	r3, #3
 800222c:	d837      	bhi.n	800229e <DMA_CheckFifoParam+0xda>
 800222e:	a201      	add	r2, pc, #4	; (adr r2, 8002234 <DMA_CheckFifoParam+0x70>)
 8002230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002234:	08002245 	.word	0x08002245
 8002238:	0800224b 	.word	0x0800224b
 800223c:	08002245 	.word	0x08002245
 8002240:	0800225d 	.word	0x0800225d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
      break;
 8002248:	e030      	b.n	80022ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d025      	beq.n	80022a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800225a:	e022      	b.n	80022a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002260:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002264:	d11f      	bne.n	80022a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800226a:	e01c      	b.n	80022a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d903      	bls.n	800227a <DMA_CheckFifoParam+0xb6>
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2b03      	cmp	r3, #3
 8002276:	d003      	beq.n	8002280 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002278:	e018      	b.n	80022ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	73fb      	strb	r3, [r7, #15]
      break;
 800227e:	e015      	b.n	80022ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002284:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00e      	beq.n	80022aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	73fb      	strb	r3, [r7, #15]
      break;
 8002290:	e00b      	b.n	80022aa <DMA_CheckFifoParam+0xe6>
      break;
 8002292:	bf00      	nop
 8002294:	e00a      	b.n	80022ac <DMA_CheckFifoParam+0xe8>
      break;
 8002296:	bf00      	nop
 8002298:	e008      	b.n	80022ac <DMA_CheckFifoParam+0xe8>
      break;
 800229a:	bf00      	nop
 800229c:	e006      	b.n	80022ac <DMA_CheckFifoParam+0xe8>
      break;
 800229e:	bf00      	nop
 80022a0:	e004      	b.n	80022ac <DMA_CheckFifoParam+0xe8>
      break;
 80022a2:	bf00      	nop
 80022a4:	e002      	b.n	80022ac <DMA_CheckFifoParam+0xe8>
      break;   
 80022a6:	bf00      	nop
 80022a8:	e000      	b.n	80022ac <DMA_CheckFifoParam+0xe8>
      break;
 80022aa:	bf00      	nop
    }
  } 
  
  return status; 
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop

080022bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022bc:	b480      	push	{r7}
 80022be:	b089      	sub	sp, #36	; 0x24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
 80022d6:	e159      	b.n	800258c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022d8:	2201      	movs	r2, #1
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	4013      	ands	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	f040 8148 	bne.w	8002586 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d005      	beq.n	800230e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800230a:	2b02      	cmp	r3, #2
 800230c:	d130      	bne.n	8002370 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	2203      	movs	r2, #3
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002344:	2201      	movs	r2, #1
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	f003 0201 	and.w	r2, r3, #1
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	2b03      	cmp	r3, #3
 800237a:	d017      	beq.n	80023ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	2203      	movs	r2, #3
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d123      	bne.n	8002400 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	08da      	lsrs	r2, r3, #3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3208      	adds	r2, #8
 80023c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	220f      	movs	r2, #15
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	08da      	lsrs	r2, r3, #3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3208      	adds	r2, #8
 80023fa:	69b9      	ldr	r1, [r7, #24]
 80023fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	2203      	movs	r2, #3
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 0203 	and.w	r2, r3, #3
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 80a2 	beq.w	8002586 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	4b57      	ldr	r3, [pc, #348]	; (80025a4 <HAL_GPIO_Init+0x2e8>)
 8002448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244a:	4a56      	ldr	r2, [pc, #344]	; (80025a4 <HAL_GPIO_Init+0x2e8>)
 800244c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002450:	6453      	str	r3, [r2, #68]	; 0x44
 8002452:	4b54      	ldr	r3, [pc, #336]	; (80025a4 <HAL_GPIO_Init+0x2e8>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800245e:	4a52      	ldr	r2, [pc, #328]	; (80025a8 <HAL_GPIO_Init+0x2ec>)
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	089b      	lsrs	r3, r3, #2
 8002464:	3302      	adds	r3, #2
 8002466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	220f      	movs	r2, #15
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a49      	ldr	r2, [pc, #292]	; (80025ac <HAL_GPIO_Init+0x2f0>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d019      	beq.n	80024be <HAL_GPIO_Init+0x202>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a48      	ldr	r2, [pc, #288]	; (80025b0 <HAL_GPIO_Init+0x2f4>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d013      	beq.n	80024ba <HAL_GPIO_Init+0x1fe>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a47      	ldr	r2, [pc, #284]	; (80025b4 <HAL_GPIO_Init+0x2f8>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d00d      	beq.n	80024b6 <HAL_GPIO_Init+0x1fa>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a46      	ldr	r2, [pc, #280]	; (80025b8 <HAL_GPIO_Init+0x2fc>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d007      	beq.n	80024b2 <HAL_GPIO_Init+0x1f6>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a45      	ldr	r2, [pc, #276]	; (80025bc <HAL_GPIO_Init+0x300>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d101      	bne.n	80024ae <HAL_GPIO_Init+0x1f2>
 80024aa:	2304      	movs	r3, #4
 80024ac:	e008      	b.n	80024c0 <HAL_GPIO_Init+0x204>
 80024ae:	2307      	movs	r3, #7
 80024b0:	e006      	b.n	80024c0 <HAL_GPIO_Init+0x204>
 80024b2:	2303      	movs	r3, #3
 80024b4:	e004      	b.n	80024c0 <HAL_GPIO_Init+0x204>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e002      	b.n	80024c0 <HAL_GPIO_Init+0x204>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <HAL_GPIO_Init+0x204>
 80024be:	2300      	movs	r3, #0
 80024c0:	69fa      	ldr	r2, [r7, #28]
 80024c2:	f002 0203 	and.w	r2, r2, #3
 80024c6:	0092      	lsls	r2, r2, #2
 80024c8:	4093      	lsls	r3, r2
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024d0:	4935      	ldr	r1, [pc, #212]	; (80025a8 <HAL_GPIO_Init+0x2ec>)
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	089b      	lsrs	r3, r3, #2
 80024d6:	3302      	adds	r3, #2
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024de:	4b38      	ldr	r3, [pc, #224]	; (80025c0 <HAL_GPIO_Init+0x304>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4013      	ands	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002502:	4a2f      	ldr	r2, [pc, #188]	; (80025c0 <HAL_GPIO_Init+0x304>)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002508:	4b2d      	ldr	r3, [pc, #180]	; (80025c0 <HAL_GPIO_Init+0x304>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800252c:	4a24      	ldr	r2, [pc, #144]	; (80025c0 <HAL_GPIO_Init+0x304>)
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002532:	4b23      	ldr	r3, [pc, #140]	; (80025c0 <HAL_GPIO_Init+0x304>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002556:	4a1a      	ldr	r2, [pc, #104]	; (80025c0 <HAL_GPIO_Init+0x304>)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800255c:	4b18      	ldr	r3, [pc, #96]	; (80025c0 <HAL_GPIO_Init+0x304>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002580:	4a0f      	ldr	r2, [pc, #60]	; (80025c0 <HAL_GPIO_Init+0x304>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	3301      	adds	r3, #1
 800258a:	61fb      	str	r3, [r7, #28]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	2b0f      	cmp	r3, #15
 8002590:	f67f aea2 	bls.w	80022d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	3724      	adds	r7, #36	; 0x24
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40013800 	.word	0x40013800
 80025ac:	40020000 	.word	0x40020000
 80025b0:	40020400 	.word	0x40020400
 80025b4:	40020800 	.word	0x40020800
 80025b8:	40020c00 	.word	0x40020c00
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40013c00 	.word	0x40013c00

080025c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]
 80025d0:	4613      	mov	r3, r2
 80025d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d4:	787b      	ldrb	r3, [r7, #1]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025da:	887a      	ldrh	r2, [r7, #2]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025e0:	e003      	b.n	80025ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025e2:	887b      	ldrh	r3, [r7, #2]
 80025e4:	041a      	lsls	r2, r3, #16
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	619a      	str	r2, [r3, #24]
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e267      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d075      	beq.n	8002702 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002616:	4b88      	ldr	r3, [pc, #544]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b04      	cmp	r3, #4
 8002620:	d00c      	beq.n	800263c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002622:	4b85      	ldr	r3, [pc, #532]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800262a:	2b08      	cmp	r3, #8
 800262c:	d112      	bne.n	8002654 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800262e:	4b82      	ldr	r3, [pc, #520]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800263a:	d10b      	bne.n	8002654 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263c:	4b7e      	ldr	r3, [pc, #504]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d05b      	beq.n	8002700 <HAL_RCC_OscConfig+0x108>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d157      	bne.n	8002700 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e242      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265c:	d106      	bne.n	800266c <HAL_RCC_OscConfig+0x74>
 800265e:	4b76      	ldr	r3, [pc, #472]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a75      	ldr	r2, [pc, #468]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	e01d      	b.n	80026a8 <HAL_RCC_OscConfig+0xb0>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002674:	d10c      	bne.n	8002690 <HAL_RCC_OscConfig+0x98>
 8002676:	4b70      	ldr	r3, [pc, #448]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a6f      	ldr	r2, [pc, #444]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800267c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	4b6d      	ldr	r3, [pc, #436]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a6c      	ldr	r2, [pc, #432]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	e00b      	b.n	80026a8 <HAL_RCC_OscConfig+0xb0>
 8002690:	4b69      	ldr	r3, [pc, #420]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a68      	ldr	r2, [pc, #416]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	4b66      	ldr	r3, [pc, #408]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a65      	ldr	r2, [pc, #404]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 80026a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d013      	beq.n	80026d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7ff f916 	bl	80018e0 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b8:	f7ff f912 	bl	80018e0 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	; 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e207      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ca:	4b5b      	ldr	r3, [pc, #364]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0xc0>
 80026d6:	e014      	b.n	8002702 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7ff f902 	bl	80018e0 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e0:	f7ff f8fe 	bl	80018e0 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b64      	cmp	r3, #100	; 0x64
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e1f3      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f2:	4b51      	ldr	r3, [pc, #324]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0xe8>
 80026fe:	e000      	b.n	8002702 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d063      	beq.n	80027d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800270e:	4b4a      	ldr	r3, [pc, #296]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00b      	beq.n	8002732 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800271a:	4b47      	ldr	r3, [pc, #284]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002722:	2b08      	cmp	r3, #8
 8002724:	d11c      	bne.n	8002760 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002726:	4b44      	ldr	r3, [pc, #272]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d116      	bne.n	8002760 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002732:	4b41      	ldr	r3, [pc, #260]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d005      	beq.n	800274a <HAL_RCC_OscConfig+0x152>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d001      	beq.n	800274a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e1c7      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274a:	4b3b      	ldr	r3, [pc, #236]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4937      	ldr	r1, [pc, #220]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800275a:	4313      	orrs	r3, r2
 800275c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275e:	e03a      	b.n	80027d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d020      	beq.n	80027aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002768:	4b34      	ldr	r3, [pc, #208]	; (800283c <HAL_RCC_OscConfig+0x244>)
 800276a:	2201      	movs	r2, #1
 800276c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276e:	f7ff f8b7 	bl	80018e0 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002776:	f7ff f8b3 	bl	80018e0 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e1a8      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002788:	4b2b      	ldr	r3, [pc, #172]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002794:	4b28      	ldr	r3, [pc, #160]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4925      	ldr	r1, [pc, #148]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	600b      	str	r3, [r1, #0]
 80027a8:	e015      	b.n	80027d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027aa:	4b24      	ldr	r3, [pc, #144]	; (800283c <HAL_RCC_OscConfig+0x244>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7ff f896 	bl	80018e0 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027b8:	f7ff f892 	bl	80018e0 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e187      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ca:	4b1b      	ldr	r3, [pc, #108]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d036      	beq.n	8002850 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d016      	beq.n	8002818 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <HAL_RCC_OscConfig+0x248>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f0:	f7ff f876 	bl	80018e0 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027f8:	f7ff f872 	bl	80018e0 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e167      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280a:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800280c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x200>
 8002816:	e01b      	b.n	8002850 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002818:	4b09      	ldr	r3, [pc, #36]	; (8002840 <HAL_RCC_OscConfig+0x248>)
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281e:	f7ff f85f 	bl	80018e0 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002824:	e00e      	b.n	8002844 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002826:	f7ff f85b 	bl	80018e0 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d907      	bls.n	8002844 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e150      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
 8002838:	40023800 	.word	0x40023800
 800283c:	42470000 	.word	0x42470000
 8002840:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002844:	4b88      	ldr	r3, [pc, #544]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1ea      	bne.n	8002826 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 8097 	beq.w	800298c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800285e:	2300      	movs	r3, #0
 8002860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002862:	4b81      	ldr	r3, [pc, #516]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10f      	bne.n	800288e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	4b7d      	ldr	r3, [pc, #500]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	4a7c      	ldr	r2, [pc, #496]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800287c:	6413      	str	r3, [r2, #64]	; 0x40
 800287e:	4b7a      	ldr	r3, [pc, #488]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800288a:	2301      	movs	r3, #1
 800288c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288e:	4b77      	ldr	r3, [pc, #476]	; (8002a6c <HAL_RCC_OscConfig+0x474>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002896:	2b00      	cmp	r3, #0
 8002898:	d118      	bne.n	80028cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800289a:	4b74      	ldr	r3, [pc, #464]	; (8002a6c <HAL_RCC_OscConfig+0x474>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a73      	ldr	r2, [pc, #460]	; (8002a6c <HAL_RCC_OscConfig+0x474>)
 80028a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028a6:	f7ff f81b 	bl	80018e0 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ae:	f7ff f817 	bl	80018e0 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e10c      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c0:	4b6a      	ldr	r3, [pc, #424]	; (8002a6c <HAL_RCC_OscConfig+0x474>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d106      	bne.n	80028e2 <HAL_RCC_OscConfig+0x2ea>
 80028d4:	4b64      	ldr	r3, [pc, #400]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d8:	4a63      	ldr	r2, [pc, #396]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6713      	str	r3, [r2, #112]	; 0x70
 80028e0:	e01c      	b.n	800291c <HAL_RCC_OscConfig+0x324>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b05      	cmp	r3, #5
 80028e8:	d10c      	bne.n	8002904 <HAL_RCC_OscConfig+0x30c>
 80028ea:	4b5f      	ldr	r3, [pc, #380]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ee:	4a5e      	ldr	r2, [pc, #376]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028f0:	f043 0304 	orr.w	r3, r3, #4
 80028f4:	6713      	str	r3, [r2, #112]	; 0x70
 80028f6:	4b5c      	ldr	r3, [pc, #368]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	4a5b      	ldr	r2, [pc, #364]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6713      	str	r3, [r2, #112]	; 0x70
 8002902:	e00b      	b.n	800291c <HAL_RCC_OscConfig+0x324>
 8002904:	4b58      	ldr	r3, [pc, #352]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002908:	4a57      	ldr	r2, [pc, #348]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 800290a:	f023 0301 	bic.w	r3, r3, #1
 800290e:	6713      	str	r3, [r2, #112]	; 0x70
 8002910:	4b55      	ldr	r3, [pc, #340]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002914:	4a54      	ldr	r2, [pc, #336]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002916:	f023 0304 	bic.w	r3, r3, #4
 800291a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d015      	beq.n	8002950 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002924:	f7fe ffdc 	bl	80018e0 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292a:	e00a      	b.n	8002942 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800292c:	f7fe ffd8 	bl	80018e0 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	f241 3288 	movw	r2, #5000	; 0x1388
 800293a:	4293      	cmp	r3, r2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e0cb      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002942:	4b49      	ldr	r3, [pc, #292]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0ee      	beq.n	800292c <HAL_RCC_OscConfig+0x334>
 800294e:	e014      	b.n	800297a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002950:	f7fe ffc6 	bl	80018e0 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002956:	e00a      	b.n	800296e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002958:	f7fe ffc2 	bl	80018e0 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	; 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e0b5      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296e:	4b3e      	ldr	r3, [pc, #248]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1ee      	bne.n	8002958 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800297a:	7dfb      	ldrb	r3, [r7, #23]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d105      	bne.n	800298c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002980:	4b39      	ldr	r3, [pc, #228]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	4a38      	ldr	r2, [pc, #224]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800298a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80a1 	beq.w	8002ad8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002996:	4b34      	ldr	r3, [pc, #208]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d05c      	beq.n	8002a5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d141      	bne.n	8002a2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029aa:	4b31      	ldr	r3, [pc, #196]	; (8002a70 <HAL_RCC_OscConfig+0x478>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b0:	f7fe ff96 	bl	80018e0 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b8:	f7fe ff92 	bl	80018e0 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e087      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ca:	4b27      	ldr	r3, [pc, #156]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69da      	ldr	r2, [r3, #28]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	019b      	lsls	r3, r3, #6
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ec:	085b      	lsrs	r3, r3, #1
 80029ee:	3b01      	subs	r3, #1
 80029f0:	041b      	lsls	r3, r3, #16
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	061b      	lsls	r3, r3, #24
 80029fa:	491b      	ldr	r1, [pc, #108]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a00:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <HAL_RCC_OscConfig+0x478>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a06:	f7fe ff6b 	bl	80018e0 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a0e:	f7fe ff67 	bl	80018e0 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e05c      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0f0      	beq.n	8002a0e <HAL_RCC_OscConfig+0x416>
 8002a2c:	e054      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2e:	4b10      	ldr	r3, [pc, #64]	; (8002a70 <HAL_RCC_OscConfig+0x478>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a34:	f7fe ff54 	bl	80018e0 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7fe ff50 	bl	80018e0 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e045      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4e:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x444>
 8002a5a:	e03d      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d107      	bne.n	8002a74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e038      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40007000 	.word	0x40007000
 8002a70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a74:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <HAL_RCC_OscConfig+0x4ec>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d028      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d121      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d11a      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002aaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d111      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	085b      	lsrs	r3, r3, #1
 8002abc:	3b01      	subs	r3, #1
 8002abe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d107      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ace:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e000      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800

08002ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0cc      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002afc:	4b68      	ldr	r3, [pc, #416]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d90c      	bls.n	8002b24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0a:	4b65      	ldr	r3, [pc, #404]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b12:	4b63      	ldr	r3, [pc, #396]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0b8      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d020      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b3c:	4b59      	ldr	r3, [pc, #356]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	4a58      	ldr	r2, [pc, #352]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b54:	4b53      	ldr	r3, [pc, #332]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4a52      	ldr	r2, [pc, #328]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b60:	4b50      	ldr	r3, [pc, #320]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	494d      	ldr	r1, [pc, #308]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d044      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b86:	4b47      	ldr	r3, [pc, #284]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d119      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e07f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d003      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d107      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba6:	4b3f      	ldr	r3, [pc, #252]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d109      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e06f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb6:	4b3b      	ldr	r3, [pc, #236]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e067      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bc6:	4b37      	ldr	r3, [pc, #220]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f023 0203 	bic.w	r2, r3, #3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	4934      	ldr	r1, [pc, #208]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd8:	f7fe fe82 	bl	80018e0 <HAL_GetTick>
 8002bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bde:	e00a      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be0:	f7fe fe7e 	bl	80018e0 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e04f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf6:	4b2b      	ldr	r3, [pc, #172]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 020c 	and.w	r2, r3, #12
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d1eb      	bne.n	8002be0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c08:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d20c      	bcs.n	8002c30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c16:	4b22      	ldr	r3, [pc, #136]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e032      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c3c:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	4916      	ldr	r1, [pc, #88]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c5a:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	490e      	ldr	r1, [pc, #56]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c6e:	f000 f821 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8002c72:	4602      	mov	r2, r0
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	490a      	ldr	r1, [pc, #40]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c80:	5ccb      	ldrb	r3, [r1, r3]
 8002c82:	fa22 f303 	lsr.w	r3, r2, r3
 8002c86:	4a09      	ldr	r2, [pc, #36]	; (8002cac <HAL_RCC_ClockConfig+0x1c4>)
 8002c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c8a:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe fde2 	bl	8001858 <HAL_InitTick>

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40023c00 	.word	0x40023c00
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	080050cc 	.word	0x080050cc
 8002cac:	20000000 	.word	0x20000000
 8002cb0:	20000004 	.word	0x20000004

08002cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cb8:	b094      	sub	sp, #80	; 0x50
 8002cba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ccc:	4b79      	ldr	r3, [pc, #484]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 030c 	and.w	r3, r3, #12
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d00d      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	f200 80e1 	bhi.w	8002ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d003      	beq.n	8002cee <HAL_RCC_GetSysClockFreq+0x3a>
 8002ce6:	e0db      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ce8:	4b73      	ldr	r3, [pc, #460]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002cec:	e0db      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cee:	4b73      	ldr	r3, [pc, #460]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x208>)
 8002cf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cf2:	e0d8      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf4:	4b6f      	ldr	r3, [pc, #444]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cfc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cfe:	4b6d      	ldr	r3, [pc, #436]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d063      	beq.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d0a:	4b6a      	ldr	r3, [pc, #424]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	099b      	lsrs	r3, r3, #6
 8002d10:	2200      	movs	r2, #0
 8002d12:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d1c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d1e:	2300      	movs	r3, #0
 8002d20:	637b      	str	r3, [r7, #52]	; 0x34
 8002d22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d26:	4622      	mov	r2, r4
 8002d28:	462b      	mov	r3, r5
 8002d2a:	f04f 0000 	mov.w	r0, #0
 8002d2e:	f04f 0100 	mov.w	r1, #0
 8002d32:	0159      	lsls	r1, r3, #5
 8002d34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d38:	0150      	lsls	r0, r2, #5
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4621      	mov	r1, r4
 8002d40:	1a51      	subs	r1, r2, r1
 8002d42:	6139      	str	r1, [r7, #16]
 8002d44:	4629      	mov	r1, r5
 8002d46:	eb63 0301 	sbc.w	r3, r3, r1
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d58:	4659      	mov	r1, fp
 8002d5a:	018b      	lsls	r3, r1, #6
 8002d5c:	4651      	mov	r1, sl
 8002d5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d62:	4651      	mov	r1, sl
 8002d64:	018a      	lsls	r2, r1, #6
 8002d66:	4651      	mov	r1, sl
 8002d68:	ebb2 0801 	subs.w	r8, r2, r1
 8002d6c:	4659      	mov	r1, fp
 8002d6e:	eb63 0901 	sbc.w	r9, r3, r1
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d86:	4690      	mov	r8, r2
 8002d88:	4699      	mov	r9, r3
 8002d8a:	4623      	mov	r3, r4
 8002d8c:	eb18 0303 	adds.w	r3, r8, r3
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	462b      	mov	r3, r5
 8002d94:	eb49 0303 	adc.w	r3, r9, r3
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002da6:	4629      	mov	r1, r5
 8002da8:	024b      	lsls	r3, r1, #9
 8002daa:	4621      	mov	r1, r4
 8002dac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002db0:	4621      	mov	r1, r4
 8002db2:	024a      	lsls	r2, r1, #9
 8002db4:	4610      	mov	r0, r2
 8002db6:	4619      	mov	r1, r3
 8002db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dba:	2200      	movs	r2, #0
 8002dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dc4:	f7fd fa5c 	bl	8000280 <__aeabi_uldivmod>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4613      	mov	r3, r2
 8002dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dd0:	e058      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd2:	4b38      	ldr	r3, [pc, #224]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	099b      	lsrs	r3, r3, #6
 8002dd8:	2200      	movs	r2, #0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	4611      	mov	r1, r2
 8002dde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002de2:	623b      	str	r3, [r7, #32]
 8002de4:	2300      	movs	r3, #0
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
 8002de8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002dec:	4642      	mov	r2, r8
 8002dee:	464b      	mov	r3, r9
 8002df0:	f04f 0000 	mov.w	r0, #0
 8002df4:	f04f 0100 	mov.w	r1, #0
 8002df8:	0159      	lsls	r1, r3, #5
 8002dfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dfe:	0150      	lsls	r0, r2, #5
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4641      	mov	r1, r8
 8002e06:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e0a:	4649      	mov	r1, r9
 8002e0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e24:	ebb2 040a 	subs.w	r4, r2, sl
 8002e28:	eb63 050b 	sbc.w	r5, r3, fp
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	00eb      	lsls	r3, r5, #3
 8002e36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e3a:	00e2      	lsls	r2, r4, #3
 8002e3c:	4614      	mov	r4, r2
 8002e3e:	461d      	mov	r5, r3
 8002e40:	4643      	mov	r3, r8
 8002e42:	18e3      	adds	r3, r4, r3
 8002e44:	603b      	str	r3, [r7, #0]
 8002e46:	464b      	mov	r3, r9
 8002e48:	eb45 0303 	adc.w	r3, r5, r3
 8002e4c:	607b      	str	r3, [r7, #4]
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e5a:	4629      	mov	r1, r5
 8002e5c:	028b      	lsls	r3, r1, #10
 8002e5e:	4621      	mov	r1, r4
 8002e60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e64:	4621      	mov	r1, r4
 8002e66:	028a      	lsls	r2, r1, #10
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e6e:	2200      	movs	r2, #0
 8002e70:	61bb      	str	r3, [r7, #24]
 8002e72:	61fa      	str	r2, [r7, #28]
 8002e74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e78:	f7fd fa02 	bl	8000280 <__aeabi_uldivmod>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4613      	mov	r3, r2
 8002e82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	0c1b      	lsrs	r3, r3, #16
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	3301      	adds	r3, #1
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e9e:	e002      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ea0:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ea2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3750      	adds	r7, #80	; 0x50
 8002eac:	46bd      	mov	sp, r7
 8002eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	00f42400 	.word	0x00f42400
 8002ebc:	007a1200 	.word	0x007a1200

08002ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ec4:	4b03      	ldr	r3, [pc, #12]	; (8002ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	20000000 	.word	0x20000000

08002ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002edc:	f7ff fff0 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	0a9b      	lsrs	r3, r3, #10
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	4903      	ldr	r1, [pc, #12]	; (8002efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eee:	5ccb      	ldrb	r3, [r1, r3]
 8002ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	080050dc 	.word	0x080050dc

08002f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f04:	f7ff ffdc 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	0b5b      	lsrs	r3, r3, #13
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	4903      	ldr	r1, [pc, #12]	; (8002f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f16:	5ccb      	ldrb	r3, [r1, r3]
 8002f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40023800 	.word	0x40023800
 8002f24:	080050dc 	.word	0x080050dc

08002f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e041      	b.n	8002fbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fe f866 	bl	8001020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3304      	adds	r3, #4
 8002f64:	4619      	mov	r1, r3
 8002f66:	4610      	mov	r0, r2
 8002f68:	f000 fbf0 	bl	800374c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e041      	b.n	800305c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d106      	bne.n	8002ff2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f839 	bl	8003064 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3304      	adds	r3, #4
 8003002:	4619      	mov	r1, r3
 8003004:	4610      	mov	r0, r2
 8003006:	f000 fba1 	bl	800374c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d109      	bne.n	800309c <HAL_TIM_PWM_Start+0x24>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b01      	cmp	r3, #1
 8003092:	bf14      	ite	ne
 8003094:	2301      	movne	r3, #1
 8003096:	2300      	moveq	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	e022      	b.n	80030e2 <HAL_TIM_PWM_Start+0x6a>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d109      	bne.n	80030b6 <HAL_TIM_PWM_Start+0x3e>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	bf14      	ite	ne
 80030ae:	2301      	movne	r3, #1
 80030b0:	2300      	moveq	r3, #0
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	e015      	b.n	80030e2 <HAL_TIM_PWM_Start+0x6a>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d109      	bne.n	80030d0 <HAL_TIM_PWM_Start+0x58>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	bf14      	ite	ne
 80030c8:	2301      	movne	r3, #1
 80030ca:	2300      	moveq	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	e008      	b.n	80030e2 <HAL_TIM_PWM_Start+0x6a>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b01      	cmp	r3, #1
 80030da:	bf14      	ite	ne
 80030dc:	2301      	movne	r3, #1
 80030de:	2300      	moveq	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e068      	b.n	80031bc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d104      	bne.n	80030fa <HAL_TIM_PWM_Start+0x82>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030f8:	e013      	b.n	8003122 <HAL_TIM_PWM_Start+0xaa>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d104      	bne.n	800310a <HAL_TIM_PWM_Start+0x92>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003108:	e00b      	b.n	8003122 <HAL_TIM_PWM_Start+0xaa>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b08      	cmp	r3, #8
 800310e:	d104      	bne.n	800311a <HAL_TIM_PWM_Start+0xa2>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003118:	e003      	b.n	8003122 <HAL_TIM_PWM_Start+0xaa>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2202      	movs	r2, #2
 800311e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2201      	movs	r2, #1
 8003128:	6839      	ldr	r1, [r7, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fdb4 	bl	8003c98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a23      	ldr	r2, [pc, #140]	; (80031c4 <HAL_TIM_PWM_Start+0x14c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d107      	bne.n	800314a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003148:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a1d      	ldr	r2, [pc, #116]	; (80031c4 <HAL_TIM_PWM_Start+0x14c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d018      	beq.n	8003186 <HAL_TIM_PWM_Start+0x10e>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315c:	d013      	beq.n	8003186 <HAL_TIM_PWM_Start+0x10e>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a19      	ldr	r2, [pc, #100]	; (80031c8 <HAL_TIM_PWM_Start+0x150>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d00e      	beq.n	8003186 <HAL_TIM_PWM_Start+0x10e>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a17      	ldr	r2, [pc, #92]	; (80031cc <HAL_TIM_PWM_Start+0x154>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d009      	beq.n	8003186 <HAL_TIM_PWM_Start+0x10e>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a16      	ldr	r2, [pc, #88]	; (80031d0 <HAL_TIM_PWM_Start+0x158>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d004      	beq.n	8003186 <HAL_TIM_PWM_Start+0x10e>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a14      	ldr	r2, [pc, #80]	; (80031d4 <HAL_TIM_PWM_Start+0x15c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d111      	bne.n	80031aa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2b06      	cmp	r3, #6
 8003196:	d010      	beq.n	80031ba <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a8:	e007      	b.n	80031ba <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0201 	orr.w	r2, r2, #1
 80031b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40010000 	.word	0x40010000
 80031c8:	40000400 	.word	0x40000400
 80031cc:	40000800 	.word	0x40000800
 80031d0:	40000c00 	.word	0x40000c00
 80031d4:	40014000 	.word	0x40014000

080031d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d122      	bne.n	8003234 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d11b      	bne.n	8003234 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0202 	mvn.w	r2, #2
 8003204:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 fa77 	bl	800370e <HAL_TIM_IC_CaptureCallback>
 8003220:	e005      	b.n	800322e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 fa69 	bl	80036fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 fa7a 	bl	8003722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f003 0304 	and.w	r3, r3, #4
 800323e:	2b04      	cmp	r3, #4
 8003240:	d122      	bne.n	8003288 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b04      	cmp	r3, #4
 800324e:	d11b      	bne.n	8003288 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f06f 0204 	mvn.w	r2, #4
 8003258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2202      	movs	r2, #2
 800325e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 fa4d 	bl	800370e <HAL_TIM_IC_CaptureCallback>
 8003274:	e005      	b.n	8003282 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fa3f 	bl	80036fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 fa50 	bl	8003722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b08      	cmp	r3, #8
 8003294:	d122      	bne.n	80032dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f003 0308 	and.w	r3, r3, #8
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d11b      	bne.n	80032dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f06f 0208 	mvn.w	r2, #8
 80032ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2204      	movs	r2, #4
 80032b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fa23 	bl	800370e <HAL_TIM_IC_CaptureCallback>
 80032c8:	e005      	b.n	80032d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 fa15 	bl	80036fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 fa26 	bl	8003722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f003 0310 	and.w	r3, r3, #16
 80032e6:	2b10      	cmp	r3, #16
 80032e8:	d122      	bne.n	8003330 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f003 0310 	and.w	r3, r3, #16
 80032f4:	2b10      	cmp	r3, #16
 80032f6:	d11b      	bne.n	8003330 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f06f 0210 	mvn.w	r2, #16
 8003300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2208      	movs	r2, #8
 8003306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f9f9 	bl	800370e <HAL_TIM_IC_CaptureCallback>
 800331c:	e005      	b.n	800332a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f9eb 	bl	80036fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f9fc 	bl	8003722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b01      	cmp	r3, #1
 800333c:	d10e      	bne.n	800335c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b01      	cmp	r3, #1
 800334a:	d107      	bne.n	800335c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f06f 0201 	mvn.w	r2, #1
 8003354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7fd faea 	bl	8000930 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003366:	2b80      	cmp	r3, #128	; 0x80
 8003368:	d10e      	bne.n	8003388 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003374:	2b80      	cmp	r3, #128	; 0x80
 8003376:	d107      	bne.n	8003388 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fd78 	bl	8003e78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003392:	2b40      	cmp	r3, #64	; 0x40
 8003394:	d10e      	bne.n	80033b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a0:	2b40      	cmp	r3, #64	; 0x40
 80033a2:	d107      	bne.n	80033b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f9c1 	bl	8003736 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f003 0320 	and.w	r3, r3, #32
 80033be:	2b20      	cmp	r3, #32
 80033c0:	d10e      	bne.n	80033e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	f003 0320 	and.w	r3, r3, #32
 80033cc:	2b20      	cmp	r3, #32
 80033ce:	d107      	bne.n	80033e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f06f 0220 	mvn.w	r2, #32
 80033d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 fd42 	bl	8003e64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033e0:	bf00      	nop
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003402:	2302      	movs	r3, #2
 8003404:	e0ae      	b.n	8003564 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b0c      	cmp	r3, #12
 8003412:	f200 809f 	bhi.w	8003554 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003416:	a201      	add	r2, pc, #4	; (adr r2, 800341c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341c:	08003451 	.word	0x08003451
 8003420:	08003555 	.word	0x08003555
 8003424:	08003555 	.word	0x08003555
 8003428:	08003555 	.word	0x08003555
 800342c:	08003491 	.word	0x08003491
 8003430:	08003555 	.word	0x08003555
 8003434:	08003555 	.word	0x08003555
 8003438:	08003555 	.word	0x08003555
 800343c:	080034d3 	.word	0x080034d3
 8003440:	08003555 	.word	0x08003555
 8003444:	08003555 	.word	0x08003555
 8003448:	08003555 	.word	0x08003555
 800344c:	08003513 	.word	0x08003513
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68b9      	ldr	r1, [r7, #8]
 8003456:	4618      	mov	r0, r3
 8003458:	f000 f9f8 	bl	800384c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699a      	ldr	r2, [r3, #24]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0208 	orr.w	r2, r2, #8
 800346a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699a      	ldr	r2, [r3, #24]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0204 	bic.w	r2, r2, #4
 800347a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6999      	ldr	r1, [r3, #24]
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	691a      	ldr	r2, [r3, #16]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	619a      	str	r2, [r3, #24]
      break;
 800348e:	e064      	b.n	800355a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68b9      	ldr	r1, [r7, #8]
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fa3e 	bl	8003918 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699a      	ldr	r2, [r3, #24]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699a      	ldr	r2, [r3, #24]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6999      	ldr	r1, [r3, #24]
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	021a      	lsls	r2, r3, #8
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	619a      	str	r2, [r3, #24]
      break;
 80034d0:	e043      	b.n	800355a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68b9      	ldr	r1, [r7, #8]
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 fa89 	bl	80039f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69da      	ldr	r2, [r3, #28]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0208 	orr.w	r2, r2, #8
 80034ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	69da      	ldr	r2, [r3, #28]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0204 	bic.w	r2, r2, #4
 80034fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69d9      	ldr	r1, [r3, #28]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	61da      	str	r2, [r3, #28]
      break;
 8003510:	e023      	b.n	800355a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68b9      	ldr	r1, [r7, #8]
 8003518:	4618      	mov	r0, r3
 800351a:	f000 fad3 	bl	8003ac4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	69da      	ldr	r2, [r3, #28]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800352c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	69da      	ldr	r2, [r3, #28]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800353c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	69d9      	ldr	r1, [r3, #28]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	021a      	lsls	r2, r3, #8
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	61da      	str	r2, [r3, #28]
      break;
 8003552:	e002      	b.n	800355a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	75fb      	strb	r3, [r7, #23]
      break;
 8003558:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003562:	7dfb      	ldrb	r3, [r7, #23]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_TIM_ConfigClockSource+0x1c>
 8003584:	2302      	movs	r3, #2
 8003586:	e0b4      	b.n	80036f2 <HAL_TIM_ConfigClockSource+0x186>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035c0:	d03e      	beq.n	8003640 <HAL_TIM_ConfigClockSource+0xd4>
 80035c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035c6:	f200 8087 	bhi.w	80036d8 <HAL_TIM_ConfigClockSource+0x16c>
 80035ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ce:	f000 8086 	beq.w	80036de <HAL_TIM_ConfigClockSource+0x172>
 80035d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d6:	d87f      	bhi.n	80036d8 <HAL_TIM_ConfigClockSource+0x16c>
 80035d8:	2b70      	cmp	r3, #112	; 0x70
 80035da:	d01a      	beq.n	8003612 <HAL_TIM_ConfigClockSource+0xa6>
 80035dc:	2b70      	cmp	r3, #112	; 0x70
 80035de:	d87b      	bhi.n	80036d8 <HAL_TIM_ConfigClockSource+0x16c>
 80035e0:	2b60      	cmp	r3, #96	; 0x60
 80035e2:	d050      	beq.n	8003686 <HAL_TIM_ConfigClockSource+0x11a>
 80035e4:	2b60      	cmp	r3, #96	; 0x60
 80035e6:	d877      	bhi.n	80036d8 <HAL_TIM_ConfigClockSource+0x16c>
 80035e8:	2b50      	cmp	r3, #80	; 0x50
 80035ea:	d03c      	beq.n	8003666 <HAL_TIM_ConfigClockSource+0xfa>
 80035ec:	2b50      	cmp	r3, #80	; 0x50
 80035ee:	d873      	bhi.n	80036d8 <HAL_TIM_ConfigClockSource+0x16c>
 80035f0:	2b40      	cmp	r3, #64	; 0x40
 80035f2:	d058      	beq.n	80036a6 <HAL_TIM_ConfigClockSource+0x13a>
 80035f4:	2b40      	cmp	r3, #64	; 0x40
 80035f6:	d86f      	bhi.n	80036d8 <HAL_TIM_ConfigClockSource+0x16c>
 80035f8:	2b30      	cmp	r3, #48	; 0x30
 80035fa:	d064      	beq.n	80036c6 <HAL_TIM_ConfigClockSource+0x15a>
 80035fc:	2b30      	cmp	r3, #48	; 0x30
 80035fe:	d86b      	bhi.n	80036d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003600:	2b20      	cmp	r3, #32
 8003602:	d060      	beq.n	80036c6 <HAL_TIM_ConfigClockSource+0x15a>
 8003604:	2b20      	cmp	r3, #32
 8003606:	d867      	bhi.n	80036d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003608:	2b00      	cmp	r3, #0
 800360a:	d05c      	beq.n	80036c6 <HAL_TIM_ConfigClockSource+0x15a>
 800360c:	2b10      	cmp	r3, #16
 800360e:	d05a      	beq.n	80036c6 <HAL_TIM_ConfigClockSource+0x15a>
 8003610:	e062      	b.n	80036d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	6899      	ldr	r1, [r3, #8]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f000 fb19 	bl	8003c58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003634:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	609a      	str	r2, [r3, #8]
      break;
 800363e:	e04f      	b.n	80036e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6818      	ldr	r0, [r3, #0]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	6899      	ldr	r1, [r3, #8]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f000 fb02 	bl	8003c58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003662:	609a      	str	r2, [r3, #8]
      break;
 8003664:	e03c      	b.n	80036e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6818      	ldr	r0, [r3, #0]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	6859      	ldr	r1, [r3, #4]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	461a      	mov	r2, r3
 8003674:	f000 fa76 	bl	8003b64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2150      	movs	r1, #80	; 0x50
 800367e:	4618      	mov	r0, r3
 8003680:	f000 facf 	bl	8003c22 <TIM_ITRx_SetConfig>
      break;
 8003684:	e02c      	b.n	80036e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6818      	ldr	r0, [r3, #0]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	6859      	ldr	r1, [r3, #4]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	461a      	mov	r2, r3
 8003694:	f000 fa95 	bl	8003bc2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2160      	movs	r1, #96	; 0x60
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 fabf 	bl	8003c22 <TIM_ITRx_SetConfig>
      break;
 80036a4:	e01c      	b.n	80036e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6818      	ldr	r0, [r3, #0]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	6859      	ldr	r1, [r3, #4]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	461a      	mov	r2, r3
 80036b4:	f000 fa56 	bl	8003b64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2140      	movs	r1, #64	; 0x40
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 faaf 	bl	8003c22 <TIM_ITRx_SetConfig>
      break;
 80036c4:	e00c      	b.n	80036e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4619      	mov	r1, r3
 80036d0:	4610      	mov	r0, r2
 80036d2:	f000 faa6 	bl	8003c22 <TIM_ITRx_SetConfig>
      break;
 80036d6:	e003      	b.n	80036e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	73fb      	strb	r3, [r7, #15]
      break;
 80036dc:	e000      	b.n	80036e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
	...

0800374c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a34      	ldr	r2, [pc, #208]	; (8003830 <TIM_Base_SetConfig+0xe4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d00f      	beq.n	8003784 <TIM_Base_SetConfig+0x38>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376a:	d00b      	beq.n	8003784 <TIM_Base_SetConfig+0x38>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a31      	ldr	r2, [pc, #196]	; (8003834 <TIM_Base_SetConfig+0xe8>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d007      	beq.n	8003784 <TIM_Base_SetConfig+0x38>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a30      	ldr	r2, [pc, #192]	; (8003838 <TIM_Base_SetConfig+0xec>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d003      	beq.n	8003784 <TIM_Base_SetConfig+0x38>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a2f      	ldr	r2, [pc, #188]	; (800383c <TIM_Base_SetConfig+0xf0>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d108      	bne.n	8003796 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4313      	orrs	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a25      	ldr	r2, [pc, #148]	; (8003830 <TIM_Base_SetConfig+0xe4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d01b      	beq.n	80037d6 <TIM_Base_SetConfig+0x8a>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a4:	d017      	beq.n	80037d6 <TIM_Base_SetConfig+0x8a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a22      	ldr	r2, [pc, #136]	; (8003834 <TIM_Base_SetConfig+0xe8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d013      	beq.n	80037d6 <TIM_Base_SetConfig+0x8a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a21      	ldr	r2, [pc, #132]	; (8003838 <TIM_Base_SetConfig+0xec>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00f      	beq.n	80037d6 <TIM_Base_SetConfig+0x8a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a20      	ldr	r2, [pc, #128]	; (800383c <TIM_Base_SetConfig+0xf0>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00b      	beq.n	80037d6 <TIM_Base_SetConfig+0x8a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a1f      	ldr	r2, [pc, #124]	; (8003840 <TIM_Base_SetConfig+0xf4>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d007      	beq.n	80037d6 <TIM_Base_SetConfig+0x8a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a1e      	ldr	r2, [pc, #120]	; (8003844 <TIM_Base_SetConfig+0xf8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d003      	beq.n	80037d6 <TIM_Base_SetConfig+0x8a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a1d      	ldr	r2, [pc, #116]	; (8003848 <TIM_Base_SetConfig+0xfc>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d108      	bne.n	80037e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a08      	ldr	r2, [pc, #32]	; (8003830 <TIM_Base_SetConfig+0xe4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d103      	bne.n	800381c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	691a      	ldr	r2, [r3, #16]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	615a      	str	r2, [r3, #20]
}
 8003822:	bf00      	nop
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	40010000 	.word	0x40010000
 8003834:	40000400 	.word	0x40000400
 8003838:	40000800 	.word	0x40000800
 800383c:	40000c00 	.word	0x40000c00
 8003840:	40014000 	.word	0x40014000
 8003844:	40014400 	.word	0x40014400
 8003848:	40014800 	.word	0x40014800

0800384c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800384c:	b480      	push	{r7}
 800384e:	b087      	sub	sp, #28
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	f023 0201 	bic.w	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800387a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f023 0303 	bic.w	r3, r3, #3
 8003882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	4313      	orrs	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f023 0302 	bic.w	r3, r3, #2
 8003894:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	4313      	orrs	r3, r2
 800389e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a1c      	ldr	r2, [pc, #112]	; (8003914 <TIM_OC1_SetConfig+0xc8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d10c      	bne.n	80038c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f023 0308 	bic.w	r3, r3, #8
 80038ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f023 0304 	bic.w	r3, r3, #4
 80038c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a13      	ldr	r2, [pc, #76]	; (8003914 <TIM_OC1_SetConfig+0xc8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d111      	bne.n	80038ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	621a      	str	r2, [r3, #32]
}
 8003908:	bf00      	nop
 800390a:	371c      	adds	r7, #28
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	40010000 	.word	0x40010000

08003918 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	f023 0210 	bic.w	r2, r3, #16
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800394e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	021b      	lsls	r3, r3, #8
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4313      	orrs	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f023 0320 	bic.w	r3, r3, #32
 8003962:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	4313      	orrs	r3, r2
 800396e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a1e      	ldr	r2, [pc, #120]	; (80039ec <TIM_OC2_SetConfig+0xd4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d10d      	bne.n	8003994 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800397e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	4313      	orrs	r3, r2
 800398a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003992:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a15      	ldr	r2, [pc, #84]	; (80039ec <TIM_OC2_SetConfig+0xd4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d113      	bne.n	80039c4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	621a      	str	r2, [r3, #32]
}
 80039de:	bf00      	nop
 80039e0:	371c      	adds	r7, #28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40010000 	.word	0x40010000

080039f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f023 0303 	bic.w	r3, r3, #3
 8003a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	021b      	lsls	r3, r3, #8
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a1d      	ldr	r2, [pc, #116]	; (8003ac0 <TIM_OC3_SetConfig+0xd0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d10d      	bne.n	8003a6a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	021b      	lsls	r3, r3, #8
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a14      	ldr	r2, [pc, #80]	; (8003ac0 <TIM_OC3_SetConfig+0xd0>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d113      	bne.n	8003a9a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	621a      	str	r2, [r3, #32]
}
 8003ab4:	bf00      	nop
 8003ab6:	371c      	adds	r7, #28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	40010000 	.word	0x40010000

08003ac4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	021b      	lsls	r3, r3, #8
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	031b      	lsls	r3, r3, #12
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a10      	ldr	r2, [pc, #64]	; (8003b60 <TIM_OC4_SetConfig+0x9c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d109      	bne.n	8003b38 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	019b      	lsls	r3, r3, #6
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	621a      	str	r2, [r3, #32]
}
 8003b52:	bf00      	nop
 8003b54:	371c      	adds	r7, #28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40010000 	.word	0x40010000

08003b64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	f023 0201 	bic.w	r2, r3, #1
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f023 030a 	bic.w	r3, r3, #10
 8003ba0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	621a      	str	r2, [r3, #32]
}
 8003bb6:	bf00      	nop
 8003bb8:	371c      	adds	r7, #28
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b087      	sub	sp, #28
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	f023 0210 	bic.w	r2, r3, #16
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	031b      	lsls	r3, r3, #12
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bfe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	621a      	str	r2, [r3, #32]
}
 8003c16:	bf00      	nop
 8003c18:	371c      	adds	r7, #28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b085      	sub	sp, #20
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
 8003c2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f043 0307 	orr.w	r3, r3, #7
 8003c44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	609a      	str	r2, [r3, #8]
}
 8003c4c:	bf00      	nop
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
 8003c64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	021a      	lsls	r2, r3, #8
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	609a      	str	r2, [r3, #8]
}
 8003c8c:	bf00      	nop
 8003c8e:	371c      	adds	r7, #28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f003 031f 	and.w	r3, r3, #31
 8003caa:	2201      	movs	r2, #1
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6a1a      	ldr	r2, [r3, #32]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	401a      	ands	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a1a      	ldr	r2, [r3, #32]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f003 031f 	and.w	r3, r3, #31
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	621a      	str	r2, [r3, #32]
}
 8003cd6:	bf00      	nop
 8003cd8:	371c      	adds	r7, #28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
	...

08003ce4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e050      	b.n	8003d9e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a1c      	ldr	r2, [pc, #112]	; (8003dac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d018      	beq.n	8003d72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d48:	d013      	beq.n	8003d72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a18      	ldr	r2, [pc, #96]	; (8003db0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00e      	beq.n	8003d72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a16      	ldr	r2, [pc, #88]	; (8003db4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d009      	beq.n	8003d72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a15      	ldr	r2, [pc, #84]	; (8003db8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d004      	beq.n	8003d72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a13      	ldr	r2, [pc, #76]	; (8003dbc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d10c      	bne.n	8003d8c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40010000 	.word	0x40010000
 8003db0:	40000400 	.word	0x40000400
 8003db4:	40000800 	.word	0x40000800
 8003db8:	40000c00 	.word	0x40000c00
 8003dbc:	40014000 	.word	0x40014000

08003dc0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e03d      	b.n	8003e58 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e03f      	b.n	8003f1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d106      	bne.n	8003eb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7fd f96a 	bl	800118c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2224      	movs	r2, #36	; 0x24
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ece:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f929 	bl	8004128 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	691a      	ldr	r2, [r3, #16]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ee4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695a      	ldr	r2, [r3, #20]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ef4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b08a      	sub	sp, #40	; 0x28
 8003f2a:	af02      	add	r7, sp, #8
 8003f2c:	60f8      	str	r0, [r7, #12]
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	603b      	str	r3, [r7, #0]
 8003f32:	4613      	mov	r3, r2
 8003f34:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b20      	cmp	r3, #32
 8003f44:	d17c      	bne.n	8004040 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <HAL_UART_Transmit+0x2c>
 8003f4c:	88fb      	ldrh	r3, [r7, #6]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e075      	b.n	8004042 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d101      	bne.n	8003f64 <HAL_UART_Transmit+0x3e>
 8003f60:	2302      	movs	r3, #2
 8003f62:	e06e      	b.n	8004042 <HAL_UART_Transmit+0x11c>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2221      	movs	r2, #33	; 0x21
 8003f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f7a:	f7fd fcb1 	bl	80018e0 <HAL_GetTick>
 8003f7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	88fa      	ldrh	r2, [r7, #6]
 8003f84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	88fa      	ldrh	r2, [r7, #6]
 8003f8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f94:	d108      	bne.n	8003fa8 <HAL_UART_Transmit+0x82>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d104      	bne.n	8003fa8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	61bb      	str	r3, [r7, #24]
 8003fa6:	e003      	b.n	8003fb0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fac:	2300      	movs	r3, #0
 8003fae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003fb8:	e02a      	b.n	8004010 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2180      	movs	r1, #128	; 0x80
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 f840 	bl	800404a <UART_WaitOnFlagUntilTimeout>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e036      	b.n	8004042 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10b      	bne.n	8003ff2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fe8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	3302      	adds	r3, #2
 8003fee:	61bb      	str	r3, [r7, #24]
 8003ff0:	e007      	b.n	8004002 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	781a      	ldrb	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	3301      	adds	r3, #1
 8004000:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004014:	b29b      	uxth	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1cf      	bne.n	8003fba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2200      	movs	r2, #0
 8004022:	2140      	movs	r1, #64	; 0x40
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 f810 	bl	800404a <UART_WaitOnFlagUntilTimeout>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e006      	b.n	8004042 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800403c:	2300      	movs	r3, #0
 800403e:	e000      	b.n	8004042 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004040:	2302      	movs	r3, #2
  }
}
 8004042:	4618      	mov	r0, r3
 8004044:	3720      	adds	r7, #32
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b090      	sub	sp, #64	; 0x40
 800404e:	af00      	add	r7, sp, #0
 8004050:	60f8      	str	r0, [r7, #12]
 8004052:	60b9      	str	r1, [r7, #8]
 8004054:	603b      	str	r3, [r7, #0]
 8004056:	4613      	mov	r3, r2
 8004058:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800405a:	e050      	b.n	80040fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800405c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800405e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004062:	d04c      	beq.n	80040fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004066:	2b00      	cmp	r3, #0
 8004068:	d007      	beq.n	800407a <UART_WaitOnFlagUntilTimeout+0x30>
 800406a:	f7fd fc39 	bl	80018e0 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004076:	429a      	cmp	r2, r3
 8004078:	d241      	bcs.n	80040fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	330c      	adds	r3, #12
 8004080:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004084:	e853 3f00 	ldrex	r3, [r3]
 8004088:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004090:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	330c      	adds	r3, #12
 8004098:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800409a:	637a      	str	r2, [r7, #52]	; 0x34
 800409c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040a2:	e841 2300 	strex	r3, r2, [r1]
 80040a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1e5      	bne.n	800407a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3314      	adds	r3, #20
 80040b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	e853 3f00 	ldrex	r3, [r3]
 80040bc:	613b      	str	r3, [r7, #16]
   return(result);
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f023 0301 	bic.w	r3, r3, #1
 80040c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3314      	adds	r3, #20
 80040cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040ce:	623a      	str	r2, [r7, #32]
 80040d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d2:	69f9      	ldr	r1, [r7, #28]
 80040d4:	6a3a      	ldr	r2, [r7, #32]
 80040d6:	e841 2300 	strex	r3, r2, [r1]
 80040da:	61bb      	str	r3, [r7, #24]
   return(result);
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1e5      	bne.n	80040ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e00f      	b.n	800411e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	4013      	ands	r3, r2
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	429a      	cmp	r2, r3
 800410c:	bf0c      	ite	eq
 800410e:	2301      	moveq	r3, #1
 8004110:	2300      	movne	r3, #0
 8004112:	b2db      	uxtb	r3, r3
 8004114:	461a      	mov	r2, r3
 8004116:	79fb      	ldrb	r3, [r7, #7]
 8004118:	429a      	cmp	r2, r3
 800411a:	d09f      	beq.n	800405c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3740      	adds	r7, #64	; 0x40
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800412c:	b0c0      	sub	sp, #256	; 0x100
 800412e:	af00      	add	r7, sp, #0
 8004130:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004144:	68d9      	ldr	r1, [r3, #12]
 8004146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	ea40 0301 	orr.w	r3, r0, r1
 8004150:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	431a      	orrs	r2, r3
 8004160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	431a      	orrs	r2, r3
 8004168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004180:	f021 010c 	bic.w	r1, r1, #12
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800418e:	430b      	orrs	r3, r1
 8004190:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800419e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a2:	6999      	ldr	r1, [r3, #24]
 80041a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	ea40 0301 	orr.w	r3, r0, r1
 80041ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	4b8f      	ldr	r3, [pc, #572]	; (80043f4 <UART_SetConfig+0x2cc>)
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d005      	beq.n	80041c8 <UART_SetConfig+0xa0>
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	4b8d      	ldr	r3, [pc, #564]	; (80043f8 <UART_SetConfig+0x2d0>)
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d104      	bne.n	80041d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041c8:	f7fe fe9a 	bl	8002f00 <HAL_RCC_GetPCLK2Freq>
 80041cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041d0:	e003      	b.n	80041da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041d2:	f7fe fe81 	bl	8002ed8 <HAL_RCC_GetPCLK1Freq>
 80041d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041e4:	f040 810c 	bne.w	8004400 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041ec:	2200      	movs	r2, #0
 80041ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80041f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80041fa:	4622      	mov	r2, r4
 80041fc:	462b      	mov	r3, r5
 80041fe:	1891      	adds	r1, r2, r2
 8004200:	65b9      	str	r1, [r7, #88]	; 0x58
 8004202:	415b      	adcs	r3, r3
 8004204:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004206:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800420a:	4621      	mov	r1, r4
 800420c:	eb12 0801 	adds.w	r8, r2, r1
 8004210:	4629      	mov	r1, r5
 8004212:	eb43 0901 	adc.w	r9, r3, r1
 8004216:	f04f 0200 	mov.w	r2, #0
 800421a:	f04f 0300 	mov.w	r3, #0
 800421e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004222:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004226:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800422a:	4690      	mov	r8, r2
 800422c:	4699      	mov	r9, r3
 800422e:	4623      	mov	r3, r4
 8004230:	eb18 0303 	adds.w	r3, r8, r3
 8004234:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004238:	462b      	mov	r3, r5
 800423a:	eb49 0303 	adc.w	r3, r9, r3
 800423e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800424e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004252:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004256:	460b      	mov	r3, r1
 8004258:	18db      	adds	r3, r3, r3
 800425a:	653b      	str	r3, [r7, #80]	; 0x50
 800425c:	4613      	mov	r3, r2
 800425e:	eb42 0303 	adc.w	r3, r2, r3
 8004262:	657b      	str	r3, [r7, #84]	; 0x54
 8004264:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004268:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800426c:	f7fc f808 	bl	8000280 <__aeabi_uldivmod>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4b61      	ldr	r3, [pc, #388]	; (80043fc <UART_SetConfig+0x2d4>)
 8004276:	fba3 2302 	umull	r2, r3, r3, r2
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	011c      	lsls	r4, r3, #4
 800427e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004282:	2200      	movs	r2, #0
 8004284:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004288:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800428c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004290:	4642      	mov	r2, r8
 8004292:	464b      	mov	r3, r9
 8004294:	1891      	adds	r1, r2, r2
 8004296:	64b9      	str	r1, [r7, #72]	; 0x48
 8004298:	415b      	adcs	r3, r3
 800429a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800429c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042a0:	4641      	mov	r1, r8
 80042a2:	eb12 0a01 	adds.w	sl, r2, r1
 80042a6:	4649      	mov	r1, r9
 80042a8:	eb43 0b01 	adc.w	fp, r3, r1
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	f04f 0300 	mov.w	r3, #0
 80042b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042c0:	4692      	mov	sl, r2
 80042c2:	469b      	mov	fp, r3
 80042c4:	4643      	mov	r3, r8
 80042c6:	eb1a 0303 	adds.w	r3, sl, r3
 80042ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042ce:	464b      	mov	r3, r9
 80042d0:	eb4b 0303 	adc.w	r3, fp, r3
 80042d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80042e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042ec:	460b      	mov	r3, r1
 80042ee:	18db      	adds	r3, r3, r3
 80042f0:	643b      	str	r3, [r7, #64]	; 0x40
 80042f2:	4613      	mov	r3, r2
 80042f4:	eb42 0303 	adc.w	r3, r2, r3
 80042f8:	647b      	str	r3, [r7, #68]	; 0x44
 80042fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004302:	f7fb ffbd 	bl	8000280 <__aeabi_uldivmod>
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	4611      	mov	r1, r2
 800430c:	4b3b      	ldr	r3, [pc, #236]	; (80043fc <UART_SetConfig+0x2d4>)
 800430e:	fba3 2301 	umull	r2, r3, r3, r1
 8004312:	095b      	lsrs	r3, r3, #5
 8004314:	2264      	movs	r2, #100	; 0x64
 8004316:	fb02 f303 	mul.w	r3, r2, r3
 800431a:	1acb      	subs	r3, r1, r3
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004322:	4b36      	ldr	r3, [pc, #216]	; (80043fc <UART_SetConfig+0x2d4>)
 8004324:	fba3 2302 	umull	r2, r3, r3, r2
 8004328:	095b      	lsrs	r3, r3, #5
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004330:	441c      	add	r4, r3
 8004332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004336:	2200      	movs	r2, #0
 8004338:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800433c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004340:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004344:	4642      	mov	r2, r8
 8004346:	464b      	mov	r3, r9
 8004348:	1891      	adds	r1, r2, r2
 800434a:	63b9      	str	r1, [r7, #56]	; 0x38
 800434c:	415b      	adcs	r3, r3
 800434e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004350:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004354:	4641      	mov	r1, r8
 8004356:	1851      	adds	r1, r2, r1
 8004358:	6339      	str	r1, [r7, #48]	; 0x30
 800435a:	4649      	mov	r1, r9
 800435c:	414b      	adcs	r3, r1
 800435e:	637b      	str	r3, [r7, #52]	; 0x34
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800436c:	4659      	mov	r1, fp
 800436e:	00cb      	lsls	r3, r1, #3
 8004370:	4651      	mov	r1, sl
 8004372:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004376:	4651      	mov	r1, sl
 8004378:	00ca      	lsls	r2, r1, #3
 800437a:	4610      	mov	r0, r2
 800437c:	4619      	mov	r1, r3
 800437e:	4603      	mov	r3, r0
 8004380:	4642      	mov	r2, r8
 8004382:	189b      	adds	r3, r3, r2
 8004384:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004388:	464b      	mov	r3, r9
 800438a:	460a      	mov	r2, r1
 800438c:	eb42 0303 	adc.w	r3, r2, r3
 8004390:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043a8:	460b      	mov	r3, r1
 80043aa:	18db      	adds	r3, r3, r3
 80043ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ae:	4613      	mov	r3, r2
 80043b0:	eb42 0303 	adc.w	r3, r2, r3
 80043b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043be:	f7fb ff5f 	bl	8000280 <__aeabi_uldivmod>
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	4b0d      	ldr	r3, [pc, #52]	; (80043fc <UART_SetConfig+0x2d4>)
 80043c8:	fba3 1302 	umull	r1, r3, r3, r2
 80043cc:	095b      	lsrs	r3, r3, #5
 80043ce:	2164      	movs	r1, #100	; 0x64
 80043d0:	fb01 f303 	mul.w	r3, r1, r3
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	3332      	adds	r3, #50	; 0x32
 80043da:	4a08      	ldr	r2, [pc, #32]	; (80043fc <UART_SetConfig+0x2d4>)
 80043dc:	fba2 2303 	umull	r2, r3, r2, r3
 80043e0:	095b      	lsrs	r3, r3, #5
 80043e2:	f003 0207 	and.w	r2, r3, #7
 80043e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4422      	add	r2, r4
 80043ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043f0:	e105      	b.n	80045fe <UART_SetConfig+0x4d6>
 80043f2:	bf00      	nop
 80043f4:	40011000 	.word	0x40011000
 80043f8:	40011400 	.word	0x40011400
 80043fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004400:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004404:	2200      	movs	r2, #0
 8004406:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800440a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800440e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004412:	4642      	mov	r2, r8
 8004414:	464b      	mov	r3, r9
 8004416:	1891      	adds	r1, r2, r2
 8004418:	6239      	str	r1, [r7, #32]
 800441a:	415b      	adcs	r3, r3
 800441c:	627b      	str	r3, [r7, #36]	; 0x24
 800441e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004422:	4641      	mov	r1, r8
 8004424:	1854      	adds	r4, r2, r1
 8004426:	4649      	mov	r1, r9
 8004428:	eb43 0501 	adc.w	r5, r3, r1
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	f04f 0300 	mov.w	r3, #0
 8004434:	00eb      	lsls	r3, r5, #3
 8004436:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800443a:	00e2      	lsls	r2, r4, #3
 800443c:	4614      	mov	r4, r2
 800443e:	461d      	mov	r5, r3
 8004440:	4643      	mov	r3, r8
 8004442:	18e3      	adds	r3, r4, r3
 8004444:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004448:	464b      	mov	r3, r9
 800444a:	eb45 0303 	adc.w	r3, r5, r3
 800444e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800445e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004462:	f04f 0200 	mov.w	r2, #0
 8004466:	f04f 0300 	mov.w	r3, #0
 800446a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800446e:	4629      	mov	r1, r5
 8004470:	008b      	lsls	r3, r1, #2
 8004472:	4621      	mov	r1, r4
 8004474:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004478:	4621      	mov	r1, r4
 800447a:	008a      	lsls	r2, r1, #2
 800447c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004480:	f7fb fefe 	bl	8000280 <__aeabi_uldivmod>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4b60      	ldr	r3, [pc, #384]	; (800460c <UART_SetConfig+0x4e4>)
 800448a:	fba3 2302 	umull	r2, r3, r3, r2
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	011c      	lsls	r4, r3, #4
 8004492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004496:	2200      	movs	r2, #0
 8004498:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800449c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044a4:	4642      	mov	r2, r8
 80044a6:	464b      	mov	r3, r9
 80044a8:	1891      	adds	r1, r2, r2
 80044aa:	61b9      	str	r1, [r7, #24]
 80044ac:	415b      	adcs	r3, r3
 80044ae:	61fb      	str	r3, [r7, #28]
 80044b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044b4:	4641      	mov	r1, r8
 80044b6:	1851      	adds	r1, r2, r1
 80044b8:	6139      	str	r1, [r7, #16]
 80044ba:	4649      	mov	r1, r9
 80044bc:	414b      	adcs	r3, r1
 80044be:	617b      	str	r3, [r7, #20]
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044cc:	4659      	mov	r1, fp
 80044ce:	00cb      	lsls	r3, r1, #3
 80044d0:	4651      	mov	r1, sl
 80044d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044d6:	4651      	mov	r1, sl
 80044d8:	00ca      	lsls	r2, r1, #3
 80044da:	4610      	mov	r0, r2
 80044dc:	4619      	mov	r1, r3
 80044de:	4603      	mov	r3, r0
 80044e0:	4642      	mov	r2, r8
 80044e2:	189b      	adds	r3, r3, r2
 80044e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044e8:	464b      	mov	r3, r9
 80044ea:	460a      	mov	r2, r1
 80044ec:	eb42 0303 	adc.w	r3, r2, r3
 80044f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80044fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004500:	f04f 0200 	mov.w	r2, #0
 8004504:	f04f 0300 	mov.w	r3, #0
 8004508:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800450c:	4649      	mov	r1, r9
 800450e:	008b      	lsls	r3, r1, #2
 8004510:	4641      	mov	r1, r8
 8004512:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004516:	4641      	mov	r1, r8
 8004518:	008a      	lsls	r2, r1, #2
 800451a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800451e:	f7fb feaf 	bl	8000280 <__aeabi_uldivmod>
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	4b39      	ldr	r3, [pc, #228]	; (800460c <UART_SetConfig+0x4e4>)
 8004528:	fba3 1302 	umull	r1, r3, r3, r2
 800452c:	095b      	lsrs	r3, r3, #5
 800452e:	2164      	movs	r1, #100	; 0x64
 8004530:	fb01 f303 	mul.w	r3, r1, r3
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	3332      	adds	r3, #50	; 0x32
 800453a:	4a34      	ldr	r2, [pc, #208]	; (800460c <UART_SetConfig+0x4e4>)
 800453c:	fba2 2303 	umull	r2, r3, r2, r3
 8004540:	095b      	lsrs	r3, r3, #5
 8004542:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004546:	441c      	add	r4, r3
 8004548:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800454c:	2200      	movs	r2, #0
 800454e:	673b      	str	r3, [r7, #112]	; 0x70
 8004550:	677a      	str	r2, [r7, #116]	; 0x74
 8004552:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004556:	4642      	mov	r2, r8
 8004558:	464b      	mov	r3, r9
 800455a:	1891      	adds	r1, r2, r2
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	415b      	adcs	r3, r3
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004566:	4641      	mov	r1, r8
 8004568:	1851      	adds	r1, r2, r1
 800456a:	6039      	str	r1, [r7, #0]
 800456c:	4649      	mov	r1, r9
 800456e:	414b      	adcs	r3, r1
 8004570:	607b      	str	r3, [r7, #4]
 8004572:	f04f 0200 	mov.w	r2, #0
 8004576:	f04f 0300 	mov.w	r3, #0
 800457a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800457e:	4659      	mov	r1, fp
 8004580:	00cb      	lsls	r3, r1, #3
 8004582:	4651      	mov	r1, sl
 8004584:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004588:	4651      	mov	r1, sl
 800458a:	00ca      	lsls	r2, r1, #3
 800458c:	4610      	mov	r0, r2
 800458e:	4619      	mov	r1, r3
 8004590:	4603      	mov	r3, r0
 8004592:	4642      	mov	r2, r8
 8004594:	189b      	adds	r3, r3, r2
 8004596:	66bb      	str	r3, [r7, #104]	; 0x68
 8004598:	464b      	mov	r3, r9
 800459a:	460a      	mov	r2, r1
 800459c:	eb42 0303 	adc.w	r3, r2, r3
 80045a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	663b      	str	r3, [r7, #96]	; 0x60
 80045ac:	667a      	str	r2, [r7, #100]	; 0x64
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045ba:	4649      	mov	r1, r9
 80045bc:	008b      	lsls	r3, r1, #2
 80045be:	4641      	mov	r1, r8
 80045c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045c4:	4641      	mov	r1, r8
 80045c6:	008a      	lsls	r2, r1, #2
 80045c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80045cc:	f7fb fe58 	bl	8000280 <__aeabi_uldivmod>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4b0d      	ldr	r3, [pc, #52]	; (800460c <UART_SetConfig+0x4e4>)
 80045d6:	fba3 1302 	umull	r1, r3, r3, r2
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	2164      	movs	r1, #100	; 0x64
 80045de:	fb01 f303 	mul.w	r3, r1, r3
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	3332      	adds	r3, #50	; 0x32
 80045e8:	4a08      	ldr	r2, [pc, #32]	; (800460c <UART_SetConfig+0x4e4>)
 80045ea:	fba2 2303 	umull	r2, r3, r2, r3
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	f003 020f 	and.w	r2, r3, #15
 80045f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4422      	add	r2, r4
 80045fc:	609a      	str	r2, [r3, #8]
}
 80045fe:	bf00      	nop
 8004600:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004604:	46bd      	mov	sp, r7
 8004606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800460a:	bf00      	nop
 800460c:	51eb851f 	.word	0x51eb851f

08004610 <__errno>:
 8004610:	4b01      	ldr	r3, [pc, #4]	; (8004618 <__errno+0x8>)
 8004612:	6818      	ldr	r0, [r3, #0]
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	2000000c 	.word	0x2000000c

0800461c <__libc_init_array>:
 800461c:	b570      	push	{r4, r5, r6, lr}
 800461e:	4d0d      	ldr	r5, [pc, #52]	; (8004654 <__libc_init_array+0x38>)
 8004620:	4c0d      	ldr	r4, [pc, #52]	; (8004658 <__libc_init_array+0x3c>)
 8004622:	1b64      	subs	r4, r4, r5
 8004624:	10a4      	asrs	r4, r4, #2
 8004626:	2600      	movs	r6, #0
 8004628:	42a6      	cmp	r6, r4
 800462a:	d109      	bne.n	8004640 <__libc_init_array+0x24>
 800462c:	4d0b      	ldr	r5, [pc, #44]	; (800465c <__libc_init_array+0x40>)
 800462e:	4c0c      	ldr	r4, [pc, #48]	; (8004660 <__libc_init_array+0x44>)
 8004630:	f000 fc8e 	bl	8004f50 <_init>
 8004634:	1b64      	subs	r4, r4, r5
 8004636:	10a4      	asrs	r4, r4, #2
 8004638:	2600      	movs	r6, #0
 800463a:	42a6      	cmp	r6, r4
 800463c:	d105      	bne.n	800464a <__libc_init_array+0x2e>
 800463e:	bd70      	pop	{r4, r5, r6, pc}
 8004640:	f855 3b04 	ldr.w	r3, [r5], #4
 8004644:	4798      	blx	r3
 8004646:	3601      	adds	r6, #1
 8004648:	e7ee      	b.n	8004628 <__libc_init_array+0xc>
 800464a:	f855 3b04 	ldr.w	r3, [r5], #4
 800464e:	4798      	blx	r3
 8004650:	3601      	adds	r6, #1
 8004652:	e7f2      	b.n	800463a <__libc_init_array+0x1e>
 8004654:	08005198 	.word	0x08005198
 8004658:	08005198 	.word	0x08005198
 800465c:	08005198 	.word	0x08005198
 8004660:	0800519c 	.word	0x0800519c

08004664 <memset>:
 8004664:	4402      	add	r2, r0
 8004666:	4603      	mov	r3, r0
 8004668:	4293      	cmp	r3, r2
 800466a:	d100      	bne.n	800466e <memset+0xa>
 800466c:	4770      	bx	lr
 800466e:	f803 1b01 	strb.w	r1, [r3], #1
 8004672:	e7f9      	b.n	8004668 <memset+0x4>

08004674 <siprintf>:
 8004674:	b40e      	push	{r1, r2, r3}
 8004676:	b500      	push	{lr}
 8004678:	b09c      	sub	sp, #112	; 0x70
 800467a:	ab1d      	add	r3, sp, #116	; 0x74
 800467c:	9002      	str	r0, [sp, #8]
 800467e:	9006      	str	r0, [sp, #24]
 8004680:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004684:	4809      	ldr	r0, [pc, #36]	; (80046ac <siprintf+0x38>)
 8004686:	9107      	str	r1, [sp, #28]
 8004688:	9104      	str	r1, [sp, #16]
 800468a:	4909      	ldr	r1, [pc, #36]	; (80046b0 <siprintf+0x3c>)
 800468c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004690:	9105      	str	r1, [sp, #20]
 8004692:	6800      	ldr	r0, [r0, #0]
 8004694:	9301      	str	r3, [sp, #4]
 8004696:	a902      	add	r1, sp, #8
 8004698:	f000 f868 	bl	800476c <_svfiprintf_r>
 800469c:	9b02      	ldr	r3, [sp, #8]
 800469e:	2200      	movs	r2, #0
 80046a0:	701a      	strb	r2, [r3, #0]
 80046a2:	b01c      	add	sp, #112	; 0x70
 80046a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80046a8:	b003      	add	sp, #12
 80046aa:	4770      	bx	lr
 80046ac:	2000000c 	.word	0x2000000c
 80046b0:	ffff0208 	.word	0xffff0208

080046b4 <__ssputs_r>:
 80046b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046b8:	688e      	ldr	r6, [r1, #8]
 80046ba:	429e      	cmp	r6, r3
 80046bc:	4682      	mov	sl, r0
 80046be:	460c      	mov	r4, r1
 80046c0:	4690      	mov	r8, r2
 80046c2:	461f      	mov	r7, r3
 80046c4:	d838      	bhi.n	8004738 <__ssputs_r+0x84>
 80046c6:	898a      	ldrh	r2, [r1, #12]
 80046c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046cc:	d032      	beq.n	8004734 <__ssputs_r+0x80>
 80046ce:	6825      	ldr	r5, [r4, #0]
 80046d0:	6909      	ldr	r1, [r1, #16]
 80046d2:	eba5 0901 	sub.w	r9, r5, r1
 80046d6:	6965      	ldr	r5, [r4, #20]
 80046d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046e0:	3301      	adds	r3, #1
 80046e2:	444b      	add	r3, r9
 80046e4:	106d      	asrs	r5, r5, #1
 80046e6:	429d      	cmp	r5, r3
 80046e8:	bf38      	it	cc
 80046ea:	461d      	movcc	r5, r3
 80046ec:	0553      	lsls	r3, r2, #21
 80046ee:	d531      	bpl.n	8004754 <__ssputs_r+0xa0>
 80046f0:	4629      	mov	r1, r5
 80046f2:	f000 fb63 	bl	8004dbc <_malloc_r>
 80046f6:	4606      	mov	r6, r0
 80046f8:	b950      	cbnz	r0, 8004710 <__ssputs_r+0x5c>
 80046fa:	230c      	movs	r3, #12
 80046fc:	f8ca 3000 	str.w	r3, [sl]
 8004700:	89a3      	ldrh	r3, [r4, #12]
 8004702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004706:	81a3      	strh	r3, [r4, #12]
 8004708:	f04f 30ff 	mov.w	r0, #4294967295
 800470c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004710:	6921      	ldr	r1, [r4, #16]
 8004712:	464a      	mov	r2, r9
 8004714:	f000 fabe 	bl	8004c94 <memcpy>
 8004718:	89a3      	ldrh	r3, [r4, #12]
 800471a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800471e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004722:	81a3      	strh	r3, [r4, #12]
 8004724:	6126      	str	r6, [r4, #16]
 8004726:	6165      	str	r5, [r4, #20]
 8004728:	444e      	add	r6, r9
 800472a:	eba5 0509 	sub.w	r5, r5, r9
 800472e:	6026      	str	r6, [r4, #0]
 8004730:	60a5      	str	r5, [r4, #8]
 8004732:	463e      	mov	r6, r7
 8004734:	42be      	cmp	r6, r7
 8004736:	d900      	bls.n	800473a <__ssputs_r+0x86>
 8004738:	463e      	mov	r6, r7
 800473a:	6820      	ldr	r0, [r4, #0]
 800473c:	4632      	mov	r2, r6
 800473e:	4641      	mov	r1, r8
 8004740:	f000 fab6 	bl	8004cb0 <memmove>
 8004744:	68a3      	ldr	r3, [r4, #8]
 8004746:	1b9b      	subs	r3, r3, r6
 8004748:	60a3      	str	r3, [r4, #8]
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	4433      	add	r3, r6
 800474e:	6023      	str	r3, [r4, #0]
 8004750:	2000      	movs	r0, #0
 8004752:	e7db      	b.n	800470c <__ssputs_r+0x58>
 8004754:	462a      	mov	r2, r5
 8004756:	f000 fba5 	bl	8004ea4 <_realloc_r>
 800475a:	4606      	mov	r6, r0
 800475c:	2800      	cmp	r0, #0
 800475e:	d1e1      	bne.n	8004724 <__ssputs_r+0x70>
 8004760:	6921      	ldr	r1, [r4, #16]
 8004762:	4650      	mov	r0, sl
 8004764:	f000 fabe 	bl	8004ce4 <_free_r>
 8004768:	e7c7      	b.n	80046fa <__ssputs_r+0x46>
	...

0800476c <_svfiprintf_r>:
 800476c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004770:	4698      	mov	r8, r3
 8004772:	898b      	ldrh	r3, [r1, #12]
 8004774:	061b      	lsls	r3, r3, #24
 8004776:	b09d      	sub	sp, #116	; 0x74
 8004778:	4607      	mov	r7, r0
 800477a:	460d      	mov	r5, r1
 800477c:	4614      	mov	r4, r2
 800477e:	d50e      	bpl.n	800479e <_svfiprintf_r+0x32>
 8004780:	690b      	ldr	r3, [r1, #16]
 8004782:	b963      	cbnz	r3, 800479e <_svfiprintf_r+0x32>
 8004784:	2140      	movs	r1, #64	; 0x40
 8004786:	f000 fb19 	bl	8004dbc <_malloc_r>
 800478a:	6028      	str	r0, [r5, #0]
 800478c:	6128      	str	r0, [r5, #16]
 800478e:	b920      	cbnz	r0, 800479a <_svfiprintf_r+0x2e>
 8004790:	230c      	movs	r3, #12
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	f04f 30ff 	mov.w	r0, #4294967295
 8004798:	e0d1      	b.n	800493e <_svfiprintf_r+0x1d2>
 800479a:	2340      	movs	r3, #64	; 0x40
 800479c:	616b      	str	r3, [r5, #20]
 800479e:	2300      	movs	r3, #0
 80047a0:	9309      	str	r3, [sp, #36]	; 0x24
 80047a2:	2320      	movs	r3, #32
 80047a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80047ac:	2330      	movs	r3, #48	; 0x30
 80047ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004958 <_svfiprintf_r+0x1ec>
 80047b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047b6:	f04f 0901 	mov.w	r9, #1
 80047ba:	4623      	mov	r3, r4
 80047bc:	469a      	mov	sl, r3
 80047be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047c2:	b10a      	cbz	r2, 80047c8 <_svfiprintf_r+0x5c>
 80047c4:	2a25      	cmp	r2, #37	; 0x25
 80047c6:	d1f9      	bne.n	80047bc <_svfiprintf_r+0x50>
 80047c8:	ebba 0b04 	subs.w	fp, sl, r4
 80047cc:	d00b      	beq.n	80047e6 <_svfiprintf_r+0x7a>
 80047ce:	465b      	mov	r3, fp
 80047d0:	4622      	mov	r2, r4
 80047d2:	4629      	mov	r1, r5
 80047d4:	4638      	mov	r0, r7
 80047d6:	f7ff ff6d 	bl	80046b4 <__ssputs_r>
 80047da:	3001      	adds	r0, #1
 80047dc:	f000 80aa 	beq.w	8004934 <_svfiprintf_r+0x1c8>
 80047e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047e2:	445a      	add	r2, fp
 80047e4:	9209      	str	r2, [sp, #36]	; 0x24
 80047e6:	f89a 3000 	ldrb.w	r3, [sl]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 80a2 	beq.w	8004934 <_svfiprintf_r+0x1c8>
 80047f0:	2300      	movs	r3, #0
 80047f2:	f04f 32ff 	mov.w	r2, #4294967295
 80047f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047fa:	f10a 0a01 	add.w	sl, sl, #1
 80047fe:	9304      	str	r3, [sp, #16]
 8004800:	9307      	str	r3, [sp, #28]
 8004802:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004806:	931a      	str	r3, [sp, #104]	; 0x68
 8004808:	4654      	mov	r4, sl
 800480a:	2205      	movs	r2, #5
 800480c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004810:	4851      	ldr	r0, [pc, #324]	; (8004958 <_svfiprintf_r+0x1ec>)
 8004812:	f7fb fce5 	bl	80001e0 <memchr>
 8004816:	9a04      	ldr	r2, [sp, #16]
 8004818:	b9d8      	cbnz	r0, 8004852 <_svfiprintf_r+0xe6>
 800481a:	06d0      	lsls	r0, r2, #27
 800481c:	bf44      	itt	mi
 800481e:	2320      	movmi	r3, #32
 8004820:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004824:	0711      	lsls	r1, r2, #28
 8004826:	bf44      	itt	mi
 8004828:	232b      	movmi	r3, #43	; 0x2b
 800482a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800482e:	f89a 3000 	ldrb.w	r3, [sl]
 8004832:	2b2a      	cmp	r3, #42	; 0x2a
 8004834:	d015      	beq.n	8004862 <_svfiprintf_r+0xf6>
 8004836:	9a07      	ldr	r2, [sp, #28]
 8004838:	4654      	mov	r4, sl
 800483a:	2000      	movs	r0, #0
 800483c:	f04f 0c0a 	mov.w	ip, #10
 8004840:	4621      	mov	r1, r4
 8004842:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004846:	3b30      	subs	r3, #48	; 0x30
 8004848:	2b09      	cmp	r3, #9
 800484a:	d94e      	bls.n	80048ea <_svfiprintf_r+0x17e>
 800484c:	b1b0      	cbz	r0, 800487c <_svfiprintf_r+0x110>
 800484e:	9207      	str	r2, [sp, #28]
 8004850:	e014      	b.n	800487c <_svfiprintf_r+0x110>
 8004852:	eba0 0308 	sub.w	r3, r0, r8
 8004856:	fa09 f303 	lsl.w	r3, r9, r3
 800485a:	4313      	orrs	r3, r2
 800485c:	9304      	str	r3, [sp, #16]
 800485e:	46a2      	mov	sl, r4
 8004860:	e7d2      	b.n	8004808 <_svfiprintf_r+0x9c>
 8004862:	9b03      	ldr	r3, [sp, #12]
 8004864:	1d19      	adds	r1, r3, #4
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	9103      	str	r1, [sp, #12]
 800486a:	2b00      	cmp	r3, #0
 800486c:	bfbb      	ittet	lt
 800486e:	425b      	neglt	r3, r3
 8004870:	f042 0202 	orrlt.w	r2, r2, #2
 8004874:	9307      	strge	r3, [sp, #28]
 8004876:	9307      	strlt	r3, [sp, #28]
 8004878:	bfb8      	it	lt
 800487a:	9204      	strlt	r2, [sp, #16]
 800487c:	7823      	ldrb	r3, [r4, #0]
 800487e:	2b2e      	cmp	r3, #46	; 0x2e
 8004880:	d10c      	bne.n	800489c <_svfiprintf_r+0x130>
 8004882:	7863      	ldrb	r3, [r4, #1]
 8004884:	2b2a      	cmp	r3, #42	; 0x2a
 8004886:	d135      	bne.n	80048f4 <_svfiprintf_r+0x188>
 8004888:	9b03      	ldr	r3, [sp, #12]
 800488a:	1d1a      	adds	r2, r3, #4
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	9203      	str	r2, [sp, #12]
 8004890:	2b00      	cmp	r3, #0
 8004892:	bfb8      	it	lt
 8004894:	f04f 33ff 	movlt.w	r3, #4294967295
 8004898:	3402      	adds	r4, #2
 800489a:	9305      	str	r3, [sp, #20]
 800489c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004968 <_svfiprintf_r+0x1fc>
 80048a0:	7821      	ldrb	r1, [r4, #0]
 80048a2:	2203      	movs	r2, #3
 80048a4:	4650      	mov	r0, sl
 80048a6:	f7fb fc9b 	bl	80001e0 <memchr>
 80048aa:	b140      	cbz	r0, 80048be <_svfiprintf_r+0x152>
 80048ac:	2340      	movs	r3, #64	; 0x40
 80048ae:	eba0 000a 	sub.w	r0, r0, sl
 80048b2:	fa03 f000 	lsl.w	r0, r3, r0
 80048b6:	9b04      	ldr	r3, [sp, #16]
 80048b8:	4303      	orrs	r3, r0
 80048ba:	3401      	adds	r4, #1
 80048bc:	9304      	str	r3, [sp, #16]
 80048be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048c2:	4826      	ldr	r0, [pc, #152]	; (800495c <_svfiprintf_r+0x1f0>)
 80048c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048c8:	2206      	movs	r2, #6
 80048ca:	f7fb fc89 	bl	80001e0 <memchr>
 80048ce:	2800      	cmp	r0, #0
 80048d0:	d038      	beq.n	8004944 <_svfiprintf_r+0x1d8>
 80048d2:	4b23      	ldr	r3, [pc, #140]	; (8004960 <_svfiprintf_r+0x1f4>)
 80048d4:	bb1b      	cbnz	r3, 800491e <_svfiprintf_r+0x1b2>
 80048d6:	9b03      	ldr	r3, [sp, #12]
 80048d8:	3307      	adds	r3, #7
 80048da:	f023 0307 	bic.w	r3, r3, #7
 80048de:	3308      	adds	r3, #8
 80048e0:	9303      	str	r3, [sp, #12]
 80048e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048e4:	4433      	add	r3, r6
 80048e6:	9309      	str	r3, [sp, #36]	; 0x24
 80048e8:	e767      	b.n	80047ba <_svfiprintf_r+0x4e>
 80048ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80048ee:	460c      	mov	r4, r1
 80048f0:	2001      	movs	r0, #1
 80048f2:	e7a5      	b.n	8004840 <_svfiprintf_r+0xd4>
 80048f4:	2300      	movs	r3, #0
 80048f6:	3401      	adds	r4, #1
 80048f8:	9305      	str	r3, [sp, #20]
 80048fa:	4619      	mov	r1, r3
 80048fc:	f04f 0c0a 	mov.w	ip, #10
 8004900:	4620      	mov	r0, r4
 8004902:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004906:	3a30      	subs	r2, #48	; 0x30
 8004908:	2a09      	cmp	r2, #9
 800490a:	d903      	bls.n	8004914 <_svfiprintf_r+0x1a8>
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0c5      	beq.n	800489c <_svfiprintf_r+0x130>
 8004910:	9105      	str	r1, [sp, #20]
 8004912:	e7c3      	b.n	800489c <_svfiprintf_r+0x130>
 8004914:	fb0c 2101 	mla	r1, ip, r1, r2
 8004918:	4604      	mov	r4, r0
 800491a:	2301      	movs	r3, #1
 800491c:	e7f0      	b.n	8004900 <_svfiprintf_r+0x194>
 800491e:	ab03      	add	r3, sp, #12
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	462a      	mov	r2, r5
 8004924:	4b0f      	ldr	r3, [pc, #60]	; (8004964 <_svfiprintf_r+0x1f8>)
 8004926:	a904      	add	r1, sp, #16
 8004928:	4638      	mov	r0, r7
 800492a:	f3af 8000 	nop.w
 800492e:	1c42      	adds	r2, r0, #1
 8004930:	4606      	mov	r6, r0
 8004932:	d1d6      	bne.n	80048e2 <_svfiprintf_r+0x176>
 8004934:	89ab      	ldrh	r3, [r5, #12]
 8004936:	065b      	lsls	r3, r3, #25
 8004938:	f53f af2c 	bmi.w	8004794 <_svfiprintf_r+0x28>
 800493c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800493e:	b01d      	add	sp, #116	; 0x74
 8004940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004944:	ab03      	add	r3, sp, #12
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	462a      	mov	r2, r5
 800494a:	4b06      	ldr	r3, [pc, #24]	; (8004964 <_svfiprintf_r+0x1f8>)
 800494c:	a904      	add	r1, sp, #16
 800494e:	4638      	mov	r0, r7
 8004950:	f000 f87a 	bl	8004a48 <_printf_i>
 8004954:	e7eb      	b.n	800492e <_svfiprintf_r+0x1c2>
 8004956:	bf00      	nop
 8004958:	0800515c 	.word	0x0800515c
 800495c:	08005166 	.word	0x08005166
 8004960:	00000000 	.word	0x00000000
 8004964:	080046b5 	.word	0x080046b5
 8004968:	08005162 	.word	0x08005162

0800496c <_printf_common>:
 800496c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004970:	4616      	mov	r6, r2
 8004972:	4699      	mov	r9, r3
 8004974:	688a      	ldr	r2, [r1, #8]
 8004976:	690b      	ldr	r3, [r1, #16]
 8004978:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800497c:	4293      	cmp	r3, r2
 800497e:	bfb8      	it	lt
 8004980:	4613      	movlt	r3, r2
 8004982:	6033      	str	r3, [r6, #0]
 8004984:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004988:	4607      	mov	r7, r0
 800498a:	460c      	mov	r4, r1
 800498c:	b10a      	cbz	r2, 8004992 <_printf_common+0x26>
 800498e:	3301      	adds	r3, #1
 8004990:	6033      	str	r3, [r6, #0]
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	0699      	lsls	r1, r3, #26
 8004996:	bf42      	ittt	mi
 8004998:	6833      	ldrmi	r3, [r6, #0]
 800499a:	3302      	addmi	r3, #2
 800499c:	6033      	strmi	r3, [r6, #0]
 800499e:	6825      	ldr	r5, [r4, #0]
 80049a0:	f015 0506 	ands.w	r5, r5, #6
 80049a4:	d106      	bne.n	80049b4 <_printf_common+0x48>
 80049a6:	f104 0a19 	add.w	sl, r4, #25
 80049aa:	68e3      	ldr	r3, [r4, #12]
 80049ac:	6832      	ldr	r2, [r6, #0]
 80049ae:	1a9b      	subs	r3, r3, r2
 80049b0:	42ab      	cmp	r3, r5
 80049b2:	dc26      	bgt.n	8004a02 <_printf_common+0x96>
 80049b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049b8:	1e13      	subs	r3, r2, #0
 80049ba:	6822      	ldr	r2, [r4, #0]
 80049bc:	bf18      	it	ne
 80049be:	2301      	movne	r3, #1
 80049c0:	0692      	lsls	r2, r2, #26
 80049c2:	d42b      	bmi.n	8004a1c <_printf_common+0xb0>
 80049c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049c8:	4649      	mov	r1, r9
 80049ca:	4638      	mov	r0, r7
 80049cc:	47c0      	blx	r8
 80049ce:	3001      	adds	r0, #1
 80049d0:	d01e      	beq.n	8004a10 <_printf_common+0xa4>
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	68e5      	ldr	r5, [r4, #12]
 80049d6:	6832      	ldr	r2, [r6, #0]
 80049d8:	f003 0306 	and.w	r3, r3, #6
 80049dc:	2b04      	cmp	r3, #4
 80049de:	bf08      	it	eq
 80049e0:	1aad      	subeq	r5, r5, r2
 80049e2:	68a3      	ldr	r3, [r4, #8]
 80049e4:	6922      	ldr	r2, [r4, #16]
 80049e6:	bf0c      	ite	eq
 80049e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049ec:	2500      	movne	r5, #0
 80049ee:	4293      	cmp	r3, r2
 80049f0:	bfc4      	itt	gt
 80049f2:	1a9b      	subgt	r3, r3, r2
 80049f4:	18ed      	addgt	r5, r5, r3
 80049f6:	2600      	movs	r6, #0
 80049f8:	341a      	adds	r4, #26
 80049fa:	42b5      	cmp	r5, r6
 80049fc:	d11a      	bne.n	8004a34 <_printf_common+0xc8>
 80049fe:	2000      	movs	r0, #0
 8004a00:	e008      	b.n	8004a14 <_printf_common+0xa8>
 8004a02:	2301      	movs	r3, #1
 8004a04:	4652      	mov	r2, sl
 8004a06:	4649      	mov	r1, r9
 8004a08:	4638      	mov	r0, r7
 8004a0a:	47c0      	blx	r8
 8004a0c:	3001      	adds	r0, #1
 8004a0e:	d103      	bne.n	8004a18 <_printf_common+0xac>
 8004a10:	f04f 30ff 	mov.w	r0, #4294967295
 8004a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a18:	3501      	adds	r5, #1
 8004a1a:	e7c6      	b.n	80049aa <_printf_common+0x3e>
 8004a1c:	18e1      	adds	r1, r4, r3
 8004a1e:	1c5a      	adds	r2, r3, #1
 8004a20:	2030      	movs	r0, #48	; 0x30
 8004a22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a26:	4422      	add	r2, r4
 8004a28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a30:	3302      	adds	r3, #2
 8004a32:	e7c7      	b.n	80049c4 <_printf_common+0x58>
 8004a34:	2301      	movs	r3, #1
 8004a36:	4622      	mov	r2, r4
 8004a38:	4649      	mov	r1, r9
 8004a3a:	4638      	mov	r0, r7
 8004a3c:	47c0      	blx	r8
 8004a3e:	3001      	adds	r0, #1
 8004a40:	d0e6      	beq.n	8004a10 <_printf_common+0xa4>
 8004a42:	3601      	adds	r6, #1
 8004a44:	e7d9      	b.n	80049fa <_printf_common+0x8e>
	...

08004a48 <_printf_i>:
 8004a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a4c:	7e0f      	ldrb	r7, [r1, #24]
 8004a4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a50:	2f78      	cmp	r7, #120	; 0x78
 8004a52:	4691      	mov	r9, r2
 8004a54:	4680      	mov	r8, r0
 8004a56:	460c      	mov	r4, r1
 8004a58:	469a      	mov	sl, r3
 8004a5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a5e:	d807      	bhi.n	8004a70 <_printf_i+0x28>
 8004a60:	2f62      	cmp	r7, #98	; 0x62
 8004a62:	d80a      	bhi.n	8004a7a <_printf_i+0x32>
 8004a64:	2f00      	cmp	r7, #0
 8004a66:	f000 80d8 	beq.w	8004c1a <_printf_i+0x1d2>
 8004a6a:	2f58      	cmp	r7, #88	; 0x58
 8004a6c:	f000 80a3 	beq.w	8004bb6 <_printf_i+0x16e>
 8004a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a78:	e03a      	b.n	8004af0 <_printf_i+0xa8>
 8004a7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a7e:	2b15      	cmp	r3, #21
 8004a80:	d8f6      	bhi.n	8004a70 <_printf_i+0x28>
 8004a82:	a101      	add	r1, pc, #4	; (adr r1, 8004a88 <_printf_i+0x40>)
 8004a84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a88:	08004ae1 	.word	0x08004ae1
 8004a8c:	08004af5 	.word	0x08004af5
 8004a90:	08004a71 	.word	0x08004a71
 8004a94:	08004a71 	.word	0x08004a71
 8004a98:	08004a71 	.word	0x08004a71
 8004a9c:	08004a71 	.word	0x08004a71
 8004aa0:	08004af5 	.word	0x08004af5
 8004aa4:	08004a71 	.word	0x08004a71
 8004aa8:	08004a71 	.word	0x08004a71
 8004aac:	08004a71 	.word	0x08004a71
 8004ab0:	08004a71 	.word	0x08004a71
 8004ab4:	08004c01 	.word	0x08004c01
 8004ab8:	08004b25 	.word	0x08004b25
 8004abc:	08004be3 	.word	0x08004be3
 8004ac0:	08004a71 	.word	0x08004a71
 8004ac4:	08004a71 	.word	0x08004a71
 8004ac8:	08004c23 	.word	0x08004c23
 8004acc:	08004a71 	.word	0x08004a71
 8004ad0:	08004b25 	.word	0x08004b25
 8004ad4:	08004a71 	.word	0x08004a71
 8004ad8:	08004a71 	.word	0x08004a71
 8004adc:	08004beb 	.word	0x08004beb
 8004ae0:	682b      	ldr	r3, [r5, #0]
 8004ae2:	1d1a      	adds	r2, r3, #4
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	602a      	str	r2, [r5, #0]
 8004ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004aec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004af0:	2301      	movs	r3, #1
 8004af2:	e0a3      	b.n	8004c3c <_printf_i+0x1f4>
 8004af4:	6820      	ldr	r0, [r4, #0]
 8004af6:	6829      	ldr	r1, [r5, #0]
 8004af8:	0606      	lsls	r6, r0, #24
 8004afa:	f101 0304 	add.w	r3, r1, #4
 8004afe:	d50a      	bpl.n	8004b16 <_printf_i+0xce>
 8004b00:	680e      	ldr	r6, [r1, #0]
 8004b02:	602b      	str	r3, [r5, #0]
 8004b04:	2e00      	cmp	r6, #0
 8004b06:	da03      	bge.n	8004b10 <_printf_i+0xc8>
 8004b08:	232d      	movs	r3, #45	; 0x2d
 8004b0a:	4276      	negs	r6, r6
 8004b0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b10:	485e      	ldr	r0, [pc, #376]	; (8004c8c <_printf_i+0x244>)
 8004b12:	230a      	movs	r3, #10
 8004b14:	e019      	b.n	8004b4a <_printf_i+0x102>
 8004b16:	680e      	ldr	r6, [r1, #0]
 8004b18:	602b      	str	r3, [r5, #0]
 8004b1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b1e:	bf18      	it	ne
 8004b20:	b236      	sxthne	r6, r6
 8004b22:	e7ef      	b.n	8004b04 <_printf_i+0xbc>
 8004b24:	682b      	ldr	r3, [r5, #0]
 8004b26:	6820      	ldr	r0, [r4, #0]
 8004b28:	1d19      	adds	r1, r3, #4
 8004b2a:	6029      	str	r1, [r5, #0]
 8004b2c:	0601      	lsls	r1, r0, #24
 8004b2e:	d501      	bpl.n	8004b34 <_printf_i+0xec>
 8004b30:	681e      	ldr	r6, [r3, #0]
 8004b32:	e002      	b.n	8004b3a <_printf_i+0xf2>
 8004b34:	0646      	lsls	r6, r0, #25
 8004b36:	d5fb      	bpl.n	8004b30 <_printf_i+0xe8>
 8004b38:	881e      	ldrh	r6, [r3, #0]
 8004b3a:	4854      	ldr	r0, [pc, #336]	; (8004c8c <_printf_i+0x244>)
 8004b3c:	2f6f      	cmp	r7, #111	; 0x6f
 8004b3e:	bf0c      	ite	eq
 8004b40:	2308      	moveq	r3, #8
 8004b42:	230a      	movne	r3, #10
 8004b44:	2100      	movs	r1, #0
 8004b46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b4a:	6865      	ldr	r5, [r4, #4]
 8004b4c:	60a5      	str	r5, [r4, #8]
 8004b4e:	2d00      	cmp	r5, #0
 8004b50:	bfa2      	ittt	ge
 8004b52:	6821      	ldrge	r1, [r4, #0]
 8004b54:	f021 0104 	bicge.w	r1, r1, #4
 8004b58:	6021      	strge	r1, [r4, #0]
 8004b5a:	b90e      	cbnz	r6, 8004b60 <_printf_i+0x118>
 8004b5c:	2d00      	cmp	r5, #0
 8004b5e:	d04d      	beq.n	8004bfc <_printf_i+0x1b4>
 8004b60:	4615      	mov	r5, r2
 8004b62:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b66:	fb03 6711 	mls	r7, r3, r1, r6
 8004b6a:	5dc7      	ldrb	r7, [r0, r7]
 8004b6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b70:	4637      	mov	r7, r6
 8004b72:	42bb      	cmp	r3, r7
 8004b74:	460e      	mov	r6, r1
 8004b76:	d9f4      	bls.n	8004b62 <_printf_i+0x11a>
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d10b      	bne.n	8004b94 <_printf_i+0x14c>
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	07de      	lsls	r6, r3, #31
 8004b80:	d508      	bpl.n	8004b94 <_printf_i+0x14c>
 8004b82:	6923      	ldr	r3, [r4, #16]
 8004b84:	6861      	ldr	r1, [r4, #4]
 8004b86:	4299      	cmp	r1, r3
 8004b88:	bfde      	ittt	le
 8004b8a:	2330      	movle	r3, #48	; 0x30
 8004b8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b94:	1b52      	subs	r2, r2, r5
 8004b96:	6122      	str	r2, [r4, #16]
 8004b98:	f8cd a000 	str.w	sl, [sp]
 8004b9c:	464b      	mov	r3, r9
 8004b9e:	aa03      	add	r2, sp, #12
 8004ba0:	4621      	mov	r1, r4
 8004ba2:	4640      	mov	r0, r8
 8004ba4:	f7ff fee2 	bl	800496c <_printf_common>
 8004ba8:	3001      	adds	r0, #1
 8004baa:	d14c      	bne.n	8004c46 <_printf_i+0x1fe>
 8004bac:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb0:	b004      	add	sp, #16
 8004bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb6:	4835      	ldr	r0, [pc, #212]	; (8004c8c <_printf_i+0x244>)
 8004bb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004bbc:	6829      	ldr	r1, [r5, #0]
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004bc4:	6029      	str	r1, [r5, #0]
 8004bc6:	061d      	lsls	r5, r3, #24
 8004bc8:	d514      	bpl.n	8004bf4 <_printf_i+0x1ac>
 8004bca:	07df      	lsls	r7, r3, #31
 8004bcc:	bf44      	itt	mi
 8004bce:	f043 0320 	orrmi.w	r3, r3, #32
 8004bd2:	6023      	strmi	r3, [r4, #0]
 8004bd4:	b91e      	cbnz	r6, 8004bde <_printf_i+0x196>
 8004bd6:	6823      	ldr	r3, [r4, #0]
 8004bd8:	f023 0320 	bic.w	r3, r3, #32
 8004bdc:	6023      	str	r3, [r4, #0]
 8004bde:	2310      	movs	r3, #16
 8004be0:	e7b0      	b.n	8004b44 <_printf_i+0xfc>
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	f043 0320 	orr.w	r3, r3, #32
 8004be8:	6023      	str	r3, [r4, #0]
 8004bea:	2378      	movs	r3, #120	; 0x78
 8004bec:	4828      	ldr	r0, [pc, #160]	; (8004c90 <_printf_i+0x248>)
 8004bee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bf2:	e7e3      	b.n	8004bbc <_printf_i+0x174>
 8004bf4:	0659      	lsls	r1, r3, #25
 8004bf6:	bf48      	it	mi
 8004bf8:	b2b6      	uxthmi	r6, r6
 8004bfa:	e7e6      	b.n	8004bca <_printf_i+0x182>
 8004bfc:	4615      	mov	r5, r2
 8004bfe:	e7bb      	b.n	8004b78 <_printf_i+0x130>
 8004c00:	682b      	ldr	r3, [r5, #0]
 8004c02:	6826      	ldr	r6, [r4, #0]
 8004c04:	6961      	ldr	r1, [r4, #20]
 8004c06:	1d18      	adds	r0, r3, #4
 8004c08:	6028      	str	r0, [r5, #0]
 8004c0a:	0635      	lsls	r5, r6, #24
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	d501      	bpl.n	8004c14 <_printf_i+0x1cc>
 8004c10:	6019      	str	r1, [r3, #0]
 8004c12:	e002      	b.n	8004c1a <_printf_i+0x1d2>
 8004c14:	0670      	lsls	r0, r6, #25
 8004c16:	d5fb      	bpl.n	8004c10 <_printf_i+0x1c8>
 8004c18:	8019      	strh	r1, [r3, #0]
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	6123      	str	r3, [r4, #16]
 8004c1e:	4615      	mov	r5, r2
 8004c20:	e7ba      	b.n	8004b98 <_printf_i+0x150>
 8004c22:	682b      	ldr	r3, [r5, #0]
 8004c24:	1d1a      	adds	r2, r3, #4
 8004c26:	602a      	str	r2, [r5, #0]
 8004c28:	681d      	ldr	r5, [r3, #0]
 8004c2a:	6862      	ldr	r2, [r4, #4]
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	4628      	mov	r0, r5
 8004c30:	f7fb fad6 	bl	80001e0 <memchr>
 8004c34:	b108      	cbz	r0, 8004c3a <_printf_i+0x1f2>
 8004c36:	1b40      	subs	r0, r0, r5
 8004c38:	6060      	str	r0, [r4, #4]
 8004c3a:	6863      	ldr	r3, [r4, #4]
 8004c3c:	6123      	str	r3, [r4, #16]
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c44:	e7a8      	b.n	8004b98 <_printf_i+0x150>
 8004c46:	6923      	ldr	r3, [r4, #16]
 8004c48:	462a      	mov	r2, r5
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	4640      	mov	r0, r8
 8004c4e:	47d0      	blx	sl
 8004c50:	3001      	adds	r0, #1
 8004c52:	d0ab      	beq.n	8004bac <_printf_i+0x164>
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	079b      	lsls	r3, r3, #30
 8004c58:	d413      	bmi.n	8004c82 <_printf_i+0x23a>
 8004c5a:	68e0      	ldr	r0, [r4, #12]
 8004c5c:	9b03      	ldr	r3, [sp, #12]
 8004c5e:	4298      	cmp	r0, r3
 8004c60:	bfb8      	it	lt
 8004c62:	4618      	movlt	r0, r3
 8004c64:	e7a4      	b.n	8004bb0 <_printf_i+0x168>
 8004c66:	2301      	movs	r3, #1
 8004c68:	4632      	mov	r2, r6
 8004c6a:	4649      	mov	r1, r9
 8004c6c:	4640      	mov	r0, r8
 8004c6e:	47d0      	blx	sl
 8004c70:	3001      	adds	r0, #1
 8004c72:	d09b      	beq.n	8004bac <_printf_i+0x164>
 8004c74:	3501      	adds	r5, #1
 8004c76:	68e3      	ldr	r3, [r4, #12]
 8004c78:	9903      	ldr	r1, [sp, #12]
 8004c7a:	1a5b      	subs	r3, r3, r1
 8004c7c:	42ab      	cmp	r3, r5
 8004c7e:	dcf2      	bgt.n	8004c66 <_printf_i+0x21e>
 8004c80:	e7eb      	b.n	8004c5a <_printf_i+0x212>
 8004c82:	2500      	movs	r5, #0
 8004c84:	f104 0619 	add.w	r6, r4, #25
 8004c88:	e7f5      	b.n	8004c76 <_printf_i+0x22e>
 8004c8a:	bf00      	nop
 8004c8c:	0800516d 	.word	0x0800516d
 8004c90:	0800517e 	.word	0x0800517e

08004c94 <memcpy>:
 8004c94:	440a      	add	r2, r1
 8004c96:	4291      	cmp	r1, r2
 8004c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c9c:	d100      	bne.n	8004ca0 <memcpy+0xc>
 8004c9e:	4770      	bx	lr
 8004ca0:	b510      	push	{r4, lr}
 8004ca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ca6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004caa:	4291      	cmp	r1, r2
 8004cac:	d1f9      	bne.n	8004ca2 <memcpy+0xe>
 8004cae:	bd10      	pop	{r4, pc}

08004cb0 <memmove>:
 8004cb0:	4288      	cmp	r0, r1
 8004cb2:	b510      	push	{r4, lr}
 8004cb4:	eb01 0402 	add.w	r4, r1, r2
 8004cb8:	d902      	bls.n	8004cc0 <memmove+0x10>
 8004cba:	4284      	cmp	r4, r0
 8004cbc:	4623      	mov	r3, r4
 8004cbe:	d807      	bhi.n	8004cd0 <memmove+0x20>
 8004cc0:	1e43      	subs	r3, r0, #1
 8004cc2:	42a1      	cmp	r1, r4
 8004cc4:	d008      	beq.n	8004cd8 <memmove+0x28>
 8004cc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cce:	e7f8      	b.n	8004cc2 <memmove+0x12>
 8004cd0:	4402      	add	r2, r0
 8004cd2:	4601      	mov	r1, r0
 8004cd4:	428a      	cmp	r2, r1
 8004cd6:	d100      	bne.n	8004cda <memmove+0x2a>
 8004cd8:	bd10      	pop	{r4, pc}
 8004cda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ce2:	e7f7      	b.n	8004cd4 <memmove+0x24>

08004ce4 <_free_r>:
 8004ce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ce6:	2900      	cmp	r1, #0
 8004ce8:	d044      	beq.n	8004d74 <_free_r+0x90>
 8004cea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cee:	9001      	str	r0, [sp, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f1a1 0404 	sub.w	r4, r1, #4
 8004cf6:	bfb8      	it	lt
 8004cf8:	18e4      	addlt	r4, r4, r3
 8004cfa:	f000 f913 	bl	8004f24 <__malloc_lock>
 8004cfe:	4a1e      	ldr	r2, [pc, #120]	; (8004d78 <_free_r+0x94>)
 8004d00:	9801      	ldr	r0, [sp, #4]
 8004d02:	6813      	ldr	r3, [r2, #0]
 8004d04:	b933      	cbnz	r3, 8004d14 <_free_r+0x30>
 8004d06:	6063      	str	r3, [r4, #4]
 8004d08:	6014      	str	r4, [r2, #0]
 8004d0a:	b003      	add	sp, #12
 8004d0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d10:	f000 b90e 	b.w	8004f30 <__malloc_unlock>
 8004d14:	42a3      	cmp	r3, r4
 8004d16:	d908      	bls.n	8004d2a <_free_r+0x46>
 8004d18:	6825      	ldr	r5, [r4, #0]
 8004d1a:	1961      	adds	r1, r4, r5
 8004d1c:	428b      	cmp	r3, r1
 8004d1e:	bf01      	itttt	eq
 8004d20:	6819      	ldreq	r1, [r3, #0]
 8004d22:	685b      	ldreq	r3, [r3, #4]
 8004d24:	1949      	addeq	r1, r1, r5
 8004d26:	6021      	streq	r1, [r4, #0]
 8004d28:	e7ed      	b.n	8004d06 <_free_r+0x22>
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	b10b      	cbz	r3, 8004d34 <_free_r+0x50>
 8004d30:	42a3      	cmp	r3, r4
 8004d32:	d9fa      	bls.n	8004d2a <_free_r+0x46>
 8004d34:	6811      	ldr	r1, [r2, #0]
 8004d36:	1855      	adds	r5, r2, r1
 8004d38:	42a5      	cmp	r5, r4
 8004d3a:	d10b      	bne.n	8004d54 <_free_r+0x70>
 8004d3c:	6824      	ldr	r4, [r4, #0]
 8004d3e:	4421      	add	r1, r4
 8004d40:	1854      	adds	r4, r2, r1
 8004d42:	42a3      	cmp	r3, r4
 8004d44:	6011      	str	r1, [r2, #0]
 8004d46:	d1e0      	bne.n	8004d0a <_free_r+0x26>
 8004d48:	681c      	ldr	r4, [r3, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	6053      	str	r3, [r2, #4]
 8004d4e:	4421      	add	r1, r4
 8004d50:	6011      	str	r1, [r2, #0]
 8004d52:	e7da      	b.n	8004d0a <_free_r+0x26>
 8004d54:	d902      	bls.n	8004d5c <_free_r+0x78>
 8004d56:	230c      	movs	r3, #12
 8004d58:	6003      	str	r3, [r0, #0]
 8004d5a:	e7d6      	b.n	8004d0a <_free_r+0x26>
 8004d5c:	6825      	ldr	r5, [r4, #0]
 8004d5e:	1961      	adds	r1, r4, r5
 8004d60:	428b      	cmp	r3, r1
 8004d62:	bf04      	itt	eq
 8004d64:	6819      	ldreq	r1, [r3, #0]
 8004d66:	685b      	ldreq	r3, [r3, #4]
 8004d68:	6063      	str	r3, [r4, #4]
 8004d6a:	bf04      	itt	eq
 8004d6c:	1949      	addeq	r1, r1, r5
 8004d6e:	6021      	streq	r1, [r4, #0]
 8004d70:	6054      	str	r4, [r2, #4]
 8004d72:	e7ca      	b.n	8004d0a <_free_r+0x26>
 8004d74:	b003      	add	sp, #12
 8004d76:	bd30      	pop	{r4, r5, pc}
 8004d78:	20004704 	.word	0x20004704

08004d7c <sbrk_aligned>:
 8004d7c:	b570      	push	{r4, r5, r6, lr}
 8004d7e:	4e0e      	ldr	r6, [pc, #56]	; (8004db8 <sbrk_aligned+0x3c>)
 8004d80:	460c      	mov	r4, r1
 8004d82:	6831      	ldr	r1, [r6, #0]
 8004d84:	4605      	mov	r5, r0
 8004d86:	b911      	cbnz	r1, 8004d8e <sbrk_aligned+0x12>
 8004d88:	f000 f8bc 	bl	8004f04 <_sbrk_r>
 8004d8c:	6030      	str	r0, [r6, #0]
 8004d8e:	4621      	mov	r1, r4
 8004d90:	4628      	mov	r0, r5
 8004d92:	f000 f8b7 	bl	8004f04 <_sbrk_r>
 8004d96:	1c43      	adds	r3, r0, #1
 8004d98:	d00a      	beq.n	8004db0 <sbrk_aligned+0x34>
 8004d9a:	1cc4      	adds	r4, r0, #3
 8004d9c:	f024 0403 	bic.w	r4, r4, #3
 8004da0:	42a0      	cmp	r0, r4
 8004da2:	d007      	beq.n	8004db4 <sbrk_aligned+0x38>
 8004da4:	1a21      	subs	r1, r4, r0
 8004da6:	4628      	mov	r0, r5
 8004da8:	f000 f8ac 	bl	8004f04 <_sbrk_r>
 8004dac:	3001      	adds	r0, #1
 8004dae:	d101      	bne.n	8004db4 <sbrk_aligned+0x38>
 8004db0:	f04f 34ff 	mov.w	r4, #4294967295
 8004db4:	4620      	mov	r0, r4
 8004db6:	bd70      	pop	{r4, r5, r6, pc}
 8004db8:	20004708 	.word	0x20004708

08004dbc <_malloc_r>:
 8004dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dc0:	1ccd      	adds	r5, r1, #3
 8004dc2:	f025 0503 	bic.w	r5, r5, #3
 8004dc6:	3508      	adds	r5, #8
 8004dc8:	2d0c      	cmp	r5, #12
 8004dca:	bf38      	it	cc
 8004dcc:	250c      	movcc	r5, #12
 8004dce:	2d00      	cmp	r5, #0
 8004dd0:	4607      	mov	r7, r0
 8004dd2:	db01      	blt.n	8004dd8 <_malloc_r+0x1c>
 8004dd4:	42a9      	cmp	r1, r5
 8004dd6:	d905      	bls.n	8004de4 <_malloc_r+0x28>
 8004dd8:	230c      	movs	r3, #12
 8004dda:	603b      	str	r3, [r7, #0]
 8004ddc:	2600      	movs	r6, #0
 8004dde:	4630      	mov	r0, r6
 8004de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004de4:	4e2e      	ldr	r6, [pc, #184]	; (8004ea0 <_malloc_r+0xe4>)
 8004de6:	f000 f89d 	bl	8004f24 <__malloc_lock>
 8004dea:	6833      	ldr	r3, [r6, #0]
 8004dec:	461c      	mov	r4, r3
 8004dee:	bb34      	cbnz	r4, 8004e3e <_malloc_r+0x82>
 8004df0:	4629      	mov	r1, r5
 8004df2:	4638      	mov	r0, r7
 8004df4:	f7ff ffc2 	bl	8004d7c <sbrk_aligned>
 8004df8:	1c43      	adds	r3, r0, #1
 8004dfa:	4604      	mov	r4, r0
 8004dfc:	d14d      	bne.n	8004e9a <_malloc_r+0xde>
 8004dfe:	6834      	ldr	r4, [r6, #0]
 8004e00:	4626      	mov	r6, r4
 8004e02:	2e00      	cmp	r6, #0
 8004e04:	d140      	bne.n	8004e88 <_malloc_r+0xcc>
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	4631      	mov	r1, r6
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	eb04 0803 	add.w	r8, r4, r3
 8004e10:	f000 f878 	bl	8004f04 <_sbrk_r>
 8004e14:	4580      	cmp	r8, r0
 8004e16:	d13a      	bne.n	8004e8e <_malloc_r+0xd2>
 8004e18:	6821      	ldr	r1, [r4, #0]
 8004e1a:	3503      	adds	r5, #3
 8004e1c:	1a6d      	subs	r5, r5, r1
 8004e1e:	f025 0503 	bic.w	r5, r5, #3
 8004e22:	3508      	adds	r5, #8
 8004e24:	2d0c      	cmp	r5, #12
 8004e26:	bf38      	it	cc
 8004e28:	250c      	movcc	r5, #12
 8004e2a:	4629      	mov	r1, r5
 8004e2c:	4638      	mov	r0, r7
 8004e2e:	f7ff ffa5 	bl	8004d7c <sbrk_aligned>
 8004e32:	3001      	adds	r0, #1
 8004e34:	d02b      	beq.n	8004e8e <_malloc_r+0xd2>
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	442b      	add	r3, r5
 8004e3a:	6023      	str	r3, [r4, #0]
 8004e3c:	e00e      	b.n	8004e5c <_malloc_r+0xa0>
 8004e3e:	6822      	ldr	r2, [r4, #0]
 8004e40:	1b52      	subs	r2, r2, r5
 8004e42:	d41e      	bmi.n	8004e82 <_malloc_r+0xc6>
 8004e44:	2a0b      	cmp	r2, #11
 8004e46:	d916      	bls.n	8004e76 <_malloc_r+0xba>
 8004e48:	1961      	adds	r1, r4, r5
 8004e4a:	42a3      	cmp	r3, r4
 8004e4c:	6025      	str	r5, [r4, #0]
 8004e4e:	bf18      	it	ne
 8004e50:	6059      	strne	r1, [r3, #4]
 8004e52:	6863      	ldr	r3, [r4, #4]
 8004e54:	bf08      	it	eq
 8004e56:	6031      	streq	r1, [r6, #0]
 8004e58:	5162      	str	r2, [r4, r5]
 8004e5a:	604b      	str	r3, [r1, #4]
 8004e5c:	4638      	mov	r0, r7
 8004e5e:	f104 060b 	add.w	r6, r4, #11
 8004e62:	f000 f865 	bl	8004f30 <__malloc_unlock>
 8004e66:	f026 0607 	bic.w	r6, r6, #7
 8004e6a:	1d23      	adds	r3, r4, #4
 8004e6c:	1af2      	subs	r2, r6, r3
 8004e6e:	d0b6      	beq.n	8004dde <_malloc_r+0x22>
 8004e70:	1b9b      	subs	r3, r3, r6
 8004e72:	50a3      	str	r3, [r4, r2]
 8004e74:	e7b3      	b.n	8004dde <_malloc_r+0x22>
 8004e76:	6862      	ldr	r2, [r4, #4]
 8004e78:	42a3      	cmp	r3, r4
 8004e7a:	bf0c      	ite	eq
 8004e7c:	6032      	streq	r2, [r6, #0]
 8004e7e:	605a      	strne	r2, [r3, #4]
 8004e80:	e7ec      	b.n	8004e5c <_malloc_r+0xa0>
 8004e82:	4623      	mov	r3, r4
 8004e84:	6864      	ldr	r4, [r4, #4]
 8004e86:	e7b2      	b.n	8004dee <_malloc_r+0x32>
 8004e88:	4634      	mov	r4, r6
 8004e8a:	6876      	ldr	r6, [r6, #4]
 8004e8c:	e7b9      	b.n	8004e02 <_malloc_r+0x46>
 8004e8e:	230c      	movs	r3, #12
 8004e90:	603b      	str	r3, [r7, #0]
 8004e92:	4638      	mov	r0, r7
 8004e94:	f000 f84c 	bl	8004f30 <__malloc_unlock>
 8004e98:	e7a1      	b.n	8004dde <_malloc_r+0x22>
 8004e9a:	6025      	str	r5, [r4, #0]
 8004e9c:	e7de      	b.n	8004e5c <_malloc_r+0xa0>
 8004e9e:	bf00      	nop
 8004ea0:	20004704 	.word	0x20004704

08004ea4 <_realloc_r>:
 8004ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea8:	4680      	mov	r8, r0
 8004eaa:	4614      	mov	r4, r2
 8004eac:	460e      	mov	r6, r1
 8004eae:	b921      	cbnz	r1, 8004eba <_realloc_r+0x16>
 8004eb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb4:	4611      	mov	r1, r2
 8004eb6:	f7ff bf81 	b.w	8004dbc <_malloc_r>
 8004eba:	b92a      	cbnz	r2, 8004ec8 <_realloc_r+0x24>
 8004ebc:	f7ff ff12 	bl	8004ce4 <_free_r>
 8004ec0:	4625      	mov	r5, r4
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ec8:	f000 f838 	bl	8004f3c <_malloc_usable_size_r>
 8004ecc:	4284      	cmp	r4, r0
 8004ece:	4607      	mov	r7, r0
 8004ed0:	d802      	bhi.n	8004ed8 <_realloc_r+0x34>
 8004ed2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ed6:	d812      	bhi.n	8004efe <_realloc_r+0x5a>
 8004ed8:	4621      	mov	r1, r4
 8004eda:	4640      	mov	r0, r8
 8004edc:	f7ff ff6e 	bl	8004dbc <_malloc_r>
 8004ee0:	4605      	mov	r5, r0
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	d0ed      	beq.n	8004ec2 <_realloc_r+0x1e>
 8004ee6:	42bc      	cmp	r4, r7
 8004ee8:	4622      	mov	r2, r4
 8004eea:	4631      	mov	r1, r6
 8004eec:	bf28      	it	cs
 8004eee:	463a      	movcs	r2, r7
 8004ef0:	f7ff fed0 	bl	8004c94 <memcpy>
 8004ef4:	4631      	mov	r1, r6
 8004ef6:	4640      	mov	r0, r8
 8004ef8:	f7ff fef4 	bl	8004ce4 <_free_r>
 8004efc:	e7e1      	b.n	8004ec2 <_realloc_r+0x1e>
 8004efe:	4635      	mov	r5, r6
 8004f00:	e7df      	b.n	8004ec2 <_realloc_r+0x1e>
	...

08004f04 <_sbrk_r>:
 8004f04:	b538      	push	{r3, r4, r5, lr}
 8004f06:	4d06      	ldr	r5, [pc, #24]	; (8004f20 <_sbrk_r+0x1c>)
 8004f08:	2300      	movs	r3, #0
 8004f0a:	4604      	mov	r4, r0
 8004f0c:	4608      	mov	r0, r1
 8004f0e:	602b      	str	r3, [r5, #0]
 8004f10:	f7fc f9c2 	bl	8001298 <_sbrk>
 8004f14:	1c43      	adds	r3, r0, #1
 8004f16:	d102      	bne.n	8004f1e <_sbrk_r+0x1a>
 8004f18:	682b      	ldr	r3, [r5, #0]
 8004f1a:	b103      	cbz	r3, 8004f1e <_sbrk_r+0x1a>
 8004f1c:	6023      	str	r3, [r4, #0]
 8004f1e:	bd38      	pop	{r3, r4, r5, pc}
 8004f20:	2000470c 	.word	0x2000470c

08004f24 <__malloc_lock>:
 8004f24:	4801      	ldr	r0, [pc, #4]	; (8004f2c <__malloc_lock+0x8>)
 8004f26:	f000 b811 	b.w	8004f4c <__retarget_lock_acquire_recursive>
 8004f2a:	bf00      	nop
 8004f2c:	20004710 	.word	0x20004710

08004f30 <__malloc_unlock>:
 8004f30:	4801      	ldr	r0, [pc, #4]	; (8004f38 <__malloc_unlock+0x8>)
 8004f32:	f000 b80c 	b.w	8004f4e <__retarget_lock_release_recursive>
 8004f36:	bf00      	nop
 8004f38:	20004710 	.word	0x20004710

08004f3c <_malloc_usable_size_r>:
 8004f3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f40:	1f18      	subs	r0, r3, #4
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	bfbc      	itt	lt
 8004f46:	580b      	ldrlt	r3, [r1, r0]
 8004f48:	18c0      	addlt	r0, r0, r3
 8004f4a:	4770      	bx	lr

08004f4c <__retarget_lock_acquire_recursive>:
 8004f4c:	4770      	bx	lr

08004f4e <__retarget_lock_release_recursive>:
 8004f4e:	4770      	bx	lr

08004f50 <_init>:
 8004f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f52:	bf00      	nop
 8004f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f56:	bc08      	pop	{r3}
 8004f58:	469e      	mov	lr, r3
 8004f5a:	4770      	bx	lr

08004f5c <_fini>:
 8004f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5e:	bf00      	nop
 8004f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f62:	bc08      	pop	{r3}
 8004f64:	469e      	mov	lr, r3
 8004f66:	4770      	bx	lr
