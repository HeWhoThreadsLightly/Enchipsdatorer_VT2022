
vgaGraphics2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b18  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001338  08004cb8  08004cb8  00014cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ff0  08005ff0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005ff0  08005ff0  00015ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ff8  08005ff8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ff8  08005ff8  00015ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ffc  08005ffc  00015ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000056c  20000070  08006070  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  08006070  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f639  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000228e  00000000  00000000  0002f6d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00031968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00016521  00000000  00000000  000326d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000fc72  00000000  00000000  00048bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008e858  00000000  00000000  0005886b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000e70c3  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000cc8  00000000  00000000  000e7118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003bec  00000000  00000000  000e7de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ca0 	.word	0x08004ca0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004ca0 	.word	0x08004ca0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <renderChar>:
	ret.value = R << 8 | G << 4 | B;
	return ret;
}


void renderChar(char c, int h, int v, const Color background, const Color forground, const Sprite_map * font){
 8000584:	b480      	push	{r7}
 8000586:	b08b      	sub	sp, #44	; 0x2c
 8000588:	af00      	add	r7, sp, #0
 800058a:	60b9      	str	r1, [r7, #8]
 800058c:	607a      	str	r2, [r7, #4]
 800058e:	81bb      	strh	r3, [r7, #12]
 8000590:	4603      	mov	r3, r0
 8000592:	73fb      	strb	r3, [r7, #15]
	if(h < -font->sprite_hori || h >= horiRes
 8000594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	425b      	negs	r3, r3
 800059a:	68ba      	ldr	r2, [r7, #8]
 800059c:	429a      	cmp	r2, r3
 800059e:	f2c0 8089 	blt.w	80006b4 <renderChar+0x130>
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	2b9f      	cmp	r3, #159	; 0x9f
 80005a6:	f300 8085 	bgt.w	80006b4 <renderChar+0x130>
		|| v < -font->sprite_vert || v >= vertRes) return;//sprite is outside visible area
 80005aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005ac:	785b      	ldrb	r3, [r3, #1]
 80005ae:	425b      	negs	r3, r3
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	db7e      	blt.n	80006b4 <renderChar+0x130>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2b63      	cmp	r3, #99	; 0x63
 80005ba:	dc7b      	bgt.n	80006b4 <renderChar+0x130>

	const uint8_t * data = font->data;
 80005bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005be:	3304      	adds	r3, #4
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t bitBuffer;
	uint8_t bitsRemaining;
	{
		uint32_t bitOffset = c * font->sprite_hori * font->sprite_vert + font->sprite_hori - 1;// 8 + 2
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80005c6:	7812      	ldrb	r2, [r2, #0]
 80005c8:	fb02 f303 	mul.w	r3, r2, r3
 80005cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80005ce:	7852      	ldrb	r2, [r2, #1]
 80005d0:	fb02 f303 	mul.w	r3, r2, r3
 80005d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80005d6:	7812      	ldrb	r2, [r2, #0]
 80005d8:	4413      	add	r3, r2
 80005da:	3b01      	subs	r3, #1
 80005dc:	617b      	str	r3, [r7, #20]
		data += bitOffset / 8; // 0b10xx
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	08db      	lsrs	r3, r3, #3
 80005e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005e4:	4413      	add	r3, r2
 80005e6:	627b      	str	r3, [r7, #36]	; 0x24
		bitsRemaining = 8 - bitOffset % 8;
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	f003 0307 	and.w	r3, r3, #7
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	f1c3 0308 	rsb	r3, r3, #8
 80005f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		bitBuffer = *data >> (8 - bitsRemaining + 1);
 80005fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	461a      	mov	r2, r3
 8000600:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000604:	f1c3 0309 	rsb	r3, r3, #9
 8000608:	fa42 f303 	asr.w	r3, r2, r3
 800060c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	for(int vpx = 0; vpx <  font->sprite_vert; vpx++){
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]
 8000614:	e047      	b.n	80006a6 <renderChar+0x122>
		for(int hpx = 0; hpx <  font->sprite_hori; hpx++){
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	e03b      	b.n	8000694 <renderChar+0x110>
			if(bitsRemaining == 0){//out of pixel data load more
 800061c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000620:	2b00      	cmp	r3, #0
 8000622:	d109      	bne.n	8000638 <renderChar+0xb4>
				bitBuffer = *data;
 8000624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				data++;
 800062c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800062e:	3301      	adds	r3, #1
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
				bitsRemaining = 8;
 8000632:	2308      	movs	r3, #8
 8000634:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			}
			if(		!(v + vpx < 0 || v + vpx >= vertRes) &&//row is outside screen
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	4413      	add	r3, r2
 800063e:	2b00      	cmp	r3, #0
 8000640:	db1b      	blt.n	800067a <renderChar+0xf6>
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	69fb      	ldr	r3, [r7, #28]
 8000646:	4413      	add	r3, r2
 8000648:	2b63      	cmp	r3, #99	; 0x63
 800064a:	dc16      	bgt.n	800067a <renderChar+0xf6>
					!(h + hpx < 0 || h + hpx >= horiRes)){ //pixel is outside screen
 800064c:	68ba      	ldr	r2, [r7, #8]
 800064e:	69bb      	ldr	r3, [r7, #24]
 8000650:	4413      	add	r3, r2
			if(		!(v + vpx < 0 || v + vpx >= vertRes) &&//row is outside screen
 8000652:	2b00      	cmp	r3, #0
 8000654:	db11      	blt.n	800067a <renderChar+0xf6>
					!(h + hpx < 0 || h + hpx >= horiRes)){ //pixel is outside screen
 8000656:	68ba      	ldr	r2, [r7, #8]
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	4413      	add	r3, r2
 800065c:	2b9f      	cmp	r3, #159	; 0x9f
 800065e:	dc0c      	bgt.n	800067a <renderChar+0xf6>
				uint32_t pos = (v + vpx) * horiRes + h + hpx;
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	441a      	add	r2, r3
 8000666:	4613      	mov	r3, r2
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	4413      	add	r3, r2
 800066c:	015b      	lsls	r3, r3, #5
 800066e:	461a      	mov	r2, r3
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	441a      	add	r2, r3
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	4413      	add	r3, r2
 8000678:	613b      	str	r3, [r7, #16]
				//todo beam raise characters
				//screenBuff[pos] = combineColors(screenBuff[pos], bitBuffer&1 ? forground : background);
			}
			bitsRemaining--;
 800067a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800067e:	3b01      	subs	r3, #1
 8000680:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			bitBuffer >>= 1;
 8000684:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000688:	085b      	lsrs	r3, r3, #1
 800068a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		for(int hpx = 0; hpx <  font->sprite_hori; hpx++){
 800068e:	69bb      	ldr	r3, [r7, #24]
 8000690:	3301      	adds	r3, #1
 8000692:	61bb      	str	r3, [r7, #24]
 8000694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	461a      	mov	r2, r3
 800069a:	69bb      	ldr	r3, [r7, #24]
 800069c:	4293      	cmp	r3, r2
 800069e:	dbbd      	blt.n	800061c <renderChar+0x98>
	for(int vpx = 0; vpx <  font->sprite_vert; vpx++){
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	3301      	adds	r3, #1
 80006a4:	61fb      	str	r3, [r7, #28]
 80006a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006a8:	785b      	ldrb	r3, [r3, #1]
 80006aa:	461a      	mov	r2, r3
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	4293      	cmp	r3, r2
 80006b0:	dbb1      	blt.n	8000616 <renderChar+0x92>
 80006b2:	e000      	b.n	80006b6 <renderChar+0x132>
		|| v < -font->sprite_vert || v >= vertRes) return;//sprite is outside visible area
 80006b4:	bf00      	nop
		}
	}
}
 80006b6:	372c      	adds	r7, #44	; 0x2c
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <renderString>:

void renderString(char * str, int h, int v, const Color background, const Color forground, const Sprite_map * font){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af02      	add	r7, sp, #8
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
 80006cc:	803b      	strh	r3, [r7, #0]
	while(*str != 0){
 80006ce:	e014      	b.n	80006fa <renderString+0x3a>
		renderChar(*str, h, v, background, forground, font);
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	7818      	ldrb	r0, [r3, #0]
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	9301      	str	r3, [sp, #4]
 80006d8:	8b3b      	ldrh	r3, [r7, #24]
 80006da:	f8ad 3000 	strh.w	r3, [sp]
 80006de:	883b      	ldrh	r3, [r7, #0]
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	68b9      	ldr	r1, [r7, #8]
 80006e4:	f7ff ff4e 	bl	8000584 <renderChar>
		h += font->sprite_hori;
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	4413      	add	r3, r2
 80006f2:	60bb      	str	r3, [r7, #8]
		str++;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	3301      	adds	r3, #1
 80006f8:	60fb      	str	r3, [r7, #12]
	while(*str != 0){
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d1e6      	bne.n	80006d0 <renderString+0x10>
	}
}
 8000702:	bf00      	nop
 8000704:	bf00      	nop
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <HAL_TIM_PeriodElapsedCallback>:
	HAL_UART_Transmit(&huart2, (uint8_t*) str, sizeof(str), HAL_MAX_DELAY);
}

int lastLine = -100;
uint32_t profileCount = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	if(htim == &htim5){
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d116      	bne.n	800074a <HAL_TIM_PeriodElapsedCallback+0x3e>
		str_len = sprintf(str, "Profile %8lu ticks clock\t line %i\r\n", profileCount, lineCount);
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b0e      	ldr	r3, [pc, #56]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	490e      	ldr	r1, [pc, #56]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000726:	480f      	ldr	r0, [pc, #60]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000728:	f003 fe4c 	bl	80043c4 <siprintf>
 800072c:	4603      	mov	r3, r0
 800072e:	b29a      	uxth	r2, r3
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000732:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000736:	881a      	ldrh	r2, [r3, #0]
 8000738:	f04f 33ff 	mov.w	r3, #4294967295
 800073c:	4909      	ldr	r1, [pc, #36]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800073e:	480b      	ldr	r0, [pc, #44]	; (800076c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000740:	f003 fa99 	bl	8003c76 <HAL_UART_Transmit>
		profileCount = 0;
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
	}
	return;
 800074a:	bf00      	nop
	if(htim == &htim5){
		timerReset();
	}else if(htim == &htim1){
		timerReset();
	}
}
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200000d4 	.word	0x200000d4
 8000758:	20000274 	.word	0x20000274
 800075c:	200005b0 	.word	0x200005b0
 8000760:	08004cc8 	.word	0x08004cc8
 8000764:	20000220 	.word	0x20000220
 8000768:	20000272 	.word	0x20000272
 800076c:	2000017c 	.word	0x2000017c

08000770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b09c      	sub	sp, #112	; 0x70
 8000774:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000776:	f000 fedd 	bl	8001534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077a:	f000 f911 	bl	80009a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077e:	f000 fae9 	bl	8000d54 <MX_GPIO_Init>
  MX_DMA_Init();
 8000782:	f000 fa8f 	bl	8000ca4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000786:	f000 fa63 	bl	8000c50 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 800078a:	f000 fa13 	bl	8000bb4 <MX_TIM5_Init>
  MX_TIM1_Init();
 800078e:	f000 f971 	bl	8000a74 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	char str[81] = { '\0' };
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	224d      	movs	r2, #77	; 0x4d
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f003 fe08 	bl	80043b4 <memset>
	uint16_t str_len = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	str_len = sprintf(str, "Starting up!\r\n");
 80007aa:	f107 0308 	add.w	r3, r7, #8
 80007ae:	496e      	ldr	r1, [pc, #440]	; (8000968 <main+0x1f8>)
 80007b0:	4618      	mov	r0, r3
 80007b2:	f003 fe07 	bl	80043c4 <siprintf>
 80007b6:	4603      	mov	r3, r0
 80007b8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80007bc:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80007c0:	f107 0108 	add.w	r1, r7, #8
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295
 80007c8:	4868      	ldr	r0, [pc, #416]	; (800096c <main+0x1fc>)
 80007ca:	f003 fa54 	bl	8003c76 <HAL_UART_Transmit>

	vgaSetup(&htim1, &hdma_tim1_up, &hdma_memtomem_dma2_stream0, vgaPin13_Vsync_GPIO_Port, vgaPin13_Vsync_Pin);
 80007ce:	2302      	movs	r3, #2
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	4b67      	ldr	r3, [pc, #412]	; (8000970 <main+0x200>)
 80007d4:	4a67      	ldr	r2, [pc, #412]	; (8000974 <main+0x204>)
 80007d6:	4968      	ldr	r1, [pc, #416]	; (8000978 <main+0x208>)
 80007d8:	4868      	ldr	r0, [pc, #416]	; (800097c <main+0x20c>)
 80007da:	f000 fda7 	bl	800132c <vgaSetup>
	registerHUARTvga(&huart2);
 80007de:	4863      	ldr	r0, [pc, #396]	; (800096c <main+0x1fc>)
 80007e0:	f000 fcfe 	bl	80011e0 <registerHUARTvga>

	vgaStart();//start VGA driver
 80007e4:	f000 fe3c 	bl	8001460 <vgaStart>
	HAL_Delay(500);//delay rendering for monitor sync
 80007e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ec:	f000 ff14 	bl	8001618 <HAL_Delay>

	Color textColor = ColorBlack;
 80007f0:	4b63      	ldr	r3, [pc, #396]	; (8000980 <main+0x210>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	80bb      	strh	r3, [r7, #4]
	int y = 10;
 80007f6:	230a      	movs	r3, #10
 80007f8:	663b      	str	r3, [r7, #96]	; 0x60
	int x = 10;
 80007fa:	230a      	movs	r3, #10
 80007fc:	65fb      	str	r3, [r7, #92]	; 0x5c
	y+=codepage_437.sprite_vert;
 80007fe:	4b61      	ldr	r3, [pc, #388]	; (8000984 <main+0x214>)
 8000800:	785b      	ldrb	r3, [r3, #1]
 8000802:	461a      	mov	r2, r3
 8000804:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000806:	4413      	add	r3, r2
 8000808:	663b      	str	r3, [r7, #96]	; 0x60
	//renderString(str, h, v, background, forground)
	renderString("Hi", x, y, ColorTransparant, textColor, &codepage_437);
 800080a:	4a5f      	ldr	r2, [pc, #380]	; (8000988 <main+0x218>)
 800080c:	4b5d      	ldr	r3, [pc, #372]	; (8000984 <main+0x214>)
 800080e:	9301      	str	r3, [sp, #4]
 8000810:	88bb      	ldrh	r3, [r7, #4]
 8000812:	f8ad 3000 	strh.w	r3, [sp]
 8000816:	8813      	ldrh	r3, [r2, #0]
 8000818:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800081a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800081c:	485b      	ldr	r0, [pc, #364]	; (800098c <main+0x21c>)
 800081e:	f7ff ff4f 	bl	80006c0 <renderString>

	y+=codepage_437.sprite_vert;
 8000822:	4b58      	ldr	r3, [pc, #352]	; (8000984 <main+0x214>)
 8000824:	785b      	ldrb	r3, [r3, #1]
 8000826:	461a      	mov	r2, r3
 8000828:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800082a:	4413      	add	r3, r2
 800082c:	663b      	str	r3, [r7, #96]	; 0x60
	renderString("Hello world!", x, y, ColorTransparant, textColor, &codepage_437);
 800082e:	4a56      	ldr	r2, [pc, #344]	; (8000988 <main+0x218>)
 8000830:	4b54      	ldr	r3, [pc, #336]	; (8000984 <main+0x214>)
 8000832:	9301      	str	r3, [sp, #4]
 8000834:	88bb      	ldrh	r3, [r7, #4]
 8000836:	f8ad 3000 	strh.w	r3, [sp]
 800083a:	8813      	ldrh	r3, [r2, #0]
 800083c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800083e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000840:	4853      	ldr	r0, [pc, #332]	; (8000990 <main+0x220>)
 8000842:	f7ff ff3d 	bl	80006c0 <renderString>
	y+=codepage_437.sprite_vert;
 8000846:	4b4f      	ldr	r3, [pc, #316]	; (8000984 <main+0x214>)
 8000848:	785b      	ldrb	r3, [r3, #1]
 800084a:	461a      	mov	r2, r3
 800084c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800084e:	4413      	add	r3, r2
 8000850:	663b      	str	r3, [r7, #96]	; 0x60
	renderString("Press <any> key for TTY", x, y, ColorTransparant, textColor, &codepage_437);
 8000852:	4a4d      	ldr	r2, [pc, #308]	; (8000988 <main+0x218>)
 8000854:	4b4b      	ldr	r3, [pc, #300]	; (8000984 <main+0x214>)
 8000856:	9301      	str	r3, [sp, #4]
 8000858:	88bb      	ldrh	r3, [r7, #4]
 800085a:	f8ad 3000 	strh.w	r3, [sp]
 800085e:	8813      	ldrh	r3, [r2, #0]
 8000860:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000862:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000864:	484b      	ldr	r0, [pc, #300]	; (8000994 <main+0x224>)
 8000866:	f7ff ff2b 	bl	80006c0 <renderString>
	y+=codepage_437.sprite_vert;
 800086a:	4b46      	ldr	r3, [pc, #280]	; (8000984 <main+0x214>)
 800086c:	785b      	ldrb	r3, [r3, #1]
 800086e:	461a      	mov	r2, r3
 8000870:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000872:	4413      	add	r3, r2
 8000874:	663b      	str	r3, [r7, #96]	; 0x60
	renderChar(177, x, y, ColorTransparant, textColor, &codepage_437);
 8000876:	4a44      	ldr	r2, [pc, #272]	; (8000988 <main+0x218>)
 8000878:	4b42      	ldr	r3, [pc, #264]	; (8000984 <main+0x214>)
 800087a:	9301      	str	r3, [sp, #4]
 800087c:	88bb      	ldrh	r3, [r7, #4]
 800087e:	f8ad 3000 	strh.w	r3, [sp]
 8000882:	8813      	ldrh	r3, [r2, #0]
 8000884:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000886:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000888:	20b1      	movs	r0, #177	; 0xb1
 800088a:	f7ff fe7b 	bl	8000584 <renderChar>

	y+=codepage_437.sprite_vert;//test patterns
 800088e:	4b3d      	ldr	r3, [pc, #244]	; (8000984 <main+0x214>)
 8000890:	785b      	ldrb	r3, [r3, #1]
 8000892:	461a      	mov	r2, r3
 8000894:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000896:	4413      	add	r3, r2
 8000898:	663b      	str	r3, [r7, #96]	; 0x60
	renderChar(201, x, y, ColorTransparant, textColor, &codepage_437);
 800089a:	4a3b      	ldr	r2, [pc, #236]	; (8000988 <main+0x218>)
 800089c:	4b39      	ldr	r3, [pc, #228]	; (8000984 <main+0x214>)
 800089e:	9301      	str	r3, [sp, #4]
 80008a0:	88bb      	ldrh	r3, [r7, #4]
 80008a2:	f8ad 3000 	strh.w	r3, [sp]
 80008a6:	8813      	ldrh	r3, [r2, #0]
 80008a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80008aa:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80008ac:	20c9      	movs	r0, #201	; 0xc9
 80008ae:	f7ff fe69 	bl	8000584 <renderChar>
	renderChar(187, x + codepage_437.sprite_hori, y, ColorTransparant, textColor, &codepage_437);
 80008b2:	4b34      	ldr	r3, [pc, #208]	; (8000984 <main+0x214>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	461a      	mov	r2, r3
 80008b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008ba:	18d1      	adds	r1, r2, r3
 80008bc:	4a32      	ldr	r2, [pc, #200]	; (8000988 <main+0x218>)
 80008be:	4b31      	ldr	r3, [pc, #196]	; (8000984 <main+0x214>)
 80008c0:	9301      	str	r3, [sp, #4]
 80008c2:	88bb      	ldrh	r3, [r7, #4]
 80008c4:	f8ad 3000 	strh.w	r3, [sp]
 80008c8:	8813      	ldrh	r3, [r2, #0]
 80008ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80008cc:	20bb      	movs	r0, #187	; 0xbb
 80008ce:	f7ff fe59 	bl	8000584 <renderChar>
	renderChar(186, x + 2*codepage_437.sprite_hori, y, ColorTransparant, textColor, &codepage_437);
 80008d2:	4b2c      	ldr	r3, [pc, #176]	; (8000984 <main+0x214>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	005a      	lsls	r2, r3, #1
 80008d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008da:	18d1      	adds	r1, r2, r3
 80008dc:	4a2a      	ldr	r2, [pc, #168]	; (8000988 <main+0x218>)
 80008de:	4b29      	ldr	r3, [pc, #164]	; (8000984 <main+0x214>)
 80008e0:	9301      	str	r3, [sp, #4]
 80008e2:	88bb      	ldrh	r3, [r7, #4]
 80008e4:	f8ad 3000 	strh.w	r3, [sp]
 80008e8:	8813      	ldrh	r3, [r2, #0]
 80008ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80008ec:	20ba      	movs	r0, #186	; 0xba
 80008ee:	f7ff fe49 	bl	8000584 <renderChar>
	y+=codepage_437.sprite_vert;
 80008f2:	4b24      	ldr	r3, [pc, #144]	; (8000984 <main+0x214>)
 80008f4:	785b      	ldrb	r3, [r3, #1]
 80008f6:	461a      	mov	r2, r3
 80008f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80008fa:	4413      	add	r3, r2
 80008fc:	663b      	str	r3, [r7, #96]	; 0x60
	renderChar(200, x, y, ColorTransparant, textColor, &codepage_437);
 80008fe:	4a22      	ldr	r2, [pc, #136]	; (8000988 <main+0x218>)
 8000900:	4b20      	ldr	r3, [pc, #128]	; (8000984 <main+0x214>)
 8000902:	9301      	str	r3, [sp, #4]
 8000904:	88bb      	ldrh	r3, [r7, #4]
 8000906:	f8ad 3000 	strh.w	r3, [sp]
 800090a:	8813      	ldrh	r3, [r2, #0]
 800090c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800090e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000910:	20c8      	movs	r0, #200	; 0xc8
 8000912:	f7ff fe37 	bl	8000584 <renderChar>
	renderChar(188, x + codepage_437.sprite_hori, y, ColorTransparant, textColor, &codepage_437);
 8000916:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <main+0x214>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	461a      	mov	r2, r3
 800091c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800091e:	18d1      	adds	r1, r2, r3
 8000920:	4a19      	ldr	r2, [pc, #100]	; (8000988 <main+0x218>)
 8000922:	4b18      	ldr	r3, [pc, #96]	; (8000984 <main+0x214>)
 8000924:	9301      	str	r3, [sp, #4]
 8000926:	88bb      	ldrh	r3, [r7, #4]
 8000928:	f8ad 3000 	strh.w	r3, [sp]
 800092c:	8813      	ldrh	r3, [r2, #0]
 800092e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000930:	20bc      	movs	r0, #188	; 0xbc
 8000932:	f7ff fe27 	bl	8000584 <renderChar>

	str_len = sprintf(str, "\r\nDone\r\n");
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	4917      	ldr	r1, [pc, #92]	; (8000998 <main+0x228>)
 800093c:	4618      	mov	r0, r3
 800093e:	f003 fd41 	bl	80043c4 <siprintf>
 8000942:	4603      	mov	r3, r0
 8000944:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8000948:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800094c:	f107 0108 	add.w	r1, r7, #8
 8000950:	f04f 33ff 	mov.w	r3, #4294967295
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <main+0x1fc>)
 8000956:	f003 f98e 	bl	8003c76 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
	//makeRainbow();
	//runTTY();
	while (1)
	{
		profileCount++;
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <main+0x22c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	3301      	adds	r3, #1
 8000960:	4a0e      	ldr	r2, [pc, #56]	; (800099c <main+0x22c>)
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	e7f9      	b.n	800095a <main+0x1ea>
 8000966:	bf00      	nop
 8000968:	08004d3c 	.word	0x08004d3c
 800096c:	2000017c 	.word	0x2000017c
 8000970:	40020000 	.word	0x40020000
 8000974:	200001c0 	.word	0x200001c0
 8000978:	2000011c 	.word	0x2000011c
 800097c:	2000008c 	.word	0x2000008c
 8000980:	08005f94 	.word	0x08005f94
 8000984:	08004d84 	.word	0x08004d84
 8000988:	08005f88 	.word	0x08005f88
 800098c:	08004d4c 	.word	0x08004d4c
 8000990:	08004d50 	.word	0x08004d50
 8000994:	08004d60 	.word	0x08004d60
 8000998:	08004d78 	.word	0x08004d78
 800099c:	20000274 	.word	0x20000274

080009a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b094      	sub	sp, #80	; 0x50
 80009a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a6:	f107 0320 	add.w	r3, r7, #32
 80009aa:	2230      	movs	r2, #48	; 0x30
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f003 fd00 	bl	80043b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c4:	2300      	movs	r3, #0
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	4b28      	ldr	r3, [pc, #160]	; (8000a6c <SystemClock_Config+0xcc>)
 80009ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009cc:	4a27      	ldr	r2, [pc, #156]	; (8000a6c <SystemClock_Config+0xcc>)
 80009ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d2:	6413      	str	r3, [r2, #64]	; 0x40
 80009d4:	4b25      	ldr	r3, [pc, #148]	; (8000a6c <SystemClock_Config+0xcc>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80009e0:	2300      	movs	r3, #0
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <SystemClock_Config+0xd0>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009ec:	4a20      	ldr	r2, [pc, #128]	; (8000a70 <SystemClock_Config+0xd0>)
 80009ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009f2:	6013      	str	r3, [r2, #0]
 80009f4:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <SystemClock_Config+0xd0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a00:	2302      	movs	r3, #2
 8000a02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a04:	2301      	movs	r3, #1
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a08:	2310      	movs	r3, #16
 8000a0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a10:	2300      	movs	r3, #0
 8000a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a14:	2308      	movs	r3, #8
 8000a16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 151;
 8000a18:	2397      	movs	r3, #151	; 0x97
 8000a1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a20:	2307      	movs	r3, #7
 8000a22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a24:	f107 0320 	add.w	r3, r7, #32
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f001 fc8d 	bl	8002348 <HAL_RCC_OscConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a34:	f000 fa20 	bl	8000e78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a38:	230f      	movs	r3, #15
 8000a3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a4e:	f107 030c 	add.w	r3, r7, #12
 8000a52:	2102      	movs	r1, #2
 8000a54:	4618      	mov	r0, r3
 8000a56:	f001 feef 	bl	8002838 <HAL_RCC_ClockConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a60:	f000 fa0a 	bl	8000e78 <Error_Handler>
  }
}
 8000a64:	bf00      	nop
 8000a66:	3750      	adds	r7, #80	; 0x50
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40007000 	.word	0x40007000

08000a74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b096      	sub	sp, #88	; 0x58
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]
 8000aa2:	615a      	str	r2, [r3, #20]
 8000aa4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2220      	movs	r2, #32
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f003 fc81 	bl	80043b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ab2:	4b3e      	ldr	r3, [pc, #248]	; (8000bac <MX_TIM1_Init+0x138>)
 8000ab4:	4a3e      	ldr	r2, [pc, #248]	; (8000bb0 <MX_TIM1_Init+0x13c>)
 8000ab6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = vgaUpscale-1;
 8000ab8:	4b3c      	ldr	r3, [pc, #240]	; (8000bac <MX_TIM1_Init+0x138>)
 8000aba:	2203      	movs	r2, #3
 8000abc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abe:	4b3b      	ldr	r3, [pc, #236]	; (8000bac <MX_TIM1_Init+0x138>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3-1;
 8000ac4:	4b39      	ldr	r3, [pc, #228]	; (8000bac <MX_TIM1_Init+0x138>)
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aca:	4b38      	ldr	r3, [pc, #224]	; (8000bac <MX_TIM1_Init+0x138>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ad0:	4b36      	ldr	r3, [pc, #216]	; (8000bac <MX_TIM1_Init+0x138>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ad6:	4b35      	ldr	r3, [pc, #212]	; (8000bac <MX_TIM1_Init+0x138>)
 8000ad8:	2280      	movs	r2, #128	; 0x80
 8000ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000adc:	4833      	ldr	r0, [pc, #204]	; (8000bac <MX_TIM1_Init+0x138>)
 8000ade:	f002 f8cb 	bl	8002c78 <HAL_TIM_Base_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000ae8:	f000 f9c6 	bl	8000e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000af2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000af6:	4619      	mov	r1, r3
 8000af8:	482c      	ldr	r0, [pc, #176]	; (8000bac <MX_TIM1_Init+0x138>)
 8000afa:	f002 fbdf 	bl	80032bc <HAL_TIM_ConfigClockSource>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000b04:	f000 f9b8 	bl	8000e78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b08:	4828      	ldr	r0, [pc, #160]	; (8000bac <MX_TIM1_Init+0x138>)
 8000b0a:	f002 f904 	bl	8002d16 <HAL_TIM_PWM_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000b14:	f000 f9b0 	bl	8000e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b24:	4619      	mov	r1, r3
 8000b26:	4821      	ldr	r0, [pc, #132]	; (8000bac <MX_TIM1_Init+0x138>)
 8000b28:	f002 ff84 	bl	8003a34 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000b32:	f000 f9a1 	bl	8000e78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b36:	2360      	movs	r3, #96	; 0x60
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b42:	2300      	movs	r3, #0
 8000b44:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b56:	2200      	movs	r2, #0
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4814      	ldr	r0, [pc, #80]	; (8000bac <MX_TIM1_Init+0x138>)
 8000b5c:	f002 faec 	bl	8003138 <HAL_TIM_PWM_ConfigChannel>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000b66:	f000 f987 	bl	8000e78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b82:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4807      	ldr	r0, [pc, #28]	; (8000bac <MX_TIM1_Init+0x138>)
 8000b8e:	f002 ffbf 	bl	8003b10 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000b98:	f000 f96e 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b9c:	4803      	ldr	r0, [pc, #12]	; (8000bac <MX_TIM1_Init+0x138>)
 8000b9e:	f000 fa17 	bl	8000fd0 <HAL_TIM_MspPostInit>

}
 8000ba2:	bf00      	nop
 8000ba4:	3758      	adds	r7, #88	; 0x58
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	2000008c 	.word	0x2000008c
 8000bb0:	40010000 	.word	0x40010000

08000bb4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bba:	f107 0308 	add.w	r3, r7, #8
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc8:	463b      	mov	r3, r7
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000bd0:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <MX_TIM5_Init+0x94>)
 8000bd2:	4a1e      	ldr	r2, [pc, #120]	; (8000c4c <MX_TIM5_Init+0x98>)
 8000bd4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 7550-1;
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <MX_TIM5_Init+0x94>)
 8000bd8:	f641 527d 	movw	r2, #7549	; 0x1d7d
 8000bdc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bde:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <MX_TIM5_Init+0x94>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 8000be4:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <MX_TIM5_Init+0x94>)
 8000be6:	f242 720f 	movw	r2, #9999	; 0x270f
 8000bea:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <MX_TIM5_Init+0x94>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <MX_TIM5_Init+0x94>)
 8000bf4:	2280      	movs	r2, #128	; 0x80
 8000bf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000bf8:	4813      	ldr	r0, [pc, #76]	; (8000c48 <MX_TIM5_Init+0x94>)
 8000bfa:	f002 f83d 	bl	8002c78 <HAL_TIM_Base_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000c04:	f000 f938 	bl	8000e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000c0e:	f107 0308 	add.w	r3, r7, #8
 8000c12:	4619      	mov	r1, r3
 8000c14:	480c      	ldr	r0, [pc, #48]	; (8000c48 <MX_TIM5_Init+0x94>)
 8000c16:	f002 fb51 	bl	80032bc <HAL_TIM_ConfigClockSource>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000c20:	f000 f92a 	bl	8000e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c24:	2300      	movs	r3, #0
 8000c26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_TIM5_Init+0x94>)
 8000c32:	f002 feff 	bl	8003a34 <HAL_TIMEx_MasterConfigSynchronization>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000c3c:	f000 f91c 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200000d4 	.word	0x200000d4
 8000c4c:	40000c00 	.word	0x40000c00

08000c50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <MX_USART2_UART_Init+0x4c>)
 8000c56:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <MX_USART2_UART_Init+0x50>)
 8000c58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <MX_USART2_UART_Init+0x4c>)
 8000c5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <MX_USART2_UART_Init+0x4c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <MX_USART2_UART_Init+0x4c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <MX_USART2_UART_Init+0x4c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <MX_USART2_UART_Init+0x4c>)
 8000c76:	220c      	movs	r2, #12
 8000c78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <MX_USART2_UART_Init+0x4c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <MX_USART2_UART_Init+0x4c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_USART2_UART_Init+0x4c>)
 8000c88:	f002 ffa8 	bl	8003bdc <HAL_UART_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c92:	f000 f8f1 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	2000017c 	.word	0x2000017c
 8000ca0:	40004400 	.word	0x40004400

08000ca4 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <MX_DMA_Init+0xa4>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a25      	ldr	r2, [pc, #148]	; (8000d48 <MX_DMA_Init+0xa4>)
 8000cb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <MX_DMA_Init+0xa4>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <MX_DMA_Init+0xa8>)
 8000cc8:	4a21      	ldr	r2, [pc, #132]	; (8000d50 <MX_DMA_Init+0xac>)
 8000cca:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <MX_DMA_Init+0xa8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000cd2:	4b1e      	ldr	r3, [pc, #120]	; (8000d4c <MX_DMA_Init+0xa8>)
 8000cd4:	2280      	movs	r2, #128	; 0x80
 8000cd6:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000cd8:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <MX_DMA_Init+0xa8>)
 8000cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cde:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <MX_DMA_Init+0xa8>)
 8000ce2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ce6:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ce8:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <MX_DMA_Init+0xa8>)
 8000cea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cee:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cf0:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <MX_DMA_Init+0xa8>)
 8000cf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cf6:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_DMA_Init+0xa8>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <MX_DMA_Init+0xa8>)
 8000d00:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d04:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <MX_DMA_Init+0xa8>)
 8000d08:	2204      	movs	r2, #4
 8000d0a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <MX_DMA_Init+0xa8>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <MX_DMA_Init+0xa8>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <MX_DMA_Init+0xa8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000d1e:	480b      	ldr	r0, [pc, #44]	; (8000d4c <MX_DMA_Init+0xa8>)
 8000d20:	f000 fdb0 	bl	8001884 <HAL_DMA_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_DMA_Init+0x8a>
  {
    Error_Handler( );
 8000d2a:	f000 f8a5 	bl	8000e78 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	2044      	movs	r0, #68	; 0x44
 8000d34:	f000 fd6f 	bl	8001816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000d38:	2044      	movs	r0, #68	; 0x44
 8000d3a:	f000 fd88 	bl	800184e <HAL_NVIC_EnableIRQ>

}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	200001c0 	.word	0x200001c0
 8000d50:	40026410 	.word	0x40026410

08000d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	4b3f      	ldr	r3, [pc, #252]	; (8000e6c <MX_GPIO_Init+0x118>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a3e      	ldr	r2, [pc, #248]	; (8000e6c <MX_GPIO_Init+0x118>)
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b3c      	ldr	r3, [pc, #240]	; (8000e6c <MX_GPIO_Init+0x118>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	4b38      	ldr	r3, [pc, #224]	; (8000e6c <MX_GPIO_Init+0x118>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a37      	ldr	r2, [pc, #220]	; (8000e6c <MX_GPIO_Init+0x118>)
 8000d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b35      	ldr	r3, [pc, #212]	; (8000e6c <MX_GPIO_Init+0x118>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	4b31      	ldr	r3, [pc, #196]	; (8000e6c <MX_GPIO_Init+0x118>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a30      	ldr	r2, [pc, #192]	; (8000e6c <MX_GPIO_Init+0x118>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b2e      	ldr	r3, [pc, #184]	; (8000e6c <MX_GPIO_Init+0x118>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <MX_GPIO_Init+0x118>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a29      	ldr	r2, [pc, #164]	; (8000e6c <MX_GPIO_Init+0x118>)
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <MX_GPIO_Init+0x118>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, vgaPin0_B0_Pin|vgaPin1_B1_Pin|vgaPin2_B2_Pin|vgaPin3_B3_Pin
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8000de0:	4823      	ldr	r0, [pc, #140]	; (8000e70 <MX_GPIO_Init+0x11c>)
 8000de2:	f001 fa97 	bl	8002314 <HAL_GPIO_WritePin>
                          |vgaPin4_G0_Pin|vgaPin5_G1_Pin|vgaPin6_G2_Pin|vgaPin7_G3_Pin
                          |vgaPin8_R0_Pin|vgaPin9_R1_Pin|vgaPin10_R2_Pin|vgaPin11_R3_Pin
                          |vgaPin12_Hsync_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, vgaPin13_Vsync_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2122      	movs	r1, #34	; 0x22
 8000dea:	4822      	ldr	r0, [pc, #136]	; (8000e74 <MX_GPIO_Init+0x120>)
 8000dec:	f001 fa92 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000df0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000df6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000dfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4619      	mov	r1, r3
 8000e06:	481a      	ldr	r0, [pc, #104]	; (8000e70 <MX_GPIO_Init+0x11c>)
 8000e08:	f001 f900 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : vgaPin0_B0_Pin vgaPin1_B1_Pin vgaPin2_B2_Pin vgaPin3_B3_Pin
                           vgaPin4_G0_Pin vgaPin5_G1_Pin vgaPin6_G2_Pin vgaPin7_G3_Pin
                           vgaPin8_R0_Pin vgaPin9_R1_Pin vgaPin10_R2_Pin vgaPin11_R3_Pin
                           vgaPin12_Hsync_Pin */
  GPIO_InitStruct.Pin = vgaPin0_B0_Pin|vgaPin1_B1_Pin|vgaPin2_B2_Pin|vgaPin3_B3_Pin
 8000e0c:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000e10:	617b      	str	r3, [r7, #20]
                          |vgaPin4_G0_Pin|vgaPin5_G1_Pin|vgaPin6_G2_Pin|vgaPin7_G3_Pin
                          |vgaPin8_R0_Pin|vgaPin9_R1_Pin|vgaPin10_R2_Pin|vgaPin11_R3_Pin
                          |vgaPin12_Hsync_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	4812      	ldr	r0, [pc, #72]	; (8000e70 <MX_GPIO_Init+0x11c>)
 8000e26:	f001 f8f1 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : vgaPin13_Vsync_Pin */
  GPIO_InitStruct.Pin = vgaPin13_Vsync_Pin;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e36:	2302      	movs	r3, #2
 8000e38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(vgaPin13_Vsync_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480c      	ldr	r0, [pc, #48]	; (8000e74 <MX_GPIO_Init+0x120>)
 8000e42:	f001 f8e3 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e46:	2320      	movs	r3, #32
 8000e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MX_GPIO_Init+0x120>)
 8000e5e:	f001 f8d5 	bl	800200c <HAL_GPIO_Init>

}
 8000e62:	bf00      	nop
 8000e64:	3728      	adds	r7, #40	; 0x28
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020800 	.word	0x40020800
 8000e74:	40020000 	.word	0x40020000

08000e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e7c:	b672      	cpsid	i
}
 8000e7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e80:	e7fe      	b.n	8000e80 <Error_Handler+0x8>
	...

08000e84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	4a0f      	ldr	r2, [pc, #60]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e98:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	4a08      	ldr	r2, [pc, #32]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ec2:	2007      	movs	r0, #7
 8000ec4:	f000 fc9c 	bl	8001800 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40023800 	.word	0x40023800

08000ed4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a36      	ldr	r2, [pc, #216]	; (8000fbc <HAL_TIM_Base_MspInit+0xe8>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d14a      	bne.n	8000f7c <HAL_TIM_Base_MspInit+0xa8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b35      	ldr	r3, [pc, #212]	; (8000fc0 <HAL_TIM_Base_MspInit+0xec>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	4a34      	ldr	r2, [pc, #208]	; (8000fc0 <HAL_TIM_Base_MspInit+0xec>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef6:	4b32      	ldr	r3, [pc, #200]	; (8000fc0 <HAL_TIM_Base_MspInit+0xec>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8000f02:	4b30      	ldr	r3, [pc, #192]	; (8000fc4 <HAL_TIM_Base_MspInit+0xf0>)
 8000f04:	4a30      	ldr	r2, [pc, #192]	; (8000fc8 <HAL_TIM_Base_MspInit+0xf4>)
 8000f06:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8000f08:	4b2e      	ldr	r3, [pc, #184]	; (8000fc4 <HAL_TIM_Base_MspInit+0xf0>)
 8000f0a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000f0e:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f10:	4b2c      	ldr	r3, [pc, #176]	; (8000fc4 <HAL_TIM_Base_MspInit+0xf0>)
 8000f12:	2240      	movs	r2, #64	; 0x40
 8000f14:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f16:	4b2b      	ldr	r3, [pc, #172]	; (8000fc4 <HAL_TIM_Base_MspInit+0xf0>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000f1c:	4b29      	ldr	r3, [pc, #164]	; (8000fc4 <HAL_TIM_Base_MspInit+0xf0>)
 8000f1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f22:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f24:	4b27      	ldr	r3, [pc, #156]	; (8000fc4 <HAL_TIM_Base_MspInit+0xf0>)
 8000f26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f2a:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f2c:	4b25      	ldr	r3, [pc, #148]	; (8000fc4 <HAL_TIM_Base_MspInit+0xf0>)
 8000f2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f32:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8000f34:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <HAL_TIM_Base_MspInit+0xf0>)
 8000f36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f3a:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f3c:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <HAL_TIM_Base_MspInit+0xf0>)
 8000f3e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f42:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f44:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <HAL_TIM_Base_MspInit+0xf0>)
 8000f46:	2204      	movs	r2, #4
 8000f48:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim1_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8000f4a:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <HAL_TIM_Base_MspInit+0xf0>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim1_up.Init.MemBurst = DMA_MBURST_INC4;
 8000f50:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <HAL_TIM_Base_MspInit+0xf0>)
 8000f52:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000f56:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim1_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000f58:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <HAL_TIM_Base_MspInit+0xf0>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000f5e:	4819      	ldr	r0, [pc, #100]	; (8000fc4 <HAL_TIM_Base_MspInit+0xf0>)
 8000f60:	f000 fc90 	bl	8001884 <HAL_DMA_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_TIM_Base_MspInit+0x9a>
    {
      Error_Handler();
 8000f6a:	f7ff ff85 	bl	8000e78 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a14      	ldr	r2, [pc, #80]	; (8000fc4 <HAL_TIM_Base_MspInit+0xf0>)
 8000f72:	621a      	str	r2, [r3, #32]
 8000f74:	4a13      	ldr	r2, [pc, #76]	; (8000fc4 <HAL_TIM_Base_MspInit+0xf0>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000f7a:	e01a      	b.n	8000fb2 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM5)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <HAL_TIM_Base_MspInit+0xf8>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d115      	bne.n	8000fb2 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <HAL_TIM_Base_MspInit+0xec>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a0c      	ldr	r2, [pc, #48]	; (8000fc0 <HAL_TIM_Base_MspInit+0xec>)
 8000f90:	f043 0308 	orr.w	r3, r3, #8
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <HAL_TIM_Base_MspInit+0xec>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f003 0308 	and.w	r3, r3, #8
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 1);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2032      	movs	r0, #50	; 0x32
 8000fa8:	f000 fc35 	bl	8001816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000fac:	2032      	movs	r0, #50	; 0x32
 8000fae:	f000 fc4e 	bl	800184e <HAL_NVIC_EnableIRQ>
}
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40010000 	.word	0x40010000
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	2000011c 	.word	0x2000011c
 8000fc8:	40026488 	.word	0x40026488
 8000fcc:	40000c00 	.word	0x40000c00

08000fd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a12      	ldr	r2, [pc, #72]	; (8001038 <HAL_TIM_MspPostInit+0x68>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d11e      	bne.n	8001030 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <HAL_TIM_MspPostInit+0x6c>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a10      	ldr	r2, [pc, #64]	; (800103c <HAL_TIM_MspPostInit+0x6c>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <HAL_TIM_MspPostInit+0x6c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800100e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001012:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001020:	2301      	movs	r3, #1
 8001022:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	4619      	mov	r1, r3
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <HAL_TIM_MspPostInit+0x70>)
 800102c:	f000 ffee 	bl	800200c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001030:	bf00      	nop
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40010000 	.word	0x40010000
 800103c:	40023800 	.word	0x40023800
 8001040:	40020000 	.word	0x40020000

08001044 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a19      	ldr	r2, [pc, #100]	; (80010c8 <HAL_UART_MspInit+0x84>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d12b      	bne.n	80010be <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	4b18      	ldr	r3, [pc, #96]	; (80010cc <HAL_UART_MspInit+0x88>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	4a17      	ldr	r2, [pc, #92]	; (80010cc <HAL_UART_MspInit+0x88>)
 8001070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001074:	6413      	str	r3, [r2, #64]	; 0x40
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <HAL_UART_MspInit+0x88>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <HAL_UART_MspInit+0x88>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a10      	ldr	r2, [pc, #64]	; (80010cc <HAL_UART_MspInit+0x88>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <HAL_UART_MspInit+0x88>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800109e:	230c      	movs	r3, #12
 80010a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ae:	2307      	movs	r3, #7
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	4805      	ldr	r0, [pc, #20]	; (80010d0 <HAL_UART_MspInit+0x8c>)
 80010ba:	f000 ffa7 	bl	800200c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010be:	bf00      	nop
 80010c0:	3728      	adds	r7, #40	; 0x28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40004400 	.word	0x40004400
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020000 	.word	0x40020000

080010d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <NMI_Handler+0x4>

080010da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <HardFault_Handler+0x4>

080010e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <MemManage_Handler+0x4>

080010e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <BusFault_Handler+0x4>

080010ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <UsageFault_Handler+0x4>

080010f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001120:	f000 fa5a 	bl	80015d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}

08001128 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <TIM5_IRQHandler+0x10>)
 800112e:	f001 fefb 	bl	8002f28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200000d4 	.word	0x200000d4

0800113c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <DMA2_Stream5_IRQHandler+0x10>)
 8001142:	f000 fca5 	bl	8001a90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	2000011c 	.word	0x2000011c

08001150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001158:	4a14      	ldr	r2, [pc, #80]	; (80011ac <_sbrk+0x5c>)
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <_sbrk+0x60>)
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <_sbrk+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d102      	bne.n	8001172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <_sbrk+0x64>)
 800116e:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <_sbrk+0x68>)
 8001170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	429a      	cmp	r2, r3
 800117e:	d207      	bcs.n	8001190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001180:	f003 f8ee 	bl	8004360 <__errno>
 8001184:	4603      	mov	r3, r0
 8001186:	220c      	movs	r2, #12
 8001188:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	e009      	b.n	80011a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <_sbrk+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <_sbrk+0x64>)
 80011a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011a2:	68fb      	ldr	r3, [r7, #12]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20018000 	.word	0x20018000
 80011b0:	00000400 	.word	0x00000400
 80011b4:	20000278 	.word	0x20000278
 80011b8:	200005e0 	.word	0x200005e0

080011bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <SystemInit+0x20>)
 80011c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011c6:	4a05      	ldr	r2, [pc, #20]	; (80011dc <SystemInit+0x20>)
 80011c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <registerHUARTvga>:

	_Static_assert(horiWhole == horiRes+horiFront+horiSync+horiBack, "Horizontal vga configuration does not sum up");
	_Static_assert(vertWhole == vertArea+vertFront+vertSync+vertBack, "Vertical vga configuration does not sum up");
}

void registerHUARTvga(UART_HandleTypeDef * huart){
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	huartE = huart;
 80011e8:	4a04      	ldr	r2, [pc, #16]	; (80011fc <registerHUARTvga+0x1c>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	200005c4 	.word	0x200005c4

08001200 <renderLine>:

void __weak renderLine(Color * lineBuffPart, const int lineCount){
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
	//both buffers are 32 bit aligned
	if(lineCount % 2 == 1){
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	bfb8      	it	lt
 8001214:	425b      	neglt	r3, r3
 8001216:	2b01      	cmp	r3, #1
 8001218:	d110      	bne.n	800123c <renderLine+0x3c>
		for(uint32_t i = 0; i < horiRes; i++){//load test data
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	e009      	b.n	8001234 <renderLine+0x34>
			lineBuffPart[i] = ColorWhite;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	4413      	add	r3, r2
 8001228:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <renderLine+0x68>)
 800122a:	8812      	ldrh	r2, [r2, #0]
 800122c:	801a      	strh	r2, [r3, #0]
		for(uint32_t i = 0; i < horiRes; i++){//load test data
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	3301      	adds	r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2b9f      	cmp	r3, #159	; 0x9f
 8001238:	d9f2      	bls.n	8001220 <renderLine+0x20>
	}else{
		for(uint32_t i = 0; i < horiRes; i++){//load test data
			lineBuffPart[i] = ColorBlue;
		}
	}
}
 800123a:	e00f      	b.n	800125c <renderLine+0x5c>
		for(uint32_t i = 0; i < horiRes; i++){//load test data
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	e009      	b.n	8001256 <renderLine+0x56>
			lineBuffPart[i] = ColorBlue;
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	4a08      	ldr	r2, [pc, #32]	; (800126c <renderLine+0x6c>)
 800124c:	8812      	ldrh	r2, [r2, #0]
 800124e:	801a      	strh	r2, [r3, #0]
		for(uint32_t i = 0; i < horiRes; i++){//load test data
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	3301      	adds	r3, #1
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	2b9f      	cmp	r3, #159	; 0x9f
 800125a:	d9f2      	bls.n	8001242 <renderLine+0x42>
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	08005f90 	.word	0x08005f90
 800126c:	08005f98 	.word	0x08005f98

08001270 <vgaDriver>:
enum { vertSync = 2};
enum { vertBack = 35};
enum { vertWhole = 449};
 */
//#define vgaDebug
void __attribute__((optimize("O3"))) vgaDriver(){
 8001270:	b538      	push	{r3, r4, r5, lr}
#ifdef vgaDebug
	int str_len;
	char str[81] = {'\0'};
	static char * ref_str = "null";
#endif
	lineCount++;
 8001272:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <vgaDriver+0x80>)
		Color * tmp = activeBuffer;
 8001274:	481f      	ldr	r0, [pc, #124]	; (80012f4 <vgaDriver+0x84>)
	lineCount++;
 8001276:	6819      	ldr	r1, [r3, #0]
		activeBuffer = oldBuffer;
 8001278:	4a1f      	ldr	r2, [pc, #124]	; (80012f8 <vgaDriver+0x88>)
		Color * tmp = activeBuffer;
 800127a:	6805      	ldr	r5, [r0, #0]
		activeBuffer = oldBuffer;
 800127c:	6814      	ldr	r4, [r2, #0]
 800127e:	6004      	str	r4, [r0, #0]
	lineCount++;
 8001280:	3101      	adds	r1, #1
	if(lineCount < vertArea){//send line
 8001282:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
		oldBuffer = tmp;
 8001286:	6015      	str	r5, [r2, #0]
	lineCount++;
 8001288:	6019      	str	r1, [r3, #0]
	if(lineCount < vertArea){//send line
 800128a:	db1a      	blt.n	80012c2 <vgaDriver+0x52>
#ifdef vgaDebug
		ref_str = "render line";
#endif
		renderLine(&activeBuffer[horiWhole-horiRes], lineCount);//call user render line function

	}else if(lineCount == vertArea){//last line clear
 800128c:	d010      	beq.n	80012b0 <vgaDriver+0x40>
		uint32_t * active32 = (uint32_t*)&activeBuffer[horiWhole-horiRes];
		for(uint32_t i = 0; i < horiRes/(sizeof(uint32_t)/sizeof(Color)); i++){
			*active32 = 0;
			active32++;
		}
	}else if(lineCount == vertArea + 1){//last line clear buffer
 800128e:	f240 1291 	movw	r2, #401	; 0x191
 8001292:	4291      	cmp	r1, r2
 8001294:	d00c      	beq.n	80012b0 <vgaDriver+0x40>
		uint32_t * active32 = (uint32_t*)&activeBuffer[horiWhole-horiRes];
		for(uint32_t i = 0; i < horiRes/(sizeof(uint32_t)/sizeof(Color)); i++){
			*active32 = 0;
			active32++;
		}
	}else if(lineCount == vertArea + vertFront){//enter vertical sync todo check for of by one error
 8001296:	f5b1 7fce 	cmp.w	r1, #412	; 0x19c
 800129a:	d017      	beq.n	80012cc <vgaDriver+0x5c>
#ifdef vgaDebug
		ref_str = "vertical sync start";
#endif
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_SET);

	}else if(lineCount == vertArea + vertFront + vertSync){//exit vertical sync
 800129c:	f5b1 7fcf 	cmp.w	r1, #414	; 0x19e
 80012a0:	d01d      	beq.n	80012de <vgaDriver+0x6e>
#ifdef vgaDebug
		ref_str = "vertical sync end";
#endif
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_RESET);

	}else if(lineCount >= vertWhole){//return to beginning
 80012a2:	f5b1 7fe0 	cmp.w	r1, #448	; 0x1c0
#ifdef vgaDebug
		ref_str = "next frame";
#endif
		lineCount = -1;
 80012a6:	bfc4      	itt	gt
 80012a8:	f04f 32ff 	movgt.w	r2, #4294967295
 80012ac:	601a      	strgt	r2, [r3, #0]
	str_len = sprintf(str, "Line %i\t %s \n\r", lineCount, ref_str);
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
	uint32_t indicatorLengths[] = {horiFront, horiSync, horiBack, horiRes, horiFront, horiSync, horiBack, horiRes};
	dumpBuffer((char*)lineBuff, horiWhole*2, indicatorLengths, "  []  ||  []  ||EE", 2);
#endif
}
 80012ae:	bd38      	pop	{r3, r4, r5, pc}
			*active32 = 0;
 80012b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80012b4:	f44f 72a0 	mov.w	r2, #320	; 0x140
}
 80012b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			*active32 = 0;
 80012bc:	2100      	movs	r1, #0
 80012be:	f003 b879 	b.w	80043b4 <memset>
		renderLine(&activeBuffer[horiWhole-horiRes], lineCount);//call user render line function
 80012c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80012c6:	f7ff ff9b 	bl	8001200 <renderLine>
}
 80012ca:	bd38      	pop	{r3, r4, r5, pc}
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_SET);
 80012cc:	4a0b      	ldr	r2, [pc, #44]	; (80012fc <vgaDriver+0x8c>)
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <vgaDriver+0x90>)
 80012d0:	8811      	ldrh	r1, [r2, #0]
 80012d2:	6818      	ldr	r0, [r3, #0]
 80012d4:	2201      	movs	r2, #1
}
 80012d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_SET);
 80012da:	f001 b81b 	b.w	8002314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_RESET);
 80012de:	4a07      	ldr	r2, [pc, #28]	; (80012fc <vgaDriver+0x8c>)
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <vgaDriver+0x90>)
 80012e2:	8811      	ldrh	r1, [r2, #0]
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	2200      	movs	r2, #0
}
 80012e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_RESET);
 80012ec:	f001 b812 	b.w	8002314 <HAL_GPIO_WritePin>
 80012f0:	200005b0 	.word	0x200005b0
 80012f4:	200005bc 	.word	0x200005bc
 80012f8:	200005c0 	.word	0x200005c0
 80012fc:	200005ac 	.word	0x200005ac
 8001300:	200005a8 	.word	0x200005a8

08001304 <vgaHalfCallBack>:

void vgaHalfCallBack(DMA_HandleTypeDef *_hdma){
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	//readyForNextLine++;
	vgaDriver();
 800130c:	f7ff ffb0 	bl	8001270 <vgaDriver>
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <vgaFullCallBack>:

void vgaFullCallBack(DMA_HandleTypeDef *_hdma){
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	//readyForNextLine++;
	vgaDriver();
 8001320:	f7ff ffa6 	bl	8001270 <vgaDriver>
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <vgaSetup>:
		TIM_HandleTypeDef * vgaPixelTimer_,
		DMA_HandleTypeDef * vgaCircularDMA_,
		DMA_HandleTypeDef * memCopyDMA_,
		GPIO_TypeDef* Vsync_GPIO_Port_,
		uint16_t Vsync_Pin_
		){
 800132c:	b480      	push	{r7}
 800132e:	b08b      	sub	sp, #44	; 0x2c
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
 8001338:	603b      	str	r3, [r7, #0]

	vgaPixelTimer = vgaPixelTimer_;
 800133a:	4a3a      	ldr	r2, [pc, #232]	; (8001424 <vgaSetup+0xf8>)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6013      	str	r3, [r2, #0]
	vgaCircularDMA = vgaCircularDMA_;
 8001340:	4a39      	ldr	r2, [pc, #228]	; (8001428 <vgaSetup+0xfc>)
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	6013      	str	r3, [r2, #0]
	memCopyDMA = memCopyDMA_;
 8001346:	4a39      	ldr	r2, [pc, #228]	; (800142c <vgaSetup+0x100>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6013      	str	r3, [r2, #0]

	Vsync_GPIO_Port = Vsync_GPIO_Port_;
 800134c:	4a38      	ldr	r2, [pc, #224]	; (8001430 <vgaSetup+0x104>)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	6013      	str	r3, [r2, #0]
	Vsync_Pin = Vsync_Pin_;
 8001352:	4a38      	ldr	r2, [pc, #224]	; (8001434 <vgaSetup+0x108>)
 8001354:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001356:	8013      	strh	r3, [r2, #0]

	lineCount = 0; //vertArea + vertFront - 1 - 2;//start right after a vertical sync
 8001358:	4b37      	ldr	r3, [pc, #220]	; (8001438 <vgaSetup+0x10c>)
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
	lineUpscale = 0;//copy old buffer if non zero
 800135e:	4b37      	ldr	r3, [pc, #220]	; (800143c <vgaSetup+0x110>)
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
	readyForNextLine = 1;
 8001364:	4b36      	ldr	r3, [pc, #216]	; (8001440 <vgaSetup+0x114>)
 8001366:	2201      	movs	r2, #1
 8001368:	601a      	str	r2, [r3, #0]
	activeBuffer = lineBuff;
 800136a:	4b36      	ldr	r3, [pc, #216]	; (8001444 <vgaSetup+0x118>)
 800136c:	4a36      	ldr	r2, [pc, #216]	; (8001448 <vgaSetup+0x11c>)
 800136e:	601a      	str	r2, [r3, #0]
	oldBuffer = &lineBuff[horiWhole];
 8001370:	4b36      	ldr	r3, [pc, #216]	; (800144c <vgaSetup+0x120>)
 8001372:	4a37      	ldr	r2, [pc, #220]	; (8001450 <vgaSetup+0x124>)
 8001374:	601a      	str	r2, [r3, #0]

	for(uint32_t i = 0; i < horiWhole; i += 2){//clear all
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
 800137a:	e010      	b.n	800139e <vgaSetup+0x72>
		activeBuffer[i].value = 0;
 800137c:	4b31      	ldr	r3, [pc, #196]	; (8001444 <vgaSetup+0x118>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	2200      	movs	r2, #0
 8001388:	801a      	strh	r2, [r3, #0]
		oldBuffer[i].value = 0;
 800138a:	4b30      	ldr	r3, [pc, #192]	; (800144c <vgaSetup+0x120>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	2200      	movs	r2, #0
 8001396:	801a      	strh	r2, [r3, #0]
	for(uint32_t i = 0; i < horiWhole; i += 2){//clear all
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	3302      	adds	r3, #2
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	2bc7      	cmp	r3, #199	; 0xc7
 80013a2:	d9eb      	bls.n	800137c <vgaSetup+0x50>
	}
	Color * tmpA = &activeBuffer[horiWhole-horiRes];
 80013a4:	4b27      	ldr	r3, [pc, #156]	; (8001444 <vgaSetup+0x118>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	3350      	adds	r3, #80	; 0x50
 80013aa:	61bb      	str	r3, [r7, #24]
	Color * tmpO = &oldBuffer[horiWhole-horiRes];
 80013ac:	4b27      	ldr	r3, [pc, #156]	; (800144c <vgaSetup+0x120>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3350      	adds	r3, #80	; 0x50
 80013b2:	617b      	str	r3, [r7, #20]
	for(uint32_t i = 0; i < horiRes; i++){//load test data
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
 80013b8:	e010      	b.n	80013dc <vgaSetup+0xb0>
		tmpA[i] = ColorWhite;
 80013ba:	6a3b      	ldr	r3, [r7, #32]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4413      	add	r3, r2
 80013c2:	4a24      	ldr	r2, [pc, #144]	; (8001454 <vgaSetup+0x128>)
 80013c4:	8812      	ldrh	r2, [r2, #0]
 80013c6:	801a      	strh	r2, [r3, #0]
		tmpO[i] = ColorBlue;
 80013c8:	6a3b      	ldr	r3, [r7, #32]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	4413      	add	r3, r2
 80013d0:	4a21      	ldr	r2, [pc, #132]	; (8001458 <vgaSetup+0x12c>)
 80013d2:	8812      	ldrh	r2, [r2, #0]
 80013d4:	801a      	strh	r2, [r3, #0]
	for(uint32_t i = 0; i < horiRes; i++){//load test data
 80013d6:	6a3b      	ldr	r3, [r7, #32]
 80013d8:	3301      	adds	r3, #1
 80013da:	623b      	str	r3, [r7, #32]
 80013dc:	6a3b      	ldr	r3, [r7, #32]
 80013de:	2b9f      	cmp	r3, #159	; 0x9f
 80013e0:	d9eb      	bls.n	80013ba <vgaSetup+0x8e>
	}
	for(uint32_t i = horiFront; i < horiFront + horiSync; i++){//set horizontal sync
 80013e2:	2304      	movs	r3, #4
 80013e4:	61fb      	str	r3, [r7, #28]
 80013e6:	e012      	b.n	800140e <vgaSetup+0xe2>
		activeBuffer[i] = ColorHsync;
 80013e8:	4b16      	ldr	r3, [pc, #88]	; (8001444 <vgaSetup+0x118>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	4a1a      	ldr	r2, [pc, #104]	; (800145c <vgaSetup+0x130>)
 80013f4:	8812      	ldrh	r2, [r2, #0]
 80013f6:	801a      	strh	r2, [r3, #0]
		oldBuffer[i] = ColorHsync;
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <vgaSetup+0x120>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4413      	add	r3, r2
 8001402:	4a16      	ldr	r2, [pc, #88]	; (800145c <vgaSetup+0x130>)
 8001404:	8812      	ldrh	r2, [r2, #0]
 8001406:	801a      	strh	r2, [r3, #0]
	for(uint32_t i = horiFront; i < horiFront + horiSync; i++){//set horizontal sync
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	3301      	adds	r3, #1
 800140c:	61fb      	str	r3, [r7, #28]
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	2b1b      	cmp	r3, #27
 8001412:	d9e9      	bls.n	80013e8 <vgaSetup+0xbc>
	}
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	372c      	adds	r7, #44	; 0x2c
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	2000059c 	.word	0x2000059c
 8001428:	200005a0 	.word	0x200005a0
 800142c:	200005a4 	.word	0x200005a4
 8001430:	200005a8 	.word	0x200005a8
 8001434:	200005ac 	.word	0x200005ac
 8001438:	200005b0 	.word	0x200005b0
 800143c:	200005b4 	.word	0x200005b4
 8001440:	200005b8 	.word	0x200005b8
 8001444:	200005bc 	.word	0x200005bc
 8001448:	2000027c 	.word	0x2000027c
 800144c:	200005c0 	.word	0x200005c0
 8001450:	2000040c 	.word	0x2000040c
 8001454:	08005f90 	.word	0x08005f90
 8001458:	08005f98 	.word	0x08005f98
 800145c:	08005f8c 	.word	0x08005f8c

08001460 <vgaStart>:

void vgaStart(){
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0

	//dumpBuffer((char*)screenBuff, horiRes*vertRes, NULL, "", 2);
	//HAL_DMA_Init(vgaCircularDMA);
	__HAL_TIM_ENABLE_DMA(vgaPixelTimer, TIM_DMA_UPDATE);
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <vgaStart+0x68>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <vgaStart+0x68>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001476:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE(vgaPixelTimer);
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <vgaStart+0x68>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <vgaStart+0x68>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 0201 	orr.w	r2, r2, #1
 800148a:	601a      	str	r2, [r3, #0]

	HAL_TIM_PWM_Start(vgaPixelTimer, TIM_CHANNEL_1);
 800148c:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <vgaStart+0x68>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f001 fc98 	bl	8002dc8 <HAL_TIM_PWM_Start>

	HAL_DMA_RegisterCallback(vgaCircularDMA, HAL_DMA_XFER_HALFCPLT_CB_ID, vgaHalfCallBack);
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <vgaStart+0x6c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0c      	ldr	r2, [pc, #48]	; (80014d0 <vgaStart+0x70>)
 800149e:	2101      	movs	r1, #1
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 fc7f 	bl	8001da4 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(vgaCircularDMA, HAL_DMA_XFER_CPLT_CB_ID, vgaFullCallBack);
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <vgaStart+0x6c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <vgaStart+0x74>)
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 fc78 	bl	8001da4 <HAL_DMA_RegisterCallback>
	//__HAL_TIM_ENABLE(&htim5);

	//start the circular buffer dma transfer aka vga main loop
	HAL_DMA_Start_IT(vgaCircularDMA, (uint32_t)&lineBuff[0], (uint32_t)&(GPIOC->ODR), horiWhole*2);
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <vgaStart+0x6c>)
 80014b6:	6818      	ldr	r0, [r3, #0]
 80014b8:	4907      	ldr	r1, [pc, #28]	; (80014d8 <vgaStart+0x78>)
 80014ba:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80014be:	4a07      	ldr	r2, [pc, #28]	; (80014dc <vgaStart+0x7c>)
 80014c0:	f000 fa8e 	bl	80019e0 <HAL_DMA_Start_IT>

	//HAL_DMAEx_MultiBufferStart_IT(hdma, SrcAddress, DstAddress, SecondMemAddress, DataLength);
	//vgaLoop();
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	2000059c 	.word	0x2000059c
 80014cc:	200005a0 	.word	0x200005a0
 80014d0:	08001305 	.word	0x08001305
 80014d4:	08001319 	.word	0x08001319
 80014d8:	2000027c 	.word	0x2000027c
 80014dc:	40020814 	.word	0x40020814

080014e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001518 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014e4:	480d      	ldr	r0, [pc, #52]	; (800151c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014e6:	490e      	ldr	r1, [pc, #56]	; (8001520 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014e8:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ec:	e002      	b.n	80014f4 <LoopCopyDataInit>

080014ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f2:	3304      	adds	r3, #4

080014f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f8:	d3f9      	bcc.n	80014ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fa:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014fc:	4c0b      	ldr	r4, [pc, #44]	; (800152c <LoopFillZerobss+0x26>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001500:	e001      	b.n	8001506 <LoopFillZerobss>

08001502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001504:	3204      	adds	r2, #4

08001506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001508:	d3fb      	bcc.n	8001502 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800150a:	f7ff fe57 	bl	80011bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800150e:	f002 ff2d 	bl	800436c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001512:	f7ff f92d 	bl	8000770 <main>
  bx  lr    
 8001516:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001518:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800151c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001520:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001524:	08006000 	.word	0x08006000
  ldr r2, =_sbss
 8001528:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800152c:	200005dc 	.word	0x200005dc

08001530 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001530:	e7fe      	b.n	8001530 <ADC_IRQHandler>
	...

08001534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001538:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <HAL_Init+0x40>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0d      	ldr	r2, [pc, #52]	; (8001574 <HAL_Init+0x40>)
 800153e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001542:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001544:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <HAL_Init+0x40>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <HAL_Init+0x40>)
 800154a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800154e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <HAL_Init+0x40>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a07      	ldr	r2, [pc, #28]	; (8001574 <HAL_Init+0x40>)
 8001556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800155c:	2003      	movs	r0, #3
 800155e:	f000 f94f 	bl	8001800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001562:	2000      	movs	r0, #0
 8001564:	f000 f808 	bl	8001578 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001568:	f7ff fc8c 	bl	8000e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40023c00 	.word	0x40023c00

08001578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_InitTick+0x54>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_InitTick+0x58>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4619      	mov	r1, r3
 800158a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001592:	fbb2 f3f3 	udiv	r3, r2, r3
 8001596:	4618      	mov	r0, r3
 8001598:	f000 f967 	bl	800186a <HAL_SYSTICK_Config>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e00e      	b.n	80015c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b0f      	cmp	r3, #15
 80015aa:	d80a      	bhi.n	80015c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ac:	2200      	movs	r2, #0
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	f04f 30ff 	mov.w	r0, #4294967295
 80015b4:	f000 f92f 	bl	8001816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b8:	4a06      	ldr	r2, [pc, #24]	; (80015d4 <HAL_InitTick+0x5c>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	e000      	b.n	80015c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000000 	.word	0x20000000
 80015d0:	20000008 	.word	0x20000008
 80015d4:	20000004 	.word	0x20000004

080015d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_IncTick+0x20>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_IncTick+0x24>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	4a04      	ldr	r2, [pc, #16]	; (80015fc <HAL_IncTick+0x24>)
 80015ea:	6013      	str	r3, [r2, #0]
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	20000008 	.word	0x20000008
 80015fc:	200005c8 	.word	0x200005c8

08001600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return uwTick;
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <HAL_GetTick+0x14>)
 8001606:	681b      	ldr	r3, [r3, #0]
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	200005c8 	.word	0x200005c8

08001618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001620:	f7ff ffee 	bl	8001600 <HAL_GetTick>
 8001624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001630:	d005      	beq.n	800163e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001632:	4b0a      	ldr	r3, [pc, #40]	; (800165c <HAL_Delay+0x44>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4413      	add	r3, r2
 800163c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800163e:	bf00      	nop
 8001640:	f7ff ffde 	bl	8001600 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	429a      	cmp	r2, r3
 800164e:	d8f7      	bhi.n	8001640 <HAL_Delay+0x28>
  {
  }
}
 8001650:	bf00      	nop
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000008 	.word	0x20000008

08001660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800167c:	4013      	ands	r3, r2
 800167e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800168c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001692:	4a04      	ldr	r2, [pc, #16]	; (80016a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	60d3      	str	r3, [r2, #12]
}
 8001698:	bf00      	nop
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	0a1b      	lsrs	r3, r3, #8
 80016b2:	f003 0307 	and.w	r3, r3, #7
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	db0b      	blt.n	80016ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	f003 021f 	and.w	r2, r3, #31
 80016dc:	4907      	ldr	r1, [pc, #28]	; (80016fc <__NVIC_EnableIRQ+0x38>)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	095b      	lsrs	r3, r3, #5
 80016e4:	2001      	movs	r0, #1
 80016e6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000e100 	.word	0xe000e100

08001700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	6039      	str	r1, [r7, #0]
 800170a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001710:	2b00      	cmp	r3, #0
 8001712:	db0a      	blt.n	800172a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	b2da      	uxtb	r2, r3
 8001718:	490c      	ldr	r1, [pc, #48]	; (800174c <__NVIC_SetPriority+0x4c>)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	0112      	lsls	r2, r2, #4
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	440b      	add	r3, r1
 8001724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001728:	e00a      	b.n	8001740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	b2da      	uxtb	r2, r3
 800172e:	4908      	ldr	r1, [pc, #32]	; (8001750 <__NVIC_SetPriority+0x50>)
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	3b04      	subs	r3, #4
 8001738:	0112      	lsls	r2, r2, #4
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	440b      	add	r3, r1
 800173e:	761a      	strb	r2, [r3, #24]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000e100 	.word	0xe000e100
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001754:	b480      	push	{r7}
 8001756:	b089      	sub	sp, #36	; 0x24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f1c3 0307 	rsb	r3, r3, #7
 800176e:	2b04      	cmp	r3, #4
 8001770:	bf28      	it	cs
 8001772:	2304      	movcs	r3, #4
 8001774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3304      	adds	r3, #4
 800177a:	2b06      	cmp	r3, #6
 800177c:	d902      	bls.n	8001784 <NVIC_EncodePriority+0x30>
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3b03      	subs	r3, #3
 8001782:	e000      	b.n	8001786 <NVIC_EncodePriority+0x32>
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	f04f 32ff 	mov.w	r2, #4294967295
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43da      	mvns	r2, r3
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	401a      	ands	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800179c:	f04f 31ff 	mov.w	r1, #4294967295
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	fa01 f303 	lsl.w	r3, r1, r3
 80017a6:	43d9      	mvns	r1, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	4313      	orrs	r3, r2
         );
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3724      	adds	r7, #36	; 0x24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
	...

080017bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017cc:	d301      	bcc.n	80017d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ce:	2301      	movs	r3, #1
 80017d0:	e00f      	b.n	80017f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017d2:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <SysTick_Config+0x40>)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017da:	210f      	movs	r1, #15
 80017dc:	f04f 30ff 	mov.w	r0, #4294967295
 80017e0:	f7ff ff8e 	bl	8001700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <SysTick_Config+0x40>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ea:	4b04      	ldr	r3, [pc, #16]	; (80017fc <SysTick_Config+0x40>)
 80017ec:	2207      	movs	r2, #7
 80017ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	e000e010 	.word	0xe000e010

08001800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff ff29 	bl	8001660 <__NVIC_SetPriorityGrouping>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001816:	b580      	push	{r7, lr}
 8001818:	b086      	sub	sp, #24
 800181a:	af00      	add	r7, sp, #0
 800181c:	4603      	mov	r3, r0
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	607a      	str	r2, [r7, #4]
 8001822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001828:	f7ff ff3e 	bl	80016a8 <__NVIC_GetPriorityGrouping>
 800182c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	68b9      	ldr	r1, [r7, #8]
 8001832:	6978      	ldr	r0, [r7, #20]
 8001834:	f7ff ff8e 	bl	8001754 <NVIC_EncodePriority>
 8001838:	4602      	mov	r2, r0
 800183a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183e:	4611      	mov	r1, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff5d 	bl	8001700 <__NVIC_SetPriority>
}
 8001846:	bf00      	nop
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	4603      	mov	r3, r0
 8001856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff31 	bl	80016c4 <__NVIC_EnableIRQ>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff ffa2 	bl	80017bc <SysTick_Config>
 8001878:	4603      	mov	r3, r0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001890:	f7ff feb6 	bl	8001600 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e099      	b.n	80019d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2202      	movs	r2, #2
 80018a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0201 	bic.w	r2, r2, #1
 80018be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018c0:	e00f      	b.n	80018e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018c2:	f7ff fe9d 	bl	8001600 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b05      	cmp	r3, #5
 80018ce:	d908      	bls.n	80018e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2220      	movs	r2, #32
 80018d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2203      	movs	r2, #3
 80018da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e078      	b.n	80019d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1e8      	bne.n	80018c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	4b38      	ldr	r3, [pc, #224]	; (80019dc <HAL_DMA_Init+0x158>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800190e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800191a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001926:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	4313      	orrs	r3, r2
 8001932:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	2b04      	cmp	r3, #4
 800193a:	d107      	bne.n	800194c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001944:	4313      	orrs	r3, r2
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	4313      	orrs	r3, r2
 800194a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	f023 0307 	bic.w	r3, r3, #7
 8001962:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	4313      	orrs	r3, r2
 800196c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	2b04      	cmp	r3, #4
 8001974:	d117      	bne.n	80019a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4313      	orrs	r3, r2
 800197e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	2b00      	cmp	r3, #0
 8001986:	d00e      	beq.n	80019a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 fac3 	bl	8001f14 <DMA_CheckFifoParam>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d008      	beq.n	80019a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2240      	movs	r2, #64	; 0x40
 8001998:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019a2:	2301      	movs	r3, #1
 80019a4:	e016      	b.n	80019d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 fa7a 	bl	8001ea8 <DMA_CalcBaseAndBitshift>
 80019b4:	4603      	mov	r3, r0
 80019b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019bc:	223f      	movs	r2, #63	; 0x3f
 80019be:	409a      	lsls	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	f010803f 	.word	0xf010803f

080019e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
 80019ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019ee:	2300      	movs	r3, #0
 80019f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d101      	bne.n	8001a06 <HAL_DMA_Start_IT+0x26>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e040      	b.n	8001a88 <HAL_DMA_Start_IT+0xa8>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d12f      	bne.n	8001a7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 fa0c 	bl	8001e4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a38:	223f      	movs	r2, #63	; 0x3f
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0216 	orr.w	r2, r2, #22
 8001a4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d007      	beq.n	8001a68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0208 	orr.w	r2, r2, #8
 8001a66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0201 	orr.w	r2, r2, #1
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	e005      	b.n	8001a86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a82:	2302      	movs	r3, #2
 8001a84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a9c:	4b8e      	ldr	r3, [pc, #568]	; (8001cd8 <HAL_DMA_IRQHandler+0x248>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a8e      	ldr	r2, [pc, #568]	; (8001cdc <HAL_DMA_IRQHandler+0x24c>)
 8001aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa6:	0a9b      	lsrs	r3, r3, #10
 8001aa8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aba:	2208      	movs	r2, #8
 8001abc:	409a      	lsls	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d01a      	beq.n	8001afc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d013      	beq.n	8001afc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0204 	bic.w	r2, r2, #4
 8001ae2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae8:	2208      	movs	r2, #8
 8001aea:	409a      	lsls	r2, r3
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af4:	f043 0201 	orr.w	r2, r3, #1
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b00:	2201      	movs	r2, #1
 8001b02:	409a      	lsls	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d012      	beq.n	8001b32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00b      	beq.n	8001b32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1e:	2201      	movs	r2, #1
 8001b20:	409a      	lsls	r2, r3
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2a:	f043 0202 	orr.w	r2, r3, #2
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b36:	2204      	movs	r2, #4
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d012      	beq.n	8001b68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00b      	beq.n	8001b68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b54:	2204      	movs	r2, #4
 8001b56:	409a      	lsls	r2, r3
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b60:	f043 0204 	orr.w	r2, r3, #4
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6c:	2210      	movs	r2, #16
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d043      	beq.n	8001c00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d03c      	beq.n	8001c00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8a:	2210      	movs	r2, #16
 8001b8c:	409a      	lsls	r2, r3
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d018      	beq.n	8001bd2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d108      	bne.n	8001bc0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d024      	beq.n	8001c00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	4798      	blx	r3
 8001bbe:	e01f      	b.n	8001c00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d01b      	beq.n	8001c00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	4798      	blx	r3
 8001bd0:	e016      	b.n	8001c00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d107      	bne.n	8001bf0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 0208 	bic.w	r2, r2, #8
 8001bee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c04:	2220      	movs	r2, #32
 8001c06:	409a      	lsls	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 808f 	beq.w	8001d30 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0310 	and.w	r3, r3, #16
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 8087 	beq.w	8001d30 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c26:	2220      	movs	r2, #32
 8001c28:	409a      	lsls	r2, r3
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b05      	cmp	r3, #5
 8001c38:	d136      	bne.n	8001ca8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0216 	bic.w	r2, r2, #22
 8001c48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	695a      	ldr	r2, [r3, #20]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d103      	bne.n	8001c6a <HAL_DMA_IRQHandler+0x1da>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d007      	beq.n	8001c7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0208 	bic.w	r2, r2, #8
 8001c78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7e:	223f      	movs	r2, #63	; 0x3f
 8001c80:	409a      	lsls	r2, r3
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d07e      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	4798      	blx	r3
        }
        return;
 8001ca6:	e079      	b.n	8001d9c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d01d      	beq.n	8001cf2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10d      	bne.n	8001ce0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d031      	beq.n	8001d30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	4798      	blx	r3
 8001cd4:	e02c      	b.n	8001d30 <HAL_DMA_IRQHandler+0x2a0>
 8001cd6:	bf00      	nop
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d023      	beq.n	8001d30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	4798      	blx	r3
 8001cf0:	e01e      	b.n	8001d30 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10f      	bne.n	8001d20 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0210 	bic.w	r2, r2, #16
 8001d0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d032      	beq.n	8001d9e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d022      	beq.n	8001d8a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2205      	movs	r2, #5
 8001d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0201 	bic.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d307      	bcc.n	8001d78 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f2      	bne.n	8001d5c <HAL_DMA_IRQHandler+0x2cc>
 8001d76:	e000      	b.n	8001d7a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d78:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d005      	beq.n	8001d9e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	4798      	blx	r3
 8001d9a:	e000      	b.n	8001d9e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d9c:	bf00      	nop
    }
  }
}
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8001da4:	b480      	push	{r7}
 8001da6:	b087      	sub	sp, #28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	460b      	mov	r3, r1
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d101      	bne.n	8001dc4 <HAL_DMA_RegisterCallback+0x20>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e03d      	b.n	8001e40 <HAL_DMA_RegisterCallback+0x9c>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d12c      	bne.n	8001e32 <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 8001dd8:	7afb      	ldrb	r3, [r7, #11]
 8001dda:	2b05      	cmp	r3, #5
 8001ddc:	d826      	bhi.n	8001e2c <HAL_DMA_RegisterCallback+0x88>
 8001dde:	a201      	add	r2, pc, #4	; (adr r2, 8001de4 <HAL_DMA_RegisterCallback+0x40>)
 8001de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de4:	08001dfd 	.word	0x08001dfd
 8001de8:	08001e05 	.word	0x08001e05
 8001dec:	08001e0d 	.word	0x08001e0d
 8001df0:	08001e15 	.word	0x08001e15
 8001df4:	08001e1d 	.word	0x08001e1d
 8001df8:	08001e25 	.word	0x08001e25
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8001e02:	e018      	b.n	8001e36 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8001e0a:	e014      	b.n	8001e36 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8001e12:	e010      	b.n	8001e36 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8001e1a:	e00c      	b.n	8001e36 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8001e22:	e008      	b.n	8001e36 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8001e2a:	e004      	b.n	8001e36 <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8001e30:	e001      	b.n	8001e36 <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8001e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	371c      	adds	r7, #28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2b40      	cmp	r3, #64	; 0x40
 8001e78:	d108      	bne.n	8001e8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e8a:	e007      	b.n	8001e9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68ba      	ldr	r2, [r7, #8]
 8001e92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	60da      	str	r2, [r3, #12]
}
 8001e9c:	bf00      	nop
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	3b10      	subs	r3, #16
 8001eb8:	4a14      	ldr	r2, [pc, #80]	; (8001f0c <DMA_CalcBaseAndBitshift+0x64>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	091b      	lsrs	r3, r3, #4
 8001ec0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ec2:	4a13      	ldr	r2, [pc, #76]	; (8001f10 <DMA_CalcBaseAndBitshift+0x68>)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2b03      	cmp	r3, #3
 8001ed4:	d909      	bls.n	8001eea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ede:	f023 0303 	bic.w	r3, r3, #3
 8001ee2:	1d1a      	adds	r2, r3, #4
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	659a      	str	r2, [r3, #88]	; 0x58
 8001ee8:	e007      	b.n	8001efa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ef2:	f023 0303 	bic.w	r3, r3, #3
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	aaaaaaab 	.word	0xaaaaaaab
 8001f10:	08005fb4 	.word	0x08005fb4

08001f14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d11f      	bne.n	8001f6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d856      	bhi.n	8001fe2 <DMA_CheckFifoParam+0xce>
 8001f34:	a201      	add	r2, pc, #4	; (adr r2, 8001f3c <DMA_CheckFifoParam+0x28>)
 8001f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f3a:	bf00      	nop
 8001f3c:	08001f4d 	.word	0x08001f4d
 8001f40:	08001f5f 	.word	0x08001f5f
 8001f44:	08001f4d 	.word	0x08001f4d
 8001f48:	08001fe3 	.word	0x08001fe3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d046      	beq.n	8001fe6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f5c:	e043      	b.n	8001fe6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f66:	d140      	bne.n	8001fea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f6c:	e03d      	b.n	8001fea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f76:	d121      	bne.n	8001fbc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	d837      	bhi.n	8001fee <DMA_CheckFifoParam+0xda>
 8001f7e:	a201      	add	r2, pc, #4	; (adr r2, 8001f84 <DMA_CheckFifoParam+0x70>)
 8001f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f84:	08001f95 	.word	0x08001f95
 8001f88:	08001f9b 	.word	0x08001f9b
 8001f8c:	08001f95 	.word	0x08001f95
 8001f90:	08001fad 	.word	0x08001fad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
      break;
 8001f98:	e030      	b.n	8001ffc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d025      	beq.n	8001ff2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001faa:	e022      	b.n	8001ff2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fb4:	d11f      	bne.n	8001ff6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001fba:	e01c      	b.n	8001ff6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d903      	bls.n	8001fca <DMA_CheckFifoParam+0xb6>
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d003      	beq.n	8001fd0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001fc8:	e018      	b.n	8001ffc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8001fce:	e015      	b.n	8001ffc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00e      	beq.n	8001ffa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	73fb      	strb	r3, [r7, #15]
      break;
 8001fe0:	e00b      	b.n	8001ffa <DMA_CheckFifoParam+0xe6>
      break;
 8001fe2:	bf00      	nop
 8001fe4:	e00a      	b.n	8001ffc <DMA_CheckFifoParam+0xe8>
      break;
 8001fe6:	bf00      	nop
 8001fe8:	e008      	b.n	8001ffc <DMA_CheckFifoParam+0xe8>
      break;
 8001fea:	bf00      	nop
 8001fec:	e006      	b.n	8001ffc <DMA_CheckFifoParam+0xe8>
      break;
 8001fee:	bf00      	nop
 8001ff0:	e004      	b.n	8001ffc <DMA_CheckFifoParam+0xe8>
      break;
 8001ff2:	bf00      	nop
 8001ff4:	e002      	b.n	8001ffc <DMA_CheckFifoParam+0xe8>
      break;   
 8001ff6:	bf00      	nop
 8001ff8:	e000      	b.n	8001ffc <DMA_CheckFifoParam+0xe8>
      break;
 8001ffa:	bf00      	nop
    }
  } 
  
  return status; 
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop

0800200c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	; 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800201e:	2300      	movs	r3, #0
 8002020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
 8002026:	e159      	b.n	80022dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002028:	2201      	movs	r2, #1
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	429a      	cmp	r2, r3
 8002042:	f040 8148 	bne.w	80022d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	2b01      	cmp	r3, #1
 8002050:	d005      	beq.n	800205e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800205a:	2b02      	cmp	r3, #2
 800205c:	d130      	bne.n	80020c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	2203      	movs	r2, #3
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002094:	2201      	movs	r2, #1
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	091b      	lsrs	r3, r3, #4
 80020aa:	f003 0201 	and.w	r2, r3, #1
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	d017      	beq.n	80020fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	2203      	movs	r2, #3
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d123      	bne.n	8002150 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	08da      	lsrs	r2, r3, #3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3208      	adds	r2, #8
 8002110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	220f      	movs	r2, #15
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	08da      	lsrs	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3208      	adds	r2, #8
 800214a:	69b9      	ldr	r1, [r7, #24]
 800214c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0203 	and.w	r2, r3, #3
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 80a2 	beq.w	80022d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	4b57      	ldr	r3, [pc, #348]	; (80022f4 <HAL_GPIO_Init+0x2e8>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	4a56      	ldr	r2, [pc, #344]	; (80022f4 <HAL_GPIO_Init+0x2e8>)
 800219c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a0:	6453      	str	r3, [r2, #68]	; 0x44
 80021a2:	4b54      	ldr	r3, [pc, #336]	; (80022f4 <HAL_GPIO_Init+0x2e8>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ae:	4a52      	ldr	r2, [pc, #328]	; (80022f8 <HAL_GPIO_Init+0x2ec>)
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	089b      	lsrs	r3, r3, #2
 80021b4:	3302      	adds	r3, #2
 80021b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	220f      	movs	r2, #15
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43db      	mvns	r3, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4013      	ands	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a49      	ldr	r2, [pc, #292]	; (80022fc <HAL_GPIO_Init+0x2f0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d019      	beq.n	800220e <HAL_GPIO_Init+0x202>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a48      	ldr	r2, [pc, #288]	; (8002300 <HAL_GPIO_Init+0x2f4>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d013      	beq.n	800220a <HAL_GPIO_Init+0x1fe>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a47      	ldr	r2, [pc, #284]	; (8002304 <HAL_GPIO_Init+0x2f8>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00d      	beq.n	8002206 <HAL_GPIO_Init+0x1fa>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a46      	ldr	r2, [pc, #280]	; (8002308 <HAL_GPIO_Init+0x2fc>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d007      	beq.n	8002202 <HAL_GPIO_Init+0x1f6>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a45      	ldr	r2, [pc, #276]	; (800230c <HAL_GPIO_Init+0x300>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d101      	bne.n	80021fe <HAL_GPIO_Init+0x1f2>
 80021fa:	2304      	movs	r3, #4
 80021fc:	e008      	b.n	8002210 <HAL_GPIO_Init+0x204>
 80021fe:	2307      	movs	r3, #7
 8002200:	e006      	b.n	8002210 <HAL_GPIO_Init+0x204>
 8002202:	2303      	movs	r3, #3
 8002204:	e004      	b.n	8002210 <HAL_GPIO_Init+0x204>
 8002206:	2302      	movs	r3, #2
 8002208:	e002      	b.n	8002210 <HAL_GPIO_Init+0x204>
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <HAL_GPIO_Init+0x204>
 800220e:	2300      	movs	r3, #0
 8002210:	69fa      	ldr	r2, [r7, #28]
 8002212:	f002 0203 	and.w	r2, r2, #3
 8002216:	0092      	lsls	r2, r2, #2
 8002218:	4093      	lsls	r3, r2
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002220:	4935      	ldr	r1, [pc, #212]	; (80022f8 <HAL_GPIO_Init+0x2ec>)
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	089b      	lsrs	r3, r3, #2
 8002226:	3302      	adds	r3, #2
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800222e:	4b38      	ldr	r3, [pc, #224]	; (8002310 <HAL_GPIO_Init+0x304>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002252:	4a2f      	ldr	r2, [pc, #188]	; (8002310 <HAL_GPIO_Init+0x304>)
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002258:	4b2d      	ldr	r3, [pc, #180]	; (8002310 <HAL_GPIO_Init+0x304>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800227c:	4a24      	ldr	r2, [pc, #144]	; (8002310 <HAL_GPIO_Init+0x304>)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002282:	4b23      	ldr	r3, [pc, #140]	; (8002310 <HAL_GPIO_Init+0x304>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022a6:	4a1a      	ldr	r2, [pc, #104]	; (8002310 <HAL_GPIO_Init+0x304>)
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022ac:	4b18      	ldr	r3, [pc, #96]	; (8002310 <HAL_GPIO_Init+0x304>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022d0:	4a0f      	ldr	r2, [pc, #60]	; (8002310 <HAL_GPIO_Init+0x304>)
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3301      	adds	r3, #1
 80022da:	61fb      	str	r3, [r7, #28]
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	2b0f      	cmp	r3, #15
 80022e0:	f67f aea2 	bls.w	8002028 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022e4:	bf00      	nop
 80022e6:	bf00      	nop
 80022e8:	3724      	adds	r7, #36	; 0x24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40013800 	.word	0x40013800
 80022fc:	40020000 	.word	0x40020000
 8002300:	40020400 	.word	0x40020400
 8002304:	40020800 	.word	0x40020800
 8002308:	40020c00 	.word	0x40020c00
 800230c:	40021000 	.word	0x40021000
 8002310:	40013c00 	.word	0x40013c00

08002314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	807b      	strh	r3, [r7, #2]
 8002320:	4613      	mov	r3, r2
 8002322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002324:	787b      	ldrb	r3, [r7, #1]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800232a:	887a      	ldrh	r2, [r7, #2]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002330:	e003      	b.n	800233a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002332:	887b      	ldrh	r3, [r7, #2]
 8002334:	041a      	lsls	r2, r3, #16
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	619a      	str	r2, [r3, #24]
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e267      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d075      	beq.n	8002452 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002366:	4b88      	ldr	r3, [pc, #544]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	2b04      	cmp	r3, #4
 8002370:	d00c      	beq.n	800238c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002372:	4b85      	ldr	r3, [pc, #532]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800237a:	2b08      	cmp	r3, #8
 800237c:	d112      	bne.n	80023a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800237e:	4b82      	ldr	r3, [pc, #520]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800238a:	d10b      	bne.n	80023a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800238c:	4b7e      	ldr	r3, [pc, #504]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d05b      	beq.n	8002450 <HAL_RCC_OscConfig+0x108>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d157      	bne.n	8002450 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e242      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ac:	d106      	bne.n	80023bc <HAL_RCC_OscConfig+0x74>
 80023ae:	4b76      	ldr	r3, [pc, #472]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a75      	ldr	r2, [pc, #468]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	e01d      	b.n	80023f8 <HAL_RCC_OscConfig+0xb0>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x98>
 80023c6:	4b70      	ldr	r3, [pc, #448]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a6f      	ldr	r2, [pc, #444]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	4b6d      	ldr	r3, [pc, #436]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a6c      	ldr	r2, [pc, #432]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	e00b      	b.n	80023f8 <HAL_RCC_OscConfig+0xb0>
 80023e0:	4b69      	ldr	r3, [pc, #420]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a68      	ldr	r2, [pc, #416]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ea:	6013      	str	r3, [r2, #0]
 80023ec:	4b66      	ldr	r3, [pc, #408]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a65      	ldr	r2, [pc, #404]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d013      	beq.n	8002428 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002400:	f7ff f8fe 	bl	8001600 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002408:	f7ff f8fa 	bl	8001600 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b64      	cmp	r3, #100	; 0x64
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e207      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241a:	4b5b      	ldr	r3, [pc, #364]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f0      	beq.n	8002408 <HAL_RCC_OscConfig+0xc0>
 8002426:	e014      	b.n	8002452 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002428:	f7ff f8ea 	bl	8001600 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002430:	f7ff f8e6 	bl	8001600 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b64      	cmp	r3, #100	; 0x64
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e1f3      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002442:	4b51      	ldr	r3, [pc, #324]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f0      	bne.n	8002430 <HAL_RCC_OscConfig+0xe8>
 800244e:	e000      	b.n	8002452 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d063      	beq.n	8002526 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800245e:	4b4a      	ldr	r3, [pc, #296]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 030c 	and.w	r3, r3, #12
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00b      	beq.n	8002482 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800246a:	4b47      	ldr	r3, [pc, #284]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002472:	2b08      	cmp	r3, #8
 8002474:	d11c      	bne.n	80024b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002476:	4b44      	ldr	r3, [pc, #272]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d116      	bne.n	80024b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002482:	4b41      	ldr	r3, [pc, #260]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d005      	beq.n	800249a <HAL_RCC_OscConfig+0x152>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d001      	beq.n	800249a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e1c7      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249a:	4b3b      	ldr	r3, [pc, #236]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4937      	ldr	r1, [pc, #220]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ae:	e03a      	b.n	8002526 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d020      	beq.n	80024fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024b8:	4b34      	ldr	r3, [pc, #208]	; (800258c <HAL_RCC_OscConfig+0x244>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024be:	f7ff f89f 	bl	8001600 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024c6:	f7ff f89b 	bl	8001600 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e1a8      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d8:	4b2b      	ldr	r3, [pc, #172]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0f0      	beq.n	80024c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e4:	4b28      	ldr	r3, [pc, #160]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	4925      	ldr	r1, [pc, #148]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	600b      	str	r3, [r1, #0]
 80024f8:	e015      	b.n	8002526 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024fa:	4b24      	ldr	r3, [pc, #144]	; (800258c <HAL_RCC_OscConfig+0x244>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002500:	f7ff f87e 	bl	8001600 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002508:	f7ff f87a 	bl	8001600 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e187      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800251a:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d036      	beq.n	80025a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d016      	beq.n	8002568 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800253a:	4b15      	ldr	r3, [pc, #84]	; (8002590 <HAL_RCC_OscConfig+0x248>)
 800253c:	2201      	movs	r2, #1
 800253e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002540:	f7ff f85e 	bl	8001600 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002548:	f7ff f85a 	bl	8001600 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e167      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255a:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 800255c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0x200>
 8002566:	e01b      	b.n	80025a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002568:	4b09      	ldr	r3, [pc, #36]	; (8002590 <HAL_RCC_OscConfig+0x248>)
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256e:	f7ff f847 	bl	8001600 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002574:	e00e      	b.n	8002594 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002576:	f7ff f843 	bl	8001600 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d907      	bls.n	8002594 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e150      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
 8002588:	40023800 	.word	0x40023800
 800258c:	42470000 	.word	0x42470000
 8002590:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002594:	4b88      	ldr	r3, [pc, #544]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 8002596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1ea      	bne.n	8002576 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 8097 	beq.w	80026dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ae:	2300      	movs	r3, #0
 80025b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025b2:	4b81      	ldr	r3, [pc, #516]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10f      	bne.n	80025de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	4b7d      	ldr	r3, [pc, #500]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	4a7c      	ldr	r2, [pc, #496]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 80025c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025cc:	6413      	str	r3, [r2, #64]	; 0x40
 80025ce:	4b7a      	ldr	r3, [pc, #488]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d6:	60bb      	str	r3, [r7, #8]
 80025d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025da:	2301      	movs	r3, #1
 80025dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025de:	4b77      	ldr	r3, [pc, #476]	; (80027bc <HAL_RCC_OscConfig+0x474>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d118      	bne.n	800261c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ea:	4b74      	ldr	r3, [pc, #464]	; (80027bc <HAL_RCC_OscConfig+0x474>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a73      	ldr	r2, [pc, #460]	; (80027bc <HAL_RCC_OscConfig+0x474>)
 80025f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025f6:	f7ff f803 	bl	8001600 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025fe:	f7fe ffff 	bl	8001600 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e10c      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002610:	4b6a      	ldr	r3, [pc, #424]	; (80027bc <HAL_RCC_OscConfig+0x474>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d106      	bne.n	8002632 <HAL_RCC_OscConfig+0x2ea>
 8002624:	4b64      	ldr	r3, [pc, #400]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 8002626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002628:	4a63      	ldr	r2, [pc, #396]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	6713      	str	r3, [r2, #112]	; 0x70
 8002630:	e01c      	b.n	800266c <HAL_RCC_OscConfig+0x324>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2b05      	cmp	r3, #5
 8002638:	d10c      	bne.n	8002654 <HAL_RCC_OscConfig+0x30c>
 800263a:	4b5f      	ldr	r3, [pc, #380]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 800263c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263e:	4a5e      	ldr	r2, [pc, #376]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 8002640:	f043 0304 	orr.w	r3, r3, #4
 8002644:	6713      	str	r3, [r2, #112]	; 0x70
 8002646:	4b5c      	ldr	r3, [pc, #368]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 8002648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264a:	4a5b      	ldr	r2, [pc, #364]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	6713      	str	r3, [r2, #112]	; 0x70
 8002652:	e00b      	b.n	800266c <HAL_RCC_OscConfig+0x324>
 8002654:	4b58      	ldr	r3, [pc, #352]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 8002656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002658:	4a57      	ldr	r2, [pc, #348]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 800265a:	f023 0301 	bic.w	r3, r3, #1
 800265e:	6713      	str	r3, [r2, #112]	; 0x70
 8002660:	4b55      	ldr	r3, [pc, #340]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 8002662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002664:	4a54      	ldr	r2, [pc, #336]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 8002666:	f023 0304 	bic.w	r3, r3, #4
 800266a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d015      	beq.n	80026a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002674:	f7fe ffc4 	bl	8001600 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267a:	e00a      	b.n	8002692 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800267c:	f7fe ffc0 	bl	8001600 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	f241 3288 	movw	r2, #5000	; 0x1388
 800268a:	4293      	cmp	r3, r2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e0cb      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002692:	4b49      	ldr	r3, [pc, #292]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 8002694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0ee      	beq.n	800267c <HAL_RCC_OscConfig+0x334>
 800269e:	e014      	b.n	80026ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a0:	f7fe ffae 	bl	8001600 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a6:	e00a      	b.n	80026be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026a8:	f7fe ffaa 	bl	8001600 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e0b5      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026be:	4b3e      	ldr	r3, [pc, #248]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 80026c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1ee      	bne.n	80026a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026ca:	7dfb      	ldrb	r3, [r7, #23]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d105      	bne.n	80026dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d0:	4b39      	ldr	r3, [pc, #228]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	4a38      	ldr	r2, [pc, #224]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 80026d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 80a1 	beq.w	8002828 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026e6:	4b34      	ldr	r3, [pc, #208]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d05c      	beq.n	80027ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d141      	bne.n	800277e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fa:	4b31      	ldr	r3, [pc, #196]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002700:	f7fe ff7e 	bl	8001600 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002708:	f7fe ff7a 	bl	8001600 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e087      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800271a:	4b27      	ldr	r3, [pc, #156]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69da      	ldr	r2, [r3, #28]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	019b      	lsls	r3, r3, #6
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273c:	085b      	lsrs	r3, r3, #1
 800273e:	3b01      	subs	r3, #1
 8002740:	041b      	lsls	r3, r3, #16
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002748:	061b      	lsls	r3, r3, #24
 800274a:	491b      	ldr	r1, [pc, #108]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 800274c:	4313      	orrs	r3, r2
 800274e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002750:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 8002752:	2201      	movs	r2, #1
 8002754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002756:	f7fe ff53 	bl	8001600 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800275e:	f7fe ff4f 	bl	8001600 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e05c      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002770:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f0      	beq.n	800275e <HAL_RCC_OscConfig+0x416>
 800277c:	e054      	b.n	8002828 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277e:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002784:	f7fe ff3c 	bl	8001600 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800278c:	f7fe ff38 	bl	8001600 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e045      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279e:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x444>
 80027aa:	e03d      	b.n	8002828 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d107      	bne.n	80027c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e038      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40007000 	.word	0x40007000
 80027c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027c4:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <HAL_RCC_OscConfig+0x4ec>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d028      	beq.n	8002824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027dc:	429a      	cmp	r2, r3
 80027de:	d121      	bne.n	8002824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d11a      	bne.n	8002824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027f4:	4013      	ands	r3, r2
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d111      	bne.n	8002824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280a:	085b      	lsrs	r3, r3, #1
 800280c:	3b01      	subs	r3, #1
 800280e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002810:	429a      	cmp	r2, r3
 8002812:	d107      	bne.n	8002824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e000      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40023800 	.word	0x40023800

08002838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0cc      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800284c:	4b68      	ldr	r3, [pc, #416]	; (80029f0 <HAL_RCC_ClockConfig+0x1b8>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d90c      	bls.n	8002874 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285a:	4b65      	ldr	r3, [pc, #404]	; (80029f0 <HAL_RCC_ClockConfig+0x1b8>)
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002862:	4b63      	ldr	r3, [pc, #396]	; (80029f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d001      	beq.n	8002874 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e0b8      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d020      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800288c:	4b59      	ldr	r3, [pc, #356]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	4a58      	ldr	r2, [pc, #352]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002896:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0308 	and.w	r3, r3, #8
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028a4:	4b53      	ldr	r3, [pc, #332]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	4a52      	ldr	r2, [pc, #328]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028b0:	4b50      	ldr	r3, [pc, #320]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	494d      	ldr	r1, [pc, #308]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d044      	beq.n	8002958 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d107      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d6:	4b47      	ldr	r3, [pc, #284]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d119      	bne.n	8002916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e07f      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d003      	beq.n	80028f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028f2:	2b03      	cmp	r3, #3
 80028f4:	d107      	bne.n	8002906 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f6:	4b3f      	ldr	r3, [pc, #252]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d109      	bne.n	8002916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e06f      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002906:	4b3b      	ldr	r3, [pc, #236]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e067      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002916:	4b37      	ldr	r3, [pc, #220]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f023 0203 	bic.w	r2, r3, #3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	4934      	ldr	r1, [pc, #208]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	4313      	orrs	r3, r2
 8002926:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002928:	f7fe fe6a 	bl	8001600 <HAL_GetTick>
 800292c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292e:	e00a      	b.n	8002946 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002930:	f7fe fe66 	bl	8001600 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	f241 3288 	movw	r2, #5000	; 0x1388
 800293e:	4293      	cmp	r3, r2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e04f      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002946:	4b2b      	ldr	r3, [pc, #172]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 020c 	and.w	r2, r3, #12
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	429a      	cmp	r2, r3
 8002956:	d1eb      	bne.n	8002930 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002958:	4b25      	ldr	r3, [pc, #148]	; (80029f0 <HAL_RCC_ClockConfig+0x1b8>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d20c      	bcs.n	8002980 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002966:	4b22      	ldr	r3, [pc, #136]	; (80029f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800296e:	4b20      	ldr	r3, [pc, #128]	; (80029f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	429a      	cmp	r2, r3
 800297a:	d001      	beq.n	8002980 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e032      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d008      	beq.n	800299e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800298c:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	4916      	ldr	r1, [pc, #88]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	4313      	orrs	r3, r2
 800299c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d009      	beq.n	80029be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029aa:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	490e      	ldr	r1, [pc, #56]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029be:	f000 f821 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 80029c2:	4602      	mov	r2, r0
 80029c4:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	091b      	lsrs	r3, r3, #4
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	490a      	ldr	r1, [pc, #40]	; (80029f8 <HAL_RCC_ClockConfig+0x1c0>)
 80029d0:	5ccb      	ldrb	r3, [r1, r3]
 80029d2:	fa22 f303 	lsr.w	r3, r2, r3
 80029d6:	4a09      	ldr	r2, [pc, #36]	; (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 80029d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029da:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <HAL_RCC_ClockConfig+0x1c8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fe fdca 	bl	8001578 <HAL_InitTick>

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40023c00 	.word	0x40023c00
 80029f4:	40023800 	.word	0x40023800
 80029f8:	08005f9c 	.word	0x08005f9c
 80029fc:	20000000 	.word	0x20000000
 8002a00:	20000004 	.word	0x20000004

08002a04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a08:	b094      	sub	sp, #80	; 0x50
 8002a0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	647b      	str	r3, [r7, #68]	; 0x44
 8002a10:	2300      	movs	r3, #0
 8002a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a14:	2300      	movs	r3, #0
 8002a16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a1c:	4b79      	ldr	r3, [pc, #484]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 030c 	and.w	r3, r3, #12
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d00d      	beq.n	8002a44 <HAL_RCC_GetSysClockFreq+0x40>
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	f200 80e1 	bhi.w	8002bf0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <HAL_RCC_GetSysClockFreq+0x34>
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d003      	beq.n	8002a3e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a36:	e0db      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a38:	4b73      	ldr	r3, [pc, #460]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a3a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a3c:	e0db      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a3e:	4b73      	ldr	r3, [pc, #460]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x208>)
 8002a40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a42:	e0d8      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a44:	4b6f      	ldr	r3, [pc, #444]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a4c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a4e:	4b6d      	ldr	r3, [pc, #436]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d063      	beq.n	8002b22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a5a:	4b6a      	ldr	r3, [pc, #424]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	099b      	lsrs	r3, r3, #6
 8002a60:	2200      	movs	r2, #0
 8002a62:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a6c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a6e:	2300      	movs	r3, #0
 8002a70:	637b      	str	r3, [r7, #52]	; 0x34
 8002a72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a76:	4622      	mov	r2, r4
 8002a78:	462b      	mov	r3, r5
 8002a7a:	f04f 0000 	mov.w	r0, #0
 8002a7e:	f04f 0100 	mov.w	r1, #0
 8002a82:	0159      	lsls	r1, r3, #5
 8002a84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a88:	0150      	lsls	r0, r2, #5
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4621      	mov	r1, r4
 8002a90:	1a51      	subs	r1, r2, r1
 8002a92:	6139      	str	r1, [r7, #16]
 8002a94:	4629      	mov	r1, r5
 8002a96:	eb63 0301 	sbc.w	r3, r3, r1
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002aa8:	4659      	mov	r1, fp
 8002aaa:	018b      	lsls	r3, r1, #6
 8002aac:	4651      	mov	r1, sl
 8002aae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ab2:	4651      	mov	r1, sl
 8002ab4:	018a      	lsls	r2, r1, #6
 8002ab6:	4651      	mov	r1, sl
 8002ab8:	ebb2 0801 	subs.w	r8, r2, r1
 8002abc:	4659      	mov	r1, fp
 8002abe:	eb63 0901 	sbc.w	r9, r3, r1
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ace:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ad2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ad6:	4690      	mov	r8, r2
 8002ad8:	4699      	mov	r9, r3
 8002ada:	4623      	mov	r3, r4
 8002adc:	eb18 0303 	adds.w	r3, r8, r3
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	462b      	mov	r3, r5
 8002ae4:	eb49 0303 	adc.w	r3, r9, r3
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002af6:	4629      	mov	r1, r5
 8002af8:	024b      	lsls	r3, r1, #9
 8002afa:	4621      	mov	r1, r4
 8002afc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b00:	4621      	mov	r1, r4
 8002b02:	024a      	lsls	r2, r1, #9
 8002b04:	4610      	mov	r0, r2
 8002b06:	4619      	mov	r1, r3
 8002b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b14:	f7fd fbb4 	bl	8000280 <__aeabi_uldivmod>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b20:	e058      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b22:	4b38      	ldr	r3, [pc, #224]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	099b      	lsrs	r3, r3, #6
 8002b28:	2200      	movs	r2, #0
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	4611      	mov	r1, r2
 8002b2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b32:	623b      	str	r3, [r7, #32]
 8002b34:	2300      	movs	r3, #0
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
 8002b38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b3c:	4642      	mov	r2, r8
 8002b3e:	464b      	mov	r3, r9
 8002b40:	f04f 0000 	mov.w	r0, #0
 8002b44:	f04f 0100 	mov.w	r1, #0
 8002b48:	0159      	lsls	r1, r3, #5
 8002b4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b4e:	0150      	lsls	r0, r2, #5
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4641      	mov	r1, r8
 8002b56:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b5a:	4649      	mov	r1, r9
 8002b5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b74:	ebb2 040a 	subs.w	r4, r2, sl
 8002b78:	eb63 050b 	sbc.w	r5, r3, fp
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	00eb      	lsls	r3, r5, #3
 8002b86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b8a:	00e2      	lsls	r2, r4, #3
 8002b8c:	4614      	mov	r4, r2
 8002b8e:	461d      	mov	r5, r3
 8002b90:	4643      	mov	r3, r8
 8002b92:	18e3      	adds	r3, r4, r3
 8002b94:	603b      	str	r3, [r7, #0]
 8002b96:	464b      	mov	r3, r9
 8002b98:	eb45 0303 	adc.w	r3, r5, r3
 8002b9c:	607b      	str	r3, [r7, #4]
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002baa:	4629      	mov	r1, r5
 8002bac:	028b      	lsls	r3, r1, #10
 8002bae:	4621      	mov	r1, r4
 8002bb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bb4:	4621      	mov	r1, r4
 8002bb6:	028a      	lsls	r2, r1, #10
 8002bb8:	4610      	mov	r0, r2
 8002bba:	4619      	mov	r1, r3
 8002bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	61bb      	str	r3, [r7, #24]
 8002bc2:	61fa      	str	r2, [r7, #28]
 8002bc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bc8:	f7fd fb5a 	bl	8000280 <__aeabi_uldivmod>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	0c1b      	lsrs	r3, r3, #16
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	3301      	adds	r3, #1
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002be4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bee:	e002      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bf0:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bf2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3750      	adds	r7, #80	; 0x50
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c02:	bf00      	nop
 8002c04:	40023800 	.word	0x40023800
 8002c08:	00f42400 	.word	0x00f42400
 8002c0c:	007a1200 	.word	0x007a1200

08002c10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c14:	4b03      	ldr	r3, [pc, #12]	; (8002c24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c16:	681b      	ldr	r3, [r3, #0]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	20000000 	.word	0x20000000

08002c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c2c:	f7ff fff0 	bl	8002c10 <HAL_RCC_GetHCLKFreq>
 8002c30:	4602      	mov	r2, r0
 8002c32:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	0a9b      	lsrs	r3, r3, #10
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	4903      	ldr	r1, [pc, #12]	; (8002c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c3e:	5ccb      	ldrb	r3, [r1, r3]
 8002c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	08005fac 	.word	0x08005fac

08002c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c54:	f7ff ffdc 	bl	8002c10 <HAL_RCC_GetHCLKFreq>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	0b5b      	lsrs	r3, r3, #13
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	4903      	ldr	r1, [pc, #12]	; (8002c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c66:	5ccb      	ldrb	r3, [r1, r3]
 8002c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40023800 	.word	0x40023800
 8002c74:	08005fac 	.word	0x08005fac

08002c78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e041      	b.n	8002d0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7fe f918 	bl	8000ed4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	f000 fbf0 	bl	800349c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e041      	b.n	8002dac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d106      	bne.n	8002d42 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f839 	bl	8002db4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2202      	movs	r2, #2
 8002d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	3304      	adds	r3, #4
 8002d52:	4619      	mov	r1, r3
 8002d54:	4610      	mov	r0, r2
 8002d56:	f000 fba1 	bl	800349c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d109      	bne.n	8002dec <HAL_TIM_PWM_Start+0x24>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	bf14      	ite	ne
 8002de4:	2301      	movne	r3, #1
 8002de6:	2300      	moveq	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	e022      	b.n	8002e32 <HAL_TIM_PWM_Start+0x6a>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d109      	bne.n	8002e06 <HAL_TIM_PWM_Start+0x3e>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	bf14      	ite	ne
 8002dfe:	2301      	movne	r3, #1
 8002e00:	2300      	moveq	r3, #0
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	e015      	b.n	8002e32 <HAL_TIM_PWM_Start+0x6a>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d109      	bne.n	8002e20 <HAL_TIM_PWM_Start+0x58>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	bf14      	ite	ne
 8002e18:	2301      	movne	r3, #1
 8002e1a:	2300      	moveq	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	e008      	b.n	8002e32 <HAL_TIM_PWM_Start+0x6a>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	bf14      	ite	ne
 8002e2c:	2301      	movne	r3, #1
 8002e2e:	2300      	moveq	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e068      	b.n	8002f0c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d104      	bne.n	8002e4a <HAL_TIM_PWM_Start+0x82>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e48:	e013      	b.n	8002e72 <HAL_TIM_PWM_Start+0xaa>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d104      	bne.n	8002e5a <HAL_TIM_PWM_Start+0x92>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e58:	e00b      	b.n	8002e72 <HAL_TIM_PWM_Start+0xaa>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d104      	bne.n	8002e6a <HAL_TIM_PWM_Start+0xa2>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e68:	e003      	b.n	8002e72 <HAL_TIM_PWM_Start+0xaa>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2201      	movs	r2, #1
 8002e78:	6839      	ldr	r1, [r7, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 fdb4 	bl	80039e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a23      	ldr	r2, [pc, #140]	; (8002f14 <HAL_TIM_PWM_Start+0x14c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d107      	bne.n	8002e9a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a1d      	ldr	r2, [pc, #116]	; (8002f14 <HAL_TIM_PWM_Start+0x14c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d018      	beq.n	8002ed6 <HAL_TIM_PWM_Start+0x10e>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eac:	d013      	beq.n	8002ed6 <HAL_TIM_PWM_Start+0x10e>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a19      	ldr	r2, [pc, #100]	; (8002f18 <HAL_TIM_PWM_Start+0x150>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d00e      	beq.n	8002ed6 <HAL_TIM_PWM_Start+0x10e>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a17      	ldr	r2, [pc, #92]	; (8002f1c <HAL_TIM_PWM_Start+0x154>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d009      	beq.n	8002ed6 <HAL_TIM_PWM_Start+0x10e>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a16      	ldr	r2, [pc, #88]	; (8002f20 <HAL_TIM_PWM_Start+0x158>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d004      	beq.n	8002ed6 <HAL_TIM_PWM_Start+0x10e>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a14      	ldr	r2, [pc, #80]	; (8002f24 <HAL_TIM_PWM_Start+0x15c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d111      	bne.n	8002efa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2b06      	cmp	r3, #6
 8002ee6:	d010      	beq.n	8002f0a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef8:	e007      	b.n	8002f0a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f042 0201 	orr.w	r2, r2, #1
 8002f08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40010000 	.word	0x40010000
 8002f18:	40000400 	.word	0x40000400
 8002f1c:	40000800 	.word	0x40000800
 8002f20:	40000c00 	.word	0x40000c00
 8002f24:	40014000 	.word	0x40014000

08002f28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d122      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d11b      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f06f 0202 	mvn.w	r2, #2
 8002f54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 fa77 	bl	800345e <HAL_TIM_IC_CaptureCallback>
 8002f70:	e005      	b.n	8002f7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fa69 	bl	800344a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 fa7a 	bl	8003472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d122      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d11b      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0204 	mvn.w	r2, #4
 8002fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2202      	movs	r2, #2
 8002fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 fa4d 	bl	800345e <HAL_TIM_IC_CaptureCallback>
 8002fc4:	e005      	b.n	8002fd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 fa3f 	bl	800344a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 fa50 	bl	8003472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d122      	bne.n	800302c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d11b      	bne.n	800302c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0208 	mvn.w	r2, #8
 8002ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2204      	movs	r2, #4
 8003002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 fa23 	bl	800345e <HAL_TIM_IC_CaptureCallback>
 8003018:	e005      	b.n	8003026 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fa15 	bl	800344a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 fa26 	bl	8003472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	2b10      	cmp	r3, #16
 8003038:	d122      	bne.n	8003080 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	2b10      	cmp	r3, #16
 8003046:	d11b      	bne.n	8003080 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f06f 0210 	mvn.w	r2, #16
 8003050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2208      	movs	r2, #8
 8003056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f9f9 	bl	800345e <HAL_TIM_IC_CaptureCallback>
 800306c:	e005      	b.n	800307a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f9eb 	bl	800344a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f9fc 	bl	8003472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b01      	cmp	r3, #1
 800308c:	d10e      	bne.n	80030ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b01      	cmp	r3, #1
 800309a:	d107      	bne.n	80030ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f06f 0201 	mvn.w	r2, #1
 80030a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7fd fb30 	bl	800070c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b6:	2b80      	cmp	r3, #128	; 0x80
 80030b8:	d10e      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c4:	2b80      	cmp	r3, #128	; 0x80
 80030c6:	d107      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fd78 	bl	8003bc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e2:	2b40      	cmp	r3, #64	; 0x40
 80030e4:	d10e      	bne.n	8003104 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f0:	2b40      	cmp	r3, #64	; 0x40
 80030f2:	d107      	bne.n	8003104 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f9c1 	bl	8003486 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	f003 0320 	and.w	r3, r3, #32
 800310e:	2b20      	cmp	r3, #32
 8003110:	d10e      	bne.n	8003130 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f003 0320 	and.w	r3, r3, #32
 800311c:	2b20      	cmp	r3, #32
 800311e:	d107      	bne.n	8003130 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f06f 0220 	mvn.w	r2, #32
 8003128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 fd42 	bl	8003bb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003152:	2302      	movs	r3, #2
 8003154:	e0ae      	b.n	80032b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b0c      	cmp	r3, #12
 8003162:	f200 809f 	bhi.w	80032a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003166:	a201      	add	r2, pc, #4	; (adr r2, 800316c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316c:	080031a1 	.word	0x080031a1
 8003170:	080032a5 	.word	0x080032a5
 8003174:	080032a5 	.word	0x080032a5
 8003178:	080032a5 	.word	0x080032a5
 800317c:	080031e1 	.word	0x080031e1
 8003180:	080032a5 	.word	0x080032a5
 8003184:	080032a5 	.word	0x080032a5
 8003188:	080032a5 	.word	0x080032a5
 800318c:	08003223 	.word	0x08003223
 8003190:	080032a5 	.word	0x080032a5
 8003194:	080032a5 	.word	0x080032a5
 8003198:	080032a5 	.word	0x080032a5
 800319c:	08003263 	.word	0x08003263
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 f9f8 	bl	800359c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699a      	ldr	r2, [r3, #24]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0208 	orr.w	r2, r2, #8
 80031ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0204 	bic.w	r2, r2, #4
 80031ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6999      	ldr	r1, [r3, #24]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	691a      	ldr	r2, [r3, #16]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	619a      	str	r2, [r3, #24]
      break;
 80031de:	e064      	b.n	80032aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68b9      	ldr	r1, [r7, #8]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 fa3e 	bl	8003668 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699a      	ldr	r2, [r3, #24]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699a      	ldr	r2, [r3, #24]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800320a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6999      	ldr	r1, [r3, #24]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	021a      	lsls	r2, r3, #8
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	619a      	str	r2, [r3, #24]
      break;
 8003220:	e043      	b.n	80032aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68b9      	ldr	r1, [r7, #8]
 8003228:	4618      	mov	r0, r3
 800322a:	f000 fa89 	bl	8003740 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69da      	ldr	r2, [r3, #28]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f042 0208 	orr.w	r2, r2, #8
 800323c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69da      	ldr	r2, [r3, #28]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0204 	bic.w	r2, r2, #4
 800324c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	69d9      	ldr	r1, [r3, #28]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	61da      	str	r2, [r3, #28]
      break;
 8003260:	e023      	b.n	80032aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68b9      	ldr	r1, [r7, #8]
 8003268:	4618      	mov	r0, r3
 800326a:	f000 fad3 	bl	8003814 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	69da      	ldr	r2, [r3, #28]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800327c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	69da      	ldr	r2, [r3, #28]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800328c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	69d9      	ldr	r1, [r3, #28]
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	021a      	lsls	r2, r3, #8
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	61da      	str	r2, [r3, #28]
      break;
 80032a2:	e002      	b.n	80032aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	75fb      	strb	r3, [r7, #23]
      break;
 80032a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_TIM_ConfigClockSource+0x1c>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e0b4      	b.n	8003442 <HAL_TIM_ConfigClockSource+0x186>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003310:	d03e      	beq.n	8003390 <HAL_TIM_ConfigClockSource+0xd4>
 8003312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003316:	f200 8087 	bhi.w	8003428 <HAL_TIM_ConfigClockSource+0x16c>
 800331a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331e:	f000 8086 	beq.w	800342e <HAL_TIM_ConfigClockSource+0x172>
 8003322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003326:	d87f      	bhi.n	8003428 <HAL_TIM_ConfigClockSource+0x16c>
 8003328:	2b70      	cmp	r3, #112	; 0x70
 800332a:	d01a      	beq.n	8003362 <HAL_TIM_ConfigClockSource+0xa6>
 800332c:	2b70      	cmp	r3, #112	; 0x70
 800332e:	d87b      	bhi.n	8003428 <HAL_TIM_ConfigClockSource+0x16c>
 8003330:	2b60      	cmp	r3, #96	; 0x60
 8003332:	d050      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0x11a>
 8003334:	2b60      	cmp	r3, #96	; 0x60
 8003336:	d877      	bhi.n	8003428 <HAL_TIM_ConfigClockSource+0x16c>
 8003338:	2b50      	cmp	r3, #80	; 0x50
 800333a:	d03c      	beq.n	80033b6 <HAL_TIM_ConfigClockSource+0xfa>
 800333c:	2b50      	cmp	r3, #80	; 0x50
 800333e:	d873      	bhi.n	8003428 <HAL_TIM_ConfigClockSource+0x16c>
 8003340:	2b40      	cmp	r3, #64	; 0x40
 8003342:	d058      	beq.n	80033f6 <HAL_TIM_ConfigClockSource+0x13a>
 8003344:	2b40      	cmp	r3, #64	; 0x40
 8003346:	d86f      	bhi.n	8003428 <HAL_TIM_ConfigClockSource+0x16c>
 8003348:	2b30      	cmp	r3, #48	; 0x30
 800334a:	d064      	beq.n	8003416 <HAL_TIM_ConfigClockSource+0x15a>
 800334c:	2b30      	cmp	r3, #48	; 0x30
 800334e:	d86b      	bhi.n	8003428 <HAL_TIM_ConfigClockSource+0x16c>
 8003350:	2b20      	cmp	r3, #32
 8003352:	d060      	beq.n	8003416 <HAL_TIM_ConfigClockSource+0x15a>
 8003354:	2b20      	cmp	r3, #32
 8003356:	d867      	bhi.n	8003428 <HAL_TIM_ConfigClockSource+0x16c>
 8003358:	2b00      	cmp	r3, #0
 800335a:	d05c      	beq.n	8003416 <HAL_TIM_ConfigClockSource+0x15a>
 800335c:	2b10      	cmp	r3, #16
 800335e:	d05a      	beq.n	8003416 <HAL_TIM_ConfigClockSource+0x15a>
 8003360:	e062      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6818      	ldr	r0, [r3, #0]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	6899      	ldr	r1, [r3, #8]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f000 fb19 	bl	80039a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003384:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	609a      	str	r2, [r3, #8]
      break;
 800338e:	e04f      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	6899      	ldr	r1, [r3, #8]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f000 fb02 	bl	80039a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033b2:	609a      	str	r2, [r3, #8]
      break;
 80033b4:	e03c      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6818      	ldr	r0, [r3, #0]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	6859      	ldr	r1, [r3, #4]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	461a      	mov	r2, r3
 80033c4:	f000 fa76 	bl	80038b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2150      	movs	r1, #80	; 0x50
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 facf 	bl	8003972 <TIM_ITRx_SetConfig>
      break;
 80033d4:	e02c      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	6859      	ldr	r1, [r3, #4]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	461a      	mov	r2, r3
 80033e4:	f000 fa95 	bl	8003912 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2160      	movs	r1, #96	; 0x60
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fabf 	bl	8003972 <TIM_ITRx_SetConfig>
      break;
 80033f4:	e01c      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	6859      	ldr	r1, [r3, #4]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	461a      	mov	r2, r3
 8003404:	f000 fa56 	bl	80038b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2140      	movs	r1, #64	; 0x40
 800340e:	4618      	mov	r0, r3
 8003410:	f000 faaf 	bl	8003972 <TIM_ITRx_SetConfig>
      break;
 8003414:	e00c      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4619      	mov	r1, r3
 8003420:	4610      	mov	r0, r2
 8003422:	f000 faa6 	bl	8003972 <TIM_ITRx_SetConfig>
      break;
 8003426:	e003      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	73fb      	strb	r3, [r7, #15]
      break;
 800342c:	e000      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800342e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003440:	7bfb      	ldrb	r3, [r7, #15]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
	...

0800349c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a34      	ldr	r2, [pc, #208]	; (8003580 <TIM_Base_SetConfig+0xe4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d00f      	beq.n	80034d4 <TIM_Base_SetConfig+0x38>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ba:	d00b      	beq.n	80034d4 <TIM_Base_SetConfig+0x38>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a31      	ldr	r2, [pc, #196]	; (8003584 <TIM_Base_SetConfig+0xe8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d007      	beq.n	80034d4 <TIM_Base_SetConfig+0x38>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a30      	ldr	r2, [pc, #192]	; (8003588 <TIM_Base_SetConfig+0xec>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d003      	beq.n	80034d4 <TIM_Base_SetConfig+0x38>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a2f      	ldr	r2, [pc, #188]	; (800358c <TIM_Base_SetConfig+0xf0>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d108      	bne.n	80034e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a25      	ldr	r2, [pc, #148]	; (8003580 <TIM_Base_SetConfig+0xe4>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d01b      	beq.n	8003526 <TIM_Base_SetConfig+0x8a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f4:	d017      	beq.n	8003526 <TIM_Base_SetConfig+0x8a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a22      	ldr	r2, [pc, #136]	; (8003584 <TIM_Base_SetConfig+0xe8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d013      	beq.n	8003526 <TIM_Base_SetConfig+0x8a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a21      	ldr	r2, [pc, #132]	; (8003588 <TIM_Base_SetConfig+0xec>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d00f      	beq.n	8003526 <TIM_Base_SetConfig+0x8a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a20      	ldr	r2, [pc, #128]	; (800358c <TIM_Base_SetConfig+0xf0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d00b      	beq.n	8003526 <TIM_Base_SetConfig+0x8a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a1f      	ldr	r2, [pc, #124]	; (8003590 <TIM_Base_SetConfig+0xf4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d007      	beq.n	8003526 <TIM_Base_SetConfig+0x8a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a1e      	ldr	r2, [pc, #120]	; (8003594 <TIM_Base_SetConfig+0xf8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d003      	beq.n	8003526 <TIM_Base_SetConfig+0x8a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a1d      	ldr	r2, [pc, #116]	; (8003598 <TIM_Base_SetConfig+0xfc>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d108      	bne.n	8003538 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800352c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	4313      	orrs	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a08      	ldr	r2, [pc, #32]	; (8003580 <TIM_Base_SetConfig+0xe4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d103      	bne.n	800356c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	691a      	ldr	r2, [r3, #16]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	615a      	str	r2, [r3, #20]
}
 8003572:	bf00      	nop
 8003574:	3714      	adds	r7, #20
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	40010000 	.word	0x40010000
 8003584:	40000400 	.word	0x40000400
 8003588:	40000800 	.word	0x40000800
 800358c:	40000c00 	.word	0x40000c00
 8003590:	40014000 	.word	0x40014000
 8003594:	40014400 	.word	0x40014400
 8003598:	40014800 	.word	0x40014800

0800359c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	f023 0201 	bic.w	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 0303 	bic.w	r3, r3, #3
 80035d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f023 0302 	bic.w	r3, r3, #2
 80035e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a1c      	ldr	r2, [pc, #112]	; (8003664 <TIM_OC1_SetConfig+0xc8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d10c      	bne.n	8003612 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f023 0308 	bic.w	r3, r3, #8
 80035fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	4313      	orrs	r3, r2
 8003608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f023 0304 	bic.w	r3, r3, #4
 8003610:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a13      	ldr	r2, [pc, #76]	; (8003664 <TIM_OC1_SetConfig+0xc8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d111      	bne.n	800363e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	621a      	str	r2, [r3, #32]
}
 8003658:	bf00      	nop
 800365a:	371c      	adds	r7, #28
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	40010000 	.word	0x40010000

08003668 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	f023 0210 	bic.w	r2, r3, #16
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800369e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	021b      	lsls	r3, r3, #8
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f023 0320 	bic.w	r3, r3, #32
 80036b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4313      	orrs	r3, r2
 80036be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a1e      	ldr	r2, [pc, #120]	; (800373c <TIM_OC2_SetConfig+0xd4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d10d      	bne.n	80036e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	4313      	orrs	r3, r2
 80036da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a15      	ldr	r2, [pc, #84]	; (800373c <TIM_OC2_SetConfig+0xd4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d113      	bne.n	8003714 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	4313      	orrs	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	621a      	str	r2, [r3, #32]
}
 800372e:	bf00      	nop
 8003730:	371c      	adds	r7, #28
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	40010000 	.word	0x40010000

08003740 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003740:	b480      	push	{r7}
 8003742:	b087      	sub	sp, #28
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 0303 	bic.w	r3, r3, #3
 8003776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	021b      	lsls	r3, r3, #8
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	4313      	orrs	r3, r2
 8003794:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a1d      	ldr	r2, [pc, #116]	; (8003810 <TIM_OC3_SetConfig+0xd0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d10d      	bne.n	80037ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	021b      	lsls	r3, r3, #8
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a14      	ldr	r2, [pc, #80]	; (8003810 <TIM_OC3_SetConfig+0xd0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d113      	bne.n	80037ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	621a      	str	r2, [r3, #32]
}
 8003804:	bf00      	nop
 8003806:	371c      	adds	r7, #28
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	40010000 	.word	0x40010000

08003814 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800384a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	021b      	lsls	r3, r3, #8
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	4313      	orrs	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800385e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	031b      	lsls	r3, r3, #12
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a10      	ldr	r2, [pc, #64]	; (80038b0 <TIM_OC4_SetConfig+0x9c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d109      	bne.n	8003888 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800387a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	019b      	lsls	r3, r3, #6
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	4313      	orrs	r3, r2
 8003886:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	621a      	str	r2, [r3, #32]
}
 80038a2:	bf00      	nop
 80038a4:	371c      	adds	r7, #28
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	40010000 	.word	0x40010000

080038b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	f023 0201 	bic.w	r2, r3, #1
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	011b      	lsls	r3, r3, #4
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f023 030a 	bic.w	r3, r3, #10
 80038f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	621a      	str	r2, [r3, #32]
}
 8003906:	bf00      	nop
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003912:	b480      	push	{r7}
 8003914:	b087      	sub	sp, #28
 8003916:	af00      	add	r7, sp, #0
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	f023 0210 	bic.w	r2, r3, #16
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800393c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	031b      	lsls	r3, r3, #12
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	4313      	orrs	r3, r2
 8003946:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800394e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4313      	orrs	r3, r2
 8003958:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	621a      	str	r2, [r3, #32]
}
 8003966:	bf00      	nop
 8003968:	371c      	adds	r7, #28
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003972:	b480      	push	{r7}
 8003974:	b085      	sub	sp, #20
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
 800397a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003988:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	f043 0307 	orr.w	r3, r3, #7
 8003994:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	609a      	str	r2, [r3, #8]
}
 800399c:	bf00      	nop
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	021a      	lsls	r2, r3, #8
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	609a      	str	r2, [r3, #8]
}
 80039dc:	bf00      	nop
 80039de:	371c      	adds	r7, #28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f003 031f 	and.w	r3, r3, #31
 80039fa:	2201      	movs	r2, #1
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a1a      	ldr	r2, [r3, #32]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	401a      	ands	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a1a      	ldr	r2, [r3, #32]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f003 031f 	and.w	r3, r3, #31
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a20:	431a      	orrs	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	621a      	str	r2, [r3, #32]
}
 8003a26:	bf00      	nop
 8003a28:	371c      	adds	r7, #28
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
	...

08003a34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e050      	b.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a1c      	ldr	r2, [pc, #112]	; (8003afc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d018      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a98:	d013      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a18      	ldr	r2, [pc, #96]	; (8003b00 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d00e      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a16      	ldr	r2, [pc, #88]	; (8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d009      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a15      	ldr	r2, [pc, #84]	; (8003b08 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d004      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a13      	ldr	r2, [pc, #76]	; (8003b0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d10c      	bne.n	8003adc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ac8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	40010000 	.word	0x40010000
 8003b00:	40000400 	.word	0x40000400
 8003b04:	40000800 	.word	0x40000800
 8003b08:	40000c00 	.word	0x40000c00
 8003b0c:	40014000 	.word	0x40014000

08003b10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e03d      	b.n	8003ba8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e03f      	b.n	8003c6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fd fa1e 	bl	8001044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2224      	movs	r2, #36	; 0x24
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f929 	bl	8003e78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695a      	ldr	r2, [r3, #20]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b08a      	sub	sp, #40	; 0x28
 8003c7a:	af02      	add	r7, sp, #8
 8003c7c:	60f8      	str	r0, [r7, #12]
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	603b      	str	r3, [r7, #0]
 8003c82:	4613      	mov	r3, r2
 8003c84:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b20      	cmp	r3, #32
 8003c94:	d17c      	bne.n	8003d90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <HAL_UART_Transmit+0x2c>
 8003c9c:	88fb      	ldrh	r3, [r7, #6]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e075      	b.n	8003d92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <HAL_UART_Transmit+0x3e>
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	e06e      	b.n	8003d92 <HAL_UART_Transmit+0x11c>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2221      	movs	r2, #33	; 0x21
 8003cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cca:	f7fd fc99 	bl	8001600 <HAL_GetTick>
 8003cce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	88fa      	ldrh	r2, [r7, #6]
 8003cd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	88fa      	ldrh	r2, [r7, #6]
 8003cda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce4:	d108      	bne.n	8003cf8 <HAL_UART_Transmit+0x82>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d104      	bne.n	8003cf8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	61bb      	str	r3, [r7, #24]
 8003cf6:	e003      	b.n	8003d00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d08:	e02a      	b.n	8003d60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2200      	movs	r2, #0
 8003d12:	2180      	movs	r1, #128	; 0x80
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 f840 	bl	8003d9a <UART_WaitOnFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e036      	b.n	8003d92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10b      	bne.n	8003d42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	3302      	adds	r3, #2
 8003d3e:	61bb      	str	r3, [r7, #24]
 8003d40:	e007      	b.n	8003d52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	781a      	ldrb	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1cf      	bne.n	8003d0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2200      	movs	r2, #0
 8003d72:	2140      	movs	r1, #64	; 0x40
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 f810 	bl	8003d9a <UART_WaitOnFlagUntilTimeout>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e006      	b.n	8003d92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	e000      	b.n	8003d92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d90:	2302      	movs	r3, #2
  }
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3720      	adds	r7, #32
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b090      	sub	sp, #64	; 0x40
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	60f8      	str	r0, [r7, #12]
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	603b      	str	r3, [r7, #0]
 8003da6:	4613      	mov	r3, r2
 8003da8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003daa:	e050      	b.n	8003e4e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db2:	d04c      	beq.n	8003e4e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003db4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d007      	beq.n	8003dca <UART_WaitOnFlagUntilTimeout+0x30>
 8003dba:	f7fd fc21 	bl	8001600 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d241      	bcs.n	8003e4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	330c      	adds	r3, #12
 8003dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd4:	e853 3f00 	ldrex	r3, [r3]
 8003dd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	330c      	adds	r3, #12
 8003de8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dea:	637a      	str	r2, [r7, #52]	; 0x34
 8003dec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003df0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003df2:	e841 2300 	strex	r3, r2, [r1]
 8003df6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1e5      	bne.n	8003dca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3314      	adds	r3, #20
 8003e04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	e853 3f00 	ldrex	r3, [r3]
 8003e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f023 0301 	bic.w	r3, r3, #1
 8003e14:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3314      	adds	r3, #20
 8003e1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e1e:	623a      	str	r2, [r7, #32]
 8003e20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e22:	69f9      	ldr	r1, [r7, #28]
 8003e24:	6a3a      	ldr	r2, [r7, #32]
 8003e26:	e841 2300 	strex	r3, r2, [r1]
 8003e2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1e5      	bne.n	8003dfe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e00f      	b.n	8003e6e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4013      	ands	r3, r2
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	bf0c      	ite	eq
 8003e5e:	2301      	moveq	r3, #1
 8003e60:	2300      	movne	r3, #0
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	461a      	mov	r2, r3
 8003e66:	79fb      	ldrb	r3, [r7, #7]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d09f      	beq.n	8003dac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3740      	adds	r7, #64	; 0x40
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e7c:	b0c0      	sub	sp, #256	; 0x100
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e94:	68d9      	ldr	r1, [r3, #12]
 8003e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	ea40 0301 	orr.w	r3, r0, r1
 8003ea0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ed0:	f021 010c 	bic.w	r1, r1, #12
 8003ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ede:	430b      	orrs	r3, r1
 8003ee0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef2:	6999      	ldr	r1, [r3, #24]
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	ea40 0301 	orr.w	r3, r0, r1
 8003efe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	4b8f      	ldr	r3, [pc, #572]	; (8004144 <UART_SetConfig+0x2cc>)
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d005      	beq.n	8003f18 <UART_SetConfig+0xa0>
 8003f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	4b8d      	ldr	r3, [pc, #564]	; (8004148 <UART_SetConfig+0x2d0>)
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d104      	bne.n	8003f22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f18:	f7fe fe9a 	bl	8002c50 <HAL_RCC_GetPCLK2Freq>
 8003f1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f20:	e003      	b.n	8003f2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f22:	f7fe fe81 	bl	8002c28 <HAL_RCC_GetPCLK1Freq>
 8003f26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f34:	f040 810c 	bne.w	8004150 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f4a:	4622      	mov	r2, r4
 8003f4c:	462b      	mov	r3, r5
 8003f4e:	1891      	adds	r1, r2, r2
 8003f50:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f52:	415b      	adcs	r3, r3
 8003f54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f5a:	4621      	mov	r1, r4
 8003f5c:	eb12 0801 	adds.w	r8, r2, r1
 8003f60:	4629      	mov	r1, r5
 8003f62:	eb43 0901 	adc.w	r9, r3, r1
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f7a:	4690      	mov	r8, r2
 8003f7c:	4699      	mov	r9, r3
 8003f7e:	4623      	mov	r3, r4
 8003f80:	eb18 0303 	adds.w	r3, r8, r3
 8003f84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f88:	462b      	mov	r3, r5
 8003f8a:	eb49 0303 	adc.w	r3, r9, r3
 8003f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003fa2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	18db      	adds	r3, r3, r3
 8003faa:	653b      	str	r3, [r7, #80]	; 0x50
 8003fac:	4613      	mov	r3, r2
 8003fae:	eb42 0303 	adc.w	r3, r2, r3
 8003fb2:	657b      	str	r3, [r7, #84]	; 0x54
 8003fb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003fb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003fbc:	f7fc f960 	bl	8000280 <__aeabi_uldivmod>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4b61      	ldr	r3, [pc, #388]	; (800414c <UART_SetConfig+0x2d4>)
 8003fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8003fca:	095b      	lsrs	r3, r3, #5
 8003fcc:	011c      	lsls	r4, r3, #4
 8003fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fd8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003fdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003fe0:	4642      	mov	r2, r8
 8003fe2:	464b      	mov	r3, r9
 8003fe4:	1891      	adds	r1, r2, r2
 8003fe6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003fe8:	415b      	adcs	r3, r3
 8003fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ff0:	4641      	mov	r1, r8
 8003ff2:	eb12 0a01 	adds.w	sl, r2, r1
 8003ff6:	4649      	mov	r1, r9
 8003ff8:	eb43 0b01 	adc.w	fp, r3, r1
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004008:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800400c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004010:	4692      	mov	sl, r2
 8004012:	469b      	mov	fp, r3
 8004014:	4643      	mov	r3, r8
 8004016:	eb1a 0303 	adds.w	r3, sl, r3
 800401a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800401e:	464b      	mov	r3, r9
 8004020:	eb4b 0303 	adc.w	r3, fp, r3
 8004024:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004034:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004038:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800403c:	460b      	mov	r3, r1
 800403e:	18db      	adds	r3, r3, r3
 8004040:	643b      	str	r3, [r7, #64]	; 0x40
 8004042:	4613      	mov	r3, r2
 8004044:	eb42 0303 	adc.w	r3, r2, r3
 8004048:	647b      	str	r3, [r7, #68]	; 0x44
 800404a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800404e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004052:	f7fc f915 	bl	8000280 <__aeabi_uldivmod>
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	4611      	mov	r1, r2
 800405c:	4b3b      	ldr	r3, [pc, #236]	; (800414c <UART_SetConfig+0x2d4>)
 800405e:	fba3 2301 	umull	r2, r3, r3, r1
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	2264      	movs	r2, #100	; 0x64
 8004066:	fb02 f303 	mul.w	r3, r2, r3
 800406a:	1acb      	subs	r3, r1, r3
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004072:	4b36      	ldr	r3, [pc, #216]	; (800414c <UART_SetConfig+0x2d4>)
 8004074:	fba3 2302 	umull	r2, r3, r3, r2
 8004078:	095b      	lsrs	r3, r3, #5
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004080:	441c      	add	r4, r3
 8004082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004086:	2200      	movs	r2, #0
 8004088:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800408c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004090:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004094:	4642      	mov	r2, r8
 8004096:	464b      	mov	r3, r9
 8004098:	1891      	adds	r1, r2, r2
 800409a:	63b9      	str	r1, [r7, #56]	; 0x38
 800409c:	415b      	adcs	r3, r3
 800409e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040a4:	4641      	mov	r1, r8
 80040a6:	1851      	adds	r1, r2, r1
 80040a8:	6339      	str	r1, [r7, #48]	; 0x30
 80040aa:	4649      	mov	r1, r9
 80040ac:	414b      	adcs	r3, r1
 80040ae:	637b      	str	r3, [r7, #52]	; 0x34
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80040bc:	4659      	mov	r1, fp
 80040be:	00cb      	lsls	r3, r1, #3
 80040c0:	4651      	mov	r1, sl
 80040c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040c6:	4651      	mov	r1, sl
 80040c8:	00ca      	lsls	r2, r1, #3
 80040ca:	4610      	mov	r0, r2
 80040cc:	4619      	mov	r1, r3
 80040ce:	4603      	mov	r3, r0
 80040d0:	4642      	mov	r2, r8
 80040d2:	189b      	adds	r3, r3, r2
 80040d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040d8:	464b      	mov	r3, r9
 80040da:	460a      	mov	r2, r1
 80040dc:	eb42 0303 	adc.w	r3, r2, r3
 80040e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80040f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040f8:	460b      	mov	r3, r1
 80040fa:	18db      	adds	r3, r3, r3
 80040fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80040fe:	4613      	mov	r3, r2
 8004100:	eb42 0303 	adc.w	r3, r2, r3
 8004104:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004106:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800410a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800410e:	f7fc f8b7 	bl	8000280 <__aeabi_uldivmod>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4b0d      	ldr	r3, [pc, #52]	; (800414c <UART_SetConfig+0x2d4>)
 8004118:	fba3 1302 	umull	r1, r3, r3, r2
 800411c:	095b      	lsrs	r3, r3, #5
 800411e:	2164      	movs	r1, #100	; 0x64
 8004120:	fb01 f303 	mul.w	r3, r1, r3
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	3332      	adds	r3, #50	; 0x32
 800412a:	4a08      	ldr	r2, [pc, #32]	; (800414c <UART_SetConfig+0x2d4>)
 800412c:	fba2 2303 	umull	r2, r3, r2, r3
 8004130:	095b      	lsrs	r3, r3, #5
 8004132:	f003 0207 	and.w	r2, r3, #7
 8004136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4422      	add	r2, r4
 800413e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004140:	e105      	b.n	800434e <UART_SetConfig+0x4d6>
 8004142:	bf00      	nop
 8004144:	40011000 	.word	0x40011000
 8004148:	40011400 	.word	0x40011400
 800414c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004154:	2200      	movs	r2, #0
 8004156:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800415a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800415e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004162:	4642      	mov	r2, r8
 8004164:	464b      	mov	r3, r9
 8004166:	1891      	adds	r1, r2, r2
 8004168:	6239      	str	r1, [r7, #32]
 800416a:	415b      	adcs	r3, r3
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
 800416e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004172:	4641      	mov	r1, r8
 8004174:	1854      	adds	r4, r2, r1
 8004176:	4649      	mov	r1, r9
 8004178:	eb43 0501 	adc.w	r5, r3, r1
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	00eb      	lsls	r3, r5, #3
 8004186:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800418a:	00e2      	lsls	r2, r4, #3
 800418c:	4614      	mov	r4, r2
 800418e:	461d      	mov	r5, r3
 8004190:	4643      	mov	r3, r8
 8004192:	18e3      	adds	r3, r4, r3
 8004194:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004198:	464b      	mov	r3, r9
 800419a:	eb45 0303 	adc.w	r3, r5, r3
 800419e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041b2:	f04f 0200 	mov.w	r2, #0
 80041b6:	f04f 0300 	mov.w	r3, #0
 80041ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041be:	4629      	mov	r1, r5
 80041c0:	008b      	lsls	r3, r1, #2
 80041c2:	4621      	mov	r1, r4
 80041c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041c8:	4621      	mov	r1, r4
 80041ca:	008a      	lsls	r2, r1, #2
 80041cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80041d0:	f7fc f856 	bl	8000280 <__aeabi_uldivmod>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	4b60      	ldr	r3, [pc, #384]	; (800435c <UART_SetConfig+0x4e4>)
 80041da:	fba3 2302 	umull	r2, r3, r3, r2
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	011c      	lsls	r4, r3, #4
 80041e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041e6:	2200      	movs	r2, #0
 80041e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80041f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80041f4:	4642      	mov	r2, r8
 80041f6:	464b      	mov	r3, r9
 80041f8:	1891      	adds	r1, r2, r2
 80041fa:	61b9      	str	r1, [r7, #24]
 80041fc:	415b      	adcs	r3, r3
 80041fe:	61fb      	str	r3, [r7, #28]
 8004200:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004204:	4641      	mov	r1, r8
 8004206:	1851      	adds	r1, r2, r1
 8004208:	6139      	str	r1, [r7, #16]
 800420a:	4649      	mov	r1, r9
 800420c:	414b      	adcs	r3, r1
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800421c:	4659      	mov	r1, fp
 800421e:	00cb      	lsls	r3, r1, #3
 8004220:	4651      	mov	r1, sl
 8004222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004226:	4651      	mov	r1, sl
 8004228:	00ca      	lsls	r2, r1, #3
 800422a:	4610      	mov	r0, r2
 800422c:	4619      	mov	r1, r3
 800422e:	4603      	mov	r3, r0
 8004230:	4642      	mov	r2, r8
 8004232:	189b      	adds	r3, r3, r2
 8004234:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004238:	464b      	mov	r3, r9
 800423a:	460a      	mov	r2, r1
 800423c:	eb42 0303 	adc.w	r3, r2, r3
 8004240:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	67bb      	str	r3, [r7, #120]	; 0x78
 800424e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	f04f 0300 	mov.w	r3, #0
 8004258:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800425c:	4649      	mov	r1, r9
 800425e:	008b      	lsls	r3, r1, #2
 8004260:	4641      	mov	r1, r8
 8004262:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004266:	4641      	mov	r1, r8
 8004268:	008a      	lsls	r2, r1, #2
 800426a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800426e:	f7fc f807 	bl	8000280 <__aeabi_uldivmod>
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	4b39      	ldr	r3, [pc, #228]	; (800435c <UART_SetConfig+0x4e4>)
 8004278:	fba3 1302 	umull	r1, r3, r3, r2
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	2164      	movs	r1, #100	; 0x64
 8004280:	fb01 f303 	mul.w	r3, r1, r3
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	3332      	adds	r3, #50	; 0x32
 800428a:	4a34      	ldr	r2, [pc, #208]	; (800435c <UART_SetConfig+0x4e4>)
 800428c:	fba2 2303 	umull	r2, r3, r2, r3
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004296:	441c      	add	r4, r3
 8004298:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800429c:	2200      	movs	r2, #0
 800429e:	673b      	str	r3, [r7, #112]	; 0x70
 80042a0:	677a      	str	r2, [r7, #116]	; 0x74
 80042a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80042a6:	4642      	mov	r2, r8
 80042a8:	464b      	mov	r3, r9
 80042aa:	1891      	adds	r1, r2, r2
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	415b      	adcs	r3, r3
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042b6:	4641      	mov	r1, r8
 80042b8:	1851      	adds	r1, r2, r1
 80042ba:	6039      	str	r1, [r7, #0]
 80042bc:	4649      	mov	r1, r9
 80042be:	414b      	adcs	r3, r1
 80042c0:	607b      	str	r3, [r7, #4]
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042ce:	4659      	mov	r1, fp
 80042d0:	00cb      	lsls	r3, r1, #3
 80042d2:	4651      	mov	r1, sl
 80042d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042d8:	4651      	mov	r1, sl
 80042da:	00ca      	lsls	r2, r1, #3
 80042dc:	4610      	mov	r0, r2
 80042de:	4619      	mov	r1, r3
 80042e0:	4603      	mov	r3, r0
 80042e2:	4642      	mov	r2, r8
 80042e4:	189b      	adds	r3, r3, r2
 80042e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80042e8:	464b      	mov	r3, r9
 80042ea:	460a      	mov	r2, r1
 80042ec:	eb42 0303 	adc.w	r3, r2, r3
 80042f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	663b      	str	r3, [r7, #96]	; 0x60
 80042fc:	667a      	str	r2, [r7, #100]	; 0x64
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	f04f 0300 	mov.w	r3, #0
 8004306:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800430a:	4649      	mov	r1, r9
 800430c:	008b      	lsls	r3, r1, #2
 800430e:	4641      	mov	r1, r8
 8004310:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004314:	4641      	mov	r1, r8
 8004316:	008a      	lsls	r2, r1, #2
 8004318:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800431c:	f7fb ffb0 	bl	8000280 <__aeabi_uldivmod>
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	4b0d      	ldr	r3, [pc, #52]	; (800435c <UART_SetConfig+0x4e4>)
 8004326:	fba3 1302 	umull	r1, r3, r3, r2
 800432a:	095b      	lsrs	r3, r3, #5
 800432c:	2164      	movs	r1, #100	; 0x64
 800432e:	fb01 f303 	mul.w	r3, r1, r3
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	3332      	adds	r3, #50	; 0x32
 8004338:	4a08      	ldr	r2, [pc, #32]	; (800435c <UART_SetConfig+0x4e4>)
 800433a:	fba2 2303 	umull	r2, r3, r2, r3
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	f003 020f 	and.w	r2, r3, #15
 8004344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4422      	add	r2, r4
 800434c:	609a      	str	r2, [r3, #8]
}
 800434e:	bf00      	nop
 8004350:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004354:	46bd      	mov	sp, r7
 8004356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800435a:	bf00      	nop
 800435c:	51eb851f 	.word	0x51eb851f

08004360 <__errno>:
 8004360:	4b01      	ldr	r3, [pc, #4]	; (8004368 <__errno+0x8>)
 8004362:	6818      	ldr	r0, [r3, #0]
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	2000000c 	.word	0x2000000c

0800436c <__libc_init_array>:
 800436c:	b570      	push	{r4, r5, r6, lr}
 800436e:	4d0d      	ldr	r5, [pc, #52]	; (80043a4 <__libc_init_array+0x38>)
 8004370:	4c0d      	ldr	r4, [pc, #52]	; (80043a8 <__libc_init_array+0x3c>)
 8004372:	1b64      	subs	r4, r4, r5
 8004374:	10a4      	asrs	r4, r4, #2
 8004376:	2600      	movs	r6, #0
 8004378:	42a6      	cmp	r6, r4
 800437a:	d109      	bne.n	8004390 <__libc_init_array+0x24>
 800437c:	4d0b      	ldr	r5, [pc, #44]	; (80043ac <__libc_init_array+0x40>)
 800437e:	4c0c      	ldr	r4, [pc, #48]	; (80043b0 <__libc_init_array+0x44>)
 8004380:	f000 fc8e 	bl	8004ca0 <_init>
 8004384:	1b64      	subs	r4, r4, r5
 8004386:	10a4      	asrs	r4, r4, #2
 8004388:	2600      	movs	r6, #0
 800438a:	42a6      	cmp	r6, r4
 800438c:	d105      	bne.n	800439a <__libc_init_array+0x2e>
 800438e:	bd70      	pop	{r4, r5, r6, pc}
 8004390:	f855 3b04 	ldr.w	r3, [r5], #4
 8004394:	4798      	blx	r3
 8004396:	3601      	adds	r6, #1
 8004398:	e7ee      	b.n	8004378 <__libc_init_array+0xc>
 800439a:	f855 3b04 	ldr.w	r3, [r5], #4
 800439e:	4798      	blx	r3
 80043a0:	3601      	adds	r6, #1
 80043a2:	e7f2      	b.n	800438a <__libc_init_array+0x1e>
 80043a4:	08005ff8 	.word	0x08005ff8
 80043a8:	08005ff8 	.word	0x08005ff8
 80043ac:	08005ff8 	.word	0x08005ff8
 80043b0:	08005ffc 	.word	0x08005ffc

080043b4 <memset>:
 80043b4:	4402      	add	r2, r0
 80043b6:	4603      	mov	r3, r0
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d100      	bne.n	80043be <memset+0xa>
 80043bc:	4770      	bx	lr
 80043be:	f803 1b01 	strb.w	r1, [r3], #1
 80043c2:	e7f9      	b.n	80043b8 <memset+0x4>

080043c4 <siprintf>:
 80043c4:	b40e      	push	{r1, r2, r3}
 80043c6:	b500      	push	{lr}
 80043c8:	b09c      	sub	sp, #112	; 0x70
 80043ca:	ab1d      	add	r3, sp, #116	; 0x74
 80043cc:	9002      	str	r0, [sp, #8]
 80043ce:	9006      	str	r0, [sp, #24]
 80043d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043d4:	4809      	ldr	r0, [pc, #36]	; (80043fc <siprintf+0x38>)
 80043d6:	9107      	str	r1, [sp, #28]
 80043d8:	9104      	str	r1, [sp, #16]
 80043da:	4909      	ldr	r1, [pc, #36]	; (8004400 <siprintf+0x3c>)
 80043dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80043e0:	9105      	str	r1, [sp, #20]
 80043e2:	6800      	ldr	r0, [r0, #0]
 80043e4:	9301      	str	r3, [sp, #4]
 80043e6:	a902      	add	r1, sp, #8
 80043e8:	f000 f868 	bl	80044bc <_svfiprintf_r>
 80043ec:	9b02      	ldr	r3, [sp, #8]
 80043ee:	2200      	movs	r2, #0
 80043f0:	701a      	strb	r2, [r3, #0]
 80043f2:	b01c      	add	sp, #112	; 0x70
 80043f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80043f8:	b003      	add	sp, #12
 80043fa:	4770      	bx	lr
 80043fc:	2000000c 	.word	0x2000000c
 8004400:	ffff0208 	.word	0xffff0208

08004404 <__ssputs_r>:
 8004404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004408:	688e      	ldr	r6, [r1, #8]
 800440a:	429e      	cmp	r6, r3
 800440c:	4682      	mov	sl, r0
 800440e:	460c      	mov	r4, r1
 8004410:	4690      	mov	r8, r2
 8004412:	461f      	mov	r7, r3
 8004414:	d838      	bhi.n	8004488 <__ssputs_r+0x84>
 8004416:	898a      	ldrh	r2, [r1, #12]
 8004418:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800441c:	d032      	beq.n	8004484 <__ssputs_r+0x80>
 800441e:	6825      	ldr	r5, [r4, #0]
 8004420:	6909      	ldr	r1, [r1, #16]
 8004422:	eba5 0901 	sub.w	r9, r5, r1
 8004426:	6965      	ldr	r5, [r4, #20]
 8004428:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800442c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004430:	3301      	adds	r3, #1
 8004432:	444b      	add	r3, r9
 8004434:	106d      	asrs	r5, r5, #1
 8004436:	429d      	cmp	r5, r3
 8004438:	bf38      	it	cc
 800443a:	461d      	movcc	r5, r3
 800443c:	0553      	lsls	r3, r2, #21
 800443e:	d531      	bpl.n	80044a4 <__ssputs_r+0xa0>
 8004440:	4629      	mov	r1, r5
 8004442:	f000 fb63 	bl	8004b0c <_malloc_r>
 8004446:	4606      	mov	r6, r0
 8004448:	b950      	cbnz	r0, 8004460 <__ssputs_r+0x5c>
 800444a:	230c      	movs	r3, #12
 800444c:	f8ca 3000 	str.w	r3, [sl]
 8004450:	89a3      	ldrh	r3, [r4, #12]
 8004452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004456:	81a3      	strh	r3, [r4, #12]
 8004458:	f04f 30ff 	mov.w	r0, #4294967295
 800445c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004460:	6921      	ldr	r1, [r4, #16]
 8004462:	464a      	mov	r2, r9
 8004464:	f000 fabe 	bl	80049e4 <memcpy>
 8004468:	89a3      	ldrh	r3, [r4, #12]
 800446a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800446e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004472:	81a3      	strh	r3, [r4, #12]
 8004474:	6126      	str	r6, [r4, #16]
 8004476:	6165      	str	r5, [r4, #20]
 8004478:	444e      	add	r6, r9
 800447a:	eba5 0509 	sub.w	r5, r5, r9
 800447e:	6026      	str	r6, [r4, #0]
 8004480:	60a5      	str	r5, [r4, #8]
 8004482:	463e      	mov	r6, r7
 8004484:	42be      	cmp	r6, r7
 8004486:	d900      	bls.n	800448a <__ssputs_r+0x86>
 8004488:	463e      	mov	r6, r7
 800448a:	6820      	ldr	r0, [r4, #0]
 800448c:	4632      	mov	r2, r6
 800448e:	4641      	mov	r1, r8
 8004490:	f000 fab6 	bl	8004a00 <memmove>
 8004494:	68a3      	ldr	r3, [r4, #8]
 8004496:	1b9b      	subs	r3, r3, r6
 8004498:	60a3      	str	r3, [r4, #8]
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	4433      	add	r3, r6
 800449e:	6023      	str	r3, [r4, #0]
 80044a0:	2000      	movs	r0, #0
 80044a2:	e7db      	b.n	800445c <__ssputs_r+0x58>
 80044a4:	462a      	mov	r2, r5
 80044a6:	f000 fba5 	bl	8004bf4 <_realloc_r>
 80044aa:	4606      	mov	r6, r0
 80044ac:	2800      	cmp	r0, #0
 80044ae:	d1e1      	bne.n	8004474 <__ssputs_r+0x70>
 80044b0:	6921      	ldr	r1, [r4, #16]
 80044b2:	4650      	mov	r0, sl
 80044b4:	f000 fabe 	bl	8004a34 <_free_r>
 80044b8:	e7c7      	b.n	800444a <__ssputs_r+0x46>
	...

080044bc <_svfiprintf_r>:
 80044bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c0:	4698      	mov	r8, r3
 80044c2:	898b      	ldrh	r3, [r1, #12]
 80044c4:	061b      	lsls	r3, r3, #24
 80044c6:	b09d      	sub	sp, #116	; 0x74
 80044c8:	4607      	mov	r7, r0
 80044ca:	460d      	mov	r5, r1
 80044cc:	4614      	mov	r4, r2
 80044ce:	d50e      	bpl.n	80044ee <_svfiprintf_r+0x32>
 80044d0:	690b      	ldr	r3, [r1, #16]
 80044d2:	b963      	cbnz	r3, 80044ee <_svfiprintf_r+0x32>
 80044d4:	2140      	movs	r1, #64	; 0x40
 80044d6:	f000 fb19 	bl	8004b0c <_malloc_r>
 80044da:	6028      	str	r0, [r5, #0]
 80044dc:	6128      	str	r0, [r5, #16]
 80044de:	b920      	cbnz	r0, 80044ea <_svfiprintf_r+0x2e>
 80044e0:	230c      	movs	r3, #12
 80044e2:	603b      	str	r3, [r7, #0]
 80044e4:	f04f 30ff 	mov.w	r0, #4294967295
 80044e8:	e0d1      	b.n	800468e <_svfiprintf_r+0x1d2>
 80044ea:	2340      	movs	r3, #64	; 0x40
 80044ec:	616b      	str	r3, [r5, #20]
 80044ee:	2300      	movs	r3, #0
 80044f0:	9309      	str	r3, [sp, #36]	; 0x24
 80044f2:	2320      	movs	r3, #32
 80044f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80044fc:	2330      	movs	r3, #48	; 0x30
 80044fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80046a8 <_svfiprintf_r+0x1ec>
 8004502:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004506:	f04f 0901 	mov.w	r9, #1
 800450a:	4623      	mov	r3, r4
 800450c:	469a      	mov	sl, r3
 800450e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004512:	b10a      	cbz	r2, 8004518 <_svfiprintf_r+0x5c>
 8004514:	2a25      	cmp	r2, #37	; 0x25
 8004516:	d1f9      	bne.n	800450c <_svfiprintf_r+0x50>
 8004518:	ebba 0b04 	subs.w	fp, sl, r4
 800451c:	d00b      	beq.n	8004536 <_svfiprintf_r+0x7a>
 800451e:	465b      	mov	r3, fp
 8004520:	4622      	mov	r2, r4
 8004522:	4629      	mov	r1, r5
 8004524:	4638      	mov	r0, r7
 8004526:	f7ff ff6d 	bl	8004404 <__ssputs_r>
 800452a:	3001      	adds	r0, #1
 800452c:	f000 80aa 	beq.w	8004684 <_svfiprintf_r+0x1c8>
 8004530:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004532:	445a      	add	r2, fp
 8004534:	9209      	str	r2, [sp, #36]	; 0x24
 8004536:	f89a 3000 	ldrb.w	r3, [sl]
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 80a2 	beq.w	8004684 <_svfiprintf_r+0x1c8>
 8004540:	2300      	movs	r3, #0
 8004542:	f04f 32ff 	mov.w	r2, #4294967295
 8004546:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800454a:	f10a 0a01 	add.w	sl, sl, #1
 800454e:	9304      	str	r3, [sp, #16]
 8004550:	9307      	str	r3, [sp, #28]
 8004552:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004556:	931a      	str	r3, [sp, #104]	; 0x68
 8004558:	4654      	mov	r4, sl
 800455a:	2205      	movs	r2, #5
 800455c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004560:	4851      	ldr	r0, [pc, #324]	; (80046a8 <_svfiprintf_r+0x1ec>)
 8004562:	f7fb fe3d 	bl	80001e0 <memchr>
 8004566:	9a04      	ldr	r2, [sp, #16]
 8004568:	b9d8      	cbnz	r0, 80045a2 <_svfiprintf_r+0xe6>
 800456a:	06d0      	lsls	r0, r2, #27
 800456c:	bf44      	itt	mi
 800456e:	2320      	movmi	r3, #32
 8004570:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004574:	0711      	lsls	r1, r2, #28
 8004576:	bf44      	itt	mi
 8004578:	232b      	movmi	r3, #43	; 0x2b
 800457a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800457e:	f89a 3000 	ldrb.w	r3, [sl]
 8004582:	2b2a      	cmp	r3, #42	; 0x2a
 8004584:	d015      	beq.n	80045b2 <_svfiprintf_r+0xf6>
 8004586:	9a07      	ldr	r2, [sp, #28]
 8004588:	4654      	mov	r4, sl
 800458a:	2000      	movs	r0, #0
 800458c:	f04f 0c0a 	mov.w	ip, #10
 8004590:	4621      	mov	r1, r4
 8004592:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004596:	3b30      	subs	r3, #48	; 0x30
 8004598:	2b09      	cmp	r3, #9
 800459a:	d94e      	bls.n	800463a <_svfiprintf_r+0x17e>
 800459c:	b1b0      	cbz	r0, 80045cc <_svfiprintf_r+0x110>
 800459e:	9207      	str	r2, [sp, #28]
 80045a0:	e014      	b.n	80045cc <_svfiprintf_r+0x110>
 80045a2:	eba0 0308 	sub.w	r3, r0, r8
 80045a6:	fa09 f303 	lsl.w	r3, r9, r3
 80045aa:	4313      	orrs	r3, r2
 80045ac:	9304      	str	r3, [sp, #16]
 80045ae:	46a2      	mov	sl, r4
 80045b0:	e7d2      	b.n	8004558 <_svfiprintf_r+0x9c>
 80045b2:	9b03      	ldr	r3, [sp, #12]
 80045b4:	1d19      	adds	r1, r3, #4
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	9103      	str	r1, [sp, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	bfbb      	ittet	lt
 80045be:	425b      	neglt	r3, r3
 80045c0:	f042 0202 	orrlt.w	r2, r2, #2
 80045c4:	9307      	strge	r3, [sp, #28]
 80045c6:	9307      	strlt	r3, [sp, #28]
 80045c8:	bfb8      	it	lt
 80045ca:	9204      	strlt	r2, [sp, #16]
 80045cc:	7823      	ldrb	r3, [r4, #0]
 80045ce:	2b2e      	cmp	r3, #46	; 0x2e
 80045d0:	d10c      	bne.n	80045ec <_svfiprintf_r+0x130>
 80045d2:	7863      	ldrb	r3, [r4, #1]
 80045d4:	2b2a      	cmp	r3, #42	; 0x2a
 80045d6:	d135      	bne.n	8004644 <_svfiprintf_r+0x188>
 80045d8:	9b03      	ldr	r3, [sp, #12]
 80045da:	1d1a      	adds	r2, r3, #4
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	9203      	str	r2, [sp, #12]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	bfb8      	it	lt
 80045e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80045e8:	3402      	adds	r4, #2
 80045ea:	9305      	str	r3, [sp, #20]
 80045ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80046b8 <_svfiprintf_r+0x1fc>
 80045f0:	7821      	ldrb	r1, [r4, #0]
 80045f2:	2203      	movs	r2, #3
 80045f4:	4650      	mov	r0, sl
 80045f6:	f7fb fdf3 	bl	80001e0 <memchr>
 80045fa:	b140      	cbz	r0, 800460e <_svfiprintf_r+0x152>
 80045fc:	2340      	movs	r3, #64	; 0x40
 80045fe:	eba0 000a 	sub.w	r0, r0, sl
 8004602:	fa03 f000 	lsl.w	r0, r3, r0
 8004606:	9b04      	ldr	r3, [sp, #16]
 8004608:	4303      	orrs	r3, r0
 800460a:	3401      	adds	r4, #1
 800460c:	9304      	str	r3, [sp, #16]
 800460e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004612:	4826      	ldr	r0, [pc, #152]	; (80046ac <_svfiprintf_r+0x1f0>)
 8004614:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004618:	2206      	movs	r2, #6
 800461a:	f7fb fde1 	bl	80001e0 <memchr>
 800461e:	2800      	cmp	r0, #0
 8004620:	d038      	beq.n	8004694 <_svfiprintf_r+0x1d8>
 8004622:	4b23      	ldr	r3, [pc, #140]	; (80046b0 <_svfiprintf_r+0x1f4>)
 8004624:	bb1b      	cbnz	r3, 800466e <_svfiprintf_r+0x1b2>
 8004626:	9b03      	ldr	r3, [sp, #12]
 8004628:	3307      	adds	r3, #7
 800462a:	f023 0307 	bic.w	r3, r3, #7
 800462e:	3308      	adds	r3, #8
 8004630:	9303      	str	r3, [sp, #12]
 8004632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004634:	4433      	add	r3, r6
 8004636:	9309      	str	r3, [sp, #36]	; 0x24
 8004638:	e767      	b.n	800450a <_svfiprintf_r+0x4e>
 800463a:	fb0c 3202 	mla	r2, ip, r2, r3
 800463e:	460c      	mov	r4, r1
 8004640:	2001      	movs	r0, #1
 8004642:	e7a5      	b.n	8004590 <_svfiprintf_r+0xd4>
 8004644:	2300      	movs	r3, #0
 8004646:	3401      	adds	r4, #1
 8004648:	9305      	str	r3, [sp, #20]
 800464a:	4619      	mov	r1, r3
 800464c:	f04f 0c0a 	mov.w	ip, #10
 8004650:	4620      	mov	r0, r4
 8004652:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004656:	3a30      	subs	r2, #48	; 0x30
 8004658:	2a09      	cmp	r2, #9
 800465a:	d903      	bls.n	8004664 <_svfiprintf_r+0x1a8>
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0c5      	beq.n	80045ec <_svfiprintf_r+0x130>
 8004660:	9105      	str	r1, [sp, #20]
 8004662:	e7c3      	b.n	80045ec <_svfiprintf_r+0x130>
 8004664:	fb0c 2101 	mla	r1, ip, r1, r2
 8004668:	4604      	mov	r4, r0
 800466a:	2301      	movs	r3, #1
 800466c:	e7f0      	b.n	8004650 <_svfiprintf_r+0x194>
 800466e:	ab03      	add	r3, sp, #12
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	462a      	mov	r2, r5
 8004674:	4b0f      	ldr	r3, [pc, #60]	; (80046b4 <_svfiprintf_r+0x1f8>)
 8004676:	a904      	add	r1, sp, #16
 8004678:	4638      	mov	r0, r7
 800467a:	f3af 8000 	nop.w
 800467e:	1c42      	adds	r2, r0, #1
 8004680:	4606      	mov	r6, r0
 8004682:	d1d6      	bne.n	8004632 <_svfiprintf_r+0x176>
 8004684:	89ab      	ldrh	r3, [r5, #12]
 8004686:	065b      	lsls	r3, r3, #25
 8004688:	f53f af2c 	bmi.w	80044e4 <_svfiprintf_r+0x28>
 800468c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800468e:	b01d      	add	sp, #116	; 0x74
 8004690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004694:	ab03      	add	r3, sp, #12
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	462a      	mov	r2, r5
 800469a:	4b06      	ldr	r3, [pc, #24]	; (80046b4 <_svfiprintf_r+0x1f8>)
 800469c:	a904      	add	r1, sp, #16
 800469e:	4638      	mov	r0, r7
 80046a0:	f000 f87a 	bl	8004798 <_printf_i>
 80046a4:	e7eb      	b.n	800467e <_svfiprintf_r+0x1c2>
 80046a6:	bf00      	nop
 80046a8:	08005fbc 	.word	0x08005fbc
 80046ac:	08005fc6 	.word	0x08005fc6
 80046b0:	00000000 	.word	0x00000000
 80046b4:	08004405 	.word	0x08004405
 80046b8:	08005fc2 	.word	0x08005fc2

080046bc <_printf_common>:
 80046bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046c0:	4616      	mov	r6, r2
 80046c2:	4699      	mov	r9, r3
 80046c4:	688a      	ldr	r2, [r1, #8]
 80046c6:	690b      	ldr	r3, [r1, #16]
 80046c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046cc:	4293      	cmp	r3, r2
 80046ce:	bfb8      	it	lt
 80046d0:	4613      	movlt	r3, r2
 80046d2:	6033      	str	r3, [r6, #0]
 80046d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046d8:	4607      	mov	r7, r0
 80046da:	460c      	mov	r4, r1
 80046dc:	b10a      	cbz	r2, 80046e2 <_printf_common+0x26>
 80046de:	3301      	adds	r3, #1
 80046e0:	6033      	str	r3, [r6, #0]
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	0699      	lsls	r1, r3, #26
 80046e6:	bf42      	ittt	mi
 80046e8:	6833      	ldrmi	r3, [r6, #0]
 80046ea:	3302      	addmi	r3, #2
 80046ec:	6033      	strmi	r3, [r6, #0]
 80046ee:	6825      	ldr	r5, [r4, #0]
 80046f0:	f015 0506 	ands.w	r5, r5, #6
 80046f4:	d106      	bne.n	8004704 <_printf_common+0x48>
 80046f6:	f104 0a19 	add.w	sl, r4, #25
 80046fa:	68e3      	ldr	r3, [r4, #12]
 80046fc:	6832      	ldr	r2, [r6, #0]
 80046fe:	1a9b      	subs	r3, r3, r2
 8004700:	42ab      	cmp	r3, r5
 8004702:	dc26      	bgt.n	8004752 <_printf_common+0x96>
 8004704:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004708:	1e13      	subs	r3, r2, #0
 800470a:	6822      	ldr	r2, [r4, #0]
 800470c:	bf18      	it	ne
 800470e:	2301      	movne	r3, #1
 8004710:	0692      	lsls	r2, r2, #26
 8004712:	d42b      	bmi.n	800476c <_printf_common+0xb0>
 8004714:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004718:	4649      	mov	r1, r9
 800471a:	4638      	mov	r0, r7
 800471c:	47c0      	blx	r8
 800471e:	3001      	adds	r0, #1
 8004720:	d01e      	beq.n	8004760 <_printf_common+0xa4>
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	68e5      	ldr	r5, [r4, #12]
 8004726:	6832      	ldr	r2, [r6, #0]
 8004728:	f003 0306 	and.w	r3, r3, #6
 800472c:	2b04      	cmp	r3, #4
 800472e:	bf08      	it	eq
 8004730:	1aad      	subeq	r5, r5, r2
 8004732:	68a3      	ldr	r3, [r4, #8]
 8004734:	6922      	ldr	r2, [r4, #16]
 8004736:	bf0c      	ite	eq
 8004738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800473c:	2500      	movne	r5, #0
 800473e:	4293      	cmp	r3, r2
 8004740:	bfc4      	itt	gt
 8004742:	1a9b      	subgt	r3, r3, r2
 8004744:	18ed      	addgt	r5, r5, r3
 8004746:	2600      	movs	r6, #0
 8004748:	341a      	adds	r4, #26
 800474a:	42b5      	cmp	r5, r6
 800474c:	d11a      	bne.n	8004784 <_printf_common+0xc8>
 800474e:	2000      	movs	r0, #0
 8004750:	e008      	b.n	8004764 <_printf_common+0xa8>
 8004752:	2301      	movs	r3, #1
 8004754:	4652      	mov	r2, sl
 8004756:	4649      	mov	r1, r9
 8004758:	4638      	mov	r0, r7
 800475a:	47c0      	blx	r8
 800475c:	3001      	adds	r0, #1
 800475e:	d103      	bne.n	8004768 <_printf_common+0xac>
 8004760:	f04f 30ff 	mov.w	r0, #4294967295
 8004764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004768:	3501      	adds	r5, #1
 800476a:	e7c6      	b.n	80046fa <_printf_common+0x3e>
 800476c:	18e1      	adds	r1, r4, r3
 800476e:	1c5a      	adds	r2, r3, #1
 8004770:	2030      	movs	r0, #48	; 0x30
 8004772:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004776:	4422      	add	r2, r4
 8004778:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800477c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004780:	3302      	adds	r3, #2
 8004782:	e7c7      	b.n	8004714 <_printf_common+0x58>
 8004784:	2301      	movs	r3, #1
 8004786:	4622      	mov	r2, r4
 8004788:	4649      	mov	r1, r9
 800478a:	4638      	mov	r0, r7
 800478c:	47c0      	blx	r8
 800478e:	3001      	adds	r0, #1
 8004790:	d0e6      	beq.n	8004760 <_printf_common+0xa4>
 8004792:	3601      	adds	r6, #1
 8004794:	e7d9      	b.n	800474a <_printf_common+0x8e>
	...

08004798 <_printf_i>:
 8004798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800479c:	7e0f      	ldrb	r7, [r1, #24]
 800479e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047a0:	2f78      	cmp	r7, #120	; 0x78
 80047a2:	4691      	mov	r9, r2
 80047a4:	4680      	mov	r8, r0
 80047a6:	460c      	mov	r4, r1
 80047a8:	469a      	mov	sl, r3
 80047aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047ae:	d807      	bhi.n	80047c0 <_printf_i+0x28>
 80047b0:	2f62      	cmp	r7, #98	; 0x62
 80047b2:	d80a      	bhi.n	80047ca <_printf_i+0x32>
 80047b4:	2f00      	cmp	r7, #0
 80047b6:	f000 80d8 	beq.w	800496a <_printf_i+0x1d2>
 80047ba:	2f58      	cmp	r7, #88	; 0x58
 80047bc:	f000 80a3 	beq.w	8004906 <_printf_i+0x16e>
 80047c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047c8:	e03a      	b.n	8004840 <_printf_i+0xa8>
 80047ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047ce:	2b15      	cmp	r3, #21
 80047d0:	d8f6      	bhi.n	80047c0 <_printf_i+0x28>
 80047d2:	a101      	add	r1, pc, #4	; (adr r1, 80047d8 <_printf_i+0x40>)
 80047d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047d8:	08004831 	.word	0x08004831
 80047dc:	08004845 	.word	0x08004845
 80047e0:	080047c1 	.word	0x080047c1
 80047e4:	080047c1 	.word	0x080047c1
 80047e8:	080047c1 	.word	0x080047c1
 80047ec:	080047c1 	.word	0x080047c1
 80047f0:	08004845 	.word	0x08004845
 80047f4:	080047c1 	.word	0x080047c1
 80047f8:	080047c1 	.word	0x080047c1
 80047fc:	080047c1 	.word	0x080047c1
 8004800:	080047c1 	.word	0x080047c1
 8004804:	08004951 	.word	0x08004951
 8004808:	08004875 	.word	0x08004875
 800480c:	08004933 	.word	0x08004933
 8004810:	080047c1 	.word	0x080047c1
 8004814:	080047c1 	.word	0x080047c1
 8004818:	08004973 	.word	0x08004973
 800481c:	080047c1 	.word	0x080047c1
 8004820:	08004875 	.word	0x08004875
 8004824:	080047c1 	.word	0x080047c1
 8004828:	080047c1 	.word	0x080047c1
 800482c:	0800493b 	.word	0x0800493b
 8004830:	682b      	ldr	r3, [r5, #0]
 8004832:	1d1a      	adds	r2, r3, #4
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	602a      	str	r2, [r5, #0]
 8004838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800483c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004840:	2301      	movs	r3, #1
 8004842:	e0a3      	b.n	800498c <_printf_i+0x1f4>
 8004844:	6820      	ldr	r0, [r4, #0]
 8004846:	6829      	ldr	r1, [r5, #0]
 8004848:	0606      	lsls	r6, r0, #24
 800484a:	f101 0304 	add.w	r3, r1, #4
 800484e:	d50a      	bpl.n	8004866 <_printf_i+0xce>
 8004850:	680e      	ldr	r6, [r1, #0]
 8004852:	602b      	str	r3, [r5, #0]
 8004854:	2e00      	cmp	r6, #0
 8004856:	da03      	bge.n	8004860 <_printf_i+0xc8>
 8004858:	232d      	movs	r3, #45	; 0x2d
 800485a:	4276      	negs	r6, r6
 800485c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004860:	485e      	ldr	r0, [pc, #376]	; (80049dc <_printf_i+0x244>)
 8004862:	230a      	movs	r3, #10
 8004864:	e019      	b.n	800489a <_printf_i+0x102>
 8004866:	680e      	ldr	r6, [r1, #0]
 8004868:	602b      	str	r3, [r5, #0]
 800486a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800486e:	bf18      	it	ne
 8004870:	b236      	sxthne	r6, r6
 8004872:	e7ef      	b.n	8004854 <_printf_i+0xbc>
 8004874:	682b      	ldr	r3, [r5, #0]
 8004876:	6820      	ldr	r0, [r4, #0]
 8004878:	1d19      	adds	r1, r3, #4
 800487a:	6029      	str	r1, [r5, #0]
 800487c:	0601      	lsls	r1, r0, #24
 800487e:	d501      	bpl.n	8004884 <_printf_i+0xec>
 8004880:	681e      	ldr	r6, [r3, #0]
 8004882:	e002      	b.n	800488a <_printf_i+0xf2>
 8004884:	0646      	lsls	r6, r0, #25
 8004886:	d5fb      	bpl.n	8004880 <_printf_i+0xe8>
 8004888:	881e      	ldrh	r6, [r3, #0]
 800488a:	4854      	ldr	r0, [pc, #336]	; (80049dc <_printf_i+0x244>)
 800488c:	2f6f      	cmp	r7, #111	; 0x6f
 800488e:	bf0c      	ite	eq
 8004890:	2308      	moveq	r3, #8
 8004892:	230a      	movne	r3, #10
 8004894:	2100      	movs	r1, #0
 8004896:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800489a:	6865      	ldr	r5, [r4, #4]
 800489c:	60a5      	str	r5, [r4, #8]
 800489e:	2d00      	cmp	r5, #0
 80048a0:	bfa2      	ittt	ge
 80048a2:	6821      	ldrge	r1, [r4, #0]
 80048a4:	f021 0104 	bicge.w	r1, r1, #4
 80048a8:	6021      	strge	r1, [r4, #0]
 80048aa:	b90e      	cbnz	r6, 80048b0 <_printf_i+0x118>
 80048ac:	2d00      	cmp	r5, #0
 80048ae:	d04d      	beq.n	800494c <_printf_i+0x1b4>
 80048b0:	4615      	mov	r5, r2
 80048b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80048b6:	fb03 6711 	mls	r7, r3, r1, r6
 80048ba:	5dc7      	ldrb	r7, [r0, r7]
 80048bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80048c0:	4637      	mov	r7, r6
 80048c2:	42bb      	cmp	r3, r7
 80048c4:	460e      	mov	r6, r1
 80048c6:	d9f4      	bls.n	80048b2 <_printf_i+0x11a>
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d10b      	bne.n	80048e4 <_printf_i+0x14c>
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	07de      	lsls	r6, r3, #31
 80048d0:	d508      	bpl.n	80048e4 <_printf_i+0x14c>
 80048d2:	6923      	ldr	r3, [r4, #16]
 80048d4:	6861      	ldr	r1, [r4, #4]
 80048d6:	4299      	cmp	r1, r3
 80048d8:	bfde      	ittt	le
 80048da:	2330      	movle	r3, #48	; 0x30
 80048dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80048e4:	1b52      	subs	r2, r2, r5
 80048e6:	6122      	str	r2, [r4, #16]
 80048e8:	f8cd a000 	str.w	sl, [sp]
 80048ec:	464b      	mov	r3, r9
 80048ee:	aa03      	add	r2, sp, #12
 80048f0:	4621      	mov	r1, r4
 80048f2:	4640      	mov	r0, r8
 80048f4:	f7ff fee2 	bl	80046bc <_printf_common>
 80048f8:	3001      	adds	r0, #1
 80048fa:	d14c      	bne.n	8004996 <_printf_i+0x1fe>
 80048fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004900:	b004      	add	sp, #16
 8004902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004906:	4835      	ldr	r0, [pc, #212]	; (80049dc <_printf_i+0x244>)
 8004908:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800490c:	6829      	ldr	r1, [r5, #0]
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	f851 6b04 	ldr.w	r6, [r1], #4
 8004914:	6029      	str	r1, [r5, #0]
 8004916:	061d      	lsls	r5, r3, #24
 8004918:	d514      	bpl.n	8004944 <_printf_i+0x1ac>
 800491a:	07df      	lsls	r7, r3, #31
 800491c:	bf44      	itt	mi
 800491e:	f043 0320 	orrmi.w	r3, r3, #32
 8004922:	6023      	strmi	r3, [r4, #0]
 8004924:	b91e      	cbnz	r6, 800492e <_printf_i+0x196>
 8004926:	6823      	ldr	r3, [r4, #0]
 8004928:	f023 0320 	bic.w	r3, r3, #32
 800492c:	6023      	str	r3, [r4, #0]
 800492e:	2310      	movs	r3, #16
 8004930:	e7b0      	b.n	8004894 <_printf_i+0xfc>
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	f043 0320 	orr.w	r3, r3, #32
 8004938:	6023      	str	r3, [r4, #0]
 800493a:	2378      	movs	r3, #120	; 0x78
 800493c:	4828      	ldr	r0, [pc, #160]	; (80049e0 <_printf_i+0x248>)
 800493e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004942:	e7e3      	b.n	800490c <_printf_i+0x174>
 8004944:	0659      	lsls	r1, r3, #25
 8004946:	bf48      	it	mi
 8004948:	b2b6      	uxthmi	r6, r6
 800494a:	e7e6      	b.n	800491a <_printf_i+0x182>
 800494c:	4615      	mov	r5, r2
 800494e:	e7bb      	b.n	80048c8 <_printf_i+0x130>
 8004950:	682b      	ldr	r3, [r5, #0]
 8004952:	6826      	ldr	r6, [r4, #0]
 8004954:	6961      	ldr	r1, [r4, #20]
 8004956:	1d18      	adds	r0, r3, #4
 8004958:	6028      	str	r0, [r5, #0]
 800495a:	0635      	lsls	r5, r6, #24
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	d501      	bpl.n	8004964 <_printf_i+0x1cc>
 8004960:	6019      	str	r1, [r3, #0]
 8004962:	e002      	b.n	800496a <_printf_i+0x1d2>
 8004964:	0670      	lsls	r0, r6, #25
 8004966:	d5fb      	bpl.n	8004960 <_printf_i+0x1c8>
 8004968:	8019      	strh	r1, [r3, #0]
 800496a:	2300      	movs	r3, #0
 800496c:	6123      	str	r3, [r4, #16]
 800496e:	4615      	mov	r5, r2
 8004970:	e7ba      	b.n	80048e8 <_printf_i+0x150>
 8004972:	682b      	ldr	r3, [r5, #0]
 8004974:	1d1a      	adds	r2, r3, #4
 8004976:	602a      	str	r2, [r5, #0]
 8004978:	681d      	ldr	r5, [r3, #0]
 800497a:	6862      	ldr	r2, [r4, #4]
 800497c:	2100      	movs	r1, #0
 800497e:	4628      	mov	r0, r5
 8004980:	f7fb fc2e 	bl	80001e0 <memchr>
 8004984:	b108      	cbz	r0, 800498a <_printf_i+0x1f2>
 8004986:	1b40      	subs	r0, r0, r5
 8004988:	6060      	str	r0, [r4, #4]
 800498a:	6863      	ldr	r3, [r4, #4]
 800498c:	6123      	str	r3, [r4, #16]
 800498e:	2300      	movs	r3, #0
 8004990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004994:	e7a8      	b.n	80048e8 <_printf_i+0x150>
 8004996:	6923      	ldr	r3, [r4, #16]
 8004998:	462a      	mov	r2, r5
 800499a:	4649      	mov	r1, r9
 800499c:	4640      	mov	r0, r8
 800499e:	47d0      	blx	sl
 80049a0:	3001      	adds	r0, #1
 80049a2:	d0ab      	beq.n	80048fc <_printf_i+0x164>
 80049a4:	6823      	ldr	r3, [r4, #0]
 80049a6:	079b      	lsls	r3, r3, #30
 80049a8:	d413      	bmi.n	80049d2 <_printf_i+0x23a>
 80049aa:	68e0      	ldr	r0, [r4, #12]
 80049ac:	9b03      	ldr	r3, [sp, #12]
 80049ae:	4298      	cmp	r0, r3
 80049b0:	bfb8      	it	lt
 80049b2:	4618      	movlt	r0, r3
 80049b4:	e7a4      	b.n	8004900 <_printf_i+0x168>
 80049b6:	2301      	movs	r3, #1
 80049b8:	4632      	mov	r2, r6
 80049ba:	4649      	mov	r1, r9
 80049bc:	4640      	mov	r0, r8
 80049be:	47d0      	blx	sl
 80049c0:	3001      	adds	r0, #1
 80049c2:	d09b      	beq.n	80048fc <_printf_i+0x164>
 80049c4:	3501      	adds	r5, #1
 80049c6:	68e3      	ldr	r3, [r4, #12]
 80049c8:	9903      	ldr	r1, [sp, #12]
 80049ca:	1a5b      	subs	r3, r3, r1
 80049cc:	42ab      	cmp	r3, r5
 80049ce:	dcf2      	bgt.n	80049b6 <_printf_i+0x21e>
 80049d0:	e7eb      	b.n	80049aa <_printf_i+0x212>
 80049d2:	2500      	movs	r5, #0
 80049d4:	f104 0619 	add.w	r6, r4, #25
 80049d8:	e7f5      	b.n	80049c6 <_printf_i+0x22e>
 80049da:	bf00      	nop
 80049dc:	08005fcd 	.word	0x08005fcd
 80049e0:	08005fde 	.word	0x08005fde

080049e4 <memcpy>:
 80049e4:	440a      	add	r2, r1
 80049e6:	4291      	cmp	r1, r2
 80049e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80049ec:	d100      	bne.n	80049f0 <memcpy+0xc>
 80049ee:	4770      	bx	lr
 80049f0:	b510      	push	{r4, lr}
 80049f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049fa:	4291      	cmp	r1, r2
 80049fc:	d1f9      	bne.n	80049f2 <memcpy+0xe>
 80049fe:	bd10      	pop	{r4, pc}

08004a00 <memmove>:
 8004a00:	4288      	cmp	r0, r1
 8004a02:	b510      	push	{r4, lr}
 8004a04:	eb01 0402 	add.w	r4, r1, r2
 8004a08:	d902      	bls.n	8004a10 <memmove+0x10>
 8004a0a:	4284      	cmp	r4, r0
 8004a0c:	4623      	mov	r3, r4
 8004a0e:	d807      	bhi.n	8004a20 <memmove+0x20>
 8004a10:	1e43      	subs	r3, r0, #1
 8004a12:	42a1      	cmp	r1, r4
 8004a14:	d008      	beq.n	8004a28 <memmove+0x28>
 8004a16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a1e:	e7f8      	b.n	8004a12 <memmove+0x12>
 8004a20:	4402      	add	r2, r0
 8004a22:	4601      	mov	r1, r0
 8004a24:	428a      	cmp	r2, r1
 8004a26:	d100      	bne.n	8004a2a <memmove+0x2a>
 8004a28:	bd10      	pop	{r4, pc}
 8004a2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a32:	e7f7      	b.n	8004a24 <memmove+0x24>

08004a34 <_free_r>:
 8004a34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a36:	2900      	cmp	r1, #0
 8004a38:	d044      	beq.n	8004ac4 <_free_r+0x90>
 8004a3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a3e:	9001      	str	r0, [sp, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f1a1 0404 	sub.w	r4, r1, #4
 8004a46:	bfb8      	it	lt
 8004a48:	18e4      	addlt	r4, r4, r3
 8004a4a:	f000 f913 	bl	8004c74 <__malloc_lock>
 8004a4e:	4a1e      	ldr	r2, [pc, #120]	; (8004ac8 <_free_r+0x94>)
 8004a50:	9801      	ldr	r0, [sp, #4]
 8004a52:	6813      	ldr	r3, [r2, #0]
 8004a54:	b933      	cbnz	r3, 8004a64 <_free_r+0x30>
 8004a56:	6063      	str	r3, [r4, #4]
 8004a58:	6014      	str	r4, [r2, #0]
 8004a5a:	b003      	add	sp, #12
 8004a5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a60:	f000 b90e 	b.w	8004c80 <__malloc_unlock>
 8004a64:	42a3      	cmp	r3, r4
 8004a66:	d908      	bls.n	8004a7a <_free_r+0x46>
 8004a68:	6825      	ldr	r5, [r4, #0]
 8004a6a:	1961      	adds	r1, r4, r5
 8004a6c:	428b      	cmp	r3, r1
 8004a6e:	bf01      	itttt	eq
 8004a70:	6819      	ldreq	r1, [r3, #0]
 8004a72:	685b      	ldreq	r3, [r3, #4]
 8004a74:	1949      	addeq	r1, r1, r5
 8004a76:	6021      	streq	r1, [r4, #0]
 8004a78:	e7ed      	b.n	8004a56 <_free_r+0x22>
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	b10b      	cbz	r3, 8004a84 <_free_r+0x50>
 8004a80:	42a3      	cmp	r3, r4
 8004a82:	d9fa      	bls.n	8004a7a <_free_r+0x46>
 8004a84:	6811      	ldr	r1, [r2, #0]
 8004a86:	1855      	adds	r5, r2, r1
 8004a88:	42a5      	cmp	r5, r4
 8004a8a:	d10b      	bne.n	8004aa4 <_free_r+0x70>
 8004a8c:	6824      	ldr	r4, [r4, #0]
 8004a8e:	4421      	add	r1, r4
 8004a90:	1854      	adds	r4, r2, r1
 8004a92:	42a3      	cmp	r3, r4
 8004a94:	6011      	str	r1, [r2, #0]
 8004a96:	d1e0      	bne.n	8004a5a <_free_r+0x26>
 8004a98:	681c      	ldr	r4, [r3, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	6053      	str	r3, [r2, #4]
 8004a9e:	4421      	add	r1, r4
 8004aa0:	6011      	str	r1, [r2, #0]
 8004aa2:	e7da      	b.n	8004a5a <_free_r+0x26>
 8004aa4:	d902      	bls.n	8004aac <_free_r+0x78>
 8004aa6:	230c      	movs	r3, #12
 8004aa8:	6003      	str	r3, [r0, #0]
 8004aaa:	e7d6      	b.n	8004a5a <_free_r+0x26>
 8004aac:	6825      	ldr	r5, [r4, #0]
 8004aae:	1961      	adds	r1, r4, r5
 8004ab0:	428b      	cmp	r3, r1
 8004ab2:	bf04      	itt	eq
 8004ab4:	6819      	ldreq	r1, [r3, #0]
 8004ab6:	685b      	ldreq	r3, [r3, #4]
 8004ab8:	6063      	str	r3, [r4, #4]
 8004aba:	bf04      	itt	eq
 8004abc:	1949      	addeq	r1, r1, r5
 8004abe:	6021      	streq	r1, [r4, #0]
 8004ac0:	6054      	str	r4, [r2, #4]
 8004ac2:	e7ca      	b.n	8004a5a <_free_r+0x26>
 8004ac4:	b003      	add	sp, #12
 8004ac6:	bd30      	pop	{r4, r5, pc}
 8004ac8:	200005cc 	.word	0x200005cc

08004acc <sbrk_aligned>:
 8004acc:	b570      	push	{r4, r5, r6, lr}
 8004ace:	4e0e      	ldr	r6, [pc, #56]	; (8004b08 <sbrk_aligned+0x3c>)
 8004ad0:	460c      	mov	r4, r1
 8004ad2:	6831      	ldr	r1, [r6, #0]
 8004ad4:	4605      	mov	r5, r0
 8004ad6:	b911      	cbnz	r1, 8004ade <sbrk_aligned+0x12>
 8004ad8:	f000 f8bc 	bl	8004c54 <_sbrk_r>
 8004adc:	6030      	str	r0, [r6, #0]
 8004ade:	4621      	mov	r1, r4
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	f000 f8b7 	bl	8004c54 <_sbrk_r>
 8004ae6:	1c43      	adds	r3, r0, #1
 8004ae8:	d00a      	beq.n	8004b00 <sbrk_aligned+0x34>
 8004aea:	1cc4      	adds	r4, r0, #3
 8004aec:	f024 0403 	bic.w	r4, r4, #3
 8004af0:	42a0      	cmp	r0, r4
 8004af2:	d007      	beq.n	8004b04 <sbrk_aligned+0x38>
 8004af4:	1a21      	subs	r1, r4, r0
 8004af6:	4628      	mov	r0, r5
 8004af8:	f000 f8ac 	bl	8004c54 <_sbrk_r>
 8004afc:	3001      	adds	r0, #1
 8004afe:	d101      	bne.n	8004b04 <sbrk_aligned+0x38>
 8004b00:	f04f 34ff 	mov.w	r4, #4294967295
 8004b04:	4620      	mov	r0, r4
 8004b06:	bd70      	pop	{r4, r5, r6, pc}
 8004b08:	200005d0 	.word	0x200005d0

08004b0c <_malloc_r>:
 8004b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b10:	1ccd      	adds	r5, r1, #3
 8004b12:	f025 0503 	bic.w	r5, r5, #3
 8004b16:	3508      	adds	r5, #8
 8004b18:	2d0c      	cmp	r5, #12
 8004b1a:	bf38      	it	cc
 8004b1c:	250c      	movcc	r5, #12
 8004b1e:	2d00      	cmp	r5, #0
 8004b20:	4607      	mov	r7, r0
 8004b22:	db01      	blt.n	8004b28 <_malloc_r+0x1c>
 8004b24:	42a9      	cmp	r1, r5
 8004b26:	d905      	bls.n	8004b34 <_malloc_r+0x28>
 8004b28:	230c      	movs	r3, #12
 8004b2a:	603b      	str	r3, [r7, #0]
 8004b2c:	2600      	movs	r6, #0
 8004b2e:	4630      	mov	r0, r6
 8004b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b34:	4e2e      	ldr	r6, [pc, #184]	; (8004bf0 <_malloc_r+0xe4>)
 8004b36:	f000 f89d 	bl	8004c74 <__malloc_lock>
 8004b3a:	6833      	ldr	r3, [r6, #0]
 8004b3c:	461c      	mov	r4, r3
 8004b3e:	bb34      	cbnz	r4, 8004b8e <_malloc_r+0x82>
 8004b40:	4629      	mov	r1, r5
 8004b42:	4638      	mov	r0, r7
 8004b44:	f7ff ffc2 	bl	8004acc <sbrk_aligned>
 8004b48:	1c43      	adds	r3, r0, #1
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	d14d      	bne.n	8004bea <_malloc_r+0xde>
 8004b4e:	6834      	ldr	r4, [r6, #0]
 8004b50:	4626      	mov	r6, r4
 8004b52:	2e00      	cmp	r6, #0
 8004b54:	d140      	bne.n	8004bd8 <_malloc_r+0xcc>
 8004b56:	6823      	ldr	r3, [r4, #0]
 8004b58:	4631      	mov	r1, r6
 8004b5a:	4638      	mov	r0, r7
 8004b5c:	eb04 0803 	add.w	r8, r4, r3
 8004b60:	f000 f878 	bl	8004c54 <_sbrk_r>
 8004b64:	4580      	cmp	r8, r0
 8004b66:	d13a      	bne.n	8004bde <_malloc_r+0xd2>
 8004b68:	6821      	ldr	r1, [r4, #0]
 8004b6a:	3503      	adds	r5, #3
 8004b6c:	1a6d      	subs	r5, r5, r1
 8004b6e:	f025 0503 	bic.w	r5, r5, #3
 8004b72:	3508      	adds	r5, #8
 8004b74:	2d0c      	cmp	r5, #12
 8004b76:	bf38      	it	cc
 8004b78:	250c      	movcc	r5, #12
 8004b7a:	4629      	mov	r1, r5
 8004b7c:	4638      	mov	r0, r7
 8004b7e:	f7ff ffa5 	bl	8004acc <sbrk_aligned>
 8004b82:	3001      	adds	r0, #1
 8004b84:	d02b      	beq.n	8004bde <_malloc_r+0xd2>
 8004b86:	6823      	ldr	r3, [r4, #0]
 8004b88:	442b      	add	r3, r5
 8004b8a:	6023      	str	r3, [r4, #0]
 8004b8c:	e00e      	b.n	8004bac <_malloc_r+0xa0>
 8004b8e:	6822      	ldr	r2, [r4, #0]
 8004b90:	1b52      	subs	r2, r2, r5
 8004b92:	d41e      	bmi.n	8004bd2 <_malloc_r+0xc6>
 8004b94:	2a0b      	cmp	r2, #11
 8004b96:	d916      	bls.n	8004bc6 <_malloc_r+0xba>
 8004b98:	1961      	adds	r1, r4, r5
 8004b9a:	42a3      	cmp	r3, r4
 8004b9c:	6025      	str	r5, [r4, #0]
 8004b9e:	bf18      	it	ne
 8004ba0:	6059      	strne	r1, [r3, #4]
 8004ba2:	6863      	ldr	r3, [r4, #4]
 8004ba4:	bf08      	it	eq
 8004ba6:	6031      	streq	r1, [r6, #0]
 8004ba8:	5162      	str	r2, [r4, r5]
 8004baa:	604b      	str	r3, [r1, #4]
 8004bac:	4638      	mov	r0, r7
 8004bae:	f104 060b 	add.w	r6, r4, #11
 8004bb2:	f000 f865 	bl	8004c80 <__malloc_unlock>
 8004bb6:	f026 0607 	bic.w	r6, r6, #7
 8004bba:	1d23      	adds	r3, r4, #4
 8004bbc:	1af2      	subs	r2, r6, r3
 8004bbe:	d0b6      	beq.n	8004b2e <_malloc_r+0x22>
 8004bc0:	1b9b      	subs	r3, r3, r6
 8004bc2:	50a3      	str	r3, [r4, r2]
 8004bc4:	e7b3      	b.n	8004b2e <_malloc_r+0x22>
 8004bc6:	6862      	ldr	r2, [r4, #4]
 8004bc8:	42a3      	cmp	r3, r4
 8004bca:	bf0c      	ite	eq
 8004bcc:	6032      	streq	r2, [r6, #0]
 8004bce:	605a      	strne	r2, [r3, #4]
 8004bd0:	e7ec      	b.n	8004bac <_malloc_r+0xa0>
 8004bd2:	4623      	mov	r3, r4
 8004bd4:	6864      	ldr	r4, [r4, #4]
 8004bd6:	e7b2      	b.n	8004b3e <_malloc_r+0x32>
 8004bd8:	4634      	mov	r4, r6
 8004bda:	6876      	ldr	r6, [r6, #4]
 8004bdc:	e7b9      	b.n	8004b52 <_malloc_r+0x46>
 8004bde:	230c      	movs	r3, #12
 8004be0:	603b      	str	r3, [r7, #0]
 8004be2:	4638      	mov	r0, r7
 8004be4:	f000 f84c 	bl	8004c80 <__malloc_unlock>
 8004be8:	e7a1      	b.n	8004b2e <_malloc_r+0x22>
 8004bea:	6025      	str	r5, [r4, #0]
 8004bec:	e7de      	b.n	8004bac <_malloc_r+0xa0>
 8004bee:	bf00      	nop
 8004bf0:	200005cc 	.word	0x200005cc

08004bf4 <_realloc_r>:
 8004bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf8:	4680      	mov	r8, r0
 8004bfa:	4614      	mov	r4, r2
 8004bfc:	460e      	mov	r6, r1
 8004bfe:	b921      	cbnz	r1, 8004c0a <_realloc_r+0x16>
 8004c00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c04:	4611      	mov	r1, r2
 8004c06:	f7ff bf81 	b.w	8004b0c <_malloc_r>
 8004c0a:	b92a      	cbnz	r2, 8004c18 <_realloc_r+0x24>
 8004c0c:	f7ff ff12 	bl	8004a34 <_free_r>
 8004c10:	4625      	mov	r5, r4
 8004c12:	4628      	mov	r0, r5
 8004c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c18:	f000 f838 	bl	8004c8c <_malloc_usable_size_r>
 8004c1c:	4284      	cmp	r4, r0
 8004c1e:	4607      	mov	r7, r0
 8004c20:	d802      	bhi.n	8004c28 <_realloc_r+0x34>
 8004c22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004c26:	d812      	bhi.n	8004c4e <_realloc_r+0x5a>
 8004c28:	4621      	mov	r1, r4
 8004c2a:	4640      	mov	r0, r8
 8004c2c:	f7ff ff6e 	bl	8004b0c <_malloc_r>
 8004c30:	4605      	mov	r5, r0
 8004c32:	2800      	cmp	r0, #0
 8004c34:	d0ed      	beq.n	8004c12 <_realloc_r+0x1e>
 8004c36:	42bc      	cmp	r4, r7
 8004c38:	4622      	mov	r2, r4
 8004c3a:	4631      	mov	r1, r6
 8004c3c:	bf28      	it	cs
 8004c3e:	463a      	movcs	r2, r7
 8004c40:	f7ff fed0 	bl	80049e4 <memcpy>
 8004c44:	4631      	mov	r1, r6
 8004c46:	4640      	mov	r0, r8
 8004c48:	f7ff fef4 	bl	8004a34 <_free_r>
 8004c4c:	e7e1      	b.n	8004c12 <_realloc_r+0x1e>
 8004c4e:	4635      	mov	r5, r6
 8004c50:	e7df      	b.n	8004c12 <_realloc_r+0x1e>
	...

08004c54 <_sbrk_r>:
 8004c54:	b538      	push	{r3, r4, r5, lr}
 8004c56:	4d06      	ldr	r5, [pc, #24]	; (8004c70 <_sbrk_r+0x1c>)
 8004c58:	2300      	movs	r3, #0
 8004c5a:	4604      	mov	r4, r0
 8004c5c:	4608      	mov	r0, r1
 8004c5e:	602b      	str	r3, [r5, #0]
 8004c60:	f7fc fa76 	bl	8001150 <_sbrk>
 8004c64:	1c43      	adds	r3, r0, #1
 8004c66:	d102      	bne.n	8004c6e <_sbrk_r+0x1a>
 8004c68:	682b      	ldr	r3, [r5, #0]
 8004c6a:	b103      	cbz	r3, 8004c6e <_sbrk_r+0x1a>
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	bd38      	pop	{r3, r4, r5, pc}
 8004c70:	200005d4 	.word	0x200005d4

08004c74 <__malloc_lock>:
 8004c74:	4801      	ldr	r0, [pc, #4]	; (8004c7c <__malloc_lock+0x8>)
 8004c76:	f000 b811 	b.w	8004c9c <__retarget_lock_acquire_recursive>
 8004c7a:	bf00      	nop
 8004c7c:	200005d8 	.word	0x200005d8

08004c80 <__malloc_unlock>:
 8004c80:	4801      	ldr	r0, [pc, #4]	; (8004c88 <__malloc_unlock+0x8>)
 8004c82:	f000 b80c 	b.w	8004c9e <__retarget_lock_release_recursive>
 8004c86:	bf00      	nop
 8004c88:	200005d8 	.word	0x200005d8

08004c8c <_malloc_usable_size_r>:
 8004c8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c90:	1f18      	subs	r0, r3, #4
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	bfbc      	itt	lt
 8004c96:	580b      	ldrlt	r3, [r1, r0]
 8004c98:	18c0      	addlt	r0, r0, r3
 8004c9a:	4770      	bx	lr

08004c9c <__retarget_lock_acquire_recursive>:
 8004c9c:	4770      	bx	lr

08004c9e <__retarget_lock_release_recursive>:
 8004c9e:	4770      	bx	lr

08004ca0 <_init>:
 8004ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca2:	bf00      	nop
 8004ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ca6:	bc08      	pop	{r3}
 8004ca8:	469e      	mov	lr, r3
 8004caa:	4770      	bx	lr

08004cac <_fini>:
 8004cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cae:	bf00      	nop
 8004cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cb2:	bc08      	pop	{r3}
 8004cb4:	469e      	mov	lr, r3
 8004cb6:	4770      	bx	lr
