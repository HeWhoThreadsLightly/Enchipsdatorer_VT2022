
vgaGraphics2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005698  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  08005838  08005838  00015838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d14  08005d14  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005d14  08005d14  00015d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d1c  08005d1c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d1c  08005d1c  00015d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d20  08005d20  00015d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000464c  20000070  08005d94  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200046bc  08005d94  000246bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f31e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002056  00000000  00000000  0002f3be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00031418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d40  00000000  00000000  000321c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002915  00000000  00000000  00032f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eed8  00000000  00000000  00035815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e10f  00000000  00000000  000446ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d27fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db8  00000000  00000000  000d284c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005820 	.word	0x08005820

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005820 	.word	0x08005820

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <dumpLine>:
/* USER CODE BEGIN 0 */

char str[81] = { '\0' };
uint16_t str_len = 0;

void dumpLine(){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0

	for(int i = 0; i < 40; i++){
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	e018      	b.n	80005c2 <dumpLine+0x3e>
		int tmp = screenBuff[i].value;
 8000590:	4a17      	ldr	r2, [pc, #92]	; (80005f0 <dumpLine+0x6c>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4413      	add	r3, r2
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	603b      	str	r3, [r7, #0]
		str_len = sprintf(str, "%02x ", tmp);
 800059a:	683a      	ldr	r2, [r7, #0]
 800059c:	4915      	ldr	r1, [pc, #84]	; (80005f4 <dumpLine+0x70>)
 800059e:	4816      	ldr	r0, [pc, #88]	; (80005f8 <dumpLine+0x74>)
 80005a0:	f004 fcd0 	bl	8004f44 <siprintf>
 80005a4:	4603      	mov	r3, r0
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	4b14      	ldr	r3, [pc, #80]	; (80005fc <dumpLine+0x78>)
 80005aa:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80005ac:	4b13      	ldr	r3, [pc, #76]	; (80005fc <dumpLine+0x78>)
 80005ae:	881a      	ldrh	r2, [r3, #0]
 80005b0:	f04f 33ff 	mov.w	r3, #4294967295
 80005b4:	4910      	ldr	r1, [pc, #64]	; (80005f8 <dumpLine+0x74>)
 80005b6:	4812      	ldr	r0, [pc, #72]	; (8000600 <dumpLine+0x7c>)
 80005b8:	f004 f91d 	bl	80047f6 <HAL_UART_Transmit>
	for(int i = 0; i < 40; i++){
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3301      	adds	r3, #1
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b27      	cmp	r3, #39	; 0x27
 80005c6:	dde3      	ble.n	8000590 <dumpLine+0xc>
	}
	str_len = sprintf(str, "\r\n");
 80005c8:	490e      	ldr	r1, [pc, #56]	; (8000604 <dumpLine+0x80>)
 80005ca:	480b      	ldr	r0, [pc, #44]	; (80005f8 <dumpLine+0x74>)
 80005cc:	f004 fcba 	bl	8004f44 <siprintf>
 80005d0:	4603      	mov	r3, r0
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <dumpLine+0x78>)
 80005d6:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <dumpLine+0x78>)
 80005da:	881a      	ldrh	r2, [r3, #0]
 80005dc:	f04f 33ff 	mov.w	r3, #4294967295
 80005e0:	4905      	ldr	r1, [pc, #20]	; (80005f8 <dumpLine+0x74>)
 80005e2:	4807      	ldr	r0, [pc, #28]	; (8000600 <dumpLine+0x7c>)
 80005e4:	f004 f907 	bl	80047f6 <HAL_UART_Transmit>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	2000040c 	.word	0x2000040c
 80005f4:	08005838 	.word	0x08005838
 80005f8:	20000220 	.word	0x20000220
 80005fc:	20000272 	.word	0x20000272
 8000600:	2000017c 	.word	0x2000017c
 8000604:	08005840 	.word	0x08005840

08000608 <HAL_TIM_PeriodElapsedCallback>:
	HAL_UART_Transmit(&huart2, (uint8_t*) str, sizeof(str), HAL_MAX_DELAY);
}

int lastLine = -100;
uint32_t profileCount = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	if(htim == &htim5){
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4a0f      	ldr	r2, [pc, #60]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d116      	bne.n	8000646 <HAL_TIM_PeriodElapsedCallback+0x3e>
		str_len = sprintf(str, "Profile %8lu ticks clock\t line %i\r\n", profileCount, lineCount);
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	490e      	ldr	r1, [pc, #56]	; (800065c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000622:	480f      	ldr	r0, [pc, #60]	; (8000660 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000624:	f004 fc8e 	bl	8004f44 <siprintf>
 8000628:	4603      	mov	r3, r0
 800062a:	b29a      	uxth	r2, r3
 800062c:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800062e:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000632:	881a      	ldrh	r2, [r3, #0]
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	4909      	ldr	r1, [pc, #36]	; (8000660 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800063a:	480b      	ldr	r0, [pc, #44]	; (8000668 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800063c:	f004 f8db 	bl	80047f6 <HAL_UART_Transmit>
		profileCount = 0;
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
	}
	return;
 8000646:	bf00      	nop
	if(htim == &htim5){
		timerReset();
	}else if(htim == &htim1){
		timerReset();
	}
}
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	200000d4 	.word	0x200000d4
 8000654:	20000274 	.word	0x20000274
 8000658:	200042a0 	.word	0x200042a0
 800065c:	08005854 	.word	0x08005854
 8000660:	20000220 	.word	0x20000220
 8000664:	20000272 	.word	0x20000272
 8000668:	2000017c 	.word	0x2000017c

0800066c <printState>:
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
	return status != HAL_OK;

}

int printState(HAL_DMA_StateTypeDef state){
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
	//HAL_DMA_STATE_BUSY              = 0x02U,  /*!< DMA process is ongoing              */
	//HAL_DMA_STATE_TIMEOUT           = 0x03U,  /*!< DMA timeout state                   */
	//HAL_DMA_STATE_ERROR             = 0x04U,  /*!< DMA error state                     */
	//HAL_DMA_STATE_ABORT             = 0x05U,  /*!< DMA Abort state                     */
	//}HAL_DMA_StateTypeDef;
	switch(state){
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	2b05      	cmp	r3, #5
 800067a:	d845      	bhi.n	8000708 <printState+0x9c>
 800067c:	a201      	add	r2, pc, #4	; (adr r2, 8000684 <printState+0x18>)
 800067e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000682:	bf00      	nop
 8000684:	0800069d 	.word	0x0800069d
 8000688:	080006af 	.word	0x080006af
 800068c:	080006c1 	.word	0x080006c1
 8000690:	080006d3 	.word	0x080006d3
 8000694:	080006e5 	.word	0x080006e5
 8000698:	080006f7 	.word	0x080006f7
	case HAL_DMA_STATE_RESET:str_len = sprintf(str, "DMA not yet initialized or disabled\r\n");break;
 800069c:	4928      	ldr	r1, [pc, #160]	; (8000740 <printState+0xd4>)
 800069e:	4829      	ldr	r0, [pc, #164]	; (8000744 <printState+0xd8>)
 80006a0:	f004 fc50 	bl	8004f44 <siprintf>
 80006a4:	4603      	mov	r3, r0
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	4b27      	ldr	r3, [pc, #156]	; (8000748 <printState+0xdc>)
 80006aa:	801a      	strh	r2, [r3, #0]
 80006ac:	e035      	b.n	800071a <printState+0xae>
	case HAL_DMA_STATE_READY:str_len = sprintf(str, "DMA initialized and ready for use\r\n");break;
 80006ae:	4927      	ldr	r1, [pc, #156]	; (800074c <printState+0xe0>)
 80006b0:	4824      	ldr	r0, [pc, #144]	; (8000744 <printState+0xd8>)
 80006b2:	f004 fc47 	bl	8004f44 <siprintf>
 80006b6:	4603      	mov	r3, r0
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	4b23      	ldr	r3, [pc, #140]	; (8000748 <printState+0xdc>)
 80006bc:	801a      	strh	r2, [r3, #0]
 80006be:	e02c      	b.n	800071a <printState+0xae>
	case HAL_DMA_STATE_BUSY:str_len = sprintf(str, "DMA process is ongoing\r\n");break;
 80006c0:	4923      	ldr	r1, [pc, #140]	; (8000750 <printState+0xe4>)
 80006c2:	4820      	ldr	r0, [pc, #128]	; (8000744 <printState+0xd8>)
 80006c4:	f004 fc3e 	bl	8004f44 <siprintf>
 80006c8:	4603      	mov	r3, r0
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <printState+0xdc>)
 80006ce:	801a      	strh	r2, [r3, #0]
 80006d0:	e023      	b.n	800071a <printState+0xae>
	case HAL_DMA_STATE_TIMEOUT:str_len = sprintf(str, "DMA timeout state\r\n");break;
 80006d2:	4920      	ldr	r1, [pc, #128]	; (8000754 <printState+0xe8>)
 80006d4:	481b      	ldr	r0, [pc, #108]	; (8000744 <printState+0xd8>)
 80006d6:	f004 fc35 	bl	8004f44 <siprintf>
 80006da:	4603      	mov	r3, r0
 80006dc:	b29a      	uxth	r2, r3
 80006de:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <printState+0xdc>)
 80006e0:	801a      	strh	r2, [r3, #0]
 80006e2:	e01a      	b.n	800071a <printState+0xae>
	case HAL_DMA_STATE_ERROR:str_len = sprintf(str, "DMA error state\r\n");break;
 80006e4:	491c      	ldr	r1, [pc, #112]	; (8000758 <printState+0xec>)
 80006e6:	4817      	ldr	r0, [pc, #92]	; (8000744 <printState+0xd8>)
 80006e8:	f004 fc2c 	bl	8004f44 <siprintf>
 80006ec:	4603      	mov	r3, r0
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <printState+0xdc>)
 80006f2:	801a      	strh	r2, [r3, #0]
 80006f4:	e011      	b.n	800071a <printState+0xae>
	case HAL_DMA_STATE_ABORT:str_len = sprintf(str, "DMA Abort state\r\n");break;
 80006f6:	4919      	ldr	r1, [pc, #100]	; (800075c <printState+0xf0>)
 80006f8:	4812      	ldr	r0, [pc, #72]	; (8000744 <printState+0xd8>)
 80006fa:	f004 fc23 	bl	8004f44 <siprintf>
 80006fe:	4603      	mov	r3, r0
 8000700:	b29a      	uxth	r2, r3
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <printState+0xdc>)
 8000704:	801a      	strh	r2, [r3, #0]
 8000706:	e008      	b.n	800071a <printState+0xae>
	default:str_len = sprintf(str, "DMA_Unknown\r\n");break;
 8000708:	4915      	ldr	r1, [pc, #84]	; (8000760 <printState+0xf4>)
 800070a:	480e      	ldr	r0, [pc, #56]	; (8000744 <printState+0xd8>)
 800070c:	f004 fc1a 	bl	8004f44 <siprintf>
 8000710:	4603      	mov	r3, r0
 8000712:	b29a      	uxth	r2, r3
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <printState+0xdc>)
 8000716:	801a      	strh	r2, [r3, #0]
 8000718:	bf00      	nop

	}
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <printState+0xdc>)
 800071c:	881a      	ldrh	r2, [r3, #0]
 800071e:	f04f 33ff 	mov.w	r3, #4294967295
 8000722:	4908      	ldr	r1, [pc, #32]	; (8000744 <printState+0xd8>)
 8000724:	480f      	ldr	r0, [pc, #60]	; (8000764 <printState+0xf8>)
 8000726:	f004 f866 	bl	80047f6 <HAL_UART_Transmit>
	return state != HAL_DMA_STATE_READY;
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	2b01      	cmp	r3, #1
 800072e:	bf14      	ite	ne
 8000730:	2301      	movne	r3, #1
 8000732:	2300      	moveq	r3, #0
 8000734:	b2db      	uxtb	r3, r3
}
 8000736:	4618      	mov	r0, r3
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	080058bc 	.word	0x080058bc
 8000744:	20000220 	.word	0x20000220
 8000748:	20000272 	.word	0x20000272
 800074c:	080058e4 	.word	0x080058e4
 8000750:	08005908 	.word	0x08005908
 8000754:	08005924 	.word	0x08005924
 8000758:	08005938 	.word	0x08005938
 800075c:	0800594c 	.word	0x0800594c
 8000760:	08005960 	.word	0x08005960
 8000764:	2000017c 	.word	0x2000017c

08000768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b09c      	sub	sp, #112	; 0x70
 800076c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076e:	f001 fcab 	bl	80020c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000772:	f000 f8b5 	bl	80008e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000776:	f000 fa8d 	bl	8000c94 <MX_GPIO_Init>
  MX_DMA_Init();
 800077a:	f000 fa33 	bl	8000be4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800077e:	f000 fa07 	bl	8000b90 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8000782:	f000 f9b7 	bl	8000af4 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000786:	f000 f915 	bl	80009b4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	char str[81] = { '\0' };
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	224d      	movs	r2, #77	; 0x4d
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f004 fbcd 	bl	8004f34 <memset>
	uint16_t str_len = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	str_len = sprintf(str, "Starting up!\r\n");
 80007a0:	463b      	mov	r3, r7
 80007a2:	4946      	ldr	r1, [pc, #280]	; (80008bc <main+0x154>)
 80007a4:	4618      	mov	r0, r3
 80007a6:	f004 fbcd 	bl	8004f44 <siprintf>
 80007aa:	4603      	mov	r3, r0
 80007ac:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80007b0:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80007b4:	4639      	mov	r1, r7
 80007b6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ba:	4841      	ldr	r0, [pc, #260]	; (80008c0 <main+0x158>)
 80007bc:	f004 f81b 	bl	80047f6 <HAL_UART_Transmit>

	for(int i = 0; i < vertRes; i++){//load a test pattern
 80007c0:	2300      	movs	r3, #0
 80007c2:	667b      	str	r3, [r7, #100]	; 0x64
 80007c4:	e036      	b.n	8000834 <main+0xcc>
		for(int j = 0; j < horiRes; j++){
 80007c6:	2300      	movs	r3, #0
 80007c8:	663b      	str	r3, [r7, #96]	; 0x60
 80007ca:	e00d      	b.n	80007e8 <main+0x80>
			screenBuff[i*horiRes + j].value = 0b00111111;
 80007cc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80007ce:	4613      	mov	r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	4413      	add	r3, r2
 80007d4:	015b      	lsls	r3, r3, #5
 80007d6:	461a      	mov	r2, r3
 80007d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80007da:	4413      	add	r3, r2
 80007dc:	4a39      	ldr	r2, [pc, #228]	; (80008c4 <main+0x15c>)
 80007de:	213f      	movs	r1, #63	; 0x3f
 80007e0:	54d1      	strb	r1, [r2, r3]
		for(int j = 0; j < horiRes; j++){
 80007e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80007e4:	3301      	adds	r3, #1
 80007e6:	663b      	str	r3, [r7, #96]	; 0x60
 80007e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80007ea:	2b9f      	cmp	r3, #159	; 0x9f
 80007ec:	ddee      	ble.n	80007cc <main+0x64>
			//screenBuff[i*vertRes + j].value = j & 0b111111;
		}
		for(int j = 0; j<16;j++){
 80007ee:	2300      	movs	r3, #0
 80007f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80007f2:	e019      	b.n	8000828 <main+0xc0>
			screenBuff[i*horiRes + 8 + j].value = 0b00110000 + j%16;
 80007f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007f6:	425a      	negs	r2, r3
 80007f8:	f003 030f 	and.w	r3, r3, #15
 80007fc:	f002 020f 	and.w	r2, r2, #15
 8000800:	bf58      	it	pl
 8000802:	4253      	negpl	r3, r2
 8000804:	b2d9      	uxtb	r1, r3
 8000806:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000808:	4613      	mov	r3, r2
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	4413      	add	r3, r2
 800080e:	015b      	lsls	r3, r3, #5
 8000810:	f103 0208 	add.w	r2, r3, #8
 8000814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000816:	4413      	add	r3, r2
 8000818:	f101 0230 	add.w	r2, r1, #48	; 0x30
 800081c:	b2d1      	uxtb	r1, r2
 800081e:	4a29      	ldr	r2, [pc, #164]	; (80008c4 <main+0x15c>)
 8000820:	54d1      	strb	r1, [r2, r3]
		for(int j = 0; j<16;j++){
 8000822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000824:	3301      	adds	r3, #1
 8000826:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800082a:	2b0f      	cmp	r3, #15
 800082c:	dde2      	ble.n	80007f4 <main+0x8c>
	for(int i = 0; i < vertRes; i++){//load a test pattern
 800082e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000830:	3301      	adds	r3, #1
 8000832:	667b      	str	r3, [r7, #100]	; 0x64
 8000834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000836:	2b63      	cmp	r3, #99	; 0x63
 8000838:	ddc5      	ble.n	80007c6 <main+0x5e>
		}
	}

	for(int i = 0; i < vertRes; i++){//load a clear test pattern
 800083a:	2300      	movs	r3, #0
 800083c:	65bb      	str	r3, [r7, #88]	; 0x58
 800083e:	e00b      	b.n	8000858 <main+0xf0>
		for(int j = 0; j < horiRes; j++){
 8000840:	2300      	movs	r3, #0
 8000842:	657b      	str	r3, [r7, #84]	; 0x54
 8000844:	e002      	b.n	800084c <main+0xe4>
 8000846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000848:	3301      	adds	r3, #1
 800084a:	657b      	str	r3, [r7, #84]	; 0x54
 800084c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800084e:	2b9f      	cmp	r3, #159	; 0x9f
 8000850:	ddf9      	ble.n	8000846 <main+0xde>
	for(int i = 0; i < vertRes; i++){//load a clear test pattern
 8000852:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000854:	3301      	adds	r3, #1
 8000856:	65bb      	str	r3, [r7, #88]	; 0x58
 8000858:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800085a:	2b63      	cmp	r3, #99	; 0x63
 800085c:	ddf0      	ble.n	8000840 <main+0xd8>
		}
	}



	vgaSetup(&htim1, &hdma_tim1_up, &hdma_memtomem_dma2_stream0, vgaPin13_Vsync_GPIO_Port, vgaPin13_Vsync_Pin);
 800085e:	2302      	movs	r3, #2
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <main+0x160>)
 8000864:	4a19      	ldr	r2, [pc, #100]	; (80008cc <main+0x164>)
 8000866:	491a      	ldr	r1, [pc, #104]	; (80008d0 <main+0x168>)
 8000868:	481a      	ldr	r0, [pc, #104]	; (80008d4 <main+0x16c>)
 800086a:	f001 fb21 	bl	8001eb0 <vgaSetup>
	registerHUART(&huart2);
 800086e:	4814      	ldr	r0, [pc, #80]	; (80008c0 <main+0x158>)
 8000870:	f000 feb6 	bl	80015e0 <registerHUART>
	registerDebugInterupts(&hdma_tim1_up);
 8000874:	4816      	ldr	r0, [pc, #88]	; (80008d0 <main+0x168>)
 8000876:	f000 fe79 	bl	800156c <registerDebugInterupts>


	//HAL_TIM_Base_Start_IT(&htim5);

	dumpLine();
 800087a:	f7ff fe83 	bl	8000584 <dumpLine>
	printState(HAL_DMA_GetState(&hdma_memtomem_dma2_stream0));
 800087e:	4813      	ldr	r0, [pc, #76]	; (80008cc <main+0x164>)
 8000880:	f002 f88a 	bl	8002998 <HAL_DMA_GetState>
 8000884:	4603      	mov	r3, r0
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fef0 	bl	800066c <printState>
	printStatus(old_memSet(0xff, (uint32_t*)&screenBuff[0], 2));//testingMemset
	printState(HAL_DMA_GetState(&hdma_memtomem_dma2_stream0));
	dumpLine();
	while(printStatus(HAL_DMA_PollForTransfer(&hdma_memtomem_dma2_stream0, HAL_DMA_FULL_TRANSFER, 100))){HAL_Delay(1000);};
	//*/
	str_len = sprintf(str, "\r\nDone\r\n");
 800088c:	463b      	mov	r3, r7
 800088e:	4912      	ldr	r1, [pc, #72]	; (80008d8 <main+0x170>)
 8000890:	4618      	mov	r0, r3
 8000892:	f004 fb57 	bl	8004f44 <siprintf>
 8000896:	4603      	mov	r3, r0
 8000898:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800089c:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80008a0:	4639      	mov	r1, r7
 80008a2:	f04f 33ff 	mov.w	r3, #4294967295
 80008a6:	4806      	ldr	r0, [pc, #24]	; (80008c0 <main+0x158>)
 80008a8:	f003 ffa5 	bl	80047f6 <HAL_UART_Transmit>

	vgaStart();
 80008ac:	f001 fb88 	bl	8001fc0 <vgaStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		profileCount++;
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <main+0x174>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	3301      	adds	r3, #1
 80008b6:	4a09      	ldr	r2, [pc, #36]	; (80008dc <main+0x174>)
 80008b8:	6013      	str	r3, [r2, #0]
 80008ba:	e7f9      	b.n	80008b0 <main+0x148>
 80008bc:	08005970 	.word	0x08005970
 80008c0:	2000017c 	.word	0x2000017c
 80008c4:	2000040c 	.word	0x2000040c
 80008c8:	40020000 	.word	0x40020000
 80008cc:	200001c0 	.word	0x200001c0
 80008d0:	2000011c 	.word	0x2000011c
 80008d4:	2000008c 	.word	0x2000008c
 80008d8:	08005980 	.word	0x08005980
 80008dc:	20000274 	.word	0x20000274

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b094      	sub	sp, #80	; 0x50
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 0320 	add.w	r3, r7, #32
 80008ea:	2230      	movs	r2, #48	; 0x30
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f004 fb20 	bl	8004f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000904:	2300      	movs	r3, #0
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	4b28      	ldr	r3, [pc, #160]	; (80009ac <SystemClock_Config+0xcc>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	4a27      	ldr	r2, [pc, #156]	; (80009ac <SystemClock_Config+0xcc>)
 800090e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000912:	6413      	str	r3, [r2, #64]	; 0x40
 8000914:	4b25      	ldr	r3, [pc, #148]	; (80009ac <SystemClock_Config+0xcc>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000920:	2300      	movs	r3, #0
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <SystemClock_Config+0xd0>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800092c:	4a20      	ldr	r2, [pc, #128]	; (80009b0 <SystemClock_Config+0xd0>)
 800092e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000932:	6013      	str	r3, [r2, #0]
 8000934:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <SystemClock_Config+0xd0>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000940:	2302      	movs	r3, #2
 8000942:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000944:	2301      	movs	r3, #1
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000948:	2310      	movs	r3, #16
 800094a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094c:	2302      	movs	r3, #2
 800094e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000950:	2300      	movs	r3, #0
 8000952:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000954:	2308      	movs	r3, #8
 8000956:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 151;
 8000958:	2397      	movs	r3, #151	; 0x97
 800095a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800095c:	2304      	movs	r3, #4
 800095e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000960:	2307      	movs	r3, #7
 8000962:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000964:	f107 0320 	add.w	r3, r7, #32
 8000968:	4618      	mov	r0, r3
 800096a:	f002 faad 	bl	8002ec8 <HAL_RCC_OscConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000974:	f000 fa20 	bl	8000db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000978:	230f      	movs	r3, #15
 800097a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800097c:	2302      	movs	r3, #2
 800097e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000988:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800098e:	f107 030c 	add.w	r3, r7, #12
 8000992:	2102      	movs	r1, #2
 8000994:	4618      	mov	r0, r3
 8000996:	f002 fd0f 	bl	80033b8 <HAL_RCC_ClockConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009a0:	f000 fa0a 	bl	8000db8 <Error_Handler>
  }
}
 80009a4:	bf00      	nop
 80009a6:	3750      	adds	r7, #80	; 0x50
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40007000 	.word	0x40007000

080009b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b096      	sub	sp, #88	; 0x58
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]
 80009e2:	615a      	str	r2, [r3, #20]
 80009e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2220      	movs	r2, #32
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f004 faa1 	bl	8004f34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009f2:	4b3e      	ldr	r3, [pc, #248]	; (8000aec <MX_TIM1_Init+0x138>)
 80009f4:	4a3e      	ldr	r2, [pc, #248]	; (8000af0 <MX_TIM1_Init+0x13c>)
 80009f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = vgaUpscale-1;
 80009f8:	4b3c      	ldr	r3, [pc, #240]	; (8000aec <MX_TIM1_Init+0x138>)
 80009fa:	2203      	movs	r2, #3
 80009fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fe:	4b3b      	ldr	r3, [pc, #236]	; (8000aec <MX_TIM1_Init+0x138>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3-1;
 8000a04:	4b39      	ldr	r3, [pc, #228]	; (8000aec <MX_TIM1_Init+0x138>)
 8000a06:	2202      	movs	r2, #2
 8000a08:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0a:	4b38      	ldr	r3, [pc, #224]	; (8000aec <MX_TIM1_Init+0x138>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a10:	4b36      	ldr	r3, [pc, #216]	; (8000aec <MX_TIM1_Init+0x138>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a16:	4b35      	ldr	r3, [pc, #212]	; (8000aec <MX_TIM1_Init+0x138>)
 8000a18:	2280      	movs	r2, #128	; 0x80
 8000a1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a1c:	4833      	ldr	r0, [pc, #204]	; (8000aec <MX_TIM1_Init+0x138>)
 8000a1e:	f002 feeb 	bl	80037f8 <HAL_TIM_Base_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000a28:	f000 f9c6 	bl	8000db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a30:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a36:	4619      	mov	r1, r3
 8000a38:	482c      	ldr	r0, [pc, #176]	; (8000aec <MX_TIM1_Init+0x138>)
 8000a3a:	f003 f9ff 	bl	8003e3c <HAL_TIM_ConfigClockSource>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000a44:	f000 f9b8 	bl	8000db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a48:	4828      	ldr	r0, [pc, #160]	; (8000aec <MX_TIM1_Init+0x138>)
 8000a4a:	f002 ff24 	bl	8003896 <HAL_TIM_PWM_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000a54:	f000 f9b0 	bl	8000db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a64:	4619      	mov	r1, r3
 8000a66:	4821      	ldr	r0, [pc, #132]	; (8000aec <MX_TIM1_Init+0x138>)
 8000a68:	f003 fda4 	bl	80045b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000a72:	f000 f9a1 	bl	8000db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a76:	2360      	movs	r3, #96	; 0x60
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a82:	2300      	movs	r3, #0
 8000a84:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	2200      	movs	r2, #0
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4814      	ldr	r0, [pc, #80]	; (8000aec <MX_TIM1_Init+0x138>)
 8000a9c:	f003 f90c 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000aa6:	f000 f987 	bl	8000db8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000abe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	4619      	mov	r1, r3
 8000acc:	4807      	ldr	r0, [pc, #28]	; (8000aec <MX_TIM1_Init+0x138>)
 8000ace:	f003 fddf 	bl	8004690 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000ad8:	f000 f96e 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000adc:	4803      	ldr	r0, [pc, #12]	; (8000aec <MX_TIM1_Init+0x138>)
 8000ade:	f000 fa15 	bl	8000f0c <HAL_TIM_MspPostInit>

}
 8000ae2:	bf00      	nop
 8000ae4:	3758      	adds	r7, #88	; 0x58
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	2000008c 	.word	0x2000008c
 8000af0:	40010000 	.word	0x40010000

08000af4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000afa:	f107 0308 	add.w	r3, r7, #8
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b08:	463b      	mov	r3, r7
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b10:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <MX_TIM5_Init+0x94>)
 8000b12:	4a1e      	ldr	r2, [pc, #120]	; (8000b8c <MX_TIM5_Init+0x98>)
 8000b14:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 7550-1;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <MX_TIM5_Init+0x94>)
 8000b18:	f641 527d 	movw	r2, #7549	; 0x1d7d
 8000b1c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <MX_TIM5_Init+0x94>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 8000b24:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <MX_TIM5_Init+0x94>)
 8000b26:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b2a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <MX_TIM5_Init+0x94>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_TIM5_Init+0x94>)
 8000b34:	2280      	movs	r2, #128	; 0x80
 8000b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000b38:	4813      	ldr	r0, [pc, #76]	; (8000b88 <MX_TIM5_Init+0x94>)
 8000b3a:	f002 fe5d 	bl	80037f8 <HAL_TIM_Base_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000b44:	f000 f938 	bl	8000db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000b4e:	f107 0308 	add.w	r3, r7, #8
 8000b52:	4619      	mov	r1, r3
 8000b54:	480c      	ldr	r0, [pc, #48]	; (8000b88 <MX_TIM5_Init+0x94>)
 8000b56:	f003 f971 	bl	8003e3c <HAL_TIM_ConfigClockSource>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000b60:	f000 f92a 	bl	8000db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b64:	2300      	movs	r3, #0
 8000b66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_TIM5_Init+0x94>)
 8000b72:	f003 fd1f 	bl	80045b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000b7c:	f000 f91c 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200000d4 	.word	0x200000d4
 8000b8c:	40000c00 	.word	0x40000c00

08000b90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_USART2_UART_Init+0x50>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000b9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bc8:	f003 fdc8 	bl	800475c <HAL_UART_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bd2:	f000 f8f1 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000017c 	.word	0x2000017c
 8000be0:	40004400 	.word	0x40004400

08000be4 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b26      	ldr	r3, [pc, #152]	; (8000c88 <MX_DMA_Init+0xa4>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a25      	ldr	r2, [pc, #148]	; (8000c88 <MX_DMA_Init+0xa4>)
 8000bf4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b23      	ldr	r3, [pc, #140]	; (8000c88 <MX_DMA_Init+0xa4>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000c06:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <MX_DMA_Init+0xa8>)
 8000c08:	4a21      	ldr	r2, [pc, #132]	; (8000c90 <MX_DMA_Init+0xac>)
 8000c0a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <MX_DMA_Init+0xa8>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000c12:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <MX_DMA_Init+0xa8>)
 8000c14:	2280      	movs	r2, #128	; 0x80
 8000c16:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000c18:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <MX_DMA_Init+0xa8>)
 8000c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c1e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <MX_DMA_Init+0xa8>)
 8000c22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c26:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c28:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <MX_DMA_Init+0xa8>)
 8000c2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c2e:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c30:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <MX_DMA_Init+0xa8>)
 8000c32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c36:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <MX_DMA_Init+0xa8>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000c3e:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <MX_DMA_Init+0xa8>)
 8000c40:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c44:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <MX_DMA_Init+0xa8>)
 8000c48:	2204      	movs	r2, #4
 8000c4a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <MX_DMA_Init+0xa8>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <MX_DMA_Init+0xa8>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <MX_DMA_Init+0xa8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000c5e:	480b      	ldr	r0, [pc, #44]	; (8000c8c <MX_DMA_Init+0xa8>)
 8000c60:	f001 fbb6 	bl	80023d0 <HAL_DMA_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_DMA_Init+0x8a>
  {
    Error_Handler( );
 8000c6a:	f000 f8a5 	bl	8000db8 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	2044      	movs	r0, #68	; 0x44
 8000c74:	f001 fb75 	bl	8002362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000c78:	2044      	movs	r0, #68	; 0x44
 8000c7a:	f001 fb8e 	bl	800239a <HAL_NVIC_EnableIRQ>

}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	200001c0 	.word	0x200001c0
 8000c90:	40026410 	.word	0x40026410

08000c94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	4b3f      	ldr	r3, [pc, #252]	; (8000dac <MX_GPIO_Init+0x118>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a3e      	ldr	r2, [pc, #248]	; (8000dac <MX_GPIO_Init+0x118>)
 8000cb4:	f043 0304 	orr.w	r3, r3, #4
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b3c      	ldr	r3, [pc, #240]	; (8000dac <MX_GPIO_Init+0x118>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0304 	and.w	r3, r3, #4
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	4b38      	ldr	r3, [pc, #224]	; (8000dac <MX_GPIO_Init+0x118>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a37      	ldr	r2, [pc, #220]	; (8000dac <MX_GPIO_Init+0x118>)
 8000cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b35      	ldr	r3, [pc, #212]	; (8000dac <MX_GPIO_Init+0x118>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	4b31      	ldr	r3, [pc, #196]	; (8000dac <MX_GPIO_Init+0x118>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a30      	ldr	r2, [pc, #192]	; (8000dac <MX_GPIO_Init+0x118>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b2e      	ldr	r3, [pc, #184]	; (8000dac <MX_GPIO_Init+0x118>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <MX_GPIO_Init+0x118>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a29      	ldr	r2, [pc, #164]	; (8000dac <MX_GPIO_Init+0x118>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b27      	ldr	r3, [pc, #156]	; (8000dac <MX_GPIO_Init+0x118>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, vgaPin0_B0_Pin|vgaPin1_B1_Pin|vgaPin2_B2_Pin|vgaPin3_B3_Pin
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8000d20:	4823      	ldr	r0, [pc, #140]	; (8000db0 <MX_GPIO_Init+0x11c>)
 8000d22:	f002 f8b7 	bl	8002e94 <HAL_GPIO_WritePin>
                          |vgaPin4_G0_Pin|vgaPin5_G1_Pin|vgaPin6_G2_Pin|vgaPin7_G3_Pin
                          |vgaPin8_R0_Pin|vgaPin9_R1_Pin|vgaPin10_R2_Pin|vgaPin11_R3_Pin
                          |vgaPin12_Hsync_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, vgaPin13_Vsync_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2122      	movs	r1, #34	; 0x22
 8000d2a:	4822      	ldr	r0, [pc, #136]	; (8000db4 <MX_GPIO_Init+0x120>)
 8000d2c:	f002 f8b2 	bl	8002e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d36:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	481a      	ldr	r0, [pc, #104]	; (8000db0 <MX_GPIO_Init+0x11c>)
 8000d48:	f001 ff20 	bl	8002b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : vgaPin0_B0_Pin vgaPin1_B1_Pin vgaPin2_B2_Pin vgaPin3_B3_Pin
                           vgaPin4_G0_Pin vgaPin5_G1_Pin vgaPin6_G2_Pin vgaPin7_G3_Pin
                           vgaPin8_R0_Pin vgaPin9_R1_Pin vgaPin10_R2_Pin vgaPin11_R3_Pin
                           vgaPin12_Hsync_Pin */
  GPIO_InitStruct.Pin = vgaPin0_B0_Pin|vgaPin1_B1_Pin|vgaPin2_B2_Pin|vgaPin3_B3_Pin
 8000d4c:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000d50:	617b      	str	r3, [r7, #20]
                          |vgaPin4_G0_Pin|vgaPin5_G1_Pin|vgaPin6_G2_Pin|vgaPin7_G3_Pin
                          |vgaPin8_R0_Pin|vgaPin9_R1_Pin|vgaPin10_R2_Pin|vgaPin11_R3_Pin
                          |vgaPin12_Hsync_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	4812      	ldr	r0, [pc, #72]	; (8000db0 <MX_GPIO_Init+0x11c>)
 8000d66:	f001 ff11 	bl	8002b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : vgaPin13_Vsync_Pin */
  GPIO_InitStruct.Pin = vgaPin13_Vsync_Pin;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d76:	2302      	movs	r3, #2
 8000d78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(vgaPin13_Vsync_GPIO_Port, &GPIO_InitStruct);
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4619      	mov	r1, r3
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <MX_GPIO_Init+0x120>)
 8000d82:	f001 ff03 	bl	8002b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d86:	2320      	movs	r3, #32
 8000d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_GPIO_Init+0x120>)
 8000d9e:	f001 fef5 	bl	8002b8c <HAL_GPIO_Init>

}
 8000da2:	bf00      	nop
 8000da4:	3728      	adds	r7, #40	; 0x28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020800 	.word	0x40020800
 8000db4:	40020000 	.word	0x40020000

08000db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dbc:	b672      	cpsid	i
}
 8000dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <Error_Handler+0x8>
	...

08000dc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	4a0f      	ldr	r2, [pc, #60]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dda:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <HAL_MspInit+0x4c>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <HAL_MspInit+0x4c>)
 8000df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df4:	6413      	str	r3, [r2, #64]	; 0x40
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_MspInit+0x4c>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e02:	2007      	movs	r0, #7
 8000e04:	f001 faa2 	bl	800234c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40023800 	.word	0x40023800

08000e14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a35      	ldr	r2, [pc, #212]	; (8000ef8 <HAL_TIM_Base_MspInit+0xe4>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d148      	bne.n	8000eb8 <HAL_TIM_Base_MspInit+0xa4>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b34      	ldr	r3, [pc, #208]	; (8000efc <HAL_TIM_Base_MspInit+0xe8>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	4a33      	ldr	r2, [pc, #204]	; (8000efc <HAL_TIM_Base_MspInit+0xe8>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6453      	str	r3, [r2, #68]	; 0x44
 8000e36:	4b31      	ldr	r3, [pc, #196]	; (8000efc <HAL_TIM_Base_MspInit+0xe8>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8000e42:	4b2f      	ldr	r3, [pc, #188]	; (8000f00 <HAL_TIM_Base_MspInit+0xec>)
 8000e44:	4a2f      	ldr	r2, [pc, #188]	; (8000f04 <HAL_TIM_Base_MspInit+0xf0>)
 8000e46:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8000e48:	4b2d      	ldr	r3, [pc, #180]	; (8000f00 <HAL_TIM_Base_MspInit+0xec>)
 8000e4a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000e4e:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e50:	4b2b      	ldr	r3, [pc, #172]	; (8000f00 <HAL_TIM_Base_MspInit+0xec>)
 8000e52:	2240      	movs	r2, #64	; 0x40
 8000e54:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e56:	4b2a      	ldr	r3, [pc, #168]	; (8000f00 <HAL_TIM_Base_MspInit+0xec>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000e5c:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <HAL_TIM_Base_MspInit+0xec>)
 8000e5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e62:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e64:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <HAL_TIM_Base_MspInit+0xec>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e6a:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <HAL_TIM_Base_MspInit+0xec>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8000e70:	4b23      	ldr	r3, [pc, #140]	; (8000f00 <HAL_TIM_Base_MspInit+0xec>)
 8000e72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e76:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e78:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <HAL_TIM_Base_MspInit+0xec>)
 8000e7a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e7e:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e80:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <HAL_TIM_Base_MspInit+0xec>)
 8000e82:	2204      	movs	r2, #4
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim1_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8000e86:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <HAL_TIM_Base_MspInit+0xec>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim1_up.Init.MemBurst = DMA_MBURST_INC4;
 8000e8c:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <HAL_TIM_Base_MspInit+0xec>)
 8000e8e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e92:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim1_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000e94:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <HAL_TIM_Base_MspInit+0xec>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000e9a:	4819      	ldr	r0, [pc, #100]	; (8000f00 <HAL_TIM_Base_MspInit+0xec>)
 8000e9c:	f001 fa98 	bl	80023d0 <HAL_DMA_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_TIM_Base_MspInit+0x96>
    {
      Error_Handler();
 8000ea6:	f7ff ff87 	bl	8000db8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <HAL_TIM_Base_MspInit+0xec>)
 8000eae:	621a      	str	r2, [r3, #32]
 8000eb0:	4a13      	ldr	r2, [pc, #76]	; (8000f00 <HAL_TIM_Base_MspInit+0xec>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000eb6:	e01a      	b.n	8000eee <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM5)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <HAL_TIM_Base_MspInit+0xf4>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d115      	bne.n	8000eee <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <HAL_TIM_Base_MspInit+0xe8>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	4a0c      	ldr	r2, [pc, #48]	; (8000efc <HAL_TIM_Base_MspInit+0xe8>)
 8000ecc:	f043 0308 	orr.w	r3, r3, #8
 8000ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <HAL_TIM_Base_MspInit+0xe8>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f003 0308 	and.w	r3, r3, #8
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 1);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2032      	movs	r0, #50	; 0x32
 8000ee4:	f001 fa3d 	bl	8002362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000ee8:	2032      	movs	r0, #50	; 0x32
 8000eea:	f001 fa56 	bl	800239a <HAL_NVIC_EnableIRQ>
}
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40010000 	.word	0x40010000
 8000efc:	40023800 	.word	0x40023800
 8000f00:	2000011c 	.word	0x2000011c
 8000f04:	40026488 	.word	0x40026488
 8000f08:	40000c00 	.word	0x40000c00

08000f0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a12      	ldr	r2, [pc, #72]	; (8000f74 <HAL_TIM_MspPostInit+0x68>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d11e      	bne.n	8000f6c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <HAL_TIM_MspPostInit+0x6c>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a10      	ldr	r2, [pc, #64]	; (8000f78 <HAL_TIM_MspPostInit+0x6c>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_TIM_MspPostInit+0x6c>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	4619      	mov	r1, r3
 8000f66:	4805      	ldr	r0, [pc, #20]	; (8000f7c <HAL_TIM_MspPostInit+0x70>)
 8000f68:	f001 fe10 	bl	8002b8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f6c:	bf00      	nop
 8000f6e:	3720      	adds	r7, #32
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40010000 	.word	0x40010000
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020000 	.word	0x40020000

08000f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	; 0x28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a19      	ldr	r2, [pc, #100]	; (8001004 <HAL_UART_MspInit+0x84>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d12b      	bne.n	8000ffa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <HAL_UART_MspInit+0x88>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	4a17      	ldr	r2, [pc, #92]	; (8001008 <HAL_UART_MspInit+0x88>)
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <HAL_UART_MspInit+0x88>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <HAL_UART_MspInit+0x88>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a10      	ldr	r2, [pc, #64]	; (8001008 <HAL_UART_MspInit+0x88>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <HAL_UART_MspInit+0x88>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fda:	230c      	movs	r3, #12
 8000fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fea:	2307      	movs	r3, #7
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <HAL_UART_MspInit+0x8c>)
 8000ff6:	f001 fdc9 	bl	8002b8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ffa:	bf00      	nop
 8000ffc:	3728      	adds	r7, #40	; 0x28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40004400 	.word	0x40004400
 8001008:	40023800 	.word	0x40023800
 800100c:	40020000 	.word	0x40020000

08001010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <NMI_Handler+0x4>

08001016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <HardFault_Handler+0x4>

0800101c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <MemManage_Handler+0x4>

08001022 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <BusFault_Handler+0x4>

08001028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <UsageFault_Handler+0x4>

0800102e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105c:	f001 f886 	bl	800216c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}

08001064 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <TIM5_IRQHandler+0x10>)
 800106a:	f002 fd1d 	bl	8003aa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200000d4 	.word	0x200000d4

08001078 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 800107c:	4802      	ldr	r0, [pc, #8]	; (8001088 <DMA2_Stream5_IRQHandler+0x10>)
 800107e:	f001 faad 	bl	80025dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	2000011c 	.word	0x2000011c

0800108c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001094:	4a14      	ldr	r2, [pc, #80]	; (80010e8 <_sbrk+0x5c>)
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <_sbrk+0x60>)
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a0:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <_sbrk+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d102      	bne.n	80010ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <_sbrk+0x64>)
 80010aa:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <_sbrk+0x68>)
 80010ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <_sbrk+0x64>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d207      	bcs.n	80010cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010bc:	f003 ff10 	bl	8004ee0 <__errno>
 80010c0:	4603      	mov	r3, r0
 80010c2:	220c      	movs	r2, #12
 80010c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	e009      	b.n	80010e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <_sbrk+0x64>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <_sbrk+0x64>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <_sbrk+0x64>)
 80010dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010de:	68fb      	ldr	r3, [r7, #12]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20018000 	.word	0x20018000
 80010ec:	00000400 	.word	0x00000400
 80010f0:	20000278 	.word	0x20000278
 80010f4:	200046c0 	.word	0x200046c0

080010f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <SystemInit+0x20>)
 80010fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001102:	4a05      	ldr	r2, [pc, #20]	; (8001118 <SystemInit+0x20>)
 8001104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <old_memCopy>:
 *
 * @param DstAddress copies to destination address incrementing
 *
 * @param DataLength number of unit32_t to be copied
 */
HAL_StatusTypeDef old_memCopy(uint32_t * SrcAddress, uint32_t * DstAddress, uint32_t DataLength){
 800111c:	b580      	push	{r7, lr}
 800111e:	b09a      	sub	sp, #104	; 0x68
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]

	memCopyDMA->Init.PeriphInc = DMA_PINC_ENABLE;
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <old_memCopy+0x78>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001130:	60da      	str	r2, [r3, #12]
	if (HAL_DMA_Init(memCopyDMA) != HAL_OK) {
 8001132:	4b18      	ldr	r3, [pc, #96]	; (8001194 <old_memCopy+0x78>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f001 f94a 	bl	80023d0 <HAL_DMA_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <old_memCopy+0x2a>
		Error_Handler();
 8001142:	f7ff fe39 	bl	8000db8 <Error_Handler>
	}
	char str[81] = { '\0' };
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	224d      	movs	r2, #77	; 0x4d
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f003 feee 	bl	8004f34 <memset>
	int str_len = sprintf(str, "start mem copy\r\n");
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	490e      	ldr	r1, [pc, #56]	; (8001198 <old_memCopy+0x7c>)
 800115e:	4618      	mov	r0, r3
 8001160:	f003 fef0 	bl	8004f44 <siprintf>
 8001164:	6678      	str	r0, [r7, #100]	; 0x64
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <old_memCopy+0x80>)
 8001168:	6818      	ldr	r0, [r3, #0]
 800116a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800116c:	b29a      	uxth	r2, r3
 800116e:	f107 0110 	add.w	r1, r7, #16
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	f003 fb3e 	bl	80047f6 <HAL_UART_Transmit>
	//SET_BIT(vgaCircularDMA.Instance->CR, DMA_MINC_ENABLE);
	return HAL_DMA_Start_IT(memCopyDMA, (uint32_t)SrcAddress, (uint32_t)DstAddress, DataLength);
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <old_memCopy+0x78>)
 800117c:	6818      	ldr	r0, [r3, #0]
 800117e:	68f9      	ldr	r1, [r7, #12]
 8001180:	68ba      	ldr	r2, [r7, #8]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f001 f9d2 	bl	800252c <HAL_DMA_Start_IT>
 8001188:	4603      	mov	r3, r0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3768      	adds	r7, #104	; 0x68
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20004294 	.word	0x20004294
 8001198:	080059a4 	.word	0x080059a4
 800119c:	200042b8 	.word	0x200042b8

080011a0 <old_memSet>:
 *
 * @param DstAddress destination address incrementing
 *
 * @param DataLength number of unit32_t to be written
 */
HAL_StatusTypeDef old_memSet(uint32_t value, uint32_t * DstAddress, uint32_t DataLength){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b09a      	sub	sp, #104	; 0x68
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
	static volatile uint32_t setVal = 0;
	setVal = value;
 80011ac:	4a1b      	ldr	r2, [pc, #108]	; (800121c <old_memSet+0x7c>)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6013      	str	r3, [r2, #0]
	memCopyDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 80011b2:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <old_memSet+0x80>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
	if (HAL_DMA_Init(memCopyDMA) != HAL_OK) {
 80011ba:	4b19      	ldr	r3, [pc, #100]	; (8001220 <old_memSet+0x80>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f001 f906 	bl	80023d0 <HAL_DMA_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <old_memSet+0x2e>
		Error_Handler();
 80011ca:	f7ff fdf5 	bl	8000db8 <Error_Handler>
	}
	char str[81] = { '\0' };
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	224d      	movs	r2, #77	; 0x4d
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f003 feaa 	bl	8004f34 <memset>
	int str_len = sprintf(str, "start mem set\r\n");
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	490f      	ldr	r1, [pc, #60]	; (8001224 <old_memSet+0x84>)
 80011e6:	4618      	mov	r0, r3
 80011e8:	f003 feac 	bl	8004f44 <siprintf>
 80011ec:	6678      	str	r0, [r7, #100]	; 0x64
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <old_memSet+0x88>)
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	f107 0110 	add.w	r1, r7, #16
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
 80011fe:	f003 fafa 	bl	80047f6 <HAL_UART_Transmit>
	//CLEAR_BIT(vgaCircularDMA.Instance->CR, DMA_MINC_ENABLE);
	return HAL_DMA_Start_IT(memCopyDMA, (uint32_t)&setVal, (uint32_t)DstAddress, DataLength);
 8001202:	4b07      	ldr	r3, [pc, #28]	; (8001220 <old_memSet+0x80>)
 8001204:	6818      	ldr	r0, [r3, #0]
 8001206:	4905      	ldr	r1, [pc, #20]	; (800121c <old_memSet+0x7c>)
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f001 f98e 	bl	800252c <HAL_DMA_Start_IT>
 8001210:	4603      	mov	r3, r0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3768      	adds	r7, #104	; 0x68
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200046a4 	.word	0x200046a4
 8001220:	20004294 	.word	0x20004294
 8001224:	080059b8 	.word	0x080059b8
 8001228:	200042b8 	.word	0x200042b8

0800122c <vga_DMA_XFER_CPLT_CB_ID>:


//HAL_DMA_XFER_CPLT_CB_ID         = 0x00U,  /*!< Full transfer     */
void vga_DMA_XFER_CPLT_CB_ID(){
 800122c:	b580      	push	{r7, lr}
 800122e:	b096      	sub	sp, #88	; 0x58
 8001230:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 8001232:	2300      	movs	r3, #0
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	224d      	movs	r2, #77	; 0x4d
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f003 fe79 	bl	8004f34 <memset>
	int str_len = sprintf(str, "Full transfer\r\n");
 8001242:	463b      	mov	r3, r7
 8001244:	4908      	ldr	r1, [pc, #32]	; (8001268 <vga_DMA_XFER_CPLT_CB_ID+0x3c>)
 8001246:	4618      	mov	r0, r3
 8001248:	f003 fe7c 	bl	8004f44 <siprintf>
 800124c:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800124e:	4b07      	ldr	r3, [pc, #28]	; (800126c <vga_DMA_XFER_CPLT_CB_ID+0x40>)
 8001250:	6818      	ldr	r0, [r3, #0]
 8001252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001254:	b29a      	uxth	r2, r3
 8001256:	4639      	mov	r1, r7
 8001258:	f04f 33ff 	mov.w	r3, #4294967295
 800125c:	f003 facb 	bl	80047f6 <HAL_UART_Transmit>
}
 8001260:	bf00      	nop
 8001262:	3758      	adds	r7, #88	; 0x58
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	080059c8 	.word	0x080059c8
 800126c:	200042b8 	.word	0x200042b8

08001270 <vga_DMA_XFER_HALFCPLT_CB_ID>:
//HAL_DMA_XFER_HALFCPLT_CB_ID     = 0x01U,  /*!< Half Transfer     */
void vga_DMA_XFER_HALFCPLT_CB_ID(){
 8001270:	b580      	push	{r7, lr}
 8001272:	b096      	sub	sp, #88	; 0x58
 8001274:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 8001276:	2300      	movs	r3, #0
 8001278:	603b      	str	r3, [r7, #0]
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	224d      	movs	r2, #77	; 0x4d
 800127e:	2100      	movs	r1, #0
 8001280:	4618      	mov	r0, r3
 8001282:	f003 fe57 	bl	8004f34 <memset>
	int str_len = sprintf(str, "Half Transfer\r\n");
 8001286:	463b      	mov	r3, r7
 8001288:	4908      	ldr	r1, [pc, #32]	; (80012ac <vga_DMA_XFER_HALFCPLT_CB_ID+0x3c>)
 800128a:	4618      	mov	r0, r3
 800128c:	f003 fe5a 	bl	8004f44 <siprintf>
 8001290:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8001292:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <vga_DMA_XFER_HALFCPLT_CB_ID+0x40>)
 8001294:	6818      	ldr	r0, [r3, #0]
 8001296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001298:	b29a      	uxth	r2, r3
 800129a:	4639      	mov	r1, r7
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
 80012a0:	f003 faa9 	bl	80047f6 <HAL_UART_Transmit>
}
 80012a4:	bf00      	nop
 80012a6:	3758      	adds	r7, #88	; 0x58
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	080059d8 	.word	0x080059d8
 80012b0:	200042b8 	.word	0x200042b8

080012b4 <vga_DMA_XFER_M1CPLT_CB_ID>:
//HAL_DMA_XFER_M1CPLT_CB_ID       = 0x02U,  /*!< M1 Full Transfer  */
void vga_DMA_XFER_M1CPLT_CB_ID(){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b096      	sub	sp, #88	; 0x58
 80012b8:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 80012ba:	2300      	movs	r3, #0
 80012bc:	603b      	str	r3, [r7, #0]
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	224d      	movs	r2, #77	; 0x4d
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f003 fe35 	bl	8004f34 <memset>
	int str_len = sprintf(str, "M1 Full Transfer\r\n");
 80012ca:	463b      	mov	r3, r7
 80012cc:	4908      	ldr	r1, [pc, #32]	; (80012f0 <vga_DMA_XFER_M1CPLT_CB_ID+0x3c>)
 80012ce:	4618      	mov	r0, r3
 80012d0:	f003 fe38 	bl	8004f44 <siprintf>
 80012d4:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <vga_DMA_XFER_M1CPLT_CB_ID+0x40>)
 80012d8:	6818      	ldr	r0, [r3, #0]
 80012da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012dc:	b29a      	uxth	r2, r3
 80012de:	4639      	mov	r1, r7
 80012e0:	f04f 33ff 	mov.w	r3, #4294967295
 80012e4:	f003 fa87 	bl	80047f6 <HAL_UART_Transmit>
}
 80012e8:	bf00      	nop
 80012ea:	3758      	adds	r7, #88	; 0x58
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	080059e8 	.word	0x080059e8
 80012f4:	200042b8 	.word	0x200042b8

080012f8 <vga_DMA_XFER_M1HALFCPLT_CB_ID>:
//HAL_DMA_XFER_M1HALFCPLT_CB_ID   = 0x03U,  /*!< M1 Half Transfer  */
void vga_DMA_XFER_M1HALFCPLT_CB_ID(){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b096      	sub	sp, #88	; 0x58
 80012fc:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 80012fe:	2300      	movs	r3, #0
 8001300:	603b      	str	r3, [r7, #0]
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	224d      	movs	r2, #77	; 0x4d
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f003 fe13 	bl	8004f34 <memset>
	int str_len = sprintf(str, "M1 Half Transfer\r\n");
 800130e:	463b      	mov	r3, r7
 8001310:	4908      	ldr	r1, [pc, #32]	; (8001334 <vga_DMA_XFER_M1HALFCPLT_CB_ID+0x3c>)
 8001312:	4618      	mov	r0, r3
 8001314:	f003 fe16 	bl	8004f44 <siprintf>
 8001318:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800131a:	4b07      	ldr	r3, [pc, #28]	; (8001338 <vga_DMA_XFER_M1HALFCPLT_CB_ID+0x40>)
 800131c:	6818      	ldr	r0, [r3, #0]
 800131e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001320:	b29a      	uxth	r2, r3
 8001322:	4639      	mov	r1, r7
 8001324:	f04f 33ff 	mov.w	r3, #4294967295
 8001328:	f003 fa65 	bl	80047f6 <HAL_UART_Transmit>
}
 800132c:	bf00      	nop
 800132e:	3758      	adds	r7, #88	; 0x58
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	080059fc 	.word	0x080059fc
 8001338:	200042b8 	.word	0x200042b8

0800133c <vga_DMA_XFER_ERROR_CB_ID>:
//HAL_DMA_XFER_ERROR_CB_ID        = 0x04U,  /*!< Error             */
void vga_DMA_XFER_ERROR_CB_ID(){
 800133c:	b580      	push	{r7, lr}
 800133e:	b09a      	sub	sp, #104	; 0x68
 8001340:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	224d      	movs	r2, #77	; 0x4d
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f003 fdf0 	bl	8004f34 <memset>
	char * err = "Default";
 8001354:	4b57      	ldr	r3, [pc, #348]	; (80014b4 <vga_DMA_XFER_ERROR_CB_ID+0x178>)
 8001356:	667b      	str	r3, [r7, #100]	; 0x64
	uint32_t errorCode = HAL_DMA_GetError(vgaCircularDMA);
 8001358:	4b57      	ldr	r3, [pc, #348]	; (80014b8 <vga_DMA_XFER_ERROR_CB_ID+0x17c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f001 fb29 	bl	80029b4 <HAL_DMA_GetError>
 8001362:	6638      	str	r0, [r7, #96]	; 0x60
	if(errorCode == HAL_DMA_ERROR_NONE){
 8001364:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001366:	2b00      	cmp	r3, #0
 8001368:	f040 809b 	bne.w	80014a2 <vga_DMA_XFER_ERROR_CB_ID+0x166>
		int str_len = sprintf(str, "DMA %s\r\n", "No error");
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	4a53      	ldr	r2, [pc, #332]	; (80014bc <vga_DMA_XFER_ERROR_CB_ID+0x180>)
 8001370:	4953      	ldr	r1, [pc, #332]	; (80014c0 <vga_DMA_XFER_ERROR_CB_ID+0x184>)
 8001372:	4618      	mov	r0, r3
 8001374:	f003 fde6 	bl	8004f44 <siprintf>
 8001378:	65f8      	str	r0, [r7, #92]	; 0x5c
		HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800137a:	4b52      	ldr	r3, [pc, #328]	; (80014c4 <vga_DMA_XFER_ERROR_CB_ID+0x188>)
 800137c:	6818      	ldr	r0, [r3, #0]
 800137e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001380:	b29a      	uxth	r2, r3
 8001382:	1d39      	adds	r1, r7, #4
 8001384:	f04f 33ff 	mov.w	r3, #4294967295
 8001388:	f003 fa35 	bl	80047f6 <HAL_UART_Transmit>
	}
	while(errorCode){
 800138c:	e089      	b.n	80014a2 <vga_DMA_XFER_ERROR_CB_ID+0x166>
		switch(errorCode){
 800138e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001394:	d06d      	beq.n	8001472 <vga_DMA_XFER_ERROR_CB_ID+0x136>
 8001396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800139c:	d86c      	bhi.n	8001478 <vga_DMA_XFER_ERROR_CB_ID+0x13c>
 800139e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013a0:	2b80      	cmp	r3, #128	; 0x80
 80013a2:	d063      	beq.n	800146c <vga_DMA_XFER_ERROR_CB_ID+0x130>
 80013a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013a6:	2b80      	cmp	r3, #128	; 0x80
 80013a8:	d866      	bhi.n	8001478 <vga_DMA_XFER_ERROR_CB_ID+0x13c>
 80013aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013ac:	2b20      	cmp	r3, #32
 80013ae:	d847      	bhi.n	8001440 <vga_DMA_XFER_ERROR_CB_ID+0x104>
 80013b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013b2:	2b20      	cmp	r3, #32
 80013b4:	d860      	bhi.n	8001478 <vga_DMA_XFER_ERROR_CB_ID+0x13c>
 80013b6:	a201      	add	r2, pc, #4	; (adr r2, 80013bc <vga_DMA_XFER_ERROR_CB_ID+0x80>)
 80013b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013bc:	08001449 	.word	0x08001449
 80013c0:	0800144f 	.word	0x0800144f
 80013c4:	08001455 	.word	0x08001455
 80013c8:	08001479 	.word	0x08001479
 80013cc:	0800145b 	.word	0x0800145b
 80013d0:	08001479 	.word	0x08001479
 80013d4:	08001479 	.word	0x08001479
 80013d8:	08001479 	.word	0x08001479
 80013dc:	08001479 	.word	0x08001479
 80013e0:	08001479 	.word	0x08001479
 80013e4:	08001479 	.word	0x08001479
 80013e8:	08001479 	.word	0x08001479
 80013ec:	08001479 	.word	0x08001479
 80013f0:	08001479 	.word	0x08001479
 80013f4:	08001479 	.word	0x08001479
 80013f8:	08001479 	.word	0x08001479
 80013fc:	08001479 	.word	0x08001479
 8001400:	08001479 	.word	0x08001479
 8001404:	08001479 	.word	0x08001479
 8001408:	08001479 	.word	0x08001479
 800140c:	08001479 	.word	0x08001479
 8001410:	08001479 	.word	0x08001479
 8001414:	08001479 	.word	0x08001479
 8001418:	08001479 	.word	0x08001479
 800141c:	08001479 	.word	0x08001479
 8001420:	08001479 	.word	0x08001479
 8001424:	08001479 	.word	0x08001479
 8001428:	08001479 	.word	0x08001479
 800142c:	08001479 	.word	0x08001479
 8001430:	08001479 	.word	0x08001479
 8001434:	08001479 	.word	0x08001479
 8001438:	08001479 	.word	0x08001479
 800143c:	08001461 	.word	0x08001461
 8001440:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001442:	2b40      	cmp	r3, #64	; 0x40
 8001444:	d00f      	beq.n	8001466 <vga_DMA_XFER_ERROR_CB_ID+0x12a>
 8001446:	e017      	b.n	8001478 <vga_DMA_XFER_ERROR_CB_ID+0x13c>
		case HAL_DMA_ERROR_NONE            : err = "No error";break;    /*!< No error                               */
 8001448:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <vga_DMA_XFER_ERROR_CB_ID+0x180>)
 800144a:	667b      	str	r3, [r7, #100]	; 0x64
 800144c:	e014      	b.n	8001478 <vga_DMA_XFER_ERROR_CB_ID+0x13c>
		case HAL_DMA_ERROR_TE              : err = "Transfer error";break;    /*!< Transfer error                         */
 800144e:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <vga_DMA_XFER_ERROR_CB_ID+0x18c>)
 8001450:	667b      	str	r3, [r7, #100]	; 0x64
 8001452:	e011      	b.n	8001478 <vga_DMA_XFER_ERROR_CB_ID+0x13c>
		case HAL_DMA_ERROR_FE              : err = "FIFO error";break;    /*!< FIFO error                             */
 8001454:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <vga_DMA_XFER_ERROR_CB_ID+0x190>)
 8001456:	667b      	str	r3, [r7, #100]	; 0x64
 8001458:	e00e      	b.n	8001478 <vga_DMA_XFER_ERROR_CB_ID+0x13c>
		case HAL_DMA_ERROR_DME             : err = "Direct Mode error";break;    /*!< Direct Mode error                      */
 800145a:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <vga_DMA_XFER_ERROR_CB_ID+0x194>)
 800145c:	667b      	str	r3, [r7, #100]	; 0x64
 800145e:	e00b      	b.n	8001478 <vga_DMA_XFER_ERROR_CB_ID+0x13c>
		case HAL_DMA_ERROR_TIMEOUT         : err = "Timeout error";break;    /*!< Timeout error                          */
 8001460:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <vga_DMA_XFER_ERROR_CB_ID+0x198>)
 8001462:	667b      	str	r3, [r7, #100]	; 0x64
 8001464:	e008      	b.n	8001478 <vga_DMA_XFER_ERROR_CB_ID+0x13c>
		case HAL_DMA_ERROR_PARAM           : err = "Parameter error";break;    /*!< Parameter error                        */
 8001466:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <vga_DMA_XFER_ERROR_CB_ID+0x19c>)
 8001468:	667b      	str	r3, [r7, #100]	; 0x64
 800146a:	e005      	b.n	8001478 <vga_DMA_XFER_ERROR_CB_ID+0x13c>
		case HAL_DMA_ERROR_NO_XFER         : err = "Abort requested with no Xfer ongoing";break;    /*!< Abort requested with no Xfer ongoing   */
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <vga_DMA_XFER_ERROR_CB_ID+0x1a0>)
 800146e:	667b      	str	r3, [r7, #100]	; 0x64
 8001470:	e002      	b.n	8001478 <vga_DMA_XFER_ERROR_CB_ID+0x13c>
		case HAL_DMA_ERROR_NOT_SUPPORTED   : err = "Not supported mode";break;    /*!< Not supported mode                     */
 8001472:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <vga_DMA_XFER_ERROR_CB_ID+0x1a4>)
 8001474:	667b      	str	r3, [r7, #100]	; 0x64
 8001476:	bf00      	nop
		}

		int str_len = sprintf(str, "DMA %s\r\n", err);
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800147c:	4910      	ldr	r1, [pc, #64]	; (80014c0 <vga_DMA_XFER_ERROR_CB_ID+0x184>)
 800147e:	4618      	mov	r0, r3
 8001480:	f003 fd60 	bl	8004f44 <siprintf>
 8001484:	65b8      	str	r0, [r7, #88]	; 0x58
		HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <vga_DMA_XFER_ERROR_CB_ID+0x188>)
 8001488:	6818      	ldr	r0, [r3, #0]
 800148a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800148c:	b29a      	uxth	r2, r3
 800148e:	1d39      	adds	r1, r7, #4
 8001490:	f04f 33ff 	mov.w	r3, #4294967295
 8001494:	f003 f9af 	bl	80047f6 <HAL_UART_Transmit>
		errorCode &= errorCode - 1;
 8001498:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800149a:	3b01      	subs	r3, #1
 800149c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800149e:	4013      	ands	r3, r2
 80014a0:	663b      	str	r3, [r7, #96]	; 0x60
	while(errorCode){
 80014a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f47f af72 	bne.w	800138e <vga_DMA_XFER_ERROR_CB_ID+0x52>
	};

}
 80014aa:	bf00      	nop
 80014ac:	bf00      	nop
 80014ae:	3768      	adds	r7, #104	; 0x68
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	08005a10 	.word	0x08005a10
 80014b8:	20004290 	.word	0x20004290
 80014bc:	08005a18 	.word	0x08005a18
 80014c0:	08005a24 	.word	0x08005a24
 80014c4:	200042b8 	.word	0x200042b8
 80014c8:	08005a30 	.word	0x08005a30
 80014cc:	08005a40 	.word	0x08005a40
 80014d0:	08005a4c 	.word	0x08005a4c
 80014d4:	08005a60 	.word	0x08005a60
 80014d8:	08005a70 	.word	0x08005a70
 80014dc:	08005a80 	.word	0x08005a80
 80014e0:	08005aa8 	.word	0x08005aa8

080014e4 <vga_DMA_XFER_ABORT_CB_ID>:
//HAL_DMA_XFER_ABORT_CB_ID        = 0x05U,  /*!< Abort             */
void vga_DMA_XFER_ABORT_CB_ID(){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b096      	sub	sp, #88	; 0x58
 80014e8:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 80014ea:	2300      	movs	r3, #0
 80014ec:	603b      	str	r3, [r7, #0]
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	224d      	movs	r2, #77	; 0x4d
 80014f2:	2100      	movs	r1, #0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f003 fd1d 	bl	8004f34 <memset>
	int str_len = sprintf(str, "DMA Abort\r\n");
 80014fa:	463b      	mov	r3, r7
 80014fc:	4908      	ldr	r1, [pc, #32]	; (8001520 <vga_DMA_XFER_ABORT_CB_ID+0x3c>)
 80014fe:	4618      	mov	r0, r3
 8001500:	f003 fd20 	bl	8004f44 <siprintf>
 8001504:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <vga_DMA_XFER_ABORT_CB_ID+0x40>)
 8001508:	6818      	ldr	r0, [r3, #0]
 800150a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800150c:	b29a      	uxth	r2, r3
 800150e:	4639      	mov	r1, r7
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
 8001514:	f003 f96f 	bl	80047f6 <HAL_UART_Transmit>
}
 8001518:	bf00      	nop
 800151a:	3758      	adds	r7, #88	; 0x58
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	08005abc 	.word	0x08005abc
 8001524:	200042b8 	.word	0x200042b8

08001528 <vga_DMA_XFER_ALL_CB_ID>:
//HAL_DMA_XFER_ALL_CB_ID          = 0x06U   /*!< All               */
void vga_DMA_XFER_ALL_CB_ID(){
 8001528:	b580      	push	{r7, lr}
 800152a:	b096      	sub	sp, #88	; 0x58
 800152c:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 800152e:	2300      	movs	r3, #0
 8001530:	603b      	str	r3, [r7, #0]
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	224d      	movs	r2, #77	; 0x4d
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f003 fcfb 	bl	8004f34 <memset>
	int str_len = sprintf(str, "Full transfer\r\n");
 800153e:	463b      	mov	r3, r7
 8001540:	4908      	ldr	r1, [pc, #32]	; (8001564 <vga_DMA_XFER_ALL_CB_ID+0x3c>)
 8001542:	4618      	mov	r0, r3
 8001544:	f003 fcfe 	bl	8004f44 <siprintf>
 8001548:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800154a:	4b07      	ldr	r3, [pc, #28]	; (8001568 <vga_DMA_XFER_ALL_CB_ID+0x40>)
 800154c:	6818      	ldr	r0, [r3, #0]
 800154e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001550:	b29a      	uxth	r2, r3
 8001552:	4639      	mov	r1, r7
 8001554:	f04f 33ff 	mov.w	r3, #4294967295
 8001558:	f003 f94d 	bl	80047f6 <HAL_UART_Transmit>
}
 800155c:	bf00      	nop
 800155e:	3758      	adds	r7, #88	; 0x58
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	080059c8 	.word	0x080059c8
 8001568:	200042b8 	.word	0x200042b8

0800156c <registerDebugInterupts>:



void registerDebugInterupts(DMA_HandleTypeDef * toDebug){
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	HAL_DMA_RegisterCallback(toDebug, HAL_DMA_XFER_ABORT_CB_ID, vga_DMA_XFER_CPLT_CB_ID);
 8001574:	4a13      	ldr	r2, [pc, #76]	; (80015c4 <registerDebugInterupts+0x58>)
 8001576:	2105      	movs	r1, #5
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f001 f9b9 	bl	80028f0 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(toDebug, HAL_DMA_XFER_HALFCPLT_CB_ID, vga_DMA_XFER_HALFCPLT_CB_ID);
 800157e:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <registerDebugInterupts+0x5c>)
 8001580:	2101      	movs	r1, #1
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f001 f9b4 	bl	80028f0 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(toDebug, HAL_DMA_XFER_M1CPLT_CB_ID, vga_DMA_XFER_M1CPLT_CB_ID);
 8001588:	4a10      	ldr	r2, [pc, #64]	; (80015cc <registerDebugInterupts+0x60>)
 800158a:	2102      	movs	r1, #2
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f001 f9af 	bl	80028f0 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(toDebug, HAL_DMA_XFER_M1HALFCPLT_CB_ID, vga_DMA_XFER_M1HALFCPLT_CB_ID);
 8001592:	4a0f      	ldr	r2, [pc, #60]	; (80015d0 <registerDebugInterupts+0x64>)
 8001594:	2103      	movs	r1, #3
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f001 f9aa 	bl	80028f0 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(toDebug, HAL_DMA_XFER_ERROR_CB_ID, vga_DMA_XFER_ERROR_CB_ID);
 800159c:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <registerDebugInterupts+0x68>)
 800159e:	2104      	movs	r1, #4
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f001 f9a5 	bl	80028f0 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(toDebug, HAL_DMA_XFER_ABORT_CB_ID, vga_DMA_XFER_ABORT_CB_ID);
 80015a6:	4a0c      	ldr	r2, [pc, #48]	; (80015d8 <registerDebugInterupts+0x6c>)
 80015a8:	2105      	movs	r1, #5
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f001 f9a0 	bl	80028f0 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(toDebug, HAL_DMA_XFER_ALL_CB_ID, vga_DMA_XFER_ALL_CB_ID);
 80015b0:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <registerDebugInterupts+0x70>)
 80015b2:	2106      	movs	r1, #6
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f001 f99b 	bl	80028f0 <HAL_DMA_RegisterCallback>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	0800122d 	.word	0x0800122d
 80015c8:	08001271 	.word	0x08001271
 80015cc:	080012b5 	.word	0x080012b5
 80015d0:	080012f9 	.word	0x080012f9
 80015d4:	0800133d 	.word	0x0800133d
 80015d8:	080014e5 	.word	0x080014e5
 80015dc:	08001529 	.word	0x08001529

080015e0 <registerHUART>:

void registerHUART(UART_HandleTypeDef * huart){
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	huartE = huart;
 80015e8:	4a04      	ldr	r2, [pc, #16]	; (80015fc <registerHUART+0x1c>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6013      	str	r3, [r2, #0]
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	200042b8 	.word	0x200042b8

08001600 <clearVisibleArea>:

void clearVisibleArea(Color * lineBuffPart){
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	//uses 32 bit mode to clear faster
	old_memSet(0, (uint32_t*)&lineBuffPart[horiFront+horiSync+horiBack], horiRes/4);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3328      	adds	r3, #40	; 0x28
 800160c:	2228      	movs	r2, #40	; 0x28
 800160e:	4619      	mov	r1, r3
 8001610:	2000      	movs	r0, #0
 8001612:	f7ff fdc5 	bl	80011a0 <old_memSet>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop

08001620 <setVerticalSyncP1>:
	old_memSet(0x80808080, (uint32_t*)lineBuffPart, horiWhole/4);
	//set vertical and Horizontal sync in overlap
	old_memSet(0xC0C0C0C0, (uint32_t*)&lineBuffPart[horiFront], horiSync/4);
}

void setVerticalSyncP1(Color * lineBuffPart){
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	//uses 32 bit accesses to clear faster

	//set VerticalSync everywhere
	//HAL_DMA_RegisterCallback(memCopyDMA, HAL_DMA_XFER_CPLT_CB_ID, setVerticalSyncP2);
	old_memSet(0x80808080, (uint32_t*)lineBuffPart, horiWhole/4);
 8001628:	2232      	movs	r2, #50	; 0x32
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	f04f 3080 	mov.w	r0, #2155905152	; 0x80808080
 8001630:	f7ff fdb6 	bl	80011a0 <old_memSet>
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <setVerticalSyncP2>:

void setVerticalSyncP2(Color * lineBuffPart){
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	//uses 32 bit accesses to clear faster

	//set vertical and Horizontal sync in overlap
	old_memSet(0xC0C0C0C0, (uint32_t*)&lineBuffPart[horiFront], horiSync/4);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3304      	adds	r3, #4
 8001648:	2206      	movs	r2, #6
 800164a:	4619      	mov	r1, r3
 800164c:	f04f 30c0 	mov.w	r0, #3233857728	; 0xc0c0c0c0
 8001650:	f7ff fda6 	bl	80011a0 <old_memSet>
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <setHorizontalSyncP1>:
	old_memSet(0, (uint32_t*)lineBuffPart, horiWhole/4);
	//set Horizontal sync
	old_memSet(0x40404040, (uint32_t*)&lineBuffPart[horiFront], horiSync/4);
}

void setHorizontalSyncP1(Color * lineBuffPart){
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	//uses 32 bit accesses to clear faster

	//clear VerticalSync everywhere / clear entire buffer
	old_memSet(0, (uint32_t*)lineBuffPart, horiWhole/4);
 8001664:	2232      	movs	r2, #50	; 0x32
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	2000      	movs	r0, #0
 800166a:	f7ff fd99 	bl	80011a0 <old_memSet>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop

08001678 <setHorizontalSyncP2>:

void setHorizontalSyncP2(Color * lineBuffPart){
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	//uses 32 bit accesses to clear faster

	//set Horizontal sync
	old_memSet(0x40404040, (uint32_t*)&lineBuffPart[horiFront], horiSync/4);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3304      	adds	r3, #4
 8001684:	2206      	movs	r2, #6
 8001686:	4619      	mov	r1, r3
 8001688:	f04f 3040 	mov.w	r0, #1077952576	; 0x40404040
 800168c:	f7ff fd88 	bl	80011a0 <old_memSet>
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <renderLine>:

void __weak renderLine(Color * lineBuffPart, const int lineCount){
 8001698:	b580      	push	{r7, lr}
 800169a:	b098      	sub	sp, #96	; 0x60
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
	//both buffers are 32 bit aligned

	char str[81] = { '\0' };
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	f107 030c 	add.w	r3, r7, #12
 80016aa:	224d      	movs	r2, #77	; 0x4d
 80016ac:	2100      	movs	r1, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f003 fc40 	bl	8004f34 <memset>
	int str_len = sprintf(str, "Rendering line %i\r\n", lineCount);
 80016b4:	f107 0308 	add.w	r3, r7, #8
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	4910      	ldr	r1, [pc, #64]	; (80016fc <renderLine+0x64>)
 80016bc:	4618      	mov	r0, r3
 80016be:	f003 fc41 	bl	8004f44 <siprintf>
 80016c2:	65f8      	str	r0, [r7, #92]	; 0x5c
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80016c4:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <renderLine+0x68>)
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	f107 0108 	add.w	r1, r7, #8
 80016d0:	f04f 33ff 	mov.w	r3, #4294967295
 80016d4:	f003 f88f 	bl	80047f6 <HAL_UART_Transmit>
	//copy the current line of the screen buffer in to the line buffer
	old_memCopy((uint32_t*)&screenBuff[horiRes*lineCount], (uint32_t *)&lineBuffPart[horiFront+horiSync+horiBack], horiRes/4);
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	4613      	mov	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	015b      	lsls	r3, r3, #5
 80016e2:	461a      	mov	r2, r3
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <renderLine+0x6c>)
 80016e6:	18d0      	adds	r0, r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3328      	adds	r3, #40	; 0x28
 80016ec:	2228      	movs	r2, #40	; 0x28
 80016ee:	4619      	mov	r1, r3
 80016f0:	f7ff fd14 	bl	800111c <old_memCopy>
}
 80016f4:	bf00      	nop
 80016f6:	3760      	adds	r7, #96	; 0x60
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	08005ac8 	.word	0x08005ac8
 8001700:	200042b8 	.word	0x200042b8
 8001704:	2000040c 	.word	0x2000040c

08001708 <copyLastLine>:

void copyLastLine(Color * activeBuffer, const Color * oldBuffer){
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
	//both buffers are 32 bit aligned
	old_memCopy((uint32_t*)&oldBuffer[horiFront+horiSync+horiBack], (uint32_t *)&activeBuffer[horiFront+horiSync+horiBack], horiRes/4);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3328      	adds	r3, #40	; 0x28
 800171c:	2228      	movs	r2, #40	; 0x28
 800171e:	4619      	mov	r1, r3
 8001720:	f7ff fcfc 	bl	800111c <old_memCopy>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <printVgaState>:


void printVgaState(){
 800172c:	b580      	push	{r7, lr}
 800172e:	b098      	sub	sp, #96	; 0x60
 8001730:	af00      	add	r7, sp, #0
	char * ref_str;
	char str[81] = { '\0' };
 8001732:	2300      	movs	r3, #0
 8001734:	607b      	str	r3, [r7, #4]
 8001736:	f107 0308 	add.w	r3, r7, #8
 800173a:	224d      	movs	r2, #77	; 0x4d
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f003 fbf8 	bl	8004f34 <memset>
	int str_len = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	65bb      	str	r3, [r7, #88]	; 0x58

	switch(state){
 8001748:	4b46      	ldr	r3, [pc, #280]	; (8001864 <printVgaState+0x138>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b15      	cmp	r3, #21
 800174e:	d871      	bhi.n	8001834 <printVgaState+0x108>
 8001750:	a201      	add	r2, pc, #4	; (adr r2, 8001758 <printVgaState+0x2c>)
 8001752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001756:	bf00      	nop
 8001758:	080017b1 	.word	0x080017b1
 800175c:	080017b7 	.word	0x080017b7
 8001760:	080017bd 	.word	0x080017bd
 8001764:	080017c3 	.word	0x080017c3
 8001768:	080017c9 	.word	0x080017c9
 800176c:	080017cf 	.word	0x080017cf
 8001770:	080017d5 	.word	0x080017d5
 8001774:	080017db 	.word	0x080017db
 8001778:	080017e1 	.word	0x080017e1
 800177c:	080017e7 	.word	0x080017e7
 8001780:	080017ed 	.word	0x080017ed
 8001784:	080017f3 	.word	0x080017f3
 8001788:	080017f9 	.word	0x080017f9
 800178c:	080017ff 	.word	0x080017ff
 8001790:	08001805 	.word	0x08001805
 8001794:	0800180b 	.word	0x0800180b
 8001798:	08001811 	.word	0x08001811
 800179c:	08001817 	.word	0x08001817
 80017a0:	0800181d 	.word	0x0800181d
 80017a4:	08001823 	.word	0x08001823
 80017a8:	08001829 	.word	0x08001829
 80017ac:	0800182f 	.word	0x0800182f
	case sDecideNext:ref_str = "sDecideNext";break;
 80017b0:	4b2d      	ldr	r3, [pc, #180]	; (8001868 <printVgaState+0x13c>)
 80017b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017b4:	e041      	b.n	800183a <printVgaState+0x10e>
	case sRenderLine:ref_str = "sRenderLine";break;
 80017b6:	4b2d      	ldr	r3, [pc, #180]	; (800186c <printVgaState+0x140>)
 80017b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017ba:	e03e      	b.n	800183a <printVgaState+0x10e>
	case sDoneRenderLine:ref_str = "sDoneRenderLine";break;
 80017bc:	4b2c      	ldr	r3, [pc, #176]	; (8001870 <printVgaState+0x144>)
 80017be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017c0:	e03b      	b.n	800183a <printVgaState+0x10e>
	case sCopyLastLine:ref_str = "sCopyLastLine";break;
 80017c2:	4b2c      	ldr	r3, [pc, #176]	; (8001874 <printVgaState+0x148>)
 80017c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017c6:	e038      	b.n	800183a <printVgaState+0x10e>
	case sDoneCopylastLine:ref_str = "sDoneCopylastLine";break;
 80017c8:	4b2b      	ldr	r3, [pc, #172]	; (8001878 <printVgaState+0x14c>)
 80017ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017cc:	e035      	b.n	800183a <printVgaState+0x10e>

	case sExitVisible1:ref_str = "sExitVisible1";break;
 80017ce:	4b2b      	ldr	r3, [pc, #172]	; (800187c <printVgaState+0x150>)
 80017d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017d2:	e032      	b.n	800183a <printVgaState+0x10e>
	case sDoneExitVisible1:ref_str = "sDoneExitVisible1";break;
 80017d4:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <printVgaState+0x154>)
 80017d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017d8:	e02f      	b.n	800183a <printVgaState+0x10e>
	case sExitVisible2:ref_str = "sExitVisible2";break;
 80017da:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <printVgaState+0x158>)
 80017dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017de:	e02c      	b.n	800183a <printVgaState+0x10e>
	case sDoneExitVisible2:ref_str = "sDoneExitVisible2";break;
 80017e0:	4b29      	ldr	r3, [pc, #164]	; (8001888 <printVgaState+0x15c>)
 80017e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017e4:	e029      	b.n	800183a <printVgaState+0x10e>

	case sSetVsync1P1:ref_str = "sSetVsync1P1";break;
 80017e6:	4b29      	ldr	r3, [pc, #164]	; (800188c <printVgaState+0x160>)
 80017e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017ea:	e026      	b.n	800183a <printVgaState+0x10e>
	case sSetVsync1P2:ref_str = "sSetVsync1P2";break;
 80017ec:	4b28      	ldr	r3, [pc, #160]	; (8001890 <printVgaState+0x164>)
 80017ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017f0:	e023      	b.n	800183a <printVgaState+0x10e>
	case sDoneSetVsync1:ref_str = "sDoneSetVsync1";break;
 80017f2:	4b28      	ldr	r3, [pc, #160]	; (8001894 <printVgaState+0x168>)
 80017f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017f6:	e020      	b.n	800183a <printVgaState+0x10e>
	case sSetVsync2P1:ref_str = "sSetVsync2P1";break;
 80017f8:	4b27      	ldr	r3, [pc, #156]	; (8001898 <printVgaState+0x16c>)
 80017fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017fc:	e01d      	b.n	800183a <printVgaState+0x10e>
	case sSetVsync2P2:ref_str = "sSetVsync2P2";break;
 80017fe:	4b27      	ldr	r3, [pc, #156]	; (800189c <printVgaState+0x170>)
 8001800:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001802:	e01a      	b.n	800183a <printVgaState+0x10e>
	case sDoneSetVsync2:ref_str = "sDoneSetVsync2";break;
 8001804:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <printVgaState+0x174>)
 8001806:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001808:	e017      	b.n	800183a <printVgaState+0x10e>

	case sSetHsync1P1:ref_str = "sSetHsync1P1";break;
 800180a:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <printVgaState+0x178>)
 800180c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800180e:	e014      	b.n	800183a <printVgaState+0x10e>
	case sSetHsync1P2:ref_str = "sSetHsync1P2";break;
 8001810:	4b25      	ldr	r3, [pc, #148]	; (80018a8 <printVgaState+0x17c>)
 8001812:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001814:	e011      	b.n	800183a <printVgaState+0x10e>
	case sDoneSetHsync1:ref_str = "sDoneSetHsync1";break;
 8001816:	4b25      	ldr	r3, [pc, #148]	; (80018ac <printVgaState+0x180>)
 8001818:	65fb      	str	r3, [r7, #92]	; 0x5c
 800181a:	e00e      	b.n	800183a <printVgaState+0x10e>
	case sSetHsync2P1:ref_str = "sSetHsync2P1";break;
 800181c:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <printVgaState+0x184>)
 800181e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001820:	e00b      	b.n	800183a <printVgaState+0x10e>
	case sSetHsync2P2:ref_str = "sSetHsync2P2";break;
 8001822:	4b24      	ldr	r3, [pc, #144]	; (80018b4 <printVgaState+0x188>)
 8001824:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001826:	e008      	b.n	800183a <printVgaState+0x10e>
	case sDoneSetHsync2:ref_str = "sDoneSetHsync2";break;
 8001828:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <printVgaState+0x18c>)
 800182a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800182c:	e005      	b.n	800183a <printVgaState+0x10e>

	case sEndBuffer:ref_str = "sEndBuffer";break;
 800182e:	4b23      	ldr	r3, [pc, #140]	; (80018bc <printVgaState+0x190>)
 8001830:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001832:	e002      	b.n	800183a <printVgaState+0x10e>
	default:ref_str = "Unknown";break;
 8001834:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <printVgaState+0x194>)
 8001836:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001838:	bf00      	nop
	}
	str_len = sprintf(str, "Line %i\t vga state %s \t", lineCount, ref_str);
 800183a:	4b22      	ldr	r3, [pc, #136]	; (80018c4 <printVgaState+0x198>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	1d38      	adds	r0, r7, #4
 8001840:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001842:	4921      	ldr	r1, [pc, #132]	; (80018c8 <printVgaState+0x19c>)
 8001844:	f003 fb7e 	bl	8004f44 <siprintf>
 8001848:	65b8      	str	r0, [r7, #88]	; 0x58
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800184a:	4b20      	ldr	r3, [pc, #128]	; (80018cc <printVgaState+0x1a0>)
 800184c:	6818      	ldr	r0, [r3, #0]
 800184e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001850:	b29a      	uxth	r2, r3
 8001852:	1d39      	adds	r1, r7, #4
 8001854:	f04f 33ff 	mov.w	r3, #4294967295
 8001858:	f002 ffcd 	bl	80047f6 <HAL_UART_Transmit>
}
 800185c:	bf00      	nop
 800185e:	3760      	adds	r7, #96	; 0x60
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	200042ac 	.word	0x200042ac
 8001868:	08005adc 	.word	0x08005adc
 800186c:	08005ae8 	.word	0x08005ae8
 8001870:	08005af4 	.word	0x08005af4
 8001874:	08005b04 	.word	0x08005b04
 8001878:	08005b14 	.word	0x08005b14
 800187c:	08005b28 	.word	0x08005b28
 8001880:	08005b38 	.word	0x08005b38
 8001884:	08005b4c 	.word	0x08005b4c
 8001888:	08005b5c 	.word	0x08005b5c
 800188c:	08005b70 	.word	0x08005b70
 8001890:	08005b80 	.word	0x08005b80
 8001894:	08005b90 	.word	0x08005b90
 8001898:	08005ba0 	.word	0x08005ba0
 800189c:	08005bb0 	.word	0x08005bb0
 80018a0:	08005bc0 	.word	0x08005bc0
 80018a4:	08005bd0 	.word	0x08005bd0
 80018a8:	08005be0 	.word	0x08005be0
 80018ac:	08005bf0 	.word	0x08005bf0
 80018b0:	08005c00 	.word	0x08005c00
 80018b4:	08005c10 	.word	0x08005c10
 80018b8:	08005c20 	.word	0x08005c20
 80018bc:	08005c30 	.word	0x08005c30
 80018c0:	08005c3c 	.word	0x08005c3c
 80018c4:	200042a0 	.word	0x200042a0
 80018c8:	08005c44 	.word	0x08005c44
 80018cc:	200042b8 	.word	0x200042b8

080018d0 <vgaStateMachine>:

void vgaStateMachine(int activatedFromCircularBuffer){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

	if(activatedFromCircularBuffer){
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d011      	beq.n	8001902 <vgaStateMachine+0x32>
		if(!readyForNextLine){
			//we ran out of time rendering the last line
			//todo log error
		}
		readyForNextLine = 0;
 80018de:	4ba3      	ldr	r3, [pc, #652]	; (8001b6c <vgaStateMachine+0x29c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
		lineCount++;
 80018e4:	4ba2      	ldr	r3, [pc, #648]	; (8001b70 <vgaStateMachine+0x2a0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	3301      	adds	r3, #1
 80018ea:	4aa1      	ldr	r2, [pc, #644]	; (8001b70 <vgaStateMachine+0x2a0>)
 80018ec:	6013      	str	r3, [r2, #0]
		Color * tmp = activeBuffer;
 80018ee:	4ba1      	ldr	r3, [pc, #644]	; (8001b74 <vgaStateMachine+0x2a4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	60fb      	str	r3, [r7, #12]
		activeBuffer = oldBuffer;
 80018f4:	4ba0      	ldr	r3, [pc, #640]	; (8001b78 <vgaStateMachine+0x2a8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a9e      	ldr	r2, [pc, #632]	; (8001b74 <vgaStateMachine+0x2a4>)
 80018fa:	6013      	str	r3, [r2, #0]
		oldBuffer = tmp;
 80018fc:	4a9e      	ldr	r2, [pc, #632]	; (8001b78 <vgaStateMachine+0x2a8>)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6013      	str	r3, [r2, #0]

	}

	while(1){
		printVgaState();
 8001902:	f7ff ff13 	bl	800172c <printVgaState>
		switch(state){
 8001906:	4b9d      	ldr	r3, [pc, #628]	; (8001b7c <vgaStateMachine+0x2ac>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b15      	cmp	r3, #21
 800190c:	d8f9      	bhi.n	8001902 <vgaStateMachine+0x32>
 800190e:	a201      	add	r2, pc, #4	; (adr r2, 8001914 <vgaStateMachine+0x44>)
 8001910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001914:	0800196d 	.word	0x0800196d
 8001918:	08001987 	.word	0x08001987
 800191c:	080019a5 	.word	0x080019a5
 8001920:	080019b3 	.word	0x080019b3
 8001924:	080019cb 	.word	0x080019cb
 8001928:	080019f3 	.word	0x080019f3
 800192c:	08001a05 	.word	0x08001a05
 8001930:	08001a13 	.word	0x08001a13
 8001934:	08001a25 	.word	0x08001a25
 8001938:	08001a33 	.word	0x08001a33
 800193c:	08001a67 	.word	0x08001a67
 8001940:	08001a79 	.word	0x08001a79
 8001944:	08001a87 	.word	0x08001a87
 8001948:	08001a99 	.word	0x08001a99
 800194c:	08001aab 	.word	0x08001aab
 8001950:	08001ab9 	.word	0x08001ab9
 8001954:	08001aed 	.word	0x08001aed
 8001958:	08001aff 	.word	0x08001aff
 800195c:	08001b0d 	.word	0x08001b0d
 8001960:	08001b1f 	.word	0x08001b1f
 8001964:	08001b31 	.word	0x08001b31
 8001968:	08001b3f 	.word	0x08001b3f
		//Render screen
		case sDecideNext:{
			if(lineCount < vertArea){
 800196c:	4b80      	ldr	r3, [pc, #512]	; (8001b70 <vgaStateMachine+0x2a0>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001974:	da03      	bge.n	800197e <vgaStateMachine+0xae>
				state = sRenderLine;
 8001976:	4b81      	ldr	r3, [pc, #516]	; (8001b7c <vgaStateMachine+0x2ac>)
 8001978:	2201      	movs	r2, #1
 800197a:	701a      	strb	r2, [r3, #0]
			}else{
				state = sExitVisible1;
			}
			break;
 800197c:	e0f0      	b.n	8001b60 <vgaStateMachine+0x290>
				state = sExitVisible1;
 800197e:	4b7f      	ldr	r3, [pc, #508]	; (8001b7c <vgaStateMachine+0x2ac>)
 8001980:	2205      	movs	r2, #5
 8001982:	701a      	strb	r2, [r3, #0]
			break;
 8001984:	e0ec      	b.n	8001b60 <vgaStateMachine+0x290>
		}
		case sRenderLine:{
			renderLine(activeBuffer, lineCount);//render line by copying from screenBuff
 8001986:	4b7b      	ldr	r3, [pc, #492]	; (8001b74 <vgaStateMachine+0x2a4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a79      	ldr	r2, [pc, #484]	; (8001b70 <vgaStateMachine+0x2a0>)
 800198c:	6812      	ldr	r2, [r2, #0]
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff fe81 	bl	8001698 <renderLine>
			lineUpscale = 1;
 8001996:	4b7a      	ldr	r3, [pc, #488]	; (8001b80 <vgaStateMachine+0x2b0>)
 8001998:	2201      	movs	r2, #1
 800199a:	601a      	str	r2, [r3, #0]
			state = sDoneRenderLine;
 800199c:	4b77      	ldr	r3, [pc, #476]	; (8001b7c <vgaStateMachine+0x2ac>)
 800199e:	2202      	movs	r2, #2
 80019a0:	701a      	strb	r2, [r3, #0]
			return;
 80019a2:	e0df      	b.n	8001b64 <vgaStateMachine+0x294>
		}
		case sDoneRenderLine:{
			state = vgaUpscale==1?sDecideNext:sCopyLastLine;
 80019a4:	4b75      	ldr	r3, [pc, #468]	; (8001b7c <vgaStateMachine+0x2ac>)
 80019a6:	2203      	movs	r2, #3
 80019a8:	701a      	strb	r2, [r3, #0]
			readyForNextLine = 1;
 80019aa:	4b70      	ldr	r3, [pc, #448]	; (8001b6c <vgaStateMachine+0x29c>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	601a      	str	r2, [r3, #0]
			return;
 80019b0:	e0d8      	b.n	8001b64 <vgaStateMachine+0x294>
		}
		case sCopyLastLine:{
			//we are upscaling and can save recourses by copying last buffer
			//would be faster if we could use a fifo queue of dma transfers instead of a circular buffer
			copyLastLine(activeBuffer, oldBuffer);
 80019b2:	4b70      	ldr	r3, [pc, #448]	; (8001b74 <vgaStateMachine+0x2a4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a70      	ldr	r2, [pc, #448]	; (8001b78 <vgaStateMachine+0x2a8>)
 80019b8:	6812      	ldr	r2, [r2, #0]
 80019ba:	4611      	mov	r1, r2
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff fea3 	bl	8001708 <copyLastLine>
			state = sDoneCopylastLine;
 80019c2:	4b6e      	ldr	r3, [pc, #440]	; (8001b7c <vgaStateMachine+0x2ac>)
 80019c4:	2204      	movs	r2, #4
 80019c6:	701a      	strb	r2, [r3, #0]
			return;
 80019c8:	e0cc      	b.n	8001b64 <vgaStateMachine+0x294>
		}
		case sDoneCopylastLine:{
			lineUpscale++;
 80019ca:	4b6d      	ldr	r3, [pc, #436]	; (8001b80 <vgaStateMachine+0x2b0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	3301      	adds	r3, #1
 80019d0:	4a6b      	ldr	r2, [pc, #428]	; (8001b80 <vgaStateMachine+0x2b0>)
 80019d2:	6013      	str	r3, [r2, #0]
			if(lineUpscale == vgaUpscale){//waits in current state until we need to render a new line and can't reuse old buffers
 80019d4:	4b6a      	ldr	r3, [pc, #424]	; (8001b80 <vgaStateMachine+0x2b0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b04      	cmp	r3, #4
 80019da:	f040 80c2 	bne.w	8001b62 <vgaStateMachine+0x292>
				lineUpscale = 0;
 80019de:	4b68      	ldr	r3, [pc, #416]	; (8001b80 <vgaStateMachine+0x2b0>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
				state = sDecideNext;
 80019e4:	4b65      	ldr	r3, [pc, #404]	; (8001b7c <vgaStateMachine+0x2ac>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
				readyForNextLine = 1;
 80019ea:	4b60      	ldr	r3, [pc, #384]	; (8001b6c <vgaStateMachine+0x29c>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	601a      	str	r2, [r3, #0]
			}
			return;
 80019f0:	e0b7      	b.n	8001b62 <vgaStateMachine+0x292>
		}
		//Exit visible area
		case sExitVisible1:{
			clearVisibleArea(activeBuffer);//clear leftover data in buffer 1
 80019f2:	4b60      	ldr	r3, [pc, #384]	; (8001b74 <vgaStateMachine+0x2a4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fe02 	bl	8001600 <clearVisibleArea>
			state = sDoneExitVisible1;
 80019fc:	4b5f      	ldr	r3, [pc, #380]	; (8001b7c <vgaStateMachine+0x2ac>)
 80019fe:	2206      	movs	r2, #6
 8001a00:	701a      	strb	r2, [r3, #0]
			return;
 8001a02:	e0af      	b.n	8001b64 <vgaStateMachine+0x294>
		}
		case sDoneExitVisible1:{
			state = sExitVisible2;
 8001a04:	4b5d      	ldr	r3, [pc, #372]	; (8001b7c <vgaStateMachine+0x2ac>)
 8001a06:	2207      	movs	r2, #7
 8001a08:	701a      	strb	r2, [r3, #0]
			readyForNextLine = 1;
 8001a0a:	4b58      	ldr	r3, [pc, #352]	; (8001b6c <vgaStateMachine+0x29c>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]
			return;
 8001a10:	e0a8      	b.n	8001b64 <vgaStateMachine+0x294>
		}
		case sExitVisible2:{
			clearVisibleArea(activeBuffer);//clear leftover data in buffer 2
 8001a12:	4b58      	ldr	r3, [pc, #352]	; (8001b74 <vgaStateMachine+0x2a4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fdf2 	bl	8001600 <clearVisibleArea>
			state = sDoneExitVisible2;
 8001a1c:	4b57      	ldr	r3, [pc, #348]	; (8001b7c <vgaStateMachine+0x2ac>)
 8001a1e:	2208      	movs	r2, #8
 8001a20:	701a      	strb	r2, [r3, #0]
			return;
 8001a22:	e09f      	b.n	8001b64 <vgaStateMachine+0x294>
		}
		case sDoneExitVisible2:{
			state = sSetVsync1P1;
 8001a24:	4b55      	ldr	r3, [pc, #340]	; (8001b7c <vgaStateMachine+0x2ac>)
 8001a26:	2209      	movs	r2, #9
 8001a28:	701a      	strb	r2, [r3, #0]
			readyForNextLine = 1;
 8001a2a:	4b50      	ldr	r3, [pc, #320]	; (8001b6c <vgaStateMachine+0x29c>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]
			return;
 8001a30:	e098      	b.n	8001b64 <vgaStateMachine+0x294>
		}
		//Vertical sync
		case sSetVsync1P1:{
			if(lineCount == vertArea + vertFront){//wait until vertical sync starts
 8001a32:	4b4f      	ldr	r3, [pc, #316]	; (8001b70 <vgaStateMachine+0x2a0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f5b3 7fce 	cmp.w	r3, #412	; 0x19c
 8001a3a:	d110      	bne.n	8001a5e <vgaStateMachine+0x18e>
				setVerticalSyncP1(activeBuffer);//set vertical sync in buffer 1
 8001a3c:	4b4d      	ldr	r3, [pc, #308]	; (8001b74 <vgaStateMachine+0x2a4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff fded 	bl	8001620 <setVerticalSyncP1>
				state = sSetVsync1P2;
 8001a46:	4b4d      	ldr	r3, [pc, #308]	; (8001b7c <vgaStateMachine+0x2ac>)
 8001a48:	220a      	movs	r2, #10
 8001a4a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_SET);
 8001a4c:	4b4d      	ldr	r3, [pc, #308]	; (8001b84 <vgaStateMachine+0x2b4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a4d      	ldr	r2, [pc, #308]	; (8001b88 <vgaStateMachine+0x2b8>)
 8001a52:	8811      	ldrh	r1, [r2, #0]
 8001a54:	2201      	movs	r2, #1
 8001a56:	4618      	mov	r0, r3
 8001a58:	f001 fa1c 	bl	8002e94 <HAL_GPIO_WritePin>
			}else{
				readyForNextLine = 1;
			}
			return;
 8001a5c:	e082      	b.n	8001b64 <vgaStateMachine+0x294>
				readyForNextLine = 1;
 8001a5e:	4b43      	ldr	r3, [pc, #268]	; (8001b6c <vgaStateMachine+0x29c>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	601a      	str	r2, [r3, #0]
			return;
 8001a64:	e07e      	b.n	8001b64 <vgaStateMachine+0x294>
		}
		case sSetVsync1P2:{
			setVerticalSyncP2(activeBuffer);
 8001a66:	4b43      	ldr	r3, [pc, #268]	; (8001b74 <vgaStateMachine+0x2a4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fde6 	bl	800163c <setVerticalSyncP2>
			state = sDoneSetVsync1;
 8001a70:	4b42      	ldr	r3, [pc, #264]	; (8001b7c <vgaStateMachine+0x2ac>)
 8001a72:	220b      	movs	r2, #11
 8001a74:	701a      	strb	r2, [r3, #0]
			return;
 8001a76:	e075      	b.n	8001b64 <vgaStateMachine+0x294>
		}
		case sDoneSetVsync1:{
			state = sSetVsync2P1;
 8001a78:	4b40      	ldr	r3, [pc, #256]	; (8001b7c <vgaStateMachine+0x2ac>)
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	701a      	strb	r2, [r3, #0]
			readyForNextLine = 1;
 8001a7e:	4b3b      	ldr	r3, [pc, #236]	; (8001b6c <vgaStateMachine+0x29c>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	601a      	str	r2, [r3, #0]
			return;
 8001a84:	e06e      	b.n	8001b64 <vgaStateMachine+0x294>
		}
		case sSetVsync2P1:{
			setVerticalSyncP1(activeBuffer);//set Vertical Sync in buffer 2
 8001a86:	4b3b      	ldr	r3, [pc, #236]	; (8001b74 <vgaStateMachine+0x2a4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fdc8 	bl	8001620 <setVerticalSyncP1>
			state = sSetVsync2P2;
 8001a90:	4b3a      	ldr	r3, [pc, #232]	; (8001b7c <vgaStateMachine+0x2ac>)
 8001a92:	220d      	movs	r2, #13
 8001a94:	701a      	strb	r2, [r3, #0]
			return;
 8001a96:	e065      	b.n	8001b64 <vgaStateMachine+0x294>
		}
		case sSetVsync2P2:{
			setVerticalSyncP2(activeBuffer);
 8001a98:	4b36      	ldr	r3, [pc, #216]	; (8001b74 <vgaStateMachine+0x2a4>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fdcd 	bl	800163c <setVerticalSyncP2>
			state = sDoneSetVsync2;
 8001aa2:	4b36      	ldr	r3, [pc, #216]	; (8001b7c <vgaStateMachine+0x2ac>)
 8001aa4:	220e      	movs	r2, #14
 8001aa6:	701a      	strb	r2, [r3, #0]
			return;
 8001aa8:	e05c      	b.n	8001b64 <vgaStateMachine+0x294>
		}
		case sDoneSetVsync2:{
			state = sSetHsync1P1;
 8001aaa:	4b34      	ldr	r3, [pc, #208]	; (8001b7c <vgaStateMachine+0x2ac>)
 8001aac:	220f      	movs	r2, #15
 8001aae:	701a      	strb	r2, [r3, #0]
			readyForNextLine = 1;
 8001ab0:	4b2e      	ldr	r3, [pc, #184]	; (8001b6c <vgaStateMachine+0x29c>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]
			return;
 8001ab6:	e055      	b.n	8001b64 <vgaStateMachine+0x294>
		}
		//Horizontal sync
		case sSetHsync1P1:{
			if(lineCount == vertArea + vertFront + vertSync){//wait until vertical sync ends
 8001ab8:	4b2d      	ldr	r3, [pc, #180]	; (8001b70 <vgaStateMachine+0x2a0>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 8001ac0:	d110      	bne.n	8001ae4 <vgaStateMachine+0x214>
				setHorizontalSyncP1(activeBuffer);//set horizontal sync in buffer 2
 8001ac2:	4b2c      	ldr	r3, [pc, #176]	; (8001b74 <vgaStateMachine+0x2a4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fdc8 	bl	800165c <setHorizontalSyncP1>
				state = sSetHsync1P2;
 8001acc:	4b2b      	ldr	r3, [pc, #172]	; (8001b7c <vgaStateMachine+0x2ac>)
 8001ace:	2210      	movs	r2, #16
 8001ad0:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_RESET);
 8001ad2:	4b2c      	ldr	r3, [pc, #176]	; (8001b84 <vgaStateMachine+0x2b4>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a2c      	ldr	r2, [pc, #176]	; (8001b88 <vgaStateMachine+0x2b8>)
 8001ad8:	8811      	ldrh	r1, [r2, #0]
 8001ada:	2200      	movs	r2, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f001 f9d9 	bl	8002e94 <HAL_GPIO_WritePin>
			}else{
				readyForNextLine = 1;
			}
			return;
 8001ae2:	e03f      	b.n	8001b64 <vgaStateMachine+0x294>
				readyForNextLine = 1;
 8001ae4:	4b21      	ldr	r3, [pc, #132]	; (8001b6c <vgaStateMachine+0x29c>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]
			return;
 8001aea:	e03b      	b.n	8001b64 <vgaStateMachine+0x294>
		}
		case sSetHsync1P2:{
			setHorizontalSyncP2(activeBuffer);
 8001aec:	4b21      	ldr	r3, [pc, #132]	; (8001b74 <vgaStateMachine+0x2a4>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fdc1 	bl	8001678 <setHorizontalSyncP2>
			state = sDoneSetHsync1;
 8001af6:	4b21      	ldr	r3, [pc, #132]	; (8001b7c <vgaStateMachine+0x2ac>)
 8001af8:	2211      	movs	r2, #17
 8001afa:	701a      	strb	r2, [r3, #0]
			return;
 8001afc:	e032      	b.n	8001b64 <vgaStateMachine+0x294>
		}
		case sDoneSetHsync1:{
			state = sSetHsync2P1;
 8001afe:	4b1f      	ldr	r3, [pc, #124]	; (8001b7c <vgaStateMachine+0x2ac>)
 8001b00:	2212      	movs	r2, #18
 8001b02:	701a      	strb	r2, [r3, #0]
			readyForNextLine = 1;
 8001b04:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <vgaStateMachine+0x29c>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	601a      	str	r2, [r3, #0]
			return;
 8001b0a:	e02b      	b.n	8001b64 <vgaStateMachine+0x294>
		}
		case sSetHsync2P1:{
			setVerticalSyncP1(activeBuffer);//set Horizontal Sync in buffer 2
 8001b0c:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <vgaStateMachine+0x2a4>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fd85 	bl	8001620 <setVerticalSyncP1>
			state = sSetHsync2P2;
 8001b16:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <vgaStateMachine+0x2ac>)
 8001b18:	2213      	movs	r2, #19
 8001b1a:	701a      	strb	r2, [r3, #0]
			return;
 8001b1c:	e022      	b.n	8001b64 <vgaStateMachine+0x294>
		}
		case sSetHsync2P2:{
			setVerticalSyncP2(activeBuffer);
 8001b1e:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <vgaStateMachine+0x2a4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fd8a 	bl	800163c <setVerticalSyncP2>
			state = sDoneSetHsync2;
 8001b28:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <vgaStateMachine+0x2ac>)
 8001b2a:	2214      	movs	r2, #20
 8001b2c:	701a      	strb	r2, [r3, #0]
			return;
 8001b2e:	e019      	b.n	8001b64 <vgaStateMachine+0x294>
		}
		case sDoneSetHsync2:{
			state = sEndBuffer;
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <vgaStateMachine+0x2ac>)
 8001b32:	2215      	movs	r2, #21
 8001b34:	701a      	strb	r2, [r3, #0]
			readyForNextLine = 1;
 8001b36:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <vgaStateMachine+0x29c>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]
			return;
 8001b3c:	e012      	b.n	8001b64 <vgaStateMachine+0x294>
		}
		case sEndBuffer:{
			if(lineCount == vertWhole){//wait until end of the screen
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <vgaStateMachine+0x2a0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f240 12c1 	movw	r2, #449	; 0x1c1
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d106      	bne.n	8001b58 <vgaStateMachine+0x288>
				state = sDecideNext;
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <vgaStateMachine+0x2ac>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
				lineCount = -1;// set line count back to the start
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <vgaStateMachine+0x2a0>)
 8001b52:	f04f 32ff 	mov.w	r2, #4294967295
 8001b56:	601a      	str	r2, [r3, #0]
			}
			readyForNextLine = 1;
 8001b58:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <vgaStateMachine+0x29c>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]
			return;
 8001b5e:	e001      	b.n	8001b64 <vgaStateMachine+0x294>
		printVgaState();
 8001b60:	e6cf      	b.n	8001902 <vgaStateMachine+0x32>
			return;
 8001b62:	bf00      	nop
		}
		}


	}
}
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200042a8 	.word	0x200042a8
 8001b70:	200042a0 	.word	0x200042a0
 8001b74:	200042b0 	.word	0x200042b0
 8001b78:	200042b4 	.word	0x200042b4
 8001b7c:	200042ac 	.word	0x200042ac
 8001b80:	200042a4 	.word	0x200042a4
 8001b84:	20004298 	.word	0x20004298
 8001b88:	2000429c 	.word	0x2000429c

08001b8c <dumpBuffer>:

char strDumpBuff[1000];
void dumpBuffer(char * dump, uint32_t bytes, uint32_t * indicatorLength, char * indicator, uint32_t columnSets){
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08e      	sub	sp, #56	; 0x38
 8001b90:	af02      	add	r7, sp, #8
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
 8001b98:	603b      	str	r3, [r7, #0]
	char * str = strDumpBuff;
 8001b9a:	4b66      	ldr	r3, [pc, #408]	; (8001d34 <dumpBuffer+0x1a8>)
 8001b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t nextIndicator;
	if(indicatorLength != NULL){
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d002      	beq.n	8001baa <dumpBuffer+0x1e>
		nextIndicator = *indicatorLength;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	str += sprintf(str, "      ");
 8001baa:	4963      	ldr	r1, [pc, #396]	; (8001d38 <dumpBuffer+0x1ac>)
 8001bac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001bae:	f003 f9c9 	bl	8004f44 <siprintf>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb8:	4413      	add	r3, r2
 8001bba:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint32_t i = 0; i < columnSets; i++){
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc0:	e00b      	b.n	8001bda <dumpBuffer+0x4e>
		str += sprintf(str, "0   1   2   3   4   5   6   7   8   9   a   b   c   d   e   f    ");
 8001bc2:	495e      	ldr	r1, [pc, #376]	; (8001d3c <dumpBuffer+0x1b0>)
 8001bc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001bc6:	f003 f9bd 	bl	8004f44 <siprintf>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461a      	mov	r2, r3
 8001bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd0:	4413      	add	r3, r2
 8001bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint32_t i = 0; i < columnSets; i++){
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d3ef      	bcc.n	8001bc2 <dumpBuffer+0x36>
	}
	str += sprintf(str, "\n\r");
 8001be2:	4957      	ldr	r1, [pc, #348]	; (8001d40 <dumpBuffer+0x1b4>)
 8001be4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001be6:	f003 f9ad 	bl	8004f44 <siprintf>
 8001bea:	4603      	mov	r3, r0
 8001bec:	461a      	mov	r2, r3
 8001bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf0:	4413      	add	r3, r2
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint32_t i = 0; i < bytes;){
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	623b      	str	r3, [r7, #32]
 8001bf8:	e07f      	b.n	8001cfa <dumpBuffer+0x16e>

		str += sprintf(str, "%3lx ", i / (16));
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
 8001bfc:	091b      	lsrs	r3, r3, #4
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4950      	ldr	r1, [pc, #320]	; (8001d44 <dumpBuffer+0x1b8>)
 8001c02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c04:	f003 f99e 	bl	8004f44 <siprintf>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0e:	4413      	add	r3, r2
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(uint32_t columnSetI = 0; columnSetI < columnSets; columnSetI++){
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	e063      	b.n	8001ce0 <dumpBuffer+0x154>
			for(uint32_t j = i+16; i<j && i < bytes; i++){
 8001c18:	6a3b      	ldr	r3, [r7, #32]
 8001c1a:	3310      	adds	r3, #16
 8001c1c:	61bb      	str	r3, [r7, #24]
 8001c1e:	e038      	b.n	8001c92 <dumpBuffer+0x106>
				uint32_t tmp = dump[i];
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	6a3b      	ldr	r3, [r7, #32]
 8001c24:	4413      	add	r3, r2
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	617b      	str	r3, [r7, #20]
				if(indicatorLength == NULL){
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10a      	bne.n	8001c46 <dumpBuffer+0xba>
					str += sprintf(str, " %02lx ", tmp);
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	4945      	ldr	r1, [pc, #276]	; (8001d48 <dumpBuffer+0x1bc>)
 8001c34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c36:	f003 f985 	bl	8004f44 <siprintf>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c40:	4413      	add	r3, r2
 8001c42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c44:	e022      	b.n	8001c8c <dumpBuffer+0x100>
				}else{
					if(i == nextIndicator){
 8001c46:	6a3a      	ldr	r2, [r7, #32]
 8001c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d10d      	bne.n	8001c6a <dumpBuffer+0xde>
						indicatorLength++;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3304      	adds	r3, #4
 8001c52:	607b      	str	r3, [r7, #4]
						nextIndicator += *indicatorLength;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c5a:	4413      	add	r3, r2
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
						indicator++;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	3301      	adds	r3, #1
 8001c62:	603b      	str	r3, [r7, #0]
						indicator++;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	3301      	adds	r3, #1
 8001c68:	603b      	str	r3, [r7, #0]
					}
					str += sprintf(str, "%c%02lx%c", *indicator, tmp, *(indicator+1));
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	3301      	adds	r3, #1
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	4934      	ldr	r1, [pc, #208]	; (8001d4c <dumpBuffer+0x1c0>)
 8001c7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c7e:	f003 f961 	bl	8004f44 <siprintf>
 8001c82:	4603      	mov	r3, r0
 8001c84:	461a      	mov	r2, r3
 8001c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c88:	4413      	add	r3, r2
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(uint32_t j = i+16; i<j && i < bytes; i++){
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	623b      	str	r3, [r7, #32]
 8001c92:	6a3a      	ldr	r2, [r7, #32]
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d203      	bcs.n	8001ca2 <dumpBuffer+0x116>
 8001c9a:	6a3a      	ldr	r2, [r7, #32]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d3be      	bcc.n	8001c20 <dumpBuffer+0x94>
				}
			}
			str += sprintf(str, "  ");
 8001ca2:	492b      	ldr	r1, [pc, #172]	; (8001d50 <dumpBuffer+0x1c4>)
 8001ca4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ca6:	f003 f94d 	bl	8004f44 <siprintf>
 8001caa:	4603      	mov	r3, r0
 8001cac:	461a      	mov	r2, r3
 8001cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb0:	4413      	add	r3, r2
 8001cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(str - strDumpBuff > sizeof(strDumpBuff)/2){
 8001cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb6:	4a1f      	ldr	r2, [pc, #124]	; (8001d34 <dumpBuffer+0x1a8>)
 8001cb8:	1a9b      	subs	r3, r3, r2
 8001cba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001cbe:	d90c      	bls.n	8001cda <dumpBuffer+0x14e>
				HAL_UART_Transmit(huartE, (uint8_t*) strDumpBuff, str - strDumpBuff, HAL_MAX_DELAY);
 8001cc0:	4b24      	ldr	r3, [pc, #144]	; (8001d54 <dumpBuffer+0x1c8>)
 8001cc2:	6818      	ldr	r0, [r3, #0]
 8001cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc6:	4a1b      	ldr	r2, [pc, #108]	; (8001d34 <dumpBuffer+0x1a8>)
 8001cc8:	1a9b      	subs	r3, r3, r2
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd0:	4918      	ldr	r1, [pc, #96]	; (8001d34 <dumpBuffer+0x1a8>)
 8001cd2:	f002 fd90 	bl	80047f6 <HAL_UART_Transmit>
				str = strDumpBuff;
 8001cd6:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <dumpBuffer+0x1a8>)
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(uint32_t columnSetI = 0; columnSetI < columnSets; columnSetI++){
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	61fb      	str	r3, [r7, #28]
 8001ce0:	69fa      	ldr	r2, [r7, #28]
 8001ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d397      	bcc.n	8001c18 <dumpBuffer+0x8c>
			}
		}
		str += sprintf(str, "\n\r");
 8001ce8:	4915      	ldr	r1, [pc, #84]	; (8001d40 <dumpBuffer+0x1b4>)
 8001cea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001cec:	f003 f92a 	bl	8004f44 <siprintf>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf6:	4413      	add	r3, r2
 8001cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint32_t i = 0; i < bytes;){
 8001cfa:	6a3a      	ldr	r2, [r7, #32]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	f4ff af7b 	bcc.w	8001bfa <dumpBuffer+0x6e>
	}
	str += sprintf(str, "\n\r");
 8001d04:	490e      	ldr	r1, [pc, #56]	; (8001d40 <dumpBuffer+0x1b4>)
 8001d06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d08:	f003 f91c 	bl	8004f44 <siprintf>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	461a      	mov	r2, r3
 8001d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d12:	4413      	add	r3, r2
 8001d14:	62fb      	str	r3, [r7, #44]	; 0x2c
	//str += sprintf(str, "\0");
	HAL_UART_Transmit(huartE, (uint8_t*) strDumpBuff, str - strDumpBuff, HAL_MAX_DELAY);
 8001d16:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <dumpBuffer+0x1c8>)
 8001d18:	6818      	ldr	r0, [r3, #0]
 8001d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d1c:	4a05      	ldr	r2, [pc, #20]	; (8001d34 <dumpBuffer+0x1a8>)
 8001d1e:	1a9b      	subs	r3, r3, r2
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295
 8001d26:	4903      	ldr	r1, [pc, #12]	; (8001d34 <dumpBuffer+0x1a8>)
 8001d28:	f002 fd65 	bl	80047f6 <HAL_UART_Transmit>
}
 8001d2c:	bf00      	nop
 8001d2e:	3730      	adds	r7, #48	; 0x30
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	200042bc 	.word	0x200042bc
 8001d38:	08005c5c 	.word	0x08005c5c
 8001d3c:	08005c64 	.word	0x08005c64
 8001d40:	08005ca8 	.word	0x08005ca8
 8001d44:	08005cac 	.word	0x08005cac
 8001d48:	08005cb4 	.word	0x08005cb4
 8001d4c:	08005cbc 	.word	0x08005cbc
 8001d50:	08005c60 	.word	0x08005c60
 8001d54:	200042b8 	.word	0x200042b8

08001d58 <vgaDriver>:
#ifdef vgaDebug
	int str_len;
	char str[81] = {'\0'};
	static char * ref_str = "null";
#endif
	lineCount++;
 8001d58:	4b30      	ldr	r3, [pc, #192]	; (8001e1c <vgaDriver+0xc4>)
		activeBuffer = oldBuffer;
 8001d5a:	4931      	ldr	r1, [pc, #196]	; (8001e20 <vgaDriver+0xc8>)
		Color * tmp = activeBuffer;
 8001d5c:	4a31      	ldr	r2, [pc, #196]	; (8001e24 <vgaDriver+0xcc>)
		activeBuffer = oldBuffer;
 8001d5e:	6808      	ldr	r0, [r1, #0]
void __attribute__((optimize("O3"))) vgaDriver(){
 8001d60:	b430      	push	{r4, r5}
	lineCount++;
 8001d62:	681c      	ldr	r4, [r3, #0]
		Color * tmp = activeBuffer;
 8001d64:	6815      	ldr	r5, [r2, #0]
		activeBuffer = oldBuffer;
 8001d66:	6010      	str	r0, [r2, #0]
	lineCount++;
 8001d68:	1c62      	adds	r2, r4, #1
	if(lineCount < vertArea){//send line
 8001d6a:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
		oldBuffer = tmp;
 8001d6e:	600d      	str	r5, [r1, #0]
	lineCount++;
 8001d70:	601a      	str	r2, [r3, #0]
	if(lineCount < vertArea){//send line
 8001d72:	da1f      	bge.n	8001db4 <vgaDriver+0x5c>
		ref_str = "render line";
#endif
		//renderLine(activeBuffer, lineCount);
		//while(HAL_DMA_PollForTransfer(memCopyDMA, HAL_DMA_FULL_TRANSFER, 100)){HAL_Delay(1);};
		uint32_t * active32 = (uint32_t*)&activeBuffer[horiWhole-horiRes];
		uint32_t * screen32 = (uint32_t*)&screenBuff[(lineCount/vgaUpscale)*horiRes];
 8001d74:	1e11      	subs	r1, r2, #0
 8001d76:	bfb8      	it	lt
 8001d78:	1d21      	addlt	r1, r4, #4
 8001d7a:	4a2b      	ldr	r2, [pc, #172]	; (8001e28 <vgaDriver+0xd0>)
 8001d7c:	f021 0c03 	bic.w	ip, r1, #3
 8001d80:	eb0c 01a1 	add.w	r1, ip, r1, asr #2
 8001d84:	eb02 1441 	add.w	r4, r2, r1, lsl #5
		uint32_t * active32 = (uint32_t*)&activeBuffer[horiWhole-horiRes];
 8001d88:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8001d8c:	3404      	adds	r4, #4
 8001d8e:	42a3      	cmp	r3, r4
		uint32_t * screen32 = (uint32_t*)&screenBuff[(lineCount/vgaUpscale)*horiRes];
 8001d90:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 8001d94:	d028      	beq.n	8001de8 <vgaDriver+0x90>
 8001d96:	ea42 0103 	orr.w	r1, r2, r3
 8001d9a:	0749      	lsls	r1, r1, #29
 8001d9c:	d124      	bne.n	8001de8 <vgaDriver+0x90>
 8001d9e:	3a08      	subs	r2, #8
 8001da0:	f100 0cc8 	add.w	ip, r0, #200	; 0xc8
		for(uint32_t i = 0; i < horiRes/4;i++){
			*active32 = *screen32;
 8001da4:	e9f2 0102 	ldrd	r0, r1, [r2, #8]!
 8001da8:	e8e3 0102 	strd	r0, r1, [r3], #8
 8001dac:	459c      	cmp	ip, r3
 8001dae:	d1f9      	bne.n	8001da4 <vgaDriver+0x4c>
	str_len = sprintf(str, "Line %i\t %s \n\r", lineCount, ref_str);
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
	uint32_t indicatorLengths[] = {horiFront, horiSync, horiBack, horiRes, horiFront, horiSync, horiBack, horiRes};
	dumpBuffer((char*)lineBuff, horiWhole*2, indicatorLengths, "  []  ||  []  ||EE", 2);
#endif
}
 8001db0:	bc30      	pop	{r4, r5}
 8001db2:	4770      	bx	lr
	}else if(lineCount == vertArea){//last line clear
 8001db4:	d012      	beq.n	8001ddc <vgaDriver+0x84>
	}else if(lineCount == vertArea + 1){//last line clear buffer
 8001db6:	f240 1191 	movw	r1, #401	; 0x191
 8001dba:	428a      	cmp	r2, r1
 8001dbc:	d00e      	beq.n	8001ddc <vgaDriver+0x84>
	}else if(lineCount == vertArea + vertFront){//enter vertical sync todo check for of by one error
 8001dbe:	f5b2 7fce 	cmp.w	r2, #412	; 0x19c
 8001dc2:	d01a      	beq.n	8001dfa <vgaDriver+0xa2>
	}else if(lineCount == vertArea + vertFront + vertSync){//exit vertical sync
 8001dc4:	f5b2 7fcf 	cmp.w	r2, #414	; 0x19e
 8001dc8:	d01f      	beq.n	8001e0a <vgaDriver+0xb2>
	}else if(lineCount >= vertWhole){//return to beginning
 8001dca:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
		lineCount = -1;
 8001dce:	bfc8      	it	gt
 8001dd0:	f04f 32ff 	movgt.w	r2, #4294967295
}
 8001dd4:	bc30      	pop	{r4, r5}
		lineCount = -1;
 8001dd6:	bfc8      	it	gt
 8001dd8:	601a      	strgt	r2, [r3, #0]
}
 8001dda:	4770      	bx	lr
 8001ddc:	bc30      	pop	{r4, r5}
			*active32 = 0;
 8001dde:	22a0      	movs	r2, #160	; 0xa0
 8001de0:	2100      	movs	r1, #0
 8001de2:	3028      	adds	r0, #40	; 0x28
 8001de4:	f003 b8a6 	b.w	8004f34 <memset>
 8001de8:	3a04      	subs	r2, #4
 8001dea:	30c8      	adds	r0, #200	; 0xc8
			*active32 = *screen32;
 8001dec:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8001df0:	f843 1b04 	str.w	r1, [r3], #4
		for(uint32_t i = 0; i < horiRes/4;i++){
 8001df4:	4298      	cmp	r0, r3
 8001df6:	d1f9      	bne.n	8001dec <vgaDriver+0x94>
 8001df8:	e7da      	b.n	8001db0 <vgaDriver+0x58>
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_SET);
 8001dfa:	4a0c      	ldr	r2, [pc, #48]	; (8001e2c <vgaDriver+0xd4>)
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <vgaDriver+0xd8>)
 8001dfe:	8811      	ldrh	r1, [r2, #0]
 8001e00:	6818      	ldr	r0, [r3, #0]
}
 8001e02:	bc30      	pop	{r4, r5}
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_SET);
 8001e04:	2201      	movs	r2, #1
 8001e06:	f001 b845 	b.w	8002e94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_RESET);
 8001e0a:	4a08      	ldr	r2, [pc, #32]	; (8001e2c <vgaDriver+0xd4>)
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <vgaDriver+0xd8>)
 8001e0e:	8811      	ldrh	r1, [r2, #0]
 8001e10:	6818      	ldr	r0, [r3, #0]
}
 8001e12:	bc30      	pop	{r4, r5}
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_RESET);
 8001e14:	2200      	movs	r2, #0
 8001e16:	f001 b83d 	b.w	8002e94 <HAL_GPIO_WritePin>
 8001e1a:	bf00      	nop
 8001e1c:	200042a0 	.word	0x200042a0
 8001e20:	200042b4 	.word	0x200042b4
 8001e24:	200042b0 	.word	0x200042b0
 8001e28:	2000040c 	.word	0x2000040c
 8001e2c:	2000429c 	.word	0x2000429c
 8001e30:	20004298 	.word	0x20004298

08001e34 <vgaHalfCallBack>:

void vgaHalfCallBack(DMA_HandleTypeDef *_hdma){
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	//prepareLine(lineBuff, &lineBuff[horiWhole]);
	//readyForNextLine++;
	//vga_DMA_XFER_HALFCPLT_CB_ID();
	vgaDriver();
 8001e3c:	f7ff ff8c 	bl	8001d58 <vgaDriver>
	//vgaStateMachine(1);
}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <vgaFullCallBack>:

void vgaFullCallBack(DMA_HandleTypeDef *_hdma){
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
	//prepareLine(&lineBuff[horiWhole], lineBuff);
	//readyForNextLine++;
	//vga_DMA_XFER_CPLT_CB_ID();
	vgaDriver();
 8001e50:	f7ff ff82 	bl	8001d58 <vgaDriver>
	//vgaStateMachine(1);
}
 8001e54:	bf00      	nop
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <vgaCopyAndSetCallBack>:

void vgaCopyAndSetCallBack(DMA_HandleTypeDef *_hdma){
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b098      	sub	sp, #96	; 0x60
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	char str[81] = { '\0' };
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	224d      	movs	r2, #77	; 0x4d
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4618      	mov	r0, r3
 8001e72:	f003 f85f 	bl	8004f34 <memset>
	int str_len = sprintf(str, "memCopyDMA\r\n");
 8001e76:	f107 0308 	add.w	r3, r7, #8
 8001e7a:	490b      	ldr	r1, [pc, #44]	; (8001ea8 <vgaCopyAndSetCallBack+0x4c>)
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f003 f861 	bl	8004f44 <siprintf>
 8001e82:	65f8      	str	r0, [r7, #92]	; 0x5c
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8001e84:	4b09      	ldr	r3, [pc, #36]	; (8001eac <vgaCopyAndSetCallBack+0x50>)
 8001e86:	6818      	ldr	r0, [r3, #0]
 8001e88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	f107 0108 	add.w	r1, r7, #8
 8001e90:	f04f 33ff 	mov.w	r3, #4294967295
 8001e94:	f002 fcaf 	bl	80047f6 <HAL_UART_Transmit>
	vgaStateMachine(0);
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f7ff fd19 	bl	80018d0 <vgaStateMachine>
}
 8001e9e:	bf00      	nop
 8001ea0:	3760      	adds	r7, #96	; 0x60
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	08005cc8 	.word	0x08005cc8
 8001eac:	200042b8 	.word	0x200042b8

08001eb0 <vgaSetup>:
		TIM_HandleTypeDef * vgaPixelTimer_,
		DMA_HandleTypeDef * vgaCircularDMA_,
		DMA_HandleTypeDef * memCopyDMA_,
		GPIO_TypeDef* Vsync_GPIO_Port_,
		uint16_t Vsync_Pin_
		){
 8001eb0:	b480      	push	{r7}
 8001eb2:	b089      	sub	sp, #36	; 0x24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]

	vgaPixelTimer = vgaPixelTimer_;
 8001ebe:	4a33      	ldr	r2, [pc, #204]	; (8001f8c <vgaSetup+0xdc>)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6013      	str	r3, [r2, #0]
	vgaCircularDMA = vgaCircularDMA_;
 8001ec4:	4a32      	ldr	r2, [pc, #200]	; (8001f90 <vgaSetup+0xe0>)
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	6013      	str	r3, [r2, #0]
	memCopyDMA = memCopyDMA_;
 8001eca:	4a32      	ldr	r2, [pc, #200]	; (8001f94 <vgaSetup+0xe4>)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6013      	str	r3, [r2, #0]

	Vsync_GPIO_Port = Vsync_GPIO_Port_;
 8001ed0:	4a31      	ldr	r2, [pc, #196]	; (8001f98 <vgaSetup+0xe8>)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	6013      	str	r3, [r2, #0]
	Vsync_Pin = Vsync_Pin_;
 8001ed6:	4a31      	ldr	r2, [pc, #196]	; (8001f9c <vgaSetup+0xec>)
 8001ed8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001eda:	8013      	strh	r3, [r2, #0]

	lineCount = 0; //vertArea + vertFront - 1 - 2;//start right after a vertical sync
 8001edc:	4b30      	ldr	r3, [pc, #192]	; (8001fa0 <vgaSetup+0xf0>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
	lineUpscale = 0;//copy old buffer if non zero
 8001ee2:	4b30      	ldr	r3, [pc, #192]	; (8001fa4 <vgaSetup+0xf4>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
	readyForNextLine = 1;
 8001ee8:	4b2f      	ldr	r3, [pc, #188]	; (8001fa8 <vgaSetup+0xf8>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	601a      	str	r2, [r3, #0]
	state = sSetVsync1P1;
 8001eee:	4b2f      	ldr	r3, [pc, #188]	; (8001fac <vgaSetup+0xfc>)
 8001ef0:	2209      	movs	r2, #9
 8001ef2:	701a      	strb	r2, [r3, #0]
	activeBuffer = lineBuff;
 8001ef4:	4b2e      	ldr	r3, [pc, #184]	; (8001fb0 <vgaSetup+0x100>)
 8001ef6:	4a2f      	ldr	r2, [pc, #188]	; (8001fb4 <vgaSetup+0x104>)
 8001ef8:	601a      	str	r2, [r3, #0]
	oldBuffer = &lineBuff[horiWhole];
 8001efa:	4b2f      	ldr	r3, [pc, #188]	; (8001fb8 <vgaSetup+0x108>)
 8001efc:	4a2f      	ldr	r2, [pc, #188]	; (8001fbc <vgaSetup+0x10c>)
 8001efe:	601a      	str	r2, [r3, #0]

	for(uint32_t i = 0; i < horiWhole; i += 2){//clear all
 8001f00:	2300      	movs	r3, #0
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	e00e      	b.n	8001f24 <vgaSetup+0x74>
		activeBuffer[i].value = 0;
 8001f06:	4b2a      	ldr	r3, [pc, #168]	; (8001fb0 <vgaSetup+0x100>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
		oldBuffer[i].value = 0;
 8001f12:	4b29      	ldr	r3, [pc, #164]	; (8001fb8 <vgaSetup+0x108>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	4413      	add	r3, r2
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < horiWhole; i += 2){//clear all
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3302      	adds	r3, #2
 8001f22:	61fb      	str	r3, [r7, #28]
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	2bc7      	cmp	r3, #199	; 0xc7
 8001f28:	d9ed      	bls.n	8001f06 <vgaSetup+0x56>
	}
	for(uint32_t i = 0; i < horiRes; i++){//load test data
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61bb      	str	r3, [r7, #24]
 8001f2e:	e00e      	b.n	8001f4e <vgaSetup+0x9e>
		activeBuffer[i].value = 0x0;
 8001f30:	4b1f      	ldr	r3, [pc, #124]	; (8001fb0 <vgaSetup+0x100>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	4413      	add	r3, r2
 8001f38:	2200      	movs	r2, #0
 8001f3a:	701a      	strb	r2, [r3, #0]
		oldBuffer[i].value = 0x00;
 8001f3c:	4b1e      	ldr	r3, [pc, #120]	; (8001fb8 <vgaSetup+0x108>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	4413      	add	r3, r2
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < horiRes; i++){//load test data
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	61bb      	str	r3, [r7, #24]
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	2b9f      	cmp	r3, #159	; 0x9f
 8001f52:	d9ed      	bls.n	8001f30 <vgaSetup+0x80>
	}
	for(uint32_t i = horiFront; i < horiFront + horiSync; i++){//set horizontal sync
 8001f54:	2304      	movs	r3, #4
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	e00e      	b.n	8001f78 <vgaSetup+0xc8>
		activeBuffer[i].value = 0x80;
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <vgaSetup+0x100>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	4413      	add	r3, r2
 8001f62:	2280      	movs	r2, #128	; 0x80
 8001f64:	701a      	strb	r2, [r3, #0]
		oldBuffer[i].value = 0x80;
 8001f66:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <vgaSetup+0x108>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	2280      	movs	r2, #128	; 0x80
 8001f70:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = horiFront; i < horiFront + horiSync; i++){//set horizontal sync
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	3301      	adds	r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2b1b      	cmp	r3, #27
 8001f7c:	d9ed      	bls.n	8001f5a <vgaSetup+0xaa>
	}
}
 8001f7e:	bf00      	nop
 8001f80:	bf00      	nop
 8001f82:	3724      	adds	r7, #36	; 0x24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	2000428c 	.word	0x2000428c
 8001f90:	20004290 	.word	0x20004290
 8001f94:	20004294 	.word	0x20004294
 8001f98:	20004298 	.word	0x20004298
 8001f9c:	2000429c 	.word	0x2000429c
 8001fa0:	200042a0 	.word	0x200042a0
 8001fa4:	200042a4 	.word	0x200042a4
 8001fa8:	200042a8 	.word	0x200042a8
 8001fac:	200042ac 	.word	0x200042ac
 8001fb0:	200042b0 	.word	0x200042b0
 8001fb4:	2000027c 	.word	0x2000027c
 8001fb8:	200042b4 	.word	0x200042b4
 8001fbc:	20000344 	.word	0x20000344

08001fc0 <vgaStart>:



void vgaStart(){
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af02      	add	r7, sp, #8

	dumpBuffer((char*)screenBuff, horiRes*vertRes, NULL, "", 2);
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	4b20      	ldr	r3, [pc, #128]	; (800204c <vgaStart+0x8c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8001fd2:	481f      	ldr	r0, [pc, #124]	; (8002050 <vgaStart+0x90>)
 8001fd4:	f7ff fdda 	bl	8001b8c <dumpBuffer>
	//HAL_DMA_Init(vgaCircularDMA);
	__HAL_TIM_ENABLE_DMA(vgaPixelTimer, TIM_DMA_UPDATE);
 8001fd8:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <vgaStart+0x94>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <vgaStart+0x94>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fea:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE(vgaPixelTimer);
 8001fec:	4b19      	ldr	r3, [pc, #100]	; (8002054 <vgaStart+0x94>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b17      	ldr	r3, [pc, #92]	; (8002054 <vgaStart+0x94>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]

	HAL_TIM_PWM_Start(vgaPixelTimer, TIM_CHANNEL_1);
 8002000:	4b14      	ldr	r3, [pc, #80]	; (8002054 <vgaStart+0x94>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2100      	movs	r1, #0
 8002006:	4618      	mov	r0, r3
 8002008:	f001 fc9e 	bl	8003948 <HAL_TIM_PWM_Start>

	HAL_DMA_RegisterCallback(vgaCircularDMA, HAL_DMA_XFER_HALFCPLT_CB_ID, vgaHalfCallBack);
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <vgaStart+0x98>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a12      	ldr	r2, [pc, #72]	; (800205c <vgaStart+0x9c>)
 8002012:	2101      	movs	r1, #1
 8002014:	4618      	mov	r0, r3
 8002016:	f000 fc6b 	bl	80028f0 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(vgaCircularDMA, HAL_DMA_XFER_CPLT_CB_ID, vgaFullCallBack);
 800201a:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <vgaStart+0x98>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a10      	ldr	r2, [pc, #64]	; (8002060 <vgaStart+0xa0>)
 8002020:	2100      	movs	r1, #0
 8002022:	4618      	mov	r0, r3
 8002024:	f000 fc64 	bl	80028f0 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(memCopyDMA, HAL_DMA_XFER_CPLT_CB_ID, vgaCopyAndSetCallBack);
 8002028:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <vgaStart+0xa4>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0e      	ldr	r2, [pc, #56]	; (8002068 <vgaStart+0xa8>)
 800202e:	2100      	movs	r1, #0
 8002030:	4618      	mov	r0, r3
 8002032:	f000 fc5d 	bl	80028f0 <HAL_DMA_RegisterCallback>
	//prepare the buffer with the first two lines
	//vgaStateMachine(1);
	//vgaStateMachine(1);

	//start the circular buffer dma transfer aka vga main loop
	HAL_DMA_Start_IT(vgaCircularDMA, (uint32_t)&lineBuff[0], (uint32_t)&(GPIOC->ODR), horiWhole*2);
 8002036:	4b08      	ldr	r3, [pc, #32]	; (8002058 <vgaStart+0x98>)
 8002038:	6818      	ldr	r0, [r3, #0]
 800203a:	490c      	ldr	r1, [pc, #48]	; (800206c <vgaStart+0xac>)
 800203c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002040:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <vgaStart+0xb0>)
 8002042:	f000 fa73 	bl	800252c <HAL_DMA_Start_IT>
	//__HAL_TIM_ENABLE_DMA(vgaPixelTimer, TIM_DMA_TRIGGER);//no effect


	//HAL_DMAEx_MultiBufferStart_IT(hdma, SrcAddress, DstAddress, SecondMemAddress, DataLength);
	//vgaLoop();
}
 8002046:	bf00      	nop
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	08005cd4 	.word	0x08005cd4
 8002050:	2000040c 	.word	0x2000040c
 8002054:	2000428c 	.word	0x2000428c
 8002058:	20004290 	.word	0x20004290
 800205c:	08001e35 	.word	0x08001e35
 8002060:	08001e49 	.word	0x08001e49
 8002064:	20004294 	.word	0x20004294
 8002068:	08001e5d 	.word	0x08001e5d
 800206c:	2000027c 	.word	0x2000027c
 8002070:	40020814 	.word	0x40020814

08002074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002074:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002078:	480d      	ldr	r0, [pc, #52]	; (80020b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800207a:	490e      	ldr	r1, [pc, #56]	; (80020b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800207c:	4a0e      	ldr	r2, [pc, #56]	; (80020b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800207e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002080:	e002      	b.n	8002088 <LoopCopyDataInit>

08002082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002086:	3304      	adds	r3, #4

08002088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800208a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800208c:	d3f9      	bcc.n	8002082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800208e:	4a0b      	ldr	r2, [pc, #44]	; (80020bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002090:	4c0b      	ldr	r4, [pc, #44]	; (80020c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002094:	e001      	b.n	800209a <LoopFillZerobss>

08002096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002098:	3204      	adds	r2, #4

0800209a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800209a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800209c:	d3fb      	bcc.n	8002096 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800209e:	f7ff f82b 	bl	80010f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020a2:	f002 ff23 	bl	8004eec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020a6:	f7fe fb5f 	bl	8000768 <main>
  bx  lr    
 80020aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80020b8:	08005d24 	.word	0x08005d24
  ldr r2, =_sbss
 80020bc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80020c0:	200046bc 	.word	0x200046bc

080020c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020c4:	e7fe      	b.n	80020c4 <ADC_IRQHandler>
	...

080020c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020cc:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <HAL_Init+0x40>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a0d      	ldr	r2, [pc, #52]	; (8002108 <HAL_Init+0x40>)
 80020d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_Init+0x40>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <HAL_Init+0x40>)
 80020de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020e4:	4b08      	ldr	r3, [pc, #32]	; (8002108 <HAL_Init+0x40>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a07      	ldr	r2, [pc, #28]	; (8002108 <HAL_Init+0x40>)
 80020ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f0:	2003      	movs	r0, #3
 80020f2:	f000 f92b 	bl	800234c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020f6:	2000      	movs	r0, #0
 80020f8:	f000 f808 	bl	800210c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020fc:	f7fe fe62 	bl	8000dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40023c00 	.word	0x40023c00

0800210c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002114:	4b12      	ldr	r3, [pc, #72]	; (8002160 <HAL_InitTick+0x54>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b12      	ldr	r3, [pc, #72]	; (8002164 <HAL_InitTick+0x58>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	4619      	mov	r1, r3
 800211e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002122:	fbb3 f3f1 	udiv	r3, r3, r1
 8002126:	fbb2 f3f3 	udiv	r3, r2, r3
 800212a:	4618      	mov	r0, r3
 800212c:	f000 f943 	bl	80023b6 <HAL_SYSTICK_Config>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e00e      	b.n	8002158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b0f      	cmp	r3, #15
 800213e:	d80a      	bhi.n	8002156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002140:	2200      	movs	r2, #0
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	f04f 30ff 	mov.w	r0, #4294967295
 8002148:	f000 f90b 	bl	8002362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800214c:	4a06      	ldr	r2, [pc, #24]	; (8002168 <HAL_InitTick+0x5c>)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	e000      	b.n	8002158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
}
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20000000 	.word	0x20000000
 8002164:	20000008 	.word	0x20000008
 8002168:	20000004 	.word	0x20000004

0800216c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_IncTick+0x20>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	4b06      	ldr	r3, [pc, #24]	; (8002190 <HAL_IncTick+0x24>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4413      	add	r3, r2
 800217c:	4a04      	ldr	r2, [pc, #16]	; (8002190 <HAL_IncTick+0x24>)
 800217e:	6013      	str	r3, [r2, #0]
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	20000008 	.word	0x20000008
 8002190:	200046a8 	.word	0x200046a8

08002194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return uwTick;
 8002198:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <HAL_GetTick+0x14>)
 800219a:	681b      	ldr	r3, [r3, #0]
}
 800219c:	4618      	mov	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	200046a8 	.word	0x200046a8

080021ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <__NVIC_SetPriorityGrouping+0x44>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021c8:	4013      	ands	r3, r2
 80021ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021de:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <__NVIC_SetPriorityGrouping+0x44>)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	60d3      	str	r3, [r2, #12]
}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <__NVIC_GetPriorityGrouping+0x18>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	0a1b      	lsrs	r3, r3, #8
 80021fe:	f003 0307 	and.w	r3, r3, #7
}
 8002202:	4618      	mov	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	2b00      	cmp	r3, #0
 8002220:	db0b      	blt.n	800223a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	f003 021f 	and.w	r2, r3, #31
 8002228:	4907      	ldr	r1, [pc, #28]	; (8002248 <__NVIC_EnableIRQ+0x38>)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	2001      	movs	r0, #1
 8002232:	fa00 f202 	lsl.w	r2, r0, r2
 8002236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	e000e100 	.word	0xe000e100

0800224c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	6039      	str	r1, [r7, #0]
 8002256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225c:	2b00      	cmp	r3, #0
 800225e:	db0a      	blt.n	8002276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	b2da      	uxtb	r2, r3
 8002264:	490c      	ldr	r1, [pc, #48]	; (8002298 <__NVIC_SetPriority+0x4c>)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	0112      	lsls	r2, r2, #4
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	440b      	add	r3, r1
 8002270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002274:	e00a      	b.n	800228c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4908      	ldr	r1, [pc, #32]	; (800229c <__NVIC_SetPriority+0x50>)
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	3b04      	subs	r3, #4
 8002284:	0112      	lsls	r2, r2, #4
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	440b      	add	r3, r1
 800228a:	761a      	strb	r2, [r3, #24]
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000e100 	.word	0xe000e100
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b089      	sub	sp, #36	; 0x24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f1c3 0307 	rsb	r3, r3, #7
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	bf28      	it	cs
 80022be:	2304      	movcs	r3, #4
 80022c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3304      	adds	r3, #4
 80022c6:	2b06      	cmp	r3, #6
 80022c8:	d902      	bls.n	80022d0 <NVIC_EncodePriority+0x30>
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3b03      	subs	r3, #3
 80022ce:	e000      	b.n	80022d2 <NVIC_EncodePriority+0x32>
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d4:	f04f 32ff 	mov.w	r2, #4294967295
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43da      	mvns	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	401a      	ands	r2, r3
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e8:	f04f 31ff 	mov.w	r1, #4294967295
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	fa01 f303 	lsl.w	r3, r1, r3
 80022f2:	43d9      	mvns	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f8:	4313      	orrs	r3, r2
         );
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3724      	adds	r7, #36	; 0x24
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3b01      	subs	r3, #1
 8002314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002318:	d301      	bcc.n	800231e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800231a:	2301      	movs	r3, #1
 800231c:	e00f      	b.n	800233e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800231e:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <SysTick_Config+0x40>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3b01      	subs	r3, #1
 8002324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002326:	210f      	movs	r1, #15
 8002328:	f04f 30ff 	mov.w	r0, #4294967295
 800232c:	f7ff ff8e 	bl	800224c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002330:	4b05      	ldr	r3, [pc, #20]	; (8002348 <SysTick_Config+0x40>)
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002336:	4b04      	ldr	r3, [pc, #16]	; (8002348 <SysTick_Config+0x40>)
 8002338:	2207      	movs	r2, #7
 800233a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	e000e010 	.word	0xe000e010

0800234c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff ff29 	bl	80021ac <__NVIC_SetPriorityGrouping>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002362:	b580      	push	{r7, lr}
 8002364:	b086      	sub	sp, #24
 8002366:	af00      	add	r7, sp, #0
 8002368:	4603      	mov	r3, r0
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
 800236e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002374:	f7ff ff3e 	bl	80021f4 <__NVIC_GetPriorityGrouping>
 8002378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68b9      	ldr	r1, [r7, #8]
 800237e:	6978      	ldr	r0, [r7, #20]
 8002380:	f7ff ff8e 	bl	80022a0 <NVIC_EncodePriority>
 8002384:	4602      	mov	r2, r0
 8002386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800238a:	4611      	mov	r1, r2
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff ff5d 	bl	800224c <__NVIC_SetPriority>
}
 8002392:	bf00      	nop
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	4603      	mov	r3, r0
 80023a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff31 	bl	8002210 <__NVIC_EnableIRQ>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff ffa2 	bl	8002308 <SysTick_Config>
 80023c4:	4603      	mov	r3, r0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023dc:	f7ff feda 	bl	8002194 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e099      	b.n	8002520 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2202      	movs	r2, #2
 80023f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0201 	bic.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800240c:	e00f      	b.n	800242e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800240e:	f7ff fec1 	bl	8002194 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b05      	cmp	r3, #5
 800241a:	d908      	bls.n	800242e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2220      	movs	r2, #32
 8002420:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2203      	movs	r2, #3
 8002426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e078      	b.n	8002520 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1e8      	bne.n	800240e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	4b38      	ldr	r3, [pc, #224]	; (8002528 <HAL_DMA_Init+0x158>)
 8002448:	4013      	ands	r3, r2
 800244a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800245a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002466:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002472:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	4313      	orrs	r3, r2
 800247e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	2b04      	cmp	r3, #4
 8002486:	d107      	bne.n	8002498 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	4313      	orrs	r3, r2
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	4313      	orrs	r3, r2
 8002496:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f023 0307 	bic.w	r3, r3, #7
 80024ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d117      	bne.n	80024f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00e      	beq.n	80024f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fadd 	bl	8002a94 <DMA_CheckFifoParam>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2240      	movs	r2, #64	; 0x40
 80024e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024ee:	2301      	movs	r3, #1
 80024f0:	e016      	b.n	8002520 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fa94 	bl	8002a28 <DMA_CalcBaseAndBitshift>
 8002500:	4603      	mov	r3, r0
 8002502:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002508:	223f      	movs	r2, #63	; 0x3f
 800250a:	409a      	lsls	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	f010803f 	.word	0xf010803f

0800252c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
 8002538:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002542:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_DMA_Start_IT+0x26>
 800254e:	2302      	movs	r3, #2
 8002550:	e040      	b.n	80025d4 <HAL_DMA_Start_IT+0xa8>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b01      	cmp	r3, #1
 8002564:	d12f      	bne.n	80025c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2202      	movs	r2, #2
 800256a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 fa26 	bl	80029cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002584:	223f      	movs	r2, #63	; 0x3f
 8002586:	409a      	lsls	r2, r3
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0216 	orr.w	r2, r2, #22
 800259a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d007      	beq.n	80025b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0208 	orr.w	r2, r2, #8
 80025b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	e005      	b.n	80025d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025ce:	2302      	movs	r3, #2
 80025d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025e8:	4b8e      	ldr	r3, [pc, #568]	; (8002824 <HAL_DMA_IRQHandler+0x248>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a8e      	ldr	r2, [pc, #568]	; (8002828 <HAL_DMA_IRQHandler+0x24c>)
 80025ee:	fba2 2303 	umull	r2, r3, r2, r3
 80025f2:	0a9b      	lsrs	r3, r3, #10
 80025f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002606:	2208      	movs	r2, #8
 8002608:	409a      	lsls	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4013      	ands	r3, r2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d01a      	beq.n	8002648 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	d013      	beq.n	8002648 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0204 	bic.w	r2, r2, #4
 800262e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002634:	2208      	movs	r2, #8
 8002636:	409a      	lsls	r2, r3
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002640:	f043 0201 	orr.w	r2, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264c:	2201      	movs	r2, #1
 800264e:	409a      	lsls	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4013      	ands	r3, r2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d012      	beq.n	800267e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00b      	beq.n	800267e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266a:	2201      	movs	r2, #1
 800266c:	409a      	lsls	r2, r3
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002676:	f043 0202 	orr.w	r2, r3, #2
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002682:	2204      	movs	r2, #4
 8002684:	409a      	lsls	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4013      	ands	r3, r2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d012      	beq.n	80026b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00b      	beq.n	80026b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a0:	2204      	movs	r2, #4
 80026a2:	409a      	lsls	r2, r3
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ac:	f043 0204 	orr.w	r2, r3, #4
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b8:	2210      	movs	r2, #16
 80026ba:	409a      	lsls	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4013      	ands	r3, r2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d043      	beq.n	800274c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d03c      	beq.n	800274c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d6:	2210      	movs	r2, #16
 80026d8:	409a      	lsls	r2, r3
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d018      	beq.n	800271e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d108      	bne.n	800270c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d024      	beq.n	800274c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	4798      	blx	r3
 800270a:	e01f      	b.n	800274c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002710:	2b00      	cmp	r3, #0
 8002712:	d01b      	beq.n	800274c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	4798      	blx	r3
 800271c:	e016      	b.n	800274c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d107      	bne.n	800273c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0208 	bic.w	r2, r2, #8
 800273a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002750:	2220      	movs	r2, #32
 8002752:	409a      	lsls	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4013      	ands	r3, r2
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 808f 	beq.w	800287c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0310 	and.w	r3, r3, #16
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 8087 	beq.w	800287c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002772:	2220      	movs	r2, #32
 8002774:	409a      	lsls	r2, r3
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b05      	cmp	r3, #5
 8002784:	d136      	bne.n	80027f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0216 	bic.w	r2, r2, #22
 8002794:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695a      	ldr	r2, [r3, #20]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d103      	bne.n	80027b6 <HAL_DMA_IRQHandler+0x1da>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d007      	beq.n	80027c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0208 	bic.w	r2, r2, #8
 80027c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ca:	223f      	movs	r2, #63	; 0x3f
 80027cc:	409a      	lsls	r2, r3
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d07e      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	4798      	blx	r3
        }
        return;
 80027f2:	e079      	b.n	80028e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d01d      	beq.n	800283e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10d      	bne.n	800282c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002814:	2b00      	cmp	r3, #0
 8002816:	d031      	beq.n	800287c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	4798      	blx	r3
 8002820:	e02c      	b.n	800287c <HAL_DMA_IRQHandler+0x2a0>
 8002822:	bf00      	nop
 8002824:	20000000 	.word	0x20000000
 8002828:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002830:	2b00      	cmp	r3, #0
 8002832:	d023      	beq.n	800287c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	4798      	blx	r3
 800283c:	e01e      	b.n	800287c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10f      	bne.n	800286c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0210 	bic.w	r2, r2, #16
 800285a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002880:	2b00      	cmp	r3, #0
 8002882:	d032      	beq.n	80028ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d022      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2205      	movs	r2, #5
 8002894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0201 	bic.w	r2, r2, #1
 80028a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	3301      	adds	r3, #1
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d307      	bcc.n	80028c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f2      	bne.n	80028a8 <HAL_DMA_IRQHandler+0x2cc>
 80028c2:	e000      	b.n	80028c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d005      	beq.n	80028ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	4798      	blx	r3
 80028e6:	e000      	b.n	80028ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80028e8:	bf00      	nop
    }
  }
}
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 80028f0:	b480      	push	{r7}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	460b      	mov	r3, r1
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_DMA_RegisterCallback+0x20>
 800290c:	2302      	movs	r3, #2
 800290e:	e03d      	b.n	800298c <HAL_DMA_RegisterCallback+0x9c>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b01      	cmp	r3, #1
 8002922:	d12c      	bne.n	800297e <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 8002924:	7afb      	ldrb	r3, [r7, #11]
 8002926:	2b05      	cmp	r3, #5
 8002928:	d826      	bhi.n	8002978 <HAL_DMA_RegisterCallback+0x88>
 800292a:	a201      	add	r2, pc, #4	; (adr r2, 8002930 <HAL_DMA_RegisterCallback+0x40>)
 800292c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002930:	08002949 	.word	0x08002949
 8002934:	08002951 	.word	0x08002951
 8002938:	08002959 	.word	0x08002959
 800293c:	08002961 	.word	0x08002961
 8002940:	08002969 	.word	0x08002969
 8002944:	08002971 	.word	0x08002971
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 800294e:	e018      	b.n	8002982 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002956:	e014      	b.n	8002982 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 800295e:	e010      	b.n	8002982 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8002966:	e00c      	b.n	8002982 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 800296e:	e008      	b.n	8002982 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002976:	e004      	b.n	8002982 <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	75fb      	strb	r3, [r7, #23]
      break;
 800297c:	e001      	b.n	8002982 <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 800298a:	7dfb      	ldrb	r3, [r7, #23]
}
 800298c:	4618      	mov	r0, r3
 800298e:	371c      	adds	r7, #28
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029a6:	b2db      	uxtb	r3, r3
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	2b40      	cmp	r3, #64	; 0x40
 80029f8:	d108      	bne.n	8002a0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a0a:	e007      	b.n	8002a1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	60da      	str	r2, [r3, #12]
}
 8002a1c:	bf00      	nop
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	3b10      	subs	r3, #16
 8002a38:	4a14      	ldr	r2, [pc, #80]	; (8002a8c <DMA_CalcBaseAndBitshift+0x64>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	091b      	lsrs	r3, r3, #4
 8002a40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a42:	4a13      	ldr	r2, [pc, #76]	; (8002a90 <DMA_CalcBaseAndBitshift+0x68>)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4413      	add	r3, r2
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d909      	bls.n	8002a6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a5e:	f023 0303 	bic.w	r3, r3, #3
 8002a62:	1d1a      	adds	r2, r3, #4
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	659a      	str	r2, [r3, #88]	; 0x58
 8002a68:	e007      	b.n	8002a7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a72:	f023 0303 	bic.w	r3, r3, #3
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	aaaaaaab 	.word	0xaaaaaaab
 8002a90:	08005cd8 	.word	0x08005cd8

08002a94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d11f      	bne.n	8002aee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d856      	bhi.n	8002b62 <DMA_CheckFifoParam+0xce>
 8002ab4:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <DMA_CheckFifoParam+0x28>)
 8002ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aba:	bf00      	nop
 8002abc:	08002acd 	.word	0x08002acd
 8002ac0:	08002adf 	.word	0x08002adf
 8002ac4:	08002acd 	.word	0x08002acd
 8002ac8:	08002b63 	.word	0x08002b63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d046      	beq.n	8002b66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002adc:	e043      	b.n	8002b66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ae6:	d140      	bne.n	8002b6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aec:	e03d      	b.n	8002b6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af6:	d121      	bne.n	8002b3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2b03      	cmp	r3, #3
 8002afc:	d837      	bhi.n	8002b6e <DMA_CheckFifoParam+0xda>
 8002afe:	a201      	add	r2, pc, #4	; (adr r2, 8002b04 <DMA_CheckFifoParam+0x70>)
 8002b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b04:	08002b15 	.word	0x08002b15
 8002b08:	08002b1b 	.word	0x08002b1b
 8002b0c:	08002b15 	.word	0x08002b15
 8002b10:	08002b2d 	.word	0x08002b2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
      break;
 8002b18:	e030      	b.n	8002b7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d025      	beq.n	8002b72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b2a:	e022      	b.n	8002b72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b34:	d11f      	bne.n	8002b76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b3a:	e01c      	b.n	8002b76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d903      	bls.n	8002b4a <DMA_CheckFifoParam+0xb6>
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d003      	beq.n	8002b50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b48:	e018      	b.n	8002b7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b4e:	e015      	b.n	8002b7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00e      	beq.n	8002b7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b60:	e00b      	b.n	8002b7a <DMA_CheckFifoParam+0xe6>
      break;
 8002b62:	bf00      	nop
 8002b64:	e00a      	b.n	8002b7c <DMA_CheckFifoParam+0xe8>
      break;
 8002b66:	bf00      	nop
 8002b68:	e008      	b.n	8002b7c <DMA_CheckFifoParam+0xe8>
      break;
 8002b6a:	bf00      	nop
 8002b6c:	e006      	b.n	8002b7c <DMA_CheckFifoParam+0xe8>
      break;
 8002b6e:	bf00      	nop
 8002b70:	e004      	b.n	8002b7c <DMA_CheckFifoParam+0xe8>
      break;
 8002b72:	bf00      	nop
 8002b74:	e002      	b.n	8002b7c <DMA_CheckFifoParam+0xe8>
      break;   
 8002b76:	bf00      	nop
 8002b78:	e000      	b.n	8002b7c <DMA_CheckFifoParam+0xe8>
      break;
 8002b7a:	bf00      	nop
    }
  } 
  
  return status; 
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop

08002b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b089      	sub	sp, #36	; 0x24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
 8002ba6:	e159      	b.n	8002e5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ba8:	2201      	movs	r2, #1
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	f040 8148 	bne.w	8002e56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d005      	beq.n	8002bde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d130      	bne.n	8002c40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	2203      	movs	r2, #3
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c14:	2201      	movs	r2, #1
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	091b      	lsrs	r3, r3, #4
 8002c2a:	f003 0201 	and.w	r2, r3, #1
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d017      	beq.n	8002c7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	2203      	movs	r2, #3
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d123      	bne.n	8002cd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	08da      	lsrs	r2, r3, #3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3208      	adds	r2, #8
 8002c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	220f      	movs	r2, #15
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	08da      	lsrs	r2, r3, #3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3208      	adds	r2, #8
 8002cca:	69b9      	ldr	r1, [r7, #24]
 8002ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	2203      	movs	r2, #3
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 0203 	and.w	r2, r3, #3
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 80a2 	beq.w	8002e56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d12:	2300      	movs	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	4b57      	ldr	r3, [pc, #348]	; (8002e74 <HAL_GPIO_Init+0x2e8>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	4a56      	ldr	r2, [pc, #344]	; (8002e74 <HAL_GPIO_Init+0x2e8>)
 8002d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d20:	6453      	str	r3, [r2, #68]	; 0x44
 8002d22:	4b54      	ldr	r3, [pc, #336]	; (8002e74 <HAL_GPIO_Init+0x2e8>)
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d2e:	4a52      	ldr	r2, [pc, #328]	; (8002e78 <HAL_GPIO_Init+0x2ec>)
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	089b      	lsrs	r3, r3, #2
 8002d34:	3302      	adds	r3, #2
 8002d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	220f      	movs	r2, #15
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a49      	ldr	r2, [pc, #292]	; (8002e7c <HAL_GPIO_Init+0x2f0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d019      	beq.n	8002d8e <HAL_GPIO_Init+0x202>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a48      	ldr	r2, [pc, #288]	; (8002e80 <HAL_GPIO_Init+0x2f4>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d013      	beq.n	8002d8a <HAL_GPIO_Init+0x1fe>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a47      	ldr	r2, [pc, #284]	; (8002e84 <HAL_GPIO_Init+0x2f8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d00d      	beq.n	8002d86 <HAL_GPIO_Init+0x1fa>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a46      	ldr	r2, [pc, #280]	; (8002e88 <HAL_GPIO_Init+0x2fc>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d007      	beq.n	8002d82 <HAL_GPIO_Init+0x1f6>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a45      	ldr	r2, [pc, #276]	; (8002e8c <HAL_GPIO_Init+0x300>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d101      	bne.n	8002d7e <HAL_GPIO_Init+0x1f2>
 8002d7a:	2304      	movs	r3, #4
 8002d7c:	e008      	b.n	8002d90 <HAL_GPIO_Init+0x204>
 8002d7e:	2307      	movs	r3, #7
 8002d80:	e006      	b.n	8002d90 <HAL_GPIO_Init+0x204>
 8002d82:	2303      	movs	r3, #3
 8002d84:	e004      	b.n	8002d90 <HAL_GPIO_Init+0x204>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e002      	b.n	8002d90 <HAL_GPIO_Init+0x204>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <HAL_GPIO_Init+0x204>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	69fa      	ldr	r2, [r7, #28]
 8002d92:	f002 0203 	and.w	r2, r2, #3
 8002d96:	0092      	lsls	r2, r2, #2
 8002d98:	4093      	lsls	r3, r2
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002da0:	4935      	ldr	r1, [pc, #212]	; (8002e78 <HAL_GPIO_Init+0x2ec>)
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	089b      	lsrs	r3, r3, #2
 8002da6:	3302      	adds	r3, #2
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dae:	4b38      	ldr	r3, [pc, #224]	; (8002e90 <HAL_GPIO_Init+0x304>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	43db      	mvns	r3, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dd2:	4a2f      	ldr	r2, [pc, #188]	; (8002e90 <HAL_GPIO_Init+0x304>)
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dd8:	4b2d      	ldr	r3, [pc, #180]	; (8002e90 <HAL_GPIO_Init+0x304>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dfc:	4a24      	ldr	r2, [pc, #144]	; (8002e90 <HAL_GPIO_Init+0x304>)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e02:	4b23      	ldr	r3, [pc, #140]	; (8002e90 <HAL_GPIO_Init+0x304>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e26:	4a1a      	ldr	r2, [pc, #104]	; (8002e90 <HAL_GPIO_Init+0x304>)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e2c:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <HAL_GPIO_Init+0x304>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e50:	4a0f      	ldr	r2, [pc, #60]	; (8002e90 <HAL_GPIO_Init+0x304>)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	61fb      	str	r3, [r7, #28]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	2b0f      	cmp	r3, #15
 8002e60:	f67f aea2 	bls.w	8002ba8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop
 8002e68:	3724      	adds	r7, #36	; 0x24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40023800 	.word	0x40023800
 8002e78:	40013800 	.word	0x40013800
 8002e7c:	40020000 	.word	0x40020000
 8002e80:	40020400 	.word	0x40020400
 8002e84:	40020800 	.word	0x40020800
 8002e88:	40020c00 	.word	0x40020c00
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40013c00 	.word	0x40013c00

08002e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	807b      	strh	r3, [r7, #2]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ea4:	787b      	ldrb	r3, [r7, #1]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eaa:	887a      	ldrh	r2, [r7, #2]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002eb0:	e003      	b.n	8002eba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eb2:	887b      	ldrh	r3, [r7, #2]
 8002eb4:	041a      	lsls	r2, r3, #16
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	619a      	str	r2, [r3, #24]
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
	...

08002ec8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e267      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d075      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ee6:	4b88      	ldr	r3, [pc, #544]	; (8003108 <HAL_RCC_OscConfig+0x240>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 030c 	and.w	r3, r3, #12
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d00c      	beq.n	8002f0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ef2:	4b85      	ldr	r3, [pc, #532]	; (8003108 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d112      	bne.n	8002f24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002efe:	4b82      	ldr	r3, [pc, #520]	; (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f0a:	d10b      	bne.n	8002f24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f0c:	4b7e      	ldr	r3, [pc, #504]	; (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d05b      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x108>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d157      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e242      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f2c:	d106      	bne.n	8002f3c <HAL_RCC_OscConfig+0x74>
 8002f2e:	4b76      	ldr	r3, [pc, #472]	; (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a75      	ldr	r2, [pc, #468]	; (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	e01d      	b.n	8002f78 <HAL_RCC_OscConfig+0xb0>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f44:	d10c      	bne.n	8002f60 <HAL_RCC_OscConfig+0x98>
 8002f46:	4b70      	ldr	r3, [pc, #448]	; (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a6f      	ldr	r2, [pc, #444]	; (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	4b6d      	ldr	r3, [pc, #436]	; (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a6c      	ldr	r2, [pc, #432]	; (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	e00b      	b.n	8002f78 <HAL_RCC_OscConfig+0xb0>
 8002f60:	4b69      	ldr	r3, [pc, #420]	; (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a68      	ldr	r2, [pc, #416]	; (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	4b66      	ldr	r3, [pc, #408]	; (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a65      	ldr	r2, [pc, #404]	; (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d013      	beq.n	8002fa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f80:	f7ff f908 	bl	8002194 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f88:	f7ff f904 	bl	8002194 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b64      	cmp	r3, #100	; 0x64
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e207      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9a:	4b5b      	ldr	r3, [pc, #364]	; (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0xc0>
 8002fa6:	e014      	b.n	8002fd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa8:	f7ff f8f4 	bl	8002194 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb0:	f7ff f8f0 	bl	8002194 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b64      	cmp	r3, #100	; 0x64
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e1f3      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc2:	4b51      	ldr	r3, [pc, #324]	; (8003108 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f0      	bne.n	8002fb0 <HAL_RCC_OscConfig+0xe8>
 8002fce:	e000      	b.n	8002fd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d063      	beq.n	80030a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fde:	4b4a      	ldr	r3, [pc, #296]	; (8003108 <HAL_RCC_OscConfig+0x240>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00b      	beq.n	8003002 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fea:	4b47      	ldr	r3, [pc, #284]	; (8003108 <HAL_RCC_OscConfig+0x240>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d11c      	bne.n	8003030 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ff6:	4b44      	ldr	r3, [pc, #272]	; (8003108 <HAL_RCC_OscConfig+0x240>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d116      	bne.n	8003030 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003002:	4b41      	ldr	r3, [pc, #260]	; (8003108 <HAL_RCC_OscConfig+0x240>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d005      	beq.n	800301a <HAL_RCC_OscConfig+0x152>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d001      	beq.n	800301a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e1c7      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301a:	4b3b      	ldr	r3, [pc, #236]	; (8003108 <HAL_RCC_OscConfig+0x240>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4937      	ldr	r1, [pc, #220]	; (8003108 <HAL_RCC_OscConfig+0x240>)
 800302a:	4313      	orrs	r3, r2
 800302c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800302e:	e03a      	b.n	80030a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d020      	beq.n	800307a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003038:	4b34      	ldr	r3, [pc, #208]	; (800310c <HAL_RCC_OscConfig+0x244>)
 800303a:	2201      	movs	r2, #1
 800303c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303e:	f7ff f8a9 	bl	8002194 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003046:	f7ff f8a5 	bl	8002194 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e1a8      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003058:	4b2b      	ldr	r3, [pc, #172]	; (8003108 <HAL_RCC_OscConfig+0x240>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0f0      	beq.n	8003046 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003064:	4b28      	ldr	r3, [pc, #160]	; (8003108 <HAL_RCC_OscConfig+0x240>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	4925      	ldr	r1, [pc, #148]	; (8003108 <HAL_RCC_OscConfig+0x240>)
 8003074:	4313      	orrs	r3, r2
 8003076:	600b      	str	r3, [r1, #0]
 8003078:	e015      	b.n	80030a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800307a:	4b24      	ldr	r3, [pc, #144]	; (800310c <HAL_RCC_OscConfig+0x244>)
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003080:	f7ff f888 	bl	8002194 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003088:	f7ff f884 	bl	8002194 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e187      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309a:	4b1b      	ldr	r3, [pc, #108]	; (8003108 <HAL_RCC_OscConfig+0x240>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d036      	beq.n	8003120 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d016      	beq.n	80030e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ba:	4b15      	ldr	r3, [pc, #84]	; (8003110 <HAL_RCC_OscConfig+0x248>)
 80030bc:	2201      	movs	r2, #1
 80030be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c0:	f7ff f868 	bl	8002194 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030c8:	f7ff f864 	bl	8002194 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e167      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030da:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <HAL_RCC_OscConfig+0x240>)
 80030dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0x200>
 80030e6:	e01b      	b.n	8003120 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e8:	4b09      	ldr	r3, [pc, #36]	; (8003110 <HAL_RCC_OscConfig+0x248>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ee:	f7ff f851 	bl	8002194 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f4:	e00e      	b.n	8003114 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030f6:	f7ff f84d 	bl	8002194 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d907      	bls.n	8003114 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e150      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
 8003108:	40023800 	.word	0x40023800
 800310c:	42470000 	.word	0x42470000
 8003110:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003114:	4b88      	ldr	r3, [pc, #544]	; (8003338 <HAL_RCC_OscConfig+0x470>)
 8003116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1ea      	bne.n	80030f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 8097 	beq.w	800325c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800312e:	2300      	movs	r3, #0
 8003130:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003132:	4b81      	ldr	r3, [pc, #516]	; (8003338 <HAL_RCC_OscConfig+0x470>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10f      	bne.n	800315e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	4b7d      	ldr	r3, [pc, #500]	; (8003338 <HAL_RCC_OscConfig+0x470>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	4a7c      	ldr	r2, [pc, #496]	; (8003338 <HAL_RCC_OscConfig+0x470>)
 8003148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800314c:	6413      	str	r3, [r2, #64]	; 0x40
 800314e:	4b7a      	ldr	r3, [pc, #488]	; (8003338 <HAL_RCC_OscConfig+0x470>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003156:	60bb      	str	r3, [r7, #8]
 8003158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800315a:	2301      	movs	r3, #1
 800315c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315e:	4b77      	ldr	r3, [pc, #476]	; (800333c <HAL_RCC_OscConfig+0x474>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003166:	2b00      	cmp	r3, #0
 8003168:	d118      	bne.n	800319c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800316a:	4b74      	ldr	r3, [pc, #464]	; (800333c <HAL_RCC_OscConfig+0x474>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a73      	ldr	r2, [pc, #460]	; (800333c <HAL_RCC_OscConfig+0x474>)
 8003170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003176:	f7ff f80d 	bl	8002194 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800317e:	f7ff f809 	bl	8002194 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e10c      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003190:	4b6a      	ldr	r3, [pc, #424]	; (800333c <HAL_RCC_OscConfig+0x474>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d106      	bne.n	80031b2 <HAL_RCC_OscConfig+0x2ea>
 80031a4:	4b64      	ldr	r3, [pc, #400]	; (8003338 <HAL_RCC_OscConfig+0x470>)
 80031a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a8:	4a63      	ldr	r2, [pc, #396]	; (8003338 <HAL_RCC_OscConfig+0x470>)
 80031aa:	f043 0301 	orr.w	r3, r3, #1
 80031ae:	6713      	str	r3, [r2, #112]	; 0x70
 80031b0:	e01c      	b.n	80031ec <HAL_RCC_OscConfig+0x324>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b05      	cmp	r3, #5
 80031b8:	d10c      	bne.n	80031d4 <HAL_RCC_OscConfig+0x30c>
 80031ba:	4b5f      	ldr	r3, [pc, #380]	; (8003338 <HAL_RCC_OscConfig+0x470>)
 80031bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031be:	4a5e      	ldr	r2, [pc, #376]	; (8003338 <HAL_RCC_OscConfig+0x470>)
 80031c0:	f043 0304 	orr.w	r3, r3, #4
 80031c4:	6713      	str	r3, [r2, #112]	; 0x70
 80031c6:	4b5c      	ldr	r3, [pc, #368]	; (8003338 <HAL_RCC_OscConfig+0x470>)
 80031c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ca:	4a5b      	ldr	r2, [pc, #364]	; (8003338 <HAL_RCC_OscConfig+0x470>)
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	6713      	str	r3, [r2, #112]	; 0x70
 80031d2:	e00b      	b.n	80031ec <HAL_RCC_OscConfig+0x324>
 80031d4:	4b58      	ldr	r3, [pc, #352]	; (8003338 <HAL_RCC_OscConfig+0x470>)
 80031d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d8:	4a57      	ldr	r2, [pc, #348]	; (8003338 <HAL_RCC_OscConfig+0x470>)
 80031da:	f023 0301 	bic.w	r3, r3, #1
 80031de:	6713      	str	r3, [r2, #112]	; 0x70
 80031e0:	4b55      	ldr	r3, [pc, #340]	; (8003338 <HAL_RCC_OscConfig+0x470>)
 80031e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e4:	4a54      	ldr	r2, [pc, #336]	; (8003338 <HAL_RCC_OscConfig+0x470>)
 80031e6:	f023 0304 	bic.w	r3, r3, #4
 80031ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d015      	beq.n	8003220 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f4:	f7fe ffce 	bl	8002194 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fa:	e00a      	b.n	8003212 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031fc:	f7fe ffca 	bl	8002194 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	; 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e0cb      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003212:	4b49      	ldr	r3, [pc, #292]	; (8003338 <HAL_RCC_OscConfig+0x470>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0ee      	beq.n	80031fc <HAL_RCC_OscConfig+0x334>
 800321e:	e014      	b.n	800324a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003220:	f7fe ffb8 	bl	8002194 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003226:	e00a      	b.n	800323e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003228:	f7fe ffb4 	bl	8002194 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	f241 3288 	movw	r2, #5000	; 0x1388
 8003236:	4293      	cmp	r3, r2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e0b5      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800323e:	4b3e      	ldr	r3, [pc, #248]	; (8003338 <HAL_RCC_OscConfig+0x470>)
 8003240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1ee      	bne.n	8003228 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800324a:	7dfb      	ldrb	r3, [r7, #23]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d105      	bne.n	800325c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003250:	4b39      	ldr	r3, [pc, #228]	; (8003338 <HAL_RCC_OscConfig+0x470>)
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	4a38      	ldr	r2, [pc, #224]	; (8003338 <HAL_RCC_OscConfig+0x470>)
 8003256:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800325a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80a1 	beq.w	80033a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003266:	4b34      	ldr	r3, [pc, #208]	; (8003338 <HAL_RCC_OscConfig+0x470>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	2b08      	cmp	r3, #8
 8003270:	d05c      	beq.n	800332c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d141      	bne.n	80032fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800327a:	4b31      	ldr	r3, [pc, #196]	; (8003340 <HAL_RCC_OscConfig+0x478>)
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7fe ff88 	bl	8002194 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003288:	f7fe ff84 	bl	8002194 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e087      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329a:	4b27      	ldr	r3, [pc, #156]	; (8003338 <HAL_RCC_OscConfig+0x470>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69da      	ldr	r2, [r3, #28]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	019b      	lsls	r3, r3, #6
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032bc:	085b      	lsrs	r3, r3, #1
 80032be:	3b01      	subs	r3, #1
 80032c0:	041b      	lsls	r3, r3, #16
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	061b      	lsls	r3, r3, #24
 80032ca:	491b      	ldr	r1, [pc, #108]	; (8003338 <HAL_RCC_OscConfig+0x470>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d0:	4b1b      	ldr	r3, [pc, #108]	; (8003340 <HAL_RCC_OscConfig+0x478>)
 80032d2:	2201      	movs	r2, #1
 80032d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d6:	f7fe ff5d 	bl	8002194 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032de:	f7fe ff59 	bl	8002194 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e05c      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f0:	4b11      	ldr	r3, [pc, #68]	; (8003338 <HAL_RCC_OscConfig+0x470>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f0      	beq.n	80032de <HAL_RCC_OscConfig+0x416>
 80032fc:	e054      	b.n	80033a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fe:	4b10      	ldr	r3, [pc, #64]	; (8003340 <HAL_RCC_OscConfig+0x478>)
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003304:	f7fe ff46 	bl	8002194 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800330c:	f7fe ff42 	bl	8002194 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e045      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331e:	4b06      	ldr	r3, [pc, #24]	; (8003338 <HAL_RCC_OscConfig+0x470>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f0      	bne.n	800330c <HAL_RCC_OscConfig+0x444>
 800332a:	e03d      	b.n	80033a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d107      	bne.n	8003344 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e038      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
 8003338:	40023800 	.word	0x40023800
 800333c:	40007000 	.word	0x40007000
 8003340:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003344:	4b1b      	ldr	r3, [pc, #108]	; (80033b4 <HAL_RCC_OscConfig+0x4ec>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d028      	beq.n	80033a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800335c:	429a      	cmp	r2, r3
 800335e:	d121      	bne.n	80033a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800336a:	429a      	cmp	r2, r3
 800336c:	d11a      	bne.n	80033a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003374:	4013      	ands	r3, r2
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800337a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800337c:	4293      	cmp	r3, r2
 800337e:	d111      	bne.n	80033a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338a:	085b      	lsrs	r3, r3, #1
 800338c:	3b01      	subs	r3, #1
 800338e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003390:	429a      	cmp	r2, r3
 8003392:	d107      	bne.n	80033a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40023800 	.word	0x40023800

080033b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e0cc      	b.n	8003566 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033cc:	4b68      	ldr	r3, [pc, #416]	; (8003570 <HAL_RCC_ClockConfig+0x1b8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d90c      	bls.n	80033f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033da:	4b65      	ldr	r3, [pc, #404]	; (8003570 <HAL_RCC_ClockConfig+0x1b8>)
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e2:	4b63      	ldr	r3, [pc, #396]	; (8003570 <HAL_RCC_ClockConfig+0x1b8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d001      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e0b8      	b.n	8003566 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d020      	beq.n	8003442 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800340c:	4b59      	ldr	r3, [pc, #356]	; (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	4a58      	ldr	r2, [pc, #352]	; (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003416:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	2b00      	cmp	r3, #0
 8003422:	d005      	beq.n	8003430 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003424:	4b53      	ldr	r3, [pc, #332]	; (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	4a52      	ldr	r2, [pc, #328]	; (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800342e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003430:	4b50      	ldr	r3, [pc, #320]	; (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	494d      	ldr	r1, [pc, #308]	; (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	4313      	orrs	r3, r2
 8003440:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d044      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d107      	bne.n	8003466 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003456:	4b47      	ldr	r3, [pc, #284]	; (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d119      	bne.n	8003496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e07f      	b.n	8003566 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b02      	cmp	r3, #2
 800346c:	d003      	beq.n	8003476 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003472:	2b03      	cmp	r3, #3
 8003474:	d107      	bne.n	8003486 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003476:	4b3f      	ldr	r3, [pc, #252]	; (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d109      	bne.n	8003496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e06f      	b.n	8003566 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003486:	4b3b      	ldr	r3, [pc, #236]	; (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e067      	b.n	8003566 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003496:	4b37      	ldr	r3, [pc, #220]	; (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f023 0203 	bic.w	r2, r3, #3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	4934      	ldr	r1, [pc, #208]	; (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034a8:	f7fe fe74 	bl	8002194 <HAL_GetTick>
 80034ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ae:	e00a      	b.n	80034c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b0:	f7fe fe70 	bl	8002194 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80034be:	4293      	cmp	r3, r2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e04f      	b.n	8003566 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c6:	4b2b      	ldr	r3, [pc, #172]	; (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 020c 	and.w	r2, r3, #12
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d1eb      	bne.n	80034b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034d8:	4b25      	ldr	r3, [pc, #148]	; (8003570 <HAL_RCC_ClockConfig+0x1b8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d20c      	bcs.n	8003500 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e6:	4b22      	ldr	r3, [pc, #136]	; (8003570 <HAL_RCC_ClockConfig+0x1b8>)
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ee:	4b20      	ldr	r3, [pc, #128]	; (8003570 <HAL_RCC_ClockConfig+0x1b8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e032      	b.n	8003566 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d008      	beq.n	800351e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800350c:	4b19      	ldr	r3, [pc, #100]	; (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	4916      	ldr	r1, [pc, #88]	; (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	4313      	orrs	r3, r2
 800351c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d009      	beq.n	800353e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800352a:	4b12      	ldr	r3, [pc, #72]	; (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	490e      	ldr	r1, [pc, #56]	; (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	4313      	orrs	r3, r2
 800353c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800353e:	f000 f821 	bl	8003584 <HAL_RCC_GetSysClockFreq>
 8003542:	4602      	mov	r2, r0
 8003544:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	091b      	lsrs	r3, r3, #4
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	490a      	ldr	r1, [pc, #40]	; (8003578 <HAL_RCC_ClockConfig+0x1c0>)
 8003550:	5ccb      	ldrb	r3, [r1, r3]
 8003552:	fa22 f303 	lsr.w	r3, r2, r3
 8003556:	4a09      	ldr	r2, [pc, #36]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 8003558:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800355a:	4b09      	ldr	r3, [pc, #36]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f7fe fdd4 	bl	800210c <HAL_InitTick>

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40023c00 	.word	0x40023c00
 8003574:	40023800 	.word	0x40023800
 8003578:	0800598c 	.word	0x0800598c
 800357c:	20000000 	.word	0x20000000
 8003580:	20000004 	.word	0x20000004

08003584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003588:	b094      	sub	sp, #80	; 0x50
 800358a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	647b      	str	r3, [r7, #68]	; 0x44
 8003590:	2300      	movs	r3, #0
 8003592:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003594:	2300      	movs	r3, #0
 8003596:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800359c:	4b79      	ldr	r3, [pc, #484]	; (8003784 <HAL_RCC_GetSysClockFreq+0x200>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 030c 	and.w	r3, r3, #12
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d00d      	beq.n	80035c4 <HAL_RCC_GetSysClockFreq+0x40>
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	f200 80e1 	bhi.w	8003770 <HAL_RCC_GetSysClockFreq+0x1ec>
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <HAL_RCC_GetSysClockFreq+0x34>
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d003      	beq.n	80035be <HAL_RCC_GetSysClockFreq+0x3a>
 80035b6:	e0db      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035b8:	4b73      	ldr	r3, [pc, #460]	; (8003788 <HAL_RCC_GetSysClockFreq+0x204>)
 80035ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80035bc:	e0db      	b.n	8003776 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035be:	4b73      	ldr	r3, [pc, #460]	; (800378c <HAL_RCC_GetSysClockFreq+0x208>)
 80035c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035c2:	e0d8      	b.n	8003776 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035c4:	4b6f      	ldr	r3, [pc, #444]	; (8003784 <HAL_RCC_GetSysClockFreq+0x200>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ce:	4b6d      	ldr	r3, [pc, #436]	; (8003784 <HAL_RCC_GetSysClockFreq+0x200>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d063      	beq.n	80036a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035da:	4b6a      	ldr	r3, [pc, #424]	; (8003784 <HAL_RCC_GetSysClockFreq+0x200>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	099b      	lsrs	r3, r3, #6
 80035e0:	2200      	movs	r2, #0
 80035e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80035e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ec:	633b      	str	r3, [r7, #48]	; 0x30
 80035ee:	2300      	movs	r3, #0
 80035f0:	637b      	str	r3, [r7, #52]	; 0x34
 80035f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035f6:	4622      	mov	r2, r4
 80035f8:	462b      	mov	r3, r5
 80035fa:	f04f 0000 	mov.w	r0, #0
 80035fe:	f04f 0100 	mov.w	r1, #0
 8003602:	0159      	lsls	r1, r3, #5
 8003604:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003608:	0150      	lsls	r0, r2, #5
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4621      	mov	r1, r4
 8003610:	1a51      	subs	r1, r2, r1
 8003612:	6139      	str	r1, [r7, #16]
 8003614:	4629      	mov	r1, r5
 8003616:	eb63 0301 	sbc.w	r3, r3, r1
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003628:	4659      	mov	r1, fp
 800362a:	018b      	lsls	r3, r1, #6
 800362c:	4651      	mov	r1, sl
 800362e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003632:	4651      	mov	r1, sl
 8003634:	018a      	lsls	r2, r1, #6
 8003636:	4651      	mov	r1, sl
 8003638:	ebb2 0801 	subs.w	r8, r2, r1
 800363c:	4659      	mov	r1, fp
 800363e:	eb63 0901 	sbc.w	r9, r3, r1
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	f04f 0300 	mov.w	r3, #0
 800364a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800364e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003652:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003656:	4690      	mov	r8, r2
 8003658:	4699      	mov	r9, r3
 800365a:	4623      	mov	r3, r4
 800365c:	eb18 0303 	adds.w	r3, r8, r3
 8003660:	60bb      	str	r3, [r7, #8]
 8003662:	462b      	mov	r3, r5
 8003664:	eb49 0303 	adc.w	r3, r9, r3
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	f04f 0200 	mov.w	r2, #0
 800366e:	f04f 0300 	mov.w	r3, #0
 8003672:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003676:	4629      	mov	r1, r5
 8003678:	024b      	lsls	r3, r1, #9
 800367a:	4621      	mov	r1, r4
 800367c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003680:	4621      	mov	r1, r4
 8003682:	024a      	lsls	r2, r1, #9
 8003684:	4610      	mov	r0, r2
 8003686:	4619      	mov	r1, r3
 8003688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800368a:	2200      	movs	r2, #0
 800368c:	62bb      	str	r3, [r7, #40]	; 0x28
 800368e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003690:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003694:	f7fc fdf4 	bl	8000280 <__aeabi_uldivmod>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	4613      	mov	r3, r2
 800369e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036a0:	e058      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a2:	4b38      	ldr	r3, [pc, #224]	; (8003784 <HAL_RCC_GetSysClockFreq+0x200>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	099b      	lsrs	r3, r3, #6
 80036a8:	2200      	movs	r2, #0
 80036aa:	4618      	mov	r0, r3
 80036ac:	4611      	mov	r1, r2
 80036ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036b2:	623b      	str	r3, [r7, #32]
 80036b4:	2300      	movs	r3, #0
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
 80036b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036bc:	4642      	mov	r2, r8
 80036be:	464b      	mov	r3, r9
 80036c0:	f04f 0000 	mov.w	r0, #0
 80036c4:	f04f 0100 	mov.w	r1, #0
 80036c8:	0159      	lsls	r1, r3, #5
 80036ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036ce:	0150      	lsls	r0, r2, #5
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4641      	mov	r1, r8
 80036d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80036da:	4649      	mov	r1, r9
 80036dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036f4:	ebb2 040a 	subs.w	r4, r2, sl
 80036f8:	eb63 050b 	sbc.w	r5, r3, fp
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	00eb      	lsls	r3, r5, #3
 8003706:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800370a:	00e2      	lsls	r2, r4, #3
 800370c:	4614      	mov	r4, r2
 800370e:	461d      	mov	r5, r3
 8003710:	4643      	mov	r3, r8
 8003712:	18e3      	adds	r3, r4, r3
 8003714:	603b      	str	r3, [r7, #0]
 8003716:	464b      	mov	r3, r9
 8003718:	eb45 0303 	adc.w	r3, r5, r3
 800371c:	607b      	str	r3, [r7, #4]
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	e9d7 4500 	ldrd	r4, r5, [r7]
 800372a:	4629      	mov	r1, r5
 800372c:	028b      	lsls	r3, r1, #10
 800372e:	4621      	mov	r1, r4
 8003730:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003734:	4621      	mov	r1, r4
 8003736:	028a      	lsls	r2, r1, #10
 8003738:	4610      	mov	r0, r2
 800373a:	4619      	mov	r1, r3
 800373c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800373e:	2200      	movs	r2, #0
 8003740:	61bb      	str	r3, [r7, #24]
 8003742:	61fa      	str	r2, [r7, #28]
 8003744:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003748:	f7fc fd9a 	bl	8000280 <__aeabi_uldivmod>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	4613      	mov	r3, r2
 8003752:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003754:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <HAL_RCC_GetSysClockFreq+0x200>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	0c1b      	lsrs	r3, r3, #16
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	3301      	adds	r3, #1
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003764:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003768:	fbb2 f3f3 	udiv	r3, r2, r3
 800376c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800376e:	e002      	b.n	8003776 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003770:	4b05      	ldr	r3, [pc, #20]	; (8003788 <HAL_RCC_GetSysClockFreq+0x204>)
 8003772:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003774:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003778:	4618      	mov	r0, r3
 800377a:	3750      	adds	r7, #80	; 0x50
 800377c:	46bd      	mov	sp, r7
 800377e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003782:	bf00      	nop
 8003784:	40023800 	.word	0x40023800
 8003788:	00f42400 	.word	0x00f42400
 800378c:	007a1200 	.word	0x007a1200

08003790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003794:	4b03      	ldr	r3, [pc, #12]	; (80037a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003796:	681b      	ldr	r3, [r3, #0]
}
 8003798:	4618      	mov	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	20000000 	.word	0x20000000

080037a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037ac:	f7ff fff0 	bl	8003790 <HAL_RCC_GetHCLKFreq>
 80037b0:	4602      	mov	r2, r0
 80037b2:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	0a9b      	lsrs	r3, r3, #10
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	4903      	ldr	r1, [pc, #12]	; (80037cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037be:	5ccb      	ldrb	r3, [r1, r3]
 80037c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40023800 	.word	0x40023800
 80037cc:	0800599c 	.word	0x0800599c

080037d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037d4:	f7ff ffdc 	bl	8003790 <HAL_RCC_GetHCLKFreq>
 80037d8:	4602      	mov	r2, r0
 80037da:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	0b5b      	lsrs	r3, r3, #13
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	4903      	ldr	r1, [pc, #12]	; (80037f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037e6:	5ccb      	ldrb	r3, [r1, r3]
 80037e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40023800 	.word	0x40023800
 80037f4:	0800599c 	.word	0x0800599c

080037f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e041      	b.n	800388e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fd faf8 	bl	8000e14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3304      	adds	r3, #4
 8003834:	4619      	mov	r1, r3
 8003836:	4610      	mov	r0, r2
 8003838:	f000 fbf0 	bl	800401c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b082      	sub	sp, #8
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e041      	b.n	800392c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d106      	bne.n	80038c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f839 	bl	8003934 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2202      	movs	r2, #2
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	3304      	adds	r3, #4
 80038d2:	4619      	mov	r1, r3
 80038d4:	4610      	mov	r0, r2
 80038d6:	f000 fba1 	bl	800401c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d109      	bne.n	800396c <HAL_TIM_PWM_Start+0x24>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b01      	cmp	r3, #1
 8003962:	bf14      	ite	ne
 8003964:	2301      	movne	r3, #1
 8003966:	2300      	moveq	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	e022      	b.n	80039b2 <HAL_TIM_PWM_Start+0x6a>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	2b04      	cmp	r3, #4
 8003970:	d109      	bne.n	8003986 <HAL_TIM_PWM_Start+0x3e>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b01      	cmp	r3, #1
 800397c:	bf14      	ite	ne
 800397e:	2301      	movne	r3, #1
 8003980:	2300      	moveq	r3, #0
 8003982:	b2db      	uxtb	r3, r3
 8003984:	e015      	b.n	80039b2 <HAL_TIM_PWM_Start+0x6a>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b08      	cmp	r3, #8
 800398a:	d109      	bne.n	80039a0 <HAL_TIM_PWM_Start+0x58>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b01      	cmp	r3, #1
 8003996:	bf14      	ite	ne
 8003998:	2301      	movne	r3, #1
 800399a:	2300      	moveq	r3, #0
 800399c:	b2db      	uxtb	r3, r3
 800399e:	e008      	b.n	80039b2 <HAL_TIM_PWM_Start+0x6a>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	bf14      	ite	ne
 80039ac:	2301      	movne	r3, #1
 80039ae:	2300      	moveq	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e068      	b.n	8003a8c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d104      	bne.n	80039ca <HAL_TIM_PWM_Start+0x82>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039c8:	e013      	b.n	80039f2 <HAL_TIM_PWM_Start+0xaa>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d104      	bne.n	80039da <HAL_TIM_PWM_Start+0x92>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039d8:	e00b      	b.n	80039f2 <HAL_TIM_PWM_Start+0xaa>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d104      	bne.n	80039ea <HAL_TIM_PWM_Start+0xa2>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039e8:	e003      	b.n	80039f2 <HAL_TIM_PWM_Start+0xaa>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2202      	movs	r2, #2
 80039ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2201      	movs	r2, #1
 80039f8:	6839      	ldr	r1, [r7, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 fdb4 	bl	8004568 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a23      	ldr	r2, [pc, #140]	; (8003a94 <HAL_TIM_PWM_Start+0x14c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d107      	bne.n	8003a1a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a1d      	ldr	r2, [pc, #116]	; (8003a94 <HAL_TIM_PWM_Start+0x14c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d018      	beq.n	8003a56 <HAL_TIM_PWM_Start+0x10e>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a2c:	d013      	beq.n	8003a56 <HAL_TIM_PWM_Start+0x10e>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a19      	ldr	r2, [pc, #100]	; (8003a98 <HAL_TIM_PWM_Start+0x150>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00e      	beq.n	8003a56 <HAL_TIM_PWM_Start+0x10e>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a17      	ldr	r2, [pc, #92]	; (8003a9c <HAL_TIM_PWM_Start+0x154>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d009      	beq.n	8003a56 <HAL_TIM_PWM_Start+0x10e>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a16      	ldr	r2, [pc, #88]	; (8003aa0 <HAL_TIM_PWM_Start+0x158>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d004      	beq.n	8003a56 <HAL_TIM_PWM_Start+0x10e>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a14      	ldr	r2, [pc, #80]	; (8003aa4 <HAL_TIM_PWM_Start+0x15c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d111      	bne.n	8003a7a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b06      	cmp	r3, #6
 8003a66:	d010      	beq.n	8003a8a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a78:	e007      	b.n	8003a8a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0201 	orr.w	r2, r2, #1
 8003a88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40010000 	.word	0x40010000
 8003a98:	40000400 	.word	0x40000400
 8003a9c:	40000800 	.word	0x40000800
 8003aa0:	40000c00 	.word	0x40000c00
 8003aa4:	40014000 	.word	0x40014000

08003aa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d122      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d11b      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 0202 	mvn.w	r2, #2
 8003ad4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 fa77 	bl	8003fde <HAL_TIM_IC_CaptureCallback>
 8003af0:	e005      	b.n	8003afe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 fa69 	bl	8003fca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 fa7a 	bl	8003ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d122      	bne.n	8003b58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d11b      	bne.n	8003b58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f06f 0204 	mvn.w	r2, #4
 8003b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fa4d 	bl	8003fde <HAL_TIM_IC_CaptureCallback>
 8003b44:	e005      	b.n	8003b52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fa3f 	bl	8003fca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 fa50 	bl	8003ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b08      	cmp	r3, #8
 8003b64:	d122      	bne.n	8003bac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f003 0308 	and.w	r3, r3, #8
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d11b      	bne.n	8003bac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f06f 0208 	mvn.w	r2, #8
 8003b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2204      	movs	r2, #4
 8003b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 fa23 	bl	8003fde <HAL_TIM_IC_CaptureCallback>
 8003b98:	e005      	b.n	8003ba6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fa15 	bl	8003fca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 fa26 	bl	8003ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f003 0310 	and.w	r3, r3, #16
 8003bb6:	2b10      	cmp	r3, #16
 8003bb8:	d122      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f003 0310 	and.w	r3, r3, #16
 8003bc4:	2b10      	cmp	r3, #16
 8003bc6:	d11b      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f06f 0210 	mvn.w	r2, #16
 8003bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2208      	movs	r2, #8
 8003bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f9f9 	bl	8003fde <HAL_TIM_IC_CaptureCallback>
 8003bec:	e005      	b.n	8003bfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f9eb 	bl	8003fca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f9fc 	bl	8003ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d10e      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d107      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f06f 0201 	mvn.w	r2, #1
 8003c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fc fcee 	bl	8000608 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c36:	2b80      	cmp	r3, #128	; 0x80
 8003c38:	d10e      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c44:	2b80      	cmp	r3, #128	; 0x80
 8003c46:	d107      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 fd78 	bl	8004748 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c62:	2b40      	cmp	r3, #64	; 0x40
 8003c64:	d10e      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c70:	2b40      	cmp	r3, #64	; 0x40
 8003c72:	d107      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f9c1 	bl	8004006 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	f003 0320 	and.w	r3, r3, #32
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	d10e      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	2b20      	cmp	r3, #32
 8003c9e:	d107      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f06f 0220 	mvn.w	r2, #32
 8003ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 fd42 	bl	8004734 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cb0:	bf00      	nop
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e0ae      	b.n	8003e34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b0c      	cmp	r3, #12
 8003ce2:	f200 809f 	bhi.w	8003e24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ce6:	a201      	add	r2, pc, #4	; (adr r2, 8003cec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cec:	08003d21 	.word	0x08003d21
 8003cf0:	08003e25 	.word	0x08003e25
 8003cf4:	08003e25 	.word	0x08003e25
 8003cf8:	08003e25 	.word	0x08003e25
 8003cfc:	08003d61 	.word	0x08003d61
 8003d00:	08003e25 	.word	0x08003e25
 8003d04:	08003e25 	.word	0x08003e25
 8003d08:	08003e25 	.word	0x08003e25
 8003d0c:	08003da3 	.word	0x08003da3
 8003d10:	08003e25 	.word	0x08003e25
 8003d14:	08003e25 	.word	0x08003e25
 8003d18:	08003e25 	.word	0x08003e25
 8003d1c:	08003de3 	.word	0x08003de3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68b9      	ldr	r1, [r7, #8]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 f9f8 	bl	800411c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699a      	ldr	r2, [r3, #24]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0208 	orr.w	r2, r2, #8
 8003d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0204 	bic.w	r2, r2, #4
 8003d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6999      	ldr	r1, [r3, #24]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	691a      	ldr	r2, [r3, #16]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	619a      	str	r2, [r3, #24]
      break;
 8003d5e:	e064      	b.n	8003e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68b9      	ldr	r1, [r7, #8]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fa3e 	bl	80041e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699a      	ldr	r2, [r3, #24]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699a      	ldr	r2, [r3, #24]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6999      	ldr	r1, [r3, #24]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	021a      	lsls	r2, r3, #8
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	619a      	str	r2, [r3, #24]
      break;
 8003da0:	e043      	b.n	8003e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68b9      	ldr	r1, [r7, #8]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fa89 	bl	80042c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69da      	ldr	r2, [r3, #28]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f042 0208 	orr.w	r2, r2, #8
 8003dbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0204 	bic.w	r2, r2, #4
 8003dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69d9      	ldr	r1, [r3, #28]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	691a      	ldr	r2, [r3, #16]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	61da      	str	r2, [r3, #28]
      break;
 8003de0:	e023      	b.n	8003e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68b9      	ldr	r1, [r7, #8]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 fad3 	bl	8004394 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	69da      	ldr	r2, [r3, #28]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69da      	ldr	r2, [r3, #28]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	69d9      	ldr	r1, [r3, #28]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	021a      	lsls	r2, r3, #8
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	61da      	str	r2, [r3, #28]
      break;
 8003e22:	e002      	b.n	8003e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	75fb      	strb	r3, [r7, #23]
      break;
 8003e28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d101      	bne.n	8003e58 <HAL_TIM_ConfigClockSource+0x1c>
 8003e54:	2302      	movs	r3, #2
 8003e56:	e0b4      	b.n	8003fc2 <HAL_TIM_ConfigClockSource+0x186>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e90:	d03e      	beq.n	8003f10 <HAL_TIM_ConfigClockSource+0xd4>
 8003e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e96:	f200 8087 	bhi.w	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e9e:	f000 8086 	beq.w	8003fae <HAL_TIM_ConfigClockSource+0x172>
 8003ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea6:	d87f      	bhi.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea8:	2b70      	cmp	r3, #112	; 0x70
 8003eaa:	d01a      	beq.n	8003ee2 <HAL_TIM_ConfigClockSource+0xa6>
 8003eac:	2b70      	cmp	r3, #112	; 0x70
 8003eae:	d87b      	bhi.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb0:	2b60      	cmp	r3, #96	; 0x60
 8003eb2:	d050      	beq.n	8003f56 <HAL_TIM_ConfigClockSource+0x11a>
 8003eb4:	2b60      	cmp	r3, #96	; 0x60
 8003eb6:	d877      	bhi.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb8:	2b50      	cmp	r3, #80	; 0x50
 8003eba:	d03c      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0xfa>
 8003ebc:	2b50      	cmp	r3, #80	; 0x50
 8003ebe:	d873      	bhi.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec0:	2b40      	cmp	r3, #64	; 0x40
 8003ec2:	d058      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x13a>
 8003ec4:	2b40      	cmp	r3, #64	; 0x40
 8003ec6:	d86f      	bhi.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec8:	2b30      	cmp	r3, #48	; 0x30
 8003eca:	d064      	beq.n	8003f96 <HAL_TIM_ConfigClockSource+0x15a>
 8003ecc:	2b30      	cmp	r3, #48	; 0x30
 8003ece:	d86b      	bhi.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed0:	2b20      	cmp	r3, #32
 8003ed2:	d060      	beq.n	8003f96 <HAL_TIM_ConfigClockSource+0x15a>
 8003ed4:	2b20      	cmp	r3, #32
 8003ed6:	d867      	bhi.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d05c      	beq.n	8003f96 <HAL_TIM_ConfigClockSource+0x15a>
 8003edc:	2b10      	cmp	r3, #16
 8003ede:	d05a      	beq.n	8003f96 <HAL_TIM_ConfigClockSource+0x15a>
 8003ee0:	e062      	b.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	6899      	ldr	r1, [r3, #8]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f000 fb19 	bl	8004528 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	609a      	str	r2, [r3, #8]
      break;
 8003f0e:	e04f      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6818      	ldr	r0, [r3, #0]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	6899      	ldr	r1, [r3, #8]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f000 fb02 	bl	8004528 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f32:	609a      	str	r2, [r3, #8]
      break;
 8003f34:	e03c      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	6859      	ldr	r1, [r3, #4]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	461a      	mov	r2, r3
 8003f44:	f000 fa76 	bl	8004434 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2150      	movs	r1, #80	; 0x50
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 facf 	bl	80044f2 <TIM_ITRx_SetConfig>
      break;
 8003f54:	e02c      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	6859      	ldr	r1, [r3, #4]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	461a      	mov	r2, r3
 8003f64:	f000 fa95 	bl	8004492 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2160      	movs	r1, #96	; 0x60
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fabf 	bl	80044f2 <TIM_ITRx_SetConfig>
      break;
 8003f74:	e01c      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6818      	ldr	r0, [r3, #0]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	6859      	ldr	r1, [r3, #4]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	461a      	mov	r2, r3
 8003f84:	f000 fa56 	bl	8004434 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2140      	movs	r1, #64	; 0x40
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 faaf 	bl	80044f2 <TIM_ITRx_SetConfig>
      break;
 8003f94:	e00c      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	f000 faa6 	bl	80044f2 <TIM_ITRx_SetConfig>
      break;
 8003fa6:	e003      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	73fb      	strb	r3, [r7, #15]
      break;
 8003fac:	e000      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800400e:	bf00      	nop
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
	...

0800401c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a34      	ldr	r2, [pc, #208]	; (8004100 <TIM_Base_SetConfig+0xe4>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d00f      	beq.n	8004054 <TIM_Base_SetConfig+0x38>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800403a:	d00b      	beq.n	8004054 <TIM_Base_SetConfig+0x38>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a31      	ldr	r2, [pc, #196]	; (8004104 <TIM_Base_SetConfig+0xe8>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d007      	beq.n	8004054 <TIM_Base_SetConfig+0x38>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a30      	ldr	r2, [pc, #192]	; (8004108 <TIM_Base_SetConfig+0xec>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d003      	beq.n	8004054 <TIM_Base_SetConfig+0x38>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a2f      	ldr	r2, [pc, #188]	; (800410c <TIM_Base_SetConfig+0xf0>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d108      	bne.n	8004066 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a25      	ldr	r2, [pc, #148]	; (8004100 <TIM_Base_SetConfig+0xe4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d01b      	beq.n	80040a6 <TIM_Base_SetConfig+0x8a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004074:	d017      	beq.n	80040a6 <TIM_Base_SetConfig+0x8a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a22      	ldr	r2, [pc, #136]	; (8004104 <TIM_Base_SetConfig+0xe8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d013      	beq.n	80040a6 <TIM_Base_SetConfig+0x8a>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a21      	ldr	r2, [pc, #132]	; (8004108 <TIM_Base_SetConfig+0xec>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00f      	beq.n	80040a6 <TIM_Base_SetConfig+0x8a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a20      	ldr	r2, [pc, #128]	; (800410c <TIM_Base_SetConfig+0xf0>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00b      	beq.n	80040a6 <TIM_Base_SetConfig+0x8a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a1f      	ldr	r2, [pc, #124]	; (8004110 <TIM_Base_SetConfig+0xf4>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d007      	beq.n	80040a6 <TIM_Base_SetConfig+0x8a>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a1e      	ldr	r2, [pc, #120]	; (8004114 <TIM_Base_SetConfig+0xf8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d003      	beq.n	80040a6 <TIM_Base_SetConfig+0x8a>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a1d      	ldr	r2, [pc, #116]	; (8004118 <TIM_Base_SetConfig+0xfc>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d108      	bne.n	80040b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a08      	ldr	r2, [pc, #32]	; (8004100 <TIM_Base_SetConfig+0xe4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d103      	bne.n	80040ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	615a      	str	r2, [r3, #20]
}
 80040f2:	bf00      	nop
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40010000 	.word	0x40010000
 8004104:	40000400 	.word	0x40000400
 8004108:	40000800 	.word	0x40000800
 800410c:	40000c00 	.word	0x40000c00
 8004110:	40014000 	.word	0x40014000
 8004114:	40014400 	.word	0x40014400
 8004118:	40014800 	.word	0x40014800

0800411c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	f023 0201 	bic.w	r2, r3, #1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 0303 	bic.w	r3, r3, #3
 8004152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	4313      	orrs	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f023 0302 	bic.w	r3, r3, #2
 8004164:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a1c      	ldr	r2, [pc, #112]	; (80041e4 <TIM_OC1_SetConfig+0xc8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d10c      	bne.n	8004192 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f023 0308 	bic.w	r3, r3, #8
 800417e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	4313      	orrs	r3, r2
 8004188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f023 0304 	bic.w	r3, r3, #4
 8004190:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a13      	ldr	r2, [pc, #76]	; (80041e4 <TIM_OC1_SetConfig+0xc8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d111      	bne.n	80041be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	621a      	str	r2, [r3, #32]
}
 80041d8:	bf00      	nop
 80041da:	371c      	adds	r7, #28
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	40010000 	.word	0x40010000

080041e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	f023 0210 	bic.w	r2, r3, #16
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800421e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	021b      	lsls	r3, r3, #8
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4313      	orrs	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f023 0320 	bic.w	r3, r3, #32
 8004232:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	4313      	orrs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a1e      	ldr	r2, [pc, #120]	; (80042bc <TIM_OC2_SetConfig+0xd4>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d10d      	bne.n	8004264 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800424e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	4313      	orrs	r3, r2
 800425a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004262:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a15      	ldr	r2, [pc, #84]	; (80042bc <TIM_OC2_SetConfig+0xd4>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d113      	bne.n	8004294 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004272:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800427a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	621a      	str	r2, [r3, #32]
}
 80042ae:	bf00      	nop
 80042b0:	371c      	adds	r7, #28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40010000 	.word	0x40010000

080042c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 0303 	bic.w	r3, r3, #3
 80042f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	4313      	orrs	r3, r2
 8004314:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a1d      	ldr	r2, [pc, #116]	; (8004390 <TIM_OC3_SetConfig+0xd0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d10d      	bne.n	800433a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004324:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	021b      	lsls	r3, r3, #8
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	4313      	orrs	r3, r2
 8004330:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004338:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a14      	ldr	r2, [pc, #80]	; (8004390 <TIM_OC3_SetConfig+0xd0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d113      	bne.n	800436a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	4313      	orrs	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	621a      	str	r2, [r3, #32]
}
 8004384:	bf00      	nop
 8004386:	371c      	adds	r7, #28
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	40010000 	.word	0x40010000

08004394 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	021b      	lsls	r3, r3, #8
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	031b      	lsls	r3, r3, #12
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a10      	ldr	r2, [pc, #64]	; (8004430 <TIM_OC4_SetConfig+0x9c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d109      	bne.n	8004408 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	019b      	lsls	r3, r3, #6
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	4313      	orrs	r3, r2
 8004406:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	621a      	str	r2, [r3, #32]
}
 8004422:	bf00      	nop
 8004424:	371c      	adds	r7, #28
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40010000 	.word	0x40010000

08004434 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	f023 0201 	bic.w	r2, r3, #1
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800445e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f023 030a 	bic.w	r3, r3, #10
 8004470:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4313      	orrs	r3, r2
 8004478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	621a      	str	r2, [r3, #32]
}
 8004486:	bf00      	nop
 8004488:	371c      	adds	r7, #28
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004492:	b480      	push	{r7}
 8004494:	b087      	sub	sp, #28
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	f023 0210 	bic.w	r2, r3, #16
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	031b      	lsls	r3, r3, #12
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	621a      	str	r2, [r3, #32]
}
 80044e6:	bf00      	nop
 80044e8:	371c      	adds	r7, #28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b085      	sub	sp, #20
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004508:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4313      	orrs	r3, r2
 8004510:	f043 0307 	orr.w	r3, r3, #7
 8004514:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	609a      	str	r2, [r3, #8]
}
 800451c:	bf00      	nop
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
 8004534:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004542:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	021a      	lsls	r2, r3, #8
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	431a      	orrs	r2, r3
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	4313      	orrs	r3, r2
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	4313      	orrs	r3, r2
 8004554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	609a      	str	r2, [r3, #8]
}
 800455c:	bf00      	nop
 800455e:	371c      	adds	r7, #28
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004568:	b480      	push	{r7}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f003 031f 	and.w	r3, r3, #31
 800457a:	2201      	movs	r2, #1
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a1a      	ldr	r2, [r3, #32]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	43db      	mvns	r3, r3
 800458a:	401a      	ands	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a1a      	ldr	r2, [r3, #32]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f003 031f 	and.w	r3, r3, #31
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	fa01 f303 	lsl.w	r3, r1, r3
 80045a0:	431a      	orrs	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	621a      	str	r2, [r3, #32]
}
 80045a6:	bf00      	nop
 80045a8:	371c      	adds	r7, #28
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
	...

080045b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d101      	bne.n	80045cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045c8:	2302      	movs	r3, #2
 80045ca:	e050      	b.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a1c      	ldr	r2, [pc, #112]	; (800467c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d018      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004618:	d013      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a18      	ldr	r2, [pc, #96]	; (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d00e      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a16      	ldr	r2, [pc, #88]	; (8004684 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d009      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a15      	ldr	r2, [pc, #84]	; (8004688 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d004      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a13      	ldr	r2, [pc, #76]	; (800468c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d10c      	bne.n	800465c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004648:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	4313      	orrs	r3, r2
 8004652:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40010000 	.word	0x40010000
 8004680:	40000400 	.word	0x40000400
 8004684:	40000800 	.word	0x40000800
 8004688:	40000c00 	.word	0x40000c00
 800468c:	40014000 	.word	0x40014000

08004690 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d101      	bne.n	80046ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80046a8:	2302      	movs	r3, #2
 80046aa:	e03d      	b.n	8004728 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	4313      	orrs	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	4313      	orrs	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	4313      	orrs	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e03f      	b.n	80047ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d106      	bne.n	8004788 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fc fbfc 	bl	8000f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2224      	movs	r2, #36	; 0x24
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68da      	ldr	r2, [r3, #12]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800479e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f929 	bl	80049f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695a      	ldr	r2, [r3, #20]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68da      	ldr	r2, [r3, #12]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2220      	movs	r2, #32
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b08a      	sub	sp, #40	; 0x28
 80047fa:	af02      	add	r7, sp, #8
 80047fc:	60f8      	str	r0, [r7, #12]
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	603b      	str	r3, [r7, #0]
 8004802:	4613      	mov	r3, r2
 8004804:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004806:	2300      	movs	r3, #0
 8004808:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b20      	cmp	r3, #32
 8004814:	d17c      	bne.n	8004910 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <HAL_UART_Transmit+0x2c>
 800481c:	88fb      	ldrh	r3, [r7, #6]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e075      	b.n	8004912 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800482c:	2b01      	cmp	r3, #1
 800482e:	d101      	bne.n	8004834 <HAL_UART_Transmit+0x3e>
 8004830:	2302      	movs	r3, #2
 8004832:	e06e      	b.n	8004912 <HAL_UART_Transmit+0x11c>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2221      	movs	r2, #33	; 0x21
 8004846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800484a:	f7fd fca3 	bl	8002194 <HAL_GetTick>
 800484e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	88fa      	ldrh	r2, [r7, #6]
 8004854:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	88fa      	ldrh	r2, [r7, #6]
 800485a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004864:	d108      	bne.n	8004878 <HAL_UART_Transmit+0x82>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d104      	bne.n	8004878 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800486e:	2300      	movs	r3, #0
 8004870:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	61bb      	str	r3, [r7, #24]
 8004876:	e003      	b.n	8004880 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800487c:	2300      	movs	r3, #0
 800487e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004888:	e02a      	b.n	80048e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2200      	movs	r2, #0
 8004892:	2180      	movs	r1, #128	; 0x80
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 f840 	bl	800491a <UART_WaitOnFlagUntilTimeout>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e036      	b.n	8004912 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10b      	bne.n	80048c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	461a      	mov	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	3302      	adds	r3, #2
 80048be:	61bb      	str	r3, [r7, #24]
 80048c0:	e007      	b.n	80048d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	781a      	ldrb	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	3301      	adds	r3, #1
 80048d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1cf      	bne.n	800488a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2200      	movs	r2, #0
 80048f2:	2140      	movs	r1, #64	; 0x40
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 f810 	bl	800491a <UART_WaitOnFlagUntilTimeout>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e006      	b.n	8004912 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800490c:	2300      	movs	r3, #0
 800490e:	e000      	b.n	8004912 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004910:	2302      	movs	r3, #2
  }
}
 8004912:	4618      	mov	r0, r3
 8004914:	3720      	adds	r7, #32
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b090      	sub	sp, #64	; 0x40
 800491e:	af00      	add	r7, sp, #0
 8004920:	60f8      	str	r0, [r7, #12]
 8004922:	60b9      	str	r1, [r7, #8]
 8004924:	603b      	str	r3, [r7, #0]
 8004926:	4613      	mov	r3, r2
 8004928:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800492a:	e050      	b.n	80049ce <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800492c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800492e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004932:	d04c      	beq.n	80049ce <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004936:	2b00      	cmp	r3, #0
 8004938:	d007      	beq.n	800494a <UART_WaitOnFlagUntilTimeout+0x30>
 800493a:	f7fd fc2b 	bl	8002194 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004946:	429a      	cmp	r2, r3
 8004948:	d241      	bcs.n	80049ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	330c      	adds	r3, #12
 8004950:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004954:	e853 3f00 	ldrex	r3, [r3]
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	330c      	adds	r3, #12
 8004968:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800496a:	637a      	str	r2, [r7, #52]	; 0x34
 800496c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004970:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004972:	e841 2300 	strex	r3, r2, [r1]
 8004976:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1e5      	bne.n	800494a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3314      	adds	r3, #20
 8004984:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	613b      	str	r3, [r7, #16]
   return(result);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f023 0301 	bic.w	r3, r3, #1
 8004994:	63bb      	str	r3, [r7, #56]	; 0x38
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3314      	adds	r3, #20
 800499c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800499e:	623a      	str	r2, [r7, #32]
 80049a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a2:	69f9      	ldr	r1, [r7, #28]
 80049a4:	6a3a      	ldr	r2, [r7, #32]
 80049a6:	e841 2300 	strex	r3, r2, [r1]
 80049aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1e5      	bne.n	800497e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2220      	movs	r2, #32
 80049be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e00f      	b.n	80049ee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	4013      	ands	r3, r2
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	429a      	cmp	r2, r3
 80049dc:	bf0c      	ite	eq
 80049de:	2301      	moveq	r3, #1
 80049e0:	2300      	movne	r3, #0
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	461a      	mov	r2, r3
 80049e6:	79fb      	ldrb	r3, [r7, #7]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d09f      	beq.n	800492c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3740      	adds	r7, #64	; 0x40
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
	...

080049f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049fc:	b0c0      	sub	sp, #256	; 0x100
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a14:	68d9      	ldr	r1, [r3, #12]
 8004a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	ea40 0301 	orr.w	r3, r0, r1
 8004a20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a50:	f021 010c 	bic.w	r1, r1, #12
 8004a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a5e:	430b      	orrs	r3, r1
 8004a60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a72:	6999      	ldr	r1, [r3, #24]
 8004a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	ea40 0301 	orr.w	r3, r0, r1
 8004a7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	4b8f      	ldr	r3, [pc, #572]	; (8004cc4 <UART_SetConfig+0x2cc>)
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d005      	beq.n	8004a98 <UART_SetConfig+0xa0>
 8004a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	4b8d      	ldr	r3, [pc, #564]	; (8004cc8 <UART_SetConfig+0x2d0>)
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d104      	bne.n	8004aa2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a98:	f7fe fe9a 	bl	80037d0 <HAL_RCC_GetPCLK2Freq>
 8004a9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004aa0:	e003      	b.n	8004aaa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004aa2:	f7fe fe81 	bl	80037a8 <HAL_RCC_GetPCLK1Freq>
 8004aa6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ab4:	f040 810c 	bne.w	8004cd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004abc:	2200      	movs	r2, #0
 8004abe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ac2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ac6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004aca:	4622      	mov	r2, r4
 8004acc:	462b      	mov	r3, r5
 8004ace:	1891      	adds	r1, r2, r2
 8004ad0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ad2:	415b      	adcs	r3, r3
 8004ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ad6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ada:	4621      	mov	r1, r4
 8004adc:	eb12 0801 	adds.w	r8, r2, r1
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	eb43 0901 	adc.w	r9, r3, r1
 8004ae6:	f04f 0200 	mov.w	r2, #0
 8004aea:	f04f 0300 	mov.w	r3, #0
 8004aee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004af2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004af6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004afa:	4690      	mov	r8, r2
 8004afc:	4699      	mov	r9, r3
 8004afe:	4623      	mov	r3, r4
 8004b00:	eb18 0303 	adds.w	r3, r8, r3
 8004b04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b08:	462b      	mov	r3, r5
 8004b0a:	eb49 0303 	adc.w	r3, r9, r3
 8004b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b26:	460b      	mov	r3, r1
 8004b28:	18db      	adds	r3, r3, r3
 8004b2a:	653b      	str	r3, [r7, #80]	; 0x50
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	eb42 0303 	adc.w	r3, r2, r3
 8004b32:	657b      	str	r3, [r7, #84]	; 0x54
 8004b34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b3c:	f7fb fba0 	bl	8000280 <__aeabi_uldivmod>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4b61      	ldr	r3, [pc, #388]	; (8004ccc <UART_SetConfig+0x2d4>)
 8004b46:	fba3 2302 	umull	r2, r3, r3, r2
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	011c      	lsls	r4, r3, #4
 8004b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b52:	2200      	movs	r2, #0
 8004b54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b60:	4642      	mov	r2, r8
 8004b62:	464b      	mov	r3, r9
 8004b64:	1891      	adds	r1, r2, r2
 8004b66:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b68:	415b      	adcs	r3, r3
 8004b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b70:	4641      	mov	r1, r8
 8004b72:	eb12 0a01 	adds.w	sl, r2, r1
 8004b76:	4649      	mov	r1, r9
 8004b78:	eb43 0b01 	adc.w	fp, r3, r1
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	f04f 0300 	mov.w	r3, #0
 8004b84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b90:	4692      	mov	sl, r2
 8004b92:	469b      	mov	fp, r3
 8004b94:	4643      	mov	r3, r8
 8004b96:	eb1a 0303 	adds.w	r3, sl, r3
 8004b9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b9e:	464b      	mov	r3, r9
 8004ba0:	eb4b 0303 	adc.w	r3, fp, r3
 8004ba4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bb4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004bb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	18db      	adds	r3, r3, r3
 8004bc0:	643b      	str	r3, [r7, #64]	; 0x40
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	eb42 0303 	adc.w	r3, r2, r3
 8004bc8:	647b      	str	r3, [r7, #68]	; 0x44
 8004bca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004bce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004bd2:	f7fb fb55 	bl	8000280 <__aeabi_uldivmod>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4611      	mov	r1, r2
 8004bdc:	4b3b      	ldr	r3, [pc, #236]	; (8004ccc <UART_SetConfig+0x2d4>)
 8004bde:	fba3 2301 	umull	r2, r3, r3, r1
 8004be2:	095b      	lsrs	r3, r3, #5
 8004be4:	2264      	movs	r2, #100	; 0x64
 8004be6:	fb02 f303 	mul.w	r3, r2, r3
 8004bea:	1acb      	subs	r3, r1, r3
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004bf2:	4b36      	ldr	r3, [pc, #216]	; (8004ccc <UART_SetConfig+0x2d4>)
 8004bf4:	fba3 2302 	umull	r2, r3, r3, r2
 8004bf8:	095b      	lsrs	r3, r3, #5
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c00:	441c      	add	r4, r3
 8004c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c06:	2200      	movs	r2, #0
 8004c08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c14:	4642      	mov	r2, r8
 8004c16:	464b      	mov	r3, r9
 8004c18:	1891      	adds	r1, r2, r2
 8004c1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c1c:	415b      	adcs	r3, r3
 8004c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c24:	4641      	mov	r1, r8
 8004c26:	1851      	adds	r1, r2, r1
 8004c28:	6339      	str	r1, [r7, #48]	; 0x30
 8004c2a:	4649      	mov	r1, r9
 8004c2c:	414b      	adcs	r3, r1
 8004c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c30:	f04f 0200 	mov.w	r2, #0
 8004c34:	f04f 0300 	mov.w	r3, #0
 8004c38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c3c:	4659      	mov	r1, fp
 8004c3e:	00cb      	lsls	r3, r1, #3
 8004c40:	4651      	mov	r1, sl
 8004c42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c46:	4651      	mov	r1, sl
 8004c48:	00ca      	lsls	r2, r1, #3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4603      	mov	r3, r0
 8004c50:	4642      	mov	r2, r8
 8004c52:	189b      	adds	r3, r3, r2
 8004c54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c58:	464b      	mov	r3, r9
 8004c5a:	460a      	mov	r2, r1
 8004c5c:	eb42 0303 	adc.w	r3, r2, r3
 8004c60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c78:	460b      	mov	r3, r1
 8004c7a:	18db      	adds	r3, r3, r3
 8004c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c7e:	4613      	mov	r3, r2
 8004c80:	eb42 0303 	adc.w	r3, r2, r3
 8004c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c8e:	f7fb faf7 	bl	8000280 <__aeabi_uldivmod>
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	4b0d      	ldr	r3, [pc, #52]	; (8004ccc <UART_SetConfig+0x2d4>)
 8004c98:	fba3 1302 	umull	r1, r3, r3, r2
 8004c9c:	095b      	lsrs	r3, r3, #5
 8004c9e:	2164      	movs	r1, #100	; 0x64
 8004ca0:	fb01 f303 	mul.w	r3, r1, r3
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	3332      	adds	r3, #50	; 0x32
 8004caa:	4a08      	ldr	r2, [pc, #32]	; (8004ccc <UART_SetConfig+0x2d4>)
 8004cac:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb0:	095b      	lsrs	r3, r3, #5
 8004cb2:	f003 0207 	and.w	r2, r3, #7
 8004cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4422      	add	r2, r4
 8004cbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cc0:	e105      	b.n	8004ece <UART_SetConfig+0x4d6>
 8004cc2:	bf00      	nop
 8004cc4:	40011000 	.word	0x40011000
 8004cc8:	40011400 	.word	0x40011400
 8004ccc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004cda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004cde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004ce2:	4642      	mov	r2, r8
 8004ce4:	464b      	mov	r3, r9
 8004ce6:	1891      	adds	r1, r2, r2
 8004ce8:	6239      	str	r1, [r7, #32]
 8004cea:	415b      	adcs	r3, r3
 8004cec:	627b      	str	r3, [r7, #36]	; 0x24
 8004cee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cf2:	4641      	mov	r1, r8
 8004cf4:	1854      	adds	r4, r2, r1
 8004cf6:	4649      	mov	r1, r9
 8004cf8:	eb43 0501 	adc.w	r5, r3, r1
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 0300 	mov.w	r3, #0
 8004d04:	00eb      	lsls	r3, r5, #3
 8004d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d0a:	00e2      	lsls	r2, r4, #3
 8004d0c:	4614      	mov	r4, r2
 8004d0e:	461d      	mov	r5, r3
 8004d10:	4643      	mov	r3, r8
 8004d12:	18e3      	adds	r3, r4, r3
 8004d14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d18:	464b      	mov	r3, r9
 8004d1a:	eb45 0303 	adc.w	r3, r5, r3
 8004d1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	f04f 0300 	mov.w	r3, #0
 8004d3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d3e:	4629      	mov	r1, r5
 8004d40:	008b      	lsls	r3, r1, #2
 8004d42:	4621      	mov	r1, r4
 8004d44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d48:	4621      	mov	r1, r4
 8004d4a:	008a      	lsls	r2, r1, #2
 8004d4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d50:	f7fb fa96 	bl	8000280 <__aeabi_uldivmod>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4b60      	ldr	r3, [pc, #384]	; (8004edc <UART_SetConfig+0x4e4>)
 8004d5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d5e:	095b      	lsrs	r3, r3, #5
 8004d60:	011c      	lsls	r4, r3, #4
 8004d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d66:	2200      	movs	r2, #0
 8004d68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d74:	4642      	mov	r2, r8
 8004d76:	464b      	mov	r3, r9
 8004d78:	1891      	adds	r1, r2, r2
 8004d7a:	61b9      	str	r1, [r7, #24]
 8004d7c:	415b      	adcs	r3, r3
 8004d7e:	61fb      	str	r3, [r7, #28]
 8004d80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d84:	4641      	mov	r1, r8
 8004d86:	1851      	adds	r1, r2, r1
 8004d88:	6139      	str	r1, [r7, #16]
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	414b      	adcs	r3, r1
 8004d8e:	617b      	str	r3, [r7, #20]
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	f04f 0300 	mov.w	r3, #0
 8004d98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d9c:	4659      	mov	r1, fp
 8004d9e:	00cb      	lsls	r3, r1, #3
 8004da0:	4651      	mov	r1, sl
 8004da2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004da6:	4651      	mov	r1, sl
 8004da8:	00ca      	lsls	r2, r1, #3
 8004daa:	4610      	mov	r0, r2
 8004dac:	4619      	mov	r1, r3
 8004dae:	4603      	mov	r3, r0
 8004db0:	4642      	mov	r2, r8
 8004db2:	189b      	adds	r3, r3, r2
 8004db4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004db8:	464b      	mov	r3, r9
 8004dba:	460a      	mov	r2, r1
 8004dbc:	eb42 0303 	adc.w	r3, r2, r3
 8004dc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	67bb      	str	r3, [r7, #120]	; 0x78
 8004dce:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	f04f 0300 	mov.w	r3, #0
 8004dd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ddc:	4649      	mov	r1, r9
 8004dde:	008b      	lsls	r3, r1, #2
 8004de0:	4641      	mov	r1, r8
 8004de2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004de6:	4641      	mov	r1, r8
 8004de8:	008a      	lsls	r2, r1, #2
 8004dea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004dee:	f7fb fa47 	bl	8000280 <__aeabi_uldivmod>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	4b39      	ldr	r3, [pc, #228]	; (8004edc <UART_SetConfig+0x4e4>)
 8004df8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dfc:	095b      	lsrs	r3, r3, #5
 8004dfe:	2164      	movs	r1, #100	; 0x64
 8004e00:	fb01 f303 	mul.w	r3, r1, r3
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	011b      	lsls	r3, r3, #4
 8004e08:	3332      	adds	r3, #50	; 0x32
 8004e0a:	4a34      	ldr	r2, [pc, #208]	; (8004edc <UART_SetConfig+0x4e4>)
 8004e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e10:	095b      	lsrs	r3, r3, #5
 8004e12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e16:	441c      	add	r4, r3
 8004e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	673b      	str	r3, [r7, #112]	; 0x70
 8004e20:	677a      	str	r2, [r7, #116]	; 0x74
 8004e22:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e26:	4642      	mov	r2, r8
 8004e28:	464b      	mov	r3, r9
 8004e2a:	1891      	adds	r1, r2, r2
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	415b      	adcs	r3, r3
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e36:	4641      	mov	r1, r8
 8004e38:	1851      	adds	r1, r2, r1
 8004e3a:	6039      	str	r1, [r7, #0]
 8004e3c:	4649      	mov	r1, r9
 8004e3e:	414b      	adcs	r3, r1
 8004e40:	607b      	str	r3, [r7, #4]
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	f04f 0300 	mov.w	r3, #0
 8004e4a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e4e:	4659      	mov	r1, fp
 8004e50:	00cb      	lsls	r3, r1, #3
 8004e52:	4651      	mov	r1, sl
 8004e54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e58:	4651      	mov	r1, sl
 8004e5a:	00ca      	lsls	r2, r1, #3
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	4619      	mov	r1, r3
 8004e60:	4603      	mov	r3, r0
 8004e62:	4642      	mov	r2, r8
 8004e64:	189b      	adds	r3, r3, r2
 8004e66:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e68:	464b      	mov	r3, r9
 8004e6a:	460a      	mov	r2, r1
 8004e6c:	eb42 0303 	adc.w	r3, r2, r3
 8004e70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	663b      	str	r3, [r7, #96]	; 0x60
 8004e7c:	667a      	str	r2, [r7, #100]	; 0x64
 8004e7e:	f04f 0200 	mov.w	r2, #0
 8004e82:	f04f 0300 	mov.w	r3, #0
 8004e86:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e8a:	4649      	mov	r1, r9
 8004e8c:	008b      	lsls	r3, r1, #2
 8004e8e:	4641      	mov	r1, r8
 8004e90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e94:	4641      	mov	r1, r8
 8004e96:	008a      	lsls	r2, r1, #2
 8004e98:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e9c:	f7fb f9f0 	bl	8000280 <__aeabi_uldivmod>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4b0d      	ldr	r3, [pc, #52]	; (8004edc <UART_SetConfig+0x4e4>)
 8004ea6:	fba3 1302 	umull	r1, r3, r3, r2
 8004eaa:	095b      	lsrs	r3, r3, #5
 8004eac:	2164      	movs	r1, #100	; 0x64
 8004eae:	fb01 f303 	mul.w	r3, r1, r3
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	011b      	lsls	r3, r3, #4
 8004eb6:	3332      	adds	r3, #50	; 0x32
 8004eb8:	4a08      	ldr	r2, [pc, #32]	; (8004edc <UART_SetConfig+0x4e4>)
 8004eba:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebe:	095b      	lsrs	r3, r3, #5
 8004ec0:	f003 020f 	and.w	r2, r3, #15
 8004ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4422      	add	r2, r4
 8004ecc:	609a      	str	r2, [r3, #8]
}
 8004ece:	bf00      	nop
 8004ed0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eda:	bf00      	nop
 8004edc:	51eb851f 	.word	0x51eb851f

08004ee0 <__errno>:
 8004ee0:	4b01      	ldr	r3, [pc, #4]	; (8004ee8 <__errno+0x8>)
 8004ee2:	6818      	ldr	r0, [r3, #0]
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	2000000c 	.word	0x2000000c

08004eec <__libc_init_array>:
 8004eec:	b570      	push	{r4, r5, r6, lr}
 8004eee:	4d0d      	ldr	r5, [pc, #52]	; (8004f24 <__libc_init_array+0x38>)
 8004ef0:	4c0d      	ldr	r4, [pc, #52]	; (8004f28 <__libc_init_array+0x3c>)
 8004ef2:	1b64      	subs	r4, r4, r5
 8004ef4:	10a4      	asrs	r4, r4, #2
 8004ef6:	2600      	movs	r6, #0
 8004ef8:	42a6      	cmp	r6, r4
 8004efa:	d109      	bne.n	8004f10 <__libc_init_array+0x24>
 8004efc:	4d0b      	ldr	r5, [pc, #44]	; (8004f2c <__libc_init_array+0x40>)
 8004efe:	4c0c      	ldr	r4, [pc, #48]	; (8004f30 <__libc_init_array+0x44>)
 8004f00:	f000 fc8e 	bl	8005820 <_init>
 8004f04:	1b64      	subs	r4, r4, r5
 8004f06:	10a4      	asrs	r4, r4, #2
 8004f08:	2600      	movs	r6, #0
 8004f0a:	42a6      	cmp	r6, r4
 8004f0c:	d105      	bne.n	8004f1a <__libc_init_array+0x2e>
 8004f0e:	bd70      	pop	{r4, r5, r6, pc}
 8004f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f14:	4798      	blx	r3
 8004f16:	3601      	adds	r6, #1
 8004f18:	e7ee      	b.n	8004ef8 <__libc_init_array+0xc>
 8004f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f1e:	4798      	blx	r3
 8004f20:	3601      	adds	r6, #1
 8004f22:	e7f2      	b.n	8004f0a <__libc_init_array+0x1e>
 8004f24:	08005d1c 	.word	0x08005d1c
 8004f28:	08005d1c 	.word	0x08005d1c
 8004f2c:	08005d1c 	.word	0x08005d1c
 8004f30:	08005d20 	.word	0x08005d20

08004f34 <memset>:
 8004f34:	4402      	add	r2, r0
 8004f36:	4603      	mov	r3, r0
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d100      	bne.n	8004f3e <memset+0xa>
 8004f3c:	4770      	bx	lr
 8004f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f42:	e7f9      	b.n	8004f38 <memset+0x4>

08004f44 <siprintf>:
 8004f44:	b40e      	push	{r1, r2, r3}
 8004f46:	b500      	push	{lr}
 8004f48:	b09c      	sub	sp, #112	; 0x70
 8004f4a:	ab1d      	add	r3, sp, #116	; 0x74
 8004f4c:	9002      	str	r0, [sp, #8]
 8004f4e:	9006      	str	r0, [sp, #24]
 8004f50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f54:	4809      	ldr	r0, [pc, #36]	; (8004f7c <siprintf+0x38>)
 8004f56:	9107      	str	r1, [sp, #28]
 8004f58:	9104      	str	r1, [sp, #16]
 8004f5a:	4909      	ldr	r1, [pc, #36]	; (8004f80 <siprintf+0x3c>)
 8004f5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f60:	9105      	str	r1, [sp, #20]
 8004f62:	6800      	ldr	r0, [r0, #0]
 8004f64:	9301      	str	r3, [sp, #4]
 8004f66:	a902      	add	r1, sp, #8
 8004f68:	f000 f868 	bl	800503c <_svfiprintf_r>
 8004f6c:	9b02      	ldr	r3, [sp, #8]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	701a      	strb	r2, [r3, #0]
 8004f72:	b01c      	add	sp, #112	; 0x70
 8004f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f78:	b003      	add	sp, #12
 8004f7a:	4770      	bx	lr
 8004f7c:	2000000c 	.word	0x2000000c
 8004f80:	ffff0208 	.word	0xffff0208

08004f84 <__ssputs_r>:
 8004f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f88:	688e      	ldr	r6, [r1, #8]
 8004f8a:	429e      	cmp	r6, r3
 8004f8c:	4682      	mov	sl, r0
 8004f8e:	460c      	mov	r4, r1
 8004f90:	4690      	mov	r8, r2
 8004f92:	461f      	mov	r7, r3
 8004f94:	d838      	bhi.n	8005008 <__ssputs_r+0x84>
 8004f96:	898a      	ldrh	r2, [r1, #12]
 8004f98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f9c:	d032      	beq.n	8005004 <__ssputs_r+0x80>
 8004f9e:	6825      	ldr	r5, [r4, #0]
 8004fa0:	6909      	ldr	r1, [r1, #16]
 8004fa2:	eba5 0901 	sub.w	r9, r5, r1
 8004fa6:	6965      	ldr	r5, [r4, #20]
 8004fa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004fac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	444b      	add	r3, r9
 8004fb4:	106d      	asrs	r5, r5, #1
 8004fb6:	429d      	cmp	r5, r3
 8004fb8:	bf38      	it	cc
 8004fba:	461d      	movcc	r5, r3
 8004fbc:	0553      	lsls	r3, r2, #21
 8004fbe:	d531      	bpl.n	8005024 <__ssputs_r+0xa0>
 8004fc0:	4629      	mov	r1, r5
 8004fc2:	f000 fb63 	bl	800568c <_malloc_r>
 8004fc6:	4606      	mov	r6, r0
 8004fc8:	b950      	cbnz	r0, 8004fe0 <__ssputs_r+0x5c>
 8004fca:	230c      	movs	r3, #12
 8004fcc:	f8ca 3000 	str.w	r3, [sl]
 8004fd0:	89a3      	ldrh	r3, [r4, #12]
 8004fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fd6:	81a3      	strh	r3, [r4, #12]
 8004fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fe0:	6921      	ldr	r1, [r4, #16]
 8004fe2:	464a      	mov	r2, r9
 8004fe4:	f000 fabe 	bl	8005564 <memcpy>
 8004fe8:	89a3      	ldrh	r3, [r4, #12]
 8004fea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ff2:	81a3      	strh	r3, [r4, #12]
 8004ff4:	6126      	str	r6, [r4, #16]
 8004ff6:	6165      	str	r5, [r4, #20]
 8004ff8:	444e      	add	r6, r9
 8004ffa:	eba5 0509 	sub.w	r5, r5, r9
 8004ffe:	6026      	str	r6, [r4, #0]
 8005000:	60a5      	str	r5, [r4, #8]
 8005002:	463e      	mov	r6, r7
 8005004:	42be      	cmp	r6, r7
 8005006:	d900      	bls.n	800500a <__ssputs_r+0x86>
 8005008:	463e      	mov	r6, r7
 800500a:	6820      	ldr	r0, [r4, #0]
 800500c:	4632      	mov	r2, r6
 800500e:	4641      	mov	r1, r8
 8005010:	f000 fab6 	bl	8005580 <memmove>
 8005014:	68a3      	ldr	r3, [r4, #8]
 8005016:	1b9b      	subs	r3, r3, r6
 8005018:	60a3      	str	r3, [r4, #8]
 800501a:	6823      	ldr	r3, [r4, #0]
 800501c:	4433      	add	r3, r6
 800501e:	6023      	str	r3, [r4, #0]
 8005020:	2000      	movs	r0, #0
 8005022:	e7db      	b.n	8004fdc <__ssputs_r+0x58>
 8005024:	462a      	mov	r2, r5
 8005026:	f000 fba5 	bl	8005774 <_realloc_r>
 800502a:	4606      	mov	r6, r0
 800502c:	2800      	cmp	r0, #0
 800502e:	d1e1      	bne.n	8004ff4 <__ssputs_r+0x70>
 8005030:	6921      	ldr	r1, [r4, #16]
 8005032:	4650      	mov	r0, sl
 8005034:	f000 fabe 	bl	80055b4 <_free_r>
 8005038:	e7c7      	b.n	8004fca <__ssputs_r+0x46>
	...

0800503c <_svfiprintf_r>:
 800503c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005040:	4698      	mov	r8, r3
 8005042:	898b      	ldrh	r3, [r1, #12]
 8005044:	061b      	lsls	r3, r3, #24
 8005046:	b09d      	sub	sp, #116	; 0x74
 8005048:	4607      	mov	r7, r0
 800504a:	460d      	mov	r5, r1
 800504c:	4614      	mov	r4, r2
 800504e:	d50e      	bpl.n	800506e <_svfiprintf_r+0x32>
 8005050:	690b      	ldr	r3, [r1, #16]
 8005052:	b963      	cbnz	r3, 800506e <_svfiprintf_r+0x32>
 8005054:	2140      	movs	r1, #64	; 0x40
 8005056:	f000 fb19 	bl	800568c <_malloc_r>
 800505a:	6028      	str	r0, [r5, #0]
 800505c:	6128      	str	r0, [r5, #16]
 800505e:	b920      	cbnz	r0, 800506a <_svfiprintf_r+0x2e>
 8005060:	230c      	movs	r3, #12
 8005062:	603b      	str	r3, [r7, #0]
 8005064:	f04f 30ff 	mov.w	r0, #4294967295
 8005068:	e0d1      	b.n	800520e <_svfiprintf_r+0x1d2>
 800506a:	2340      	movs	r3, #64	; 0x40
 800506c:	616b      	str	r3, [r5, #20]
 800506e:	2300      	movs	r3, #0
 8005070:	9309      	str	r3, [sp, #36]	; 0x24
 8005072:	2320      	movs	r3, #32
 8005074:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005078:	f8cd 800c 	str.w	r8, [sp, #12]
 800507c:	2330      	movs	r3, #48	; 0x30
 800507e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005228 <_svfiprintf_r+0x1ec>
 8005082:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005086:	f04f 0901 	mov.w	r9, #1
 800508a:	4623      	mov	r3, r4
 800508c:	469a      	mov	sl, r3
 800508e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005092:	b10a      	cbz	r2, 8005098 <_svfiprintf_r+0x5c>
 8005094:	2a25      	cmp	r2, #37	; 0x25
 8005096:	d1f9      	bne.n	800508c <_svfiprintf_r+0x50>
 8005098:	ebba 0b04 	subs.w	fp, sl, r4
 800509c:	d00b      	beq.n	80050b6 <_svfiprintf_r+0x7a>
 800509e:	465b      	mov	r3, fp
 80050a0:	4622      	mov	r2, r4
 80050a2:	4629      	mov	r1, r5
 80050a4:	4638      	mov	r0, r7
 80050a6:	f7ff ff6d 	bl	8004f84 <__ssputs_r>
 80050aa:	3001      	adds	r0, #1
 80050ac:	f000 80aa 	beq.w	8005204 <_svfiprintf_r+0x1c8>
 80050b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050b2:	445a      	add	r2, fp
 80050b4:	9209      	str	r2, [sp, #36]	; 0x24
 80050b6:	f89a 3000 	ldrb.w	r3, [sl]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 80a2 	beq.w	8005204 <_svfiprintf_r+0x1c8>
 80050c0:	2300      	movs	r3, #0
 80050c2:	f04f 32ff 	mov.w	r2, #4294967295
 80050c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050ca:	f10a 0a01 	add.w	sl, sl, #1
 80050ce:	9304      	str	r3, [sp, #16]
 80050d0:	9307      	str	r3, [sp, #28]
 80050d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050d6:	931a      	str	r3, [sp, #104]	; 0x68
 80050d8:	4654      	mov	r4, sl
 80050da:	2205      	movs	r2, #5
 80050dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050e0:	4851      	ldr	r0, [pc, #324]	; (8005228 <_svfiprintf_r+0x1ec>)
 80050e2:	f7fb f87d 	bl	80001e0 <memchr>
 80050e6:	9a04      	ldr	r2, [sp, #16]
 80050e8:	b9d8      	cbnz	r0, 8005122 <_svfiprintf_r+0xe6>
 80050ea:	06d0      	lsls	r0, r2, #27
 80050ec:	bf44      	itt	mi
 80050ee:	2320      	movmi	r3, #32
 80050f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050f4:	0711      	lsls	r1, r2, #28
 80050f6:	bf44      	itt	mi
 80050f8:	232b      	movmi	r3, #43	; 0x2b
 80050fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005102:	2b2a      	cmp	r3, #42	; 0x2a
 8005104:	d015      	beq.n	8005132 <_svfiprintf_r+0xf6>
 8005106:	9a07      	ldr	r2, [sp, #28]
 8005108:	4654      	mov	r4, sl
 800510a:	2000      	movs	r0, #0
 800510c:	f04f 0c0a 	mov.w	ip, #10
 8005110:	4621      	mov	r1, r4
 8005112:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005116:	3b30      	subs	r3, #48	; 0x30
 8005118:	2b09      	cmp	r3, #9
 800511a:	d94e      	bls.n	80051ba <_svfiprintf_r+0x17e>
 800511c:	b1b0      	cbz	r0, 800514c <_svfiprintf_r+0x110>
 800511e:	9207      	str	r2, [sp, #28]
 8005120:	e014      	b.n	800514c <_svfiprintf_r+0x110>
 8005122:	eba0 0308 	sub.w	r3, r0, r8
 8005126:	fa09 f303 	lsl.w	r3, r9, r3
 800512a:	4313      	orrs	r3, r2
 800512c:	9304      	str	r3, [sp, #16]
 800512e:	46a2      	mov	sl, r4
 8005130:	e7d2      	b.n	80050d8 <_svfiprintf_r+0x9c>
 8005132:	9b03      	ldr	r3, [sp, #12]
 8005134:	1d19      	adds	r1, r3, #4
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	9103      	str	r1, [sp, #12]
 800513a:	2b00      	cmp	r3, #0
 800513c:	bfbb      	ittet	lt
 800513e:	425b      	neglt	r3, r3
 8005140:	f042 0202 	orrlt.w	r2, r2, #2
 8005144:	9307      	strge	r3, [sp, #28]
 8005146:	9307      	strlt	r3, [sp, #28]
 8005148:	bfb8      	it	lt
 800514a:	9204      	strlt	r2, [sp, #16]
 800514c:	7823      	ldrb	r3, [r4, #0]
 800514e:	2b2e      	cmp	r3, #46	; 0x2e
 8005150:	d10c      	bne.n	800516c <_svfiprintf_r+0x130>
 8005152:	7863      	ldrb	r3, [r4, #1]
 8005154:	2b2a      	cmp	r3, #42	; 0x2a
 8005156:	d135      	bne.n	80051c4 <_svfiprintf_r+0x188>
 8005158:	9b03      	ldr	r3, [sp, #12]
 800515a:	1d1a      	adds	r2, r3, #4
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	9203      	str	r2, [sp, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	bfb8      	it	lt
 8005164:	f04f 33ff 	movlt.w	r3, #4294967295
 8005168:	3402      	adds	r4, #2
 800516a:	9305      	str	r3, [sp, #20]
 800516c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005238 <_svfiprintf_r+0x1fc>
 8005170:	7821      	ldrb	r1, [r4, #0]
 8005172:	2203      	movs	r2, #3
 8005174:	4650      	mov	r0, sl
 8005176:	f7fb f833 	bl	80001e0 <memchr>
 800517a:	b140      	cbz	r0, 800518e <_svfiprintf_r+0x152>
 800517c:	2340      	movs	r3, #64	; 0x40
 800517e:	eba0 000a 	sub.w	r0, r0, sl
 8005182:	fa03 f000 	lsl.w	r0, r3, r0
 8005186:	9b04      	ldr	r3, [sp, #16]
 8005188:	4303      	orrs	r3, r0
 800518a:	3401      	adds	r4, #1
 800518c:	9304      	str	r3, [sp, #16]
 800518e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005192:	4826      	ldr	r0, [pc, #152]	; (800522c <_svfiprintf_r+0x1f0>)
 8005194:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005198:	2206      	movs	r2, #6
 800519a:	f7fb f821 	bl	80001e0 <memchr>
 800519e:	2800      	cmp	r0, #0
 80051a0:	d038      	beq.n	8005214 <_svfiprintf_r+0x1d8>
 80051a2:	4b23      	ldr	r3, [pc, #140]	; (8005230 <_svfiprintf_r+0x1f4>)
 80051a4:	bb1b      	cbnz	r3, 80051ee <_svfiprintf_r+0x1b2>
 80051a6:	9b03      	ldr	r3, [sp, #12]
 80051a8:	3307      	adds	r3, #7
 80051aa:	f023 0307 	bic.w	r3, r3, #7
 80051ae:	3308      	adds	r3, #8
 80051b0:	9303      	str	r3, [sp, #12]
 80051b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051b4:	4433      	add	r3, r6
 80051b6:	9309      	str	r3, [sp, #36]	; 0x24
 80051b8:	e767      	b.n	800508a <_svfiprintf_r+0x4e>
 80051ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80051be:	460c      	mov	r4, r1
 80051c0:	2001      	movs	r0, #1
 80051c2:	e7a5      	b.n	8005110 <_svfiprintf_r+0xd4>
 80051c4:	2300      	movs	r3, #0
 80051c6:	3401      	adds	r4, #1
 80051c8:	9305      	str	r3, [sp, #20]
 80051ca:	4619      	mov	r1, r3
 80051cc:	f04f 0c0a 	mov.w	ip, #10
 80051d0:	4620      	mov	r0, r4
 80051d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051d6:	3a30      	subs	r2, #48	; 0x30
 80051d8:	2a09      	cmp	r2, #9
 80051da:	d903      	bls.n	80051e4 <_svfiprintf_r+0x1a8>
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d0c5      	beq.n	800516c <_svfiprintf_r+0x130>
 80051e0:	9105      	str	r1, [sp, #20]
 80051e2:	e7c3      	b.n	800516c <_svfiprintf_r+0x130>
 80051e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80051e8:	4604      	mov	r4, r0
 80051ea:	2301      	movs	r3, #1
 80051ec:	e7f0      	b.n	80051d0 <_svfiprintf_r+0x194>
 80051ee:	ab03      	add	r3, sp, #12
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	462a      	mov	r2, r5
 80051f4:	4b0f      	ldr	r3, [pc, #60]	; (8005234 <_svfiprintf_r+0x1f8>)
 80051f6:	a904      	add	r1, sp, #16
 80051f8:	4638      	mov	r0, r7
 80051fa:	f3af 8000 	nop.w
 80051fe:	1c42      	adds	r2, r0, #1
 8005200:	4606      	mov	r6, r0
 8005202:	d1d6      	bne.n	80051b2 <_svfiprintf_r+0x176>
 8005204:	89ab      	ldrh	r3, [r5, #12]
 8005206:	065b      	lsls	r3, r3, #25
 8005208:	f53f af2c 	bmi.w	8005064 <_svfiprintf_r+0x28>
 800520c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800520e:	b01d      	add	sp, #116	; 0x74
 8005210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005214:	ab03      	add	r3, sp, #12
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	462a      	mov	r2, r5
 800521a:	4b06      	ldr	r3, [pc, #24]	; (8005234 <_svfiprintf_r+0x1f8>)
 800521c:	a904      	add	r1, sp, #16
 800521e:	4638      	mov	r0, r7
 8005220:	f000 f87a 	bl	8005318 <_printf_i>
 8005224:	e7eb      	b.n	80051fe <_svfiprintf_r+0x1c2>
 8005226:	bf00      	nop
 8005228:	08005ce0 	.word	0x08005ce0
 800522c:	08005cea 	.word	0x08005cea
 8005230:	00000000 	.word	0x00000000
 8005234:	08004f85 	.word	0x08004f85
 8005238:	08005ce6 	.word	0x08005ce6

0800523c <_printf_common>:
 800523c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005240:	4616      	mov	r6, r2
 8005242:	4699      	mov	r9, r3
 8005244:	688a      	ldr	r2, [r1, #8]
 8005246:	690b      	ldr	r3, [r1, #16]
 8005248:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800524c:	4293      	cmp	r3, r2
 800524e:	bfb8      	it	lt
 8005250:	4613      	movlt	r3, r2
 8005252:	6033      	str	r3, [r6, #0]
 8005254:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005258:	4607      	mov	r7, r0
 800525a:	460c      	mov	r4, r1
 800525c:	b10a      	cbz	r2, 8005262 <_printf_common+0x26>
 800525e:	3301      	adds	r3, #1
 8005260:	6033      	str	r3, [r6, #0]
 8005262:	6823      	ldr	r3, [r4, #0]
 8005264:	0699      	lsls	r1, r3, #26
 8005266:	bf42      	ittt	mi
 8005268:	6833      	ldrmi	r3, [r6, #0]
 800526a:	3302      	addmi	r3, #2
 800526c:	6033      	strmi	r3, [r6, #0]
 800526e:	6825      	ldr	r5, [r4, #0]
 8005270:	f015 0506 	ands.w	r5, r5, #6
 8005274:	d106      	bne.n	8005284 <_printf_common+0x48>
 8005276:	f104 0a19 	add.w	sl, r4, #25
 800527a:	68e3      	ldr	r3, [r4, #12]
 800527c:	6832      	ldr	r2, [r6, #0]
 800527e:	1a9b      	subs	r3, r3, r2
 8005280:	42ab      	cmp	r3, r5
 8005282:	dc26      	bgt.n	80052d2 <_printf_common+0x96>
 8005284:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005288:	1e13      	subs	r3, r2, #0
 800528a:	6822      	ldr	r2, [r4, #0]
 800528c:	bf18      	it	ne
 800528e:	2301      	movne	r3, #1
 8005290:	0692      	lsls	r2, r2, #26
 8005292:	d42b      	bmi.n	80052ec <_printf_common+0xb0>
 8005294:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005298:	4649      	mov	r1, r9
 800529a:	4638      	mov	r0, r7
 800529c:	47c0      	blx	r8
 800529e:	3001      	adds	r0, #1
 80052a0:	d01e      	beq.n	80052e0 <_printf_common+0xa4>
 80052a2:	6823      	ldr	r3, [r4, #0]
 80052a4:	68e5      	ldr	r5, [r4, #12]
 80052a6:	6832      	ldr	r2, [r6, #0]
 80052a8:	f003 0306 	and.w	r3, r3, #6
 80052ac:	2b04      	cmp	r3, #4
 80052ae:	bf08      	it	eq
 80052b0:	1aad      	subeq	r5, r5, r2
 80052b2:	68a3      	ldr	r3, [r4, #8]
 80052b4:	6922      	ldr	r2, [r4, #16]
 80052b6:	bf0c      	ite	eq
 80052b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052bc:	2500      	movne	r5, #0
 80052be:	4293      	cmp	r3, r2
 80052c0:	bfc4      	itt	gt
 80052c2:	1a9b      	subgt	r3, r3, r2
 80052c4:	18ed      	addgt	r5, r5, r3
 80052c6:	2600      	movs	r6, #0
 80052c8:	341a      	adds	r4, #26
 80052ca:	42b5      	cmp	r5, r6
 80052cc:	d11a      	bne.n	8005304 <_printf_common+0xc8>
 80052ce:	2000      	movs	r0, #0
 80052d0:	e008      	b.n	80052e4 <_printf_common+0xa8>
 80052d2:	2301      	movs	r3, #1
 80052d4:	4652      	mov	r2, sl
 80052d6:	4649      	mov	r1, r9
 80052d8:	4638      	mov	r0, r7
 80052da:	47c0      	blx	r8
 80052dc:	3001      	adds	r0, #1
 80052de:	d103      	bne.n	80052e8 <_printf_common+0xac>
 80052e0:	f04f 30ff 	mov.w	r0, #4294967295
 80052e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052e8:	3501      	adds	r5, #1
 80052ea:	e7c6      	b.n	800527a <_printf_common+0x3e>
 80052ec:	18e1      	adds	r1, r4, r3
 80052ee:	1c5a      	adds	r2, r3, #1
 80052f0:	2030      	movs	r0, #48	; 0x30
 80052f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052f6:	4422      	add	r2, r4
 80052f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005300:	3302      	adds	r3, #2
 8005302:	e7c7      	b.n	8005294 <_printf_common+0x58>
 8005304:	2301      	movs	r3, #1
 8005306:	4622      	mov	r2, r4
 8005308:	4649      	mov	r1, r9
 800530a:	4638      	mov	r0, r7
 800530c:	47c0      	blx	r8
 800530e:	3001      	adds	r0, #1
 8005310:	d0e6      	beq.n	80052e0 <_printf_common+0xa4>
 8005312:	3601      	adds	r6, #1
 8005314:	e7d9      	b.n	80052ca <_printf_common+0x8e>
	...

08005318 <_printf_i>:
 8005318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800531c:	7e0f      	ldrb	r7, [r1, #24]
 800531e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005320:	2f78      	cmp	r7, #120	; 0x78
 8005322:	4691      	mov	r9, r2
 8005324:	4680      	mov	r8, r0
 8005326:	460c      	mov	r4, r1
 8005328:	469a      	mov	sl, r3
 800532a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800532e:	d807      	bhi.n	8005340 <_printf_i+0x28>
 8005330:	2f62      	cmp	r7, #98	; 0x62
 8005332:	d80a      	bhi.n	800534a <_printf_i+0x32>
 8005334:	2f00      	cmp	r7, #0
 8005336:	f000 80d8 	beq.w	80054ea <_printf_i+0x1d2>
 800533a:	2f58      	cmp	r7, #88	; 0x58
 800533c:	f000 80a3 	beq.w	8005486 <_printf_i+0x16e>
 8005340:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005344:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005348:	e03a      	b.n	80053c0 <_printf_i+0xa8>
 800534a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800534e:	2b15      	cmp	r3, #21
 8005350:	d8f6      	bhi.n	8005340 <_printf_i+0x28>
 8005352:	a101      	add	r1, pc, #4	; (adr r1, 8005358 <_printf_i+0x40>)
 8005354:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005358:	080053b1 	.word	0x080053b1
 800535c:	080053c5 	.word	0x080053c5
 8005360:	08005341 	.word	0x08005341
 8005364:	08005341 	.word	0x08005341
 8005368:	08005341 	.word	0x08005341
 800536c:	08005341 	.word	0x08005341
 8005370:	080053c5 	.word	0x080053c5
 8005374:	08005341 	.word	0x08005341
 8005378:	08005341 	.word	0x08005341
 800537c:	08005341 	.word	0x08005341
 8005380:	08005341 	.word	0x08005341
 8005384:	080054d1 	.word	0x080054d1
 8005388:	080053f5 	.word	0x080053f5
 800538c:	080054b3 	.word	0x080054b3
 8005390:	08005341 	.word	0x08005341
 8005394:	08005341 	.word	0x08005341
 8005398:	080054f3 	.word	0x080054f3
 800539c:	08005341 	.word	0x08005341
 80053a0:	080053f5 	.word	0x080053f5
 80053a4:	08005341 	.word	0x08005341
 80053a8:	08005341 	.word	0x08005341
 80053ac:	080054bb 	.word	0x080054bb
 80053b0:	682b      	ldr	r3, [r5, #0]
 80053b2:	1d1a      	adds	r2, r3, #4
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	602a      	str	r2, [r5, #0]
 80053b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053c0:	2301      	movs	r3, #1
 80053c2:	e0a3      	b.n	800550c <_printf_i+0x1f4>
 80053c4:	6820      	ldr	r0, [r4, #0]
 80053c6:	6829      	ldr	r1, [r5, #0]
 80053c8:	0606      	lsls	r6, r0, #24
 80053ca:	f101 0304 	add.w	r3, r1, #4
 80053ce:	d50a      	bpl.n	80053e6 <_printf_i+0xce>
 80053d0:	680e      	ldr	r6, [r1, #0]
 80053d2:	602b      	str	r3, [r5, #0]
 80053d4:	2e00      	cmp	r6, #0
 80053d6:	da03      	bge.n	80053e0 <_printf_i+0xc8>
 80053d8:	232d      	movs	r3, #45	; 0x2d
 80053da:	4276      	negs	r6, r6
 80053dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053e0:	485e      	ldr	r0, [pc, #376]	; (800555c <_printf_i+0x244>)
 80053e2:	230a      	movs	r3, #10
 80053e4:	e019      	b.n	800541a <_printf_i+0x102>
 80053e6:	680e      	ldr	r6, [r1, #0]
 80053e8:	602b      	str	r3, [r5, #0]
 80053ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053ee:	bf18      	it	ne
 80053f0:	b236      	sxthne	r6, r6
 80053f2:	e7ef      	b.n	80053d4 <_printf_i+0xbc>
 80053f4:	682b      	ldr	r3, [r5, #0]
 80053f6:	6820      	ldr	r0, [r4, #0]
 80053f8:	1d19      	adds	r1, r3, #4
 80053fa:	6029      	str	r1, [r5, #0]
 80053fc:	0601      	lsls	r1, r0, #24
 80053fe:	d501      	bpl.n	8005404 <_printf_i+0xec>
 8005400:	681e      	ldr	r6, [r3, #0]
 8005402:	e002      	b.n	800540a <_printf_i+0xf2>
 8005404:	0646      	lsls	r6, r0, #25
 8005406:	d5fb      	bpl.n	8005400 <_printf_i+0xe8>
 8005408:	881e      	ldrh	r6, [r3, #0]
 800540a:	4854      	ldr	r0, [pc, #336]	; (800555c <_printf_i+0x244>)
 800540c:	2f6f      	cmp	r7, #111	; 0x6f
 800540e:	bf0c      	ite	eq
 8005410:	2308      	moveq	r3, #8
 8005412:	230a      	movne	r3, #10
 8005414:	2100      	movs	r1, #0
 8005416:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800541a:	6865      	ldr	r5, [r4, #4]
 800541c:	60a5      	str	r5, [r4, #8]
 800541e:	2d00      	cmp	r5, #0
 8005420:	bfa2      	ittt	ge
 8005422:	6821      	ldrge	r1, [r4, #0]
 8005424:	f021 0104 	bicge.w	r1, r1, #4
 8005428:	6021      	strge	r1, [r4, #0]
 800542a:	b90e      	cbnz	r6, 8005430 <_printf_i+0x118>
 800542c:	2d00      	cmp	r5, #0
 800542e:	d04d      	beq.n	80054cc <_printf_i+0x1b4>
 8005430:	4615      	mov	r5, r2
 8005432:	fbb6 f1f3 	udiv	r1, r6, r3
 8005436:	fb03 6711 	mls	r7, r3, r1, r6
 800543a:	5dc7      	ldrb	r7, [r0, r7]
 800543c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005440:	4637      	mov	r7, r6
 8005442:	42bb      	cmp	r3, r7
 8005444:	460e      	mov	r6, r1
 8005446:	d9f4      	bls.n	8005432 <_printf_i+0x11a>
 8005448:	2b08      	cmp	r3, #8
 800544a:	d10b      	bne.n	8005464 <_printf_i+0x14c>
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	07de      	lsls	r6, r3, #31
 8005450:	d508      	bpl.n	8005464 <_printf_i+0x14c>
 8005452:	6923      	ldr	r3, [r4, #16]
 8005454:	6861      	ldr	r1, [r4, #4]
 8005456:	4299      	cmp	r1, r3
 8005458:	bfde      	ittt	le
 800545a:	2330      	movle	r3, #48	; 0x30
 800545c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005460:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005464:	1b52      	subs	r2, r2, r5
 8005466:	6122      	str	r2, [r4, #16]
 8005468:	f8cd a000 	str.w	sl, [sp]
 800546c:	464b      	mov	r3, r9
 800546e:	aa03      	add	r2, sp, #12
 8005470:	4621      	mov	r1, r4
 8005472:	4640      	mov	r0, r8
 8005474:	f7ff fee2 	bl	800523c <_printf_common>
 8005478:	3001      	adds	r0, #1
 800547a:	d14c      	bne.n	8005516 <_printf_i+0x1fe>
 800547c:	f04f 30ff 	mov.w	r0, #4294967295
 8005480:	b004      	add	sp, #16
 8005482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005486:	4835      	ldr	r0, [pc, #212]	; (800555c <_printf_i+0x244>)
 8005488:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800548c:	6829      	ldr	r1, [r5, #0]
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	f851 6b04 	ldr.w	r6, [r1], #4
 8005494:	6029      	str	r1, [r5, #0]
 8005496:	061d      	lsls	r5, r3, #24
 8005498:	d514      	bpl.n	80054c4 <_printf_i+0x1ac>
 800549a:	07df      	lsls	r7, r3, #31
 800549c:	bf44      	itt	mi
 800549e:	f043 0320 	orrmi.w	r3, r3, #32
 80054a2:	6023      	strmi	r3, [r4, #0]
 80054a4:	b91e      	cbnz	r6, 80054ae <_printf_i+0x196>
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	f023 0320 	bic.w	r3, r3, #32
 80054ac:	6023      	str	r3, [r4, #0]
 80054ae:	2310      	movs	r3, #16
 80054b0:	e7b0      	b.n	8005414 <_printf_i+0xfc>
 80054b2:	6823      	ldr	r3, [r4, #0]
 80054b4:	f043 0320 	orr.w	r3, r3, #32
 80054b8:	6023      	str	r3, [r4, #0]
 80054ba:	2378      	movs	r3, #120	; 0x78
 80054bc:	4828      	ldr	r0, [pc, #160]	; (8005560 <_printf_i+0x248>)
 80054be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054c2:	e7e3      	b.n	800548c <_printf_i+0x174>
 80054c4:	0659      	lsls	r1, r3, #25
 80054c6:	bf48      	it	mi
 80054c8:	b2b6      	uxthmi	r6, r6
 80054ca:	e7e6      	b.n	800549a <_printf_i+0x182>
 80054cc:	4615      	mov	r5, r2
 80054ce:	e7bb      	b.n	8005448 <_printf_i+0x130>
 80054d0:	682b      	ldr	r3, [r5, #0]
 80054d2:	6826      	ldr	r6, [r4, #0]
 80054d4:	6961      	ldr	r1, [r4, #20]
 80054d6:	1d18      	adds	r0, r3, #4
 80054d8:	6028      	str	r0, [r5, #0]
 80054da:	0635      	lsls	r5, r6, #24
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	d501      	bpl.n	80054e4 <_printf_i+0x1cc>
 80054e0:	6019      	str	r1, [r3, #0]
 80054e2:	e002      	b.n	80054ea <_printf_i+0x1d2>
 80054e4:	0670      	lsls	r0, r6, #25
 80054e6:	d5fb      	bpl.n	80054e0 <_printf_i+0x1c8>
 80054e8:	8019      	strh	r1, [r3, #0]
 80054ea:	2300      	movs	r3, #0
 80054ec:	6123      	str	r3, [r4, #16]
 80054ee:	4615      	mov	r5, r2
 80054f0:	e7ba      	b.n	8005468 <_printf_i+0x150>
 80054f2:	682b      	ldr	r3, [r5, #0]
 80054f4:	1d1a      	adds	r2, r3, #4
 80054f6:	602a      	str	r2, [r5, #0]
 80054f8:	681d      	ldr	r5, [r3, #0]
 80054fa:	6862      	ldr	r2, [r4, #4]
 80054fc:	2100      	movs	r1, #0
 80054fe:	4628      	mov	r0, r5
 8005500:	f7fa fe6e 	bl	80001e0 <memchr>
 8005504:	b108      	cbz	r0, 800550a <_printf_i+0x1f2>
 8005506:	1b40      	subs	r0, r0, r5
 8005508:	6060      	str	r0, [r4, #4]
 800550a:	6863      	ldr	r3, [r4, #4]
 800550c:	6123      	str	r3, [r4, #16]
 800550e:	2300      	movs	r3, #0
 8005510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005514:	e7a8      	b.n	8005468 <_printf_i+0x150>
 8005516:	6923      	ldr	r3, [r4, #16]
 8005518:	462a      	mov	r2, r5
 800551a:	4649      	mov	r1, r9
 800551c:	4640      	mov	r0, r8
 800551e:	47d0      	blx	sl
 8005520:	3001      	adds	r0, #1
 8005522:	d0ab      	beq.n	800547c <_printf_i+0x164>
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	079b      	lsls	r3, r3, #30
 8005528:	d413      	bmi.n	8005552 <_printf_i+0x23a>
 800552a:	68e0      	ldr	r0, [r4, #12]
 800552c:	9b03      	ldr	r3, [sp, #12]
 800552e:	4298      	cmp	r0, r3
 8005530:	bfb8      	it	lt
 8005532:	4618      	movlt	r0, r3
 8005534:	e7a4      	b.n	8005480 <_printf_i+0x168>
 8005536:	2301      	movs	r3, #1
 8005538:	4632      	mov	r2, r6
 800553a:	4649      	mov	r1, r9
 800553c:	4640      	mov	r0, r8
 800553e:	47d0      	blx	sl
 8005540:	3001      	adds	r0, #1
 8005542:	d09b      	beq.n	800547c <_printf_i+0x164>
 8005544:	3501      	adds	r5, #1
 8005546:	68e3      	ldr	r3, [r4, #12]
 8005548:	9903      	ldr	r1, [sp, #12]
 800554a:	1a5b      	subs	r3, r3, r1
 800554c:	42ab      	cmp	r3, r5
 800554e:	dcf2      	bgt.n	8005536 <_printf_i+0x21e>
 8005550:	e7eb      	b.n	800552a <_printf_i+0x212>
 8005552:	2500      	movs	r5, #0
 8005554:	f104 0619 	add.w	r6, r4, #25
 8005558:	e7f5      	b.n	8005546 <_printf_i+0x22e>
 800555a:	bf00      	nop
 800555c:	08005cf1 	.word	0x08005cf1
 8005560:	08005d02 	.word	0x08005d02

08005564 <memcpy>:
 8005564:	440a      	add	r2, r1
 8005566:	4291      	cmp	r1, r2
 8005568:	f100 33ff 	add.w	r3, r0, #4294967295
 800556c:	d100      	bne.n	8005570 <memcpy+0xc>
 800556e:	4770      	bx	lr
 8005570:	b510      	push	{r4, lr}
 8005572:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005576:	f803 4f01 	strb.w	r4, [r3, #1]!
 800557a:	4291      	cmp	r1, r2
 800557c:	d1f9      	bne.n	8005572 <memcpy+0xe>
 800557e:	bd10      	pop	{r4, pc}

08005580 <memmove>:
 8005580:	4288      	cmp	r0, r1
 8005582:	b510      	push	{r4, lr}
 8005584:	eb01 0402 	add.w	r4, r1, r2
 8005588:	d902      	bls.n	8005590 <memmove+0x10>
 800558a:	4284      	cmp	r4, r0
 800558c:	4623      	mov	r3, r4
 800558e:	d807      	bhi.n	80055a0 <memmove+0x20>
 8005590:	1e43      	subs	r3, r0, #1
 8005592:	42a1      	cmp	r1, r4
 8005594:	d008      	beq.n	80055a8 <memmove+0x28>
 8005596:	f811 2b01 	ldrb.w	r2, [r1], #1
 800559a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800559e:	e7f8      	b.n	8005592 <memmove+0x12>
 80055a0:	4402      	add	r2, r0
 80055a2:	4601      	mov	r1, r0
 80055a4:	428a      	cmp	r2, r1
 80055a6:	d100      	bne.n	80055aa <memmove+0x2a>
 80055a8:	bd10      	pop	{r4, pc}
 80055aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055b2:	e7f7      	b.n	80055a4 <memmove+0x24>

080055b4 <_free_r>:
 80055b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055b6:	2900      	cmp	r1, #0
 80055b8:	d044      	beq.n	8005644 <_free_r+0x90>
 80055ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055be:	9001      	str	r0, [sp, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f1a1 0404 	sub.w	r4, r1, #4
 80055c6:	bfb8      	it	lt
 80055c8:	18e4      	addlt	r4, r4, r3
 80055ca:	f000 f913 	bl	80057f4 <__malloc_lock>
 80055ce:	4a1e      	ldr	r2, [pc, #120]	; (8005648 <_free_r+0x94>)
 80055d0:	9801      	ldr	r0, [sp, #4]
 80055d2:	6813      	ldr	r3, [r2, #0]
 80055d4:	b933      	cbnz	r3, 80055e4 <_free_r+0x30>
 80055d6:	6063      	str	r3, [r4, #4]
 80055d8:	6014      	str	r4, [r2, #0]
 80055da:	b003      	add	sp, #12
 80055dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055e0:	f000 b90e 	b.w	8005800 <__malloc_unlock>
 80055e4:	42a3      	cmp	r3, r4
 80055e6:	d908      	bls.n	80055fa <_free_r+0x46>
 80055e8:	6825      	ldr	r5, [r4, #0]
 80055ea:	1961      	adds	r1, r4, r5
 80055ec:	428b      	cmp	r3, r1
 80055ee:	bf01      	itttt	eq
 80055f0:	6819      	ldreq	r1, [r3, #0]
 80055f2:	685b      	ldreq	r3, [r3, #4]
 80055f4:	1949      	addeq	r1, r1, r5
 80055f6:	6021      	streq	r1, [r4, #0]
 80055f8:	e7ed      	b.n	80055d6 <_free_r+0x22>
 80055fa:	461a      	mov	r2, r3
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	b10b      	cbz	r3, 8005604 <_free_r+0x50>
 8005600:	42a3      	cmp	r3, r4
 8005602:	d9fa      	bls.n	80055fa <_free_r+0x46>
 8005604:	6811      	ldr	r1, [r2, #0]
 8005606:	1855      	adds	r5, r2, r1
 8005608:	42a5      	cmp	r5, r4
 800560a:	d10b      	bne.n	8005624 <_free_r+0x70>
 800560c:	6824      	ldr	r4, [r4, #0]
 800560e:	4421      	add	r1, r4
 8005610:	1854      	adds	r4, r2, r1
 8005612:	42a3      	cmp	r3, r4
 8005614:	6011      	str	r1, [r2, #0]
 8005616:	d1e0      	bne.n	80055da <_free_r+0x26>
 8005618:	681c      	ldr	r4, [r3, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	6053      	str	r3, [r2, #4]
 800561e:	4421      	add	r1, r4
 8005620:	6011      	str	r1, [r2, #0]
 8005622:	e7da      	b.n	80055da <_free_r+0x26>
 8005624:	d902      	bls.n	800562c <_free_r+0x78>
 8005626:	230c      	movs	r3, #12
 8005628:	6003      	str	r3, [r0, #0]
 800562a:	e7d6      	b.n	80055da <_free_r+0x26>
 800562c:	6825      	ldr	r5, [r4, #0]
 800562e:	1961      	adds	r1, r4, r5
 8005630:	428b      	cmp	r3, r1
 8005632:	bf04      	itt	eq
 8005634:	6819      	ldreq	r1, [r3, #0]
 8005636:	685b      	ldreq	r3, [r3, #4]
 8005638:	6063      	str	r3, [r4, #4]
 800563a:	bf04      	itt	eq
 800563c:	1949      	addeq	r1, r1, r5
 800563e:	6021      	streq	r1, [r4, #0]
 8005640:	6054      	str	r4, [r2, #4]
 8005642:	e7ca      	b.n	80055da <_free_r+0x26>
 8005644:	b003      	add	sp, #12
 8005646:	bd30      	pop	{r4, r5, pc}
 8005648:	200046ac 	.word	0x200046ac

0800564c <sbrk_aligned>:
 800564c:	b570      	push	{r4, r5, r6, lr}
 800564e:	4e0e      	ldr	r6, [pc, #56]	; (8005688 <sbrk_aligned+0x3c>)
 8005650:	460c      	mov	r4, r1
 8005652:	6831      	ldr	r1, [r6, #0]
 8005654:	4605      	mov	r5, r0
 8005656:	b911      	cbnz	r1, 800565e <sbrk_aligned+0x12>
 8005658:	f000 f8bc 	bl	80057d4 <_sbrk_r>
 800565c:	6030      	str	r0, [r6, #0]
 800565e:	4621      	mov	r1, r4
 8005660:	4628      	mov	r0, r5
 8005662:	f000 f8b7 	bl	80057d4 <_sbrk_r>
 8005666:	1c43      	adds	r3, r0, #1
 8005668:	d00a      	beq.n	8005680 <sbrk_aligned+0x34>
 800566a:	1cc4      	adds	r4, r0, #3
 800566c:	f024 0403 	bic.w	r4, r4, #3
 8005670:	42a0      	cmp	r0, r4
 8005672:	d007      	beq.n	8005684 <sbrk_aligned+0x38>
 8005674:	1a21      	subs	r1, r4, r0
 8005676:	4628      	mov	r0, r5
 8005678:	f000 f8ac 	bl	80057d4 <_sbrk_r>
 800567c:	3001      	adds	r0, #1
 800567e:	d101      	bne.n	8005684 <sbrk_aligned+0x38>
 8005680:	f04f 34ff 	mov.w	r4, #4294967295
 8005684:	4620      	mov	r0, r4
 8005686:	bd70      	pop	{r4, r5, r6, pc}
 8005688:	200046b0 	.word	0x200046b0

0800568c <_malloc_r>:
 800568c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005690:	1ccd      	adds	r5, r1, #3
 8005692:	f025 0503 	bic.w	r5, r5, #3
 8005696:	3508      	adds	r5, #8
 8005698:	2d0c      	cmp	r5, #12
 800569a:	bf38      	it	cc
 800569c:	250c      	movcc	r5, #12
 800569e:	2d00      	cmp	r5, #0
 80056a0:	4607      	mov	r7, r0
 80056a2:	db01      	blt.n	80056a8 <_malloc_r+0x1c>
 80056a4:	42a9      	cmp	r1, r5
 80056a6:	d905      	bls.n	80056b4 <_malloc_r+0x28>
 80056a8:	230c      	movs	r3, #12
 80056aa:	603b      	str	r3, [r7, #0]
 80056ac:	2600      	movs	r6, #0
 80056ae:	4630      	mov	r0, r6
 80056b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056b4:	4e2e      	ldr	r6, [pc, #184]	; (8005770 <_malloc_r+0xe4>)
 80056b6:	f000 f89d 	bl	80057f4 <__malloc_lock>
 80056ba:	6833      	ldr	r3, [r6, #0]
 80056bc:	461c      	mov	r4, r3
 80056be:	bb34      	cbnz	r4, 800570e <_malloc_r+0x82>
 80056c0:	4629      	mov	r1, r5
 80056c2:	4638      	mov	r0, r7
 80056c4:	f7ff ffc2 	bl	800564c <sbrk_aligned>
 80056c8:	1c43      	adds	r3, r0, #1
 80056ca:	4604      	mov	r4, r0
 80056cc:	d14d      	bne.n	800576a <_malloc_r+0xde>
 80056ce:	6834      	ldr	r4, [r6, #0]
 80056d0:	4626      	mov	r6, r4
 80056d2:	2e00      	cmp	r6, #0
 80056d4:	d140      	bne.n	8005758 <_malloc_r+0xcc>
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	4631      	mov	r1, r6
 80056da:	4638      	mov	r0, r7
 80056dc:	eb04 0803 	add.w	r8, r4, r3
 80056e0:	f000 f878 	bl	80057d4 <_sbrk_r>
 80056e4:	4580      	cmp	r8, r0
 80056e6:	d13a      	bne.n	800575e <_malloc_r+0xd2>
 80056e8:	6821      	ldr	r1, [r4, #0]
 80056ea:	3503      	adds	r5, #3
 80056ec:	1a6d      	subs	r5, r5, r1
 80056ee:	f025 0503 	bic.w	r5, r5, #3
 80056f2:	3508      	adds	r5, #8
 80056f4:	2d0c      	cmp	r5, #12
 80056f6:	bf38      	it	cc
 80056f8:	250c      	movcc	r5, #12
 80056fa:	4629      	mov	r1, r5
 80056fc:	4638      	mov	r0, r7
 80056fe:	f7ff ffa5 	bl	800564c <sbrk_aligned>
 8005702:	3001      	adds	r0, #1
 8005704:	d02b      	beq.n	800575e <_malloc_r+0xd2>
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	442b      	add	r3, r5
 800570a:	6023      	str	r3, [r4, #0]
 800570c:	e00e      	b.n	800572c <_malloc_r+0xa0>
 800570e:	6822      	ldr	r2, [r4, #0]
 8005710:	1b52      	subs	r2, r2, r5
 8005712:	d41e      	bmi.n	8005752 <_malloc_r+0xc6>
 8005714:	2a0b      	cmp	r2, #11
 8005716:	d916      	bls.n	8005746 <_malloc_r+0xba>
 8005718:	1961      	adds	r1, r4, r5
 800571a:	42a3      	cmp	r3, r4
 800571c:	6025      	str	r5, [r4, #0]
 800571e:	bf18      	it	ne
 8005720:	6059      	strne	r1, [r3, #4]
 8005722:	6863      	ldr	r3, [r4, #4]
 8005724:	bf08      	it	eq
 8005726:	6031      	streq	r1, [r6, #0]
 8005728:	5162      	str	r2, [r4, r5]
 800572a:	604b      	str	r3, [r1, #4]
 800572c:	4638      	mov	r0, r7
 800572e:	f104 060b 	add.w	r6, r4, #11
 8005732:	f000 f865 	bl	8005800 <__malloc_unlock>
 8005736:	f026 0607 	bic.w	r6, r6, #7
 800573a:	1d23      	adds	r3, r4, #4
 800573c:	1af2      	subs	r2, r6, r3
 800573e:	d0b6      	beq.n	80056ae <_malloc_r+0x22>
 8005740:	1b9b      	subs	r3, r3, r6
 8005742:	50a3      	str	r3, [r4, r2]
 8005744:	e7b3      	b.n	80056ae <_malloc_r+0x22>
 8005746:	6862      	ldr	r2, [r4, #4]
 8005748:	42a3      	cmp	r3, r4
 800574a:	bf0c      	ite	eq
 800574c:	6032      	streq	r2, [r6, #0]
 800574e:	605a      	strne	r2, [r3, #4]
 8005750:	e7ec      	b.n	800572c <_malloc_r+0xa0>
 8005752:	4623      	mov	r3, r4
 8005754:	6864      	ldr	r4, [r4, #4]
 8005756:	e7b2      	b.n	80056be <_malloc_r+0x32>
 8005758:	4634      	mov	r4, r6
 800575a:	6876      	ldr	r6, [r6, #4]
 800575c:	e7b9      	b.n	80056d2 <_malloc_r+0x46>
 800575e:	230c      	movs	r3, #12
 8005760:	603b      	str	r3, [r7, #0]
 8005762:	4638      	mov	r0, r7
 8005764:	f000 f84c 	bl	8005800 <__malloc_unlock>
 8005768:	e7a1      	b.n	80056ae <_malloc_r+0x22>
 800576a:	6025      	str	r5, [r4, #0]
 800576c:	e7de      	b.n	800572c <_malloc_r+0xa0>
 800576e:	bf00      	nop
 8005770:	200046ac 	.word	0x200046ac

08005774 <_realloc_r>:
 8005774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005778:	4680      	mov	r8, r0
 800577a:	4614      	mov	r4, r2
 800577c:	460e      	mov	r6, r1
 800577e:	b921      	cbnz	r1, 800578a <_realloc_r+0x16>
 8005780:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005784:	4611      	mov	r1, r2
 8005786:	f7ff bf81 	b.w	800568c <_malloc_r>
 800578a:	b92a      	cbnz	r2, 8005798 <_realloc_r+0x24>
 800578c:	f7ff ff12 	bl	80055b4 <_free_r>
 8005790:	4625      	mov	r5, r4
 8005792:	4628      	mov	r0, r5
 8005794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005798:	f000 f838 	bl	800580c <_malloc_usable_size_r>
 800579c:	4284      	cmp	r4, r0
 800579e:	4607      	mov	r7, r0
 80057a0:	d802      	bhi.n	80057a8 <_realloc_r+0x34>
 80057a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80057a6:	d812      	bhi.n	80057ce <_realloc_r+0x5a>
 80057a8:	4621      	mov	r1, r4
 80057aa:	4640      	mov	r0, r8
 80057ac:	f7ff ff6e 	bl	800568c <_malloc_r>
 80057b0:	4605      	mov	r5, r0
 80057b2:	2800      	cmp	r0, #0
 80057b4:	d0ed      	beq.n	8005792 <_realloc_r+0x1e>
 80057b6:	42bc      	cmp	r4, r7
 80057b8:	4622      	mov	r2, r4
 80057ba:	4631      	mov	r1, r6
 80057bc:	bf28      	it	cs
 80057be:	463a      	movcs	r2, r7
 80057c0:	f7ff fed0 	bl	8005564 <memcpy>
 80057c4:	4631      	mov	r1, r6
 80057c6:	4640      	mov	r0, r8
 80057c8:	f7ff fef4 	bl	80055b4 <_free_r>
 80057cc:	e7e1      	b.n	8005792 <_realloc_r+0x1e>
 80057ce:	4635      	mov	r5, r6
 80057d0:	e7df      	b.n	8005792 <_realloc_r+0x1e>
	...

080057d4 <_sbrk_r>:
 80057d4:	b538      	push	{r3, r4, r5, lr}
 80057d6:	4d06      	ldr	r5, [pc, #24]	; (80057f0 <_sbrk_r+0x1c>)
 80057d8:	2300      	movs	r3, #0
 80057da:	4604      	mov	r4, r0
 80057dc:	4608      	mov	r0, r1
 80057de:	602b      	str	r3, [r5, #0]
 80057e0:	f7fb fc54 	bl	800108c <_sbrk>
 80057e4:	1c43      	adds	r3, r0, #1
 80057e6:	d102      	bne.n	80057ee <_sbrk_r+0x1a>
 80057e8:	682b      	ldr	r3, [r5, #0]
 80057ea:	b103      	cbz	r3, 80057ee <_sbrk_r+0x1a>
 80057ec:	6023      	str	r3, [r4, #0]
 80057ee:	bd38      	pop	{r3, r4, r5, pc}
 80057f0:	200046b4 	.word	0x200046b4

080057f4 <__malloc_lock>:
 80057f4:	4801      	ldr	r0, [pc, #4]	; (80057fc <__malloc_lock+0x8>)
 80057f6:	f000 b811 	b.w	800581c <__retarget_lock_acquire_recursive>
 80057fa:	bf00      	nop
 80057fc:	200046b8 	.word	0x200046b8

08005800 <__malloc_unlock>:
 8005800:	4801      	ldr	r0, [pc, #4]	; (8005808 <__malloc_unlock+0x8>)
 8005802:	f000 b80c 	b.w	800581e <__retarget_lock_release_recursive>
 8005806:	bf00      	nop
 8005808:	200046b8 	.word	0x200046b8

0800580c <_malloc_usable_size_r>:
 800580c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005810:	1f18      	subs	r0, r3, #4
 8005812:	2b00      	cmp	r3, #0
 8005814:	bfbc      	itt	lt
 8005816:	580b      	ldrlt	r3, [r1, r0]
 8005818:	18c0      	addlt	r0, r0, r3
 800581a:	4770      	bx	lr

0800581c <__retarget_lock_acquire_recursive>:
 800581c:	4770      	bx	lr

0800581e <__retarget_lock_release_recursive>:
 800581e:	4770      	bx	lr

08005820 <_init>:
 8005820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005822:	bf00      	nop
 8005824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005826:	bc08      	pop	{r3}
 8005828:	469e      	mov	lr, r3
 800582a:	4770      	bx	lr

0800582c <_fini>:
 800582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582e:	bf00      	nop
 8005830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005832:	bc08      	pop	{r3}
 8005834:	469e      	mov	lr, r3
 8005836:	4770      	bx	lr
