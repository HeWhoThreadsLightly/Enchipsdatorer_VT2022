
vgaGraphics2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001324  08005340  08005340  00015340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006664  08006664  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006664  08006664  00016664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800666c  0800666c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800666c  0800666c  0001666c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006670  08006670  00016670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ff6c  20000070  080066e4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ffdc  080066e4  0002ffdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f650  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002261  00000000  00000000  0002f6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00031958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000162cd  00000000  00000000  000326c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000fb2d  00000000  00000000  00048995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008e013  00000000  00000000  000584c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000e64d5  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000cf0  00000000  00000000  000e6528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c08  00000000  00000000  000e7218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005328 	.word	0x08005328

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005328 	.word	0x08005328

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <setRGB>:
	c->value = (c->value & 0b11110011) | g;
}
void setBlue(Color * c, char b){
	c->value = (c->value & 0b11111100) | b;
}
void setRGB(Color * c, char r, char g, char b){
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	4608      	mov	r0, r1
 800058e:	4611      	mov	r1, r2
 8000590:	461a      	mov	r2, r3
 8000592:	4603      	mov	r3, r0
 8000594:	70fb      	strb	r3, [r7, #3]
 8000596:	460b      	mov	r3, r1
 8000598:	70bb      	strb	r3, [r7, #2]
 800059a:	4613      	mov	r3, r2
 800059c:	707b      	strb	r3, [r7, #1]
	c->value = r << 4 | g << 2 | b;
 800059e:	78fb      	ldrb	r3, [r7, #3]
 80005a0:	011b      	lsls	r3, r3, #4
 80005a2:	b25a      	sxtb	r2, r3
 80005a4:	78bb      	ldrb	r3, [r7, #2]
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	b25b      	sxtb	r3, r3
 80005aa:	4313      	orrs	r3, r2
 80005ac:	b25a      	sxtb	r2, r3
 80005ae:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80005b2:	4313      	orrs	r3, r2
 80005b4:	b25b      	sxtb	r3, r3
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	701a      	strb	r2, [r3, #0]
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <combineColors>:

int getBitN(uint32_t n, char * buff){
	return (buff[n/8] >> (n%8)) & 0b1;
}

Color combineColors(Color existing, Color new){
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	7138      	strb	r0, [r7, #4]
 80005d0:	7039      	strb	r1, [r7, #0]
	if((existing.value >> 6) & 1){
 80005d2:	793b      	ldrb	r3, [r7, #4]
 80005d4:	099b      	lsrs	r3, r3, #6
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	f003 0301 	and.w	r3, r3, #1
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <combineColors+0x1c>
		return new;//old color is a empty texture use the new color
 80005e0:	783b      	ldrb	r3, [r7, #0]
 80005e2:	e00e      	b.n	8000602 <combineColors+0x3a>
	}
	switch(new.value>>6){
 80005e4:	783b      	ldrb	r3, [r7, #0]
 80005e6:	099b      	lsrs	r3, r3, #6
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d002      	beq.n	80005f4 <combineColors+0x2c>
 80005ee:	2b03      	cmp	r3, #3
 80005f0:	d002      	beq.n	80005f8 <combineColors+0x30>
 80005f2:	e003      	b.n	80005fc <combineColors+0x34>
	case 0b00: return new;//new color is opaque
 80005f4:	783b      	ldrb	r3, [r7, #0]
 80005f6:	e004      	b.n	8000602 <combineColors+0x3a>
	case 0b11: return existing;//new color is transparent
 80005f8:	793b      	ldrb	r3, [r7, #4]
 80005fa:	e002      	b.n	8000602 <combineColors+0x3a>
	case 0b01://new color is partially opaque or a empty texture
	case 0b10://new color is partially transparent
	default:
		{
			Color t;
			t.value = 0b00101010;//purple error not implemented
 80005fc:	232a      	movs	r3, #42	; 0x2a
 80005fe:	733b      	strb	r3, [r7, #12]
			return t;
 8000600:	7b3b      	ldrb	r3, [r7, #12]
		}
	}
}
 8000602:	4618      	mov	r0, r3
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
	...

08000610 <renderChar>:

void renderChar(char c, int h, int v, const Color background, const Color forground, const Sprite_map * font){
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b08b      	sub	sp, #44	; 0x2c
 8000614:	af00      	add	r7, sp, #0
 8000616:	60b9      	str	r1, [r7, #8]
 8000618:	607a      	str	r2, [r7, #4]
 800061a:	733b      	strb	r3, [r7, #12]
 800061c:	4603      	mov	r3, r0
 800061e:	73fb      	strb	r3, [r7, #15]
	if(h < -font->sprite_hori || h >= horiRes
 8000620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	425b      	negs	r3, r3
 8000626:	68ba      	ldr	r2, [r7, #8]
 8000628:	429a      	cmp	r2, r3
 800062a:	f2c0 80a2 	blt.w	8000772 <renderChar+0x162>
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000634:	f280 809d 	bge.w	8000772 <renderChar+0x162>
		|| v < -font->sprite_vert || v >= vertRes) return;//sprite is outside visible area
 8000638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800063a:	785b      	ldrb	r3, [r3, #1]
 800063c:	425b      	negs	r3, r3
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	429a      	cmp	r2, r3
 8000642:	f2c0 8096 	blt.w	8000772 <renderChar+0x162>
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2bc7      	cmp	r3, #199	; 0xc7
 800064a:	f300 8092 	bgt.w	8000772 <renderChar+0x162>

	const uint8_t * data = font->data;
 800064e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000650:	3304      	adds	r3, #4
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t bitBuffer;
	uint8_t bitsRemaining;
	{
		uint32_t bitOffset = c * font->sprite_hori * font->sprite_vert + font->sprite_hori - 1;// 8 + 2
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000658:	7812      	ldrb	r2, [r2, #0]
 800065a:	fb02 f303 	mul.w	r3, r2, r3
 800065e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000660:	7852      	ldrb	r2, [r2, #1]
 8000662:	fb02 f303 	mul.w	r3, r2, r3
 8000666:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000668:	7812      	ldrb	r2, [r2, #0]
 800066a:	4413      	add	r3, r2
 800066c:	3b01      	subs	r3, #1
 800066e:	617b      	str	r3, [r7, #20]
		data += bitOffset / 8; // 0b10xx
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	08db      	lsrs	r3, r3, #3
 8000674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000676:	4413      	add	r3, r2
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
		bitsRemaining = 8 - bitOffset % 8;
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	f003 0307 	and.w	r3, r3, #7
 8000682:	b2db      	uxtb	r3, r3
 8000684:	f1c3 0308 	rsb	r3, r3, #8
 8000688:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		bitBuffer = *data >> (8 - bitsRemaining + 1);
 800068c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	461a      	mov	r2, r3
 8000692:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000696:	f1c3 0309 	rsb	r3, r3, #9
 800069a:	fa42 f303 	asr.w	r3, r2, r3
 800069e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	for(int vpx = 0; vpx <  font->sprite_vert; vpx++){
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
 80006a6:	e05d      	b.n	8000764 <renderChar+0x154>
		for(int hpx = 0; hpx <  font->sprite_hori; hpx++){
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
 80006ac:	e051      	b.n	8000752 <renderChar+0x142>
			if(bitsRemaining == 0){//out of pixel data load more
 80006ae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d109      	bne.n	80006ca <renderChar+0xba>
				bitBuffer = *data;
 80006b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				data++;
 80006be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c0:	3301      	adds	r3, #1
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
				bitsRemaining = 8;
 80006c4:	2308      	movs	r3, #8
 80006c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			}
			if(		!(v + vpx < 0 || v + vpx >= vertRes) &&//row is outside screen
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	69fb      	ldr	r3, [r7, #28]
 80006ce:	4413      	add	r3, r2
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	db31      	blt.n	8000738 <renderChar+0x128>
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	4413      	add	r3, r2
 80006da:	2bc7      	cmp	r3, #199	; 0xc7
 80006dc:	dc2c      	bgt.n	8000738 <renderChar+0x128>
					!(h + hpx < 0 || h + hpx >= horiRes)){ //pixel is outside screen
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	4413      	add	r3, r2
			if(		!(v + vpx < 0 || v + vpx >= vertRes) &&//row is outside screen
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	db27      	blt.n	8000738 <renderChar+0x128>
					!(h + hpx < 0 || h + hpx >= horiRes)){ //pixel is outside screen
 80006e8:	68ba      	ldr	r2, [r7, #8]
 80006ea:	69bb      	ldr	r3, [r7, #24]
 80006ec:	4413      	add	r3, r2
 80006ee:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80006f2:	da21      	bge.n	8000738 <renderChar+0x128>
				uint32_t pos = (v + vpx) * horiRes + h + hpx;
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	441a      	add	r2, r3
 80006fa:	4613      	mov	r3, r2
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	4413      	add	r3, r2
 8000700:	019b      	lsls	r3, r3, #6
 8000702:	461a      	mov	r2, r3
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	441a      	add	r2, r3
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	4413      	add	r3, r2
 800070c:	613b      	str	r3, [r7, #16]
				screenBuff[pos] = combineColors(screenBuff[pos], bitBuffer&1 ? forground : background);
 800070e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	2b00      	cmp	r3, #0
 8000718:	d002      	beq.n	8000720 <renderChar+0x110>
 800071a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800071e:	e000      	b.n	8000722 <renderChar+0x112>
 8000720:	7b3b      	ldrb	r3, [r7, #12]
 8000722:	4916      	ldr	r1, [pc, #88]	; (800077c <renderChar+0x16c>)
 8000724:	693a      	ldr	r2, [r7, #16]
 8000726:	188c      	adds	r4, r1, r2
 8000728:	4914      	ldr	r1, [pc, #80]	; (800077c <renderChar+0x16c>)
 800072a:	693a      	ldr	r2, [r7, #16]
 800072c:	440a      	add	r2, r1
 800072e:	4619      	mov	r1, r3
 8000730:	7810      	ldrb	r0, [r2, #0]
 8000732:	f7ff ff49 	bl	80005c8 <combineColors>
 8000736:	7020      	strb	r0, [r4, #0]
			}
			bitsRemaining--;
 8000738:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800073c:	3b01      	subs	r3, #1
 800073e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			bitBuffer >>= 1;
 8000742:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000746:	085b      	lsrs	r3, r3, #1
 8000748:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		for(int hpx = 0; hpx <  font->sprite_hori; hpx++){
 800074c:	69bb      	ldr	r3, [r7, #24]
 800074e:	3301      	adds	r3, #1
 8000750:	61bb      	str	r3, [r7, #24]
 8000752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	461a      	mov	r2, r3
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	4293      	cmp	r3, r2
 800075c:	dba7      	blt.n	80006ae <renderChar+0x9e>
	for(int vpx = 0; vpx <  font->sprite_vert; vpx++){
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3301      	adds	r3, #1
 8000762:	61fb      	str	r3, [r7, #28]
 8000764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000766:	785b      	ldrb	r3, [r3, #1]
 8000768:	461a      	mov	r2, r3
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	4293      	cmp	r3, r2
 800076e:	db9b      	blt.n	80006a8 <renderChar+0x98>
 8000770:	e000      	b.n	8000774 <renderChar+0x164>
		|| v < -font->sprite_vert || v >= vertRes) return;//sprite is outside visible area
 8000772:	bf00      	nop
		}
	}
}
 8000774:	372c      	adds	r7, #44	; 0x2c
 8000776:	46bd      	mov	sp, r7
 8000778:	bd90      	pop	{r4, r7, pc}
 800077a:	bf00      	nop
 800077c:	2000059c 	.word	0x2000059c

08000780 <renderString>:

void renderString(char * str, int h, int v, const Color background, const Color forground, const Sprite_map * font){
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af02      	add	r7, sp, #8
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
 800078c:	703b      	strb	r3, [r7, #0]
	while(*str != 0){
 800078e:	e014      	b.n	80007ba <renderString+0x3a>
		renderChar(*str, h, v, background, forground, font);
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	7818      	ldrb	r0, [r3, #0]
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	9301      	str	r3, [sp, #4]
 8000798:	7e3b      	ldrb	r3, [r7, #24]
 800079a:	f88d 3000 	strb.w	r3, [sp]
 800079e:	783b      	ldrb	r3, [r7, #0]
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	68b9      	ldr	r1, [r7, #8]
 80007a4:	f7ff ff34 	bl	8000610 <renderChar>
		h += font->sprite_hori;
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	4413      	add	r3, r2
 80007b2:	60bb      	str	r3, [r7, #8]
		str++;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	3301      	adds	r3, #1
 80007b8:	60fb      	str	r3, [r7, #12]
	while(*str != 0){
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d1e6      	bne.n	8000790 <renderString+0x10>
	}
}
 80007c2:	bf00      	nop
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <renderCharOnGrid>:


void renderCharOnGrid(char c, int h, int v, const Color background, const Color forground, const Sprite_map * font){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af02      	add	r7, sp, #8
 80007d2:	60b9      	str	r1, [r7, #8]
 80007d4:	607a      	str	r2, [r7, #4]
 80007d6:	733b      	strb	r3, [r7, #12]
 80007d8:	4603      	mov	r3, r0
 80007da:	73fb      	strb	r3, [r7, #15]
	renderChar(c, h*font->sprite_hori, v*font->sprite_vert, background, forground, font);
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	461a      	mov	r2, r3
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	fb03 f102 	mul.w	r1, r3, r2
 80007e8:	69fb      	ldr	r3, [r7, #28]
 80007ea:	785b      	ldrb	r3, [r3, #1]
 80007ec:	461a      	mov	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	fb03 f202 	mul.w	r2, r3, r2
 80007f4:	7bf8      	ldrb	r0, [r7, #15]
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	7e3b      	ldrb	r3, [r7, #24]
 80007fc:	f88d 3000 	strb.w	r3, [sp]
 8000800:	7b3b      	ldrb	r3, [r7, #12]
 8000802:	f7ff ff05 	bl	8000610 <renderChar>
}
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <HAL_TIM_PeriodElapsedCallback>:
	HAL_UART_Transmit(&huart2, (uint8_t*) str, sizeof(str), HAL_MAX_DELAY);
}

int lastLine = -100;
uint32_t profileCount = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	if(htim == &htim5){
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4a0f      	ldr	r2, [pc, #60]	; (8000858 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d116      	bne.n	800084e <HAL_TIM_PeriodElapsedCallback+0x3e>
		str_len = sprintf(str, "Profile %8lu ticks clock\t line %i\r\n", profileCount, lineCount);
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	490e      	ldr	r1, [pc, #56]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800082a:	480f      	ldr	r0, [pc, #60]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800082c:	f004 f90e 	bl	8004a4c <siprintf>
 8000830:	4603      	mov	r3, r0
 8000832:	b29a      	uxth	r2, r3
 8000834:	4b0d      	ldr	r3, [pc, #52]	; (800086c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000836:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800083a:	881a      	ldrh	r2, [r3, #0]
 800083c:	f04f 33ff 	mov.w	r3, #4294967295
 8000840:	4909      	ldr	r1, [pc, #36]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000842:	480b      	ldr	r0, [pc, #44]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000844:	f003 fcb9 	bl	80041ba <HAL_UART_Transmit>
		profileCount = 0;
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
	}
	return;
 800084e:	bf00      	nop
	if(htim == &htim5){
		timerReset();
	}else if(htim == &htim1){
		timerReset();
	}
}
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200000d4 	.word	0x200000d4
 800085c:	20000274 	.word	0x20000274
 8000860:	2000ffb0 	.word	0x2000ffb0
 8000864:	08005350 	.word	0x08005350
 8000868:	20000220 	.word	0x20000220
 800086c:	20000272 	.word	0x20000272
 8000870:	2000017c 	.word	0x2000017c

08000874 <getRainbowColor>:
const char cornerBottomLeft = 200;
const char cornerBottomRight = 188;
const char cornerVertical = 186;
const char cornerHorizontal = 205;

Color getRainbowColor(int h, int v){
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
	Color c = {(h+v) %64};
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	4413      	add	r3, r2
 8000884:	425a      	negs	r2, r3
 8000886:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800088a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800088e:	bf58      	it	pl
 8000890:	4253      	negpl	r3, r2
 8000892:	b2db      	uxtb	r3, r3
 8000894:	733b      	strb	r3, [r7, #12]
	return c;
 8000896:	7b3b      	ldrb	r3, [r7, #12]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3714      	adds	r7, #20
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <makeRainbow>:

void makeRainbow(){
 80008a4:	b5b0      	push	{r4, r5, r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
	for(int i = 0; i < vertRes; i++){//replaces black pixels with a rainbow pattern
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	e026      	b.n	80008fe <makeRainbow+0x5a>
		for(int j = 0; j < horiRes; j++){
 80008b0:	2300      	movs	r3, #0
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	e01c      	b.n	80008f0 <makeRainbow+0x4c>
			if(screenBuff[i*horiRes + j].value == 0){
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	4613      	mov	r3, r2
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	4413      	add	r3, r2
 80008be:	019b      	lsls	r3, r3, #6
 80008c0:	461a      	mov	r2, r3
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	4413      	add	r3, r2
 80008c6:	4a12      	ldr	r2, [pc, #72]	; (8000910 <makeRainbow+0x6c>)
 80008c8:	5cd3      	ldrb	r3, [r2, r3]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d10d      	bne.n	80008ea <makeRainbow+0x46>
				screenBuff[i*horiRes + j] = getRainbowColor(i, j);
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	4613      	mov	r3, r2
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	4413      	add	r3, r2
 80008d6:	019b      	lsls	r3, r3, #6
 80008d8:	461a      	mov	r2, r3
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	18d4      	adds	r4, r2, r3
 80008de:	4d0c      	ldr	r5, [pc, #48]	; (8000910 <makeRainbow+0x6c>)
 80008e0:	6839      	ldr	r1, [r7, #0]
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f7ff ffc6 	bl	8000874 <getRainbowColor>
 80008e8:	5528      	strb	r0, [r5, r4]
		for(int j = 0; j < horiRes; j++){
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	3301      	adds	r3, #1
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80008f6:	dbde      	blt.n	80008b6 <makeRainbow+0x12>
	for(int i = 0; i < vertRes; i++){//replaces black pixels with a rainbow pattern
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3301      	adds	r3, #1
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2bc7      	cmp	r3, #199	; 0xc7
 8000902:	ddd5      	ble.n	80008b0 <makeRainbow+0xc>
			}
		}
	}
}
 8000904:	bf00      	nop
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bdb0      	pop	{r4, r5, r7, pc}
 800090e:	bf00      	nop
 8000910:	2000059c 	.word	0x2000059c

08000914 <clearScreen>:

void clearScreen(){
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
	for(int i = 0; i < vertRes; i++){
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	e017      	b.n	8000950 <clearScreen+0x3c>
		for(int j = 0; j < horiRes; j++){
 8000920:	2300      	movs	r3, #0
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	e00d      	b.n	8000942 <clearScreen+0x2e>
			screenBuff[i*horiRes + j].value = 0b00111111;
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	4613      	mov	r3, r2
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	4413      	add	r3, r2
 800092e:	019b      	lsls	r3, r3, #6
 8000930:	461a      	mov	r2, r3
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	4413      	add	r3, r2
 8000936:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <clearScreen+0x50>)
 8000938:	213f      	movs	r1, #63	; 0x3f
 800093a:	54d1      	strb	r1, [r2, r3]
		for(int j = 0; j < horiRes; j++){
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	3301      	adds	r3, #1
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000948:	dbed      	blt.n	8000926 <clearScreen+0x12>
	for(int i = 0; i < vertRes; i++){
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3301      	adds	r3, #1
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2bc7      	cmp	r3, #199	; 0xc7
 8000954:	dde4      	ble.n	8000920 <clearScreen+0xc>
		}
	}
}
 8000956:	bf00      	nop
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	2000059c 	.word	0x2000059c

08000968 <makeBorders>:

void makeBorders(){
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af02      	add	r7, sp, #8
	int colums = horiRes / codepage_437.sprite_hori - 1;
 800096e:	4b43      	ldr	r3, [pc, #268]	; (8000a7c <makeBorders+0x114>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	461a      	mov	r2, r3
 8000974:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000978:	fb93 f3f2 	sdiv	r3, r3, r2
 800097c:	3b01      	subs	r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
	int rows = vertRes / codepage_437.sprite_vert - 1;
 8000980:	4b3e      	ldr	r3, [pc, #248]	; (8000a7c <makeBorders+0x114>)
 8000982:	785b      	ldrb	r3, [r3, #1]
 8000984:	461a      	mov	r2, r3
 8000986:	23c8      	movs	r3, #200	; 0xc8
 8000988:	fb93 f3f2 	sdiv	r3, r3, r2
 800098c:	3b01      	subs	r3, #1
 800098e:	60bb      	str	r3, [r7, #8]
	Color background = {0b11000000};
 8000990:	23c0      	movs	r3, #192	; 0xc0
 8000992:	713b      	strb	r3, [r7, #4]
	Color forground = {0};
 8000994:	2300      	movs	r3, #0
 8000996:	703b      	strb	r3, [r7, #0]
	renderCharOnGrid(cornerTopLeft, 0, 0, background, forground, &codepage_437);
 8000998:	20c9      	movs	r0, #201	; 0xc9
 800099a:	4b38      	ldr	r3, [pc, #224]	; (8000a7c <makeBorders+0x114>)
 800099c:	9301      	str	r3, [sp, #4]
 800099e:	783b      	ldrb	r3, [r7, #0]
 80009a0:	f88d 3000 	strb.w	r3, [sp]
 80009a4:	793b      	ldrb	r3, [r7, #4]
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	f7ff ff0f 	bl	80007cc <renderCharOnGrid>
	renderCharOnGrid(cornerTopRight, colums, 0, background, forground, &codepage_437);
 80009ae:	20bb      	movs	r0, #187	; 0xbb
 80009b0:	4b32      	ldr	r3, [pc, #200]	; (8000a7c <makeBorders+0x114>)
 80009b2:	9301      	str	r3, [sp, #4]
 80009b4:	783b      	ldrb	r3, [r7, #0]
 80009b6:	f88d 3000 	strb.w	r3, [sp]
 80009ba:	793b      	ldrb	r3, [r7, #4]
 80009bc:	2200      	movs	r2, #0
 80009be:	68f9      	ldr	r1, [r7, #12]
 80009c0:	f7ff ff04 	bl	80007cc <renderCharOnGrid>
	renderCharOnGrid(cornerBottomLeft, 0, rows, background, forground, &codepage_437);
 80009c4:	20c8      	movs	r0, #200	; 0xc8
 80009c6:	4b2d      	ldr	r3, [pc, #180]	; (8000a7c <makeBorders+0x114>)
 80009c8:	9301      	str	r3, [sp, #4]
 80009ca:	783b      	ldrb	r3, [r7, #0]
 80009cc:	f88d 3000 	strb.w	r3, [sp]
 80009d0:	793b      	ldrb	r3, [r7, #4]
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	2100      	movs	r1, #0
 80009d6:	f7ff fef9 	bl	80007cc <renderCharOnGrid>
	renderCharOnGrid(cornerBottomRight, colums, rows, background, forground, &codepage_437);
 80009da:	20bc      	movs	r0, #188	; 0xbc
 80009dc:	4b27      	ldr	r3, [pc, #156]	; (8000a7c <makeBorders+0x114>)
 80009de:	9301      	str	r3, [sp, #4]
 80009e0:	783b      	ldrb	r3, [r7, #0]
 80009e2:	f88d 3000 	strb.w	r3, [sp]
 80009e6:	793b      	ldrb	r3, [r7, #4]
 80009e8:	68ba      	ldr	r2, [r7, #8]
 80009ea:	68f9      	ldr	r1, [r7, #12]
 80009ec:	f7ff feee 	bl	80007cc <renderCharOnGrid>
	for(int i = 1; i < colums; i++){
 80009f0:	2301      	movs	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	e018      	b.n	8000a28 <makeBorders+0xc0>
		renderCharOnGrid(cornerHorizontal, i, 0, background, forground, &codepage_437);
 80009f6:	20cd      	movs	r0, #205	; 0xcd
 80009f8:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <makeBorders+0x114>)
 80009fa:	9301      	str	r3, [sp, #4]
 80009fc:	783b      	ldrb	r3, [r7, #0]
 80009fe:	f88d 3000 	strb.w	r3, [sp]
 8000a02:	793b      	ldrb	r3, [r7, #4]
 8000a04:	2200      	movs	r2, #0
 8000a06:	6979      	ldr	r1, [r7, #20]
 8000a08:	f7ff fee0 	bl	80007cc <renderCharOnGrid>
		renderCharOnGrid(cornerHorizontal, i, rows, background, forground, &codepage_437);
 8000a0c:	20cd      	movs	r0, #205	; 0xcd
 8000a0e:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <makeBorders+0x114>)
 8000a10:	9301      	str	r3, [sp, #4]
 8000a12:	783b      	ldrb	r3, [r7, #0]
 8000a14:	f88d 3000 	strb.w	r3, [sp]
 8000a18:	793b      	ldrb	r3, [r7, #4]
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	6979      	ldr	r1, [r7, #20]
 8000a1e:	f7ff fed5 	bl	80007cc <renderCharOnGrid>
	for(int i = 1; i < colums; i++){
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	3301      	adds	r3, #1
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	697a      	ldr	r2, [r7, #20]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	dbe2      	blt.n	80009f6 <makeBorders+0x8e>
	}
	for(int i = 1; i < rows; i++){
 8000a30:	2301      	movs	r3, #1
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	e018      	b.n	8000a68 <makeBorders+0x100>
		renderCharOnGrid(cornerVertical, 0, i, background, forground, &codepage_437);
 8000a36:	20ba      	movs	r0, #186	; 0xba
 8000a38:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <makeBorders+0x114>)
 8000a3a:	9301      	str	r3, [sp, #4]
 8000a3c:	783b      	ldrb	r3, [r7, #0]
 8000a3e:	f88d 3000 	strb.w	r3, [sp]
 8000a42:	793b      	ldrb	r3, [r7, #4]
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	2100      	movs	r1, #0
 8000a48:	f7ff fec0 	bl	80007cc <renderCharOnGrid>
		renderCharOnGrid(cornerVertical, colums, i, background, forground, &codepage_437);
 8000a4c:	20ba      	movs	r0, #186	; 0xba
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <makeBorders+0x114>)
 8000a50:	9301      	str	r3, [sp, #4]
 8000a52:	783b      	ldrb	r3, [r7, #0]
 8000a54:	f88d 3000 	strb.w	r3, [sp]
 8000a58:	793b      	ldrb	r3, [r7, #4]
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	68f9      	ldr	r1, [r7, #12]
 8000a5e:	f7ff feb5 	bl	80007cc <renderCharOnGrid>
	for(int i = 1; i < rows; i++){
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	3301      	adds	r3, #1
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	dbe2      	blt.n	8000a36 <makeBorders+0xce>
	}
	makeRainbow();
 8000a70:	f7ff ff18 	bl	80008a4 <makeRainbow>
}
 8000a74:	bf00      	nop
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	0800540c 	.word	0x0800540c

08000a80 <runTTY>:

void runTTY(){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08e      	sub	sp, #56	; 0x38
 8000a84:	af02      	add	r7, sp, #8
	int init = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c

	Color background = {0b00111111};
 8000a8a:	233f      	movs	r3, #63	; 0x3f
 8000a8c:	743b      	strb	r3, [r7, #16]
	Color forground = {0};
 8000a8e:	2300      	movs	r3, #0
 8000a90:	733b      	strb	r3, [r7, #12]

	int colums = horiRes / codepage_437.sprite_hori - 1;
 8000a92:	4b5e      	ldr	r3, [pc, #376]	; (8000c0c <runTTY+0x18c>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	461a      	mov	r2, r3
 8000a98:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	61fb      	str	r3, [r7, #28]
	int rows = vertRes / codepage_437.sprite_vert - 1;
 8000aa4:	4b59      	ldr	r3, [pc, #356]	; (8000c0c <runTTY+0x18c>)
 8000aa6:	785b      	ldrb	r3, [r3, #1]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	23c8      	movs	r3, #200	; 0xc8
 8000aac:	fb93 f3f2 	sdiv	r3, r3, r2
 8000ab0:	3b01      	subs	r3, #1
 8000ab2:	61bb      	str	r3, [r7, #24]
	int h = 1, v = 1;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ab8:	2301      	movs	r3, #1
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24

	char toPrint;

	char rainbowModeTrigger[] = "rainbow";
 8000abc:	4a54      	ldr	r2, [pc, #336]	; (8000c10 <runTTY+0x190>)
 8000abe:	463b      	mov	r3, r7
 8000ac0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ac4:	e883 0003 	stmia.w	r3, {r0, r1}
	char *rainbowActivationTracker = rainbowModeTrigger;
 8000ac8:	463b      	mov	r3, r7
 8000aca:	623b      	str	r3, [r7, #32]

	while(1){
		HAL_StatusTypeDef resStatus = HAL_UART_Receive(&huart2, (uint8_t*)&toPrint, 1, HAL_MAX_DELAY);
 8000acc:	f107 010b 	add.w	r1, r7, #11
 8000ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	484f      	ldr	r0, [pc, #316]	; (8000c14 <runTTY+0x194>)
 8000ad8:	f003 fc01 	bl	80042de <HAL_UART_Receive>
 8000adc:	4603      	mov	r3, r0
 8000ade:	75fb      	strb	r3, [r7, #23]
		uint16_t charCode = toPrint;
 8000ae0:	7afb      	ldrb	r3, [r7, #11]
 8000ae2:	82bb      	strh	r3, [r7, #20]
		str_len = sprintf(str, "\r\nRecived byte %c code %u HAL %u\r\n", toPrint, charCode, (uint16_t)resStatus);
 8000ae4:	7afb      	ldrb	r3, [r7, #11]
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	8aba      	ldrh	r2, [r7, #20]
 8000aea:	7dfb      	ldrb	r3, [r7, #23]
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	4613      	mov	r3, r2
 8000af0:	460a      	mov	r2, r1
 8000af2:	4949      	ldr	r1, [pc, #292]	; (8000c18 <runTTY+0x198>)
 8000af4:	4849      	ldr	r0, [pc, #292]	; (8000c1c <runTTY+0x19c>)
 8000af6:	f003 ffa9 	bl	8004a4c <siprintf>
 8000afa:	4603      	mov	r3, r0
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	4b48      	ldr	r3, [pc, #288]	; (8000c20 <runTTY+0x1a0>)
 8000b00:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8000b02:	4b47      	ldr	r3, [pc, #284]	; (8000c20 <runTTY+0x1a0>)
 8000b04:	881a      	ldrh	r2, [r3, #0]
 8000b06:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0a:	4944      	ldr	r1, [pc, #272]	; (8000c1c <runTTY+0x19c>)
 8000b0c:	4841      	ldr	r0, [pc, #260]	; (8000c14 <runTTY+0x194>)
 8000b0e:	f003 fb54 	bl	80041ba <HAL_UART_Transmit>

		if(init == 0){//clear the screen and draw the window border
 8000b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d105      	bne.n	8000b24 <runTTY+0xa4>
			init = 1;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			clearScreen();
 8000b1c:	f7ff fefa 	bl	8000914 <clearScreen>
			makeBorders();
 8000b20:	f7ff ff22 	bl	8000968 <makeBorders>
		}


		if(toPrint == 13){//newline
 8000b24:	7afb      	ldrb	r3, [r7, #11]
 8000b26:	2b0d      	cmp	r3, #13
 8000b28:	d105      	bne.n	8000b36 <runTTY+0xb6>
			v++;
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
			h = 1;
 8000b30:	2301      	movs	r3, #1
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b34:	e02e      	b.n	8000b94 <runTTY+0x114>
		}else if(toPrint == 127){//backspace
 8000b36:	7afb      	ldrb	r3, [r7, #11]
 8000b38:	2b7f      	cmp	r3, #127	; 0x7f
 8000b3a:	d11d      	bne.n	8000b78 <runTTY+0xf8>
			h--;
 8000b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
			if(h == 0){//beginning of line
 8000b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d105      	bne.n	8000b54 <runTTY+0xd4>
				h = colums - 1;
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
				v--;
 8000b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b50:	3b01      	subs	r3, #1
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
			}
			if(v == 0){//beginning of screen
 8000b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d102      	bne.n	8000b60 <runTTY+0xe0>
				v = rows - 1;
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	3b01      	subs	r3, #1
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
			}
			renderCharOnGrid(' ', h, v, background, forground, &codepage_437);
 8000b60:	4b2a      	ldr	r3, [pc, #168]	; (8000c0c <runTTY+0x18c>)
 8000b62:	9301      	str	r3, [sp, #4]
 8000b64:	7b3b      	ldrb	r3, [r7, #12]
 8000b66:	f88d 3000 	strb.w	r3, [sp]
 8000b6a:	7c3b      	ldrb	r3, [r7, #16]
 8000b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000b70:	2020      	movs	r0, #32
 8000b72:	f7ff fe2b 	bl	80007cc <renderCharOnGrid>
 8000b76:	e00d      	b.n	8000b94 <runTTY+0x114>
		}else{//print char
			renderCharOnGrid(toPrint, h, v, background, forground, &codepage_437);
 8000b78:	7af8      	ldrb	r0, [r7, #11]
 8000b7a:	4b24      	ldr	r3, [pc, #144]	; (8000c0c <runTTY+0x18c>)
 8000b7c:	9301      	str	r3, [sp, #4]
 8000b7e:	7b3b      	ldrb	r3, [r7, #12]
 8000b80:	f88d 3000 	strb.w	r3, [sp]
 8000b84:	7c3b      	ldrb	r3, [r7, #16]
 8000b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000b8a:	f7ff fe1f 	bl	80007cc <renderCharOnGrid>
			h++;
 8000b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b90:	3301      	adds	r3, #1
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		if(h >= colums){//line wrap
 8000b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	db04      	blt.n	8000ba6 <runTTY+0x126>
			v++;
 8000b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
			h = 1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		if(v >= rows){//screen wrap
 8000ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	db01      	blt.n	8000bb2 <runTTY+0x132>
			v = 1;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
		}

		if(toPrint == *rainbowActivationTracker){//replace all black text with rainbow text
 8000bb2:	6a3b      	ldr	r3, [r7, #32]
 8000bb4:	781a      	ldrb	r2, [r3, #0]
 8000bb6:	7afb      	ldrb	r3, [r7, #11]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d123      	bne.n	8000c04 <runTTY+0x184>
			rainbowActivationTracker++;
 8000bbc:	6a3b      	ldr	r3, [r7, #32]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	623b      	str	r3, [r7, #32]
			str_len = sprintf(str, "\r\nNext activation char %c step %i\r\n", *rainbowActivationTracker, (rainbowActivationTracker - rainbowModeTrigger));
 8000bc2:	6a3b      	ldr	r3, [r7, #32]
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	463b      	mov	r3, r7
 8000bca:	6a3a      	ldr	r2, [r7, #32]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	460a      	mov	r2, r1
 8000bd0:	4914      	ldr	r1, [pc, #80]	; (8000c24 <runTTY+0x1a4>)
 8000bd2:	4812      	ldr	r0, [pc, #72]	; (8000c1c <runTTY+0x19c>)
 8000bd4:	f003 ff3a 	bl	8004a4c <siprintf>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	b29a      	uxth	r2, r3
 8000bdc:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <runTTY+0x1a0>)
 8000bde:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <runTTY+0x1a0>)
 8000be2:	881a      	ldrh	r2, [r3, #0]
 8000be4:	f04f 33ff 	mov.w	r3, #4294967295
 8000be8:	490c      	ldr	r1, [pc, #48]	; (8000c1c <runTTY+0x19c>)
 8000bea:	480a      	ldr	r0, [pc, #40]	; (8000c14 <runTTY+0x194>)
 8000bec:	f003 fae5 	bl	80041ba <HAL_UART_Transmit>
			if(*rainbowActivationTracker == '\0'){
 8000bf0:	6a3b      	ldr	r3, [r7, #32]
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	f47f af69 	bne.w	8000acc <runTTY+0x4c>
				rainbowActivationTracker = rainbowModeTrigger;
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	623b      	str	r3, [r7, #32]
				makeRainbow();
 8000bfe:	f7ff fe51 	bl	80008a4 <makeRainbow>
 8000c02:	e763      	b.n	8000acc <runTTY+0x4c>
			}
		}else{
			rainbowActivationTracker = rainbowModeTrigger;
 8000c04:	463b      	mov	r3, r7
 8000c06:	623b      	str	r3, [r7, #32]
	while(1){
 8000c08:	e760      	b.n	8000acc <runTTY+0x4c>
 8000c0a:	bf00      	nop
 8000c0c:	0800540c 	.word	0x0800540c
 8000c10:	080053bc 	.word	0x080053bc
 8000c14:	2000017c 	.word	0x2000017c
 8000c18:	08005374 	.word	0x08005374
 8000c1c:	20000220 	.word	0x20000220
 8000c20:	20000272 	.word	0x20000272
 8000c24:	08005398 	.word	0x08005398

08000c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b0a4      	sub	sp, #144	; 0x90
 8000c2c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c2e:	f000 ff23 	bl	8001a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c32:	f000 f981 	bl	8000f38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c36:	f000 fb59 	bl	80012ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000c3a:	f000 faff 	bl	800123c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c3e:	f000 fad3 	bl	80011e8 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8000c42:	f000 fa83 	bl	800114c <MX_TIM5_Init>
  MX_TIM1_Init();
 8000c46:	f000 f9e1 	bl	800100c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	char str[81] = { '\0' };
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	f107 0310 	add.w	r3, r7, #16
 8000c52:	224d      	movs	r2, #77	; 0x4d
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f003 fef0 	bl	8004a3c <memset>
	uint16_t str_len = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	str_len = sprintf(str, "Starting up!\r\n");
 8000c62:	f107 030c 	add.w	r3, r7, #12
 8000c66:	49a7      	ldr	r1, [pc, #668]	; (8000f04 <main+0x2dc>)
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f003 feef 	bl	8004a4c <siprintf>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8000c74:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8000c78:	f107 010c 	add.w	r1, r7, #12
 8000c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c80:	48a1      	ldr	r0, [pc, #644]	; (8000f08 <main+0x2e0>)
 8000c82:	f003 fa9a 	bl	80041ba <HAL_UART_Transmit>

	vgaSetup(&htim1, &hdma_tim1_up, &hdma_memtomem_dma2_stream0, vgaPin13_Vsync_GPIO_Port, vgaPin13_Vsync_Pin);
 8000c86:	2302      	movs	r3, #2
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	4ba0      	ldr	r3, [pc, #640]	; (8000f0c <main+0x2e4>)
 8000c8c:	4aa0      	ldr	r2, [pc, #640]	; (8000f10 <main+0x2e8>)
 8000c8e:	49a1      	ldr	r1, [pc, #644]	; (8000f14 <main+0x2ec>)
 8000c90:	48a1      	ldr	r0, [pc, #644]	; (8000f18 <main+0x2f0>)
 8000c92:	f000 fe01 	bl	8001898 <vgaSetup>
	registerHUARTvga(&huart2);
 8000c96:	489c      	ldr	r0, [pc, #624]	; (8000f08 <main+0x2e0>)
 8000c98:	f000 fd6c 	bl	8001774 <registerHUARTvga>

	vgaStart();//start VGA driver
 8000c9c:	f000 fe82 	bl	80019a4 <vgaStart>
	HAL_Delay(5000);//delay rendering for monitor sync
 8000ca0:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ca4:	f000 ff5a 	bl	8001b5c <HAL_Delay>

	for(int i = 0; i < vertRes; i++){//load a rainbow test pattern
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000cae:	e03d      	b.n	8000d2c <main+0x104>
		for(int j = 0; j < horiRes; j++){
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000cb6:	e011      	b.n	8000cdc <main+0xb4>
			screenBuff[i*horiRes + j].value = 0b00111111;
 8000cb8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	4413      	add	r3, r2
 8000cc2:	019b      	lsls	r3, r3, #6
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000cca:	4413      	add	r3, r2
 8000ccc:	4a93      	ldr	r2, [pc, #588]	; (8000f1c <main+0x2f4>)
 8000cce:	213f      	movs	r1, #63	; 0x3f
 8000cd0:	54d1      	strb	r1, [r2, r3]
		for(int j = 0; j < horiRes; j++){
 8000cd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000cdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ce0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000ce4:	dbe8      	blt.n	8000cb8 <main+0x90>
			//screenBuff[i*vertRes + j].value = j & 0b111111;
		}
		for(int j = 0; j<64;j++){
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000cea:	e017      	b.n	8000d1c <main+0xf4>
			screenBuff[i*horiRes + 8 + j].value = 0b00000000 + j%64;// + ((j%4)<<2) + ((j%4)<<4);
 8000cec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000cee:	4259      	negs	r1, r3
 8000cf0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000cf4:	f001 033f 	and.w	r3, r1, #63	; 0x3f
 8000cf8:	bf58      	it	pl
 8000cfa:	425a      	negpl	r2, r3
 8000cfc:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8000d00:	460b      	mov	r3, r1
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	440b      	add	r3, r1
 8000d06:	019b      	lsls	r3, r3, #6
 8000d08:	f103 0108 	add.w	r1, r3, #8
 8000d0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d0e:	440b      	add	r3, r1
 8000d10:	b2d1      	uxtb	r1, r2
 8000d12:	4a82      	ldr	r2, [pc, #520]	; (8000f1c <main+0x2f4>)
 8000d14:	54d1      	strb	r1, [r2, r3]
		for(int j = 0; j<64;j++){
 8000d16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d18:	3301      	adds	r3, #1
 8000d1a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000d1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d1e:	2b3f      	cmp	r3, #63	; 0x3f
 8000d20:	dde4      	ble.n	8000cec <main+0xc4>
	for(int i = 0; i < vertRes; i++){//load a rainbow test pattern
 8000d22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d26:	3301      	adds	r3, #1
 8000d28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000d2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d30:	2bc7      	cmp	r3, #199	; 0xc7
 8000d32:	ddbd      	ble.n	8000cb0 <main+0x88>
		}
	}

	//Write test text
	Color black;
	setRGB(&black, 00, 00, 00);
 8000d34:	f107 0008 	add.w	r0, r7, #8
 8000d38:	2300      	movs	r3, #0
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	f7ff fc21 	bl	8000584 <setRGB>
	Color transparant;
	transparant.value = 0b11000000;
 8000d42:	23c0      	movs	r3, #192	; 0xc0
 8000d44:	713b      	strb	r3, [r7, #4]
	//vgaUpscale;
	int h = 10, w = 30, x = 64+8+8, y = 10;
 8000d46:	230a      	movs	r3, #10
 8000d48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000d4a:	231e      	movs	r3, #30
 8000d4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8000d4e:	2350      	movs	r3, #80	; 0x50
 8000d50:	667b      	str	r3, [r7, #100]	; 0x64
 8000d52:	230a      	movs	r3, #10
 8000d54:	663b      	str	r3, [r7, #96]	; 0x60
	for(int i = y; i < vertRes && i < y+h; i++){//render a black rectangle
 8000d56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d58:	67bb      	str	r3, [r7, #120]	; 0x78
 8000d5a:	e01d      	b.n	8000d98 <main+0x170>
		for(int j = x; j < horiRes && j < x+w; j++){
 8000d5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d5e:	677b      	str	r3, [r7, #116]	; 0x74
 8000d60:	e00d      	b.n	8000d7e <main+0x156>
			screenBuff[i*horiRes + j] = black;
 8000d62:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000d64:	4613      	mov	r3, r2
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4413      	add	r3, r2
 8000d6a:	019b      	lsls	r3, r3, #6
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d70:	4413      	add	r3, r2
 8000d72:	496a      	ldr	r1, [pc, #424]	; (8000f1c <main+0x2f4>)
 8000d74:	7a3a      	ldrb	r2, [r7, #8]
 8000d76:	54ca      	strb	r2, [r1, r3]
		for(int j = x; j < horiRes && j < x+w; j++){
 8000d78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	677b      	str	r3, [r7, #116]	; 0x74
 8000d7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d80:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000d84:	da05      	bge.n	8000d92 <main+0x16a>
 8000d86:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000d88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d8a:	4413      	add	r3, r2
 8000d8c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	dbe7      	blt.n	8000d62 <main+0x13a>
	for(int i = y; i < vertRes && i < y+h; i++){//render a black rectangle
 8000d92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d94:	3301      	adds	r3, #1
 8000d96:	67bb      	str	r3, [r7, #120]	; 0x78
 8000d98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d9a:	2bc7      	cmp	r3, #199	; 0xc7
 8000d9c:	dc05      	bgt.n	8000daa <main+0x182>
 8000d9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000da2:	4413      	add	r3, r2
 8000da4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000da6:	429a      	cmp	r2, r3
 8000da8:	dbd8      	blt.n	8000d5c <main+0x134>
		}
	}
	y+=codepage_437.sprite_vert;
 8000daa:	4b5d      	ldr	r3, [pc, #372]	; (8000f20 <main+0x2f8>)
 8000dac:	785b      	ldrb	r3, [r3, #1]
 8000dae:	461a      	mov	r2, r3
 8000db0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000db2:	4413      	add	r3, r2
 8000db4:	663b      	str	r3, [r7, #96]	; 0x60
	//renderString(str, h, v, background, forground)
	renderString("Hi", x, y, transparant, black, &codepage_437);
 8000db6:	4b5a      	ldr	r3, [pc, #360]	; (8000f20 <main+0x2f8>)
 8000db8:	9301      	str	r3, [sp, #4]
 8000dba:	7a3b      	ldrb	r3, [r7, #8]
 8000dbc:	f88d 3000 	strb.w	r3, [sp]
 8000dc0:	793b      	ldrb	r3, [r7, #4]
 8000dc2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000dc4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000dc6:	4857      	ldr	r0, [pc, #348]	; (8000f24 <main+0x2fc>)
 8000dc8:	f7ff fcda 	bl	8000780 <renderString>

	y+=codepage_437.sprite_vert;
 8000dcc:	4b54      	ldr	r3, [pc, #336]	; (8000f20 <main+0x2f8>)
 8000dce:	785b      	ldrb	r3, [r3, #1]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000dd4:	4413      	add	r3, r2
 8000dd6:	663b      	str	r3, [r7, #96]	; 0x60
	renderString("Hello world!", x, y, transparant, black, &codepage_437);
 8000dd8:	4b51      	ldr	r3, [pc, #324]	; (8000f20 <main+0x2f8>)
 8000dda:	9301      	str	r3, [sp, #4]
 8000ddc:	7a3b      	ldrb	r3, [r7, #8]
 8000dde:	f88d 3000 	strb.w	r3, [sp]
 8000de2:	793b      	ldrb	r3, [r7, #4]
 8000de4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000de6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000de8:	484f      	ldr	r0, [pc, #316]	; (8000f28 <main+0x300>)
 8000dea:	f7ff fcc9 	bl	8000780 <renderString>
	y+=codepage_437.sprite_vert;
 8000dee:	4b4c      	ldr	r3, [pc, #304]	; (8000f20 <main+0x2f8>)
 8000df0:	785b      	ldrb	r3, [r3, #1]
 8000df2:	461a      	mov	r2, r3
 8000df4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000df6:	4413      	add	r3, r2
 8000df8:	663b      	str	r3, [r7, #96]	; 0x60
	renderString("Press <any> key for TTY", x, y, transparant, black, &codepage_437);
 8000dfa:	4b49      	ldr	r3, [pc, #292]	; (8000f20 <main+0x2f8>)
 8000dfc:	9301      	str	r3, [sp, #4]
 8000dfe:	7a3b      	ldrb	r3, [r7, #8]
 8000e00:	f88d 3000 	strb.w	r3, [sp]
 8000e04:	793b      	ldrb	r3, [r7, #4]
 8000e06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e08:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000e0a:	4848      	ldr	r0, [pc, #288]	; (8000f2c <main+0x304>)
 8000e0c:	f7ff fcb8 	bl	8000780 <renderString>
	y+=codepage_437.sprite_vert;
 8000e10:	4b43      	ldr	r3, [pc, #268]	; (8000f20 <main+0x2f8>)
 8000e12:	785b      	ldrb	r3, [r3, #1]
 8000e14:	461a      	mov	r2, r3
 8000e16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e18:	4413      	add	r3, r2
 8000e1a:	663b      	str	r3, [r7, #96]	; 0x60
	renderChar(177, x, y, transparant, black, &codepage_437);
 8000e1c:	4b40      	ldr	r3, [pc, #256]	; (8000f20 <main+0x2f8>)
 8000e1e:	9301      	str	r3, [sp, #4]
 8000e20:	7a3b      	ldrb	r3, [r7, #8]
 8000e22:	f88d 3000 	strb.w	r3, [sp]
 8000e26:	793b      	ldrb	r3, [r7, #4]
 8000e28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e2a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000e2c:	20b1      	movs	r0, #177	; 0xb1
 8000e2e:	f7ff fbef 	bl	8000610 <renderChar>

	y+=codepage_437.sprite_vert;//test patterns
 8000e32:	4b3b      	ldr	r3, [pc, #236]	; (8000f20 <main+0x2f8>)
 8000e34:	785b      	ldrb	r3, [r3, #1]
 8000e36:	461a      	mov	r2, r3
 8000e38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e3a:	4413      	add	r3, r2
 8000e3c:	663b      	str	r3, [r7, #96]	; 0x60
	renderChar(201, x, y, transparant, black, &codepage_437);
 8000e3e:	4b38      	ldr	r3, [pc, #224]	; (8000f20 <main+0x2f8>)
 8000e40:	9301      	str	r3, [sp, #4]
 8000e42:	7a3b      	ldrb	r3, [r7, #8]
 8000e44:	f88d 3000 	strb.w	r3, [sp]
 8000e48:	793b      	ldrb	r3, [r7, #4]
 8000e4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e4c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000e4e:	20c9      	movs	r0, #201	; 0xc9
 8000e50:	f7ff fbde 	bl	8000610 <renderChar>
	renderChar(187, x + codepage_437.sprite_hori, y, transparant, black, &codepage_437);
 8000e54:	4b32      	ldr	r3, [pc, #200]	; (8000f20 <main+0x2f8>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e5c:	18d1      	adds	r1, r2, r3
 8000e5e:	4b30      	ldr	r3, [pc, #192]	; (8000f20 <main+0x2f8>)
 8000e60:	9301      	str	r3, [sp, #4]
 8000e62:	7a3b      	ldrb	r3, [r7, #8]
 8000e64:	f88d 3000 	strb.w	r3, [sp]
 8000e68:	793b      	ldrb	r3, [r7, #4]
 8000e6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e6c:	20bb      	movs	r0, #187	; 0xbb
 8000e6e:	f7ff fbcf 	bl	8000610 <renderChar>
	renderChar(186, x + 2*codepage_437.sprite_hori, y, transparant, black, &codepage_437);
 8000e72:	4b2b      	ldr	r3, [pc, #172]	; (8000f20 <main+0x2f8>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	005a      	lsls	r2, r3, #1
 8000e78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e7a:	18d1      	adds	r1, r2, r3
 8000e7c:	4b28      	ldr	r3, [pc, #160]	; (8000f20 <main+0x2f8>)
 8000e7e:	9301      	str	r3, [sp, #4]
 8000e80:	7a3b      	ldrb	r3, [r7, #8]
 8000e82:	f88d 3000 	strb.w	r3, [sp]
 8000e86:	793b      	ldrb	r3, [r7, #4]
 8000e88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e8a:	20ba      	movs	r0, #186	; 0xba
 8000e8c:	f7ff fbc0 	bl	8000610 <renderChar>
	y+=codepage_437.sprite_vert;
 8000e90:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <main+0x2f8>)
 8000e92:	785b      	ldrb	r3, [r3, #1]
 8000e94:	461a      	mov	r2, r3
 8000e96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e98:	4413      	add	r3, r2
 8000e9a:	663b      	str	r3, [r7, #96]	; 0x60
	renderChar(200, x, y, transparant, black, &codepage_437);
 8000e9c:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <main+0x2f8>)
 8000e9e:	9301      	str	r3, [sp, #4]
 8000ea0:	7a3b      	ldrb	r3, [r7, #8]
 8000ea2:	f88d 3000 	strb.w	r3, [sp]
 8000ea6:	793b      	ldrb	r3, [r7, #4]
 8000ea8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000eaa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000eac:	20c8      	movs	r0, #200	; 0xc8
 8000eae:	f7ff fbaf 	bl	8000610 <renderChar>
	renderChar(188, x + codepage_437.sprite_hori, y, transparant, black, &codepage_437);
 8000eb2:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <main+0x2f8>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000eba:	18d1      	adds	r1, r2, r3
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <main+0x2f8>)
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	7a3b      	ldrb	r3, [r7, #8]
 8000ec2:	f88d 3000 	strb.w	r3, [sp]
 8000ec6:	793b      	ldrb	r3, [r7, #4]
 8000ec8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000eca:	20bc      	movs	r0, #188	; 0xbc
 8000ecc:	f7ff fba0 	bl	8000610 <renderChar>

	str_len = sprintf(str, "\r\nDone\r\n");
 8000ed0:	f107 030c 	add.w	r3, r7, #12
 8000ed4:	4916      	ldr	r1, [pc, #88]	; (8000f30 <main+0x308>)
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f003 fdb8 	bl	8004a4c <siprintf>
 8000edc:	4603      	mov	r3, r0
 8000ede:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8000ee2:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8000ee6:	f107 010c 	add.w	r1, r7, #12
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
 8000eee:	4806      	ldr	r0, [pc, #24]	; (8000f08 <main+0x2e0>)
 8000ef0:	f003 f963 	bl	80041ba <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	runTTY();
 8000ef4:	f7ff fdc4 	bl	8000a80 <runTTY>
	while (1)
	{
		profileCount++;
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <main+0x30c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	3301      	adds	r3, #1
 8000efe:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <main+0x30c>)
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	e7f9      	b.n	8000ef8 <main+0x2d0>
 8000f04:	080053c4 	.word	0x080053c4
 8000f08:	2000017c 	.word	0x2000017c
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	200001c0 	.word	0x200001c0
 8000f14:	2000011c 	.word	0x2000011c
 8000f18:	2000008c 	.word	0x2000008c
 8000f1c:	2000059c 	.word	0x2000059c
 8000f20:	0800540c 	.word	0x0800540c
 8000f24:	080053d4 	.word	0x080053d4
 8000f28:	080053d8 	.word	0x080053d8
 8000f2c:	080053e8 	.word	0x080053e8
 8000f30:	08005400 	.word	0x08005400
 8000f34:	20000274 	.word	0x20000274

08000f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b094      	sub	sp, #80	; 0x50
 8000f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3e:	f107 0320 	add.w	r3, r7, #32
 8000f42:	2230      	movs	r2, #48	; 0x30
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f003 fd78 	bl	8004a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	4b28      	ldr	r3, [pc, #160]	; (8001004 <SystemClock_Config+0xcc>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	4a27      	ldr	r2, [pc, #156]	; (8001004 <SystemClock_Config+0xcc>)
 8000f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6c:	4b25      	ldr	r3, [pc, #148]	; (8001004 <SystemClock_Config+0xcc>)
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f78:	2300      	movs	r3, #0
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	4b22      	ldr	r3, [pc, #136]	; (8001008 <SystemClock_Config+0xd0>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f84:	4a20      	ldr	r2, [pc, #128]	; (8001008 <SystemClock_Config+0xd0>)
 8000f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <SystemClock_Config+0xd0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa0:	2310      	movs	r3, #16
 8000fa2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fac:	2308      	movs	r3, #8
 8000fae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 151;
 8000fb0:	2397      	movs	r3, #151	; 0x97
 8000fb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fb8:	2307      	movs	r3, #7
 8000fba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fbc:	f107 0320 	add.w	r3, r7, #32
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f001 fc63 	bl	800288c <HAL_RCC_OscConfig>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fcc:	f000 fa20 	bl	8001410 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	2102      	movs	r1, #2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f001 fec5 	bl	8002d7c <HAL_RCC_ClockConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ff8:	f000 fa0a 	bl	8001410 <Error_Handler>
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	3750      	adds	r7, #80	; 0x50
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40023800 	.word	0x40023800
 8001008:	40007000 	.word	0x40007000

0800100c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b096      	sub	sp, #88	; 0x58
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001012:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001020:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800102a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]
 800103a:	615a      	str	r2, [r3, #20]
 800103c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2220      	movs	r2, #32
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f003 fcf9 	bl	8004a3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800104a:	4b3e      	ldr	r3, [pc, #248]	; (8001144 <MX_TIM1_Init+0x138>)
 800104c:	4a3e      	ldr	r2, [pc, #248]	; (8001148 <MX_TIM1_Init+0x13c>)
 800104e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = vgaUpscale-1;
 8001050:	4b3c      	ldr	r3, [pc, #240]	; (8001144 <MX_TIM1_Init+0x138>)
 8001052:	2201      	movs	r2, #1
 8001054:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001056:	4b3b      	ldr	r3, [pc, #236]	; (8001144 <MX_TIM1_Init+0x138>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3-1;
 800105c:	4b39      	ldr	r3, [pc, #228]	; (8001144 <MX_TIM1_Init+0x138>)
 800105e:	2202      	movs	r2, #2
 8001060:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001062:	4b38      	ldr	r3, [pc, #224]	; (8001144 <MX_TIM1_Init+0x138>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001068:	4b36      	ldr	r3, [pc, #216]	; (8001144 <MX_TIM1_Init+0x138>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800106e:	4b35      	ldr	r3, [pc, #212]	; (8001144 <MX_TIM1_Init+0x138>)
 8001070:	2280      	movs	r2, #128	; 0x80
 8001072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001074:	4833      	ldr	r0, [pc, #204]	; (8001144 <MX_TIM1_Init+0x138>)
 8001076:	f002 f8a1 	bl	80031bc <HAL_TIM_Base_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001080:	f000 f9c6 	bl	8001410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001088:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800108a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800108e:	4619      	mov	r1, r3
 8001090:	482c      	ldr	r0, [pc, #176]	; (8001144 <MX_TIM1_Init+0x138>)
 8001092:	f002 fbb5 	bl	8003800 <HAL_TIM_ConfigClockSource>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800109c:	f000 f9b8 	bl	8001410 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010a0:	4828      	ldr	r0, [pc, #160]	; (8001144 <MX_TIM1_Init+0x138>)
 80010a2:	f002 f8da 	bl	800325a <HAL_TIM_PWM_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80010ac:	f000 f9b0 	bl	8001410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b0:	2300      	movs	r3, #0
 80010b2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010bc:	4619      	mov	r1, r3
 80010be:	4821      	ldr	r0, [pc, #132]	; (8001144 <MX_TIM1_Init+0x138>)
 80010c0:	f002 ff5a 	bl	8003f78 <HAL_TIMEx_MasterConfigSynchronization>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80010ca:	f000 f9a1 	bl	8001410 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ce:	2360      	movs	r3, #96	; 0x60
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 80010d2:	2302      	movs	r3, #2
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010da:	2300      	movs	r3, #0
 80010dc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010de:	2300      	movs	r3, #0
 80010e0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010e2:	2300      	movs	r3, #0
 80010e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010e6:	2300      	movs	r3, #0
 80010e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ee:	2200      	movs	r2, #0
 80010f0:	4619      	mov	r1, r3
 80010f2:	4814      	ldr	r0, [pc, #80]	; (8001144 <MX_TIM1_Init+0x138>)
 80010f4:	f002 fac2 	bl	800367c <HAL_TIM_PWM_ConfigChannel>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80010fe:	f000 f987 	bl	8001410 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001116:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800111a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800111c:	2300      	movs	r3, #0
 800111e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	4619      	mov	r1, r3
 8001124:	4807      	ldr	r0, [pc, #28]	; (8001144 <MX_TIM1_Init+0x138>)
 8001126:	f002 ff95 	bl	8004054 <HAL_TIMEx_ConfigBreakDeadTime>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001130:	f000 f96e 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001134:	4803      	ldr	r0, [pc, #12]	; (8001144 <MX_TIM1_Init+0x138>)
 8001136:	f000 fa15 	bl	8001564 <HAL_TIM_MspPostInit>

}
 800113a:	bf00      	nop
 800113c:	3758      	adds	r7, #88	; 0x58
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000008c 	.word	0x2000008c
 8001148:	40010000 	.word	0x40010000

0800114c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001152:	f107 0308 	add.w	r3, r7, #8
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001160:	463b      	mov	r3, r7
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <MX_TIM5_Init+0x94>)
 800116a:	4a1e      	ldr	r2, [pc, #120]	; (80011e4 <MX_TIM5_Init+0x98>)
 800116c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 7550-1;
 800116e:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <MX_TIM5_Init+0x94>)
 8001170:	f641 527d 	movw	r2, #7549	; 0x1d7d
 8001174:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <MX_TIM5_Init+0x94>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 800117c:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <MX_TIM5_Init+0x94>)
 800117e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001182:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <MX_TIM5_Init+0x94>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <MX_TIM5_Init+0x94>)
 800118c:	2280      	movs	r2, #128	; 0x80
 800118e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001190:	4813      	ldr	r0, [pc, #76]	; (80011e0 <MX_TIM5_Init+0x94>)
 8001192:	f002 f813 	bl	80031bc <HAL_TIM_Base_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800119c:	f000 f938 	bl	8001410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80011a6:	f107 0308 	add.w	r3, r7, #8
 80011aa:	4619      	mov	r1, r3
 80011ac:	480c      	ldr	r0, [pc, #48]	; (80011e0 <MX_TIM5_Init+0x94>)
 80011ae:	f002 fb27 	bl	8003800 <HAL_TIM_ConfigClockSource>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80011b8:	f000 f92a 	bl	8001410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011bc:	2300      	movs	r3, #0
 80011be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80011c4:	463b      	mov	r3, r7
 80011c6:	4619      	mov	r1, r3
 80011c8:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_TIM5_Init+0x94>)
 80011ca:	f002 fed5 	bl	8003f78 <HAL_TIMEx_MasterConfigSynchronization>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80011d4:	f000 f91c 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200000d4 	.word	0x200000d4
 80011e4:	40000c00 	.word	0x40000c00

080011e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 80011ee:	4a12      	ldr	r2, [pc, #72]	; (8001238 <MX_USART2_UART_Init+0x50>)
 80011f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 80011f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 800120e:	220c      	movs	r2, #12
 8001210:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 8001220:	f002 ff7e 	bl	8004120 <HAL_UART_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800122a:	f000 f8f1 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000017c 	.word	0x2000017c
 8001238:	40004400 	.word	0x40004400

0800123c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <MX_DMA_Init+0xa4>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a25      	ldr	r2, [pc, #148]	; (80012e0 <MX_DMA_Init+0xa4>)
 800124c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <MX_DMA_Init+0xa4>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800125e:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <MX_DMA_Init+0xa8>)
 8001260:	4a21      	ldr	r2, [pc, #132]	; (80012e8 <MX_DMA_Init+0xac>)
 8001262:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <MX_DMA_Init+0xa8>)
 8001266:	2200      	movs	r2, #0
 8001268:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800126a:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <MX_DMA_Init+0xa8>)
 800126c:	2280      	movs	r2, #128	; 0x80
 800126e:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8001270:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <MX_DMA_Init+0xa8>)
 8001272:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001276:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_DMA_Init+0xa8>)
 800127a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800127e:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001280:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <MX_DMA_Init+0xa8>)
 8001282:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001286:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001288:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <MX_DMA_Init+0xa8>)
 800128a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800128e:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <MX_DMA_Init+0xa8>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001296:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <MX_DMA_Init+0xa8>)
 8001298:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800129c:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_DMA_Init+0xa8>)
 80012a0:	2204      	movs	r2, #4
 80012a2:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_DMA_Init+0xa8>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <MX_DMA_Init+0xa8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <MX_DMA_Init+0xa8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 80012b6:	480b      	ldr	r0, [pc, #44]	; (80012e4 <MX_DMA_Init+0xa8>)
 80012b8:	f000 fd86 	bl	8001dc8 <HAL_DMA_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_DMA_Init+0x8a>
  {
    Error_Handler( );
 80012c2:	f000 f8a5 	bl	8001410 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	2044      	movs	r0, #68	; 0x44
 80012cc:	f000 fd45 	bl	8001d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80012d0:	2044      	movs	r0, #68	; 0x44
 80012d2:	f000 fd5e 	bl	8001d92 <HAL_NVIC_EnableIRQ>

}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	200001c0 	.word	0x200001c0
 80012e8:	40026410 	.word	0x40026410

080012ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	4b3f      	ldr	r3, [pc, #252]	; (8001404 <MX_GPIO_Init+0x118>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a3e      	ldr	r2, [pc, #248]	; (8001404 <MX_GPIO_Init+0x118>)
 800130c:	f043 0304 	orr.w	r3, r3, #4
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b3c      	ldr	r3, [pc, #240]	; (8001404 <MX_GPIO_Init+0x118>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b38      	ldr	r3, [pc, #224]	; (8001404 <MX_GPIO_Init+0x118>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a37      	ldr	r2, [pc, #220]	; (8001404 <MX_GPIO_Init+0x118>)
 8001328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b35      	ldr	r3, [pc, #212]	; (8001404 <MX_GPIO_Init+0x118>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	4b31      	ldr	r3, [pc, #196]	; (8001404 <MX_GPIO_Init+0x118>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a30      	ldr	r2, [pc, #192]	; (8001404 <MX_GPIO_Init+0x118>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b2e      	ldr	r3, [pc, #184]	; (8001404 <MX_GPIO_Init+0x118>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <MX_GPIO_Init+0x118>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a29      	ldr	r2, [pc, #164]	; (8001404 <MX_GPIO_Init+0x118>)
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b27      	ldr	r3, [pc, #156]	; (8001404 <MX_GPIO_Init+0x118>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, vgaPin0_B0_Pin|vgaPin1_B1_Pin|vgaPin2_B2_Pin|vgaPin3_B3_Pin
 8001372:	2200      	movs	r2, #0
 8001374:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8001378:	4823      	ldr	r0, [pc, #140]	; (8001408 <MX_GPIO_Init+0x11c>)
 800137a:	f001 fa6d 	bl	8002858 <HAL_GPIO_WritePin>
                          |vgaPin4_G0_Pin|vgaPin5_G1_Pin|vgaPin6_G2_Pin|vgaPin7_G3_Pin
                          |vgaPin8_R0_Pin|vgaPin9_R1_Pin|vgaPin10_R2_Pin|vgaPin11_R3_Pin
                          |vgaPin12_Hsync_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, vgaPin13_Vsync_Pin|LD2_Pin, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	2122      	movs	r1, #34	; 0x22
 8001382:	4822      	ldr	r0, [pc, #136]	; (800140c <MX_GPIO_Init+0x120>)
 8001384:	f001 fa68 	bl	8002858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800138e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	481a      	ldr	r0, [pc, #104]	; (8001408 <MX_GPIO_Init+0x11c>)
 80013a0:	f001 f8d6 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pins : vgaPin0_B0_Pin vgaPin1_B1_Pin vgaPin2_B2_Pin vgaPin3_B3_Pin
                           vgaPin4_G0_Pin vgaPin5_G1_Pin vgaPin6_G2_Pin vgaPin7_G3_Pin
                           vgaPin8_R0_Pin vgaPin9_R1_Pin vgaPin10_R2_Pin vgaPin11_R3_Pin
                           vgaPin12_Hsync_Pin */
  GPIO_InitStruct.Pin = vgaPin0_B0_Pin|vgaPin1_B1_Pin|vgaPin2_B2_Pin|vgaPin3_B3_Pin
 80013a4:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80013a8:	617b      	str	r3, [r7, #20]
                          |vgaPin4_G0_Pin|vgaPin5_G1_Pin|vgaPin6_G2_Pin|vgaPin7_G3_Pin
                          |vgaPin8_R0_Pin|vgaPin9_R1_Pin|vgaPin10_R2_Pin|vgaPin11_R3_Pin
                          |vgaPin12_Hsync_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4619      	mov	r1, r3
 80013bc:	4812      	ldr	r0, [pc, #72]	; (8001408 <MX_GPIO_Init+0x11c>)
 80013be:	f001 f8c7 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : vgaPin13_Vsync_Pin */
  GPIO_InitStruct.Pin = vgaPin13_Vsync_Pin;
 80013c2:	2302      	movs	r3, #2
 80013c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ce:	2302      	movs	r3, #2
 80013d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(vgaPin13_Vsync_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4619      	mov	r1, r3
 80013d8:	480c      	ldr	r0, [pc, #48]	; (800140c <MX_GPIO_Init+0x120>)
 80013da:	f001 f8b9 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013de:	2320      	movs	r3, #32
 80013e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <MX_GPIO_Init+0x120>)
 80013f6:	f001 f8ab 	bl	8002550 <HAL_GPIO_Init>

}
 80013fa:	bf00      	nop
 80013fc:	3728      	adds	r7, #40	; 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800
 8001408:	40020800 	.word	0x40020800
 800140c:	40020000 	.word	0x40020000

08001410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001414:	b672      	cpsid	i
}
 8001416:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001418:	e7fe      	b.n	8001418 <Error_Handler+0x8>
	...

0800141c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <HAL_MspInit+0x4c>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	4a0f      	ldr	r2, [pc, #60]	; (8001468 <HAL_MspInit+0x4c>)
 800142c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001430:	6453      	str	r3, [r2, #68]	; 0x44
 8001432:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <HAL_MspInit+0x4c>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	603b      	str	r3, [r7, #0]
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_MspInit+0x4c>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	4a08      	ldr	r2, [pc, #32]	; (8001468 <HAL_MspInit+0x4c>)
 8001448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144c:	6413      	str	r3, [r2, #64]	; 0x40
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_MspInit+0x4c>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001456:	603b      	str	r3, [r7, #0]
 8001458:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800145a:	2007      	movs	r0, #7
 800145c:	f000 fc72 	bl	8001d44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40023800 	.word	0x40023800

0800146c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a35      	ldr	r2, [pc, #212]	; (8001550 <HAL_TIM_Base_MspInit+0xe4>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d148      	bne.n	8001510 <HAL_TIM_Base_MspInit+0xa4>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b34      	ldr	r3, [pc, #208]	; (8001554 <HAL_TIM_Base_MspInit+0xe8>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	4a33      	ldr	r2, [pc, #204]	; (8001554 <HAL_TIM_Base_MspInit+0xe8>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6453      	str	r3, [r2, #68]	; 0x44
 800148e:	4b31      	ldr	r3, [pc, #196]	; (8001554 <HAL_TIM_Base_MspInit+0xe8>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 800149a:	4b2f      	ldr	r3, [pc, #188]	; (8001558 <HAL_TIM_Base_MspInit+0xec>)
 800149c:	4a2f      	ldr	r2, [pc, #188]	; (800155c <HAL_TIM_Base_MspInit+0xf0>)
 800149e:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 80014a0:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <HAL_TIM_Base_MspInit+0xec>)
 80014a2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80014a6:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014a8:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <HAL_TIM_Base_MspInit+0xec>)
 80014aa:	2240      	movs	r2, #64	; 0x40
 80014ac:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ae:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <HAL_TIM_Base_MspInit+0xec>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80014b4:	4b28      	ldr	r3, [pc, #160]	; (8001558 <HAL_TIM_Base_MspInit+0xec>)
 80014b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ba:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014bc:	4b26      	ldr	r3, [pc, #152]	; (8001558 <HAL_TIM_Base_MspInit+0xec>)
 80014be:	2200      	movs	r2, #0
 80014c0:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014c2:	4b25      	ldr	r3, [pc, #148]	; (8001558 <HAL_TIM_Base_MspInit+0xec>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 80014c8:	4b23      	ldr	r3, [pc, #140]	; (8001558 <HAL_TIM_Base_MspInit+0xec>)
 80014ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ce:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014d0:	4b21      	ldr	r3, [pc, #132]	; (8001558 <HAL_TIM_Base_MspInit+0xec>)
 80014d2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014d6:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80014d8:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <HAL_TIM_Base_MspInit+0xec>)
 80014da:	2204      	movs	r2, #4
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim1_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80014de:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <HAL_TIM_Base_MspInit+0xec>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim1_up.Init.MemBurst = DMA_MBURST_INC4;
 80014e4:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <HAL_TIM_Base_MspInit+0xec>)
 80014e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim1_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80014ec:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <HAL_TIM_Base_MspInit+0xec>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 80014f2:	4819      	ldr	r0, [pc, #100]	; (8001558 <HAL_TIM_Base_MspInit+0xec>)
 80014f4:	f000 fc68 	bl	8001dc8 <HAL_DMA_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_TIM_Base_MspInit+0x96>
    {
      Error_Handler();
 80014fe:	f7ff ff87 	bl	8001410 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a14      	ldr	r2, [pc, #80]	; (8001558 <HAL_TIM_Base_MspInit+0xec>)
 8001506:	621a      	str	r2, [r3, #32]
 8001508:	4a13      	ldr	r2, [pc, #76]	; (8001558 <HAL_TIM_Base_MspInit+0xec>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800150e:	e01a      	b.n	8001546 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM5)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a12      	ldr	r2, [pc, #72]	; (8001560 <HAL_TIM_Base_MspInit+0xf4>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d115      	bne.n	8001546 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <HAL_TIM_Base_MspInit+0xe8>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a0c      	ldr	r2, [pc, #48]	; (8001554 <HAL_TIM_Base_MspInit+0xe8>)
 8001524:	f043 0308 	orr.w	r3, r3, #8
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_TIM_Base_MspInit+0xe8>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 1);
 8001536:	2201      	movs	r2, #1
 8001538:	2100      	movs	r1, #0
 800153a:	2032      	movs	r0, #50	; 0x32
 800153c:	f000 fc0d 	bl	8001d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001540:	2032      	movs	r0, #50	; 0x32
 8001542:	f000 fc26 	bl	8001d92 <HAL_NVIC_EnableIRQ>
}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40010000 	.word	0x40010000
 8001554:	40023800 	.word	0x40023800
 8001558:	2000011c 	.word	0x2000011c
 800155c:	40026488 	.word	0x40026488
 8001560:	40000c00 	.word	0x40000c00

08001564 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b088      	sub	sp, #32
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a12      	ldr	r2, [pc, #72]	; (80015cc <HAL_TIM_MspPostInit+0x68>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d11e      	bne.n	80015c4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <HAL_TIM_MspPostInit+0x6c>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a10      	ldr	r2, [pc, #64]	; (80015d0 <HAL_TIM_MspPostInit+0x6c>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <HAL_TIM_MspPostInit+0x6c>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015b4:	2301      	movs	r3, #1
 80015b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	4619      	mov	r1, r3
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <HAL_TIM_MspPostInit+0x70>)
 80015c0:	f000 ffc6 	bl	8002550 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80015c4:	bf00      	nop
 80015c6:	3720      	adds	r7, #32
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40010000 	.word	0x40010000
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020000 	.word	0x40020000

080015d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a19      	ldr	r2, [pc, #100]	; (800165c <HAL_UART_MspInit+0x84>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d12b      	bne.n	8001652 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b18      	ldr	r3, [pc, #96]	; (8001660 <HAL_UART_MspInit+0x88>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	4a17      	ldr	r2, [pc, #92]	; (8001660 <HAL_UART_MspInit+0x88>)
 8001604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001608:	6413      	str	r3, [r2, #64]	; 0x40
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HAL_UART_MspInit+0x88>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <HAL_UART_MspInit+0x88>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a10      	ldr	r2, [pc, #64]	; (8001660 <HAL_UART_MspInit+0x88>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <HAL_UART_MspInit+0x88>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001632:	230c      	movs	r3, #12
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	2300      	movs	r3, #0
 8001640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001642:	2307      	movs	r3, #7
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	; (8001664 <HAL_UART_MspInit+0x8c>)
 800164e:	f000 ff7f 	bl	8002550 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001652:	bf00      	nop
 8001654:	3728      	adds	r7, #40	; 0x28
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40004400 	.word	0x40004400
 8001660:	40023800 	.word	0x40023800
 8001664:	40020000 	.word	0x40020000

08001668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800166c:	e7fe      	b.n	800166c <NMI_Handler+0x4>

0800166e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001672:	e7fe      	b.n	8001672 <HardFault_Handler+0x4>

08001674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <MemManage_Handler+0x4>

0800167a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167e:	e7fe      	b.n	800167e <BusFault_Handler+0x4>

08001680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <UsageFault_Handler+0x4>

08001686 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b4:	f000 fa32 	bl	8001b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}

080016bc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <TIM5_IRQHandler+0x10>)
 80016c2:	f001 fed3 	bl	800346c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200000d4 	.word	0x200000d4

080016d0 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <DMA2_Stream5_IRQHandler+0x10>)
 80016d6:	f000 fc7d 	bl	8001fd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	2000011c 	.word	0x2000011c

080016e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016ec:	4a14      	ldr	r2, [pc, #80]	; (8001740 <_sbrk+0x5c>)
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <_sbrk+0x60>)
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <_sbrk+0x64>)
 8001702:	4a12      	ldr	r2, [pc, #72]	; (800174c <_sbrk+0x68>)
 8001704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	429a      	cmp	r2, r3
 8001712:	d207      	bcs.n	8001724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001714:	f003 f968 	bl	80049e8 <__errno>
 8001718:	4603      	mov	r3, r0
 800171a:	220c      	movs	r2, #12
 800171c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171e:	f04f 33ff 	mov.w	r3, #4294967295
 8001722:	e009      	b.n	8001738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <_sbrk+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172a:	4b07      	ldr	r3, [pc, #28]	; (8001748 <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	4a05      	ldr	r2, [pc, #20]	; (8001748 <_sbrk+0x64>)
 8001734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20018000 	.word	0x20018000
 8001744:	00000400 	.word	0x00000400
 8001748:	20000278 	.word	0x20000278
 800174c:	2000ffe0 	.word	0x2000ffe0

08001750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <SystemInit+0x20>)
 8001756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175a:	4a05      	ldr	r2, [pc, #20]	; (8001770 <SystemInit+0x20>)
 800175c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <registerHUARTvga>:

	_Static_assert(horiWhole == horiRes+horiFront+horiSync+horiBack, "Horizontal vga configuration does not sum up");
	_Static_assert(vertWhole == vertArea+vertFront+vertSync+vertBack, "Vertical vga configuration does not sum up");
}

void registerHUARTvga(UART_HandleTypeDef * huart){
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	huartE = huart;
 800177c:	4a04      	ldr	r2, [pc, #16]	; (8001790 <registerHUARTvga+0x1c>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6013      	str	r3, [r2, #0]
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	2000ffc4 	.word	0x2000ffc4

08001794 <vgaDriver>:
#ifdef vgaDebug
	int str_len;
	char str[81] = {'\0'};
	static char * ref_str = "null";
#endif
	lineCount++;
 8001794:	4a30      	ldr	r2, [pc, #192]	; (8001858 <vgaDriver+0xc4>)
		activeBuffer = oldBuffer;
 8001796:	4931      	ldr	r1, [pc, #196]	; (800185c <vgaDriver+0xc8>)
	lineCount++;
 8001798:	6813      	ldr	r3, [r2, #0]
		activeBuffer = oldBuffer;
 800179a:	6808      	ldr	r0, [r1, #0]
void __attribute__((optimize("O3"))) vgaDriver(){
 800179c:	b430      	push	{r4, r5}
		Color * tmp = activeBuffer;
 800179e:	4c30      	ldr	r4, [pc, #192]	; (8001860 <vgaDriver+0xcc>)
	lineCount++;
 80017a0:	3301      	adds	r3, #1
		Color * tmp = activeBuffer;
 80017a2:	6825      	ldr	r5, [r4, #0]
		oldBuffer = tmp;
 80017a4:	600d      	str	r5, [r1, #0]
	if(lineCount < vertArea){//send line
 80017a6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
		activeBuffer = oldBuffer;
 80017aa:	6020      	str	r0, [r4, #0]
	lineCount++;
 80017ac:	6013      	str	r3, [r2, #0]
	if(lineCount < vertArea){//send line
 80017ae:	da1d      	bge.n	80017ec <vgaDriver+0x58>
		ref_str = "render line";
#endif
		//renderLine(activeBuffer, lineCount);
		//while(HAL_DMA_PollForTransfer(memCopyDMA, HAL_DMA_FULL_TRANSFER, 100)){HAL_Delay(1);};
		uint32_t * active32 = (uint32_t*)&activeBuffer[horiWhole-horiRes];
		uint32_t * screen32 = (uint32_t*)&screenBuff[(lineCount/vgaUpscale)*horiRes];
 80017b0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80017b4:	4a2b      	ldr	r2, [pc, #172]	; (8001864 <vgaDriver+0xd0>)
 80017b6:	1059      	asrs	r1, r3, #1
 80017b8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80017bc:	eb02 1481 	add.w	r4, r2, r1, lsl #6
		uint32_t * active32 = (uint32_t*)&activeBuffer[horiWhole-horiRes];
 80017c0:	f100 0350 	add.w	r3, r0, #80	; 0x50
 80017c4:	3404      	adds	r4, #4
 80017c6:	42a3      	cmp	r3, r4
		uint32_t * screen32 = (uint32_t*)&screenBuff[(lineCount/vgaUpscale)*horiRes];
 80017c8:	eb02 1281 	add.w	r2, r2, r1, lsl #6
 80017cc:	d029      	beq.n	8001822 <vgaDriver+0x8e>
 80017ce:	ea42 0103 	orr.w	r1, r2, r3
 80017d2:	0749      	lsls	r1, r1, #29
 80017d4:	d125      	bne.n	8001822 <vgaDriver+0x8e>
 80017d6:	3a08      	subs	r2, #8
 80017d8:	f500 7cc8 	add.w	ip, r0, #400	; 0x190
		for(uint32_t i = 0; i < horiRes/4;i++){
			*active32 = *screen32;
 80017dc:	e9f2 0102 	ldrd	r0, r1, [r2, #8]!
 80017e0:	e8e3 0102 	strd	r0, r1, [r3], #8
 80017e4:	459c      	cmp	ip, r3
 80017e6:	d1f9      	bne.n	80017dc <vgaDriver+0x48>
	str_len = sprintf(str, "Line %i\t %s \n\r", lineCount, ref_str);
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
	uint32_t indicatorLengths[] = {horiFront, horiSync, horiBack, horiRes, horiFront, horiSync, horiBack, horiRes};
	dumpBuffer((char*)lineBuff, horiWhole*2, indicatorLengths, "  []  ||  []  ||EE", 2);
#endif
}
 80017e8:	bc30      	pop	{r4, r5}
 80017ea:	4770      	bx	lr
	}else if(lineCount == vertArea){//last line clear
 80017ec:	d012      	beq.n	8001814 <vgaDriver+0x80>
	}else if(lineCount == vertArea + 1){//last line clear buffer
 80017ee:	f240 1191 	movw	r1, #401	; 0x191
 80017f2:	428b      	cmp	r3, r1
 80017f4:	d00e      	beq.n	8001814 <vgaDriver+0x80>
	}else if(lineCount == vertArea + vertFront){//enter vertical sync todo check for of by one error
 80017f6:	f5b3 7fce 	cmp.w	r3, #412	; 0x19c
 80017fa:	d01d      	beq.n	8001838 <vgaDriver+0xa4>
	}else if(lineCount == vertArea + vertFront + vertSync){//exit vertical sync
 80017fc:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 8001800:	d022      	beq.n	8001848 <vgaDriver+0xb4>
	}else if(lineCount >= vertWhole){//return to beginning
 8001802:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
		lineCount = -1;
 8001806:	bfc8      	it	gt
 8001808:	f04f 33ff 	movgt.w	r3, #4294967295
}
 800180c:	bc30      	pop	{r4, r5}
		lineCount = -1;
 800180e:	bfc8      	it	gt
 8001810:	6013      	strgt	r3, [r2, #0]
}
 8001812:	4770      	bx	lr
 8001814:	bc30      	pop	{r4, r5}
			*active32 = 0;
 8001816:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800181a:	2100      	movs	r1, #0
 800181c:	3050      	adds	r0, #80	; 0x50
 800181e:	f003 b90d 	b.w	8004a3c <memset>
 8001822:	3a04      	subs	r2, #4
 8001824:	f500 70c8 	add.w	r0, r0, #400	; 0x190
			*active32 = *screen32;
 8001828:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800182c:	f843 1b04 	str.w	r1, [r3], #4
		for(uint32_t i = 0; i < horiRes/4;i++){
 8001830:	4298      	cmp	r0, r3
 8001832:	d1f9      	bne.n	8001828 <vgaDriver+0x94>
}
 8001834:	bc30      	pop	{r4, r5}
 8001836:	4770      	bx	lr
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_SET);
 8001838:	4a0b      	ldr	r2, [pc, #44]	; (8001868 <vgaDriver+0xd4>)
 800183a:	4b0c      	ldr	r3, [pc, #48]	; (800186c <vgaDriver+0xd8>)
 800183c:	8811      	ldrh	r1, [r2, #0]
 800183e:	6818      	ldr	r0, [r3, #0]
}
 8001840:	bc30      	pop	{r4, r5}
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_SET);
 8001842:	2201      	movs	r2, #1
 8001844:	f001 b808 	b.w	8002858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_RESET);
 8001848:	4a07      	ldr	r2, [pc, #28]	; (8001868 <vgaDriver+0xd4>)
 800184a:	4b08      	ldr	r3, [pc, #32]	; (800186c <vgaDriver+0xd8>)
 800184c:	8811      	ldrh	r1, [r2, #0]
 800184e:	6818      	ldr	r0, [r3, #0]
}
 8001850:	bc30      	pop	{r4, r5}
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	f001 b800 	b.w	8002858 <HAL_GPIO_WritePin>
 8001858:	2000ffb0 	.word	0x2000ffb0
 800185c:	2000ffc0 	.word	0x2000ffc0
 8001860:	2000ffbc 	.word	0x2000ffbc
 8001864:	2000059c 	.word	0x2000059c
 8001868:	2000ffac 	.word	0x2000ffac
 800186c:	2000ffa8 	.word	0x2000ffa8

08001870 <vgaHalfCallBack>:

void vgaHalfCallBack(DMA_HandleTypeDef *_hdma){
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	//readyForNextLine++;
	vgaDriver();
 8001878:	f7ff ff8c 	bl	8001794 <vgaDriver>
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <vgaFullCallBack>:

void vgaFullCallBack(DMA_HandleTypeDef *_hdma){
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	//readyForNextLine++;
	vgaDriver();
 800188c:	f7ff ff82 	bl	8001794 <vgaDriver>
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <vgaSetup>:
		TIM_HandleTypeDef * vgaPixelTimer_,
		DMA_HandleTypeDef * vgaCircularDMA_,
		DMA_HandleTypeDef * memCopyDMA_,
		GPIO_TypeDef* Vsync_GPIO_Port_,
		uint16_t Vsync_Pin_
		){
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
 80018a4:	603b      	str	r3, [r7, #0]

	vgaPixelTimer = vgaPixelTimer_;
 80018a6:	4a33      	ldr	r2, [pc, #204]	; (8001974 <vgaSetup+0xdc>)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6013      	str	r3, [r2, #0]
	vgaCircularDMA = vgaCircularDMA_;
 80018ac:	4a32      	ldr	r2, [pc, #200]	; (8001978 <vgaSetup+0xe0>)
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	6013      	str	r3, [r2, #0]
	memCopyDMA = memCopyDMA_;
 80018b2:	4a32      	ldr	r2, [pc, #200]	; (800197c <vgaSetup+0xe4>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6013      	str	r3, [r2, #0]

	Vsync_GPIO_Port = Vsync_GPIO_Port_;
 80018b8:	4a31      	ldr	r2, [pc, #196]	; (8001980 <vgaSetup+0xe8>)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	6013      	str	r3, [r2, #0]
	Vsync_Pin = Vsync_Pin_;
 80018be:	4a31      	ldr	r2, [pc, #196]	; (8001984 <vgaSetup+0xec>)
 80018c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018c2:	8013      	strh	r3, [r2, #0]

	lineCount = 0; //vertArea + vertFront - 1 - 2;//start right after a vertical sync
 80018c4:	4b30      	ldr	r3, [pc, #192]	; (8001988 <vgaSetup+0xf0>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
	lineUpscale = 0;//copy old buffer if non zero
 80018ca:	4b30      	ldr	r3, [pc, #192]	; (800198c <vgaSetup+0xf4>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
	readyForNextLine = 1;
 80018d0:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <vgaSetup+0xf8>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	601a      	str	r2, [r3, #0]
	activeBuffer = lineBuff;
 80018d6:	4b2f      	ldr	r3, [pc, #188]	; (8001994 <vgaSetup+0xfc>)
 80018d8:	4a2f      	ldr	r2, [pc, #188]	; (8001998 <vgaSetup+0x100>)
 80018da:	601a      	str	r2, [r3, #0]
	oldBuffer = &lineBuff[horiWhole];
 80018dc:	4b2f      	ldr	r3, [pc, #188]	; (800199c <vgaSetup+0x104>)
 80018de:	4a30      	ldr	r2, [pc, #192]	; (80019a0 <vgaSetup+0x108>)
 80018e0:	601a      	str	r2, [r3, #0]

	for(uint32_t i = 0; i < horiWhole; i += 2){//clear all
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
 80018e6:	e00e      	b.n	8001906 <vgaSetup+0x6e>
		activeBuffer[i].value = 0;
 80018e8:	4b2a      	ldr	r3, [pc, #168]	; (8001994 <vgaSetup+0xfc>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	4413      	add	r3, r2
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
		oldBuffer[i].value = 0;
 80018f4:	4b29      	ldr	r3, [pc, #164]	; (800199c <vgaSetup+0x104>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	4413      	add	r3, r2
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < horiWhole; i += 2){//clear all
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	3302      	adds	r3, #2
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800190c:	d3ec      	bcc.n	80018e8 <vgaSetup+0x50>
	}
	for(uint32_t i = 0; i < horiRes; i++){//load test data
 800190e:	2300      	movs	r3, #0
 8001910:	61bb      	str	r3, [r7, #24]
 8001912:	e00e      	b.n	8001932 <vgaSetup+0x9a>
		activeBuffer[i].value = 0x0;
 8001914:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <vgaSetup+0xfc>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	4413      	add	r3, r2
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
		oldBuffer[i].value = 0x00;
 8001920:	4b1e      	ldr	r3, [pc, #120]	; (800199c <vgaSetup+0x104>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	4413      	add	r3, r2
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < horiRes; i++){//load test data
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	3301      	adds	r3, #1
 8001930:	61bb      	str	r3, [r7, #24]
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001938:	d3ec      	bcc.n	8001914 <vgaSetup+0x7c>
	}
	for(uint32_t i = horiFront; i < horiFront + horiSync; i++){//set horizontal sync
 800193a:	2308      	movs	r3, #8
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	e00e      	b.n	800195e <vgaSetup+0xc6>
		activeBuffer[i].value = 0x80;
 8001940:	4b14      	ldr	r3, [pc, #80]	; (8001994 <vgaSetup+0xfc>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	4413      	add	r3, r2
 8001948:	2280      	movs	r2, #128	; 0x80
 800194a:	701a      	strb	r2, [r3, #0]
		oldBuffer[i].value = 0x80;
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <vgaSetup+0x104>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	4413      	add	r3, r2
 8001954:	2280      	movs	r2, #128	; 0x80
 8001956:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = horiFront; i < horiFront + horiSync; i++){//set horizontal sync
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	3301      	adds	r3, #1
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	2b37      	cmp	r3, #55	; 0x37
 8001962:	d9ed      	bls.n	8001940 <vgaSetup+0xa8>
	}
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	3724      	adds	r7, #36	; 0x24
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	2000ff9c 	.word	0x2000ff9c
 8001978:	2000ffa0 	.word	0x2000ffa0
 800197c:	2000ffa4 	.word	0x2000ffa4
 8001980:	2000ffa8 	.word	0x2000ffa8
 8001984:	2000ffac 	.word	0x2000ffac
 8001988:	2000ffb0 	.word	0x2000ffb0
 800198c:	2000ffb4 	.word	0x2000ffb4
 8001990:	2000ffb8 	.word	0x2000ffb8
 8001994:	2000ffbc 	.word	0x2000ffbc
 8001998:	2000027c 	.word	0x2000027c
 800199c:	2000ffc0 	.word	0x2000ffc0
 80019a0:	2000040c 	.word	0x2000040c

080019a4 <vgaStart>:

void vgaStart(){
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0

	//dumpBuffer((char*)screenBuff, horiRes*vertRes, NULL, "", 2);
	//HAL_DMA_Init(vgaCircularDMA);
	__HAL_TIM_ENABLE_DMA(vgaPixelTimer, TIM_DMA_UPDATE);
 80019a8:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <vgaStart+0x68>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	4b16      	ldr	r3, [pc, #88]	; (8001a0c <vgaStart+0x68>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019ba:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE(vgaPixelTimer);
 80019bc:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <vgaStart+0x68>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <vgaStart+0x68>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0201 	orr.w	r2, r2, #1
 80019ce:	601a      	str	r2, [r3, #0]

	HAL_TIM_PWM_Start(vgaPixelTimer, TIM_CHANNEL_1);
 80019d0:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <vgaStart+0x68>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f001 fc98 	bl	800330c <HAL_TIM_PWM_Start>

	HAL_DMA_RegisterCallback(vgaCircularDMA, HAL_DMA_XFER_HALFCPLT_CB_ID, vgaHalfCallBack);
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <vgaStart+0x6c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0c      	ldr	r2, [pc, #48]	; (8001a14 <vgaStart+0x70>)
 80019e2:	2101      	movs	r1, #1
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 fc7f 	bl	80022e8 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(vgaCircularDMA, HAL_DMA_XFER_CPLT_CB_ID, vgaFullCallBack);
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <vgaStart+0x6c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <vgaStart+0x74>)
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 fc78 	bl	80022e8 <HAL_DMA_RegisterCallback>
	//__HAL_TIM_ENABLE(&htim5);

	//start the circular buffer dma transfer aka vga main loop
	HAL_DMA_Start_IT(vgaCircularDMA, (uint32_t)&lineBuff[0], (uint32_t)&(GPIOC->ODR), horiWhole*2);
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <vgaStart+0x6c>)
 80019fa:	6818      	ldr	r0, [r3, #0]
 80019fc:	4907      	ldr	r1, [pc, #28]	; (8001a1c <vgaStart+0x78>)
 80019fe:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001a02:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <vgaStart+0x7c>)
 8001a04:	f000 fa8e 	bl	8001f24 <HAL_DMA_Start_IT>

	//HAL_DMAEx_MultiBufferStart_IT(hdma, SrcAddress, DstAddress, SecondMemAddress, DataLength);
	//vgaLoop();
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	2000ff9c 	.word	0x2000ff9c
 8001a10:	2000ffa0 	.word	0x2000ffa0
 8001a14:	08001871 	.word	0x08001871
 8001a18:	08001885 	.word	0x08001885
 8001a1c:	2000027c 	.word	0x2000027c
 8001a20:	40020814 	.word	0x40020814

08001a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a28:	480d      	ldr	r0, [pc, #52]	; (8001a60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a2a:	490e      	ldr	r1, [pc, #56]	; (8001a64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a2c:	4a0e      	ldr	r2, [pc, #56]	; (8001a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a30:	e002      	b.n	8001a38 <LoopCopyDataInit>

08001a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a36:	3304      	adds	r3, #4

08001a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a3c:	d3f9      	bcc.n	8001a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3e:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a40:	4c0b      	ldr	r4, [pc, #44]	; (8001a70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a44:	e001      	b.n	8001a4a <LoopFillZerobss>

08001a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a48:	3204      	adds	r2, #4

08001a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a4c:	d3fb      	bcc.n	8001a46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a4e:	f7ff fe7f 	bl	8001750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a52:	f002 ffcf 	bl	80049f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a56:	f7ff f8e7 	bl	8000c28 <main>
  bx  lr    
 8001a5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a5c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a64:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a68:	08006674 	.word	0x08006674
  ldr r2, =_sbss
 8001a6c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a70:	2000ffdc 	.word	0x2000ffdc

08001a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a74:	e7fe      	b.n	8001a74 <ADC_IRQHandler>
	...

08001a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a7c:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <HAL_Init+0x40>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0d      	ldr	r2, [pc, #52]	; (8001ab8 <HAL_Init+0x40>)
 8001a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_Init+0x40>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <HAL_Init+0x40>)
 8001a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a94:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <HAL_Init+0x40>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a07      	ldr	r2, [pc, #28]	; (8001ab8 <HAL_Init+0x40>)
 8001a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa0:	2003      	movs	r0, #3
 8001aa2:	f000 f94f 	bl	8001d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f000 f808 	bl	8001abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aac:	f7ff fcb6 	bl	800141c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40023c00 	.word	0x40023c00

08001abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <HAL_InitTick+0x54>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <HAL_InitTick+0x58>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	4619      	mov	r1, r3
 8001ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 f967 	bl	8001dae <HAL_SYSTICK_Config>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e00e      	b.n	8001b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b0f      	cmp	r3, #15
 8001aee:	d80a      	bhi.n	8001b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af0:	2200      	movs	r2, #0
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	f04f 30ff 	mov.w	r0, #4294967295
 8001af8:	f000 f92f 	bl	8001d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001afc:	4a06      	ldr	r2, [pc, #24]	; (8001b18 <HAL_InitTick+0x5c>)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
 8001b04:	e000      	b.n	8001b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20000000 	.word	0x20000000
 8001b14:	20000008 	.word	0x20000008
 8001b18:	20000004 	.word	0x20000004

08001b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_IncTick+0x20>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_IncTick+0x24>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <HAL_IncTick+0x24>)
 8001b2e:	6013      	str	r3, [r2, #0]
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20000008 	.word	0x20000008
 8001b40:	2000ffc8 	.word	0x2000ffc8

08001b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return uwTick;
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <HAL_GetTick+0x14>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	2000ffc8 	.word	0x2000ffc8

08001b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b64:	f7ff ffee 	bl	8001b44 <HAL_GetTick>
 8001b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b74:	d005      	beq.n	8001b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <HAL_Delay+0x44>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4413      	add	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b82:	bf00      	nop
 8001b84:	f7ff ffde 	bl	8001b44 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d8f7      	bhi.n	8001b84 <HAL_Delay+0x28>
  {
  }
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000008 	.word	0x20000008

08001ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd6:	4a04      	ldr	r2, [pc, #16]	; (8001be8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	60d3      	str	r3, [r2, #12]
}
 8001bdc:	bf00      	nop
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf0:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <__NVIC_GetPriorityGrouping+0x18>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	0a1b      	lsrs	r3, r3, #8
 8001bf6:	f003 0307 	and.w	r3, r3, #7
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	db0b      	blt.n	8001c32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	f003 021f 	and.w	r2, r3, #31
 8001c20:	4907      	ldr	r1, [pc, #28]	; (8001c40 <__NVIC_EnableIRQ+0x38>)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	095b      	lsrs	r3, r3, #5
 8001c28:	2001      	movs	r0, #1
 8001c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000e100 	.word	0xe000e100

08001c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	6039      	str	r1, [r7, #0]
 8001c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	db0a      	blt.n	8001c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	490c      	ldr	r1, [pc, #48]	; (8001c90 <__NVIC_SetPriority+0x4c>)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	0112      	lsls	r2, r2, #4
 8001c64:	b2d2      	uxtb	r2, r2
 8001c66:	440b      	add	r3, r1
 8001c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c6c:	e00a      	b.n	8001c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	4908      	ldr	r1, [pc, #32]	; (8001c94 <__NVIC_SetPriority+0x50>)
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	3b04      	subs	r3, #4
 8001c7c:	0112      	lsls	r2, r2, #4
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	440b      	add	r3, r1
 8001c82:	761a      	strb	r2, [r3, #24]
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000e100 	.word	0xe000e100
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b089      	sub	sp, #36	; 0x24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f1c3 0307 	rsb	r3, r3, #7
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	bf28      	it	cs
 8001cb6:	2304      	movcs	r3, #4
 8001cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	2b06      	cmp	r3, #6
 8001cc0:	d902      	bls.n	8001cc8 <NVIC_EncodePriority+0x30>
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3b03      	subs	r3, #3
 8001cc6:	e000      	b.n	8001cca <NVIC_EncodePriority+0x32>
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43da      	mvns	r2, r3
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	401a      	ands	r2, r3
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cea:	43d9      	mvns	r1, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf0:	4313      	orrs	r3, r2
         );
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3724      	adds	r7, #36	; 0x24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d10:	d301      	bcc.n	8001d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d12:	2301      	movs	r3, #1
 8001d14:	e00f      	b.n	8001d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d16:	4a0a      	ldr	r2, [pc, #40]	; (8001d40 <SysTick_Config+0x40>)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d1e:	210f      	movs	r1, #15
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	f7ff ff8e 	bl	8001c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <SysTick_Config+0x40>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d2e:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <SysTick_Config+0x40>)
 8001d30:	2207      	movs	r2, #7
 8001d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	e000e010 	.word	0xe000e010

08001d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff ff29 	bl	8001ba4 <__NVIC_SetPriorityGrouping>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
 8001d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d6c:	f7ff ff3e 	bl	8001bec <__NVIC_GetPriorityGrouping>
 8001d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	6978      	ldr	r0, [r7, #20]
 8001d78:	f7ff ff8e 	bl	8001c98 <NVIC_EncodePriority>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff5d 	bl	8001c44 <__NVIC_SetPriority>
}
 8001d8a:	bf00      	nop
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	4603      	mov	r3, r0
 8001d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff31 	bl	8001c08 <__NVIC_EnableIRQ>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ffa2 	bl	8001d00 <SysTick_Config>
 8001dbc:	4603      	mov	r3, r0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001dd4:	f7ff feb6 	bl	8001b44 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e099      	b.n	8001f18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2202      	movs	r2, #2
 8001de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0201 	bic.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e04:	e00f      	b.n	8001e26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e06:	f7ff fe9d 	bl	8001b44 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b05      	cmp	r3, #5
 8001e12:	d908      	bls.n	8001e26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2220      	movs	r2, #32
 8001e18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e078      	b.n	8001f18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1e8      	bne.n	8001e06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <HAL_DMA_Init+0x158>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d107      	bne.n	8001e90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f023 0307 	bic.w	r3, r3, #7
 8001ea6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	d117      	bne.n	8001eea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00e      	beq.n	8001eea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 fac3 	bl	8002458 <DMA_CheckFifoParam>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d008      	beq.n	8001eea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2240      	movs	r2, #64	; 0x40
 8001edc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e016      	b.n	8001f18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 fa7a 	bl	80023ec <DMA_CalcBaseAndBitshift>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f00:	223f      	movs	r2, #63	; 0x3f
 8001f02:	409a      	lsls	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	f010803f 	.word	0xf010803f

08001f24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d101      	bne.n	8001f4a <HAL_DMA_Start_IT+0x26>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e040      	b.n	8001fcc <HAL_DMA_Start_IT+0xa8>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d12f      	bne.n	8001fbe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2202      	movs	r2, #2
 8001f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	68b9      	ldr	r1, [r7, #8]
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f000 fa0c 	bl	8002390 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7c:	223f      	movs	r2, #63	; 0x3f
 8001f7e:	409a      	lsls	r2, r3
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0216 	orr.w	r2, r2, #22
 8001f92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d007      	beq.n	8001fac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0208 	orr.w	r2, r2, #8
 8001faa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0201 	orr.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	e005      	b.n	8001fca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fe0:	4b8e      	ldr	r3, [pc, #568]	; (800221c <HAL_DMA_IRQHandler+0x248>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a8e      	ldr	r2, [pc, #568]	; (8002220 <HAL_DMA_IRQHandler+0x24c>)
 8001fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fea:	0a9b      	lsrs	r3, r3, #10
 8001fec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffe:	2208      	movs	r2, #8
 8002000:	409a      	lsls	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4013      	ands	r3, r2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d01a      	beq.n	8002040 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	d013      	beq.n	8002040 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0204 	bic.w	r2, r2, #4
 8002026:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202c:	2208      	movs	r2, #8
 800202e:	409a      	lsls	r2, r3
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002038:	f043 0201 	orr.w	r2, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002044:	2201      	movs	r2, #1
 8002046:	409a      	lsls	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4013      	ands	r3, r2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d012      	beq.n	8002076 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00b      	beq.n	8002076 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002062:	2201      	movs	r2, #1
 8002064:	409a      	lsls	r2, r3
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206e:	f043 0202 	orr.w	r2, r3, #2
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207a:	2204      	movs	r2, #4
 800207c:	409a      	lsls	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4013      	ands	r3, r2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d012      	beq.n	80020ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00b      	beq.n	80020ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002098:	2204      	movs	r2, #4
 800209a:	409a      	lsls	r2, r3
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a4:	f043 0204 	orr.w	r2, r3, #4
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b0:	2210      	movs	r2, #16
 80020b2:	409a      	lsls	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d043      	beq.n	8002144 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d03c      	beq.n	8002144 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ce:	2210      	movs	r2, #16
 80020d0:	409a      	lsls	r2, r3
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d018      	beq.n	8002116 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d108      	bne.n	8002104 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d024      	beq.n	8002144 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	4798      	blx	r3
 8002102:	e01f      	b.n	8002144 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002108:	2b00      	cmp	r3, #0
 800210a:	d01b      	beq.n	8002144 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	4798      	blx	r3
 8002114:	e016      	b.n	8002144 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002120:	2b00      	cmp	r3, #0
 8002122:	d107      	bne.n	8002134 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0208 	bic.w	r2, r2, #8
 8002132:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002148:	2220      	movs	r2, #32
 800214a:	409a      	lsls	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4013      	ands	r3, r2
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 808f 	beq.w	8002274 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0310 	and.w	r3, r3, #16
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 8087 	beq.w	8002274 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216a:	2220      	movs	r2, #32
 800216c:	409a      	lsls	r2, r3
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b05      	cmp	r3, #5
 800217c:	d136      	bne.n	80021ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0216 	bic.w	r2, r2, #22
 800218c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695a      	ldr	r2, [r3, #20]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800219c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d103      	bne.n	80021ae <HAL_DMA_IRQHandler+0x1da>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d007      	beq.n	80021be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 0208 	bic.w	r2, r2, #8
 80021bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c2:	223f      	movs	r2, #63	; 0x3f
 80021c4:	409a      	lsls	r2, r3
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d07e      	beq.n	80022e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	4798      	blx	r3
        }
        return;
 80021ea:	e079      	b.n	80022e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d01d      	beq.n	8002236 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10d      	bne.n	8002224 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220c:	2b00      	cmp	r3, #0
 800220e:	d031      	beq.n	8002274 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	4798      	blx	r3
 8002218:	e02c      	b.n	8002274 <HAL_DMA_IRQHandler+0x2a0>
 800221a:	bf00      	nop
 800221c:	20000000 	.word	0x20000000
 8002220:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002228:	2b00      	cmp	r3, #0
 800222a:	d023      	beq.n	8002274 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	4798      	blx	r3
 8002234:	e01e      	b.n	8002274 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10f      	bne.n	8002264 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0210 	bic.w	r2, r2, #16
 8002252:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002278:	2b00      	cmp	r3, #0
 800227a:	d032      	beq.n	80022e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b00      	cmp	r3, #0
 8002286:	d022      	beq.n	80022ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2205      	movs	r2, #5
 800228c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0201 	bic.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	3301      	adds	r3, #1
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d307      	bcc.n	80022bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f2      	bne.n	80022a0 <HAL_DMA_IRQHandler+0x2cc>
 80022ba:	e000      	b.n	80022be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d005      	beq.n	80022e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	4798      	blx	r3
 80022de:	e000      	b.n	80022e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80022e0:	bf00      	nop
    }
  }
}
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	460b      	mov	r3, r1
 80022f2:	607a      	str	r2, [r7, #4]
 80022f4:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_DMA_RegisterCallback+0x20>
 8002304:	2302      	movs	r3, #2
 8002306:	e03d      	b.n	8002384 <HAL_DMA_RegisterCallback+0x9c>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b01      	cmp	r3, #1
 800231a:	d12c      	bne.n	8002376 <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 800231c:	7afb      	ldrb	r3, [r7, #11]
 800231e:	2b05      	cmp	r3, #5
 8002320:	d826      	bhi.n	8002370 <HAL_DMA_RegisterCallback+0x88>
 8002322:	a201      	add	r2, pc, #4	; (adr r2, 8002328 <HAL_DMA_RegisterCallback+0x40>)
 8002324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002328:	08002341 	.word	0x08002341
 800232c:	08002349 	.word	0x08002349
 8002330:	08002351 	.word	0x08002351
 8002334:	08002359 	.word	0x08002359
 8002338:	08002361 	.word	0x08002361
 800233c:	08002369 	.word	0x08002369
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8002346:	e018      	b.n	800237a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800234e:	e014      	b.n	800237a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8002356:	e010      	b.n	800237a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 800235e:	e00c      	b.n	800237a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8002366:	e008      	b.n	800237a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800236e:	e004      	b.n	800237a <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	75fb      	strb	r3, [r7, #23]
      break;
 8002374:	e001      	b.n	800237a <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8002382:	7dfb      	ldrb	r3, [r7, #23]
}
 8002384:	4618      	mov	r0, r3
 8002386:	371c      	adds	r7, #28
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	2b40      	cmp	r3, #64	; 0x40
 80023bc:	d108      	bne.n	80023d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023ce:	e007      	b.n	80023e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	60da      	str	r2, [r3, #12]
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	3b10      	subs	r3, #16
 80023fc:	4a14      	ldr	r2, [pc, #80]	; (8002450 <DMA_CalcBaseAndBitshift+0x64>)
 80023fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002402:	091b      	lsrs	r3, r3, #4
 8002404:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002406:	4a13      	ldr	r2, [pc, #76]	; (8002454 <DMA_CalcBaseAndBitshift+0x68>)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4413      	add	r3, r2
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2b03      	cmp	r3, #3
 8002418:	d909      	bls.n	800242e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002422:	f023 0303 	bic.w	r3, r3, #3
 8002426:	1d1a      	adds	r2, r3, #4
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	659a      	str	r2, [r3, #88]	; 0x58
 800242c:	e007      	b.n	800243e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002436:	f023 0303 	bic.w	r3, r3, #3
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	aaaaaaab 	.word	0xaaaaaaab
 8002454:	08006628 	.word	0x08006628

08002458 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002468:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d11f      	bne.n	80024b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	2b03      	cmp	r3, #3
 8002476:	d856      	bhi.n	8002526 <DMA_CheckFifoParam+0xce>
 8002478:	a201      	add	r2, pc, #4	; (adr r2, 8002480 <DMA_CheckFifoParam+0x28>)
 800247a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247e:	bf00      	nop
 8002480:	08002491 	.word	0x08002491
 8002484:	080024a3 	.word	0x080024a3
 8002488:	08002491 	.word	0x08002491
 800248c:	08002527 	.word	0x08002527
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002494:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d046      	beq.n	800252a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a0:	e043      	b.n	800252a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024aa:	d140      	bne.n	800252e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b0:	e03d      	b.n	800252e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ba:	d121      	bne.n	8002500 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2b03      	cmp	r3, #3
 80024c0:	d837      	bhi.n	8002532 <DMA_CheckFifoParam+0xda>
 80024c2:	a201      	add	r2, pc, #4	; (adr r2, 80024c8 <DMA_CheckFifoParam+0x70>)
 80024c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c8:	080024d9 	.word	0x080024d9
 80024cc:	080024df 	.word	0x080024df
 80024d0:	080024d9 	.word	0x080024d9
 80024d4:	080024f1 	.word	0x080024f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	73fb      	strb	r3, [r7, #15]
      break;
 80024dc:	e030      	b.n	8002540 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d025      	beq.n	8002536 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ee:	e022      	b.n	8002536 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024f8:	d11f      	bne.n	800253a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024fe:	e01c      	b.n	800253a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d903      	bls.n	800250e <DMA_CheckFifoParam+0xb6>
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2b03      	cmp	r3, #3
 800250a:	d003      	beq.n	8002514 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800250c:	e018      	b.n	8002540 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	73fb      	strb	r3, [r7, #15]
      break;
 8002512:	e015      	b.n	8002540 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002518:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00e      	beq.n	800253e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
      break;
 8002524:	e00b      	b.n	800253e <DMA_CheckFifoParam+0xe6>
      break;
 8002526:	bf00      	nop
 8002528:	e00a      	b.n	8002540 <DMA_CheckFifoParam+0xe8>
      break;
 800252a:	bf00      	nop
 800252c:	e008      	b.n	8002540 <DMA_CheckFifoParam+0xe8>
      break;
 800252e:	bf00      	nop
 8002530:	e006      	b.n	8002540 <DMA_CheckFifoParam+0xe8>
      break;
 8002532:	bf00      	nop
 8002534:	e004      	b.n	8002540 <DMA_CheckFifoParam+0xe8>
      break;
 8002536:	bf00      	nop
 8002538:	e002      	b.n	8002540 <DMA_CheckFifoParam+0xe8>
      break;   
 800253a:	bf00      	nop
 800253c:	e000      	b.n	8002540 <DMA_CheckFifoParam+0xe8>
      break;
 800253e:	bf00      	nop
    }
  } 
  
  return status; 
 8002540:	7bfb      	ldrb	r3, [r7, #15]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop

08002550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002550:	b480      	push	{r7}
 8002552:	b089      	sub	sp, #36	; 0x24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
 800256a:	e159      	b.n	8002820 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800256c:	2201      	movs	r2, #1
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	4013      	ands	r3, r2
 800257e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	429a      	cmp	r2, r3
 8002586:	f040 8148 	bne.w	800281a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b01      	cmp	r3, #1
 8002594:	d005      	beq.n	80025a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d130      	bne.n	8002604 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	2203      	movs	r2, #3
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025d8:	2201      	movs	r2, #1
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	f003 0201 	and.w	r2, r3, #1
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	2b03      	cmp	r3, #3
 800260e:	d017      	beq.n	8002640 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	2203      	movs	r2, #3
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d123      	bne.n	8002694 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	08da      	lsrs	r2, r3, #3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3208      	adds	r2, #8
 8002654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002658:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	220f      	movs	r2, #15
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	08da      	lsrs	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3208      	adds	r2, #8
 800268e:	69b9      	ldr	r1, [r7, #24]
 8002690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	2203      	movs	r2, #3
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 0203 	and.w	r2, r3, #3
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80a2 	beq.w	800281a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	4b57      	ldr	r3, [pc, #348]	; (8002838 <HAL_GPIO_Init+0x2e8>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	4a56      	ldr	r2, [pc, #344]	; (8002838 <HAL_GPIO_Init+0x2e8>)
 80026e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e4:	6453      	str	r3, [r2, #68]	; 0x44
 80026e6:	4b54      	ldr	r3, [pc, #336]	; (8002838 <HAL_GPIO_Init+0x2e8>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026f2:	4a52      	ldr	r2, [pc, #328]	; (800283c <HAL_GPIO_Init+0x2ec>)
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	089b      	lsrs	r3, r3, #2
 80026f8:	3302      	adds	r3, #2
 80026fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	220f      	movs	r2, #15
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a49      	ldr	r2, [pc, #292]	; (8002840 <HAL_GPIO_Init+0x2f0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d019      	beq.n	8002752 <HAL_GPIO_Init+0x202>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a48      	ldr	r2, [pc, #288]	; (8002844 <HAL_GPIO_Init+0x2f4>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d013      	beq.n	800274e <HAL_GPIO_Init+0x1fe>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a47      	ldr	r2, [pc, #284]	; (8002848 <HAL_GPIO_Init+0x2f8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00d      	beq.n	800274a <HAL_GPIO_Init+0x1fa>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a46      	ldr	r2, [pc, #280]	; (800284c <HAL_GPIO_Init+0x2fc>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d007      	beq.n	8002746 <HAL_GPIO_Init+0x1f6>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a45      	ldr	r2, [pc, #276]	; (8002850 <HAL_GPIO_Init+0x300>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d101      	bne.n	8002742 <HAL_GPIO_Init+0x1f2>
 800273e:	2304      	movs	r3, #4
 8002740:	e008      	b.n	8002754 <HAL_GPIO_Init+0x204>
 8002742:	2307      	movs	r3, #7
 8002744:	e006      	b.n	8002754 <HAL_GPIO_Init+0x204>
 8002746:	2303      	movs	r3, #3
 8002748:	e004      	b.n	8002754 <HAL_GPIO_Init+0x204>
 800274a:	2302      	movs	r3, #2
 800274c:	e002      	b.n	8002754 <HAL_GPIO_Init+0x204>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <HAL_GPIO_Init+0x204>
 8002752:	2300      	movs	r3, #0
 8002754:	69fa      	ldr	r2, [r7, #28]
 8002756:	f002 0203 	and.w	r2, r2, #3
 800275a:	0092      	lsls	r2, r2, #2
 800275c:	4093      	lsls	r3, r2
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002764:	4935      	ldr	r1, [pc, #212]	; (800283c <HAL_GPIO_Init+0x2ec>)
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	089b      	lsrs	r3, r3, #2
 800276a:	3302      	adds	r3, #2
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002772:	4b38      	ldr	r3, [pc, #224]	; (8002854 <HAL_GPIO_Init+0x304>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	43db      	mvns	r3, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4013      	ands	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002796:	4a2f      	ldr	r2, [pc, #188]	; (8002854 <HAL_GPIO_Init+0x304>)
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800279c:	4b2d      	ldr	r3, [pc, #180]	; (8002854 <HAL_GPIO_Init+0x304>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027c0:	4a24      	ldr	r2, [pc, #144]	; (8002854 <HAL_GPIO_Init+0x304>)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027c6:	4b23      	ldr	r3, [pc, #140]	; (8002854 <HAL_GPIO_Init+0x304>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ea:	4a1a      	ldr	r2, [pc, #104]	; (8002854 <HAL_GPIO_Init+0x304>)
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027f0:	4b18      	ldr	r3, [pc, #96]	; (8002854 <HAL_GPIO_Init+0x304>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002814:	4a0f      	ldr	r2, [pc, #60]	; (8002854 <HAL_GPIO_Init+0x304>)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3301      	adds	r3, #1
 800281e:	61fb      	str	r3, [r7, #28]
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	2b0f      	cmp	r3, #15
 8002824:	f67f aea2 	bls.w	800256c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002828:	bf00      	nop
 800282a:	bf00      	nop
 800282c:	3724      	adds	r7, #36	; 0x24
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40023800 	.word	0x40023800
 800283c:	40013800 	.word	0x40013800
 8002840:	40020000 	.word	0x40020000
 8002844:	40020400 	.word	0x40020400
 8002848:	40020800 	.word	0x40020800
 800284c:	40020c00 	.word	0x40020c00
 8002850:	40021000 	.word	0x40021000
 8002854:	40013c00 	.word	0x40013c00

08002858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	807b      	strh	r3, [r7, #2]
 8002864:	4613      	mov	r3, r2
 8002866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002868:	787b      	ldrb	r3, [r7, #1]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800286e:	887a      	ldrh	r2, [r7, #2]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002874:	e003      	b.n	800287e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002876:	887b      	ldrh	r3, [r7, #2]
 8002878:	041a      	lsls	r2, r3, #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	619a      	str	r2, [r3, #24]
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
	...

0800288c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e267      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d075      	beq.n	8002996 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028aa:	4b88      	ldr	r3, [pc, #544]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d00c      	beq.n	80028d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028b6:	4b85      	ldr	r3, [pc, #532]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d112      	bne.n	80028e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028c2:	4b82      	ldr	r3, [pc, #520]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ce:	d10b      	bne.n	80028e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d0:	4b7e      	ldr	r3, [pc, #504]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d05b      	beq.n	8002994 <HAL_RCC_OscConfig+0x108>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d157      	bne.n	8002994 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e242      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f0:	d106      	bne.n	8002900 <HAL_RCC_OscConfig+0x74>
 80028f2:	4b76      	ldr	r3, [pc, #472]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a75      	ldr	r2, [pc, #468]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 80028f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	e01d      	b.n	800293c <HAL_RCC_OscConfig+0xb0>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002908:	d10c      	bne.n	8002924 <HAL_RCC_OscConfig+0x98>
 800290a:	4b70      	ldr	r3, [pc, #448]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a6f      	ldr	r2, [pc, #444]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 8002910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	4b6d      	ldr	r3, [pc, #436]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a6c      	ldr	r2, [pc, #432]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 800291c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	e00b      	b.n	800293c <HAL_RCC_OscConfig+0xb0>
 8002924:	4b69      	ldr	r3, [pc, #420]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a68      	ldr	r2, [pc, #416]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 800292a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800292e:	6013      	str	r3, [r2, #0]
 8002930:	4b66      	ldr	r3, [pc, #408]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a65      	ldr	r2, [pc, #404]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 8002936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800293a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d013      	beq.n	800296c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002944:	f7ff f8fe 	bl	8001b44 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800294c:	f7ff f8fa 	bl	8001b44 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b64      	cmp	r3, #100	; 0x64
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e207      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295e:	4b5b      	ldr	r3, [pc, #364]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0xc0>
 800296a:	e014      	b.n	8002996 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296c:	f7ff f8ea 	bl	8001b44 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002974:	f7ff f8e6 	bl	8001b44 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b64      	cmp	r3, #100	; 0x64
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e1f3      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002986:	4b51      	ldr	r3, [pc, #324]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0xe8>
 8002992:	e000      	b.n	8002996 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d063      	beq.n	8002a6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029a2:	4b4a      	ldr	r3, [pc, #296]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00b      	beq.n	80029c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ae:	4b47      	ldr	r3, [pc, #284]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d11c      	bne.n	80029f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ba:	4b44      	ldr	r3, [pc, #272]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d116      	bne.n	80029f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c6:	4b41      	ldr	r3, [pc, #260]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d005      	beq.n	80029de <HAL_RCC_OscConfig+0x152>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d001      	beq.n	80029de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e1c7      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029de:	4b3b      	ldr	r3, [pc, #236]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4937      	ldr	r1, [pc, #220]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f2:	e03a      	b.n	8002a6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d020      	beq.n	8002a3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029fc:	4b34      	ldr	r3, [pc, #208]	; (8002ad0 <HAL_RCC_OscConfig+0x244>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a02:	f7ff f89f 	bl	8001b44 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a0a:	f7ff f89b 	bl	8001b44 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e1a8      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1c:	4b2b      	ldr	r3, [pc, #172]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0f0      	beq.n	8002a0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a28:	4b28      	ldr	r3, [pc, #160]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	4925      	ldr	r1, [pc, #148]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	600b      	str	r3, [r1, #0]
 8002a3c:	e015      	b.n	8002a6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a3e:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <HAL_RCC_OscConfig+0x244>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7ff f87e 	bl	8001b44 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a4c:	f7ff f87a 	bl	8001b44 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e187      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5e:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d036      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d016      	beq.n	8002aac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a7e:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <HAL_RCC_OscConfig+0x248>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a84:	f7ff f85e 	bl	8001b44 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a8c:	f7ff f85a 	bl	8001b44 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e167      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 8002aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x200>
 8002aaa:	e01b      	b.n	8002ae4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aac:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <HAL_RCC_OscConfig+0x248>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab2:	f7ff f847 	bl	8001b44 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab8:	e00e      	b.n	8002ad8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aba:	f7ff f843 	bl	8001b44 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d907      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e150      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	42470000 	.word	0x42470000
 8002ad4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad8:	4b88      	ldr	r3, [pc, #544]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1ea      	bne.n	8002aba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 8097 	beq.w	8002c20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af2:	2300      	movs	r3, #0
 8002af4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af6:	4b81      	ldr	r3, [pc, #516]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10f      	bne.n	8002b22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	4b7d      	ldr	r3, [pc, #500]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	4a7c      	ldr	r2, [pc, #496]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b10:	6413      	str	r3, [r2, #64]	; 0x40
 8002b12:	4b7a      	ldr	r3, [pc, #488]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b22:	4b77      	ldr	r3, [pc, #476]	; (8002d00 <HAL_RCC_OscConfig+0x474>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d118      	bne.n	8002b60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b2e:	4b74      	ldr	r3, [pc, #464]	; (8002d00 <HAL_RCC_OscConfig+0x474>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a73      	ldr	r2, [pc, #460]	; (8002d00 <HAL_RCC_OscConfig+0x474>)
 8002b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b3a:	f7ff f803 	bl	8001b44 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b42:	f7fe ffff 	bl	8001b44 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e10c      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b54:	4b6a      	ldr	r3, [pc, #424]	; (8002d00 <HAL_RCC_OscConfig+0x474>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0f0      	beq.n	8002b42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d106      	bne.n	8002b76 <HAL_RCC_OscConfig+0x2ea>
 8002b68:	4b64      	ldr	r3, [pc, #400]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6c:	4a63      	ldr	r2, [pc, #396]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	6713      	str	r3, [r2, #112]	; 0x70
 8002b74:	e01c      	b.n	8002bb0 <HAL_RCC_OscConfig+0x324>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b05      	cmp	r3, #5
 8002b7c:	d10c      	bne.n	8002b98 <HAL_RCC_OscConfig+0x30c>
 8002b7e:	4b5f      	ldr	r3, [pc, #380]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b82:	4a5e      	ldr	r2, [pc, #376]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b84:	f043 0304 	orr.w	r3, r3, #4
 8002b88:	6713      	str	r3, [r2, #112]	; 0x70
 8002b8a:	4b5c      	ldr	r3, [pc, #368]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8e:	4a5b      	ldr	r2, [pc, #364]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	6713      	str	r3, [r2, #112]	; 0x70
 8002b96:	e00b      	b.n	8002bb0 <HAL_RCC_OscConfig+0x324>
 8002b98:	4b58      	ldr	r3, [pc, #352]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9c:	4a57      	ldr	r2, [pc, #348]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b9e:	f023 0301 	bic.w	r3, r3, #1
 8002ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba4:	4b55      	ldr	r3, [pc, #340]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba8:	4a54      	ldr	r2, [pc, #336]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002baa:	f023 0304 	bic.w	r3, r3, #4
 8002bae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d015      	beq.n	8002be4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb8:	f7fe ffc4 	bl	8001b44 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bbe:	e00a      	b.n	8002bd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc0:	f7fe ffc0 	bl	8001b44 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e0cb      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd6:	4b49      	ldr	r3, [pc, #292]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0ee      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x334>
 8002be2:	e014      	b.n	8002c0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be4:	f7fe ffae 	bl	8001b44 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bea:	e00a      	b.n	8002c02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bec:	f7fe ffaa 	bl	8001b44 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e0b5      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c02:	4b3e      	ldr	r3, [pc, #248]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1ee      	bne.n	8002bec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c0e:	7dfb      	ldrb	r3, [r7, #23]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d105      	bne.n	8002c20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c14:	4b39      	ldr	r3, [pc, #228]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	4a38      	ldr	r2, [pc, #224]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 80a1 	beq.w	8002d6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c2a:	4b34      	ldr	r3, [pc, #208]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d05c      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d141      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3e:	4b31      	ldr	r3, [pc, #196]	; (8002d04 <HAL_RCC_OscConfig+0x478>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c44:	f7fe ff7e 	bl	8001b44 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c4c:	f7fe ff7a 	bl	8001b44 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e087      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c5e:	4b27      	ldr	r3, [pc, #156]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69da      	ldr	r2, [r3, #28]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	019b      	lsls	r3, r3, #6
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c80:	085b      	lsrs	r3, r3, #1
 8002c82:	3b01      	subs	r3, #1
 8002c84:	041b      	lsls	r3, r3, #16
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	061b      	lsls	r3, r3, #24
 8002c8e:	491b      	ldr	r1, [pc, #108]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c94:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <HAL_RCC_OscConfig+0x478>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9a:	f7fe ff53 	bl	8001b44 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca2:	f7fe ff4f 	bl	8001b44 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e05c      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0f0      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x416>
 8002cc0:	e054      	b.n	8002d6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc2:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <HAL_RCC_OscConfig+0x478>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc8:	f7fe ff3c 	bl	8001b44 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd0:	f7fe ff38 	bl	8001b44 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e045      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce2:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x444>
 8002cee:	e03d      	b.n	8002d6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d107      	bne.n	8002d08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e038      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40007000 	.word	0x40007000
 8002d04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d08:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <HAL_RCC_OscConfig+0x4ec>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d028      	beq.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d121      	bne.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d11a      	bne.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d38:	4013      	ands	r3, r2
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d111      	bne.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4e:	085b      	lsrs	r3, r3, #1
 8002d50:	3b01      	subs	r3, #1
 8002d52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d107      	bne.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800

08002d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e0cc      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d90:	4b68      	ldr	r3, [pc, #416]	; (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d90c      	bls.n	8002db8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9e:	4b65      	ldr	r3, [pc, #404]	; (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da6:	4b63      	ldr	r3, [pc, #396]	; (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0b8      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d020      	beq.n	8002e06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dd0:	4b59      	ldr	r3, [pc, #356]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	4a58      	ldr	r2, [pc, #352]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002de8:	4b53      	ldr	r3, [pc, #332]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	4a52      	ldr	r2, [pc, #328]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002df2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df4:	4b50      	ldr	r3, [pc, #320]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	494d      	ldr	r1, [pc, #308]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d044      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d107      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1a:	4b47      	ldr	r3, [pc, #284]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d119      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e07f      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d003      	beq.n	8002e3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d107      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3a:	4b3f      	ldr	r3, [pc, #252]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d109      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e06f      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4a:	4b3b      	ldr	r3, [pc, #236]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e067      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e5a:	4b37      	ldr	r3, [pc, #220]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f023 0203 	bic.w	r2, r3, #3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	4934      	ldr	r1, [pc, #208]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e6c:	f7fe fe6a 	bl	8001b44 <HAL_GetTick>
 8002e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e72:	e00a      	b.n	8002e8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e74:	f7fe fe66 	bl	8001b44 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e04f      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8a:	4b2b      	ldr	r3, [pc, #172]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 020c 	and.w	r2, r3, #12
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d1eb      	bne.n	8002e74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e9c:	4b25      	ldr	r3, [pc, #148]	; (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d20c      	bcs.n	8002ec4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eaa:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb2:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d001      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e032      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed0:	4b19      	ldr	r3, [pc, #100]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	4916      	ldr	r1, [pc, #88]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d009      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eee:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	490e      	ldr	r1, [pc, #56]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f02:	f000 f821 	bl	8002f48 <HAL_RCC_GetSysClockFreq>
 8002f06:	4602      	mov	r2, r0
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	091b      	lsrs	r3, r3, #4
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	490a      	ldr	r1, [pc, #40]	; (8002f3c <HAL_RCC_ClockConfig+0x1c0>)
 8002f14:	5ccb      	ldrb	r3, [r1, r3]
 8002f16:	fa22 f303 	lsr.w	r3, r2, r3
 8002f1a:	4a09      	ldr	r2, [pc, #36]	; (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f1e:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <HAL_RCC_ClockConfig+0x1c8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe fdca 	bl	8001abc <HAL_InitTick>

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40023c00 	.word	0x40023c00
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	08006610 	.word	0x08006610
 8002f40:	20000000 	.word	0x20000000
 8002f44:	20000004 	.word	0x20000004

08002f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f4c:	b094      	sub	sp, #80	; 0x50
 8002f4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	647b      	str	r3, [r7, #68]	; 0x44
 8002f54:	2300      	movs	r3, #0
 8002f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f58:	2300      	movs	r3, #0
 8002f5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f60:	4b79      	ldr	r3, [pc, #484]	; (8003148 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 030c 	and.w	r3, r3, #12
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d00d      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0x40>
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	f200 80e1 	bhi.w	8003134 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d002      	beq.n	8002f7c <HAL_RCC_GetSysClockFreq+0x34>
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d003      	beq.n	8002f82 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f7a:	e0db      	b.n	8003134 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f7c:	4b73      	ldr	r3, [pc, #460]	; (800314c <HAL_RCC_GetSysClockFreq+0x204>)
 8002f7e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f80:	e0db      	b.n	800313a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f82:	4b73      	ldr	r3, [pc, #460]	; (8003150 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f86:	e0d8      	b.n	800313a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f88:	4b6f      	ldr	r3, [pc, #444]	; (8003148 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f90:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f92:	4b6d      	ldr	r3, [pc, #436]	; (8003148 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d063      	beq.n	8003066 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f9e:	4b6a      	ldr	r3, [pc, #424]	; (8003148 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	099b      	lsrs	r3, r3, #6
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fa8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fb0:	633b      	str	r3, [r7, #48]	; 0x30
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8002fb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fba:	4622      	mov	r2, r4
 8002fbc:	462b      	mov	r3, r5
 8002fbe:	f04f 0000 	mov.w	r0, #0
 8002fc2:	f04f 0100 	mov.w	r1, #0
 8002fc6:	0159      	lsls	r1, r3, #5
 8002fc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fcc:	0150      	lsls	r0, r2, #5
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	1a51      	subs	r1, r2, r1
 8002fd6:	6139      	str	r1, [r7, #16]
 8002fd8:	4629      	mov	r1, r5
 8002fda:	eb63 0301 	sbc.w	r3, r3, r1
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fec:	4659      	mov	r1, fp
 8002fee:	018b      	lsls	r3, r1, #6
 8002ff0:	4651      	mov	r1, sl
 8002ff2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ff6:	4651      	mov	r1, sl
 8002ff8:	018a      	lsls	r2, r1, #6
 8002ffa:	4651      	mov	r1, sl
 8002ffc:	ebb2 0801 	subs.w	r8, r2, r1
 8003000:	4659      	mov	r1, fp
 8003002:	eb63 0901 	sbc.w	r9, r3, r1
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	f04f 0300 	mov.w	r3, #0
 800300e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003012:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003016:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800301a:	4690      	mov	r8, r2
 800301c:	4699      	mov	r9, r3
 800301e:	4623      	mov	r3, r4
 8003020:	eb18 0303 	adds.w	r3, r8, r3
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	462b      	mov	r3, r5
 8003028:	eb49 0303 	adc.w	r3, r9, r3
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	f04f 0300 	mov.w	r3, #0
 8003036:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800303a:	4629      	mov	r1, r5
 800303c:	024b      	lsls	r3, r1, #9
 800303e:	4621      	mov	r1, r4
 8003040:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003044:	4621      	mov	r1, r4
 8003046:	024a      	lsls	r2, r1, #9
 8003048:	4610      	mov	r0, r2
 800304a:	4619      	mov	r1, r3
 800304c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800304e:	2200      	movs	r2, #0
 8003050:	62bb      	str	r3, [r7, #40]	; 0x28
 8003052:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003054:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003058:	f7fd f912 	bl	8000280 <__aeabi_uldivmod>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4613      	mov	r3, r2
 8003062:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003064:	e058      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003066:	4b38      	ldr	r3, [pc, #224]	; (8003148 <HAL_RCC_GetSysClockFreq+0x200>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	099b      	lsrs	r3, r3, #6
 800306c:	2200      	movs	r2, #0
 800306e:	4618      	mov	r0, r3
 8003070:	4611      	mov	r1, r2
 8003072:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003076:	623b      	str	r3, [r7, #32]
 8003078:	2300      	movs	r3, #0
 800307a:	627b      	str	r3, [r7, #36]	; 0x24
 800307c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003080:	4642      	mov	r2, r8
 8003082:	464b      	mov	r3, r9
 8003084:	f04f 0000 	mov.w	r0, #0
 8003088:	f04f 0100 	mov.w	r1, #0
 800308c:	0159      	lsls	r1, r3, #5
 800308e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003092:	0150      	lsls	r0, r2, #5
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4641      	mov	r1, r8
 800309a:	ebb2 0a01 	subs.w	sl, r2, r1
 800309e:	4649      	mov	r1, r9
 80030a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030b8:	ebb2 040a 	subs.w	r4, r2, sl
 80030bc:	eb63 050b 	sbc.w	r5, r3, fp
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	f04f 0300 	mov.w	r3, #0
 80030c8:	00eb      	lsls	r3, r5, #3
 80030ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030ce:	00e2      	lsls	r2, r4, #3
 80030d0:	4614      	mov	r4, r2
 80030d2:	461d      	mov	r5, r3
 80030d4:	4643      	mov	r3, r8
 80030d6:	18e3      	adds	r3, r4, r3
 80030d8:	603b      	str	r3, [r7, #0]
 80030da:	464b      	mov	r3, r9
 80030dc:	eb45 0303 	adc.w	r3, r5, r3
 80030e0:	607b      	str	r3, [r7, #4]
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030ee:	4629      	mov	r1, r5
 80030f0:	028b      	lsls	r3, r1, #10
 80030f2:	4621      	mov	r1, r4
 80030f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030f8:	4621      	mov	r1, r4
 80030fa:	028a      	lsls	r2, r1, #10
 80030fc:	4610      	mov	r0, r2
 80030fe:	4619      	mov	r1, r3
 8003100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003102:	2200      	movs	r2, #0
 8003104:	61bb      	str	r3, [r7, #24]
 8003106:	61fa      	str	r2, [r7, #28]
 8003108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800310c:	f7fd f8b8 	bl	8000280 <__aeabi_uldivmod>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4613      	mov	r3, r2
 8003116:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_RCC_GetSysClockFreq+0x200>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	0c1b      	lsrs	r3, r3, #16
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	3301      	adds	r3, #1
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003128:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800312a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800312c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003130:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003132:	e002      	b.n	800313a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003134:	4b05      	ldr	r3, [pc, #20]	; (800314c <HAL_RCC_GetSysClockFreq+0x204>)
 8003136:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003138:	bf00      	nop
    }
  }
  return sysclockfreq;
 800313a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800313c:	4618      	mov	r0, r3
 800313e:	3750      	adds	r7, #80	; 0x50
 8003140:	46bd      	mov	sp, r7
 8003142:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003146:	bf00      	nop
 8003148:	40023800 	.word	0x40023800
 800314c:	00f42400 	.word	0x00f42400
 8003150:	007a1200 	.word	0x007a1200

08003154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003158:	4b03      	ldr	r3, [pc, #12]	; (8003168 <HAL_RCC_GetHCLKFreq+0x14>)
 800315a:	681b      	ldr	r3, [r3, #0]
}
 800315c:	4618      	mov	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	20000000 	.word	0x20000000

0800316c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003170:	f7ff fff0 	bl	8003154 <HAL_RCC_GetHCLKFreq>
 8003174:	4602      	mov	r2, r0
 8003176:	4b05      	ldr	r3, [pc, #20]	; (800318c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	0a9b      	lsrs	r3, r3, #10
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	4903      	ldr	r1, [pc, #12]	; (8003190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003182:	5ccb      	ldrb	r3, [r1, r3]
 8003184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003188:	4618      	mov	r0, r3
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40023800 	.word	0x40023800
 8003190:	08006620 	.word	0x08006620

08003194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003198:	f7ff ffdc 	bl	8003154 <HAL_RCC_GetHCLKFreq>
 800319c:	4602      	mov	r2, r0
 800319e:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	0b5b      	lsrs	r3, r3, #13
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	4903      	ldr	r1, [pc, #12]	; (80031b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031aa:	5ccb      	ldrb	r3, [r1, r3]
 80031ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40023800 	.word	0x40023800
 80031b8:	08006620 	.word	0x08006620

080031bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e041      	b.n	8003252 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d106      	bne.n	80031e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7fe f942 	bl	800146c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3304      	adds	r3, #4
 80031f8:	4619      	mov	r1, r3
 80031fa:	4610      	mov	r0, r2
 80031fc:	f000 fbf0 	bl	80039e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e041      	b.n	80032f0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d106      	bne.n	8003286 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 f839 	bl	80032f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2202      	movs	r2, #2
 800328a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3304      	adds	r3, #4
 8003296:	4619      	mov	r1, r3
 8003298:	4610      	mov	r0, r2
 800329a:	f000 fba1 	bl	80039e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d109      	bne.n	8003330 <HAL_TIM_PWM_Start+0x24>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b01      	cmp	r3, #1
 8003326:	bf14      	ite	ne
 8003328:	2301      	movne	r3, #1
 800332a:	2300      	moveq	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	e022      	b.n	8003376 <HAL_TIM_PWM_Start+0x6a>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	2b04      	cmp	r3, #4
 8003334:	d109      	bne.n	800334a <HAL_TIM_PWM_Start+0x3e>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b01      	cmp	r3, #1
 8003340:	bf14      	ite	ne
 8003342:	2301      	movne	r3, #1
 8003344:	2300      	moveq	r3, #0
 8003346:	b2db      	uxtb	r3, r3
 8003348:	e015      	b.n	8003376 <HAL_TIM_PWM_Start+0x6a>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b08      	cmp	r3, #8
 800334e:	d109      	bne.n	8003364 <HAL_TIM_PWM_Start+0x58>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b01      	cmp	r3, #1
 800335a:	bf14      	ite	ne
 800335c:	2301      	movne	r3, #1
 800335e:	2300      	moveq	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	e008      	b.n	8003376 <HAL_TIM_PWM_Start+0x6a>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b01      	cmp	r3, #1
 800336e:	bf14      	ite	ne
 8003370:	2301      	movne	r3, #1
 8003372:	2300      	moveq	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e068      	b.n	8003450 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d104      	bne.n	800338e <HAL_TIM_PWM_Start+0x82>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800338c:	e013      	b.n	80033b6 <HAL_TIM_PWM_Start+0xaa>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b04      	cmp	r3, #4
 8003392:	d104      	bne.n	800339e <HAL_TIM_PWM_Start+0x92>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800339c:	e00b      	b.n	80033b6 <HAL_TIM_PWM_Start+0xaa>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d104      	bne.n	80033ae <HAL_TIM_PWM_Start+0xa2>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033ac:	e003      	b.n	80033b6 <HAL_TIM_PWM_Start+0xaa>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2202      	movs	r2, #2
 80033b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2201      	movs	r2, #1
 80033bc:	6839      	ldr	r1, [r7, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fdb4 	bl	8003f2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a23      	ldr	r2, [pc, #140]	; (8003458 <HAL_TIM_PWM_Start+0x14c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d107      	bne.n	80033de <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a1d      	ldr	r2, [pc, #116]	; (8003458 <HAL_TIM_PWM_Start+0x14c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d018      	beq.n	800341a <HAL_TIM_PWM_Start+0x10e>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f0:	d013      	beq.n	800341a <HAL_TIM_PWM_Start+0x10e>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a19      	ldr	r2, [pc, #100]	; (800345c <HAL_TIM_PWM_Start+0x150>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d00e      	beq.n	800341a <HAL_TIM_PWM_Start+0x10e>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a17      	ldr	r2, [pc, #92]	; (8003460 <HAL_TIM_PWM_Start+0x154>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d009      	beq.n	800341a <HAL_TIM_PWM_Start+0x10e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a16      	ldr	r2, [pc, #88]	; (8003464 <HAL_TIM_PWM_Start+0x158>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d004      	beq.n	800341a <HAL_TIM_PWM_Start+0x10e>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a14      	ldr	r2, [pc, #80]	; (8003468 <HAL_TIM_PWM_Start+0x15c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d111      	bne.n	800343e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2b06      	cmp	r3, #6
 800342a:	d010      	beq.n	800344e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343c:	e007      	b.n	800344e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f042 0201 	orr.w	r2, r2, #1
 800344c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40010000 	.word	0x40010000
 800345c:	40000400 	.word	0x40000400
 8003460:	40000800 	.word	0x40000800
 8003464:	40000c00 	.word	0x40000c00
 8003468:	40014000 	.word	0x40014000

0800346c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b02      	cmp	r3, #2
 8003480:	d122      	bne.n	80034c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b02      	cmp	r3, #2
 800348e:	d11b      	bne.n	80034c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f06f 0202 	mvn.w	r2, #2
 8003498:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 fa77 	bl	80039a2 <HAL_TIM_IC_CaptureCallback>
 80034b4:	e005      	b.n	80034c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fa69 	bl	800398e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 fa7a 	bl	80039b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d122      	bne.n	800351c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d11b      	bne.n	800351c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f06f 0204 	mvn.w	r2, #4
 80034ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2202      	movs	r2, #2
 80034f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 fa4d 	bl	80039a2 <HAL_TIM_IC_CaptureCallback>
 8003508:	e005      	b.n	8003516 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fa3f 	bl	800398e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 fa50 	bl	80039b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b08      	cmp	r3, #8
 8003528:	d122      	bne.n	8003570 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 0308 	and.w	r3, r3, #8
 8003534:	2b08      	cmp	r3, #8
 8003536:	d11b      	bne.n	8003570 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0208 	mvn.w	r2, #8
 8003540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2204      	movs	r2, #4
 8003546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 fa23 	bl	80039a2 <HAL_TIM_IC_CaptureCallback>
 800355c:	e005      	b.n	800356a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fa15 	bl	800398e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 fa26 	bl	80039b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f003 0310 	and.w	r3, r3, #16
 800357a:	2b10      	cmp	r3, #16
 800357c:	d122      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b10      	cmp	r3, #16
 800358a:	d11b      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f06f 0210 	mvn.w	r2, #16
 8003594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2208      	movs	r2, #8
 800359a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f9f9 	bl	80039a2 <HAL_TIM_IC_CaptureCallback>
 80035b0:	e005      	b.n	80035be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f9eb 	bl	800398e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f9fc 	bl	80039b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d10e      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d107      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0201 	mvn.w	r2, #1
 80035e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7fd f910 	bl	8000810 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fa:	2b80      	cmp	r3, #128	; 0x80
 80035fc:	d10e      	bne.n	800361c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003608:	2b80      	cmp	r3, #128	; 0x80
 800360a:	d107      	bne.n	800361c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fd78 	bl	800410c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003626:	2b40      	cmp	r3, #64	; 0x40
 8003628:	d10e      	bne.n	8003648 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003634:	2b40      	cmp	r3, #64	; 0x40
 8003636:	d107      	bne.n	8003648 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f9c1 	bl	80039ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b20      	cmp	r3, #32
 8003654:	d10e      	bne.n	8003674 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b20      	cmp	r3, #32
 8003662:	d107      	bne.n	8003674 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f06f 0220 	mvn.w	r2, #32
 800366c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fd42 	bl	80040f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003674:	bf00      	nop
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003696:	2302      	movs	r3, #2
 8003698:	e0ae      	b.n	80037f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b0c      	cmp	r3, #12
 80036a6:	f200 809f 	bhi.w	80037e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036aa:	a201      	add	r2, pc, #4	; (adr r2, 80036b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b0:	080036e5 	.word	0x080036e5
 80036b4:	080037e9 	.word	0x080037e9
 80036b8:	080037e9 	.word	0x080037e9
 80036bc:	080037e9 	.word	0x080037e9
 80036c0:	08003725 	.word	0x08003725
 80036c4:	080037e9 	.word	0x080037e9
 80036c8:	080037e9 	.word	0x080037e9
 80036cc:	080037e9 	.word	0x080037e9
 80036d0:	08003767 	.word	0x08003767
 80036d4:	080037e9 	.word	0x080037e9
 80036d8:	080037e9 	.word	0x080037e9
 80036dc:	080037e9 	.word	0x080037e9
 80036e0:	080037a7 	.word	0x080037a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68b9      	ldr	r1, [r7, #8]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 f9f8 	bl	8003ae0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	699a      	ldr	r2, [r3, #24]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0208 	orr.w	r2, r2, #8
 80036fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699a      	ldr	r2, [r3, #24]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0204 	bic.w	r2, r2, #4
 800370e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6999      	ldr	r1, [r3, #24]
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	691a      	ldr	r2, [r3, #16]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	619a      	str	r2, [r3, #24]
      break;
 8003722:	e064      	b.n	80037ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68b9      	ldr	r1, [r7, #8]
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fa3e 	bl	8003bac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699a      	ldr	r2, [r3, #24]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800373e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800374e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6999      	ldr	r1, [r3, #24]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	021a      	lsls	r2, r3, #8
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	619a      	str	r2, [r3, #24]
      break;
 8003764:	e043      	b.n	80037ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68b9      	ldr	r1, [r7, #8]
 800376c:	4618      	mov	r0, r3
 800376e:	f000 fa89 	bl	8003c84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69da      	ldr	r2, [r3, #28]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 0208 	orr.w	r2, r2, #8
 8003780:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	69da      	ldr	r2, [r3, #28]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0204 	bic.w	r2, r2, #4
 8003790:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	69d9      	ldr	r1, [r3, #28]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	691a      	ldr	r2, [r3, #16]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	61da      	str	r2, [r3, #28]
      break;
 80037a4:	e023      	b.n	80037ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68b9      	ldr	r1, [r7, #8]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 fad3 	bl	8003d58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	69da      	ldr	r2, [r3, #28]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69da      	ldr	r2, [r3, #28]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69d9      	ldr	r1, [r3, #28]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	021a      	lsls	r2, r3, #8
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	61da      	str	r2, [r3, #28]
      break;
 80037e6:	e002      	b.n	80037ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	75fb      	strb	r3, [r7, #23]
      break;
 80037ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800380a:	2300      	movs	r3, #0
 800380c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_TIM_ConfigClockSource+0x1c>
 8003818:	2302      	movs	r3, #2
 800381a:	e0b4      	b.n	8003986 <HAL_TIM_ConfigClockSource+0x186>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800383a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003842:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003854:	d03e      	beq.n	80038d4 <HAL_TIM_ConfigClockSource+0xd4>
 8003856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800385a:	f200 8087 	bhi.w	800396c <HAL_TIM_ConfigClockSource+0x16c>
 800385e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003862:	f000 8086 	beq.w	8003972 <HAL_TIM_ConfigClockSource+0x172>
 8003866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800386a:	d87f      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x16c>
 800386c:	2b70      	cmp	r3, #112	; 0x70
 800386e:	d01a      	beq.n	80038a6 <HAL_TIM_ConfigClockSource+0xa6>
 8003870:	2b70      	cmp	r3, #112	; 0x70
 8003872:	d87b      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x16c>
 8003874:	2b60      	cmp	r3, #96	; 0x60
 8003876:	d050      	beq.n	800391a <HAL_TIM_ConfigClockSource+0x11a>
 8003878:	2b60      	cmp	r3, #96	; 0x60
 800387a:	d877      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x16c>
 800387c:	2b50      	cmp	r3, #80	; 0x50
 800387e:	d03c      	beq.n	80038fa <HAL_TIM_ConfigClockSource+0xfa>
 8003880:	2b50      	cmp	r3, #80	; 0x50
 8003882:	d873      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x16c>
 8003884:	2b40      	cmp	r3, #64	; 0x40
 8003886:	d058      	beq.n	800393a <HAL_TIM_ConfigClockSource+0x13a>
 8003888:	2b40      	cmp	r3, #64	; 0x40
 800388a:	d86f      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x16c>
 800388c:	2b30      	cmp	r3, #48	; 0x30
 800388e:	d064      	beq.n	800395a <HAL_TIM_ConfigClockSource+0x15a>
 8003890:	2b30      	cmp	r3, #48	; 0x30
 8003892:	d86b      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x16c>
 8003894:	2b20      	cmp	r3, #32
 8003896:	d060      	beq.n	800395a <HAL_TIM_ConfigClockSource+0x15a>
 8003898:	2b20      	cmp	r3, #32
 800389a:	d867      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x16c>
 800389c:	2b00      	cmp	r3, #0
 800389e:	d05c      	beq.n	800395a <HAL_TIM_ConfigClockSource+0x15a>
 80038a0:	2b10      	cmp	r3, #16
 80038a2:	d05a      	beq.n	800395a <HAL_TIM_ConfigClockSource+0x15a>
 80038a4:	e062      	b.n	800396c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	6899      	ldr	r1, [r3, #8]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f000 fb19 	bl	8003eec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	609a      	str	r2, [r3, #8]
      break;
 80038d2:	e04f      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6818      	ldr	r0, [r3, #0]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	6899      	ldr	r1, [r3, #8]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f000 fb02 	bl	8003eec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038f6:	609a      	str	r2, [r3, #8]
      break;
 80038f8:	e03c      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6818      	ldr	r0, [r3, #0]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	6859      	ldr	r1, [r3, #4]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	461a      	mov	r2, r3
 8003908:	f000 fa76 	bl	8003df8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2150      	movs	r1, #80	; 0x50
 8003912:	4618      	mov	r0, r3
 8003914:	f000 facf 	bl	8003eb6 <TIM_ITRx_SetConfig>
      break;
 8003918:	e02c      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6818      	ldr	r0, [r3, #0]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	6859      	ldr	r1, [r3, #4]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	461a      	mov	r2, r3
 8003928:	f000 fa95 	bl	8003e56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2160      	movs	r1, #96	; 0x60
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fabf 	bl	8003eb6 <TIM_ITRx_SetConfig>
      break;
 8003938:	e01c      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6818      	ldr	r0, [r3, #0]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	6859      	ldr	r1, [r3, #4]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	461a      	mov	r2, r3
 8003948:	f000 fa56 	bl	8003df8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2140      	movs	r1, #64	; 0x40
 8003952:	4618      	mov	r0, r3
 8003954:	f000 faaf 	bl	8003eb6 <TIM_ITRx_SetConfig>
      break;
 8003958:	e00c      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4619      	mov	r1, r3
 8003964:	4610      	mov	r0, r2
 8003966:	f000 faa6 	bl	8003eb6 <TIM_ITRx_SetConfig>
      break;
 800396a:	e003      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	73fb      	strb	r3, [r7, #15]
      break;
 8003970:	e000      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003972:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003984:	7bfb      	ldrb	r3, [r7, #15]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b083      	sub	sp, #12
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
	...

080039e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a34      	ldr	r2, [pc, #208]	; (8003ac4 <TIM_Base_SetConfig+0xe4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d00f      	beq.n	8003a18 <TIM_Base_SetConfig+0x38>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039fe:	d00b      	beq.n	8003a18 <TIM_Base_SetConfig+0x38>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a31      	ldr	r2, [pc, #196]	; (8003ac8 <TIM_Base_SetConfig+0xe8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d007      	beq.n	8003a18 <TIM_Base_SetConfig+0x38>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a30      	ldr	r2, [pc, #192]	; (8003acc <TIM_Base_SetConfig+0xec>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d003      	beq.n	8003a18 <TIM_Base_SetConfig+0x38>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a2f      	ldr	r2, [pc, #188]	; (8003ad0 <TIM_Base_SetConfig+0xf0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d108      	bne.n	8003a2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a25      	ldr	r2, [pc, #148]	; (8003ac4 <TIM_Base_SetConfig+0xe4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d01b      	beq.n	8003a6a <TIM_Base_SetConfig+0x8a>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a38:	d017      	beq.n	8003a6a <TIM_Base_SetConfig+0x8a>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a22      	ldr	r2, [pc, #136]	; (8003ac8 <TIM_Base_SetConfig+0xe8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d013      	beq.n	8003a6a <TIM_Base_SetConfig+0x8a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a21      	ldr	r2, [pc, #132]	; (8003acc <TIM_Base_SetConfig+0xec>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d00f      	beq.n	8003a6a <TIM_Base_SetConfig+0x8a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a20      	ldr	r2, [pc, #128]	; (8003ad0 <TIM_Base_SetConfig+0xf0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00b      	beq.n	8003a6a <TIM_Base_SetConfig+0x8a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a1f      	ldr	r2, [pc, #124]	; (8003ad4 <TIM_Base_SetConfig+0xf4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d007      	beq.n	8003a6a <TIM_Base_SetConfig+0x8a>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a1e      	ldr	r2, [pc, #120]	; (8003ad8 <TIM_Base_SetConfig+0xf8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d003      	beq.n	8003a6a <TIM_Base_SetConfig+0x8a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a1d      	ldr	r2, [pc, #116]	; (8003adc <TIM_Base_SetConfig+0xfc>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d108      	bne.n	8003a7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a08      	ldr	r2, [pc, #32]	; (8003ac4 <TIM_Base_SetConfig+0xe4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d103      	bne.n	8003ab0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	615a      	str	r2, [r3, #20]
}
 8003ab6:	bf00      	nop
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40010000 	.word	0x40010000
 8003ac8:	40000400 	.word	0x40000400
 8003acc:	40000800 	.word	0x40000800
 8003ad0:	40000c00 	.word	0x40000c00
 8003ad4:	40014000 	.word	0x40014000
 8003ad8:	40014400 	.word	0x40014400
 8003adc:	40014800 	.word	0x40014800

08003ae0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	f023 0201 	bic.w	r2, r3, #1
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 0303 	bic.w	r3, r3, #3
 8003b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f023 0302 	bic.w	r3, r3, #2
 8003b28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a1c      	ldr	r2, [pc, #112]	; (8003ba8 <TIM_OC1_SetConfig+0xc8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d10c      	bne.n	8003b56 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f023 0308 	bic.w	r3, r3, #8
 8003b42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f023 0304 	bic.w	r3, r3, #4
 8003b54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a13      	ldr	r2, [pc, #76]	; (8003ba8 <TIM_OC1_SetConfig+0xc8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d111      	bne.n	8003b82 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	621a      	str	r2, [r3, #32]
}
 8003b9c:	bf00      	nop
 8003b9e:	371c      	adds	r7, #28
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	40010000 	.word	0x40010000

08003bac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	f023 0210 	bic.w	r2, r3, #16
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	021b      	lsls	r3, r3, #8
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f023 0320 	bic.w	r3, r3, #32
 8003bf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a1e      	ldr	r2, [pc, #120]	; (8003c80 <TIM_OC2_SetConfig+0xd4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d10d      	bne.n	8003c28 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a15      	ldr	r2, [pc, #84]	; (8003c80 <TIM_OC2_SetConfig+0xd4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d113      	bne.n	8003c58 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	621a      	str	r2, [r3, #32]
}
 8003c72:	bf00      	nop
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40010000 	.word	0x40010000

08003c84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0303 	bic.w	r3, r3, #3
 8003cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	021b      	lsls	r3, r3, #8
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a1d      	ldr	r2, [pc, #116]	; (8003d54 <TIM_OC3_SetConfig+0xd0>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d10d      	bne.n	8003cfe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	021b      	lsls	r3, r3, #8
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a14      	ldr	r2, [pc, #80]	; (8003d54 <TIM_OC3_SetConfig+0xd0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d113      	bne.n	8003d2e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	621a      	str	r2, [r3, #32]
}
 8003d48:	bf00      	nop
 8003d4a:	371c      	adds	r7, #28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	40010000 	.word	0x40010000

08003d58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	021b      	lsls	r3, r3, #8
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003da2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	031b      	lsls	r3, r3, #12
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a10      	ldr	r2, [pc, #64]	; (8003df4 <TIM_OC4_SetConfig+0x9c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d109      	bne.n	8003dcc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	019b      	lsls	r3, r3, #6
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	621a      	str	r2, [r3, #32]
}
 8003de6:	bf00      	nop
 8003de8:	371c      	adds	r7, #28
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	40010000 	.word	0x40010000

08003df8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b087      	sub	sp, #28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	f023 0201 	bic.w	r2, r3, #1
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	011b      	lsls	r3, r3, #4
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f023 030a 	bic.w	r3, r3, #10
 8003e34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	621a      	str	r2, [r3, #32]
}
 8003e4a:	bf00      	nop
 8003e4c:	371c      	adds	r7, #28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b087      	sub	sp, #28
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	60f8      	str	r0, [r7, #12]
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	f023 0210 	bic.w	r2, r3, #16
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	031b      	lsls	r3, r3, #12
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	621a      	str	r2, [r3, #32]
}
 8003eaa:	bf00      	nop
 8003eac:	371c      	adds	r7, #28
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b085      	sub	sp, #20
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ecc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f043 0307 	orr.w	r3, r3, #7
 8003ed8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	609a      	str	r2, [r3, #8]
}
 8003ee0:	bf00      	nop
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	021a      	lsls	r2, r3, #8
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	609a      	str	r2, [r3, #8]
}
 8003f20:	bf00      	nop
 8003f22:	371c      	adds	r7, #28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f003 031f 	and.w	r3, r3, #31
 8003f3e:	2201      	movs	r2, #1
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a1a      	ldr	r2, [r3, #32]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	401a      	ands	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a1a      	ldr	r2, [r3, #32]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f003 031f 	and.w	r3, r3, #31
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	fa01 f303 	lsl.w	r3, r1, r3
 8003f64:	431a      	orrs	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	621a      	str	r2, [r3, #32]
}
 8003f6a:	bf00      	nop
 8003f6c:	371c      	adds	r7, #28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
	...

08003f78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d101      	bne.n	8003f90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e050      	b.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a1c      	ldr	r2, [pc, #112]	; (8004040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d018      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fdc:	d013      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a18      	ldr	r2, [pc, #96]	; (8004044 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00e      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a16      	ldr	r2, [pc, #88]	; (8004048 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d009      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a15      	ldr	r2, [pc, #84]	; (800404c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d004      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a13      	ldr	r2, [pc, #76]	; (8004050 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d10c      	bne.n	8004020 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800400c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	4313      	orrs	r3, r2
 8004016:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40010000 	.word	0x40010000
 8004044:	40000400 	.word	0x40000400
 8004048:	40000800 	.word	0x40000800
 800404c:	40000c00 	.word	0x40000c00
 8004050:	40014000 	.word	0x40014000

08004054 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004068:	2b01      	cmp	r3, #1
 800406a:	d101      	bne.n	8004070 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800406c:	2302      	movs	r3, #2
 800406e:	e03d      	b.n	80040ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	4313      	orrs	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4313      	orrs	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e03f      	b.n	80041b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fd fa46 	bl	80015d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2224      	movs	r2, #36	; 0x24
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004162:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f9cb 	bl	8004500 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004178:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695a      	ldr	r2, [r3, #20]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004188:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004198:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b08a      	sub	sp, #40	; 0x28
 80041be:	af02      	add	r7, sp, #8
 80041c0:	60f8      	str	r0, [r7, #12]
 80041c2:	60b9      	str	r1, [r7, #8]
 80041c4:	603b      	str	r3, [r7, #0]
 80041c6:	4613      	mov	r3, r2
 80041c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b20      	cmp	r3, #32
 80041d8:	d17c      	bne.n	80042d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <HAL_UART_Transmit+0x2c>
 80041e0:	88fb      	ldrh	r3, [r7, #6]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e075      	b.n	80042d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d101      	bne.n	80041f8 <HAL_UART_Transmit+0x3e>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e06e      	b.n	80042d6 <HAL_UART_Transmit+0x11c>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2221      	movs	r2, #33	; 0x21
 800420a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800420e:	f7fd fc99 	bl	8001b44 <HAL_GetTick>
 8004212:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	88fa      	ldrh	r2, [r7, #6]
 8004218:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	88fa      	ldrh	r2, [r7, #6]
 800421e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004228:	d108      	bne.n	800423c <HAL_UART_Transmit+0x82>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d104      	bne.n	800423c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004232:	2300      	movs	r3, #0
 8004234:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	61bb      	str	r3, [r7, #24]
 800423a:	e003      	b.n	8004244 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004240:	2300      	movs	r3, #0
 8004242:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800424c:	e02a      	b.n	80042a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2200      	movs	r2, #0
 8004256:	2180      	movs	r1, #128	; 0x80
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 f8e2 	bl	8004422 <UART_WaitOnFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e036      	b.n	80042d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10b      	bne.n	8004286 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800427c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	3302      	adds	r3, #2
 8004282:	61bb      	str	r3, [r7, #24]
 8004284:	e007      	b.n	8004296 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	781a      	ldrb	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	3301      	adds	r3, #1
 8004294:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800429a:	b29b      	uxth	r3, r3
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1cf      	bne.n	800424e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2200      	movs	r2, #0
 80042b6:	2140      	movs	r1, #64	; 0x40
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 f8b2 	bl	8004422 <UART_WaitOnFlagUntilTimeout>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e006      	b.n	80042d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	e000      	b.n	80042d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80042d4:	2302      	movs	r3, #2
  }
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3720      	adds	r7, #32
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b08a      	sub	sp, #40	; 0x28
 80042e2:	af02      	add	r7, sp, #8
 80042e4:	60f8      	str	r0, [r7, #12]
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	603b      	str	r3, [r7, #0]
 80042ea:	4613      	mov	r3, r2
 80042ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b20      	cmp	r3, #32
 80042fc:	f040 808c 	bne.w	8004418 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <HAL_UART_Receive+0x2e>
 8004306:	88fb      	ldrh	r3, [r7, #6]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e084      	b.n	800441a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004316:	2b01      	cmp	r3, #1
 8004318:	d101      	bne.n	800431e <HAL_UART_Receive+0x40>
 800431a:	2302      	movs	r3, #2
 800431c:	e07d      	b.n	800441a <HAL_UART_Receive+0x13c>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2222      	movs	r2, #34	; 0x22
 8004330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800433a:	f7fd fc03 	bl	8001b44 <HAL_GetTick>
 800433e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	88fa      	ldrh	r2, [r7, #6]
 8004344:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	88fa      	ldrh	r2, [r7, #6]
 800434a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004354:	d108      	bne.n	8004368 <HAL_UART_Receive+0x8a>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d104      	bne.n	8004368 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800435e:	2300      	movs	r3, #0
 8004360:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	61bb      	str	r3, [r7, #24]
 8004366:	e003      	b.n	8004370 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800436c:	2300      	movs	r3, #0
 800436e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004378:	e043      	b.n	8004402 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	2200      	movs	r2, #0
 8004382:	2120      	movs	r1, #32
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f000 f84c 	bl	8004422 <UART_WaitOnFlagUntilTimeout>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e042      	b.n	800441a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10c      	bne.n	80043b4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	3302      	adds	r3, #2
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	e01f      	b.n	80043f4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043bc:	d007      	beq.n	80043ce <HAL_UART_Receive+0xf0>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10a      	bne.n	80043dc <HAL_UART_Receive+0xfe>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d106      	bne.n	80043dc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	701a      	strb	r2, [r3, #0]
 80043da:	e008      	b.n	80043ee <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	3301      	adds	r3, #1
 80043f2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004406:	b29b      	uxth	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1b6      	bne.n	800437a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2220      	movs	r2, #32
 8004410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004414:	2300      	movs	r3, #0
 8004416:	e000      	b.n	800441a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004418:	2302      	movs	r3, #2
  }
}
 800441a:	4618      	mov	r0, r3
 800441c:	3720      	adds	r7, #32
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b090      	sub	sp, #64	; 0x40
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	603b      	str	r3, [r7, #0]
 800442e:	4613      	mov	r3, r2
 8004430:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004432:	e050      	b.n	80044d6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443a:	d04c      	beq.n	80044d6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800443c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800443e:	2b00      	cmp	r3, #0
 8004440:	d007      	beq.n	8004452 <UART_WaitOnFlagUntilTimeout+0x30>
 8004442:	f7fd fb7f 	bl	8001b44 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800444e:	429a      	cmp	r2, r3
 8004450:	d241      	bcs.n	80044d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	330c      	adds	r3, #12
 8004458:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445c:	e853 3f00 	ldrex	r3, [r3]
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004468:	63fb      	str	r3, [r7, #60]	; 0x3c
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	330c      	adds	r3, #12
 8004470:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004472:	637a      	str	r2, [r7, #52]	; 0x34
 8004474:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004476:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004478:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800447a:	e841 2300 	strex	r3, r2, [r1]
 800447e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1e5      	bne.n	8004452 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3314      	adds	r3, #20
 800448c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	e853 3f00 	ldrex	r3, [r3]
 8004494:	613b      	str	r3, [r7, #16]
   return(result);
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f023 0301 	bic.w	r3, r3, #1
 800449c:	63bb      	str	r3, [r7, #56]	; 0x38
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	3314      	adds	r3, #20
 80044a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044a6:	623a      	str	r2, [r7, #32]
 80044a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044aa:	69f9      	ldr	r1, [r7, #28]
 80044ac:	6a3a      	ldr	r2, [r7, #32]
 80044ae:	e841 2300 	strex	r3, r2, [r1]
 80044b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1e5      	bne.n	8004486 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2220      	movs	r2, #32
 80044be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e00f      	b.n	80044f6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	4013      	ands	r3, r2
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	bf0c      	ite	eq
 80044e6:	2301      	moveq	r3, #1
 80044e8:	2300      	movne	r3, #0
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	461a      	mov	r2, r3
 80044ee:	79fb      	ldrb	r3, [r7, #7]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d09f      	beq.n	8004434 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3740      	adds	r7, #64	; 0x40
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
	...

08004500 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004504:	b0c0      	sub	sp, #256	; 0x100
 8004506:	af00      	add	r7, sp, #0
 8004508:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800450c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800451c:	68d9      	ldr	r1, [r3, #12]
 800451e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	ea40 0301 	orr.w	r3, r0, r1
 8004528:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800452a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	431a      	orrs	r2, r3
 8004538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	431a      	orrs	r2, r3
 8004540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	4313      	orrs	r3, r2
 8004548:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800454c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004558:	f021 010c 	bic.w	r1, r1, #12
 800455c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004566:	430b      	orrs	r3, r1
 8004568:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800456a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457a:	6999      	ldr	r1, [r3, #24]
 800457c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	ea40 0301 	orr.w	r3, r0, r1
 8004586:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	4b8f      	ldr	r3, [pc, #572]	; (80047cc <UART_SetConfig+0x2cc>)
 8004590:	429a      	cmp	r2, r3
 8004592:	d005      	beq.n	80045a0 <UART_SetConfig+0xa0>
 8004594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	4b8d      	ldr	r3, [pc, #564]	; (80047d0 <UART_SetConfig+0x2d0>)
 800459c:	429a      	cmp	r2, r3
 800459e:	d104      	bne.n	80045aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045a0:	f7fe fdf8 	bl	8003194 <HAL_RCC_GetPCLK2Freq>
 80045a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80045a8:	e003      	b.n	80045b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045aa:	f7fe fddf 	bl	800316c <HAL_RCC_GetPCLK1Freq>
 80045ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045bc:	f040 810c 	bne.w	80047d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045c4:	2200      	movs	r2, #0
 80045c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80045ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80045d2:	4622      	mov	r2, r4
 80045d4:	462b      	mov	r3, r5
 80045d6:	1891      	adds	r1, r2, r2
 80045d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80045da:	415b      	adcs	r3, r3
 80045dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045e2:	4621      	mov	r1, r4
 80045e4:	eb12 0801 	adds.w	r8, r2, r1
 80045e8:	4629      	mov	r1, r5
 80045ea:	eb43 0901 	adc.w	r9, r3, r1
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	f04f 0300 	mov.w	r3, #0
 80045f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004602:	4690      	mov	r8, r2
 8004604:	4699      	mov	r9, r3
 8004606:	4623      	mov	r3, r4
 8004608:	eb18 0303 	adds.w	r3, r8, r3
 800460c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004610:	462b      	mov	r3, r5
 8004612:	eb49 0303 	adc.w	r3, r9, r3
 8004616:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800461a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004626:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800462a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800462e:	460b      	mov	r3, r1
 8004630:	18db      	adds	r3, r3, r3
 8004632:	653b      	str	r3, [r7, #80]	; 0x50
 8004634:	4613      	mov	r3, r2
 8004636:	eb42 0303 	adc.w	r3, r2, r3
 800463a:	657b      	str	r3, [r7, #84]	; 0x54
 800463c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004640:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004644:	f7fb fe1c 	bl	8000280 <__aeabi_uldivmod>
 8004648:	4602      	mov	r2, r0
 800464a:	460b      	mov	r3, r1
 800464c:	4b61      	ldr	r3, [pc, #388]	; (80047d4 <UART_SetConfig+0x2d4>)
 800464e:	fba3 2302 	umull	r2, r3, r3, r2
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	011c      	lsls	r4, r3, #4
 8004656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800465a:	2200      	movs	r2, #0
 800465c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004660:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004664:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004668:	4642      	mov	r2, r8
 800466a:	464b      	mov	r3, r9
 800466c:	1891      	adds	r1, r2, r2
 800466e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004670:	415b      	adcs	r3, r3
 8004672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004674:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004678:	4641      	mov	r1, r8
 800467a:	eb12 0a01 	adds.w	sl, r2, r1
 800467e:	4649      	mov	r1, r9
 8004680:	eb43 0b01 	adc.w	fp, r3, r1
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004690:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004694:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004698:	4692      	mov	sl, r2
 800469a:	469b      	mov	fp, r3
 800469c:	4643      	mov	r3, r8
 800469e:	eb1a 0303 	adds.w	r3, sl, r3
 80046a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046a6:	464b      	mov	r3, r9
 80046a8:	eb4b 0303 	adc.w	r3, fp, r3
 80046ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80046b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80046c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80046c4:	460b      	mov	r3, r1
 80046c6:	18db      	adds	r3, r3, r3
 80046c8:	643b      	str	r3, [r7, #64]	; 0x40
 80046ca:	4613      	mov	r3, r2
 80046cc:	eb42 0303 	adc.w	r3, r2, r3
 80046d0:	647b      	str	r3, [r7, #68]	; 0x44
 80046d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80046d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80046da:	f7fb fdd1 	bl	8000280 <__aeabi_uldivmod>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	4611      	mov	r1, r2
 80046e4:	4b3b      	ldr	r3, [pc, #236]	; (80047d4 <UART_SetConfig+0x2d4>)
 80046e6:	fba3 2301 	umull	r2, r3, r3, r1
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	2264      	movs	r2, #100	; 0x64
 80046ee:	fb02 f303 	mul.w	r3, r2, r3
 80046f2:	1acb      	subs	r3, r1, r3
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80046fa:	4b36      	ldr	r3, [pc, #216]	; (80047d4 <UART_SetConfig+0x2d4>)
 80046fc:	fba3 2302 	umull	r2, r3, r3, r2
 8004700:	095b      	lsrs	r3, r3, #5
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004708:	441c      	add	r4, r3
 800470a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800470e:	2200      	movs	r2, #0
 8004710:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004714:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004718:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800471c:	4642      	mov	r2, r8
 800471e:	464b      	mov	r3, r9
 8004720:	1891      	adds	r1, r2, r2
 8004722:	63b9      	str	r1, [r7, #56]	; 0x38
 8004724:	415b      	adcs	r3, r3
 8004726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004728:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800472c:	4641      	mov	r1, r8
 800472e:	1851      	adds	r1, r2, r1
 8004730:	6339      	str	r1, [r7, #48]	; 0x30
 8004732:	4649      	mov	r1, r9
 8004734:	414b      	adcs	r3, r1
 8004736:	637b      	str	r3, [r7, #52]	; 0x34
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004744:	4659      	mov	r1, fp
 8004746:	00cb      	lsls	r3, r1, #3
 8004748:	4651      	mov	r1, sl
 800474a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800474e:	4651      	mov	r1, sl
 8004750:	00ca      	lsls	r2, r1, #3
 8004752:	4610      	mov	r0, r2
 8004754:	4619      	mov	r1, r3
 8004756:	4603      	mov	r3, r0
 8004758:	4642      	mov	r2, r8
 800475a:	189b      	adds	r3, r3, r2
 800475c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004760:	464b      	mov	r3, r9
 8004762:	460a      	mov	r2, r1
 8004764:	eb42 0303 	adc.w	r3, r2, r3
 8004768:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800476c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004778:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800477c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004780:	460b      	mov	r3, r1
 8004782:	18db      	adds	r3, r3, r3
 8004784:	62bb      	str	r3, [r7, #40]	; 0x28
 8004786:	4613      	mov	r3, r2
 8004788:	eb42 0303 	adc.w	r3, r2, r3
 800478c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800478e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004792:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004796:	f7fb fd73 	bl	8000280 <__aeabi_uldivmod>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	4b0d      	ldr	r3, [pc, #52]	; (80047d4 <UART_SetConfig+0x2d4>)
 80047a0:	fba3 1302 	umull	r1, r3, r3, r2
 80047a4:	095b      	lsrs	r3, r3, #5
 80047a6:	2164      	movs	r1, #100	; 0x64
 80047a8:	fb01 f303 	mul.w	r3, r1, r3
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	3332      	adds	r3, #50	; 0x32
 80047b2:	4a08      	ldr	r2, [pc, #32]	; (80047d4 <UART_SetConfig+0x2d4>)
 80047b4:	fba2 2303 	umull	r2, r3, r2, r3
 80047b8:	095b      	lsrs	r3, r3, #5
 80047ba:	f003 0207 	and.w	r2, r3, #7
 80047be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4422      	add	r2, r4
 80047c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047c8:	e105      	b.n	80049d6 <UART_SetConfig+0x4d6>
 80047ca:	bf00      	nop
 80047cc:	40011000 	.word	0x40011000
 80047d0:	40011400 	.word	0x40011400
 80047d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047dc:	2200      	movs	r2, #0
 80047de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80047e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80047ea:	4642      	mov	r2, r8
 80047ec:	464b      	mov	r3, r9
 80047ee:	1891      	adds	r1, r2, r2
 80047f0:	6239      	str	r1, [r7, #32]
 80047f2:	415b      	adcs	r3, r3
 80047f4:	627b      	str	r3, [r7, #36]	; 0x24
 80047f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047fa:	4641      	mov	r1, r8
 80047fc:	1854      	adds	r4, r2, r1
 80047fe:	4649      	mov	r1, r9
 8004800:	eb43 0501 	adc.w	r5, r3, r1
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	00eb      	lsls	r3, r5, #3
 800480e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004812:	00e2      	lsls	r2, r4, #3
 8004814:	4614      	mov	r4, r2
 8004816:	461d      	mov	r5, r3
 8004818:	4643      	mov	r3, r8
 800481a:	18e3      	adds	r3, r4, r3
 800481c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004820:	464b      	mov	r3, r9
 8004822:	eb45 0303 	adc.w	r3, r5, r3
 8004826:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800482a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004836:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800483a:	f04f 0200 	mov.w	r2, #0
 800483e:	f04f 0300 	mov.w	r3, #0
 8004842:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004846:	4629      	mov	r1, r5
 8004848:	008b      	lsls	r3, r1, #2
 800484a:	4621      	mov	r1, r4
 800484c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004850:	4621      	mov	r1, r4
 8004852:	008a      	lsls	r2, r1, #2
 8004854:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004858:	f7fb fd12 	bl	8000280 <__aeabi_uldivmod>
 800485c:	4602      	mov	r2, r0
 800485e:	460b      	mov	r3, r1
 8004860:	4b60      	ldr	r3, [pc, #384]	; (80049e4 <UART_SetConfig+0x4e4>)
 8004862:	fba3 2302 	umull	r2, r3, r3, r2
 8004866:	095b      	lsrs	r3, r3, #5
 8004868:	011c      	lsls	r4, r3, #4
 800486a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800486e:	2200      	movs	r2, #0
 8004870:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004874:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004878:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800487c:	4642      	mov	r2, r8
 800487e:	464b      	mov	r3, r9
 8004880:	1891      	adds	r1, r2, r2
 8004882:	61b9      	str	r1, [r7, #24]
 8004884:	415b      	adcs	r3, r3
 8004886:	61fb      	str	r3, [r7, #28]
 8004888:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800488c:	4641      	mov	r1, r8
 800488e:	1851      	adds	r1, r2, r1
 8004890:	6139      	str	r1, [r7, #16]
 8004892:	4649      	mov	r1, r9
 8004894:	414b      	adcs	r3, r1
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	f04f 0300 	mov.w	r3, #0
 80048a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048a4:	4659      	mov	r1, fp
 80048a6:	00cb      	lsls	r3, r1, #3
 80048a8:	4651      	mov	r1, sl
 80048aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048ae:	4651      	mov	r1, sl
 80048b0:	00ca      	lsls	r2, r1, #3
 80048b2:	4610      	mov	r0, r2
 80048b4:	4619      	mov	r1, r3
 80048b6:	4603      	mov	r3, r0
 80048b8:	4642      	mov	r2, r8
 80048ba:	189b      	adds	r3, r3, r2
 80048bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048c0:	464b      	mov	r3, r9
 80048c2:	460a      	mov	r2, r1
 80048c4:	eb42 0303 	adc.w	r3, r2, r3
 80048c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80048d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80048e4:	4649      	mov	r1, r9
 80048e6:	008b      	lsls	r3, r1, #2
 80048e8:	4641      	mov	r1, r8
 80048ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048ee:	4641      	mov	r1, r8
 80048f0:	008a      	lsls	r2, r1, #2
 80048f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80048f6:	f7fb fcc3 	bl	8000280 <__aeabi_uldivmod>
 80048fa:	4602      	mov	r2, r0
 80048fc:	460b      	mov	r3, r1
 80048fe:	4b39      	ldr	r3, [pc, #228]	; (80049e4 <UART_SetConfig+0x4e4>)
 8004900:	fba3 1302 	umull	r1, r3, r3, r2
 8004904:	095b      	lsrs	r3, r3, #5
 8004906:	2164      	movs	r1, #100	; 0x64
 8004908:	fb01 f303 	mul.w	r3, r1, r3
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	3332      	adds	r3, #50	; 0x32
 8004912:	4a34      	ldr	r2, [pc, #208]	; (80049e4 <UART_SetConfig+0x4e4>)
 8004914:	fba2 2303 	umull	r2, r3, r2, r3
 8004918:	095b      	lsrs	r3, r3, #5
 800491a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800491e:	441c      	add	r4, r3
 8004920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004924:	2200      	movs	r2, #0
 8004926:	673b      	str	r3, [r7, #112]	; 0x70
 8004928:	677a      	str	r2, [r7, #116]	; 0x74
 800492a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800492e:	4642      	mov	r2, r8
 8004930:	464b      	mov	r3, r9
 8004932:	1891      	adds	r1, r2, r2
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	415b      	adcs	r3, r3
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800493e:	4641      	mov	r1, r8
 8004940:	1851      	adds	r1, r2, r1
 8004942:	6039      	str	r1, [r7, #0]
 8004944:	4649      	mov	r1, r9
 8004946:	414b      	adcs	r3, r1
 8004948:	607b      	str	r3, [r7, #4]
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004956:	4659      	mov	r1, fp
 8004958:	00cb      	lsls	r3, r1, #3
 800495a:	4651      	mov	r1, sl
 800495c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004960:	4651      	mov	r1, sl
 8004962:	00ca      	lsls	r2, r1, #3
 8004964:	4610      	mov	r0, r2
 8004966:	4619      	mov	r1, r3
 8004968:	4603      	mov	r3, r0
 800496a:	4642      	mov	r2, r8
 800496c:	189b      	adds	r3, r3, r2
 800496e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004970:	464b      	mov	r3, r9
 8004972:	460a      	mov	r2, r1
 8004974:	eb42 0303 	adc.w	r3, r2, r3
 8004978:	66fb      	str	r3, [r7, #108]	; 0x6c
 800497a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	663b      	str	r3, [r7, #96]	; 0x60
 8004984:	667a      	str	r2, [r7, #100]	; 0x64
 8004986:	f04f 0200 	mov.w	r2, #0
 800498a:	f04f 0300 	mov.w	r3, #0
 800498e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004992:	4649      	mov	r1, r9
 8004994:	008b      	lsls	r3, r1, #2
 8004996:	4641      	mov	r1, r8
 8004998:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800499c:	4641      	mov	r1, r8
 800499e:	008a      	lsls	r2, r1, #2
 80049a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80049a4:	f7fb fc6c 	bl	8000280 <__aeabi_uldivmod>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4b0d      	ldr	r3, [pc, #52]	; (80049e4 <UART_SetConfig+0x4e4>)
 80049ae:	fba3 1302 	umull	r1, r3, r3, r2
 80049b2:	095b      	lsrs	r3, r3, #5
 80049b4:	2164      	movs	r1, #100	; 0x64
 80049b6:	fb01 f303 	mul.w	r3, r1, r3
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	3332      	adds	r3, #50	; 0x32
 80049c0:	4a08      	ldr	r2, [pc, #32]	; (80049e4 <UART_SetConfig+0x4e4>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	f003 020f 	and.w	r2, r3, #15
 80049cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4422      	add	r2, r4
 80049d4:	609a      	str	r2, [r3, #8]
}
 80049d6:	bf00      	nop
 80049d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80049dc:	46bd      	mov	sp, r7
 80049de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049e2:	bf00      	nop
 80049e4:	51eb851f 	.word	0x51eb851f

080049e8 <__errno>:
 80049e8:	4b01      	ldr	r3, [pc, #4]	; (80049f0 <__errno+0x8>)
 80049ea:	6818      	ldr	r0, [r3, #0]
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	2000000c 	.word	0x2000000c

080049f4 <__libc_init_array>:
 80049f4:	b570      	push	{r4, r5, r6, lr}
 80049f6:	4d0d      	ldr	r5, [pc, #52]	; (8004a2c <__libc_init_array+0x38>)
 80049f8:	4c0d      	ldr	r4, [pc, #52]	; (8004a30 <__libc_init_array+0x3c>)
 80049fa:	1b64      	subs	r4, r4, r5
 80049fc:	10a4      	asrs	r4, r4, #2
 80049fe:	2600      	movs	r6, #0
 8004a00:	42a6      	cmp	r6, r4
 8004a02:	d109      	bne.n	8004a18 <__libc_init_array+0x24>
 8004a04:	4d0b      	ldr	r5, [pc, #44]	; (8004a34 <__libc_init_array+0x40>)
 8004a06:	4c0c      	ldr	r4, [pc, #48]	; (8004a38 <__libc_init_array+0x44>)
 8004a08:	f000 fc8e 	bl	8005328 <_init>
 8004a0c:	1b64      	subs	r4, r4, r5
 8004a0e:	10a4      	asrs	r4, r4, #2
 8004a10:	2600      	movs	r6, #0
 8004a12:	42a6      	cmp	r6, r4
 8004a14:	d105      	bne.n	8004a22 <__libc_init_array+0x2e>
 8004a16:	bd70      	pop	{r4, r5, r6, pc}
 8004a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a1c:	4798      	blx	r3
 8004a1e:	3601      	adds	r6, #1
 8004a20:	e7ee      	b.n	8004a00 <__libc_init_array+0xc>
 8004a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a26:	4798      	blx	r3
 8004a28:	3601      	adds	r6, #1
 8004a2a:	e7f2      	b.n	8004a12 <__libc_init_array+0x1e>
 8004a2c:	0800666c 	.word	0x0800666c
 8004a30:	0800666c 	.word	0x0800666c
 8004a34:	0800666c 	.word	0x0800666c
 8004a38:	08006670 	.word	0x08006670

08004a3c <memset>:
 8004a3c:	4402      	add	r2, r0
 8004a3e:	4603      	mov	r3, r0
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d100      	bne.n	8004a46 <memset+0xa>
 8004a44:	4770      	bx	lr
 8004a46:	f803 1b01 	strb.w	r1, [r3], #1
 8004a4a:	e7f9      	b.n	8004a40 <memset+0x4>

08004a4c <siprintf>:
 8004a4c:	b40e      	push	{r1, r2, r3}
 8004a4e:	b500      	push	{lr}
 8004a50:	b09c      	sub	sp, #112	; 0x70
 8004a52:	ab1d      	add	r3, sp, #116	; 0x74
 8004a54:	9002      	str	r0, [sp, #8]
 8004a56:	9006      	str	r0, [sp, #24]
 8004a58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a5c:	4809      	ldr	r0, [pc, #36]	; (8004a84 <siprintf+0x38>)
 8004a5e:	9107      	str	r1, [sp, #28]
 8004a60:	9104      	str	r1, [sp, #16]
 8004a62:	4909      	ldr	r1, [pc, #36]	; (8004a88 <siprintf+0x3c>)
 8004a64:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a68:	9105      	str	r1, [sp, #20]
 8004a6a:	6800      	ldr	r0, [r0, #0]
 8004a6c:	9301      	str	r3, [sp, #4]
 8004a6e:	a902      	add	r1, sp, #8
 8004a70:	f000 f868 	bl	8004b44 <_svfiprintf_r>
 8004a74:	9b02      	ldr	r3, [sp, #8]
 8004a76:	2200      	movs	r2, #0
 8004a78:	701a      	strb	r2, [r3, #0]
 8004a7a:	b01c      	add	sp, #112	; 0x70
 8004a7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a80:	b003      	add	sp, #12
 8004a82:	4770      	bx	lr
 8004a84:	2000000c 	.word	0x2000000c
 8004a88:	ffff0208 	.word	0xffff0208

08004a8c <__ssputs_r>:
 8004a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a90:	688e      	ldr	r6, [r1, #8]
 8004a92:	429e      	cmp	r6, r3
 8004a94:	4682      	mov	sl, r0
 8004a96:	460c      	mov	r4, r1
 8004a98:	4690      	mov	r8, r2
 8004a9a:	461f      	mov	r7, r3
 8004a9c:	d838      	bhi.n	8004b10 <__ssputs_r+0x84>
 8004a9e:	898a      	ldrh	r2, [r1, #12]
 8004aa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004aa4:	d032      	beq.n	8004b0c <__ssputs_r+0x80>
 8004aa6:	6825      	ldr	r5, [r4, #0]
 8004aa8:	6909      	ldr	r1, [r1, #16]
 8004aaa:	eba5 0901 	sub.w	r9, r5, r1
 8004aae:	6965      	ldr	r5, [r4, #20]
 8004ab0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ab4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ab8:	3301      	adds	r3, #1
 8004aba:	444b      	add	r3, r9
 8004abc:	106d      	asrs	r5, r5, #1
 8004abe:	429d      	cmp	r5, r3
 8004ac0:	bf38      	it	cc
 8004ac2:	461d      	movcc	r5, r3
 8004ac4:	0553      	lsls	r3, r2, #21
 8004ac6:	d531      	bpl.n	8004b2c <__ssputs_r+0xa0>
 8004ac8:	4629      	mov	r1, r5
 8004aca:	f000 fb63 	bl	8005194 <_malloc_r>
 8004ace:	4606      	mov	r6, r0
 8004ad0:	b950      	cbnz	r0, 8004ae8 <__ssputs_r+0x5c>
 8004ad2:	230c      	movs	r3, #12
 8004ad4:	f8ca 3000 	str.w	r3, [sl]
 8004ad8:	89a3      	ldrh	r3, [r4, #12]
 8004ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ade:	81a3      	strh	r3, [r4, #12]
 8004ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ae8:	6921      	ldr	r1, [r4, #16]
 8004aea:	464a      	mov	r2, r9
 8004aec:	f000 fabe 	bl	800506c <memcpy>
 8004af0:	89a3      	ldrh	r3, [r4, #12]
 8004af2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004afa:	81a3      	strh	r3, [r4, #12]
 8004afc:	6126      	str	r6, [r4, #16]
 8004afe:	6165      	str	r5, [r4, #20]
 8004b00:	444e      	add	r6, r9
 8004b02:	eba5 0509 	sub.w	r5, r5, r9
 8004b06:	6026      	str	r6, [r4, #0]
 8004b08:	60a5      	str	r5, [r4, #8]
 8004b0a:	463e      	mov	r6, r7
 8004b0c:	42be      	cmp	r6, r7
 8004b0e:	d900      	bls.n	8004b12 <__ssputs_r+0x86>
 8004b10:	463e      	mov	r6, r7
 8004b12:	6820      	ldr	r0, [r4, #0]
 8004b14:	4632      	mov	r2, r6
 8004b16:	4641      	mov	r1, r8
 8004b18:	f000 fab6 	bl	8005088 <memmove>
 8004b1c:	68a3      	ldr	r3, [r4, #8]
 8004b1e:	1b9b      	subs	r3, r3, r6
 8004b20:	60a3      	str	r3, [r4, #8]
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	4433      	add	r3, r6
 8004b26:	6023      	str	r3, [r4, #0]
 8004b28:	2000      	movs	r0, #0
 8004b2a:	e7db      	b.n	8004ae4 <__ssputs_r+0x58>
 8004b2c:	462a      	mov	r2, r5
 8004b2e:	f000 fba5 	bl	800527c <_realloc_r>
 8004b32:	4606      	mov	r6, r0
 8004b34:	2800      	cmp	r0, #0
 8004b36:	d1e1      	bne.n	8004afc <__ssputs_r+0x70>
 8004b38:	6921      	ldr	r1, [r4, #16]
 8004b3a:	4650      	mov	r0, sl
 8004b3c:	f000 fabe 	bl	80050bc <_free_r>
 8004b40:	e7c7      	b.n	8004ad2 <__ssputs_r+0x46>
	...

08004b44 <_svfiprintf_r>:
 8004b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b48:	4698      	mov	r8, r3
 8004b4a:	898b      	ldrh	r3, [r1, #12]
 8004b4c:	061b      	lsls	r3, r3, #24
 8004b4e:	b09d      	sub	sp, #116	; 0x74
 8004b50:	4607      	mov	r7, r0
 8004b52:	460d      	mov	r5, r1
 8004b54:	4614      	mov	r4, r2
 8004b56:	d50e      	bpl.n	8004b76 <_svfiprintf_r+0x32>
 8004b58:	690b      	ldr	r3, [r1, #16]
 8004b5a:	b963      	cbnz	r3, 8004b76 <_svfiprintf_r+0x32>
 8004b5c:	2140      	movs	r1, #64	; 0x40
 8004b5e:	f000 fb19 	bl	8005194 <_malloc_r>
 8004b62:	6028      	str	r0, [r5, #0]
 8004b64:	6128      	str	r0, [r5, #16]
 8004b66:	b920      	cbnz	r0, 8004b72 <_svfiprintf_r+0x2e>
 8004b68:	230c      	movs	r3, #12
 8004b6a:	603b      	str	r3, [r7, #0]
 8004b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b70:	e0d1      	b.n	8004d16 <_svfiprintf_r+0x1d2>
 8004b72:	2340      	movs	r3, #64	; 0x40
 8004b74:	616b      	str	r3, [r5, #20]
 8004b76:	2300      	movs	r3, #0
 8004b78:	9309      	str	r3, [sp, #36]	; 0x24
 8004b7a:	2320      	movs	r3, #32
 8004b7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b80:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b84:	2330      	movs	r3, #48	; 0x30
 8004b86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004d30 <_svfiprintf_r+0x1ec>
 8004b8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b8e:	f04f 0901 	mov.w	r9, #1
 8004b92:	4623      	mov	r3, r4
 8004b94:	469a      	mov	sl, r3
 8004b96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b9a:	b10a      	cbz	r2, 8004ba0 <_svfiprintf_r+0x5c>
 8004b9c:	2a25      	cmp	r2, #37	; 0x25
 8004b9e:	d1f9      	bne.n	8004b94 <_svfiprintf_r+0x50>
 8004ba0:	ebba 0b04 	subs.w	fp, sl, r4
 8004ba4:	d00b      	beq.n	8004bbe <_svfiprintf_r+0x7a>
 8004ba6:	465b      	mov	r3, fp
 8004ba8:	4622      	mov	r2, r4
 8004baa:	4629      	mov	r1, r5
 8004bac:	4638      	mov	r0, r7
 8004bae:	f7ff ff6d 	bl	8004a8c <__ssputs_r>
 8004bb2:	3001      	adds	r0, #1
 8004bb4:	f000 80aa 	beq.w	8004d0c <_svfiprintf_r+0x1c8>
 8004bb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bba:	445a      	add	r2, fp
 8004bbc:	9209      	str	r2, [sp, #36]	; 0x24
 8004bbe:	f89a 3000 	ldrb.w	r3, [sl]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 80a2 	beq.w	8004d0c <_svfiprintf_r+0x1c8>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f04f 32ff 	mov.w	r2, #4294967295
 8004bce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bd2:	f10a 0a01 	add.w	sl, sl, #1
 8004bd6:	9304      	str	r3, [sp, #16]
 8004bd8:	9307      	str	r3, [sp, #28]
 8004bda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bde:	931a      	str	r3, [sp, #104]	; 0x68
 8004be0:	4654      	mov	r4, sl
 8004be2:	2205      	movs	r2, #5
 8004be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004be8:	4851      	ldr	r0, [pc, #324]	; (8004d30 <_svfiprintf_r+0x1ec>)
 8004bea:	f7fb faf9 	bl	80001e0 <memchr>
 8004bee:	9a04      	ldr	r2, [sp, #16]
 8004bf0:	b9d8      	cbnz	r0, 8004c2a <_svfiprintf_r+0xe6>
 8004bf2:	06d0      	lsls	r0, r2, #27
 8004bf4:	bf44      	itt	mi
 8004bf6:	2320      	movmi	r3, #32
 8004bf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bfc:	0711      	lsls	r1, r2, #28
 8004bfe:	bf44      	itt	mi
 8004c00:	232b      	movmi	r3, #43	; 0x2b
 8004c02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c06:	f89a 3000 	ldrb.w	r3, [sl]
 8004c0a:	2b2a      	cmp	r3, #42	; 0x2a
 8004c0c:	d015      	beq.n	8004c3a <_svfiprintf_r+0xf6>
 8004c0e:	9a07      	ldr	r2, [sp, #28]
 8004c10:	4654      	mov	r4, sl
 8004c12:	2000      	movs	r0, #0
 8004c14:	f04f 0c0a 	mov.w	ip, #10
 8004c18:	4621      	mov	r1, r4
 8004c1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c1e:	3b30      	subs	r3, #48	; 0x30
 8004c20:	2b09      	cmp	r3, #9
 8004c22:	d94e      	bls.n	8004cc2 <_svfiprintf_r+0x17e>
 8004c24:	b1b0      	cbz	r0, 8004c54 <_svfiprintf_r+0x110>
 8004c26:	9207      	str	r2, [sp, #28]
 8004c28:	e014      	b.n	8004c54 <_svfiprintf_r+0x110>
 8004c2a:	eba0 0308 	sub.w	r3, r0, r8
 8004c2e:	fa09 f303 	lsl.w	r3, r9, r3
 8004c32:	4313      	orrs	r3, r2
 8004c34:	9304      	str	r3, [sp, #16]
 8004c36:	46a2      	mov	sl, r4
 8004c38:	e7d2      	b.n	8004be0 <_svfiprintf_r+0x9c>
 8004c3a:	9b03      	ldr	r3, [sp, #12]
 8004c3c:	1d19      	adds	r1, r3, #4
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	9103      	str	r1, [sp, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	bfbb      	ittet	lt
 8004c46:	425b      	neglt	r3, r3
 8004c48:	f042 0202 	orrlt.w	r2, r2, #2
 8004c4c:	9307      	strge	r3, [sp, #28]
 8004c4e:	9307      	strlt	r3, [sp, #28]
 8004c50:	bfb8      	it	lt
 8004c52:	9204      	strlt	r2, [sp, #16]
 8004c54:	7823      	ldrb	r3, [r4, #0]
 8004c56:	2b2e      	cmp	r3, #46	; 0x2e
 8004c58:	d10c      	bne.n	8004c74 <_svfiprintf_r+0x130>
 8004c5a:	7863      	ldrb	r3, [r4, #1]
 8004c5c:	2b2a      	cmp	r3, #42	; 0x2a
 8004c5e:	d135      	bne.n	8004ccc <_svfiprintf_r+0x188>
 8004c60:	9b03      	ldr	r3, [sp, #12]
 8004c62:	1d1a      	adds	r2, r3, #4
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	9203      	str	r2, [sp, #12]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	bfb8      	it	lt
 8004c6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c70:	3402      	adds	r4, #2
 8004c72:	9305      	str	r3, [sp, #20]
 8004c74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d40 <_svfiprintf_r+0x1fc>
 8004c78:	7821      	ldrb	r1, [r4, #0]
 8004c7a:	2203      	movs	r2, #3
 8004c7c:	4650      	mov	r0, sl
 8004c7e:	f7fb faaf 	bl	80001e0 <memchr>
 8004c82:	b140      	cbz	r0, 8004c96 <_svfiprintf_r+0x152>
 8004c84:	2340      	movs	r3, #64	; 0x40
 8004c86:	eba0 000a 	sub.w	r0, r0, sl
 8004c8a:	fa03 f000 	lsl.w	r0, r3, r0
 8004c8e:	9b04      	ldr	r3, [sp, #16]
 8004c90:	4303      	orrs	r3, r0
 8004c92:	3401      	adds	r4, #1
 8004c94:	9304      	str	r3, [sp, #16]
 8004c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c9a:	4826      	ldr	r0, [pc, #152]	; (8004d34 <_svfiprintf_r+0x1f0>)
 8004c9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ca0:	2206      	movs	r2, #6
 8004ca2:	f7fb fa9d 	bl	80001e0 <memchr>
 8004ca6:	2800      	cmp	r0, #0
 8004ca8:	d038      	beq.n	8004d1c <_svfiprintf_r+0x1d8>
 8004caa:	4b23      	ldr	r3, [pc, #140]	; (8004d38 <_svfiprintf_r+0x1f4>)
 8004cac:	bb1b      	cbnz	r3, 8004cf6 <_svfiprintf_r+0x1b2>
 8004cae:	9b03      	ldr	r3, [sp, #12]
 8004cb0:	3307      	adds	r3, #7
 8004cb2:	f023 0307 	bic.w	r3, r3, #7
 8004cb6:	3308      	adds	r3, #8
 8004cb8:	9303      	str	r3, [sp, #12]
 8004cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cbc:	4433      	add	r3, r6
 8004cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8004cc0:	e767      	b.n	8004b92 <_svfiprintf_r+0x4e>
 8004cc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	2001      	movs	r0, #1
 8004cca:	e7a5      	b.n	8004c18 <_svfiprintf_r+0xd4>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	3401      	adds	r4, #1
 8004cd0:	9305      	str	r3, [sp, #20]
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	f04f 0c0a 	mov.w	ip, #10
 8004cd8:	4620      	mov	r0, r4
 8004cda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cde:	3a30      	subs	r2, #48	; 0x30
 8004ce0:	2a09      	cmp	r2, #9
 8004ce2:	d903      	bls.n	8004cec <_svfiprintf_r+0x1a8>
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0c5      	beq.n	8004c74 <_svfiprintf_r+0x130>
 8004ce8:	9105      	str	r1, [sp, #20]
 8004cea:	e7c3      	b.n	8004c74 <_svfiprintf_r+0x130>
 8004cec:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cf0:	4604      	mov	r4, r0
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e7f0      	b.n	8004cd8 <_svfiprintf_r+0x194>
 8004cf6:	ab03      	add	r3, sp, #12
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	462a      	mov	r2, r5
 8004cfc:	4b0f      	ldr	r3, [pc, #60]	; (8004d3c <_svfiprintf_r+0x1f8>)
 8004cfe:	a904      	add	r1, sp, #16
 8004d00:	4638      	mov	r0, r7
 8004d02:	f3af 8000 	nop.w
 8004d06:	1c42      	adds	r2, r0, #1
 8004d08:	4606      	mov	r6, r0
 8004d0a:	d1d6      	bne.n	8004cba <_svfiprintf_r+0x176>
 8004d0c:	89ab      	ldrh	r3, [r5, #12]
 8004d0e:	065b      	lsls	r3, r3, #25
 8004d10:	f53f af2c 	bmi.w	8004b6c <_svfiprintf_r+0x28>
 8004d14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d16:	b01d      	add	sp, #116	; 0x74
 8004d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d1c:	ab03      	add	r3, sp, #12
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	462a      	mov	r2, r5
 8004d22:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <_svfiprintf_r+0x1f8>)
 8004d24:	a904      	add	r1, sp, #16
 8004d26:	4638      	mov	r0, r7
 8004d28:	f000 f87a 	bl	8004e20 <_printf_i>
 8004d2c:	e7eb      	b.n	8004d06 <_svfiprintf_r+0x1c2>
 8004d2e:	bf00      	nop
 8004d30:	08006630 	.word	0x08006630
 8004d34:	0800663a 	.word	0x0800663a
 8004d38:	00000000 	.word	0x00000000
 8004d3c:	08004a8d 	.word	0x08004a8d
 8004d40:	08006636 	.word	0x08006636

08004d44 <_printf_common>:
 8004d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d48:	4616      	mov	r6, r2
 8004d4a:	4699      	mov	r9, r3
 8004d4c:	688a      	ldr	r2, [r1, #8]
 8004d4e:	690b      	ldr	r3, [r1, #16]
 8004d50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d54:	4293      	cmp	r3, r2
 8004d56:	bfb8      	it	lt
 8004d58:	4613      	movlt	r3, r2
 8004d5a:	6033      	str	r3, [r6, #0]
 8004d5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d60:	4607      	mov	r7, r0
 8004d62:	460c      	mov	r4, r1
 8004d64:	b10a      	cbz	r2, 8004d6a <_printf_common+0x26>
 8004d66:	3301      	adds	r3, #1
 8004d68:	6033      	str	r3, [r6, #0]
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	0699      	lsls	r1, r3, #26
 8004d6e:	bf42      	ittt	mi
 8004d70:	6833      	ldrmi	r3, [r6, #0]
 8004d72:	3302      	addmi	r3, #2
 8004d74:	6033      	strmi	r3, [r6, #0]
 8004d76:	6825      	ldr	r5, [r4, #0]
 8004d78:	f015 0506 	ands.w	r5, r5, #6
 8004d7c:	d106      	bne.n	8004d8c <_printf_common+0x48>
 8004d7e:	f104 0a19 	add.w	sl, r4, #25
 8004d82:	68e3      	ldr	r3, [r4, #12]
 8004d84:	6832      	ldr	r2, [r6, #0]
 8004d86:	1a9b      	subs	r3, r3, r2
 8004d88:	42ab      	cmp	r3, r5
 8004d8a:	dc26      	bgt.n	8004dda <_printf_common+0x96>
 8004d8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d90:	1e13      	subs	r3, r2, #0
 8004d92:	6822      	ldr	r2, [r4, #0]
 8004d94:	bf18      	it	ne
 8004d96:	2301      	movne	r3, #1
 8004d98:	0692      	lsls	r2, r2, #26
 8004d9a:	d42b      	bmi.n	8004df4 <_printf_common+0xb0>
 8004d9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004da0:	4649      	mov	r1, r9
 8004da2:	4638      	mov	r0, r7
 8004da4:	47c0      	blx	r8
 8004da6:	3001      	adds	r0, #1
 8004da8:	d01e      	beq.n	8004de8 <_printf_common+0xa4>
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	68e5      	ldr	r5, [r4, #12]
 8004dae:	6832      	ldr	r2, [r6, #0]
 8004db0:	f003 0306 	and.w	r3, r3, #6
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	bf08      	it	eq
 8004db8:	1aad      	subeq	r5, r5, r2
 8004dba:	68a3      	ldr	r3, [r4, #8]
 8004dbc:	6922      	ldr	r2, [r4, #16]
 8004dbe:	bf0c      	ite	eq
 8004dc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dc4:	2500      	movne	r5, #0
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	bfc4      	itt	gt
 8004dca:	1a9b      	subgt	r3, r3, r2
 8004dcc:	18ed      	addgt	r5, r5, r3
 8004dce:	2600      	movs	r6, #0
 8004dd0:	341a      	adds	r4, #26
 8004dd2:	42b5      	cmp	r5, r6
 8004dd4:	d11a      	bne.n	8004e0c <_printf_common+0xc8>
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	e008      	b.n	8004dec <_printf_common+0xa8>
 8004dda:	2301      	movs	r3, #1
 8004ddc:	4652      	mov	r2, sl
 8004dde:	4649      	mov	r1, r9
 8004de0:	4638      	mov	r0, r7
 8004de2:	47c0      	blx	r8
 8004de4:	3001      	adds	r0, #1
 8004de6:	d103      	bne.n	8004df0 <_printf_common+0xac>
 8004de8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004df0:	3501      	adds	r5, #1
 8004df2:	e7c6      	b.n	8004d82 <_printf_common+0x3e>
 8004df4:	18e1      	adds	r1, r4, r3
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	2030      	movs	r0, #48	; 0x30
 8004dfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dfe:	4422      	add	r2, r4
 8004e00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e08:	3302      	adds	r3, #2
 8004e0a:	e7c7      	b.n	8004d9c <_printf_common+0x58>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	4622      	mov	r2, r4
 8004e10:	4649      	mov	r1, r9
 8004e12:	4638      	mov	r0, r7
 8004e14:	47c0      	blx	r8
 8004e16:	3001      	adds	r0, #1
 8004e18:	d0e6      	beq.n	8004de8 <_printf_common+0xa4>
 8004e1a:	3601      	adds	r6, #1
 8004e1c:	e7d9      	b.n	8004dd2 <_printf_common+0x8e>
	...

08004e20 <_printf_i>:
 8004e20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e24:	7e0f      	ldrb	r7, [r1, #24]
 8004e26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e28:	2f78      	cmp	r7, #120	; 0x78
 8004e2a:	4691      	mov	r9, r2
 8004e2c:	4680      	mov	r8, r0
 8004e2e:	460c      	mov	r4, r1
 8004e30:	469a      	mov	sl, r3
 8004e32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e36:	d807      	bhi.n	8004e48 <_printf_i+0x28>
 8004e38:	2f62      	cmp	r7, #98	; 0x62
 8004e3a:	d80a      	bhi.n	8004e52 <_printf_i+0x32>
 8004e3c:	2f00      	cmp	r7, #0
 8004e3e:	f000 80d8 	beq.w	8004ff2 <_printf_i+0x1d2>
 8004e42:	2f58      	cmp	r7, #88	; 0x58
 8004e44:	f000 80a3 	beq.w	8004f8e <_printf_i+0x16e>
 8004e48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e50:	e03a      	b.n	8004ec8 <_printf_i+0xa8>
 8004e52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e56:	2b15      	cmp	r3, #21
 8004e58:	d8f6      	bhi.n	8004e48 <_printf_i+0x28>
 8004e5a:	a101      	add	r1, pc, #4	; (adr r1, 8004e60 <_printf_i+0x40>)
 8004e5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e60:	08004eb9 	.word	0x08004eb9
 8004e64:	08004ecd 	.word	0x08004ecd
 8004e68:	08004e49 	.word	0x08004e49
 8004e6c:	08004e49 	.word	0x08004e49
 8004e70:	08004e49 	.word	0x08004e49
 8004e74:	08004e49 	.word	0x08004e49
 8004e78:	08004ecd 	.word	0x08004ecd
 8004e7c:	08004e49 	.word	0x08004e49
 8004e80:	08004e49 	.word	0x08004e49
 8004e84:	08004e49 	.word	0x08004e49
 8004e88:	08004e49 	.word	0x08004e49
 8004e8c:	08004fd9 	.word	0x08004fd9
 8004e90:	08004efd 	.word	0x08004efd
 8004e94:	08004fbb 	.word	0x08004fbb
 8004e98:	08004e49 	.word	0x08004e49
 8004e9c:	08004e49 	.word	0x08004e49
 8004ea0:	08004ffb 	.word	0x08004ffb
 8004ea4:	08004e49 	.word	0x08004e49
 8004ea8:	08004efd 	.word	0x08004efd
 8004eac:	08004e49 	.word	0x08004e49
 8004eb0:	08004e49 	.word	0x08004e49
 8004eb4:	08004fc3 	.word	0x08004fc3
 8004eb8:	682b      	ldr	r3, [r5, #0]
 8004eba:	1d1a      	adds	r2, r3, #4
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	602a      	str	r2, [r5, #0]
 8004ec0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ec4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e0a3      	b.n	8005014 <_printf_i+0x1f4>
 8004ecc:	6820      	ldr	r0, [r4, #0]
 8004ece:	6829      	ldr	r1, [r5, #0]
 8004ed0:	0606      	lsls	r6, r0, #24
 8004ed2:	f101 0304 	add.w	r3, r1, #4
 8004ed6:	d50a      	bpl.n	8004eee <_printf_i+0xce>
 8004ed8:	680e      	ldr	r6, [r1, #0]
 8004eda:	602b      	str	r3, [r5, #0]
 8004edc:	2e00      	cmp	r6, #0
 8004ede:	da03      	bge.n	8004ee8 <_printf_i+0xc8>
 8004ee0:	232d      	movs	r3, #45	; 0x2d
 8004ee2:	4276      	negs	r6, r6
 8004ee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ee8:	485e      	ldr	r0, [pc, #376]	; (8005064 <_printf_i+0x244>)
 8004eea:	230a      	movs	r3, #10
 8004eec:	e019      	b.n	8004f22 <_printf_i+0x102>
 8004eee:	680e      	ldr	r6, [r1, #0]
 8004ef0:	602b      	str	r3, [r5, #0]
 8004ef2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ef6:	bf18      	it	ne
 8004ef8:	b236      	sxthne	r6, r6
 8004efa:	e7ef      	b.n	8004edc <_printf_i+0xbc>
 8004efc:	682b      	ldr	r3, [r5, #0]
 8004efe:	6820      	ldr	r0, [r4, #0]
 8004f00:	1d19      	adds	r1, r3, #4
 8004f02:	6029      	str	r1, [r5, #0]
 8004f04:	0601      	lsls	r1, r0, #24
 8004f06:	d501      	bpl.n	8004f0c <_printf_i+0xec>
 8004f08:	681e      	ldr	r6, [r3, #0]
 8004f0a:	e002      	b.n	8004f12 <_printf_i+0xf2>
 8004f0c:	0646      	lsls	r6, r0, #25
 8004f0e:	d5fb      	bpl.n	8004f08 <_printf_i+0xe8>
 8004f10:	881e      	ldrh	r6, [r3, #0]
 8004f12:	4854      	ldr	r0, [pc, #336]	; (8005064 <_printf_i+0x244>)
 8004f14:	2f6f      	cmp	r7, #111	; 0x6f
 8004f16:	bf0c      	ite	eq
 8004f18:	2308      	moveq	r3, #8
 8004f1a:	230a      	movne	r3, #10
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f22:	6865      	ldr	r5, [r4, #4]
 8004f24:	60a5      	str	r5, [r4, #8]
 8004f26:	2d00      	cmp	r5, #0
 8004f28:	bfa2      	ittt	ge
 8004f2a:	6821      	ldrge	r1, [r4, #0]
 8004f2c:	f021 0104 	bicge.w	r1, r1, #4
 8004f30:	6021      	strge	r1, [r4, #0]
 8004f32:	b90e      	cbnz	r6, 8004f38 <_printf_i+0x118>
 8004f34:	2d00      	cmp	r5, #0
 8004f36:	d04d      	beq.n	8004fd4 <_printf_i+0x1b4>
 8004f38:	4615      	mov	r5, r2
 8004f3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f3e:	fb03 6711 	mls	r7, r3, r1, r6
 8004f42:	5dc7      	ldrb	r7, [r0, r7]
 8004f44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f48:	4637      	mov	r7, r6
 8004f4a:	42bb      	cmp	r3, r7
 8004f4c:	460e      	mov	r6, r1
 8004f4e:	d9f4      	bls.n	8004f3a <_printf_i+0x11a>
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d10b      	bne.n	8004f6c <_printf_i+0x14c>
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	07de      	lsls	r6, r3, #31
 8004f58:	d508      	bpl.n	8004f6c <_printf_i+0x14c>
 8004f5a:	6923      	ldr	r3, [r4, #16]
 8004f5c:	6861      	ldr	r1, [r4, #4]
 8004f5e:	4299      	cmp	r1, r3
 8004f60:	bfde      	ittt	le
 8004f62:	2330      	movle	r3, #48	; 0x30
 8004f64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f6c:	1b52      	subs	r2, r2, r5
 8004f6e:	6122      	str	r2, [r4, #16]
 8004f70:	f8cd a000 	str.w	sl, [sp]
 8004f74:	464b      	mov	r3, r9
 8004f76:	aa03      	add	r2, sp, #12
 8004f78:	4621      	mov	r1, r4
 8004f7a:	4640      	mov	r0, r8
 8004f7c:	f7ff fee2 	bl	8004d44 <_printf_common>
 8004f80:	3001      	adds	r0, #1
 8004f82:	d14c      	bne.n	800501e <_printf_i+0x1fe>
 8004f84:	f04f 30ff 	mov.w	r0, #4294967295
 8004f88:	b004      	add	sp, #16
 8004f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f8e:	4835      	ldr	r0, [pc, #212]	; (8005064 <_printf_i+0x244>)
 8004f90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f94:	6829      	ldr	r1, [r5, #0]
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f9c:	6029      	str	r1, [r5, #0]
 8004f9e:	061d      	lsls	r5, r3, #24
 8004fa0:	d514      	bpl.n	8004fcc <_printf_i+0x1ac>
 8004fa2:	07df      	lsls	r7, r3, #31
 8004fa4:	bf44      	itt	mi
 8004fa6:	f043 0320 	orrmi.w	r3, r3, #32
 8004faa:	6023      	strmi	r3, [r4, #0]
 8004fac:	b91e      	cbnz	r6, 8004fb6 <_printf_i+0x196>
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	f023 0320 	bic.w	r3, r3, #32
 8004fb4:	6023      	str	r3, [r4, #0]
 8004fb6:	2310      	movs	r3, #16
 8004fb8:	e7b0      	b.n	8004f1c <_printf_i+0xfc>
 8004fba:	6823      	ldr	r3, [r4, #0]
 8004fbc:	f043 0320 	orr.w	r3, r3, #32
 8004fc0:	6023      	str	r3, [r4, #0]
 8004fc2:	2378      	movs	r3, #120	; 0x78
 8004fc4:	4828      	ldr	r0, [pc, #160]	; (8005068 <_printf_i+0x248>)
 8004fc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fca:	e7e3      	b.n	8004f94 <_printf_i+0x174>
 8004fcc:	0659      	lsls	r1, r3, #25
 8004fce:	bf48      	it	mi
 8004fd0:	b2b6      	uxthmi	r6, r6
 8004fd2:	e7e6      	b.n	8004fa2 <_printf_i+0x182>
 8004fd4:	4615      	mov	r5, r2
 8004fd6:	e7bb      	b.n	8004f50 <_printf_i+0x130>
 8004fd8:	682b      	ldr	r3, [r5, #0]
 8004fda:	6826      	ldr	r6, [r4, #0]
 8004fdc:	6961      	ldr	r1, [r4, #20]
 8004fde:	1d18      	adds	r0, r3, #4
 8004fe0:	6028      	str	r0, [r5, #0]
 8004fe2:	0635      	lsls	r5, r6, #24
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	d501      	bpl.n	8004fec <_printf_i+0x1cc>
 8004fe8:	6019      	str	r1, [r3, #0]
 8004fea:	e002      	b.n	8004ff2 <_printf_i+0x1d2>
 8004fec:	0670      	lsls	r0, r6, #25
 8004fee:	d5fb      	bpl.n	8004fe8 <_printf_i+0x1c8>
 8004ff0:	8019      	strh	r1, [r3, #0]
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	6123      	str	r3, [r4, #16]
 8004ff6:	4615      	mov	r5, r2
 8004ff8:	e7ba      	b.n	8004f70 <_printf_i+0x150>
 8004ffa:	682b      	ldr	r3, [r5, #0]
 8004ffc:	1d1a      	adds	r2, r3, #4
 8004ffe:	602a      	str	r2, [r5, #0]
 8005000:	681d      	ldr	r5, [r3, #0]
 8005002:	6862      	ldr	r2, [r4, #4]
 8005004:	2100      	movs	r1, #0
 8005006:	4628      	mov	r0, r5
 8005008:	f7fb f8ea 	bl	80001e0 <memchr>
 800500c:	b108      	cbz	r0, 8005012 <_printf_i+0x1f2>
 800500e:	1b40      	subs	r0, r0, r5
 8005010:	6060      	str	r0, [r4, #4]
 8005012:	6863      	ldr	r3, [r4, #4]
 8005014:	6123      	str	r3, [r4, #16]
 8005016:	2300      	movs	r3, #0
 8005018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800501c:	e7a8      	b.n	8004f70 <_printf_i+0x150>
 800501e:	6923      	ldr	r3, [r4, #16]
 8005020:	462a      	mov	r2, r5
 8005022:	4649      	mov	r1, r9
 8005024:	4640      	mov	r0, r8
 8005026:	47d0      	blx	sl
 8005028:	3001      	adds	r0, #1
 800502a:	d0ab      	beq.n	8004f84 <_printf_i+0x164>
 800502c:	6823      	ldr	r3, [r4, #0]
 800502e:	079b      	lsls	r3, r3, #30
 8005030:	d413      	bmi.n	800505a <_printf_i+0x23a>
 8005032:	68e0      	ldr	r0, [r4, #12]
 8005034:	9b03      	ldr	r3, [sp, #12]
 8005036:	4298      	cmp	r0, r3
 8005038:	bfb8      	it	lt
 800503a:	4618      	movlt	r0, r3
 800503c:	e7a4      	b.n	8004f88 <_printf_i+0x168>
 800503e:	2301      	movs	r3, #1
 8005040:	4632      	mov	r2, r6
 8005042:	4649      	mov	r1, r9
 8005044:	4640      	mov	r0, r8
 8005046:	47d0      	blx	sl
 8005048:	3001      	adds	r0, #1
 800504a:	d09b      	beq.n	8004f84 <_printf_i+0x164>
 800504c:	3501      	adds	r5, #1
 800504e:	68e3      	ldr	r3, [r4, #12]
 8005050:	9903      	ldr	r1, [sp, #12]
 8005052:	1a5b      	subs	r3, r3, r1
 8005054:	42ab      	cmp	r3, r5
 8005056:	dcf2      	bgt.n	800503e <_printf_i+0x21e>
 8005058:	e7eb      	b.n	8005032 <_printf_i+0x212>
 800505a:	2500      	movs	r5, #0
 800505c:	f104 0619 	add.w	r6, r4, #25
 8005060:	e7f5      	b.n	800504e <_printf_i+0x22e>
 8005062:	bf00      	nop
 8005064:	08006641 	.word	0x08006641
 8005068:	08006652 	.word	0x08006652

0800506c <memcpy>:
 800506c:	440a      	add	r2, r1
 800506e:	4291      	cmp	r1, r2
 8005070:	f100 33ff 	add.w	r3, r0, #4294967295
 8005074:	d100      	bne.n	8005078 <memcpy+0xc>
 8005076:	4770      	bx	lr
 8005078:	b510      	push	{r4, lr}
 800507a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800507e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005082:	4291      	cmp	r1, r2
 8005084:	d1f9      	bne.n	800507a <memcpy+0xe>
 8005086:	bd10      	pop	{r4, pc}

08005088 <memmove>:
 8005088:	4288      	cmp	r0, r1
 800508a:	b510      	push	{r4, lr}
 800508c:	eb01 0402 	add.w	r4, r1, r2
 8005090:	d902      	bls.n	8005098 <memmove+0x10>
 8005092:	4284      	cmp	r4, r0
 8005094:	4623      	mov	r3, r4
 8005096:	d807      	bhi.n	80050a8 <memmove+0x20>
 8005098:	1e43      	subs	r3, r0, #1
 800509a:	42a1      	cmp	r1, r4
 800509c:	d008      	beq.n	80050b0 <memmove+0x28>
 800509e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050a6:	e7f8      	b.n	800509a <memmove+0x12>
 80050a8:	4402      	add	r2, r0
 80050aa:	4601      	mov	r1, r0
 80050ac:	428a      	cmp	r2, r1
 80050ae:	d100      	bne.n	80050b2 <memmove+0x2a>
 80050b0:	bd10      	pop	{r4, pc}
 80050b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050ba:	e7f7      	b.n	80050ac <memmove+0x24>

080050bc <_free_r>:
 80050bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050be:	2900      	cmp	r1, #0
 80050c0:	d044      	beq.n	800514c <_free_r+0x90>
 80050c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050c6:	9001      	str	r0, [sp, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f1a1 0404 	sub.w	r4, r1, #4
 80050ce:	bfb8      	it	lt
 80050d0:	18e4      	addlt	r4, r4, r3
 80050d2:	f000 f913 	bl	80052fc <__malloc_lock>
 80050d6:	4a1e      	ldr	r2, [pc, #120]	; (8005150 <_free_r+0x94>)
 80050d8:	9801      	ldr	r0, [sp, #4]
 80050da:	6813      	ldr	r3, [r2, #0]
 80050dc:	b933      	cbnz	r3, 80050ec <_free_r+0x30>
 80050de:	6063      	str	r3, [r4, #4]
 80050e0:	6014      	str	r4, [r2, #0]
 80050e2:	b003      	add	sp, #12
 80050e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050e8:	f000 b90e 	b.w	8005308 <__malloc_unlock>
 80050ec:	42a3      	cmp	r3, r4
 80050ee:	d908      	bls.n	8005102 <_free_r+0x46>
 80050f0:	6825      	ldr	r5, [r4, #0]
 80050f2:	1961      	adds	r1, r4, r5
 80050f4:	428b      	cmp	r3, r1
 80050f6:	bf01      	itttt	eq
 80050f8:	6819      	ldreq	r1, [r3, #0]
 80050fa:	685b      	ldreq	r3, [r3, #4]
 80050fc:	1949      	addeq	r1, r1, r5
 80050fe:	6021      	streq	r1, [r4, #0]
 8005100:	e7ed      	b.n	80050de <_free_r+0x22>
 8005102:	461a      	mov	r2, r3
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	b10b      	cbz	r3, 800510c <_free_r+0x50>
 8005108:	42a3      	cmp	r3, r4
 800510a:	d9fa      	bls.n	8005102 <_free_r+0x46>
 800510c:	6811      	ldr	r1, [r2, #0]
 800510e:	1855      	adds	r5, r2, r1
 8005110:	42a5      	cmp	r5, r4
 8005112:	d10b      	bne.n	800512c <_free_r+0x70>
 8005114:	6824      	ldr	r4, [r4, #0]
 8005116:	4421      	add	r1, r4
 8005118:	1854      	adds	r4, r2, r1
 800511a:	42a3      	cmp	r3, r4
 800511c:	6011      	str	r1, [r2, #0]
 800511e:	d1e0      	bne.n	80050e2 <_free_r+0x26>
 8005120:	681c      	ldr	r4, [r3, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	6053      	str	r3, [r2, #4]
 8005126:	4421      	add	r1, r4
 8005128:	6011      	str	r1, [r2, #0]
 800512a:	e7da      	b.n	80050e2 <_free_r+0x26>
 800512c:	d902      	bls.n	8005134 <_free_r+0x78>
 800512e:	230c      	movs	r3, #12
 8005130:	6003      	str	r3, [r0, #0]
 8005132:	e7d6      	b.n	80050e2 <_free_r+0x26>
 8005134:	6825      	ldr	r5, [r4, #0]
 8005136:	1961      	adds	r1, r4, r5
 8005138:	428b      	cmp	r3, r1
 800513a:	bf04      	itt	eq
 800513c:	6819      	ldreq	r1, [r3, #0]
 800513e:	685b      	ldreq	r3, [r3, #4]
 8005140:	6063      	str	r3, [r4, #4]
 8005142:	bf04      	itt	eq
 8005144:	1949      	addeq	r1, r1, r5
 8005146:	6021      	streq	r1, [r4, #0]
 8005148:	6054      	str	r4, [r2, #4]
 800514a:	e7ca      	b.n	80050e2 <_free_r+0x26>
 800514c:	b003      	add	sp, #12
 800514e:	bd30      	pop	{r4, r5, pc}
 8005150:	2000ffcc 	.word	0x2000ffcc

08005154 <sbrk_aligned>:
 8005154:	b570      	push	{r4, r5, r6, lr}
 8005156:	4e0e      	ldr	r6, [pc, #56]	; (8005190 <sbrk_aligned+0x3c>)
 8005158:	460c      	mov	r4, r1
 800515a:	6831      	ldr	r1, [r6, #0]
 800515c:	4605      	mov	r5, r0
 800515e:	b911      	cbnz	r1, 8005166 <sbrk_aligned+0x12>
 8005160:	f000 f8bc 	bl	80052dc <_sbrk_r>
 8005164:	6030      	str	r0, [r6, #0]
 8005166:	4621      	mov	r1, r4
 8005168:	4628      	mov	r0, r5
 800516a:	f000 f8b7 	bl	80052dc <_sbrk_r>
 800516e:	1c43      	adds	r3, r0, #1
 8005170:	d00a      	beq.n	8005188 <sbrk_aligned+0x34>
 8005172:	1cc4      	adds	r4, r0, #3
 8005174:	f024 0403 	bic.w	r4, r4, #3
 8005178:	42a0      	cmp	r0, r4
 800517a:	d007      	beq.n	800518c <sbrk_aligned+0x38>
 800517c:	1a21      	subs	r1, r4, r0
 800517e:	4628      	mov	r0, r5
 8005180:	f000 f8ac 	bl	80052dc <_sbrk_r>
 8005184:	3001      	adds	r0, #1
 8005186:	d101      	bne.n	800518c <sbrk_aligned+0x38>
 8005188:	f04f 34ff 	mov.w	r4, #4294967295
 800518c:	4620      	mov	r0, r4
 800518e:	bd70      	pop	{r4, r5, r6, pc}
 8005190:	2000ffd0 	.word	0x2000ffd0

08005194 <_malloc_r>:
 8005194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005198:	1ccd      	adds	r5, r1, #3
 800519a:	f025 0503 	bic.w	r5, r5, #3
 800519e:	3508      	adds	r5, #8
 80051a0:	2d0c      	cmp	r5, #12
 80051a2:	bf38      	it	cc
 80051a4:	250c      	movcc	r5, #12
 80051a6:	2d00      	cmp	r5, #0
 80051a8:	4607      	mov	r7, r0
 80051aa:	db01      	blt.n	80051b0 <_malloc_r+0x1c>
 80051ac:	42a9      	cmp	r1, r5
 80051ae:	d905      	bls.n	80051bc <_malloc_r+0x28>
 80051b0:	230c      	movs	r3, #12
 80051b2:	603b      	str	r3, [r7, #0]
 80051b4:	2600      	movs	r6, #0
 80051b6:	4630      	mov	r0, r6
 80051b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051bc:	4e2e      	ldr	r6, [pc, #184]	; (8005278 <_malloc_r+0xe4>)
 80051be:	f000 f89d 	bl	80052fc <__malloc_lock>
 80051c2:	6833      	ldr	r3, [r6, #0]
 80051c4:	461c      	mov	r4, r3
 80051c6:	bb34      	cbnz	r4, 8005216 <_malloc_r+0x82>
 80051c8:	4629      	mov	r1, r5
 80051ca:	4638      	mov	r0, r7
 80051cc:	f7ff ffc2 	bl	8005154 <sbrk_aligned>
 80051d0:	1c43      	adds	r3, r0, #1
 80051d2:	4604      	mov	r4, r0
 80051d4:	d14d      	bne.n	8005272 <_malloc_r+0xde>
 80051d6:	6834      	ldr	r4, [r6, #0]
 80051d8:	4626      	mov	r6, r4
 80051da:	2e00      	cmp	r6, #0
 80051dc:	d140      	bne.n	8005260 <_malloc_r+0xcc>
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	4631      	mov	r1, r6
 80051e2:	4638      	mov	r0, r7
 80051e4:	eb04 0803 	add.w	r8, r4, r3
 80051e8:	f000 f878 	bl	80052dc <_sbrk_r>
 80051ec:	4580      	cmp	r8, r0
 80051ee:	d13a      	bne.n	8005266 <_malloc_r+0xd2>
 80051f0:	6821      	ldr	r1, [r4, #0]
 80051f2:	3503      	adds	r5, #3
 80051f4:	1a6d      	subs	r5, r5, r1
 80051f6:	f025 0503 	bic.w	r5, r5, #3
 80051fa:	3508      	adds	r5, #8
 80051fc:	2d0c      	cmp	r5, #12
 80051fe:	bf38      	it	cc
 8005200:	250c      	movcc	r5, #12
 8005202:	4629      	mov	r1, r5
 8005204:	4638      	mov	r0, r7
 8005206:	f7ff ffa5 	bl	8005154 <sbrk_aligned>
 800520a:	3001      	adds	r0, #1
 800520c:	d02b      	beq.n	8005266 <_malloc_r+0xd2>
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	442b      	add	r3, r5
 8005212:	6023      	str	r3, [r4, #0]
 8005214:	e00e      	b.n	8005234 <_malloc_r+0xa0>
 8005216:	6822      	ldr	r2, [r4, #0]
 8005218:	1b52      	subs	r2, r2, r5
 800521a:	d41e      	bmi.n	800525a <_malloc_r+0xc6>
 800521c:	2a0b      	cmp	r2, #11
 800521e:	d916      	bls.n	800524e <_malloc_r+0xba>
 8005220:	1961      	adds	r1, r4, r5
 8005222:	42a3      	cmp	r3, r4
 8005224:	6025      	str	r5, [r4, #0]
 8005226:	bf18      	it	ne
 8005228:	6059      	strne	r1, [r3, #4]
 800522a:	6863      	ldr	r3, [r4, #4]
 800522c:	bf08      	it	eq
 800522e:	6031      	streq	r1, [r6, #0]
 8005230:	5162      	str	r2, [r4, r5]
 8005232:	604b      	str	r3, [r1, #4]
 8005234:	4638      	mov	r0, r7
 8005236:	f104 060b 	add.w	r6, r4, #11
 800523a:	f000 f865 	bl	8005308 <__malloc_unlock>
 800523e:	f026 0607 	bic.w	r6, r6, #7
 8005242:	1d23      	adds	r3, r4, #4
 8005244:	1af2      	subs	r2, r6, r3
 8005246:	d0b6      	beq.n	80051b6 <_malloc_r+0x22>
 8005248:	1b9b      	subs	r3, r3, r6
 800524a:	50a3      	str	r3, [r4, r2]
 800524c:	e7b3      	b.n	80051b6 <_malloc_r+0x22>
 800524e:	6862      	ldr	r2, [r4, #4]
 8005250:	42a3      	cmp	r3, r4
 8005252:	bf0c      	ite	eq
 8005254:	6032      	streq	r2, [r6, #0]
 8005256:	605a      	strne	r2, [r3, #4]
 8005258:	e7ec      	b.n	8005234 <_malloc_r+0xa0>
 800525a:	4623      	mov	r3, r4
 800525c:	6864      	ldr	r4, [r4, #4]
 800525e:	e7b2      	b.n	80051c6 <_malloc_r+0x32>
 8005260:	4634      	mov	r4, r6
 8005262:	6876      	ldr	r6, [r6, #4]
 8005264:	e7b9      	b.n	80051da <_malloc_r+0x46>
 8005266:	230c      	movs	r3, #12
 8005268:	603b      	str	r3, [r7, #0]
 800526a:	4638      	mov	r0, r7
 800526c:	f000 f84c 	bl	8005308 <__malloc_unlock>
 8005270:	e7a1      	b.n	80051b6 <_malloc_r+0x22>
 8005272:	6025      	str	r5, [r4, #0]
 8005274:	e7de      	b.n	8005234 <_malloc_r+0xa0>
 8005276:	bf00      	nop
 8005278:	2000ffcc 	.word	0x2000ffcc

0800527c <_realloc_r>:
 800527c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005280:	4680      	mov	r8, r0
 8005282:	4614      	mov	r4, r2
 8005284:	460e      	mov	r6, r1
 8005286:	b921      	cbnz	r1, 8005292 <_realloc_r+0x16>
 8005288:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800528c:	4611      	mov	r1, r2
 800528e:	f7ff bf81 	b.w	8005194 <_malloc_r>
 8005292:	b92a      	cbnz	r2, 80052a0 <_realloc_r+0x24>
 8005294:	f7ff ff12 	bl	80050bc <_free_r>
 8005298:	4625      	mov	r5, r4
 800529a:	4628      	mov	r0, r5
 800529c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052a0:	f000 f838 	bl	8005314 <_malloc_usable_size_r>
 80052a4:	4284      	cmp	r4, r0
 80052a6:	4607      	mov	r7, r0
 80052a8:	d802      	bhi.n	80052b0 <_realloc_r+0x34>
 80052aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80052ae:	d812      	bhi.n	80052d6 <_realloc_r+0x5a>
 80052b0:	4621      	mov	r1, r4
 80052b2:	4640      	mov	r0, r8
 80052b4:	f7ff ff6e 	bl	8005194 <_malloc_r>
 80052b8:	4605      	mov	r5, r0
 80052ba:	2800      	cmp	r0, #0
 80052bc:	d0ed      	beq.n	800529a <_realloc_r+0x1e>
 80052be:	42bc      	cmp	r4, r7
 80052c0:	4622      	mov	r2, r4
 80052c2:	4631      	mov	r1, r6
 80052c4:	bf28      	it	cs
 80052c6:	463a      	movcs	r2, r7
 80052c8:	f7ff fed0 	bl	800506c <memcpy>
 80052cc:	4631      	mov	r1, r6
 80052ce:	4640      	mov	r0, r8
 80052d0:	f7ff fef4 	bl	80050bc <_free_r>
 80052d4:	e7e1      	b.n	800529a <_realloc_r+0x1e>
 80052d6:	4635      	mov	r5, r6
 80052d8:	e7df      	b.n	800529a <_realloc_r+0x1e>
	...

080052dc <_sbrk_r>:
 80052dc:	b538      	push	{r3, r4, r5, lr}
 80052de:	4d06      	ldr	r5, [pc, #24]	; (80052f8 <_sbrk_r+0x1c>)
 80052e0:	2300      	movs	r3, #0
 80052e2:	4604      	mov	r4, r0
 80052e4:	4608      	mov	r0, r1
 80052e6:	602b      	str	r3, [r5, #0]
 80052e8:	f7fc f9fc 	bl	80016e4 <_sbrk>
 80052ec:	1c43      	adds	r3, r0, #1
 80052ee:	d102      	bne.n	80052f6 <_sbrk_r+0x1a>
 80052f0:	682b      	ldr	r3, [r5, #0]
 80052f2:	b103      	cbz	r3, 80052f6 <_sbrk_r+0x1a>
 80052f4:	6023      	str	r3, [r4, #0]
 80052f6:	bd38      	pop	{r3, r4, r5, pc}
 80052f8:	2000ffd4 	.word	0x2000ffd4

080052fc <__malloc_lock>:
 80052fc:	4801      	ldr	r0, [pc, #4]	; (8005304 <__malloc_lock+0x8>)
 80052fe:	f000 b811 	b.w	8005324 <__retarget_lock_acquire_recursive>
 8005302:	bf00      	nop
 8005304:	2000ffd8 	.word	0x2000ffd8

08005308 <__malloc_unlock>:
 8005308:	4801      	ldr	r0, [pc, #4]	; (8005310 <__malloc_unlock+0x8>)
 800530a:	f000 b80c 	b.w	8005326 <__retarget_lock_release_recursive>
 800530e:	bf00      	nop
 8005310:	2000ffd8 	.word	0x2000ffd8

08005314 <_malloc_usable_size_r>:
 8005314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005318:	1f18      	subs	r0, r3, #4
 800531a:	2b00      	cmp	r3, #0
 800531c:	bfbc      	itt	lt
 800531e:	580b      	ldrlt	r3, [r1, r0]
 8005320:	18c0      	addlt	r0, r0, r3
 8005322:	4770      	bx	lr

08005324 <__retarget_lock_acquire_recursive>:
 8005324:	4770      	bx	lr

08005326 <__retarget_lock_release_recursive>:
 8005326:	4770      	bx	lr

08005328 <_init>:
 8005328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532a:	bf00      	nop
 800532c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800532e:	bc08      	pop	{r3}
 8005330:	469e      	mov	lr, r3
 8005332:	4770      	bx	lr

08005334 <_fini>:
 8005334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005336:	bf00      	nop
 8005338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800533a:	bc08      	pop	{r3}
 800533c:	469e      	mov	lr, r3
 800533e:	4770      	bx	lr
