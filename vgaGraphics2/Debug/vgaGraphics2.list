
vgaGraphics2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005248  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  080053e8  080053e8  000153e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056bc  080056bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080056bc  080056bc  000156bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056c4  080056c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056c4  080056c4  000156c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056c8  080056c8  000156c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080056cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ff80  20000070  0800573c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000fff0  0800573c  0002fff0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9ba  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f42  00000000  00000000  0002ea5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  000309a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  00031718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002915  00000000  00000000  000323d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb4b  00000000  00000000  00034ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e014  00000000  00000000  00043838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d184c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cc4  00000000  00000000  000d189c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080053d0 	.word	0x080053d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080053d0 	.word	0x080053d0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <dumpLine>:
/* USER CODE BEGIN 0 */

char str[81] = { '\0' };
uint16_t str_len = 0;

void dumpLine(){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0

	for(int i = 0; i < 40; i++){
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	e018      	b.n	80005c2 <dumpLine+0x3e>
		int tmp = screenBuff[i].value;
 8000590:	4a17      	ldr	r2, [pc, #92]	; (80005f0 <dumpLine+0x6c>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4413      	add	r3, r2
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	603b      	str	r3, [r7, #0]
		str_len = sprintf(str, "%02x ", tmp);
 800059a:	683a      	ldr	r2, [r7, #0]
 800059c:	4915      	ldr	r1, [pc, #84]	; (80005f4 <dumpLine+0x70>)
 800059e:	4816      	ldr	r0, [pc, #88]	; (80005f8 <dumpLine+0x74>)
 80005a0:	f004 faa8 	bl	8004af4 <siprintf>
 80005a4:	4603      	mov	r3, r0
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	4b14      	ldr	r3, [pc, #80]	; (80005fc <dumpLine+0x78>)
 80005aa:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80005ac:	4b13      	ldr	r3, [pc, #76]	; (80005fc <dumpLine+0x78>)
 80005ae:	881a      	ldrh	r2, [r3, #0]
 80005b0:	f04f 33ff 	mov.w	r3, #4294967295
 80005b4:	4910      	ldr	r1, [pc, #64]	; (80005f8 <dumpLine+0x74>)
 80005b6:	4812      	ldr	r0, [pc, #72]	; (8000600 <dumpLine+0x7c>)
 80005b8:	f003 fef5 	bl	80043a6 <HAL_UART_Transmit>
	for(int i = 0; i < 40; i++){
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3301      	adds	r3, #1
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b27      	cmp	r3, #39	; 0x27
 80005c6:	dde3      	ble.n	8000590 <dumpLine+0xc>
	}
	str_len = sprintf(str, "\r\n");
 80005c8:	490e      	ldr	r1, [pc, #56]	; (8000604 <dumpLine+0x80>)
 80005ca:	480b      	ldr	r0, [pc, #44]	; (80005f8 <dumpLine+0x74>)
 80005cc:	f004 fa92 	bl	8004af4 <siprintf>
 80005d0:	4603      	mov	r3, r0
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <dumpLine+0x78>)
 80005d6:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <dumpLine+0x78>)
 80005da:	881a      	ldrh	r2, [r3, #0]
 80005dc:	f04f 33ff 	mov.w	r3, #4294967295
 80005e0:	4905      	ldr	r1, [pc, #20]	; (80005f8 <dumpLine+0x74>)
 80005e2:	4807      	ldr	r0, [pc, #28]	; (8000600 <dumpLine+0x7c>)
 80005e4:	f003 fedf 	bl	80043a6 <HAL_UART_Transmit>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200005b0 	.word	0x200005b0
 80005f4:	080053e8 	.word	0x080053e8
 80005f8:	20000238 	.word	0x20000238
 80005fc:	2000028a 	.word	0x2000028a
 8000600:	20000194 	.word	0x20000194
 8000604:	080053f0 	.word	0x080053f0

08000608 <printStatus>:
	if(htim == &htim5){
		timerReset();
	}
}

int printStatus(HAL_StatusTypeDef status){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	  HAL_OK       = 0x00U,
	  HAL_ERROR    = 0x01U,
	  HAL_BUSY     = 0x02U,
	  HAL_TIMEOUT  = 0x03U
	} HAL_StatusTypeDef;//*/
	switch(status){
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	2b03      	cmp	r3, #3
 8000616:	d82f      	bhi.n	8000678 <printStatus+0x70>
 8000618:	a201      	add	r2, pc, #4	; (adr r2, 8000620 <printStatus+0x18>)
 800061a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061e:	bf00      	nop
 8000620:	08000631 	.word	0x08000631
 8000624:	08000643 	.word	0x08000643
 8000628:	08000655 	.word	0x08000655
 800062c:	08000667 	.word	0x08000667
	case HAL_OK:str_len = sprintf(str, "HAL_OK\r\n");break;
 8000630:	491f      	ldr	r1, [pc, #124]	; (80006b0 <printStatus+0xa8>)
 8000632:	4820      	ldr	r0, [pc, #128]	; (80006b4 <printStatus+0xac>)
 8000634:	f004 fa5e 	bl	8004af4 <siprintf>
 8000638:	4603      	mov	r3, r0
 800063a:	b29a      	uxth	r2, r3
 800063c:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <printStatus+0xb0>)
 800063e:	801a      	strh	r2, [r3, #0]
 8000640:	e023      	b.n	800068a <printStatus+0x82>
	case HAL_ERROR:str_len = sprintf(str, "HAL_ERROR\r\n");break;
 8000642:	491e      	ldr	r1, [pc, #120]	; (80006bc <printStatus+0xb4>)
 8000644:	481b      	ldr	r0, [pc, #108]	; (80006b4 <printStatus+0xac>)
 8000646:	f004 fa55 	bl	8004af4 <siprintf>
 800064a:	4603      	mov	r3, r0
 800064c:	b29a      	uxth	r2, r3
 800064e:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <printStatus+0xb0>)
 8000650:	801a      	strh	r2, [r3, #0]
 8000652:	e01a      	b.n	800068a <printStatus+0x82>
	case HAL_BUSY:str_len = sprintf(str, "HAL_BUSY\r\n");break;
 8000654:	491a      	ldr	r1, [pc, #104]	; (80006c0 <printStatus+0xb8>)
 8000656:	4817      	ldr	r0, [pc, #92]	; (80006b4 <printStatus+0xac>)
 8000658:	f004 fa4c 	bl	8004af4 <siprintf>
 800065c:	4603      	mov	r3, r0
 800065e:	b29a      	uxth	r2, r3
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <printStatus+0xb0>)
 8000662:	801a      	strh	r2, [r3, #0]
 8000664:	e011      	b.n	800068a <printStatus+0x82>
	case HAL_TIMEOUT:str_len = sprintf(str, "HAL_TIMEOUT\r\n");break;
 8000666:	4917      	ldr	r1, [pc, #92]	; (80006c4 <printStatus+0xbc>)
 8000668:	4812      	ldr	r0, [pc, #72]	; (80006b4 <printStatus+0xac>)
 800066a:	f004 fa43 	bl	8004af4 <siprintf>
 800066e:	4603      	mov	r3, r0
 8000670:	b29a      	uxth	r2, r3
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <printStatus+0xb0>)
 8000674:	801a      	strh	r2, [r3, #0]
 8000676:	e008      	b.n	800068a <printStatus+0x82>
	default:str_len = sprintf(str, "HAL_Unknown\r\n");break;
 8000678:	4913      	ldr	r1, [pc, #76]	; (80006c8 <printStatus+0xc0>)
 800067a:	480e      	ldr	r0, [pc, #56]	; (80006b4 <printStatus+0xac>)
 800067c:	f004 fa3a 	bl	8004af4 <siprintf>
 8000680:	4603      	mov	r3, r0
 8000682:	b29a      	uxth	r2, r3
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <printStatus+0xb0>)
 8000686:	801a      	strh	r2, [r3, #0]
 8000688:	bf00      	nop
	}
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <printStatus+0xb0>)
 800068c:	881a      	ldrh	r2, [r3, #0]
 800068e:	f04f 33ff 	mov.w	r3, #4294967295
 8000692:	4908      	ldr	r1, [pc, #32]	; (80006b4 <printStatus+0xac>)
 8000694:	480d      	ldr	r0, [pc, #52]	; (80006cc <printStatus+0xc4>)
 8000696:	f003 fe86 	bl	80043a6 <HAL_UART_Transmit>
	return status != HAL_OK;
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b00      	cmp	r3, #0
 800069e:	bf14      	ite	ne
 80006a0:	2301      	movne	r3, #1
 80006a2:	2300      	moveq	r3, #0
 80006a4:	b2db      	uxtb	r3, r3

}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	08005404 	.word	0x08005404
 80006b4:	20000238 	.word	0x20000238
 80006b8:	2000028a 	.word	0x2000028a
 80006bc:	08005410 	.word	0x08005410
 80006c0:	0800541c 	.word	0x0800541c
 80006c4:	08005428 	.word	0x08005428
 80006c8:	08005438 	.word	0x08005438
 80006cc:	20000194 	.word	0x20000194

080006d0 <printState>:

int printState(HAL_DMA_StateTypeDef state){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
	//HAL_DMA_STATE_BUSY              = 0x02U,  /*!< DMA process is ongoing              */
	//HAL_DMA_STATE_TIMEOUT           = 0x03U,  /*!< DMA timeout state                   */
	//HAL_DMA_STATE_ERROR             = 0x04U,  /*!< DMA error state                     */
	//HAL_DMA_STATE_ABORT             = 0x05U,  /*!< DMA Abort state                     */
	//}HAL_DMA_StateTypeDef;
	switch(state){
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b05      	cmp	r3, #5
 80006de:	d845      	bhi.n	800076c <printState+0x9c>
 80006e0:	a201      	add	r2, pc, #4	; (adr r2, 80006e8 <printState+0x18>)
 80006e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e6:	bf00      	nop
 80006e8:	08000701 	.word	0x08000701
 80006ec:	08000713 	.word	0x08000713
 80006f0:	08000725 	.word	0x08000725
 80006f4:	08000737 	.word	0x08000737
 80006f8:	08000749 	.word	0x08000749
 80006fc:	0800075b 	.word	0x0800075b
	case HAL_DMA_STATE_RESET:str_len = sprintf(str, "DMA not yet initialized or disabled\r\n");break;
 8000700:	4928      	ldr	r1, [pc, #160]	; (80007a4 <printState+0xd4>)
 8000702:	4829      	ldr	r0, [pc, #164]	; (80007a8 <printState+0xd8>)
 8000704:	f004 f9f6 	bl	8004af4 <siprintf>
 8000708:	4603      	mov	r3, r0
 800070a:	b29a      	uxth	r2, r3
 800070c:	4b27      	ldr	r3, [pc, #156]	; (80007ac <printState+0xdc>)
 800070e:	801a      	strh	r2, [r3, #0]
 8000710:	e035      	b.n	800077e <printState+0xae>
	case HAL_DMA_STATE_READY:str_len = sprintf(str, "DMA initialized and ready for use\r\n");break;
 8000712:	4927      	ldr	r1, [pc, #156]	; (80007b0 <printState+0xe0>)
 8000714:	4824      	ldr	r0, [pc, #144]	; (80007a8 <printState+0xd8>)
 8000716:	f004 f9ed 	bl	8004af4 <siprintf>
 800071a:	4603      	mov	r3, r0
 800071c:	b29a      	uxth	r2, r3
 800071e:	4b23      	ldr	r3, [pc, #140]	; (80007ac <printState+0xdc>)
 8000720:	801a      	strh	r2, [r3, #0]
 8000722:	e02c      	b.n	800077e <printState+0xae>
	case HAL_DMA_STATE_BUSY:str_len = sprintf(str, "DMA process is ongoing\r\n");break;
 8000724:	4923      	ldr	r1, [pc, #140]	; (80007b4 <printState+0xe4>)
 8000726:	4820      	ldr	r0, [pc, #128]	; (80007a8 <printState+0xd8>)
 8000728:	f004 f9e4 	bl	8004af4 <siprintf>
 800072c:	4603      	mov	r3, r0
 800072e:	b29a      	uxth	r2, r3
 8000730:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <printState+0xdc>)
 8000732:	801a      	strh	r2, [r3, #0]
 8000734:	e023      	b.n	800077e <printState+0xae>
	case HAL_DMA_STATE_TIMEOUT:str_len = sprintf(str, "DMA timeout state\r\n");break;
 8000736:	4920      	ldr	r1, [pc, #128]	; (80007b8 <printState+0xe8>)
 8000738:	481b      	ldr	r0, [pc, #108]	; (80007a8 <printState+0xd8>)
 800073a:	f004 f9db 	bl	8004af4 <siprintf>
 800073e:	4603      	mov	r3, r0
 8000740:	b29a      	uxth	r2, r3
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <printState+0xdc>)
 8000744:	801a      	strh	r2, [r3, #0]
 8000746:	e01a      	b.n	800077e <printState+0xae>
	case HAL_DMA_STATE_ERROR:str_len = sprintf(str, "DMA error state\r\n");break;
 8000748:	491c      	ldr	r1, [pc, #112]	; (80007bc <printState+0xec>)
 800074a:	4817      	ldr	r0, [pc, #92]	; (80007a8 <printState+0xd8>)
 800074c:	f004 f9d2 	bl	8004af4 <siprintf>
 8000750:	4603      	mov	r3, r0
 8000752:	b29a      	uxth	r2, r3
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <printState+0xdc>)
 8000756:	801a      	strh	r2, [r3, #0]
 8000758:	e011      	b.n	800077e <printState+0xae>
	case HAL_DMA_STATE_ABORT:str_len = sprintf(str, "DMA Abort state\r\n");break;
 800075a:	4919      	ldr	r1, [pc, #100]	; (80007c0 <printState+0xf0>)
 800075c:	4812      	ldr	r0, [pc, #72]	; (80007a8 <printState+0xd8>)
 800075e:	f004 f9c9 	bl	8004af4 <siprintf>
 8000762:	4603      	mov	r3, r0
 8000764:	b29a      	uxth	r2, r3
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <printState+0xdc>)
 8000768:	801a      	strh	r2, [r3, #0]
 800076a:	e008      	b.n	800077e <printState+0xae>
	default:str_len = sprintf(str, "DMA_Unknown\r\n");break;
 800076c:	4915      	ldr	r1, [pc, #84]	; (80007c4 <printState+0xf4>)
 800076e:	480e      	ldr	r0, [pc, #56]	; (80007a8 <printState+0xd8>)
 8000770:	f004 f9c0 	bl	8004af4 <siprintf>
 8000774:	4603      	mov	r3, r0
 8000776:	b29a      	uxth	r2, r3
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <printState+0xdc>)
 800077a:	801a      	strh	r2, [r3, #0]
 800077c:	bf00      	nop

	}
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <printState+0xdc>)
 8000780:	881a      	ldrh	r2, [r3, #0]
 8000782:	f04f 33ff 	mov.w	r3, #4294967295
 8000786:	4908      	ldr	r1, [pc, #32]	; (80007a8 <printState+0xd8>)
 8000788:	480f      	ldr	r0, [pc, #60]	; (80007c8 <printState+0xf8>)
 800078a:	f003 fe0c 	bl	80043a6 <HAL_UART_Transmit>
	return state != HAL_DMA_STATE_READY;
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b01      	cmp	r3, #1
 8000792:	bf14      	ite	ne
 8000794:	2301      	movne	r3, #1
 8000796:	2300      	moveq	r3, #0
 8000798:	b2db      	uxtb	r3, r3
}
 800079a:	4618      	mov	r0, r3
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	08005448 	.word	0x08005448
 80007a8:	20000238 	.word	0x20000238
 80007ac:	2000028a 	.word	0x2000028a
 80007b0:	08005470 	.word	0x08005470
 80007b4:	08005494 	.word	0x08005494
 80007b8:	080054b0 	.word	0x080054b0
 80007bc:	080054c4 	.word	0x080054c4
 80007c0:	080054d8 	.word	0x080054d8
 80007c4:	080054ec 	.word	0x080054ec
 80007c8:	20000194 	.word	0x20000194

080007cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b09a      	sub	sp, #104	; 0x68
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d2:	f001 fa0f 	bl	8001bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d6:	f000 f963 	bl	8000aa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007da:	f000 fadb 	bl	8000d94 <MX_GPIO_Init>
  MX_DMA_Init();
 80007de:	f000 fa6b 	bl	8000cb8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007e2:	f000 fa3f 	bl	8000c64 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 80007e6:	f000 f9c7 	bl	8000b78 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

	char str[81] = { '\0' };
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	224d      	movs	r2, #77	; 0x4d
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f004 f974 	bl	8004ae4 <memset>
	uint16_t str_len = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	str_len = sprintf(str, "Starting up!\r\n");
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	4999      	ldr	r1, [pc, #612]	; (8000a6c <main+0x2a0>)
 8000806:	4618      	mov	r0, r3
 8000808:	f004 f974 	bl	8004af4 <siprintf>
 800080c:	4603      	mov	r3, r0
 800080e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8000812:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8000816:	1d39      	adds	r1, r7, #4
 8000818:	f04f 33ff 	mov.w	r3, #4294967295
 800081c:	4894      	ldr	r0, [pc, #592]	; (8000a70 <main+0x2a4>)
 800081e:	f003 fdc2 	bl	80043a6 <HAL_UART_Transmit>


	vgaSetup(&htim5, &hdma_tim5_up, &hdma_memtomem_dma2_stream0);
 8000822:	4a94      	ldr	r2, [pc, #592]	; (8000a74 <main+0x2a8>)
 8000824:	4994      	ldr	r1, [pc, #592]	; (8000a78 <main+0x2ac>)
 8000826:	4895      	ldr	r0, [pc, #596]	; (8000a7c <main+0x2b0>)
 8000828:	f001 f930 	bl	8001a8c <vgaSetup>
	registerHUART(&huart2);
 800082c:	4890      	ldr	r0, [pc, #576]	; (8000a70 <main+0x2a4>)
 800082e:	f000 ff19 	bl	8001664 <registerHUART>
	registerDebugInterupts(&hdma_tim5_up);
 8000832:	4891      	ldr	r0, [pc, #580]	; (8000a78 <main+0x2ac>)
 8000834:	f000 fedc 	bl	80015f0 <registerDebugInterupts>

	for(int i = 0; i < vertRes; i++){//load a test pattern
 8000838:	2300      	movs	r3, #0
 800083a:	667b      	str	r3, [r7, #100]	; 0x64
 800083c:	e019      	b.n	8000872 <main+0xa6>
		for(int j = 0; j < horiRes; j++){
 800083e:	2300      	movs	r3, #0
 8000840:	663b      	str	r3, [r7, #96]	; 0x60
 8000842:	e00f      	b.n	8000864 <main+0x98>
			screenBuff[i*vertRes + j].value = j & 0b111111;
 8000844:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000846:	b2da      	uxtb	r2, r3
 8000848:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800084a:	21c8      	movs	r1, #200	; 0xc8
 800084c:	fb03 f101 	mul.w	r1, r3, r1
 8000850:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000852:	440b      	add	r3, r1
 8000854:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000858:	b2d1      	uxtb	r1, r2
 800085a:	4a89      	ldr	r2, [pc, #548]	; (8000a80 <main+0x2b4>)
 800085c:	54d1      	strb	r1, [r2, r3]
		for(int j = 0; j < horiRes; j++){
 800085e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000860:	3301      	adds	r3, #1
 8000862:	663b      	str	r3, [r7, #96]	; 0x60
 8000864:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000866:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800086a:	dbeb      	blt.n	8000844 <main+0x78>
	for(int i = 0; i < vertRes; i++){//load a test pattern
 800086c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800086e:	3301      	adds	r3, #1
 8000870:	667b      	str	r3, [r7, #100]	; 0x64
 8000872:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000874:	2bc7      	cmp	r3, #199	; 0xc7
 8000876:	dde2      	ble.n	800083e <main+0x72>
		}
	}

	for(int i = 0; i < 800*2; i += 2){
 8000878:	2300      	movs	r3, #0
 800087a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800087c:	e00c      	b.n	8000898 <main+0xcc>
		lineBuff[i].value = ~0;
 800087e:	4a81      	ldr	r2, [pc, #516]	; (8000a84 <main+0x2b8>)
 8000880:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000882:	4413      	add	r3, r2
 8000884:	22ff      	movs	r2, #255	; 0xff
 8000886:	701a      	strb	r2, [r3, #0]
		lineBuff[i+1].value = 0;
 8000888:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800088a:	3301      	adds	r3, #1
 800088c:	4a7d      	ldr	r2, [pc, #500]	; (8000a84 <main+0x2b8>)
 800088e:	2100      	movs	r1, #0
 8000890:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < 800*2; i += 2){
 8000892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000894:	3302      	adds	r3, #2
 8000896:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000898:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800089a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800089e:	dbee      	blt.n	800087e <main+0xb2>
	}

	dumpLine();
 80008a0:	f7ff fe70 	bl	8000584 <dumpLine>
	printState(HAL_DMA_GetState(&hdma_memtomem_dma2_stream0));
 80008a4:	4873      	ldr	r0, [pc, #460]	; (8000a74 <main+0x2a8>)
 80008a6:	f001 ff81 	bl	80027ac <HAL_DMA_GetState>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff ff0f 	bl	80006d0 <printState>

	str_len = sprintf(str, "\r\n\r\nTesting Memset\r\n");
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	4974      	ldr	r1, [pc, #464]	; (8000a88 <main+0x2bc>)
 80008b6:	4618      	mov	r0, r3
 80008b8:	f004 f91c 	bl	8004af4 <siprintf>
 80008bc:	4603      	mov	r3, r0
 80008be:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80008c2:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80008c6:	1d39      	adds	r1, r7, #4
 80008c8:	f04f 33ff 	mov.w	r3, #4294967295
 80008cc:	4868      	ldr	r0, [pc, #416]	; (8000a70 <main+0x2a4>)
 80008ce:	f003 fd6a 	bl	80043a6 <HAL_UART_Transmit>

	printStatus(old_memSet(0, (uint32_t*)&screenBuff[0], 2));//testingMemset
 80008d2:	2202      	movs	r2, #2
 80008d4:	496a      	ldr	r1, [pc, #424]	; (8000a80 <main+0x2b4>)
 80008d6:	2000      	movs	r0, #0
 80008d8:	f000 fcc2 	bl	8001260 <old_memSet>
 80008dc:	4603      	mov	r3, r0
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fe92 	bl	8000608 <printStatus>
	printState(HAL_DMA_GetState(&hdma_memtomem_dma2_stream0));
 80008e4:	4863      	ldr	r0, [pc, #396]	; (8000a74 <main+0x2a8>)
 80008e6:	f001 ff61 	bl	80027ac <HAL_DMA_GetState>
 80008ea:	4603      	mov	r3, r0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff feef 	bl	80006d0 <printState>
	dumpLine();
 80008f2:	f7ff fe47 	bl	8000584 <dumpLine>
	while(printStatus(HAL_DMA_PollForTransfer(&hdma_memtomem_dma2_stream0, HAL_DMA_FULL_TRANSFER, 100))){HAL_Delay(1000);};
 80008f6:	e003      	b.n	8000900 <main+0x134>
 80008f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008fc:	f001 f9ec 	bl	8001cd8 <HAL_Delay>
 8000900:	2264      	movs	r2, #100	; 0x64
 8000902:	2100      	movs	r1, #0
 8000904:	485b      	ldr	r0, [pc, #364]	; (8000a74 <main+0x2a8>)
 8000906:	f001 fc93 	bl	8002230 <HAL_DMA_PollForTransfer>
 800090a:	4603      	mov	r3, r0
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fe7b 	bl	8000608 <printStatus>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d1ef      	bne.n	80008f8 <main+0x12c>

	str_len = sprintf(str, "\r\n\r\nTesting Memcopy\r\n");
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	495c      	ldr	r1, [pc, #368]	; (8000a8c <main+0x2c0>)
 800091c:	4618      	mov	r0, r3
 800091e:	f004 f8e9 	bl	8004af4 <siprintf>
 8000922:	4603      	mov	r3, r0
 8000924:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8000928:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800092c:	1d39      	adds	r1, r7, #4
 800092e:	f04f 33ff 	mov.w	r3, #4294967295
 8000932:	484f      	ldr	r0, [pc, #316]	; (8000a70 <main+0x2a4>)
 8000934:	f003 fd37 	bl	80043a6 <HAL_UART_Transmit>

	if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK) {
 8000938:	484e      	ldr	r0, [pc, #312]	; (8000a74 <main+0x2a8>)
 800093a:	f001 fb03 	bl	8001f44 <HAL_DMA_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <main+0x17c>
		Error_Handler();
 8000944:	f000 faaa 	bl	8000e9c <Error_Handler>
	}
	printStatus(old_memCopy((uint32_t*)&screenBuff[8], (uint32_t*)&screenBuff[0], 2));//testingMemcopy
 8000948:	2202      	movs	r2, #2
 800094a:	494d      	ldr	r1, [pc, #308]	; (8000a80 <main+0x2b4>)
 800094c:	4850      	ldr	r0, [pc, #320]	; (8000a90 <main+0x2c4>)
 800094e:	f000 fc63 	bl	8001218 <old_memCopy>
 8000952:	4603      	mov	r3, r0
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fe57 	bl	8000608 <printStatus>
	printState(HAL_DMA_GetState(&hdma_memtomem_dma2_stream0));
 800095a:	4846      	ldr	r0, [pc, #280]	; (8000a74 <main+0x2a8>)
 800095c:	f001 ff26 	bl	80027ac <HAL_DMA_GetState>
 8000960:	4603      	mov	r3, r0
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff feb4 	bl	80006d0 <printState>
	dumpLine();
 8000968:	f7ff fe0c 	bl	8000584 <dumpLine>
	while(printStatus(HAL_DMA_PollForTransfer(&hdma_memtomem_dma2_stream0, HAL_DMA_FULL_TRANSFER, 100))){HAL_Delay(1000);};
 800096c:	e003      	b.n	8000976 <main+0x1aa>
 800096e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000972:	f001 f9b1 	bl	8001cd8 <HAL_Delay>
 8000976:	2264      	movs	r2, #100	; 0x64
 8000978:	2100      	movs	r1, #0
 800097a:	483e      	ldr	r0, [pc, #248]	; (8000a74 <main+0x2a8>)
 800097c:	f001 fc58 	bl	8002230 <HAL_DMA_PollForTransfer>
 8000980:	4603      	mov	r3, r0
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fe40 	bl	8000608 <printStatus>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d1ef      	bne.n	800096e <main+0x1a2>

	str_len = sprintf(str, "\r\n\r\nTesting Memset\r\n");
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	493d      	ldr	r1, [pc, #244]	; (8000a88 <main+0x2bc>)
 8000992:	4618      	mov	r0, r3
 8000994:	f004 f8ae 	bl	8004af4 <siprintf>
 8000998:	4603      	mov	r3, r0
 800099a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800099e:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80009a2:	1d39      	adds	r1, r7, #4
 80009a4:	f04f 33ff 	mov.w	r3, #4294967295
 80009a8:	4831      	ldr	r0, [pc, #196]	; (8000a70 <main+0x2a4>)
 80009aa:	f003 fcfc 	bl	80043a6 <HAL_UART_Transmit>

	if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK) {
 80009ae:	4831      	ldr	r0, [pc, #196]	; (8000a74 <main+0x2a8>)
 80009b0:	f001 fac8 	bl	8001f44 <HAL_DMA_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <main+0x1f2>
		Error_Handler();
 80009ba:	f000 fa6f 	bl	8000e9c <Error_Handler>
	}
	printStatus(old_memSet(0xff, (uint32_t*)&screenBuff[0], 2));//testingMemset
 80009be:	2202      	movs	r2, #2
 80009c0:	492f      	ldr	r1, [pc, #188]	; (8000a80 <main+0x2b4>)
 80009c2:	20ff      	movs	r0, #255	; 0xff
 80009c4:	f000 fc4c 	bl	8001260 <old_memSet>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fe1c 	bl	8000608 <printStatus>
	printState(HAL_DMA_GetState(&hdma_memtomem_dma2_stream0));
 80009d0:	4828      	ldr	r0, [pc, #160]	; (8000a74 <main+0x2a8>)
 80009d2:	f001 feeb 	bl	80027ac <HAL_DMA_GetState>
 80009d6:	4603      	mov	r3, r0
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fe79 	bl	80006d0 <printState>
	dumpLine();
 80009de:	f7ff fdd1 	bl	8000584 <dumpLine>
	while(printStatus(HAL_DMA_PollForTransfer(&hdma_memtomem_dma2_stream0, HAL_DMA_FULL_TRANSFER, 100))){HAL_Delay(1000);};
 80009e2:	e003      	b.n	80009ec <main+0x220>
 80009e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e8:	f001 f976 	bl	8001cd8 <HAL_Delay>
 80009ec:	2264      	movs	r2, #100	; 0x64
 80009ee:	2100      	movs	r1, #0
 80009f0:	4820      	ldr	r0, [pc, #128]	; (8000a74 <main+0x2a8>)
 80009f2:	f001 fc1d 	bl	8002230 <HAL_DMA_PollForTransfer>
 80009f6:	4603      	mov	r3, r0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fe05 	bl	8000608 <printStatus>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d1ef      	bne.n	80009e4 <main+0x218>

	str_len = sprintf(str, "\r\nDone\r\n");
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	4923      	ldr	r1, [pc, #140]	; (8000a94 <main+0x2c8>)
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f004 f873 	bl	8004af4 <siprintf>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8000a14:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8000a18:	1d39      	adds	r1, r7, #4
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1e:	4814      	ldr	r0, [pc, #80]	; (8000a70 <main+0x2a4>)
 8000a20:	f003 fcc1 	bl	80043a6 <HAL_UART_Transmit>

	vgaStart();
 8000a24:	f001 f870 	bl	8001b08 <vgaStart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	int lastLine = -100;
 8000a28:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8000a2c:	65bb      	str	r3, [r7, #88]	; 0x58
	while (1)
	{
		HAL_Delay(100);
 8000a2e:	2064      	movs	r0, #100	; 0x64
 8000a30:	f001 f952 	bl	8001cd8 <HAL_Delay>
		if(lastLine != lineCount){
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <main+0x2cc>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d0f7      	beq.n	8000a2e <main+0x262>
			lastLine = lineCount;
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <main+0x2cc>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	65bb      	str	r3, [r7, #88]	; 0x58
			str_len = sprintf(str, "Line %i\r\n", lineCount);
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <main+0x2cc>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	4914      	ldr	r1, [pc, #80]	; (8000a9c <main+0x2d0>)
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f004 f851 	bl	8004af4 <siprintf>
 8000a52:	4603      	mov	r3, r0
 8000a54:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
			HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8000a58:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8000a5c:	1d39      	adds	r1, r7, #4
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a62:	4803      	ldr	r0, [pc, #12]	; (8000a70 <main+0x2a4>)
 8000a64:	f003 fc9f 	bl	80043a6 <HAL_UART_Transmit>
		HAL_Delay(100);
 8000a68:	e7e1      	b.n	8000a2e <main+0x262>
 8000a6a:	bf00      	nop
 8000a6c:	080054fc 	.word	0x080054fc
 8000a70:	20000194 	.word	0x20000194
 8000a74:	200001d8 	.word	0x200001d8
 8000a78:	200000d4 	.word	0x200000d4
 8000a7c:	2000008c 	.word	0x2000008c
 8000a80:	200005b0 	.word	0x200005b0
 8000a84:	20000290 	.word	0x20000290
 8000a88:	0800550c 	.word	0x0800550c
 8000a8c:	08005524 	.word	0x08005524
 8000a90:	200005b8 	.word	0x200005b8
 8000a94:	0800553c 	.word	0x0800553c
 8000a98:	2000ffbc 	.word	0x2000ffbc
 8000a9c:	08005548 	.word	0x08005548

08000aa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b094      	sub	sp, #80	; 0x50
 8000aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa6:	f107 0320 	add.w	r3, r7, #32
 8000aaa:	2230      	movs	r2, #48	; 0x30
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f004 f818 	bl	8004ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab4:	f107 030c 	add.w	r3, r7, #12
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	4b29      	ldr	r3, [pc, #164]	; (8000b70 <SystemClock_Config+0xd0>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	4a28      	ldr	r2, [pc, #160]	; (8000b70 <SystemClock_Config+0xd0>)
 8000ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad4:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <SystemClock_Config+0xd0>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <SystemClock_Config+0xd4>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000aec:	4a21      	ldr	r2, [pc, #132]	; (8000b74 <SystemClock_Config+0xd4>)
 8000aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000af2:	6013      	str	r3, [r2, #0]
 8000af4:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <SystemClock_Config+0xd4>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b00:	2302      	movs	r3, #2
 8000b02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b04:	2301      	movs	r3, #1
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b08:	2310      	movs	r3, #16
 8000b0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b10:	2300      	movs	r3, #0
 8000b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b14:	2310      	movs	r3, #16
 8000b16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b18:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b1e:	2304      	movs	r3, #4
 8000b20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b22:	2307      	movs	r3, #7
 8000b24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b26:	f107 0320 	add.w	r3, r7, #32
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f002 f8d6 	bl	8002cdc <HAL_RCC_OscConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b36:	f000 f9b1 	bl	8000e9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3a:	230f      	movs	r3, #15
 8000b3c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b50:	f107 030c 	add.w	r3, r7, #12
 8000b54:	2102      	movs	r1, #2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f002 fb38 	bl	80031cc <HAL_RCC_ClockConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b62:	f000 f99b 	bl	8000e9c <Error_Handler>
  }
}
 8000b66:	bf00      	nop
 8000b68:	3750      	adds	r7, #80	; 0x50
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40007000 	.word	0x40007000

08000b78 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08e      	sub	sp, #56	; 0x38
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8c:	f107 0320 	add.w	r3, r7, #32
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
 8000ba4:	615a      	str	r2, [r3, #20]
 8000ba6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000ba8:	4b2c      	ldr	r3, [pc, #176]	; (8000c5c <MX_TIM5_Init+0xe4>)
 8000baa:	4a2d      	ldr	r2, [pc, #180]	; (8000c60 <MX_TIM5_Init+0xe8>)
 8000bac:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8000bae:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <MX_TIM5_Init+0xe4>)
 8000bb0:	2253      	movs	r2, #83	; 0x53
 8000bb2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb4:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <MX_TIM5_Init+0xe4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8000bba:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <MX_TIM5_Init+0xe4>)
 8000bbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bc0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc2:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <MX_TIM5_Init+0xe4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bc8:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <MX_TIM5_Init+0xe4>)
 8000bca:	2280      	movs	r2, #128	; 0x80
 8000bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000bce:	4823      	ldr	r0, [pc, #140]	; (8000c5c <MX_TIM5_Init+0xe4>)
 8000bd0:	f002 fd1c 	bl	800360c <HAL_TIM_Base_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8000bda:	f000 f95f 	bl	8000e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000be4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000be8:	4619      	mov	r1, r3
 8000bea:	481c      	ldr	r0, [pc, #112]	; (8000c5c <MX_TIM5_Init+0xe4>)
 8000bec:	f002 ff8c 	bl	8003b08 <HAL_TIM_ConfigClockSource>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8000bf6:	f000 f951 	bl	8000e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000bfa:	4818      	ldr	r0, [pc, #96]	; (8000c5c <MX_TIM5_Init+0xe4>)
 8000bfc:	f002 fdb8 	bl	8003770 <HAL_TIM_PWM_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000c06:	f000 f949 	bl	8000e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000c12:	f107 0320 	add.w	r3, r7, #32
 8000c16:	4619      	mov	r1, r3
 8000c18:	4810      	ldr	r0, [pc, #64]	; (8000c5c <MX_TIM5_Init+0xe4>)
 8000c1a:	f003 fb09 	bl	8004230 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000c24:	f000 f93a 	bl	8000e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c28:	2360      	movs	r3, #96	; 0x60
 8000c2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8000c2c:	2364      	movs	r3, #100	; 0x64
 8000c2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000c34:	2304      	movs	r3, #4
 8000c36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	2204      	movs	r2, #4
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4807      	ldr	r0, [pc, #28]	; (8000c5c <MX_TIM5_Init+0xe4>)
 8000c40:	f002 fea0 	bl	8003984 <HAL_TIM_PWM_ConfigChannel>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000c4a:	f000 f927 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000c4e:	4803      	ldr	r0, [pc, #12]	; (8000c5c <MX_TIM5_Init+0xe4>)
 8000c50:	f000 f9da 	bl	8001008 <HAL_TIM_MspPostInit>

}
 8000c54:	bf00      	nop
 8000c56:	3738      	adds	r7, #56	; 0x38
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	2000008c 	.word	0x2000008c
 8000c60:	40000c00 	.word	0x40000c00

08000c64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_USART2_UART_Init+0x4c>)
 8000c6a:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <MX_USART2_UART_Init+0x50>)
 8000c6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <MX_USART2_UART_Init+0x4c>)
 8000c70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <MX_USART2_UART_Init+0x4c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <MX_USART2_UART_Init+0x4c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <MX_USART2_UART_Init+0x4c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <MX_USART2_UART_Init+0x4c>)
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <MX_USART2_UART_Init+0x4c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <MX_USART2_UART_Init+0x4c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_USART2_UART_Init+0x4c>)
 8000c9c:	f003 fb36 	bl	800430c <HAL_UART_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ca6:	f000 f8f9 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000194 	.word	0x20000194
 8000cb4:	40004400 	.word	0x40004400

08000cb8 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	4b31      	ldr	r3, [pc, #196]	; (8000d88 <MX_DMA_Init+0xd0>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a30      	ldr	r2, [pc, #192]	; (8000d88 <MX_DMA_Init+0xd0>)
 8000cc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b2e      	ldr	r3, [pc, #184]	; (8000d88 <MX_DMA_Init+0xd0>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	603b      	str	r3, [r7, #0]
 8000cde:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <MX_DMA_Init+0xd0>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a29      	ldr	r2, [pc, #164]	; (8000d88 <MX_DMA_Init+0xd0>)
 8000ce4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b27      	ldr	r3, [pc, #156]	; (8000d88 <MX_DMA_Init+0xd0>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000cf6:	4b25      	ldr	r3, [pc, #148]	; (8000d8c <MX_DMA_Init+0xd4>)
 8000cf8:	4a25      	ldr	r2, [pc, #148]	; (8000d90 <MX_DMA_Init+0xd8>)
 8000cfa:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000cfc:	4b23      	ldr	r3, [pc, #140]	; (8000d8c <MX_DMA_Init+0xd4>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000d02:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <MX_DMA_Init+0xd4>)
 8000d04:	2280      	movs	r2, #128	; 0x80
 8000d06:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000d08:	4b20      	ldr	r3, [pc, #128]	; (8000d8c <MX_DMA_Init+0xd4>)
 8000d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d0e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000d10:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <MX_DMA_Init+0xd4>)
 8000d12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d16:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d18:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <MX_DMA_Init+0xd4>)
 8000d1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d1e:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d20:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <MX_DMA_Init+0xd4>)
 8000d22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d26:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000d28:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <MX_DMA_Init+0xd4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <MX_DMA_Init+0xd4>)
 8000d30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d34:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <MX_DMA_Init+0xd4>)
 8000d38:	2204      	movs	r2, #4
 8000d3a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <MX_DMA_Init+0xd4>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000d42:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <MX_DMA_Init+0xd4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000d48:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <MX_DMA_Init+0xd4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000d4e:	480f      	ldr	r0, [pc, #60]	; (8000d8c <MX_DMA_Init+0xd4>)
 8000d50:	f001 f8f8 	bl	8001f44 <HAL_DMA_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_DMA_Init+0xa6>
  {
    Error_Handler( );
 8000d5a:	f000 f89f 	bl	8000e9c <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2100      	movs	r1, #0
 8000d62:	200f      	movs	r0, #15
 8000d64:	f001 f8b7 	bl	8001ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d68:	200f      	movs	r0, #15
 8000d6a:	f001 f8d0 	bl	8001f0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	2011      	movs	r0, #17
 8000d74:	f001 f8af 	bl	8001ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d78:	2011      	movs	r0, #17
 8000d7a:	f001 f8c8 	bl	8001f0e <HAL_NVIC_EnableIRQ>

}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	200001d8 	.word	0x200001d8
 8000d90:	40026410 	.word	0x40026410

08000d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	4b38      	ldr	r3, [pc, #224]	; (8000e90 <MX_GPIO_Init+0xfc>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a37      	ldr	r2, [pc, #220]	; (8000e90 <MX_GPIO_Init+0xfc>)
 8000db4:	f043 0304 	orr.w	r3, r3, #4
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b35      	ldr	r3, [pc, #212]	; (8000e90 <MX_GPIO_Init+0xfc>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0304 	and.w	r3, r3, #4
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	4b31      	ldr	r3, [pc, #196]	; (8000e90 <MX_GPIO_Init+0xfc>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a30      	ldr	r2, [pc, #192]	; (8000e90 <MX_GPIO_Init+0xfc>)
 8000dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b2e      	ldr	r3, [pc, #184]	; (8000e90 <MX_GPIO_Init+0xfc>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	4b2a      	ldr	r3, [pc, #168]	; (8000e90 <MX_GPIO_Init+0xfc>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a29      	ldr	r2, [pc, #164]	; (8000e90 <MX_GPIO_Init+0xfc>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b27      	ldr	r3, [pc, #156]	; (8000e90 <MX_GPIO_Init+0xfc>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	4b23      	ldr	r3, [pc, #140]	; (8000e90 <MX_GPIO_Init+0xfc>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a22      	ldr	r2, [pc, #136]	; (8000e90 <MX_GPIO_Init+0xfc>)
 8000e08:	f043 0302 	orr.w	r3, r3, #2
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b20      	ldr	r3, [pc, #128]	; (8000e90 <MX_GPIO_Init+0xfc>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, vgaPin0_B0_Pin|vgaPin1_B1_Pin|vgaPin2_B2_Pin|vgaPin3_B3_Pin
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8000e20:	481c      	ldr	r0, [pc, #112]	; (8000e94 <MX_GPIO_Init+0x100>)
 8000e22:	f001 ff41 	bl	8002ca8 <HAL_GPIO_WritePin>
                          |vgaPin4_G0_Pin|vgaPin5_G1_Pin|vgaPin6_G2_Pin|vgaPin7_G3_Pin
                          |vgaPin8_R0_Pin|vgaPin9_R1_Pin|vgaPin10_R2_Pin|vgaPin11_R3_Pin
                          |vgaPin12_Hsync_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, vgaPin13_Vsync_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2121      	movs	r1, #33	; 0x21
 8000e2a:	481b      	ldr	r0, [pc, #108]	; (8000e98 <MX_GPIO_Init+0x104>)
 8000e2c:	f001 ff3c 	bl	8002ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e36:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	4813      	ldr	r0, [pc, #76]	; (8000e94 <MX_GPIO_Init+0x100>)
 8000e48:	f001 fdaa 	bl	80029a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : vgaPin0_B0_Pin vgaPin1_B1_Pin vgaPin2_B2_Pin vgaPin3_B3_Pin
                           vgaPin4_G0_Pin vgaPin5_G1_Pin vgaPin6_G2_Pin vgaPin7_G3_Pin
                           vgaPin8_R0_Pin vgaPin9_R1_Pin vgaPin10_R2_Pin vgaPin11_R3_Pin
                           vgaPin12_Hsync_Pin */
  GPIO_InitStruct.Pin = vgaPin0_B0_Pin|vgaPin1_B1_Pin|vgaPin2_B2_Pin|vgaPin3_B3_Pin
 8000e4c:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000e50:	617b      	str	r3, [r7, #20]
                          |vgaPin4_G0_Pin|vgaPin5_G1_Pin|vgaPin6_G2_Pin|vgaPin7_G3_Pin
                          |vgaPin8_R0_Pin|vgaPin9_R1_Pin|vgaPin10_R2_Pin|vgaPin11_R3_Pin
                          |vgaPin12_Hsync_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	480b      	ldr	r0, [pc, #44]	; (8000e94 <MX_GPIO_Init+0x100>)
 8000e66:	f001 fd9b 	bl	80029a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : vgaPin13_Vsync_Pin LD2_Pin */
  GPIO_InitStruct.Pin = vgaPin13_Vsync_Pin|LD2_Pin;
 8000e6a:	2321      	movs	r3, #33	; 0x21
 8000e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_GPIO_Init+0x104>)
 8000e82:	f001 fd8d 	bl	80029a0 <HAL_GPIO_Init>

}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	; 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020800 	.word	0x40020800
 8000e98:	40020000 	.word	0x40020000

08000e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea0:	b672      	cpsid	i
}
 8000ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <Error_Handler+0x8>
	...

08000ea8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <HAL_MspInit+0x4c>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ef4 <HAL_MspInit+0x4c>)
 8000eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <HAL_MspInit+0x4c>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	603b      	str	r3, [r7, #0]
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <HAL_MspInit+0x4c>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <HAL_MspInit+0x4c>)
 8000ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_MspInit+0x4c>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	603b      	str	r3, [r7, #0]
 8000ee4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ee6:	2007      	movs	r0, #7
 8000ee8:	f000 ffea 	bl	8001ec0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40023800 	.word	0x40023800

08000ef8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a3a      	ldr	r2, [pc, #232]	; (8000ff0 <HAL_TIM_Base_MspInit+0xf8>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d16d      	bne.n	8000fe6 <HAL_TIM_Base_MspInit+0xee>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4b39      	ldr	r3, [pc, #228]	; (8000ff4 <HAL_TIM_Base_MspInit+0xfc>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	4a38      	ldr	r2, [pc, #224]	; (8000ff4 <HAL_TIM_Base_MspInit+0xfc>)
 8000f14:	f043 0308 	orr.w	r3, r3, #8
 8000f18:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1a:	4b36      	ldr	r3, [pc, #216]	; (8000ff4 <HAL_TIM_Base_MspInit+0xfc>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f003 0308 	and.w	r3, r3, #8
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 DMA Init */
    /* TIM5_UP Init */
    hdma_tim5_up.Instance = DMA1_Stream6;
 8000f26:	4b34      	ldr	r3, [pc, #208]	; (8000ff8 <HAL_TIM_Base_MspInit+0x100>)
 8000f28:	4a34      	ldr	r2, [pc, #208]	; (8000ffc <HAL_TIM_Base_MspInit+0x104>)
 8000f2a:	601a      	str	r2, [r3, #0]
    hdma_tim5_up.Init.Channel = DMA_CHANNEL_6;
 8000f2c:	4b32      	ldr	r3, [pc, #200]	; (8000ff8 <HAL_TIM_Base_MspInit+0x100>)
 8000f2e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000f32:	605a      	str	r2, [r3, #4]
    hdma_tim5_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f34:	4b30      	ldr	r3, [pc, #192]	; (8000ff8 <HAL_TIM_Base_MspInit+0x100>)
 8000f36:	2240      	movs	r2, #64	; 0x40
 8000f38:	609a      	str	r2, [r3, #8]
    hdma_tim5_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f3a:	4b2f      	ldr	r3, [pc, #188]	; (8000ff8 <HAL_TIM_Base_MspInit+0x100>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	60da      	str	r2, [r3, #12]
    hdma_tim5_up.Init.MemInc = DMA_MINC_ENABLE;
 8000f40:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <HAL_TIM_Base_MspInit+0x100>)
 8000f42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f46:	611a      	str	r2, [r3, #16]
    hdma_tim5_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f48:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <HAL_TIM_Base_MspInit+0x100>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	615a      	str	r2, [r3, #20]
    hdma_tim5_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f4e:	4b2a      	ldr	r3, [pc, #168]	; (8000ff8 <HAL_TIM_Base_MspInit+0x100>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
    hdma_tim5_up.Init.Mode = DMA_CIRCULAR;
 8000f54:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <HAL_TIM_Base_MspInit+0x100>)
 8000f56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f5a:	61da      	str	r2, [r3, #28]
    hdma_tim5_up.Init.Priority = DMA_PRIORITY_HIGH;
 8000f5c:	4b26      	ldr	r3, [pc, #152]	; (8000ff8 <HAL_TIM_Base_MspInit+0x100>)
 8000f5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f62:	621a      	str	r2, [r3, #32]
    hdma_tim5_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f64:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <HAL_TIM_Base_MspInit+0x100>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_up) != HAL_OK)
 8000f6a:	4823      	ldr	r0, [pc, #140]	; (8000ff8 <HAL_TIM_Base_MspInit+0x100>)
 8000f6c:	f000 ffea 	bl	8001f44 <HAL_DMA_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8000f76:	f7ff ff91 	bl	8000e9c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim5_up);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a1e      	ldr	r2, [pc, #120]	; (8000ff8 <HAL_TIM_Base_MspInit+0x100>)
 8000f7e:	621a      	str	r2, [r3, #32]
 8000f80:	4a1d      	ldr	r2, [pc, #116]	; (8000ff8 <HAL_TIM_Base_MspInit+0x100>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM5_CH2 Init */
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8000f86:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <HAL_TIM_Base_MspInit+0x108>)
 8000f88:	4a1e      	ldr	r2, [pc, #120]	; (8001004 <HAL_TIM_Base_MspInit+0x10c>)
 8000f8a:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <HAL_TIM_Base_MspInit+0x108>)
 8000f8e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000f92:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f94:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <HAL_TIM_Base_MspInit+0x108>)
 8000f96:	2240      	movs	r2, #64	; 0x40
 8000f98:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f9a:	4b19      	ldr	r3, [pc, #100]	; (8001000 <HAL_TIM_Base_MspInit+0x108>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000fa0:	4b17      	ldr	r3, [pc, #92]	; (8001000 <HAL_TIM_Base_MspInit+0x108>)
 8000fa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fa6:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fa8:	4b15      	ldr	r3, [pc, #84]	; (8001000 <HAL_TIM_Base_MspInit+0x108>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fae:	4b14      	ldr	r3, [pc, #80]	; (8001000 <HAL_TIM_Base_MspInit+0x108>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_CIRCULAR;
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <HAL_TIM_Base_MspInit+0x108>)
 8000fb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fba:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8000fbc:	4b10      	ldr	r3, [pc, #64]	; (8001000 <HAL_TIM_Base_MspInit+0x108>)
 8000fbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fc2:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <HAL_TIM_Base_MspInit+0x108>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8000fca:	480d      	ldr	r0, [pc, #52]	; (8001000 <HAL_TIM_Base_MspInit+0x108>)
 8000fcc:	f000 ffba 	bl	8001f44 <HAL_DMA_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_TIM_Base_MspInit+0xe2>
    {
      Error_Handler();
 8000fd6:	f7ff ff61 	bl	8000e9c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a08      	ldr	r2, [pc, #32]	; (8001000 <HAL_TIM_Base_MspInit+0x108>)
 8000fde:	629a      	str	r2, [r3, #40]	; 0x28
 8000fe0:	4a07      	ldr	r2, [pc, #28]	; (8001000 <HAL_TIM_Base_MspInit+0x108>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40000c00 	.word	0x40000c00
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	200000d4 	.word	0x200000d4
 8000ffc:	400260a0 	.word	0x400260a0
 8001000:	20000134 	.word	0x20000134
 8001004:	40026070 	.word	0x40026070

08001008 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a12      	ldr	r2, [pc, #72]	; (8001070 <HAL_TIM_MspPostInit+0x68>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d11d      	bne.n	8001066 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <HAL_TIM_MspPostInit+0x6c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a10      	ldr	r2, [pc, #64]	; (8001074 <HAL_TIM_MspPostInit+0x6c>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <HAL_TIM_MspPostInit+0x6c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001046:	2302      	movs	r3, #2
 8001048:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001056:	2302      	movs	r3, #2
 8001058:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <HAL_TIM_MspPostInit+0x70>)
 8001062:	f001 fc9d 	bl	80029a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001066:	bf00      	nop
 8001068:	3720      	adds	r7, #32
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40000c00 	.word	0x40000c00
 8001074:	40023800 	.word	0x40023800
 8001078:	40020000 	.word	0x40020000

0800107c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a19      	ldr	r2, [pc, #100]	; (8001100 <HAL_UART_MspInit+0x84>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d12b      	bne.n	80010f6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	4b18      	ldr	r3, [pc, #96]	; (8001104 <HAL_UART_MspInit+0x88>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	4a17      	ldr	r2, [pc, #92]	; (8001104 <HAL_UART_MspInit+0x88>)
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	6413      	str	r3, [r2, #64]	; 0x40
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <HAL_UART_MspInit+0x88>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <HAL_UART_MspInit+0x88>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a10      	ldr	r2, [pc, #64]	; (8001104 <HAL_UART_MspInit+0x88>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <HAL_UART_MspInit+0x88>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010d6:	230c      	movs	r3, #12
 80010d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010e6:	2307      	movs	r3, #7
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4619      	mov	r1, r3
 80010f0:	4805      	ldr	r0, [pc, #20]	; (8001108 <HAL_UART_MspInit+0x8c>)
 80010f2:	f001 fc55 	bl	80029a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010f6:	bf00      	nop
 80010f8:	3728      	adds	r7, #40	; 0x28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40004400 	.word	0x40004400
 8001104:	40023800 	.word	0x40023800
 8001108:	40020000 	.word	0x40020000

0800110c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <NMI_Handler+0x4>

08001112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <HardFault_Handler+0x4>

08001118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <MemManage_Handler+0x4>

0800111e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <BusFault_Handler+0x4>

08001124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <UsageFault_Handler+0x4>

0800112a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001158:	f000 fd9e 	bl	8001c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8001164:	4802      	ldr	r0, [pc, #8]	; (8001170 <DMA1_Stream4_IRQHandler+0x10>)
 8001166:	f001 f943 	bl	80023f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000134 	.word	0x20000134

08001174 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_up);
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <DMA1_Stream6_IRQHandler+0x10>)
 800117a:	f001 f939 	bl	80023f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200000d4 	.word	0x200000d4

08001188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001190:	4a14      	ldr	r2, [pc, #80]	; (80011e4 <_sbrk+0x5c>)
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <_sbrk+0x60>)
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <_sbrk+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d102      	bne.n	80011aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <_sbrk+0x64>)
 80011a6:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <_sbrk+0x68>)
 80011a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <_sbrk+0x64>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d207      	bcs.n	80011c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b8:	f003 fc6a 	bl	8004a90 <__errno>
 80011bc:	4603      	mov	r3, r0
 80011be:	220c      	movs	r2, #12
 80011c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	e009      	b.n	80011dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <_sbrk+0x64>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ce:	4b07      	ldr	r3, [pc, #28]	; (80011ec <_sbrk+0x64>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	4a05      	ldr	r2, [pc, #20]	; (80011ec <_sbrk+0x64>)
 80011d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011da:	68fb      	ldr	r3, [r7, #12]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20018000 	.word	0x20018000
 80011e8:	00000400 	.word	0x00000400
 80011ec:	2000028c 	.word	0x2000028c
 80011f0:	2000fff0 	.word	0x2000fff0

080011f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <SystemInit+0x20>)
 80011fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011fe:	4a05      	ldr	r2, [pc, #20]	; (8001214 <SystemInit+0x20>)
 8001200:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001204:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <old_memCopy>:
 *
 * @param DstAddress copies to destination address incrementing
 *
 * @param DataLength number of unit32_t to be copied
 */
HAL_StatusTypeDef old_memCopy(uint32_t * SrcAddress, uint32_t * DstAddress, uint32_t DataLength){
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]

	memCopyDMA->Init.PeriphInc = DMA_PINC_ENABLE;
 8001224:	4b0d      	ldr	r3, [pc, #52]	; (800125c <old_memCopy+0x44>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f44f 7200 	mov.w	r2, #512	; 0x200
 800122c:	60da      	str	r2, [r3, #12]
	if (HAL_DMA_Init(memCopyDMA) != HAL_OK) {
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <old_memCopy+0x44>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f000 fe86 	bl	8001f44 <HAL_DMA_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <old_memCopy+0x2a>
		Error_Handler();
 800123e:	f7ff fe2d 	bl	8000e9c <Error_Handler>
	}
	//SET_BIT(vgaCircularDMA.Instance->CR, DMA_MINC_ENABLE);
	return HAL_DMA_Start_IT(memCopyDMA, (uint32_t)SrcAddress, (uint32_t)DstAddress, DataLength);
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <old_memCopy+0x44>)
 8001244:	6818      	ldr	r0, [r3, #0]
 8001246:	68f9      	ldr	r1, [r7, #12]
 8001248:	68ba      	ldr	r2, [r7, #8]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f000 ff28 	bl	80020a0 <HAL_DMA_Start_IT>
 8001250:	4603      	mov	r3, r0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2000ffb8 	.word	0x2000ffb8

08001260 <old_memSet>:
 *
 * @param DstAddress destination address incrementing
 *
 * @param DataLength number of unit32_t to be written
 */
HAL_StatusTypeDef old_memSet(uint32_t value, uint32_t * DstAddress, uint32_t DataLength){
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
	static volatile uint32_t setVal = 0;
	setVal = value;
 800126c:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <old_memSet+0x48>)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6013      	str	r3, [r2, #0]
	memCopyDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <old_memSet+0x4c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
	if (HAL_DMA_Init(memCopyDMA) != HAL_OK) {
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <old_memSet+0x4c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fe60 	bl	8001f44 <HAL_DMA_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <old_memSet+0x2e>
		Error_Handler();
 800128a:	f7ff fe07 	bl	8000e9c <Error_Handler>
	}
	//CLEAR_BIT(vgaCircularDMA.Instance->CR, DMA_MINC_ENABLE);
	return HAL_DMA_Start_IT(memCopyDMA, (uint32_t)&setVal, (uint32_t)DstAddress, DataLength);
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <old_memSet+0x4c>)
 8001290:	6818      	ldr	r0, [r3, #0]
 8001292:	4905      	ldr	r1, [pc, #20]	; (80012a8 <old_memSet+0x48>)
 8001294:	68ba      	ldr	r2, [r7, #8]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f000 ff02 	bl	80020a0 <HAL_DMA_Start_IT>
 800129c:	4603      	mov	r3, r0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	2000ffd8 	.word	0x2000ffd8
 80012ac:	2000ffb8 	.word	0x2000ffb8

080012b0 <vga_DMA_XFER_CPLT_CB_ID>:


//HAL_DMA_XFER_CPLT_CB_ID         = 0x00U,  /*!< Full transfer     */
void vga_DMA_XFER_CPLT_CB_ID(){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b096      	sub	sp, #88	; 0x58
 80012b4:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 80012b6:	2300      	movs	r3, #0
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	224d      	movs	r2, #77	; 0x4d
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f003 fc0f 	bl	8004ae4 <memset>
	int str_len = sprintf(str, "Full transfer\r\n");
 80012c6:	463b      	mov	r3, r7
 80012c8:	4908      	ldr	r1, [pc, #32]	; (80012ec <vga_DMA_XFER_CPLT_CB_ID+0x3c>)
 80012ca:	4618      	mov	r0, r3
 80012cc:	f003 fc12 	bl	8004af4 <siprintf>
 80012d0:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <vga_DMA_XFER_CPLT_CB_ID+0x40>)
 80012d4:	6818      	ldr	r0, [r3, #0]
 80012d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012d8:	b29a      	uxth	r2, r3
 80012da:	4639      	mov	r1, r7
 80012dc:	f04f 33ff 	mov.w	r3, #4294967295
 80012e0:	f003 f861 	bl	80043a6 <HAL_UART_Transmit>
}
 80012e4:	bf00      	nop
 80012e6:	3758      	adds	r7, #88	; 0x58
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	08005554 	.word	0x08005554
 80012f0:	2000ffd4 	.word	0x2000ffd4

080012f4 <vga_DMA_XFER_HALFCPLT_CB_ID>:
//HAL_DMA_XFER_HALFCPLT_CB_ID     = 0x01U,  /*!< Half Transfer     */
void vga_DMA_XFER_HALFCPLT_CB_ID(){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b096      	sub	sp, #88	; 0x58
 80012f8:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 80012fa:	2300      	movs	r3, #0
 80012fc:	603b      	str	r3, [r7, #0]
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	224d      	movs	r2, #77	; 0x4d
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f003 fbed 	bl	8004ae4 <memset>
	int str_len = sprintf(str, "Half Transfer\r\n");
 800130a:	463b      	mov	r3, r7
 800130c:	4908      	ldr	r1, [pc, #32]	; (8001330 <vga_DMA_XFER_HALFCPLT_CB_ID+0x3c>)
 800130e:	4618      	mov	r0, r3
 8001310:	f003 fbf0 	bl	8004af4 <siprintf>
 8001314:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8001316:	4b07      	ldr	r3, [pc, #28]	; (8001334 <vga_DMA_XFER_HALFCPLT_CB_ID+0x40>)
 8001318:	6818      	ldr	r0, [r3, #0]
 800131a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800131c:	b29a      	uxth	r2, r3
 800131e:	4639      	mov	r1, r7
 8001320:	f04f 33ff 	mov.w	r3, #4294967295
 8001324:	f003 f83f 	bl	80043a6 <HAL_UART_Transmit>
}
 8001328:	bf00      	nop
 800132a:	3758      	adds	r7, #88	; 0x58
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	08005564 	.word	0x08005564
 8001334:	2000ffd4 	.word	0x2000ffd4

08001338 <vga_DMA_XFER_M1CPLT_CB_ID>:
//HAL_DMA_XFER_M1CPLT_CB_ID       = 0x02U,  /*!< M1 Full Transfer  */
void vga_DMA_XFER_M1CPLT_CB_ID(){
 8001338:	b580      	push	{r7, lr}
 800133a:	b096      	sub	sp, #88	; 0x58
 800133c:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 800133e:	2300      	movs	r3, #0
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	224d      	movs	r2, #77	; 0x4d
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f003 fbcb 	bl	8004ae4 <memset>
	int str_len = sprintf(str, "M1 Full Transfer\r\n");
 800134e:	463b      	mov	r3, r7
 8001350:	4908      	ldr	r1, [pc, #32]	; (8001374 <vga_DMA_XFER_M1CPLT_CB_ID+0x3c>)
 8001352:	4618      	mov	r0, r3
 8001354:	f003 fbce 	bl	8004af4 <siprintf>
 8001358:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <vga_DMA_XFER_M1CPLT_CB_ID+0x40>)
 800135c:	6818      	ldr	r0, [r3, #0]
 800135e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001360:	b29a      	uxth	r2, r3
 8001362:	4639      	mov	r1, r7
 8001364:	f04f 33ff 	mov.w	r3, #4294967295
 8001368:	f003 f81d 	bl	80043a6 <HAL_UART_Transmit>
}
 800136c:	bf00      	nop
 800136e:	3758      	adds	r7, #88	; 0x58
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	08005574 	.word	0x08005574
 8001378:	2000ffd4 	.word	0x2000ffd4

0800137c <vga_DMA_XFER_M1HALFCPLT_CB_ID>:
//HAL_DMA_XFER_M1HALFCPLT_CB_ID   = 0x03U,  /*!< M1 Half Transfer  */
void vga_DMA_XFER_M1HALFCPLT_CB_ID(){
 800137c:	b580      	push	{r7, lr}
 800137e:	b096      	sub	sp, #88	; 0x58
 8001380:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 8001382:	2300      	movs	r3, #0
 8001384:	603b      	str	r3, [r7, #0]
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	224d      	movs	r2, #77	; 0x4d
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f003 fba9 	bl	8004ae4 <memset>
	int str_len = sprintf(str, "M1 Half Transfer\r\n");
 8001392:	463b      	mov	r3, r7
 8001394:	4908      	ldr	r1, [pc, #32]	; (80013b8 <vga_DMA_XFER_M1HALFCPLT_CB_ID+0x3c>)
 8001396:	4618      	mov	r0, r3
 8001398:	f003 fbac 	bl	8004af4 <siprintf>
 800139c:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800139e:	4b07      	ldr	r3, [pc, #28]	; (80013bc <vga_DMA_XFER_M1HALFCPLT_CB_ID+0x40>)
 80013a0:	6818      	ldr	r0, [r3, #0]
 80013a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	4639      	mov	r1, r7
 80013a8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ac:	f002 fffb 	bl	80043a6 <HAL_UART_Transmit>
}
 80013b0:	bf00      	nop
 80013b2:	3758      	adds	r7, #88	; 0x58
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	08005588 	.word	0x08005588
 80013bc:	2000ffd4 	.word	0x2000ffd4

080013c0 <vga_DMA_XFER_ERROR_CB_ID>:
//HAL_DMA_XFER_ERROR_CB_ID        = 0x04U,  /*!< Error             */
void vga_DMA_XFER_ERROR_CB_ID(){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b09a      	sub	sp, #104	; 0x68
 80013c4:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	224d      	movs	r2, #77	; 0x4d
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f003 fb86 	bl	8004ae4 <memset>
	char * err = "Default";
 80013d8:	4b57      	ldr	r3, [pc, #348]	; (8001538 <vga_DMA_XFER_ERROR_CB_ID+0x178>)
 80013da:	667b      	str	r3, [r7, #100]	; 0x64
	uint32_t errorCode = HAL_DMA_GetError(vgaCircularDMA);
 80013dc:	4b57      	ldr	r3, [pc, #348]	; (800153c <vga_DMA_XFER_ERROR_CB_ID+0x17c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f001 f9f1 	bl	80027c8 <HAL_DMA_GetError>
 80013e6:	6638      	str	r0, [r7, #96]	; 0x60
	if(errorCode == HAL_DMA_ERROR_NONE){
 80013e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f040 809b 	bne.w	8001526 <vga_DMA_XFER_ERROR_CB_ID+0x166>
		int str_len = sprintf(str, "DMA %s\r\n", "No error");
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	4a53      	ldr	r2, [pc, #332]	; (8001540 <vga_DMA_XFER_ERROR_CB_ID+0x180>)
 80013f4:	4953      	ldr	r1, [pc, #332]	; (8001544 <vga_DMA_XFER_ERROR_CB_ID+0x184>)
 80013f6:	4618      	mov	r0, r3
 80013f8:	f003 fb7c 	bl	8004af4 <siprintf>
 80013fc:	65f8      	str	r0, [r7, #92]	; 0x5c
		HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80013fe:	4b52      	ldr	r3, [pc, #328]	; (8001548 <vga_DMA_XFER_ERROR_CB_ID+0x188>)
 8001400:	6818      	ldr	r0, [r3, #0]
 8001402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001404:	b29a      	uxth	r2, r3
 8001406:	1d39      	adds	r1, r7, #4
 8001408:	f04f 33ff 	mov.w	r3, #4294967295
 800140c:	f002 ffcb 	bl	80043a6 <HAL_UART_Transmit>
	}
	while(errorCode){
 8001410:	e089      	b.n	8001526 <vga_DMA_XFER_ERROR_CB_ID+0x166>
		switch(errorCode){
 8001412:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001418:	d06d      	beq.n	80014f6 <vga_DMA_XFER_ERROR_CB_ID+0x136>
 800141a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800141c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001420:	d86c      	bhi.n	80014fc <vga_DMA_XFER_ERROR_CB_ID+0x13c>
 8001422:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001424:	2b80      	cmp	r3, #128	; 0x80
 8001426:	d063      	beq.n	80014f0 <vga_DMA_XFER_ERROR_CB_ID+0x130>
 8001428:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800142a:	2b80      	cmp	r3, #128	; 0x80
 800142c:	d866      	bhi.n	80014fc <vga_DMA_XFER_ERROR_CB_ID+0x13c>
 800142e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001430:	2b20      	cmp	r3, #32
 8001432:	d847      	bhi.n	80014c4 <vga_DMA_XFER_ERROR_CB_ID+0x104>
 8001434:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001436:	2b20      	cmp	r3, #32
 8001438:	d860      	bhi.n	80014fc <vga_DMA_XFER_ERROR_CB_ID+0x13c>
 800143a:	a201      	add	r2, pc, #4	; (adr r2, 8001440 <vga_DMA_XFER_ERROR_CB_ID+0x80>)
 800143c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001440:	080014cd 	.word	0x080014cd
 8001444:	080014d3 	.word	0x080014d3
 8001448:	080014d9 	.word	0x080014d9
 800144c:	080014fd 	.word	0x080014fd
 8001450:	080014df 	.word	0x080014df
 8001454:	080014fd 	.word	0x080014fd
 8001458:	080014fd 	.word	0x080014fd
 800145c:	080014fd 	.word	0x080014fd
 8001460:	080014fd 	.word	0x080014fd
 8001464:	080014fd 	.word	0x080014fd
 8001468:	080014fd 	.word	0x080014fd
 800146c:	080014fd 	.word	0x080014fd
 8001470:	080014fd 	.word	0x080014fd
 8001474:	080014fd 	.word	0x080014fd
 8001478:	080014fd 	.word	0x080014fd
 800147c:	080014fd 	.word	0x080014fd
 8001480:	080014fd 	.word	0x080014fd
 8001484:	080014fd 	.word	0x080014fd
 8001488:	080014fd 	.word	0x080014fd
 800148c:	080014fd 	.word	0x080014fd
 8001490:	080014fd 	.word	0x080014fd
 8001494:	080014fd 	.word	0x080014fd
 8001498:	080014fd 	.word	0x080014fd
 800149c:	080014fd 	.word	0x080014fd
 80014a0:	080014fd 	.word	0x080014fd
 80014a4:	080014fd 	.word	0x080014fd
 80014a8:	080014fd 	.word	0x080014fd
 80014ac:	080014fd 	.word	0x080014fd
 80014b0:	080014fd 	.word	0x080014fd
 80014b4:	080014fd 	.word	0x080014fd
 80014b8:	080014fd 	.word	0x080014fd
 80014bc:	080014fd 	.word	0x080014fd
 80014c0:	080014e5 	.word	0x080014e5
 80014c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014c6:	2b40      	cmp	r3, #64	; 0x40
 80014c8:	d00f      	beq.n	80014ea <vga_DMA_XFER_ERROR_CB_ID+0x12a>
 80014ca:	e017      	b.n	80014fc <vga_DMA_XFER_ERROR_CB_ID+0x13c>
		case HAL_DMA_ERROR_NONE            : err = "No error";break;    /*!< No error                               */
 80014cc:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <vga_DMA_XFER_ERROR_CB_ID+0x180>)
 80014ce:	667b      	str	r3, [r7, #100]	; 0x64
 80014d0:	e014      	b.n	80014fc <vga_DMA_XFER_ERROR_CB_ID+0x13c>
		case HAL_DMA_ERROR_TE              : err = "Transfer error";break;    /*!< Transfer error                         */
 80014d2:	4b1e      	ldr	r3, [pc, #120]	; (800154c <vga_DMA_XFER_ERROR_CB_ID+0x18c>)
 80014d4:	667b      	str	r3, [r7, #100]	; 0x64
 80014d6:	e011      	b.n	80014fc <vga_DMA_XFER_ERROR_CB_ID+0x13c>
		case HAL_DMA_ERROR_FE              : err = "FIFO error";break;    /*!< FIFO error                             */
 80014d8:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <vga_DMA_XFER_ERROR_CB_ID+0x190>)
 80014da:	667b      	str	r3, [r7, #100]	; 0x64
 80014dc:	e00e      	b.n	80014fc <vga_DMA_XFER_ERROR_CB_ID+0x13c>
		case HAL_DMA_ERROR_DME             : err = "Direct Mode error";break;    /*!< Direct Mode error                      */
 80014de:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <vga_DMA_XFER_ERROR_CB_ID+0x194>)
 80014e0:	667b      	str	r3, [r7, #100]	; 0x64
 80014e2:	e00b      	b.n	80014fc <vga_DMA_XFER_ERROR_CB_ID+0x13c>
		case HAL_DMA_ERROR_TIMEOUT         : err = "Timeout error";break;    /*!< Timeout error                          */
 80014e4:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <vga_DMA_XFER_ERROR_CB_ID+0x198>)
 80014e6:	667b      	str	r3, [r7, #100]	; 0x64
 80014e8:	e008      	b.n	80014fc <vga_DMA_XFER_ERROR_CB_ID+0x13c>
		case HAL_DMA_ERROR_PARAM           : err = "Parameter error";break;    /*!< Parameter error                        */
 80014ea:	4b1c      	ldr	r3, [pc, #112]	; (800155c <vga_DMA_XFER_ERROR_CB_ID+0x19c>)
 80014ec:	667b      	str	r3, [r7, #100]	; 0x64
 80014ee:	e005      	b.n	80014fc <vga_DMA_XFER_ERROR_CB_ID+0x13c>
		case HAL_DMA_ERROR_NO_XFER         : err = "Abort requested with no Xfer ongoing";break;    /*!< Abort requested with no Xfer ongoing   */
 80014f0:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <vga_DMA_XFER_ERROR_CB_ID+0x1a0>)
 80014f2:	667b      	str	r3, [r7, #100]	; 0x64
 80014f4:	e002      	b.n	80014fc <vga_DMA_XFER_ERROR_CB_ID+0x13c>
		case HAL_DMA_ERROR_NOT_SUPPORTED   : err = "Not supported mode";break;    /*!< Not supported mode                     */
 80014f6:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <vga_DMA_XFER_ERROR_CB_ID+0x1a4>)
 80014f8:	667b      	str	r3, [r7, #100]	; 0x64
 80014fa:	bf00      	nop
		}

		int str_len = sprintf(str, "DMA %s\r\n", err);
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001500:	4910      	ldr	r1, [pc, #64]	; (8001544 <vga_DMA_XFER_ERROR_CB_ID+0x184>)
 8001502:	4618      	mov	r0, r3
 8001504:	f003 faf6 	bl	8004af4 <siprintf>
 8001508:	65b8      	str	r0, [r7, #88]	; 0x58
		HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800150a:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <vga_DMA_XFER_ERROR_CB_ID+0x188>)
 800150c:	6818      	ldr	r0, [r3, #0]
 800150e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001510:	b29a      	uxth	r2, r3
 8001512:	1d39      	adds	r1, r7, #4
 8001514:	f04f 33ff 	mov.w	r3, #4294967295
 8001518:	f002 ff45 	bl	80043a6 <HAL_UART_Transmit>
		errorCode &= errorCode - 1;
 800151c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800151e:	3b01      	subs	r3, #1
 8001520:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001522:	4013      	ands	r3, r2
 8001524:	663b      	str	r3, [r7, #96]	; 0x60
	while(errorCode){
 8001526:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001528:	2b00      	cmp	r3, #0
 800152a:	f47f af72 	bne.w	8001412 <vga_DMA_XFER_ERROR_CB_ID+0x52>
	};

}
 800152e:	bf00      	nop
 8001530:	bf00      	nop
 8001532:	3768      	adds	r7, #104	; 0x68
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	0800559c 	.word	0x0800559c
 800153c:	2000ffb4 	.word	0x2000ffb4
 8001540:	080055a4 	.word	0x080055a4
 8001544:	080055b0 	.word	0x080055b0
 8001548:	2000ffd4 	.word	0x2000ffd4
 800154c:	080055bc 	.word	0x080055bc
 8001550:	080055cc 	.word	0x080055cc
 8001554:	080055d8 	.word	0x080055d8
 8001558:	080055ec 	.word	0x080055ec
 800155c:	080055fc 	.word	0x080055fc
 8001560:	0800560c 	.word	0x0800560c
 8001564:	08005634 	.word	0x08005634

08001568 <vga_DMA_XFER_ABORT_CB_ID>:
//HAL_DMA_XFER_ABORT_CB_ID        = 0x05U,  /*!< Abort             */
void vga_DMA_XFER_ABORT_CB_ID(){
 8001568:	b580      	push	{r7, lr}
 800156a:	b096      	sub	sp, #88	; 0x58
 800156c:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 800156e:	2300      	movs	r3, #0
 8001570:	603b      	str	r3, [r7, #0]
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	224d      	movs	r2, #77	; 0x4d
 8001576:	2100      	movs	r1, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f003 fab3 	bl	8004ae4 <memset>
	int str_len = sprintf(str, "DMA Abort\r\n");
 800157e:	463b      	mov	r3, r7
 8001580:	4908      	ldr	r1, [pc, #32]	; (80015a4 <vga_DMA_XFER_ABORT_CB_ID+0x3c>)
 8001582:	4618      	mov	r0, r3
 8001584:	f003 fab6 	bl	8004af4 <siprintf>
 8001588:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800158a:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <vga_DMA_XFER_ABORT_CB_ID+0x40>)
 800158c:	6818      	ldr	r0, [r3, #0]
 800158e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001590:	b29a      	uxth	r2, r3
 8001592:	4639      	mov	r1, r7
 8001594:	f04f 33ff 	mov.w	r3, #4294967295
 8001598:	f002 ff05 	bl	80043a6 <HAL_UART_Transmit>
}
 800159c:	bf00      	nop
 800159e:	3758      	adds	r7, #88	; 0x58
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	08005648 	.word	0x08005648
 80015a8:	2000ffd4 	.word	0x2000ffd4

080015ac <vga_DMA_XFER_ALL_CB_ID>:
//HAL_DMA_XFER_ALL_CB_ID          = 0x06U   /*!< All               */
void vga_DMA_XFER_ALL_CB_ID(){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b096      	sub	sp, #88	; 0x58
 80015b0:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 80015b2:	2300      	movs	r3, #0
 80015b4:	603b      	str	r3, [r7, #0]
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	224d      	movs	r2, #77	; 0x4d
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f003 fa91 	bl	8004ae4 <memset>
	int str_len = sprintf(str, "Full transfer\r\n");
 80015c2:	463b      	mov	r3, r7
 80015c4:	4908      	ldr	r1, [pc, #32]	; (80015e8 <vga_DMA_XFER_ALL_CB_ID+0x3c>)
 80015c6:	4618      	mov	r0, r3
 80015c8:	f003 fa94 	bl	8004af4 <siprintf>
 80015cc:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80015ce:	4b07      	ldr	r3, [pc, #28]	; (80015ec <vga_DMA_XFER_ALL_CB_ID+0x40>)
 80015d0:	6818      	ldr	r0, [r3, #0]
 80015d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	4639      	mov	r1, r7
 80015d8:	f04f 33ff 	mov.w	r3, #4294967295
 80015dc:	f002 fee3 	bl	80043a6 <HAL_UART_Transmit>
}
 80015e0:	bf00      	nop
 80015e2:	3758      	adds	r7, #88	; 0x58
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	08005554 	.word	0x08005554
 80015ec:	2000ffd4 	.word	0x2000ffd4

080015f0 <registerDebugInterupts>:



void registerDebugInterupts(DMA_HandleTypeDef * toDebug){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	HAL_DMA_RegisterCallback(toDebug, HAL_DMA_XFER_ABORT_CB_ID, vga_DMA_XFER_CPLT_CB_ID);
 80015f8:	4a13      	ldr	r2, [pc, #76]	; (8001648 <registerDebugInterupts+0x58>)
 80015fa:	2105      	movs	r1, #5
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f001 f881 	bl	8002704 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(toDebug, HAL_DMA_XFER_HALFCPLT_CB_ID, vga_DMA_XFER_HALFCPLT_CB_ID);
 8001602:	4a12      	ldr	r2, [pc, #72]	; (800164c <registerDebugInterupts+0x5c>)
 8001604:	2101      	movs	r1, #1
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f001 f87c 	bl	8002704 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(toDebug, HAL_DMA_XFER_M1CPLT_CB_ID, vga_DMA_XFER_M1CPLT_CB_ID);
 800160c:	4a10      	ldr	r2, [pc, #64]	; (8001650 <registerDebugInterupts+0x60>)
 800160e:	2102      	movs	r1, #2
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f001 f877 	bl	8002704 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(toDebug, HAL_DMA_XFER_M1HALFCPLT_CB_ID, vga_DMA_XFER_M1HALFCPLT_CB_ID);
 8001616:	4a0f      	ldr	r2, [pc, #60]	; (8001654 <registerDebugInterupts+0x64>)
 8001618:	2103      	movs	r1, #3
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f001 f872 	bl	8002704 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(toDebug, HAL_DMA_XFER_ERROR_CB_ID, vga_DMA_XFER_ERROR_CB_ID);
 8001620:	4a0d      	ldr	r2, [pc, #52]	; (8001658 <registerDebugInterupts+0x68>)
 8001622:	2104      	movs	r1, #4
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f001 f86d 	bl	8002704 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(toDebug, HAL_DMA_XFER_ABORT_CB_ID, vga_DMA_XFER_ABORT_CB_ID);
 800162a:	4a0c      	ldr	r2, [pc, #48]	; (800165c <registerDebugInterupts+0x6c>)
 800162c:	2105      	movs	r1, #5
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f001 f868 	bl	8002704 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(toDebug, HAL_DMA_XFER_ALL_CB_ID, vga_DMA_XFER_ALL_CB_ID);
 8001634:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <registerDebugInterupts+0x70>)
 8001636:	2106      	movs	r1, #6
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f001 f863 	bl	8002704 <HAL_DMA_RegisterCallback>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	080012b1 	.word	0x080012b1
 800164c:	080012f5 	.word	0x080012f5
 8001650:	08001339 	.word	0x08001339
 8001654:	0800137d 	.word	0x0800137d
 8001658:	080013c1 	.word	0x080013c1
 800165c:	08001569 	.word	0x08001569
 8001660:	080015ad 	.word	0x080015ad

08001664 <registerHUART>:

void registerHUART(UART_HandleTypeDef * huart){
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	huartE = huart;
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <registerHUART+0x1c>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6013      	str	r3, [r2, #0]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	2000ffd4 	.word	0x2000ffd4

08001684 <clearVisibleArea>:

void clearVisibleArea(Color * lineBuffPart){
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	//uses 32 bit mode to clear faster
	old_memSet(0, (uint32_t*)&lineBuffPart[horiFront+horiSync+horiBack], horiRes/4);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3350      	adds	r3, #80	; 0x50
 8001690:	2250      	movs	r2, #80	; 0x50
 8001692:	4619      	mov	r1, r3
 8001694:	2000      	movs	r0, #0
 8001696:	f7ff fde3 	bl	8001260 <old_memSet>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <setVerticalSyncP1>:
	old_memSet(0x80808080, (uint32_t*)lineBuffPart, horiWhole/4);
	//set vertical and Horizontal sync in overlap
	old_memSet(0xC0C0C0C0, (uint32_t*)&lineBuffPart[horiFront], horiSync/4);
}

void setVerticalSyncP1(Color * lineBuffPart){
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
	//uses 32 bit accesses to clear faster

	//set VerticalSync everywhere
	old_memSet(0x80808080, (uint32_t*)lineBuffPart, horiWhole/4);
 80016aa:	2264      	movs	r2, #100	; 0x64
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	f04f 3080 	mov.w	r0, #2155905152	; 0x80808080
 80016b2:	f7ff fdd5 	bl	8001260 <old_memSet>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <setVerticalSyncP2>:

void setVerticalSyncP2(Color * lineBuffPart){
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
	//uses 32 bit accesses to clear faster

	//set vertical and Horizontal sync in overlap
	old_memSet(0xC0C0C0C0, (uint32_t*)&lineBuffPart[horiFront], horiSync/4);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3308      	adds	r3, #8
 80016ca:	220c      	movs	r2, #12
 80016cc:	4619      	mov	r1, r3
 80016ce:	f04f 30c0 	mov.w	r0, #3233857728	; 0xc0c0c0c0
 80016d2:	f7ff fdc5 	bl	8001260 <old_memSet>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <setHorizontalSyncP1>:
	old_memSet(0, (uint32_t*)lineBuffPart, horiWhole);
	//set Horizontal sync
	old_memSet(0x40404040, (uint32_t*)&lineBuffPart[horiFront], horiSync);
}

void setHorizontalSyncP1(Color * lineBuffPart){
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
	//uses 32 bit accesses to clear faster

	//clear VerticalSync everywhere / clear entire buffer
	old_memSet(0, (uint32_t*)lineBuffPart, horiWhole);
 80016e6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	2000      	movs	r0, #0
 80016ee:	f7ff fdb7 	bl	8001260 <old_memSet>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <setHorizontalSyncP2>:

void setHorizontalSyncP2(Color * lineBuffPart){
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
	//uses 32 bit accesses to clear faster

	//set Horizontal sync
	old_memSet(0x40404040, (uint32_t*)&lineBuffPart[horiFront], horiSync);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3308      	adds	r3, #8
 8001706:	2230      	movs	r2, #48	; 0x30
 8001708:	4619      	mov	r1, r3
 800170a:	f04f 3040 	mov.w	r0, #1077952576	; 0x40404040
 800170e:	f7ff fda7 	bl	8001260 <old_memSet>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <renderLine>:

void __weak renderLine(Color * lineBuffPart, const int lineCount){
 800171c:	b580      	push	{r7, lr}
 800171e:	b098      	sub	sp, #96	; 0x60
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
	//both buffers are 32 bit aligned

	char str[81] = { '\0' };
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	224d      	movs	r2, #77	; 0x4d
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f003 f9d6 	bl	8004ae4 <memset>
	int str_len = sprintf(str, "Rendering line %i\r\n", lineCount);
 8001738:	f107 0308 	add.w	r3, r7, #8
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	4910      	ldr	r1, [pc, #64]	; (8001780 <renderLine+0x64>)
 8001740:	4618      	mov	r0, r3
 8001742:	f003 f9d7 	bl	8004af4 <siprintf>
 8001746:	65f8      	str	r0, [r7, #92]	; 0x5c
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8001748:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <renderLine+0x68>)
 800174a:	6818      	ldr	r0, [r3, #0]
 800174c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800174e:	b29a      	uxth	r2, r3
 8001750:	f107 0108 	add.w	r1, r7, #8
 8001754:	f04f 33ff 	mov.w	r3, #4294967295
 8001758:	f002 fe25 	bl	80043a6 <HAL_UART_Transmit>
	//copy the current line of the screen buffer in to the line buffer
	old_memCopy((uint32_t*)&screenBuff[horiRes*lineCount], (uint32_t *)&lineBuffPart[horiFront+horiSync+horiBack], horiRes/4);
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	019b      	lsls	r3, r3, #6
 8001766:	461a      	mov	r2, r3
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <renderLine+0x6c>)
 800176a:	18d0      	adds	r0, r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3350      	adds	r3, #80	; 0x50
 8001770:	2250      	movs	r2, #80	; 0x50
 8001772:	4619      	mov	r1, r3
 8001774:	f7ff fd50 	bl	8001218 <old_memCopy>
}
 8001778:	bf00      	nop
 800177a:	3760      	adds	r7, #96	; 0x60
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	08005654 	.word	0x08005654
 8001784:	2000ffd4 	.word	0x2000ffd4
 8001788:	200005b0 	.word	0x200005b0

0800178c <copyLastLine>:

void copyLastLine(Color * activeBuffer, const Color * oldBuffer){
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
	//both buffers are 32 bit aligned
	old_memCopy((uint32_t*)&oldBuffer[horiFront+horiSync+horiBack], (uint32_t *)&activeBuffer[horiFront+horiSync+horiBack], horiRes/4);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3350      	adds	r3, #80	; 0x50
 80017a0:	2250      	movs	r2, #80	; 0x50
 80017a2:	4619      	mov	r1, r3
 80017a4:	f7ff fd38 	bl	8001218 <old_memCopy>
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <vgaStateMachine>:



void vgaStateMachine(int activatedFromCircularBuffer){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

	if(activatedFromCircularBuffer){
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d011      	beq.n	80017e2 <vgaStateMachine+0x32>
		if(!readyForNextLine){
			//we ran out of time rendering the last line
			//todo log error
		}
		readyForNextLine = 0;
 80017be:	4b9a      	ldr	r3, [pc, #616]	; (8001a28 <vgaStateMachine+0x278>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
		lineCount++;
 80017c4:	4b99      	ldr	r3, [pc, #612]	; (8001a2c <vgaStateMachine+0x27c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	3301      	adds	r3, #1
 80017ca:	4a98      	ldr	r2, [pc, #608]	; (8001a2c <vgaStateMachine+0x27c>)
 80017cc:	6013      	str	r3, [r2, #0]
		Color * tmp = activeBuffer;
 80017ce:	4b98      	ldr	r3, [pc, #608]	; (8001a30 <vgaStateMachine+0x280>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	60fb      	str	r3, [r7, #12]
		activeBuffer = oldBuffer;
 80017d4:	4b97      	ldr	r3, [pc, #604]	; (8001a34 <vgaStateMachine+0x284>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a95      	ldr	r2, [pc, #596]	; (8001a30 <vgaStateMachine+0x280>)
 80017da:	6013      	str	r3, [r2, #0]
		oldBuffer = tmp;
 80017dc:	4a95      	ldr	r2, [pc, #596]	; (8001a34 <vgaStateMachine+0x284>)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6013      	str	r3, [r2, #0]

	}

	while(1){
		switch(state){
 80017e2:	4b95      	ldr	r3, [pc, #596]	; (8001a38 <vgaStateMachine+0x288>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b15      	cmp	r3, #21
 80017e8:	d8fb      	bhi.n	80017e2 <vgaStateMachine+0x32>
 80017ea:	a201      	add	r2, pc, #4	; (adr r2, 80017f0 <vgaStateMachine+0x40>)
 80017ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f0:	08001849 	.word	0x08001849
 80017f4:	08001863 	.word	0x08001863
 80017f8:	08001881 	.word	0x08001881
 80017fc:	0800188f 	.word	0x0800188f
 8001800:	080018a7 	.word	0x080018a7
 8001804:	080018cf 	.word	0x080018cf
 8001808:	080018e1 	.word	0x080018e1
 800180c:	080018ef 	.word	0x080018ef
 8001810:	08001901 	.word	0x08001901
 8001814:	0800190f 	.word	0x0800190f
 8001818:	08001933 	.word	0x08001933
 800181c:	08001945 	.word	0x08001945
 8001820:	08001953 	.word	0x08001953
 8001824:	08001965 	.word	0x08001965
 8001828:	08001977 	.word	0x08001977
 800182c:	08001985 	.word	0x08001985
 8001830:	080019a9 	.word	0x080019a9
 8001834:	080019bb 	.word	0x080019bb
 8001838:	080019c9 	.word	0x080019c9
 800183c:	080019db 	.word	0x080019db
 8001840:	080019ed 	.word	0x080019ed
 8001844:	080019fb 	.word	0x080019fb
		//Render screen
		case sDecideNext:{
			if(lineCount < vertArea){
 8001848:	4b78      	ldr	r3, [pc, #480]	; (8001a2c <vgaStateMachine+0x27c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001850:	da03      	bge.n	800185a <vgaStateMachine+0xaa>
				state = sRenderLine;
 8001852:	4b79      	ldr	r3, [pc, #484]	; (8001a38 <vgaStateMachine+0x288>)
 8001854:	2201      	movs	r2, #1
 8001856:	701a      	strb	r2, [r3, #0]
			}else{
				state = sExitVisible1;
			}
			break;
 8001858:	e0e0      	b.n	8001a1c <vgaStateMachine+0x26c>
				state = sExitVisible1;
 800185a:	4b77      	ldr	r3, [pc, #476]	; (8001a38 <vgaStateMachine+0x288>)
 800185c:	2205      	movs	r2, #5
 800185e:	701a      	strb	r2, [r3, #0]
			break;
 8001860:	e0dc      	b.n	8001a1c <vgaStateMachine+0x26c>
		}
		case sRenderLine:{
			renderLine(activeBuffer, lineCount);//render line by copying from screenBuff
 8001862:	4b73      	ldr	r3, [pc, #460]	; (8001a30 <vgaStateMachine+0x280>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a71      	ldr	r2, [pc, #452]	; (8001a2c <vgaStateMachine+0x27c>)
 8001868:	6812      	ldr	r2, [r2, #0]
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff55 	bl	800171c <renderLine>
			lineUpscale = 1;
 8001872:	4b72      	ldr	r3, [pc, #456]	; (8001a3c <vgaStateMachine+0x28c>)
 8001874:	2201      	movs	r2, #1
 8001876:	601a      	str	r2, [r3, #0]
			state = sDoneRenderLine;
 8001878:	4b6f      	ldr	r3, [pc, #444]	; (8001a38 <vgaStateMachine+0x288>)
 800187a:	2202      	movs	r2, #2
 800187c:	701a      	strb	r2, [r3, #0]
			return;
 800187e:	e0cf      	b.n	8001a20 <vgaStateMachine+0x270>
		}
		case sDoneRenderLine:{
			state = vgaUpscale==1?sDecideNext:sCopyLastLine;
 8001880:	4b6d      	ldr	r3, [pc, #436]	; (8001a38 <vgaStateMachine+0x288>)
 8001882:	2203      	movs	r2, #3
 8001884:	701a      	strb	r2, [r3, #0]
			readyForNextLine = 1;
 8001886:	4b68      	ldr	r3, [pc, #416]	; (8001a28 <vgaStateMachine+0x278>)
 8001888:	2201      	movs	r2, #1
 800188a:	601a      	str	r2, [r3, #0]
			return;
 800188c:	e0c8      	b.n	8001a20 <vgaStateMachine+0x270>
		}
		case sCopyLastLine:{
			//we are upscaling and can save recourses by copying last buffer
			//would be faster if we could use a fifo queue of dma transfers instead of a circular buffer
			copyLastLine(activeBuffer, oldBuffer);
 800188e:	4b68      	ldr	r3, [pc, #416]	; (8001a30 <vgaStateMachine+0x280>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a68      	ldr	r2, [pc, #416]	; (8001a34 <vgaStateMachine+0x284>)
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	4611      	mov	r1, r2
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff77 	bl	800178c <copyLastLine>
			state = sDoneCopylastLine;
 800189e:	4b66      	ldr	r3, [pc, #408]	; (8001a38 <vgaStateMachine+0x288>)
 80018a0:	2204      	movs	r2, #4
 80018a2:	701a      	strb	r2, [r3, #0]
			return;
 80018a4:	e0bc      	b.n	8001a20 <vgaStateMachine+0x270>
		}
		case sDoneCopylastLine:{
			lineUpscale++;
 80018a6:	4b65      	ldr	r3, [pc, #404]	; (8001a3c <vgaStateMachine+0x28c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	3301      	adds	r3, #1
 80018ac:	4a63      	ldr	r2, [pc, #396]	; (8001a3c <vgaStateMachine+0x28c>)
 80018ae:	6013      	str	r3, [r2, #0]
			if(lineUpscale == vgaUpscale){//waits in current state until we need to render a new line and can't reuse old buffers
 80018b0:	4b62      	ldr	r3, [pc, #392]	; (8001a3c <vgaStateMachine+0x28c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	f040 80b2 	bne.w	8001a1e <vgaStateMachine+0x26e>
				lineUpscale = 0;
 80018ba:	4b60      	ldr	r3, [pc, #384]	; (8001a3c <vgaStateMachine+0x28c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
				state = sDecideNext;
 80018c0:	4b5d      	ldr	r3, [pc, #372]	; (8001a38 <vgaStateMachine+0x288>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
				readyForNextLine = 1;
 80018c6:	4b58      	ldr	r3, [pc, #352]	; (8001a28 <vgaStateMachine+0x278>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	601a      	str	r2, [r3, #0]
			}
			return;
 80018cc:	e0a7      	b.n	8001a1e <vgaStateMachine+0x26e>
		}
		//Exit visible area
		case sExitVisible1:{
			clearVisibleArea(activeBuffer);//clear leftover data in buffer 1
 80018ce:	4b58      	ldr	r3, [pc, #352]	; (8001a30 <vgaStateMachine+0x280>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fed6 	bl	8001684 <clearVisibleArea>
			state = sDoneExitVisible1;
 80018d8:	4b57      	ldr	r3, [pc, #348]	; (8001a38 <vgaStateMachine+0x288>)
 80018da:	2206      	movs	r2, #6
 80018dc:	701a      	strb	r2, [r3, #0]
			return;
 80018de:	e09f      	b.n	8001a20 <vgaStateMachine+0x270>
		}
		case sDoneExitVisible1:{
			state = sExitVisible2;
 80018e0:	4b55      	ldr	r3, [pc, #340]	; (8001a38 <vgaStateMachine+0x288>)
 80018e2:	2207      	movs	r2, #7
 80018e4:	701a      	strb	r2, [r3, #0]
			readyForNextLine = 1;
 80018e6:	4b50      	ldr	r3, [pc, #320]	; (8001a28 <vgaStateMachine+0x278>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	601a      	str	r2, [r3, #0]
			return;
 80018ec:	e098      	b.n	8001a20 <vgaStateMachine+0x270>
		}
		case sExitVisible2:{
			clearVisibleArea(activeBuffer);//clear leftover data in buffer 2
 80018ee:	4b50      	ldr	r3, [pc, #320]	; (8001a30 <vgaStateMachine+0x280>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fec6 	bl	8001684 <clearVisibleArea>
			state = sDoneExitVisible2;
 80018f8:	4b4f      	ldr	r3, [pc, #316]	; (8001a38 <vgaStateMachine+0x288>)
 80018fa:	2208      	movs	r2, #8
 80018fc:	701a      	strb	r2, [r3, #0]
			return;
 80018fe:	e08f      	b.n	8001a20 <vgaStateMachine+0x270>
		}
		case sDoneExitVisible2:{
			state = sSetVsync1P1;
 8001900:	4b4d      	ldr	r3, [pc, #308]	; (8001a38 <vgaStateMachine+0x288>)
 8001902:	2209      	movs	r2, #9
 8001904:	701a      	strb	r2, [r3, #0]
			readyForNextLine = 1;
 8001906:	4b48      	ldr	r3, [pc, #288]	; (8001a28 <vgaStateMachine+0x278>)
 8001908:	2201      	movs	r2, #1
 800190a:	601a      	str	r2, [r3, #0]
			return;
 800190c:	e088      	b.n	8001a20 <vgaStateMachine+0x270>
		}
		//Vertical sync
		case sSetVsync1P1:{
			if(lineCount == vertArea + vertFront){//wait until vertical sync starts
 800190e:	4b47      	ldr	r3, [pc, #284]	; (8001a2c <vgaStateMachine+0x27c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f5b3 7fce 	cmp.w	r3, #412	; 0x19c
 8001916:	d108      	bne.n	800192a <vgaStateMachine+0x17a>
				setVerticalSyncP1(activeBuffer);//set vertical sync in buffer 1
 8001918:	4b45      	ldr	r3, [pc, #276]	; (8001a30 <vgaStateMachine+0x280>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fec0 	bl	80016a2 <setVerticalSyncP1>
				state = sSetVsync1P2;
 8001922:	4b45      	ldr	r3, [pc, #276]	; (8001a38 <vgaStateMachine+0x288>)
 8001924:	220a      	movs	r2, #10
 8001926:	701a      	strb	r2, [r3, #0]
			}else{
				readyForNextLine = 1;
			}
			return;
 8001928:	e07a      	b.n	8001a20 <vgaStateMachine+0x270>
				readyForNextLine = 1;
 800192a:	4b3f      	ldr	r3, [pc, #252]	; (8001a28 <vgaStateMachine+0x278>)
 800192c:	2201      	movs	r2, #1
 800192e:	601a      	str	r2, [r3, #0]
			return;
 8001930:	e076      	b.n	8001a20 <vgaStateMachine+0x270>
		}
		case sSetVsync1P2:{
			setVerticalSyncP2(activeBuffer);
 8001932:	4b3f      	ldr	r3, [pc, #252]	; (8001a30 <vgaStateMachine+0x280>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fec1 	bl	80016be <setVerticalSyncP2>
			state = sDoneSetVsync1;
 800193c:	4b3e      	ldr	r3, [pc, #248]	; (8001a38 <vgaStateMachine+0x288>)
 800193e:	220b      	movs	r2, #11
 8001940:	701a      	strb	r2, [r3, #0]
			return;
 8001942:	e06d      	b.n	8001a20 <vgaStateMachine+0x270>
		}
		case sDoneSetVsync1:{
			state = sSetVsync2P1;
 8001944:	4b3c      	ldr	r3, [pc, #240]	; (8001a38 <vgaStateMachine+0x288>)
 8001946:	220c      	movs	r2, #12
 8001948:	701a      	strb	r2, [r3, #0]
			readyForNextLine = 1;
 800194a:	4b37      	ldr	r3, [pc, #220]	; (8001a28 <vgaStateMachine+0x278>)
 800194c:	2201      	movs	r2, #1
 800194e:	601a      	str	r2, [r3, #0]
			return;
 8001950:	e066      	b.n	8001a20 <vgaStateMachine+0x270>
		}
		case sSetVsync2P1:{
			setVerticalSyncP1(activeBuffer);//set Vertical Sync in buffer 2
 8001952:	4b37      	ldr	r3, [pc, #220]	; (8001a30 <vgaStateMachine+0x280>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fea3 	bl	80016a2 <setVerticalSyncP1>
			state = sSetVsync2P2;
 800195c:	4b36      	ldr	r3, [pc, #216]	; (8001a38 <vgaStateMachine+0x288>)
 800195e:	220d      	movs	r2, #13
 8001960:	701a      	strb	r2, [r3, #0]
			return;
 8001962:	e05d      	b.n	8001a20 <vgaStateMachine+0x270>
		}
		case sSetVsync2P2:{
			setVerticalSyncP2(activeBuffer);
 8001964:	4b32      	ldr	r3, [pc, #200]	; (8001a30 <vgaStateMachine+0x280>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fea8 	bl	80016be <setVerticalSyncP2>
			state = sDoneSetVsync2;
 800196e:	4b32      	ldr	r3, [pc, #200]	; (8001a38 <vgaStateMachine+0x288>)
 8001970:	220e      	movs	r2, #14
 8001972:	701a      	strb	r2, [r3, #0]
			return;
 8001974:	e054      	b.n	8001a20 <vgaStateMachine+0x270>
		}
		case sDoneSetVsync2:{
			state = sSetHsync1P1;
 8001976:	4b30      	ldr	r3, [pc, #192]	; (8001a38 <vgaStateMachine+0x288>)
 8001978:	220f      	movs	r2, #15
 800197a:	701a      	strb	r2, [r3, #0]
			readyForNextLine = 1;
 800197c:	4b2a      	ldr	r3, [pc, #168]	; (8001a28 <vgaStateMachine+0x278>)
 800197e:	2201      	movs	r2, #1
 8001980:	601a      	str	r2, [r3, #0]
			return;
 8001982:	e04d      	b.n	8001a20 <vgaStateMachine+0x270>
		}
		//Horizontal sync
		case sSetHsync1P1:{
			if(lineCount == vertArea + vertFront + vertSync){//wait until vertical sync ends
 8001984:	4b29      	ldr	r3, [pc, #164]	; (8001a2c <vgaStateMachine+0x27c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 800198c:	d108      	bne.n	80019a0 <vgaStateMachine+0x1f0>
				setHorizontalSyncP1(activeBuffer);//set horizontal sync in buffer 2
 800198e:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <vgaStateMachine+0x280>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fea3 	bl	80016de <setHorizontalSyncP1>
				state = sSetHsync1P2;
 8001998:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <vgaStateMachine+0x288>)
 800199a:	2210      	movs	r2, #16
 800199c:	701a      	strb	r2, [r3, #0]
			}else{
				readyForNextLine = 1;
			}
			return;
 800199e:	e03f      	b.n	8001a20 <vgaStateMachine+0x270>
				readyForNextLine = 1;
 80019a0:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <vgaStateMachine+0x278>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	601a      	str	r2, [r3, #0]
			return;
 80019a6:	e03b      	b.n	8001a20 <vgaStateMachine+0x270>
		}
		case sSetHsync1P2:{
			setHorizontalSyncP2(activeBuffer);
 80019a8:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <vgaStateMachine+0x280>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fea4 	bl	80016fa <setHorizontalSyncP2>
			state = sDoneSetHsync1;
 80019b2:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <vgaStateMachine+0x288>)
 80019b4:	2211      	movs	r2, #17
 80019b6:	701a      	strb	r2, [r3, #0]
			return;
 80019b8:	e032      	b.n	8001a20 <vgaStateMachine+0x270>
		}
		case sDoneSetHsync1:{
			state = sSetHsync2P1;
 80019ba:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <vgaStateMachine+0x288>)
 80019bc:	2212      	movs	r2, #18
 80019be:	701a      	strb	r2, [r3, #0]
			readyForNextLine = 1;
 80019c0:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <vgaStateMachine+0x278>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	601a      	str	r2, [r3, #0]
			return;
 80019c6:	e02b      	b.n	8001a20 <vgaStateMachine+0x270>
		}
		case sSetHsync2P1:{
			setVerticalSyncP1(activeBuffer);//set Horizontal Sync in buffer 2
 80019c8:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <vgaStateMachine+0x280>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fe68 	bl	80016a2 <setVerticalSyncP1>
			state = sSetHsync2P2;
 80019d2:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <vgaStateMachine+0x288>)
 80019d4:	2213      	movs	r2, #19
 80019d6:	701a      	strb	r2, [r3, #0]
			return;
 80019d8:	e022      	b.n	8001a20 <vgaStateMachine+0x270>
		}
		case sSetHsync2P2:{
			setVerticalSyncP2(activeBuffer);
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <vgaStateMachine+0x280>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fe6d 	bl	80016be <setVerticalSyncP2>
			state = sDoneSetHsync2;
 80019e4:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <vgaStateMachine+0x288>)
 80019e6:	2214      	movs	r2, #20
 80019e8:	701a      	strb	r2, [r3, #0]
			return;
 80019ea:	e019      	b.n	8001a20 <vgaStateMachine+0x270>
		}
		case sDoneSetHsync2:{
			state = sEndBuffer;
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <vgaStateMachine+0x288>)
 80019ee:	2215      	movs	r2, #21
 80019f0:	701a      	strb	r2, [r3, #0]
			readyForNextLine = 1;
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <vgaStateMachine+0x278>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	601a      	str	r2, [r3, #0]
			return;
 80019f8:	e012      	b.n	8001a20 <vgaStateMachine+0x270>
		}
		case sEndBuffer:{
			if(lineCount == vertWhole){//wait until end of the screen
 80019fa:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <vgaStateMachine+0x27c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f240 12c1 	movw	r2, #449	; 0x1c1
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d106      	bne.n	8001a14 <vgaStateMachine+0x264>
				state = sDecideNext;
 8001a06:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <vgaStateMachine+0x288>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
				lineCount = -1;// set line count back to the start
 8001a0c:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <vgaStateMachine+0x27c>)
 8001a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a12:	601a      	str	r2, [r3, #0]
			}
			readyForNextLine = 1;
 8001a14:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <vgaStateMachine+0x278>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	601a      	str	r2, [r3, #0]
			return;
 8001a1a:	e001      	b.n	8001a20 <vgaStateMachine+0x270>
		switch(state){
 8001a1c:	e6e1      	b.n	80017e2 <vgaStateMachine+0x32>
			return;
 8001a1e:	bf00      	nop
		}
	}


	}
}
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2000ffc4 	.word	0x2000ffc4
 8001a2c:	2000ffbc 	.word	0x2000ffbc
 8001a30:	2000ffcc 	.word	0x2000ffcc
 8001a34:	2000ffd0 	.word	0x2000ffd0
 8001a38:	2000ffc8 	.word	0x2000ffc8
 8001a3c:	2000ffc0 	.word	0x2000ffc0

08001a40 <vgaHalfCallBack>:

void vgaHalfCallBack(DMA_HandleTypeDef *_hdma){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	//prepareLine(lineBuff, &lineBuff[horiWhole]);
	vga_DMA_XFER_HALFCPLT_CB_ID();
 8001a48:	f7ff fc54 	bl	80012f4 <vga_DMA_XFER_HALFCPLT_CB_ID>
	vgaStateMachine(1);
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	f7ff feaf 	bl	80017b0 <vgaStateMachine>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <vgaFullCallBack>:

void vgaFullCallBack(DMA_HandleTypeDef *_hdma){
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
	//prepareLine(&lineBuff[horiWhole], lineBuff);
	vga_DMA_XFER_CPLT_CB_ID();
 8001a62:	f7ff fc25 	bl	80012b0 <vga_DMA_XFER_CPLT_CB_ID>
	vgaStateMachine(1);
 8001a66:	2001      	movs	r0, #1
 8001a68:	f7ff fea2 	bl	80017b0 <vgaStateMachine>
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <vgaCopyAndSetCallBack>:

void vgaCopyAndSetCallBack(DMA_HandleTypeDef *_hdma){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
	vgaStateMachine(0);
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f7ff fe97 	bl	80017b0 <vgaStateMachine>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <vgaSetup>:


void vgaSetup(
		TIM_HandleTypeDef * vgaPixelTimer_,
		DMA_HandleTypeDef * vgaCircularDMA_,
		DMA_HandleTypeDef * memCopyDMA_){
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
	vgaPixelTimer = vgaPixelTimer_;
 8001a98:	4a10      	ldr	r2, [pc, #64]	; (8001adc <vgaSetup+0x50>)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6013      	str	r3, [r2, #0]
	vgaCircularDMA = vgaCircularDMA_;
 8001a9e:	4a10      	ldr	r2, [pc, #64]	; (8001ae0 <vgaSetup+0x54>)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	6013      	str	r3, [r2, #0]
	memCopyDMA = memCopyDMA_;
 8001aa4:	4a0f      	ldr	r2, [pc, #60]	; (8001ae4 <vgaSetup+0x58>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6013      	str	r3, [r2, #0]

	lineCount = vertArea + vertFront - 1 - 2;//start right after a vertical sync
 8001aaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <vgaSetup+0x5c>)
 8001aac:	f240 1299 	movw	r2, #409	; 0x199
 8001ab0:	601a      	str	r2, [r3, #0]
	lineUpscale = 0;//copy old buffer if non zero
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <vgaSetup+0x60>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
	readyForNextLine = 1;
 8001ab8:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <vgaSetup+0x64>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	601a      	str	r2, [r3, #0]
	state = sSetVsync1P1;
 8001abe:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <vgaSetup+0x68>)
 8001ac0:	2209      	movs	r2, #9
 8001ac2:	701a      	strb	r2, [r3, #0]
	activeBuffer = lineBuff;
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <vgaSetup+0x6c>)
 8001ac6:	4a0d      	ldr	r2, [pc, #52]	; (8001afc <vgaSetup+0x70>)
 8001ac8:	601a      	str	r2, [r3, #0]
	oldBuffer = &lineBuff[horiWhole];
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <vgaSetup+0x74>)
 8001acc:	4a0d      	ldr	r2, [pc, #52]	; (8001b04 <vgaSetup+0x78>)
 8001ace:	601a      	str	r2, [r3, #0]

}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	2000ffb0 	.word	0x2000ffb0
 8001ae0:	2000ffb4 	.word	0x2000ffb4
 8001ae4:	2000ffb8 	.word	0x2000ffb8
 8001ae8:	2000ffbc 	.word	0x2000ffbc
 8001aec:	2000ffc0 	.word	0x2000ffc0
 8001af0:	2000ffc4 	.word	0x2000ffc4
 8001af4:	2000ffc8 	.word	0x2000ffc8
 8001af8:	2000ffcc 	.word	0x2000ffcc
 8001afc:	20000290 	.word	0x20000290
 8001b00:	2000ffd0 	.word	0x2000ffd0
 8001b04:	20000420 	.word	0x20000420

08001b08 <vgaStart>:

void vgaStart(){
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(vgaPixelTimer, TIM_DMA_UPDATE);
 8001b0c:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <vgaStart+0x78>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b14:	4618      	mov	r0, r3
 8001b16:	f001 fe85 	bl	8003824 <HAL_TIM_PWM_Start>
	__HAL_TIM_ENABLE(vgaPixelTimer);
 8001b1a:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <vgaStart+0x78>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <vgaStart+0x78>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f042 0201 	orr.w	r2, r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]

	HAL_DMA_RegisterCallback(vgaCircularDMA, HAL_DMA_XFER_HALFCPLT_CB_ID, vgaHalfCallBack);
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <vgaStart+0x7c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a15      	ldr	r2, [pc, #84]	; (8001b88 <vgaStart+0x80>)
 8001b34:	2101      	movs	r1, #1
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 fde4 	bl	8002704 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(vgaCircularDMA, HAL_DMA_XFER_CPLT_CB_ID, vgaFullCallBack);
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <vgaStart+0x7c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <vgaStart+0x84>)
 8001b42:	2100      	movs	r1, #0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f000 fddd 	bl	8002704 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(memCopyDMA, HAL_DMA_XFER_CPLT_CB_ID, vgaCopyAndSetCallBack);
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <vgaStart+0x88>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a11      	ldr	r2, [pc, #68]	; (8001b94 <vgaStart+0x8c>)
 8001b50:	2100      	movs	r1, #0
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 fdd6 	bl	8002704 <HAL_DMA_RegisterCallback>

	HAL_DMA_Init(vgaCircularDMA);
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <vgaStart+0x7c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 f9f1 	bl	8001f44 <HAL_DMA_Init>
	//__HAL_TIM_ENABLE(&htim5);

	//HAL_TIM_Base_Init(vgaPixelTimer);
	HAL_TIM_Base_Start_IT(vgaPixelTimer);
 8001b62:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <vgaStart+0x78>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f001 fda0 	bl	80036ac <HAL_TIM_Base_Start_IT>
	//prepare the buffer with the first two lines
	//vgaStateMachine(1);
	//vgaStateMachine(1);

	//start the circular buffer dma transfer aka vga main loop
	HAL_DMA_Start_IT(vgaCircularDMA, (uint32_t)&lineBuff[0], (uint32_t)&(GPIOC->ODR), horiWhole*2);
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <vgaStart+0x7c>)
 8001b6e:	6818      	ldr	r0, [r3, #0]
 8001b70:	4909      	ldr	r1, [pc, #36]	; (8001b98 <vgaStart+0x90>)
 8001b72:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001b76:	4a09      	ldr	r2, [pc, #36]	; (8001b9c <vgaStart+0x94>)
 8001b78:	f000 fa92 	bl	80020a0 <HAL_DMA_Start_IT>
    //__HAL_TIM_ENABLE_DMA(vgaPixelTimer, TIM_DMA_CC3);//no effect
	//__HAL_TIM_ENABLE_DMA(vgaPixelTimer, TIM_DMA_TRIGGER);//no effect


	//HAL_DMAEx_MultiBufferStart_IT(hdma, SrcAddress, DstAddress, SecondMemAddress, DataLength);
}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	2000ffb0 	.word	0x2000ffb0
 8001b84:	2000ffb4 	.word	0x2000ffb4
 8001b88:	08001a41 	.word	0x08001a41
 8001b8c:	08001a5b 	.word	0x08001a5b
 8001b90:	2000ffb8 	.word	0x2000ffb8
 8001b94:	08001a75 	.word	0x08001a75
 8001b98:	20000290 	.word	0x20000290
 8001b9c:	40020814 	.word	0x40020814

08001ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ba4:	480d      	ldr	r0, [pc, #52]	; (8001bdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ba6:	490e      	ldr	r1, [pc, #56]	; (8001be0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ba8:	4a0e      	ldr	r2, [pc, #56]	; (8001be4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bac:	e002      	b.n	8001bb4 <LoopCopyDataInit>

08001bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb2:	3304      	adds	r3, #4

08001bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb8:	d3f9      	bcc.n	8001bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bba:	4a0b      	ldr	r2, [pc, #44]	; (8001be8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bbc:	4c0b      	ldr	r4, [pc, #44]	; (8001bec <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc0:	e001      	b.n	8001bc6 <LoopFillZerobss>

08001bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc4:	3204      	adds	r2, #4

08001bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc8:	d3fb      	bcc.n	8001bc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bca:	f7ff fb13 	bl	80011f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bce:	f002 ff65 	bl	8004a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bd2:	f7fe fdfb 	bl	80007cc <main>
  bx  lr    
 8001bd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bd8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001be4:	080056cc 	.word	0x080056cc
  ldr r2, =_sbss
 8001be8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001bec:	2000fff0 	.word	0x2000fff0

08001bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bf0:	e7fe      	b.n	8001bf0 <ADC_IRQHandler>
	...

08001bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <HAL_Init+0x40>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	; (8001c34 <HAL_Init+0x40>)
 8001bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_Init+0x40>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <HAL_Init+0x40>)
 8001c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_Init+0x40>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <HAL_Init+0x40>)
 8001c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c1c:	2003      	movs	r0, #3
 8001c1e:	f000 f94f 	bl	8001ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c22:	2000      	movs	r0, #0
 8001c24:	f000 f808 	bl	8001c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c28:	f7ff f93e 	bl	8000ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023c00 	.word	0x40023c00

08001c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_InitTick+0x54>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_InitTick+0x58>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 f967 	bl	8001f2a <HAL_SYSTICK_Config>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00e      	b.n	8001c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b0f      	cmp	r3, #15
 8001c6a:	d80a      	bhi.n	8001c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f000 f92f 	bl	8001ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c78:	4a06      	ldr	r2, [pc, #24]	; (8001c94 <HAL_InitTick+0x5c>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e000      	b.n	8001c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000008 	.word	0x20000008
 8001c94:	20000004 	.word	0x20000004

08001c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_IncTick+0x20>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_IncTick+0x24>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <HAL_IncTick+0x24>)
 8001caa:	6013      	str	r3, [r2, #0]
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	2000ffdc 	.word	0x2000ffdc

08001cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <HAL_GetTick+0x14>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	2000ffdc 	.word	0x2000ffdc

08001cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce0:	f7ff ffee 	bl	8001cc0 <HAL_GetTick>
 8001ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf0:	d005      	beq.n	8001cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <HAL_Delay+0x44>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cfe:	bf00      	nop
 8001d00:	f7ff ffde 	bl	8001cc0 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d8f7      	bhi.n	8001d00 <HAL_Delay+0x28>
  {
  }
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000008 	.word	0x20000008

08001d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d52:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	60d3      	str	r3, [r2, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <__NVIC_GetPriorityGrouping+0x18>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	f003 0307 	and.w	r3, r3, #7
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	db0b      	blt.n	8001dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	f003 021f 	and.w	r2, r3, #31
 8001d9c:	4907      	ldr	r1, [pc, #28]	; (8001dbc <__NVIC_EnableIRQ+0x38>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	095b      	lsrs	r3, r3, #5
 8001da4:	2001      	movs	r0, #1
 8001da6:	fa00 f202 	lsl.w	r2, r0, r2
 8001daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	e000e100 	.word	0xe000e100

08001dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	6039      	str	r1, [r7, #0]
 8001dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	db0a      	blt.n	8001dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	490c      	ldr	r1, [pc, #48]	; (8001e0c <__NVIC_SetPriority+0x4c>)
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	0112      	lsls	r2, r2, #4
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	440b      	add	r3, r1
 8001de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de8:	e00a      	b.n	8001e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	4908      	ldr	r1, [pc, #32]	; (8001e10 <__NVIC_SetPriority+0x50>)
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	3b04      	subs	r3, #4
 8001df8:	0112      	lsls	r2, r2, #4
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	761a      	strb	r2, [r3, #24]
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000e100 	.word	0xe000e100
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b089      	sub	sp, #36	; 0x24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f1c3 0307 	rsb	r3, r3, #7
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	bf28      	it	cs
 8001e32:	2304      	movcs	r3, #4
 8001e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3304      	adds	r3, #4
 8001e3a:	2b06      	cmp	r3, #6
 8001e3c:	d902      	bls.n	8001e44 <NVIC_EncodePriority+0x30>
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3b03      	subs	r3, #3
 8001e42:	e000      	b.n	8001e46 <NVIC_EncodePriority+0x32>
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e48:	f04f 32ff 	mov.w	r2, #4294967295
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43da      	mvns	r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	401a      	ands	r2, r3
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	fa01 f303 	lsl.w	r3, r1, r3
 8001e66:	43d9      	mvns	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e6c:	4313      	orrs	r3, r2
         );
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3724      	adds	r7, #36	; 0x24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e8c:	d301      	bcc.n	8001e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e00f      	b.n	8001eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e92:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <SysTick_Config+0x40>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9a:	210f      	movs	r1, #15
 8001e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea0:	f7ff ff8e 	bl	8001dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <SysTick_Config+0x40>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eaa:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <SysTick_Config+0x40>)
 8001eac:	2207      	movs	r2, #7
 8001eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	e000e010 	.word	0xe000e010

08001ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ff29 	bl	8001d20 <__NVIC_SetPriorityGrouping>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b086      	sub	sp, #24
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee8:	f7ff ff3e 	bl	8001d68 <__NVIC_GetPriorityGrouping>
 8001eec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	6978      	ldr	r0, [r7, #20]
 8001ef4:	f7ff ff8e 	bl	8001e14 <NVIC_EncodePriority>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001efe:	4611      	mov	r1, r2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff5d 	bl	8001dc0 <__NVIC_SetPriority>
}
 8001f06:	bf00      	nop
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4603      	mov	r3, r0
 8001f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff31 	bl	8001d84 <__NVIC_EnableIRQ>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff ffa2 	bl	8001e7c <SysTick_Config>
 8001f38:	4603      	mov	r3, r0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f50:	f7ff feb6 	bl	8001cc0 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e099      	b.n	8002094 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2202      	movs	r2, #2
 8001f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0201 	bic.w	r2, r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f80:	e00f      	b.n	8001fa2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f82:	f7ff fe9d 	bl	8001cc0 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b05      	cmp	r3, #5
 8001f8e:	d908      	bls.n	8001fa2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2220      	movs	r2, #32
 8001f94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2203      	movs	r2, #3
 8001f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e078      	b.n	8002094 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1e8      	bne.n	8001f82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	4b38      	ldr	r3, [pc, #224]	; (800209c <HAL_DMA_Init+0x158>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fe6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d107      	bne.n	800200c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002004:	4313      	orrs	r3, r2
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4313      	orrs	r3, r2
 800200a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f023 0307 	bic.w	r3, r3, #7
 8002022:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	4313      	orrs	r3, r2
 800202c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	2b04      	cmp	r3, #4
 8002034:	d117      	bne.n	8002066 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	4313      	orrs	r3, r2
 800203e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00e      	beq.n	8002066 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 fc2d 	bl	80028a8 <DMA_CheckFifoParam>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d008      	beq.n	8002066 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2240      	movs	r2, #64	; 0x40
 8002058:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002062:	2301      	movs	r3, #1
 8002064:	e016      	b.n	8002094 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 fbe4 	bl	800283c <DMA_CalcBaseAndBitshift>
 8002074:	4603      	mov	r3, r0
 8002076:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207c:	223f      	movs	r2, #63	; 0x3f
 800207e:	409a      	lsls	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	f010803f 	.word	0xf010803f

080020a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
 80020ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d101      	bne.n	80020c6 <HAL_DMA_Start_IT+0x26>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e040      	b.n	8002148 <HAL_DMA_Start_IT+0xa8>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d12f      	bne.n	800213a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2202      	movs	r2, #2
 80020de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 fb76 	bl	80027e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f8:	223f      	movs	r2, #63	; 0x3f
 80020fa:	409a      	lsls	r2, r3
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0216 	orr.w	r2, r2, #22
 800210e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	2b00      	cmp	r3, #0
 8002116:	d007      	beq.n	8002128 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0208 	orr.w	r2, r2, #8
 8002126:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0201 	orr.w	r2, r2, #1
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	e005      	b.n	8002146 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002142:	2302      	movs	r3, #2
 8002144:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002146:	7dfb      	ldrb	r3, [r7, #23]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800215e:	f7ff fdaf 	bl	8001cc0 <HAL_GetTick>
 8002162:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d008      	beq.n	8002182 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2280      	movs	r2, #128	; 0x80
 8002174:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e052      	b.n	8002228 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0216 	bic.w	r2, r2, #22
 8002190:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695a      	ldr	r2, [r3, #20]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d103      	bne.n	80021b2 <HAL_DMA_Abort+0x62>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d007      	beq.n	80021c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0208 	bic.w	r2, r2, #8
 80021c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0201 	bic.w	r2, r2, #1
 80021d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021d2:	e013      	b.n	80021fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021d4:	f7ff fd74 	bl	8001cc0 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b05      	cmp	r3, #5
 80021e0:	d90c      	bls.n	80021fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2220      	movs	r2, #32
 80021e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2203      	movs	r2, #3
 80021ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e015      	b.n	8002228 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1e4      	bne.n	80021d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220e:	223f      	movs	r2, #63	; 0x3f
 8002210:	409a      	lsls	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08a      	sub	sp, #40	; 0x28
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	460b      	mov	r3, r1
 800223a:	607a      	str	r2, [r7, #4]
 800223c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 800223e:	2300      	movs	r3, #0
 8002240:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 8002242:	f7ff fd3d 	bl	8001cc0 <HAL_GetTick>
 8002246:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d008      	beq.n	8002266 <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2280      	movs	r2, #128	; 0x80
 8002258:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e0bf      	b.n	80023e6 <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d005      	beq.n	8002280 <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f44f 7280 	mov.w	r2, #256	; 0x100
 800227a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0b2      	b.n	80023e6 <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8002280:	7afb      	ldrb	r3, [r7, #11]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d106      	bne.n	8002294 <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228a:	2220      	movs	r2, #32
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
 8002292:	e005      	b.n	80022a0 <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002298:	2210      	movs	r2, #16
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a4:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 80022ac:	e05a      	b.n	8002364 <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b4:	d017      	beq.n	80022e6 <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d007      	beq.n	80022cc <HAL_DMA_PollForTransfer+0x9c>
 80022bc:	f7ff fd00 	bl	8001cc0 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d20c      	bcs.n	80022e6 <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2220      	movs	r2, #32
 80022d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e07f      	b.n	80023e6 <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f0:	2208      	movs	r2, #8
 80022f2:	409a      	lsls	r2, r3
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	4013      	ands	r3, r2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00b      	beq.n	8002314 <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002300:	f043 0201 	orr.w	r2, r3, #1
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230c:	2208      	movs	r2, #8
 800230e:	409a      	lsls	r2, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002318:	2201      	movs	r2, #1
 800231a:	409a      	lsls	r2, r3
 800231c:	6a3b      	ldr	r3, [r7, #32]
 800231e:	4013      	ands	r3, r2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00b      	beq.n	800233c <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002328:	f043 0202 	orr.w	r2, r3, #2
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002334:	2201      	movs	r2, #1
 8002336:	409a      	lsls	r2, r3
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002340:	2204      	movs	r2, #4
 8002342:	409a      	lsls	r2, r3
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	4013      	ands	r3, r2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00b      	beq.n	8002364 <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002350:	f043 0204 	orr.w	r2, r3, #4
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235c:	2204      	movs	r2, #4
 800235e:	409a      	lsls	r2, r3
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8002364:	6a3a      	ldr	r2, [r7, #32]
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	4013      	ands	r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d105      	bne.n	800237a <HAL_DMA_PollForTransfer+0x14a>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d099      	beq.n	80022ae <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237e:	2b00      	cmp	r3, #0
 8002380:	d018      	beq.n	80023b4 <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d012      	beq.n	80023b4 <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f7ff fede 	bl	8002150 <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002398:	2230      	movs	r2, #48	; 0x30
 800239a:	409a      	lsls	r2, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	609a      	str	r2, [r3, #8]
    
      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e018      	b.n	80023e6 <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80023b4:	7afb      	ldrb	r3, [r7, #11]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10e      	bne.n	80023d8 <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023be:	2230      	movs	r2, #48	; 0x30
 80023c0:	409a      	lsls	r2, r3
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	609a      	str	r2, [r3, #8]
    
    hdma->State = HAL_DMA_STATE_READY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80023d6:	e005      	b.n	80023e4 <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023dc:	2210      	movs	r2, #16
 80023de:	409a      	lsls	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 80023e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3728      	adds	r7, #40	; 0x28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023fc:	4b8e      	ldr	r3, [pc, #568]	; (8002638 <HAL_DMA_IRQHandler+0x248>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a8e      	ldr	r2, [pc, #568]	; (800263c <HAL_DMA_IRQHandler+0x24c>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	0a9b      	lsrs	r3, r3, #10
 8002408:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241a:	2208      	movs	r2, #8
 800241c:	409a      	lsls	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4013      	ands	r3, r2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d01a      	beq.n	800245c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d013      	beq.n	800245c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0204 	bic.w	r2, r2, #4
 8002442:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002448:	2208      	movs	r2, #8
 800244a:	409a      	lsls	r2, r3
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002454:	f043 0201 	orr.w	r2, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002460:	2201      	movs	r2, #1
 8002462:	409a      	lsls	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4013      	ands	r3, r2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d012      	beq.n	8002492 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00b      	beq.n	8002492 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247e:	2201      	movs	r2, #1
 8002480:	409a      	lsls	r2, r3
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248a:	f043 0202 	orr.w	r2, r3, #2
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002496:	2204      	movs	r2, #4
 8002498:	409a      	lsls	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4013      	ands	r3, r2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d012      	beq.n	80024c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00b      	beq.n	80024c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b4:	2204      	movs	r2, #4
 80024b6:	409a      	lsls	r2, r3
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c0:	f043 0204 	orr.w	r2, r3, #4
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024cc:	2210      	movs	r2, #16
 80024ce:	409a      	lsls	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d043      	beq.n	8002560 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d03c      	beq.n	8002560 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ea:	2210      	movs	r2, #16
 80024ec:	409a      	lsls	r2, r3
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d018      	beq.n	8002532 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d108      	bne.n	8002520 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	2b00      	cmp	r3, #0
 8002514:	d024      	beq.n	8002560 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	4798      	blx	r3
 800251e:	e01f      	b.n	8002560 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01b      	beq.n	8002560 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	4798      	blx	r3
 8002530:	e016      	b.n	8002560 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253c:	2b00      	cmp	r3, #0
 800253e:	d107      	bne.n	8002550 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0208 	bic.w	r2, r2, #8
 800254e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002564:	2220      	movs	r2, #32
 8002566:	409a      	lsls	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4013      	ands	r3, r2
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 808f 	beq.w	8002690 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0310 	and.w	r3, r3, #16
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 8087 	beq.w	8002690 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002586:	2220      	movs	r2, #32
 8002588:	409a      	lsls	r2, r3
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b05      	cmp	r3, #5
 8002598:	d136      	bne.n	8002608 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0216 	bic.w	r2, r2, #22
 80025a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	695a      	ldr	r2, [r3, #20]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d103      	bne.n	80025ca <HAL_DMA_IRQHandler+0x1da>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d007      	beq.n	80025da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0208 	bic.w	r2, r2, #8
 80025d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025de:	223f      	movs	r2, #63	; 0x3f
 80025e0:	409a      	lsls	r2, r3
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d07e      	beq.n	80026fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	4798      	blx	r3
        }
        return;
 8002606:	e079      	b.n	80026fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d01d      	beq.n	8002652 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10d      	bne.n	8002640 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002628:	2b00      	cmp	r3, #0
 800262a:	d031      	beq.n	8002690 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	4798      	blx	r3
 8002634:	e02c      	b.n	8002690 <HAL_DMA_IRQHandler+0x2a0>
 8002636:	bf00      	nop
 8002638:	20000000 	.word	0x20000000
 800263c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002644:	2b00      	cmp	r3, #0
 8002646:	d023      	beq.n	8002690 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	4798      	blx	r3
 8002650:	e01e      	b.n	8002690 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10f      	bne.n	8002680 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0210 	bic.w	r2, r2, #16
 800266e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002694:	2b00      	cmp	r3, #0
 8002696:	d032      	beq.n	80026fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d022      	beq.n	80026ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2205      	movs	r2, #5
 80026a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0201 	bic.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	3301      	adds	r3, #1
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d307      	bcc.n	80026d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f2      	bne.n	80026bc <HAL_DMA_IRQHandler+0x2cc>
 80026d6:	e000      	b.n	80026da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80026d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d005      	beq.n	80026fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	4798      	blx	r3
 80026fa:	e000      	b.n	80026fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80026fc:	bf00      	nop
    }
  }
}
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	460b      	mov	r3, r1
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_DMA_RegisterCallback+0x20>
 8002720:	2302      	movs	r3, #2
 8002722:	e03d      	b.n	80027a0 <HAL_DMA_RegisterCallback+0x9c>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b01      	cmp	r3, #1
 8002736:	d12c      	bne.n	8002792 <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 8002738:	7afb      	ldrb	r3, [r7, #11]
 800273a:	2b05      	cmp	r3, #5
 800273c:	d826      	bhi.n	800278c <HAL_DMA_RegisterCallback+0x88>
 800273e:	a201      	add	r2, pc, #4	; (adr r2, 8002744 <HAL_DMA_RegisterCallback+0x40>)
 8002740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002744:	0800275d 	.word	0x0800275d
 8002748:	08002765 	.word	0x08002765
 800274c:	0800276d 	.word	0x0800276d
 8002750:	08002775 	.word	0x08002775
 8002754:	0800277d 	.word	0x0800277d
 8002758:	08002785 	.word	0x08002785
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8002762:	e018      	b.n	8002796 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800276a:	e014      	b.n	8002796 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8002772:	e010      	b.n	8002796 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 800277a:	e00c      	b.n	8002796 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8002782:	e008      	b.n	8002796 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800278a:	e004      	b.n	8002796 <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	75fb      	strb	r3, [r7, #23]
      break;
 8002790:	e001      	b.n	8002796 <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 800279e:	7dfb      	ldrb	r3, [r7, #23]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	371c      	adds	r7, #28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027ba:	b2db      	uxtb	r3, r3
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
 80027ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b40      	cmp	r3, #64	; 0x40
 800280c:	d108      	bne.n	8002820 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800281e:	e007      	b.n	8002830 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	60da      	str	r2, [r3, #12]
}
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	3b10      	subs	r3, #16
 800284c:	4a14      	ldr	r2, [pc, #80]	; (80028a0 <DMA_CalcBaseAndBitshift+0x64>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	091b      	lsrs	r3, r3, #4
 8002854:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002856:	4a13      	ldr	r2, [pc, #76]	; (80028a4 <DMA_CalcBaseAndBitshift+0x68>)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4413      	add	r3, r2
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2b03      	cmp	r3, #3
 8002868:	d909      	bls.n	800287e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002872:	f023 0303 	bic.w	r3, r3, #3
 8002876:	1d1a      	adds	r2, r3, #4
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	659a      	str	r2, [r3, #88]	; 0x58
 800287c:	e007      	b.n	800288e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002886:	f023 0303 	bic.w	r3, r3, #3
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002892:	4618      	mov	r0, r3
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	aaaaaaab 	.word	0xaaaaaaab
 80028a4:	08005680 	.word	0x08005680

080028a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028b0:	2300      	movs	r3, #0
 80028b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d11f      	bne.n	8002902 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	d856      	bhi.n	8002976 <DMA_CheckFifoParam+0xce>
 80028c8:	a201      	add	r2, pc, #4	; (adr r2, 80028d0 <DMA_CheckFifoParam+0x28>)
 80028ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ce:	bf00      	nop
 80028d0:	080028e1 	.word	0x080028e1
 80028d4:	080028f3 	.word	0x080028f3
 80028d8:	080028e1 	.word	0x080028e1
 80028dc:	08002977 	.word	0x08002977
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d046      	beq.n	800297a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028f0:	e043      	b.n	800297a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028fa:	d140      	bne.n	800297e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002900:	e03d      	b.n	800297e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800290a:	d121      	bne.n	8002950 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b03      	cmp	r3, #3
 8002910:	d837      	bhi.n	8002982 <DMA_CheckFifoParam+0xda>
 8002912:	a201      	add	r2, pc, #4	; (adr r2, 8002918 <DMA_CheckFifoParam+0x70>)
 8002914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002918:	08002929 	.word	0x08002929
 800291c:	0800292f 	.word	0x0800292f
 8002920:	08002929 	.word	0x08002929
 8002924:	08002941 	.word	0x08002941
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
      break;
 800292c:	e030      	b.n	8002990 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002932:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d025      	beq.n	8002986 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800293e:	e022      	b.n	8002986 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002948:	d11f      	bne.n	800298a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800294e:	e01c      	b.n	800298a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d903      	bls.n	800295e <DMA_CheckFifoParam+0xb6>
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b03      	cmp	r3, #3
 800295a:	d003      	beq.n	8002964 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800295c:	e018      	b.n	8002990 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	73fb      	strb	r3, [r7, #15]
      break;
 8002962:	e015      	b.n	8002990 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002968:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00e      	beq.n	800298e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	73fb      	strb	r3, [r7, #15]
      break;
 8002974:	e00b      	b.n	800298e <DMA_CheckFifoParam+0xe6>
      break;
 8002976:	bf00      	nop
 8002978:	e00a      	b.n	8002990 <DMA_CheckFifoParam+0xe8>
      break;
 800297a:	bf00      	nop
 800297c:	e008      	b.n	8002990 <DMA_CheckFifoParam+0xe8>
      break;
 800297e:	bf00      	nop
 8002980:	e006      	b.n	8002990 <DMA_CheckFifoParam+0xe8>
      break;
 8002982:	bf00      	nop
 8002984:	e004      	b.n	8002990 <DMA_CheckFifoParam+0xe8>
      break;
 8002986:	bf00      	nop
 8002988:	e002      	b.n	8002990 <DMA_CheckFifoParam+0xe8>
      break;   
 800298a:	bf00      	nop
 800298c:	e000      	b.n	8002990 <DMA_CheckFifoParam+0xe8>
      break;
 800298e:	bf00      	nop
    }
  } 
  
  return status; 
 8002990:	7bfb      	ldrb	r3, [r7, #15]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop

080029a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b089      	sub	sp, #36	; 0x24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
 80029ba:	e159      	b.n	8002c70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029bc:	2201      	movs	r2, #1
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	f040 8148 	bne.w	8002c6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d005      	beq.n	80029f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d130      	bne.n	8002a54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	2203      	movs	r2, #3
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4013      	ands	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a28:	2201      	movs	r2, #1
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4013      	ands	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	091b      	lsrs	r3, r3, #4
 8002a3e:	f003 0201 	and.w	r2, r3, #1
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d017      	beq.n	8002a90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d123      	bne.n	8002ae4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	08da      	lsrs	r2, r3, #3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3208      	adds	r2, #8
 8002aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	220f      	movs	r2, #15
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	08da      	lsrs	r2, r3, #3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3208      	adds	r2, #8
 8002ade:	69b9      	ldr	r1, [r7, #24]
 8002ae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	2203      	movs	r2, #3
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4013      	ands	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 0203 	and.w	r2, r3, #3
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 80a2 	beq.w	8002c6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	4b57      	ldr	r3, [pc, #348]	; (8002c88 <HAL_GPIO_Init+0x2e8>)
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2e:	4a56      	ldr	r2, [pc, #344]	; (8002c88 <HAL_GPIO_Init+0x2e8>)
 8002b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b34:	6453      	str	r3, [r2, #68]	; 0x44
 8002b36:	4b54      	ldr	r3, [pc, #336]	; (8002c88 <HAL_GPIO_Init+0x2e8>)
 8002b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b42:	4a52      	ldr	r2, [pc, #328]	; (8002c8c <HAL_GPIO_Init+0x2ec>)
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	089b      	lsrs	r3, r3, #2
 8002b48:	3302      	adds	r3, #2
 8002b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	220f      	movs	r2, #15
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a49      	ldr	r2, [pc, #292]	; (8002c90 <HAL_GPIO_Init+0x2f0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d019      	beq.n	8002ba2 <HAL_GPIO_Init+0x202>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a48      	ldr	r2, [pc, #288]	; (8002c94 <HAL_GPIO_Init+0x2f4>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d013      	beq.n	8002b9e <HAL_GPIO_Init+0x1fe>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a47      	ldr	r2, [pc, #284]	; (8002c98 <HAL_GPIO_Init+0x2f8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00d      	beq.n	8002b9a <HAL_GPIO_Init+0x1fa>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a46      	ldr	r2, [pc, #280]	; (8002c9c <HAL_GPIO_Init+0x2fc>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d007      	beq.n	8002b96 <HAL_GPIO_Init+0x1f6>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a45      	ldr	r2, [pc, #276]	; (8002ca0 <HAL_GPIO_Init+0x300>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d101      	bne.n	8002b92 <HAL_GPIO_Init+0x1f2>
 8002b8e:	2304      	movs	r3, #4
 8002b90:	e008      	b.n	8002ba4 <HAL_GPIO_Init+0x204>
 8002b92:	2307      	movs	r3, #7
 8002b94:	e006      	b.n	8002ba4 <HAL_GPIO_Init+0x204>
 8002b96:	2303      	movs	r3, #3
 8002b98:	e004      	b.n	8002ba4 <HAL_GPIO_Init+0x204>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e002      	b.n	8002ba4 <HAL_GPIO_Init+0x204>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <HAL_GPIO_Init+0x204>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	f002 0203 	and.w	r2, r2, #3
 8002baa:	0092      	lsls	r2, r2, #2
 8002bac:	4093      	lsls	r3, r2
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bb4:	4935      	ldr	r1, [pc, #212]	; (8002c8c <HAL_GPIO_Init+0x2ec>)
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	089b      	lsrs	r3, r3, #2
 8002bba:	3302      	adds	r3, #2
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bc2:	4b38      	ldr	r3, [pc, #224]	; (8002ca4 <HAL_GPIO_Init+0x304>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002be6:	4a2f      	ldr	r2, [pc, #188]	; (8002ca4 <HAL_GPIO_Init+0x304>)
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bec:	4b2d      	ldr	r3, [pc, #180]	; (8002ca4 <HAL_GPIO_Init+0x304>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c10:	4a24      	ldr	r2, [pc, #144]	; (8002ca4 <HAL_GPIO_Init+0x304>)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c16:	4b23      	ldr	r3, [pc, #140]	; (8002ca4 <HAL_GPIO_Init+0x304>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4013      	ands	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c3a:	4a1a      	ldr	r2, [pc, #104]	; (8002ca4 <HAL_GPIO_Init+0x304>)
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c40:	4b18      	ldr	r3, [pc, #96]	; (8002ca4 <HAL_GPIO_Init+0x304>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c64:	4a0f      	ldr	r2, [pc, #60]	; (8002ca4 <HAL_GPIO_Init+0x304>)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	61fb      	str	r3, [r7, #28]
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	2b0f      	cmp	r3, #15
 8002c74:	f67f aea2 	bls.w	80029bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c78:	bf00      	nop
 8002c7a:	bf00      	nop
 8002c7c:	3724      	adds	r7, #36	; 0x24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40013800 	.word	0x40013800
 8002c90:	40020000 	.word	0x40020000
 8002c94:	40020400 	.word	0x40020400
 8002c98:	40020800 	.word	0x40020800
 8002c9c:	40020c00 	.word	0x40020c00
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	40013c00 	.word	0x40013c00

08002ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	807b      	strh	r3, [r7, #2]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cb8:	787b      	ldrb	r3, [r7, #1]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cbe:	887a      	ldrh	r2, [r7, #2]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cc4:	e003      	b.n	8002cce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cc6:	887b      	ldrh	r3, [r7, #2]
 8002cc8:	041a      	lsls	r2, r3, #16
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	619a      	str	r2, [r3, #24]
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
	...

08002cdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e267      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d075      	beq.n	8002de6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cfa:	4b88      	ldr	r3, [pc, #544]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d00c      	beq.n	8002d20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d06:	4b85      	ldr	r3, [pc, #532]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d0e:	2b08      	cmp	r3, #8
 8002d10:	d112      	bne.n	8002d38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d12:	4b82      	ldr	r3, [pc, #520]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d1e:	d10b      	bne.n	8002d38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d20:	4b7e      	ldr	r3, [pc, #504]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d05b      	beq.n	8002de4 <HAL_RCC_OscConfig+0x108>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d157      	bne.n	8002de4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e242      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d40:	d106      	bne.n	8002d50 <HAL_RCC_OscConfig+0x74>
 8002d42:	4b76      	ldr	r3, [pc, #472]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a75      	ldr	r2, [pc, #468]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	e01d      	b.n	8002d8c <HAL_RCC_OscConfig+0xb0>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d58:	d10c      	bne.n	8002d74 <HAL_RCC_OscConfig+0x98>
 8002d5a:	4b70      	ldr	r3, [pc, #448]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a6f      	ldr	r2, [pc, #444]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	4b6d      	ldr	r3, [pc, #436]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a6c      	ldr	r2, [pc, #432]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	e00b      	b.n	8002d8c <HAL_RCC_OscConfig+0xb0>
 8002d74:	4b69      	ldr	r3, [pc, #420]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a68      	ldr	r2, [pc, #416]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	4b66      	ldr	r3, [pc, #408]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a65      	ldr	r2, [pc, #404]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d013      	beq.n	8002dbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d94:	f7fe ff94 	bl	8001cc0 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d9c:	f7fe ff90 	bl	8001cc0 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b64      	cmp	r3, #100	; 0x64
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e207      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dae:	4b5b      	ldr	r3, [pc, #364]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0xc0>
 8002dba:	e014      	b.n	8002de6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7fe ff80 	bl	8001cc0 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dc4:	f7fe ff7c 	bl	8001cc0 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	; 0x64
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e1f3      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd6:	4b51      	ldr	r3, [pc, #324]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0xe8>
 8002de2:	e000      	b.n	8002de6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d063      	beq.n	8002eba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002df2:	4b4a      	ldr	r3, [pc, #296]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 030c 	and.w	r3, r3, #12
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00b      	beq.n	8002e16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dfe:	4b47      	ldr	r3, [pc, #284]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e06:	2b08      	cmp	r3, #8
 8002e08:	d11c      	bne.n	8002e44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e0a:	4b44      	ldr	r3, [pc, #272]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d116      	bne.n	8002e44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e16:	4b41      	ldr	r3, [pc, #260]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d005      	beq.n	8002e2e <HAL_RCC_OscConfig+0x152>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d001      	beq.n	8002e2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e1c7      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e2e:	4b3b      	ldr	r3, [pc, #236]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4937      	ldr	r1, [pc, #220]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e42:	e03a      	b.n	8002eba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d020      	beq.n	8002e8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e4c:	4b34      	ldr	r3, [pc, #208]	; (8002f20 <HAL_RCC_OscConfig+0x244>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e52:	f7fe ff35 	bl	8001cc0 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e5a:	f7fe ff31 	bl	8001cc0 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e1a8      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6c:	4b2b      	ldr	r3, [pc, #172]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e78:	4b28      	ldr	r3, [pc, #160]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4925      	ldr	r1, [pc, #148]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	600b      	str	r3, [r1, #0]
 8002e8c:	e015      	b.n	8002eba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e8e:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <HAL_RCC_OscConfig+0x244>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e94:	f7fe ff14 	bl	8001cc0 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e9c:	f7fe ff10 	bl	8001cc0 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e187      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eae:	4b1b      	ldr	r3, [pc, #108]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f0      	bne.n	8002e9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d036      	beq.n	8002f34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d016      	beq.n	8002efc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ece:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <HAL_RCC_OscConfig+0x248>)
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed4:	f7fe fef4 	bl	8001cc0 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002edc:	f7fe fef0 	bl	8001cc0 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e167      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eee:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0x200>
 8002efa:	e01b      	b.n	8002f34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002efc:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <HAL_RCC_OscConfig+0x248>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f02:	f7fe fedd 	bl	8001cc0 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f08:	e00e      	b.n	8002f28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f0a:	f7fe fed9 	bl	8001cc0 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d907      	bls.n	8002f28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e150      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	42470000 	.word	0x42470000
 8002f24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f28:	4b88      	ldr	r3, [pc, #544]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1ea      	bne.n	8002f0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 8097 	beq.w	8003070 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f42:	2300      	movs	r3, #0
 8002f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f46:	4b81      	ldr	r3, [pc, #516]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10f      	bne.n	8002f72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	4b7d      	ldr	r3, [pc, #500]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	4a7c      	ldr	r2, [pc, #496]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f60:	6413      	str	r3, [r2, #64]	; 0x40
 8002f62:	4b7a      	ldr	r3, [pc, #488]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f72:	4b77      	ldr	r3, [pc, #476]	; (8003150 <HAL_RCC_OscConfig+0x474>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d118      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f7e:	4b74      	ldr	r3, [pc, #464]	; (8003150 <HAL_RCC_OscConfig+0x474>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a73      	ldr	r2, [pc, #460]	; (8003150 <HAL_RCC_OscConfig+0x474>)
 8002f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f8a:	f7fe fe99 	bl	8001cc0 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f92:	f7fe fe95 	bl	8001cc0 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e10c      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa4:	4b6a      	ldr	r3, [pc, #424]	; (8003150 <HAL_RCC_OscConfig+0x474>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0f0      	beq.n	8002f92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d106      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x2ea>
 8002fb8:	4b64      	ldr	r3, [pc, #400]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbc:	4a63      	ldr	r2, [pc, #396]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc4:	e01c      	b.n	8003000 <HAL_RCC_OscConfig+0x324>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	2b05      	cmp	r3, #5
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x30c>
 8002fce:	4b5f      	ldr	r3, [pc, #380]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd2:	4a5e      	ldr	r2, [pc, #376]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002fd4:	f043 0304 	orr.w	r3, r3, #4
 8002fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fda:	4b5c      	ldr	r3, [pc, #368]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fde:	4a5b      	ldr	r2, [pc, #364]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe6:	e00b      	b.n	8003000 <HAL_RCC_OscConfig+0x324>
 8002fe8:	4b58      	ldr	r3, [pc, #352]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fec:	4a57      	ldr	r2, [pc, #348]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002fee:	f023 0301 	bic.w	r3, r3, #1
 8002ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff4:	4b55      	ldr	r3, [pc, #340]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff8:	4a54      	ldr	r2, [pc, #336]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002ffa:	f023 0304 	bic.w	r3, r3, #4
 8002ffe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d015      	beq.n	8003034 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003008:	f7fe fe5a 	bl	8001cc0 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300e:	e00a      	b.n	8003026 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003010:	f7fe fe56 	bl	8001cc0 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f241 3288 	movw	r2, #5000	; 0x1388
 800301e:	4293      	cmp	r3, r2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e0cb      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003026:	4b49      	ldr	r3, [pc, #292]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8003028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0ee      	beq.n	8003010 <HAL_RCC_OscConfig+0x334>
 8003032:	e014      	b.n	800305e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003034:	f7fe fe44 	bl	8001cc0 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800303a:	e00a      	b.n	8003052 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800303c:	f7fe fe40 	bl	8001cc0 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f241 3288 	movw	r2, #5000	; 0x1388
 800304a:	4293      	cmp	r3, r2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e0b5      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003052:	4b3e      	ldr	r3, [pc, #248]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1ee      	bne.n	800303c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800305e:	7dfb      	ldrb	r3, [r7, #23]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d105      	bne.n	8003070 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003064:	4b39      	ldr	r3, [pc, #228]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	4a38      	ldr	r2, [pc, #224]	; (800314c <HAL_RCC_OscConfig+0x470>)
 800306a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800306e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80a1 	beq.w	80031bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800307a:	4b34      	ldr	r3, [pc, #208]	; (800314c <HAL_RCC_OscConfig+0x470>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
 8003082:	2b08      	cmp	r3, #8
 8003084:	d05c      	beq.n	8003140 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d141      	bne.n	8003112 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800308e:	4b31      	ldr	r3, [pc, #196]	; (8003154 <HAL_RCC_OscConfig+0x478>)
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003094:	f7fe fe14 	bl	8001cc0 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800309c:	f7fe fe10 	bl	8001cc0 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e087      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ae:	4b27      	ldr	r3, [pc, #156]	; (800314c <HAL_RCC_OscConfig+0x470>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69da      	ldr	r2, [r3, #28]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	019b      	lsls	r3, r3, #6
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	085b      	lsrs	r3, r3, #1
 80030d2:	3b01      	subs	r3, #1
 80030d4:	041b      	lsls	r3, r3, #16
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	061b      	lsls	r3, r3, #24
 80030de:	491b      	ldr	r1, [pc, #108]	; (800314c <HAL_RCC_OscConfig+0x470>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e4:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <HAL_RCC_OscConfig+0x478>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ea:	f7fe fde9 	bl	8001cc0 <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f2:	f7fe fde5 	bl	8001cc0 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e05c      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003104:	4b11      	ldr	r3, [pc, #68]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0f0      	beq.n	80030f2 <HAL_RCC_OscConfig+0x416>
 8003110:	e054      	b.n	80031bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003112:	4b10      	ldr	r3, [pc, #64]	; (8003154 <HAL_RCC_OscConfig+0x478>)
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003118:	f7fe fdd2 	bl	8001cc0 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003120:	f7fe fdce 	bl	8001cc0 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e045      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003132:	4b06      	ldr	r3, [pc, #24]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x444>
 800313e:	e03d      	b.n	80031bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d107      	bne.n	8003158 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e038      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
 800314c:	40023800 	.word	0x40023800
 8003150:	40007000 	.word	0x40007000
 8003154:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003158:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <HAL_RCC_OscConfig+0x4ec>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d028      	beq.n	80031b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003170:	429a      	cmp	r2, r3
 8003172:	d121      	bne.n	80031b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317e:	429a      	cmp	r2, r3
 8003180:	d11a      	bne.n	80031b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003188:	4013      	ands	r3, r2
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800318e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003190:	4293      	cmp	r3, r2
 8003192:	d111      	bne.n	80031b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319e:	085b      	lsrs	r3, r3, #1
 80031a0:	3b01      	subs	r3, #1
 80031a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d107      	bne.n	80031b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d001      	beq.n	80031bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e000      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40023800 	.word	0x40023800

080031cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0cc      	b.n	800337a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031e0:	4b68      	ldr	r3, [pc, #416]	; (8003384 <HAL_RCC_ClockConfig+0x1b8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d90c      	bls.n	8003208 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ee:	4b65      	ldr	r3, [pc, #404]	; (8003384 <HAL_RCC_ClockConfig+0x1b8>)
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f6:	4b63      	ldr	r3, [pc, #396]	; (8003384 <HAL_RCC_ClockConfig+0x1b8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d001      	beq.n	8003208 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0b8      	b.n	800337a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d020      	beq.n	8003256 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003220:	4b59      	ldr	r3, [pc, #356]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	4a58      	ldr	r2, [pc, #352]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800322a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003238:	4b53      	ldr	r3, [pc, #332]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	4a52      	ldr	r2, [pc, #328]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800323e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003242:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003244:	4b50      	ldr	r3, [pc, #320]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	494d      	ldr	r1, [pc, #308]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	4313      	orrs	r3, r2
 8003254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d044      	beq.n	80032ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d107      	bne.n	800327a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326a:	4b47      	ldr	r3, [pc, #284]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d119      	bne.n	80032aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e07f      	b.n	800337a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d003      	beq.n	800328a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003286:	2b03      	cmp	r3, #3
 8003288:	d107      	bne.n	800329a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328a:	4b3f      	ldr	r3, [pc, #252]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d109      	bne.n	80032aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e06f      	b.n	800337a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329a:	4b3b      	ldr	r3, [pc, #236]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e067      	b.n	800337a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032aa:	4b37      	ldr	r3, [pc, #220]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f023 0203 	bic.w	r2, r3, #3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	4934      	ldr	r1, [pc, #208]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032bc:	f7fe fd00 	bl	8001cc0 <HAL_GetTick>
 80032c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c2:	e00a      	b.n	80032da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c4:	f7fe fcfc 	bl	8001cc0 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e04f      	b.n	800337a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032da:	4b2b      	ldr	r3, [pc, #172]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 020c 	and.w	r2, r3, #12
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d1eb      	bne.n	80032c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032ec:	4b25      	ldr	r3, [pc, #148]	; (8003384 <HAL_RCC_ClockConfig+0x1b8>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d20c      	bcs.n	8003314 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fa:	4b22      	ldr	r3, [pc, #136]	; (8003384 <HAL_RCC_ClockConfig+0x1b8>)
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003302:	4b20      	ldr	r3, [pc, #128]	; (8003384 <HAL_RCC_ClockConfig+0x1b8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d001      	beq.n	8003314 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e032      	b.n	800337a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d008      	beq.n	8003332 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003320:	4b19      	ldr	r3, [pc, #100]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	4916      	ldr	r1, [pc, #88]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	4313      	orrs	r3, r2
 8003330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d009      	beq.n	8003352 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800333e:	4b12      	ldr	r3, [pc, #72]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	490e      	ldr	r1, [pc, #56]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	4313      	orrs	r3, r2
 8003350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003352:	f000 f821 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 8003356:	4602      	mov	r2, r0
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	091b      	lsrs	r3, r3, #4
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	490a      	ldr	r1, [pc, #40]	; (800338c <HAL_RCC_ClockConfig+0x1c0>)
 8003364:	5ccb      	ldrb	r3, [r1, r3]
 8003366:	fa22 f303 	lsr.w	r3, r2, r3
 800336a:	4a09      	ldr	r2, [pc, #36]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 800336c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800336e:	4b09      	ldr	r3, [pc, #36]	; (8003394 <HAL_RCC_ClockConfig+0x1c8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f7fe fc60 	bl	8001c38 <HAL_InitTick>

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40023c00 	.word	0x40023c00
 8003388:	40023800 	.word	0x40023800
 800338c:	08005668 	.word	0x08005668
 8003390:	20000000 	.word	0x20000000
 8003394:	20000004 	.word	0x20000004

08003398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800339c:	b094      	sub	sp, #80	; 0x50
 800339e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	647b      	str	r3, [r7, #68]	; 0x44
 80033a4:	2300      	movs	r3, #0
 80033a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033a8:	2300      	movs	r3, #0
 80033aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033b0:	4b79      	ldr	r3, [pc, #484]	; (8003598 <HAL_RCC_GetSysClockFreq+0x200>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 030c 	and.w	r3, r3, #12
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d00d      	beq.n	80033d8 <HAL_RCC_GetSysClockFreq+0x40>
 80033bc:	2b08      	cmp	r3, #8
 80033be:	f200 80e1 	bhi.w	8003584 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d002      	beq.n	80033cc <HAL_RCC_GetSysClockFreq+0x34>
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d003      	beq.n	80033d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80033ca:	e0db      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033cc:	4b73      	ldr	r3, [pc, #460]	; (800359c <HAL_RCC_GetSysClockFreq+0x204>)
 80033ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80033d0:	e0db      	b.n	800358a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033d2:	4b73      	ldr	r3, [pc, #460]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80033d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033d6:	e0d8      	b.n	800358a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033d8:	4b6f      	ldr	r3, [pc, #444]	; (8003598 <HAL_RCC_GetSysClockFreq+0x200>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033e2:	4b6d      	ldr	r3, [pc, #436]	; (8003598 <HAL_RCC_GetSysClockFreq+0x200>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d063      	beq.n	80034b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ee:	4b6a      	ldr	r3, [pc, #424]	; (8003598 <HAL_RCC_GetSysClockFreq+0x200>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	099b      	lsrs	r3, r3, #6
 80033f4:	2200      	movs	r2, #0
 80033f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80033f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003400:	633b      	str	r3, [r7, #48]	; 0x30
 8003402:	2300      	movs	r3, #0
 8003404:	637b      	str	r3, [r7, #52]	; 0x34
 8003406:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800340a:	4622      	mov	r2, r4
 800340c:	462b      	mov	r3, r5
 800340e:	f04f 0000 	mov.w	r0, #0
 8003412:	f04f 0100 	mov.w	r1, #0
 8003416:	0159      	lsls	r1, r3, #5
 8003418:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800341c:	0150      	lsls	r0, r2, #5
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4621      	mov	r1, r4
 8003424:	1a51      	subs	r1, r2, r1
 8003426:	6139      	str	r1, [r7, #16]
 8003428:	4629      	mov	r1, r5
 800342a:	eb63 0301 	sbc.w	r3, r3, r1
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	f04f 0300 	mov.w	r3, #0
 8003438:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800343c:	4659      	mov	r1, fp
 800343e:	018b      	lsls	r3, r1, #6
 8003440:	4651      	mov	r1, sl
 8003442:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003446:	4651      	mov	r1, sl
 8003448:	018a      	lsls	r2, r1, #6
 800344a:	4651      	mov	r1, sl
 800344c:	ebb2 0801 	subs.w	r8, r2, r1
 8003450:	4659      	mov	r1, fp
 8003452:	eb63 0901 	sbc.w	r9, r3, r1
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	f04f 0300 	mov.w	r3, #0
 800345e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003462:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003466:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800346a:	4690      	mov	r8, r2
 800346c:	4699      	mov	r9, r3
 800346e:	4623      	mov	r3, r4
 8003470:	eb18 0303 	adds.w	r3, r8, r3
 8003474:	60bb      	str	r3, [r7, #8]
 8003476:	462b      	mov	r3, r5
 8003478:	eb49 0303 	adc.w	r3, r9, r3
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800348a:	4629      	mov	r1, r5
 800348c:	024b      	lsls	r3, r1, #9
 800348e:	4621      	mov	r1, r4
 8003490:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003494:	4621      	mov	r1, r4
 8003496:	024a      	lsls	r2, r1, #9
 8003498:	4610      	mov	r0, r2
 800349a:	4619      	mov	r1, r3
 800349c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800349e:	2200      	movs	r2, #0
 80034a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80034a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034a8:	f7fc feea 	bl	8000280 <__aeabi_uldivmod>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4613      	mov	r3, r2
 80034b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034b4:	e058      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034b6:	4b38      	ldr	r3, [pc, #224]	; (8003598 <HAL_RCC_GetSysClockFreq+0x200>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	099b      	lsrs	r3, r3, #6
 80034bc:	2200      	movs	r2, #0
 80034be:	4618      	mov	r0, r3
 80034c0:	4611      	mov	r1, r2
 80034c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034c6:	623b      	str	r3, [r7, #32]
 80034c8:	2300      	movs	r3, #0
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
 80034cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034d0:	4642      	mov	r2, r8
 80034d2:	464b      	mov	r3, r9
 80034d4:	f04f 0000 	mov.w	r0, #0
 80034d8:	f04f 0100 	mov.w	r1, #0
 80034dc:	0159      	lsls	r1, r3, #5
 80034de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034e2:	0150      	lsls	r0, r2, #5
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	4641      	mov	r1, r8
 80034ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80034ee:	4649      	mov	r1, r9
 80034f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003500:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003504:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003508:	ebb2 040a 	subs.w	r4, r2, sl
 800350c:	eb63 050b 	sbc.w	r5, r3, fp
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	00eb      	lsls	r3, r5, #3
 800351a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800351e:	00e2      	lsls	r2, r4, #3
 8003520:	4614      	mov	r4, r2
 8003522:	461d      	mov	r5, r3
 8003524:	4643      	mov	r3, r8
 8003526:	18e3      	adds	r3, r4, r3
 8003528:	603b      	str	r3, [r7, #0]
 800352a:	464b      	mov	r3, r9
 800352c:	eb45 0303 	adc.w	r3, r5, r3
 8003530:	607b      	str	r3, [r7, #4]
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800353e:	4629      	mov	r1, r5
 8003540:	028b      	lsls	r3, r1, #10
 8003542:	4621      	mov	r1, r4
 8003544:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003548:	4621      	mov	r1, r4
 800354a:	028a      	lsls	r2, r1, #10
 800354c:	4610      	mov	r0, r2
 800354e:	4619      	mov	r1, r3
 8003550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003552:	2200      	movs	r2, #0
 8003554:	61bb      	str	r3, [r7, #24]
 8003556:	61fa      	str	r2, [r7, #28]
 8003558:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800355c:	f7fc fe90 	bl	8000280 <__aeabi_uldivmod>
 8003560:	4602      	mov	r2, r0
 8003562:	460b      	mov	r3, r1
 8003564:	4613      	mov	r3, r2
 8003566:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003568:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <HAL_RCC_GetSysClockFreq+0x200>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	0c1b      	lsrs	r3, r3, #16
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	3301      	adds	r3, #1
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003578:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800357a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800357c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003580:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003582:	e002      	b.n	800358a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003584:	4b05      	ldr	r3, [pc, #20]	; (800359c <HAL_RCC_GetSysClockFreq+0x204>)
 8003586:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003588:	bf00      	nop
    }
  }
  return sysclockfreq;
 800358a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800358c:	4618      	mov	r0, r3
 800358e:	3750      	adds	r7, #80	; 0x50
 8003590:	46bd      	mov	sp, r7
 8003592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003596:	bf00      	nop
 8003598:	40023800 	.word	0x40023800
 800359c:	00f42400 	.word	0x00f42400
 80035a0:	007a1200 	.word	0x007a1200

080035a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035a8:	4b03      	ldr	r3, [pc, #12]	; (80035b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80035aa:	681b      	ldr	r3, [r3, #0]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	20000000 	.word	0x20000000

080035bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035c0:	f7ff fff0 	bl	80035a4 <HAL_RCC_GetHCLKFreq>
 80035c4:	4602      	mov	r2, r0
 80035c6:	4b05      	ldr	r3, [pc, #20]	; (80035dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	0a9b      	lsrs	r3, r3, #10
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	4903      	ldr	r1, [pc, #12]	; (80035e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035d2:	5ccb      	ldrb	r3, [r1, r3]
 80035d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d8:	4618      	mov	r0, r3
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40023800 	.word	0x40023800
 80035e0:	08005678 	.word	0x08005678

080035e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035e8:	f7ff ffdc 	bl	80035a4 <HAL_RCC_GetHCLKFreq>
 80035ec:	4602      	mov	r2, r0
 80035ee:	4b05      	ldr	r3, [pc, #20]	; (8003604 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	0b5b      	lsrs	r3, r3, #13
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	4903      	ldr	r1, [pc, #12]	; (8003608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035fa:	5ccb      	ldrb	r3, [r1, r3]
 80035fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003600:	4618      	mov	r0, r3
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40023800 	.word	0x40023800
 8003608:	08005678 	.word	0x08005678

0800360c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e041      	b.n	80036a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d106      	bne.n	8003638 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7fd fc60 	bl	8000ef8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3304      	adds	r3, #4
 8003648:	4619      	mov	r1, r3
 800364a:	4610      	mov	r0, r2
 800364c:	f000 fb24 	bl	8003c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d001      	beq.n	80036c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e044      	b.n	800374e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1e      	ldr	r2, [pc, #120]	; (800375c <HAL_TIM_Base_Start_IT+0xb0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d018      	beq.n	8003718 <HAL_TIM_Base_Start_IT+0x6c>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ee:	d013      	beq.n	8003718 <HAL_TIM_Base_Start_IT+0x6c>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a1a      	ldr	r2, [pc, #104]	; (8003760 <HAL_TIM_Base_Start_IT+0xb4>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d00e      	beq.n	8003718 <HAL_TIM_Base_Start_IT+0x6c>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a19      	ldr	r2, [pc, #100]	; (8003764 <HAL_TIM_Base_Start_IT+0xb8>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d009      	beq.n	8003718 <HAL_TIM_Base_Start_IT+0x6c>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a17      	ldr	r2, [pc, #92]	; (8003768 <HAL_TIM_Base_Start_IT+0xbc>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d004      	beq.n	8003718 <HAL_TIM_Base_Start_IT+0x6c>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a16      	ldr	r2, [pc, #88]	; (800376c <HAL_TIM_Base_Start_IT+0xc0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d111      	bne.n	800373c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b06      	cmp	r3, #6
 8003728:	d010      	beq.n	800374c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0201 	orr.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373a:	e007      	b.n	800374c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0201 	orr.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40010000 	.word	0x40010000
 8003760:	40000400 	.word	0x40000400
 8003764:	40000800 	.word	0x40000800
 8003768:	40000c00 	.word	0x40000c00
 800376c:	40014000 	.word	0x40014000

08003770 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e041      	b.n	8003806 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d106      	bne.n	800379c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f839 	bl	800380e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3304      	adds	r3, #4
 80037ac:	4619      	mov	r1, r3
 80037ae:	4610      	mov	r0, r2
 80037b0:	f000 fa72 	bl	8003c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
	...

08003824 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d109      	bne.n	8003848 <HAL_TIM_PWM_Start+0x24>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b01      	cmp	r3, #1
 800383e:	bf14      	ite	ne
 8003840:	2301      	movne	r3, #1
 8003842:	2300      	moveq	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	e022      	b.n	800388e <HAL_TIM_PWM_Start+0x6a>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2b04      	cmp	r3, #4
 800384c:	d109      	bne.n	8003862 <HAL_TIM_PWM_Start+0x3e>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b01      	cmp	r3, #1
 8003858:	bf14      	ite	ne
 800385a:	2301      	movne	r3, #1
 800385c:	2300      	moveq	r3, #0
 800385e:	b2db      	uxtb	r3, r3
 8003860:	e015      	b.n	800388e <HAL_TIM_PWM_Start+0x6a>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b08      	cmp	r3, #8
 8003866:	d109      	bne.n	800387c <HAL_TIM_PWM_Start+0x58>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b01      	cmp	r3, #1
 8003872:	bf14      	ite	ne
 8003874:	2301      	movne	r3, #1
 8003876:	2300      	moveq	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	e008      	b.n	800388e <HAL_TIM_PWM_Start+0x6a>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b01      	cmp	r3, #1
 8003886:	bf14      	ite	ne
 8003888:	2301      	movne	r3, #1
 800388a:	2300      	moveq	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e068      	b.n	8003968 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d104      	bne.n	80038a6 <HAL_TIM_PWM_Start+0x82>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038a4:	e013      	b.n	80038ce <HAL_TIM_PWM_Start+0xaa>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d104      	bne.n	80038b6 <HAL_TIM_PWM_Start+0x92>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038b4:	e00b      	b.n	80038ce <HAL_TIM_PWM_Start+0xaa>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d104      	bne.n	80038c6 <HAL_TIM_PWM_Start+0xa2>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038c4:	e003      	b.n	80038ce <HAL_TIM_PWM_Start+0xaa>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2202      	movs	r2, #2
 80038ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2201      	movs	r2, #1
 80038d4:	6839      	ldr	r1, [r7, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 fc84 	bl	80041e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a23      	ldr	r2, [pc, #140]	; (8003970 <HAL_TIM_PWM_Start+0x14c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d107      	bne.n	80038f6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a1d      	ldr	r2, [pc, #116]	; (8003970 <HAL_TIM_PWM_Start+0x14c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d018      	beq.n	8003932 <HAL_TIM_PWM_Start+0x10e>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003908:	d013      	beq.n	8003932 <HAL_TIM_PWM_Start+0x10e>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a19      	ldr	r2, [pc, #100]	; (8003974 <HAL_TIM_PWM_Start+0x150>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00e      	beq.n	8003932 <HAL_TIM_PWM_Start+0x10e>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a17      	ldr	r2, [pc, #92]	; (8003978 <HAL_TIM_PWM_Start+0x154>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d009      	beq.n	8003932 <HAL_TIM_PWM_Start+0x10e>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a16      	ldr	r2, [pc, #88]	; (800397c <HAL_TIM_PWM_Start+0x158>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d004      	beq.n	8003932 <HAL_TIM_PWM_Start+0x10e>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a14      	ldr	r2, [pc, #80]	; (8003980 <HAL_TIM_PWM_Start+0x15c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d111      	bne.n	8003956 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2b06      	cmp	r3, #6
 8003942:	d010      	beq.n	8003966 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0201 	orr.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003954:	e007      	b.n	8003966 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0201 	orr.w	r2, r2, #1
 8003964:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40010000 	.word	0x40010000
 8003974:	40000400 	.word	0x40000400
 8003978:	40000800 	.word	0x40000800
 800397c:	40000c00 	.word	0x40000c00
 8003980:	40014000 	.word	0x40014000

08003984 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800399e:	2302      	movs	r3, #2
 80039a0:	e0ae      	b.n	8003b00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b0c      	cmp	r3, #12
 80039ae:	f200 809f 	bhi.w	8003af0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80039b2:	a201      	add	r2, pc, #4	; (adr r2, 80039b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b8:	080039ed 	.word	0x080039ed
 80039bc:	08003af1 	.word	0x08003af1
 80039c0:	08003af1 	.word	0x08003af1
 80039c4:	08003af1 	.word	0x08003af1
 80039c8:	08003a2d 	.word	0x08003a2d
 80039cc:	08003af1 	.word	0x08003af1
 80039d0:	08003af1 	.word	0x08003af1
 80039d4:	08003af1 	.word	0x08003af1
 80039d8:	08003a6f 	.word	0x08003a6f
 80039dc:	08003af1 	.word	0x08003af1
 80039e0:	08003af1 	.word	0x08003af1
 80039e4:	08003af1 	.word	0x08003af1
 80039e8:	08003aaf 	.word	0x08003aaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68b9      	ldr	r1, [r7, #8]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 f9d0 	bl	8003d98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699a      	ldr	r2, [r3, #24]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0208 	orr.w	r2, r2, #8
 8003a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699a      	ldr	r2, [r3, #24]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0204 	bic.w	r2, r2, #4
 8003a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6999      	ldr	r1, [r3, #24]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	691a      	ldr	r2, [r3, #16]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	619a      	str	r2, [r3, #24]
      break;
 8003a2a:	e064      	b.n	8003af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68b9      	ldr	r1, [r7, #8]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 fa16 	bl	8003e64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699a      	ldr	r2, [r3, #24]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699a      	ldr	r2, [r3, #24]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6999      	ldr	r1, [r3, #24]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	021a      	lsls	r2, r3, #8
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	619a      	str	r2, [r3, #24]
      break;
 8003a6c:	e043      	b.n	8003af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68b9      	ldr	r1, [r7, #8]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 fa61 	bl	8003f3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	69da      	ldr	r2, [r3, #28]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0208 	orr.w	r2, r2, #8
 8003a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	69da      	ldr	r2, [r3, #28]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0204 	bic.w	r2, r2, #4
 8003a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	69d9      	ldr	r1, [r3, #28]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	61da      	str	r2, [r3, #28]
      break;
 8003aac:	e023      	b.n	8003af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68b9      	ldr	r1, [r7, #8]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 faab 	bl	8004010 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	69da      	ldr	r2, [r3, #28]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ac8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	69da      	ldr	r2, [r3, #28]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	69d9      	ldr	r1, [r3, #28]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	021a      	lsls	r2, r3, #8
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	61da      	str	r2, [r3, #28]
      break;
 8003aee:	e002      	b.n	8003af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	75fb      	strb	r3, [r7, #23]
      break;
 8003af4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_TIM_ConfigClockSource+0x1c>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e0b4      	b.n	8003c8e <HAL_TIM_ConfigClockSource+0x186>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b5c:	d03e      	beq.n	8003bdc <HAL_TIM_ConfigClockSource+0xd4>
 8003b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b62:	f200 8087 	bhi.w	8003c74 <HAL_TIM_ConfigClockSource+0x16c>
 8003b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b6a:	f000 8086 	beq.w	8003c7a <HAL_TIM_ConfigClockSource+0x172>
 8003b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b72:	d87f      	bhi.n	8003c74 <HAL_TIM_ConfigClockSource+0x16c>
 8003b74:	2b70      	cmp	r3, #112	; 0x70
 8003b76:	d01a      	beq.n	8003bae <HAL_TIM_ConfigClockSource+0xa6>
 8003b78:	2b70      	cmp	r3, #112	; 0x70
 8003b7a:	d87b      	bhi.n	8003c74 <HAL_TIM_ConfigClockSource+0x16c>
 8003b7c:	2b60      	cmp	r3, #96	; 0x60
 8003b7e:	d050      	beq.n	8003c22 <HAL_TIM_ConfigClockSource+0x11a>
 8003b80:	2b60      	cmp	r3, #96	; 0x60
 8003b82:	d877      	bhi.n	8003c74 <HAL_TIM_ConfigClockSource+0x16c>
 8003b84:	2b50      	cmp	r3, #80	; 0x50
 8003b86:	d03c      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0xfa>
 8003b88:	2b50      	cmp	r3, #80	; 0x50
 8003b8a:	d873      	bhi.n	8003c74 <HAL_TIM_ConfigClockSource+0x16c>
 8003b8c:	2b40      	cmp	r3, #64	; 0x40
 8003b8e:	d058      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x13a>
 8003b90:	2b40      	cmp	r3, #64	; 0x40
 8003b92:	d86f      	bhi.n	8003c74 <HAL_TIM_ConfigClockSource+0x16c>
 8003b94:	2b30      	cmp	r3, #48	; 0x30
 8003b96:	d064      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0x15a>
 8003b98:	2b30      	cmp	r3, #48	; 0x30
 8003b9a:	d86b      	bhi.n	8003c74 <HAL_TIM_ConfigClockSource+0x16c>
 8003b9c:	2b20      	cmp	r3, #32
 8003b9e:	d060      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0x15a>
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d867      	bhi.n	8003c74 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d05c      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0x15a>
 8003ba8:	2b10      	cmp	r3, #16
 8003baa:	d05a      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0x15a>
 8003bac:	e062      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6818      	ldr	r0, [r3, #0]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	6899      	ldr	r1, [r3, #8]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f000 faf1 	bl	80041a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	609a      	str	r2, [r3, #8]
      break;
 8003bda:	e04f      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6818      	ldr	r0, [r3, #0]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	6899      	ldr	r1, [r3, #8]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f000 fada 	bl	80041a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bfe:	609a      	str	r2, [r3, #8]
      break;
 8003c00:	e03c      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6818      	ldr	r0, [r3, #0]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	6859      	ldr	r1, [r3, #4]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	f000 fa4e 	bl	80040b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2150      	movs	r1, #80	; 0x50
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 faa7 	bl	800416e <TIM_ITRx_SetConfig>
      break;
 8003c20:	e02c      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6859      	ldr	r1, [r3, #4]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f000 fa6d 	bl	800410e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2160      	movs	r1, #96	; 0x60
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fa97 	bl	800416e <TIM_ITRx_SetConfig>
      break;
 8003c40:	e01c      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	6859      	ldr	r1, [r3, #4]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f000 fa2e 	bl	80040b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2140      	movs	r1, #64	; 0x40
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fa87 	bl	800416e <TIM_ITRx_SetConfig>
      break;
 8003c60:	e00c      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	f000 fa7e 	bl	800416e <TIM_ITRx_SetConfig>
      break;
 8003c72:	e003      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	73fb      	strb	r3, [r7, #15]
      break;
 8003c78:	e000      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a34      	ldr	r2, [pc, #208]	; (8003d7c <TIM_Base_SetConfig+0xe4>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d00f      	beq.n	8003cd0 <TIM_Base_SetConfig+0x38>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb6:	d00b      	beq.n	8003cd0 <TIM_Base_SetConfig+0x38>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a31      	ldr	r2, [pc, #196]	; (8003d80 <TIM_Base_SetConfig+0xe8>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d007      	beq.n	8003cd0 <TIM_Base_SetConfig+0x38>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a30      	ldr	r2, [pc, #192]	; (8003d84 <TIM_Base_SetConfig+0xec>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d003      	beq.n	8003cd0 <TIM_Base_SetConfig+0x38>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a2f      	ldr	r2, [pc, #188]	; (8003d88 <TIM_Base_SetConfig+0xf0>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d108      	bne.n	8003ce2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a25      	ldr	r2, [pc, #148]	; (8003d7c <TIM_Base_SetConfig+0xe4>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d01b      	beq.n	8003d22 <TIM_Base_SetConfig+0x8a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf0:	d017      	beq.n	8003d22 <TIM_Base_SetConfig+0x8a>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a22      	ldr	r2, [pc, #136]	; (8003d80 <TIM_Base_SetConfig+0xe8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d013      	beq.n	8003d22 <TIM_Base_SetConfig+0x8a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a21      	ldr	r2, [pc, #132]	; (8003d84 <TIM_Base_SetConfig+0xec>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00f      	beq.n	8003d22 <TIM_Base_SetConfig+0x8a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a20      	ldr	r2, [pc, #128]	; (8003d88 <TIM_Base_SetConfig+0xf0>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d00b      	beq.n	8003d22 <TIM_Base_SetConfig+0x8a>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a1f      	ldr	r2, [pc, #124]	; (8003d8c <TIM_Base_SetConfig+0xf4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d007      	beq.n	8003d22 <TIM_Base_SetConfig+0x8a>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a1e      	ldr	r2, [pc, #120]	; (8003d90 <TIM_Base_SetConfig+0xf8>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d003      	beq.n	8003d22 <TIM_Base_SetConfig+0x8a>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a1d      	ldr	r2, [pc, #116]	; (8003d94 <TIM_Base_SetConfig+0xfc>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d108      	bne.n	8003d34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a08      	ldr	r2, [pc, #32]	; (8003d7c <TIM_Base_SetConfig+0xe4>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d103      	bne.n	8003d68 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	615a      	str	r2, [r3, #20]
}
 8003d6e:	bf00      	nop
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40010000 	.word	0x40010000
 8003d80:	40000400 	.word	0x40000400
 8003d84:	40000800 	.word	0x40000800
 8003d88:	40000c00 	.word	0x40000c00
 8003d8c:	40014000 	.word	0x40014000
 8003d90:	40014400 	.word	0x40014400
 8003d94:	40014800 	.word	0x40014800

08003d98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	f023 0201 	bic.w	r2, r3, #1
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0303 	bic.w	r3, r3, #3
 8003dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f023 0302 	bic.w	r3, r3, #2
 8003de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a1c      	ldr	r2, [pc, #112]	; (8003e60 <TIM_OC1_SetConfig+0xc8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d10c      	bne.n	8003e0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f023 0308 	bic.w	r3, r3, #8
 8003dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f023 0304 	bic.w	r3, r3, #4
 8003e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a13      	ldr	r2, [pc, #76]	; (8003e60 <TIM_OC1_SetConfig+0xc8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d111      	bne.n	8003e3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	621a      	str	r2, [r3, #32]
}
 8003e54:	bf00      	nop
 8003e56:	371c      	adds	r7, #28
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	40010000 	.word	0x40010000

08003e64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	f023 0210 	bic.w	r2, r3, #16
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	021b      	lsls	r3, r3, #8
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f023 0320 	bic.w	r3, r3, #32
 8003eae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a1e      	ldr	r2, [pc, #120]	; (8003f38 <TIM_OC2_SetConfig+0xd4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d10d      	bne.n	8003ee0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	011b      	lsls	r3, r3, #4
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ede:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a15      	ldr	r2, [pc, #84]	; (8003f38 <TIM_OC2_SetConfig+0xd4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d113      	bne.n	8003f10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003eee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	621a      	str	r2, [r3, #32]
}
 8003f2a:	bf00      	nop
 8003f2c:	371c      	adds	r7, #28
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	40010000 	.word	0x40010000

08003f3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b087      	sub	sp, #28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f023 0303 	bic.w	r3, r3, #3
 8003f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	021b      	lsls	r3, r3, #8
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a1d      	ldr	r2, [pc, #116]	; (800400c <TIM_OC3_SetConfig+0xd0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d10d      	bne.n	8003fb6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	021b      	lsls	r3, r3, #8
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a14      	ldr	r2, [pc, #80]	; (800400c <TIM_OC3_SetConfig+0xd0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d113      	bne.n	8003fe6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	621a      	str	r2, [r3, #32]
}
 8004000:	bf00      	nop
 8004002:	371c      	adds	r7, #28
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	40010000 	.word	0x40010000

08004010 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004010:	b480      	push	{r7}
 8004012:	b087      	sub	sp, #28
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800403e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004046:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	021b      	lsls	r3, r3, #8
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4313      	orrs	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800405a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	031b      	lsls	r3, r3, #12
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	4313      	orrs	r3, r2
 8004066:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a10      	ldr	r2, [pc, #64]	; (80040ac <TIM_OC4_SetConfig+0x9c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d109      	bne.n	8004084 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004076:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	019b      	lsls	r3, r3, #6
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	4313      	orrs	r3, r2
 8004082:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	621a      	str	r2, [r3, #32]
}
 800409e:	bf00      	nop
 80040a0:	371c      	adds	r7, #28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40010000 	.word	0x40010000

080040b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	f023 0201 	bic.w	r2, r3, #1
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f023 030a 	bic.w	r3, r3, #10
 80040ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	621a      	str	r2, [r3, #32]
}
 8004102:	bf00      	nop
 8004104:	371c      	adds	r7, #28
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800410e:	b480      	push	{r7}
 8004110:	b087      	sub	sp, #28
 8004112:	af00      	add	r7, sp, #0
 8004114:	60f8      	str	r0, [r7, #12]
 8004116:	60b9      	str	r1, [r7, #8]
 8004118:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	f023 0210 	bic.w	r2, r3, #16
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004138:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	031b      	lsls	r3, r3, #12
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	4313      	orrs	r3, r2
 8004142:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800414a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	4313      	orrs	r3, r2
 8004154:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	621a      	str	r2, [r3, #32]
}
 8004162:	bf00      	nop
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800416e:	b480      	push	{r7}
 8004170:	b085      	sub	sp, #20
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004184:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4313      	orrs	r3, r2
 800418c:	f043 0307 	orr.w	r3, r3, #7
 8004190:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	609a      	str	r2, [r3, #8]
}
 8004198:	bf00      	nop
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
 80041b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	021a      	lsls	r2, r3, #8
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	431a      	orrs	r2, r3
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	609a      	str	r2, [r3, #8]
}
 80041d8:	bf00      	nop
 80041da:	371c      	adds	r7, #28
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f003 031f 	and.w	r3, r3, #31
 80041f6:	2201      	movs	r2, #1
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a1a      	ldr	r2, [r3, #32]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	43db      	mvns	r3, r3
 8004206:	401a      	ands	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a1a      	ldr	r2, [r3, #32]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f003 031f 	and.w	r3, r3, #31
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	fa01 f303 	lsl.w	r3, r1, r3
 800421c:	431a      	orrs	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	621a      	str	r2, [r3, #32]
}
 8004222:	bf00      	nop
 8004224:	371c      	adds	r7, #28
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
	...

08004230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004244:	2302      	movs	r3, #2
 8004246:	e050      	b.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a1c      	ldr	r2, [pc, #112]	; (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d018      	beq.n	80042be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004294:	d013      	beq.n	80042be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a18      	ldr	r2, [pc, #96]	; (80042fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d00e      	beq.n	80042be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a16      	ldr	r2, [pc, #88]	; (8004300 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d009      	beq.n	80042be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a15      	ldr	r2, [pc, #84]	; (8004304 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d004      	beq.n	80042be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a13      	ldr	r2, [pc, #76]	; (8004308 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d10c      	bne.n	80042d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	40010000 	.word	0x40010000
 80042fc:	40000400 	.word	0x40000400
 8004300:	40000800 	.word	0x40000800
 8004304:	40000c00 	.word	0x40000c00
 8004308:	40014000 	.word	0x40014000

0800430c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e03f      	b.n	800439e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d106      	bne.n	8004338 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fc fea2 	bl	800107c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2224      	movs	r2, #36	; 0x24
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800434e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f929 	bl	80045a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	691a      	ldr	r2, [r3, #16]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004364:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695a      	ldr	r2, [r3, #20]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004374:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004384:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2220      	movs	r2, #32
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b08a      	sub	sp, #40	; 0x28
 80043aa:	af02      	add	r7, sp, #8
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	603b      	str	r3, [r7, #0]
 80043b2:	4613      	mov	r3, r2
 80043b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b20      	cmp	r3, #32
 80043c4:	d17c      	bne.n	80044c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <HAL_UART_Transmit+0x2c>
 80043cc:	88fb      	ldrh	r3, [r7, #6]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e075      	b.n	80044c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d101      	bne.n	80043e4 <HAL_UART_Transmit+0x3e>
 80043e0:	2302      	movs	r3, #2
 80043e2:	e06e      	b.n	80044c2 <HAL_UART_Transmit+0x11c>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2221      	movs	r2, #33	; 0x21
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043fa:	f7fd fc61 	bl	8001cc0 <HAL_GetTick>
 80043fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	88fa      	ldrh	r2, [r7, #6]
 8004404:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	88fa      	ldrh	r2, [r7, #6]
 800440a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004414:	d108      	bne.n	8004428 <HAL_UART_Transmit+0x82>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d104      	bne.n	8004428 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800441e:	2300      	movs	r3, #0
 8004420:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	e003      	b.n	8004430 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800442c:	2300      	movs	r3, #0
 800442e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004438:	e02a      	b.n	8004490 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	2200      	movs	r2, #0
 8004442:	2180      	movs	r1, #128	; 0x80
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 f840 	bl	80044ca <UART_WaitOnFlagUntilTimeout>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e036      	b.n	80044c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10b      	bne.n	8004472 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	461a      	mov	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004468:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	3302      	adds	r3, #2
 800446e:	61bb      	str	r3, [r7, #24]
 8004470:	e007      	b.n	8004482 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	781a      	ldrb	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	3301      	adds	r3, #1
 8004480:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004486:	b29b      	uxth	r3, r3
 8004488:	3b01      	subs	r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1cf      	bne.n	800443a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2200      	movs	r2, #0
 80044a2:	2140      	movs	r1, #64	; 0x40
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 f810 	bl	80044ca <UART_WaitOnFlagUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e006      	b.n	80044c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80044bc:	2300      	movs	r3, #0
 80044be:	e000      	b.n	80044c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80044c0:	2302      	movs	r3, #2
  }
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3720      	adds	r7, #32
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b090      	sub	sp, #64	; 0x40
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	60f8      	str	r0, [r7, #12]
 80044d2:	60b9      	str	r1, [r7, #8]
 80044d4:	603b      	str	r3, [r7, #0]
 80044d6:	4613      	mov	r3, r2
 80044d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044da:	e050      	b.n	800457e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e2:	d04c      	beq.n	800457e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d007      	beq.n	80044fa <UART_WaitOnFlagUntilTimeout+0x30>
 80044ea:	f7fd fbe9 	bl	8001cc0 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d241      	bcs.n	800457e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	330c      	adds	r3, #12
 8004500:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004504:	e853 3f00 	ldrex	r3, [r3]
 8004508:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004510:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	330c      	adds	r3, #12
 8004518:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800451a:	637a      	str	r2, [r7, #52]	; 0x34
 800451c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004520:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004522:	e841 2300 	strex	r3, r2, [r1]
 8004526:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1e5      	bne.n	80044fa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3314      	adds	r3, #20
 8004534:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	e853 3f00 	ldrex	r3, [r3]
 800453c:	613b      	str	r3, [r7, #16]
   return(result);
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f023 0301 	bic.w	r3, r3, #1
 8004544:	63bb      	str	r3, [r7, #56]	; 0x38
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3314      	adds	r3, #20
 800454c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800454e:	623a      	str	r2, [r7, #32]
 8004550:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004552:	69f9      	ldr	r1, [r7, #28]
 8004554:	6a3a      	ldr	r2, [r7, #32]
 8004556:	e841 2300 	strex	r3, r2, [r1]
 800455a:	61bb      	str	r3, [r7, #24]
   return(result);
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1e5      	bne.n	800452e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2220      	movs	r2, #32
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2220      	movs	r2, #32
 800456e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e00f      	b.n	800459e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	4013      	ands	r3, r2
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	429a      	cmp	r2, r3
 800458c:	bf0c      	ite	eq
 800458e:	2301      	moveq	r3, #1
 8004590:	2300      	movne	r3, #0
 8004592:	b2db      	uxtb	r3, r3
 8004594:	461a      	mov	r2, r3
 8004596:	79fb      	ldrb	r3, [r7, #7]
 8004598:	429a      	cmp	r2, r3
 800459a:	d09f      	beq.n	80044dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3740      	adds	r7, #64	; 0x40
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
	...

080045a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045ac:	b0c0      	sub	sp, #256	; 0x100
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80045c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c4:	68d9      	ldr	r1, [r3, #12]
 80045c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	ea40 0301 	orr.w	r3, r0, r1
 80045d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	431a      	orrs	r2, r3
 80045e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	431a      	orrs	r2, r3
 80045e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004600:	f021 010c 	bic.w	r1, r1, #12
 8004604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800460e:	430b      	orrs	r3, r1
 8004610:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800461e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004622:	6999      	ldr	r1, [r3, #24]
 8004624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	ea40 0301 	orr.w	r3, r0, r1
 800462e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	4b8f      	ldr	r3, [pc, #572]	; (8004874 <UART_SetConfig+0x2cc>)
 8004638:	429a      	cmp	r2, r3
 800463a:	d005      	beq.n	8004648 <UART_SetConfig+0xa0>
 800463c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	4b8d      	ldr	r3, [pc, #564]	; (8004878 <UART_SetConfig+0x2d0>)
 8004644:	429a      	cmp	r2, r3
 8004646:	d104      	bne.n	8004652 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004648:	f7fe ffcc 	bl	80035e4 <HAL_RCC_GetPCLK2Freq>
 800464c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004650:	e003      	b.n	800465a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004652:	f7fe ffb3 	bl	80035bc <HAL_RCC_GetPCLK1Freq>
 8004656:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800465a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004664:	f040 810c 	bne.w	8004880 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004668:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800466c:	2200      	movs	r2, #0
 800466e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004672:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004676:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800467a:	4622      	mov	r2, r4
 800467c:	462b      	mov	r3, r5
 800467e:	1891      	adds	r1, r2, r2
 8004680:	65b9      	str	r1, [r7, #88]	; 0x58
 8004682:	415b      	adcs	r3, r3
 8004684:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004686:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800468a:	4621      	mov	r1, r4
 800468c:	eb12 0801 	adds.w	r8, r2, r1
 8004690:	4629      	mov	r1, r5
 8004692:	eb43 0901 	adc.w	r9, r3, r1
 8004696:	f04f 0200 	mov.w	r2, #0
 800469a:	f04f 0300 	mov.w	r3, #0
 800469e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046aa:	4690      	mov	r8, r2
 80046ac:	4699      	mov	r9, r3
 80046ae:	4623      	mov	r3, r4
 80046b0:	eb18 0303 	adds.w	r3, r8, r3
 80046b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046b8:	462b      	mov	r3, r5
 80046ba:	eb49 0303 	adc.w	r3, r9, r3
 80046be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80046ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80046d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80046d6:	460b      	mov	r3, r1
 80046d8:	18db      	adds	r3, r3, r3
 80046da:	653b      	str	r3, [r7, #80]	; 0x50
 80046dc:	4613      	mov	r3, r2
 80046de:	eb42 0303 	adc.w	r3, r2, r3
 80046e2:	657b      	str	r3, [r7, #84]	; 0x54
 80046e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80046e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80046ec:	f7fb fdc8 	bl	8000280 <__aeabi_uldivmod>
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	4b61      	ldr	r3, [pc, #388]	; (800487c <UART_SetConfig+0x2d4>)
 80046f6:	fba3 2302 	umull	r2, r3, r3, r2
 80046fa:	095b      	lsrs	r3, r3, #5
 80046fc:	011c      	lsls	r4, r3, #4
 80046fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004702:	2200      	movs	r2, #0
 8004704:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004708:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800470c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004710:	4642      	mov	r2, r8
 8004712:	464b      	mov	r3, r9
 8004714:	1891      	adds	r1, r2, r2
 8004716:	64b9      	str	r1, [r7, #72]	; 0x48
 8004718:	415b      	adcs	r3, r3
 800471a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800471c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004720:	4641      	mov	r1, r8
 8004722:	eb12 0a01 	adds.w	sl, r2, r1
 8004726:	4649      	mov	r1, r9
 8004728:	eb43 0b01 	adc.w	fp, r3, r1
 800472c:	f04f 0200 	mov.w	r2, #0
 8004730:	f04f 0300 	mov.w	r3, #0
 8004734:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004738:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800473c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004740:	4692      	mov	sl, r2
 8004742:	469b      	mov	fp, r3
 8004744:	4643      	mov	r3, r8
 8004746:	eb1a 0303 	adds.w	r3, sl, r3
 800474a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800474e:	464b      	mov	r3, r9
 8004750:	eb4b 0303 	adc.w	r3, fp, r3
 8004754:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004764:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004768:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800476c:	460b      	mov	r3, r1
 800476e:	18db      	adds	r3, r3, r3
 8004770:	643b      	str	r3, [r7, #64]	; 0x40
 8004772:	4613      	mov	r3, r2
 8004774:	eb42 0303 	adc.w	r3, r2, r3
 8004778:	647b      	str	r3, [r7, #68]	; 0x44
 800477a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800477e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004782:	f7fb fd7d 	bl	8000280 <__aeabi_uldivmod>
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	4611      	mov	r1, r2
 800478c:	4b3b      	ldr	r3, [pc, #236]	; (800487c <UART_SetConfig+0x2d4>)
 800478e:	fba3 2301 	umull	r2, r3, r3, r1
 8004792:	095b      	lsrs	r3, r3, #5
 8004794:	2264      	movs	r2, #100	; 0x64
 8004796:	fb02 f303 	mul.w	r3, r2, r3
 800479a:	1acb      	subs	r3, r1, r3
 800479c:	00db      	lsls	r3, r3, #3
 800479e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80047a2:	4b36      	ldr	r3, [pc, #216]	; (800487c <UART_SetConfig+0x2d4>)
 80047a4:	fba3 2302 	umull	r2, r3, r3, r2
 80047a8:	095b      	lsrs	r3, r3, #5
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047b0:	441c      	add	r4, r3
 80047b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047b6:	2200      	movs	r2, #0
 80047b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80047c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80047c4:	4642      	mov	r2, r8
 80047c6:	464b      	mov	r3, r9
 80047c8:	1891      	adds	r1, r2, r2
 80047ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80047cc:	415b      	adcs	r3, r3
 80047ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047d4:	4641      	mov	r1, r8
 80047d6:	1851      	adds	r1, r2, r1
 80047d8:	6339      	str	r1, [r7, #48]	; 0x30
 80047da:	4649      	mov	r1, r9
 80047dc:	414b      	adcs	r3, r1
 80047de:	637b      	str	r3, [r7, #52]	; 0x34
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80047ec:	4659      	mov	r1, fp
 80047ee:	00cb      	lsls	r3, r1, #3
 80047f0:	4651      	mov	r1, sl
 80047f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047f6:	4651      	mov	r1, sl
 80047f8:	00ca      	lsls	r2, r1, #3
 80047fa:	4610      	mov	r0, r2
 80047fc:	4619      	mov	r1, r3
 80047fe:	4603      	mov	r3, r0
 8004800:	4642      	mov	r2, r8
 8004802:	189b      	adds	r3, r3, r2
 8004804:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004808:	464b      	mov	r3, r9
 800480a:	460a      	mov	r2, r1
 800480c:	eb42 0303 	adc.w	r3, r2, r3
 8004810:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004820:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004824:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004828:	460b      	mov	r3, r1
 800482a:	18db      	adds	r3, r3, r3
 800482c:	62bb      	str	r3, [r7, #40]	; 0x28
 800482e:	4613      	mov	r3, r2
 8004830:	eb42 0303 	adc.w	r3, r2, r3
 8004834:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004836:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800483a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800483e:	f7fb fd1f 	bl	8000280 <__aeabi_uldivmod>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4b0d      	ldr	r3, [pc, #52]	; (800487c <UART_SetConfig+0x2d4>)
 8004848:	fba3 1302 	umull	r1, r3, r3, r2
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	2164      	movs	r1, #100	; 0x64
 8004850:	fb01 f303 	mul.w	r3, r1, r3
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	3332      	adds	r3, #50	; 0x32
 800485a:	4a08      	ldr	r2, [pc, #32]	; (800487c <UART_SetConfig+0x2d4>)
 800485c:	fba2 2303 	umull	r2, r3, r2, r3
 8004860:	095b      	lsrs	r3, r3, #5
 8004862:	f003 0207 	and.w	r2, r3, #7
 8004866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4422      	add	r2, r4
 800486e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004870:	e105      	b.n	8004a7e <UART_SetConfig+0x4d6>
 8004872:	bf00      	nop
 8004874:	40011000 	.word	0x40011000
 8004878:	40011400 	.word	0x40011400
 800487c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004880:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004884:	2200      	movs	r2, #0
 8004886:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800488a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800488e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004892:	4642      	mov	r2, r8
 8004894:	464b      	mov	r3, r9
 8004896:	1891      	adds	r1, r2, r2
 8004898:	6239      	str	r1, [r7, #32]
 800489a:	415b      	adcs	r3, r3
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
 800489e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048a2:	4641      	mov	r1, r8
 80048a4:	1854      	adds	r4, r2, r1
 80048a6:	4649      	mov	r1, r9
 80048a8:	eb43 0501 	adc.w	r5, r3, r1
 80048ac:	f04f 0200 	mov.w	r2, #0
 80048b0:	f04f 0300 	mov.w	r3, #0
 80048b4:	00eb      	lsls	r3, r5, #3
 80048b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048ba:	00e2      	lsls	r2, r4, #3
 80048bc:	4614      	mov	r4, r2
 80048be:	461d      	mov	r5, r3
 80048c0:	4643      	mov	r3, r8
 80048c2:	18e3      	adds	r3, r4, r3
 80048c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048c8:	464b      	mov	r3, r9
 80048ca:	eb45 0303 	adc.w	r3, r5, r3
 80048ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80048d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80048de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80048e2:	f04f 0200 	mov.w	r2, #0
 80048e6:	f04f 0300 	mov.w	r3, #0
 80048ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80048ee:	4629      	mov	r1, r5
 80048f0:	008b      	lsls	r3, r1, #2
 80048f2:	4621      	mov	r1, r4
 80048f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048f8:	4621      	mov	r1, r4
 80048fa:	008a      	lsls	r2, r1, #2
 80048fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004900:	f7fb fcbe 	bl	8000280 <__aeabi_uldivmod>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4b60      	ldr	r3, [pc, #384]	; (8004a8c <UART_SetConfig+0x4e4>)
 800490a:	fba3 2302 	umull	r2, r3, r3, r2
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	011c      	lsls	r4, r3, #4
 8004912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004916:	2200      	movs	r2, #0
 8004918:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800491c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004920:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004924:	4642      	mov	r2, r8
 8004926:	464b      	mov	r3, r9
 8004928:	1891      	adds	r1, r2, r2
 800492a:	61b9      	str	r1, [r7, #24]
 800492c:	415b      	adcs	r3, r3
 800492e:	61fb      	str	r3, [r7, #28]
 8004930:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004934:	4641      	mov	r1, r8
 8004936:	1851      	adds	r1, r2, r1
 8004938:	6139      	str	r1, [r7, #16]
 800493a:	4649      	mov	r1, r9
 800493c:	414b      	adcs	r3, r1
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	f04f 0200 	mov.w	r2, #0
 8004944:	f04f 0300 	mov.w	r3, #0
 8004948:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800494c:	4659      	mov	r1, fp
 800494e:	00cb      	lsls	r3, r1, #3
 8004950:	4651      	mov	r1, sl
 8004952:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004956:	4651      	mov	r1, sl
 8004958:	00ca      	lsls	r2, r1, #3
 800495a:	4610      	mov	r0, r2
 800495c:	4619      	mov	r1, r3
 800495e:	4603      	mov	r3, r0
 8004960:	4642      	mov	r2, r8
 8004962:	189b      	adds	r3, r3, r2
 8004964:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004968:	464b      	mov	r3, r9
 800496a:	460a      	mov	r2, r1
 800496c:	eb42 0303 	adc.w	r3, r2, r3
 8004970:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	67bb      	str	r3, [r7, #120]	; 0x78
 800497e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800498c:	4649      	mov	r1, r9
 800498e:	008b      	lsls	r3, r1, #2
 8004990:	4641      	mov	r1, r8
 8004992:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004996:	4641      	mov	r1, r8
 8004998:	008a      	lsls	r2, r1, #2
 800499a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800499e:	f7fb fc6f 	bl	8000280 <__aeabi_uldivmod>
 80049a2:	4602      	mov	r2, r0
 80049a4:	460b      	mov	r3, r1
 80049a6:	4b39      	ldr	r3, [pc, #228]	; (8004a8c <UART_SetConfig+0x4e4>)
 80049a8:	fba3 1302 	umull	r1, r3, r3, r2
 80049ac:	095b      	lsrs	r3, r3, #5
 80049ae:	2164      	movs	r1, #100	; 0x64
 80049b0:	fb01 f303 	mul.w	r3, r1, r3
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	3332      	adds	r3, #50	; 0x32
 80049ba:	4a34      	ldr	r2, [pc, #208]	; (8004a8c <UART_SetConfig+0x4e4>)
 80049bc:	fba2 2303 	umull	r2, r3, r2, r3
 80049c0:	095b      	lsrs	r3, r3, #5
 80049c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049c6:	441c      	add	r4, r3
 80049c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049cc:	2200      	movs	r2, #0
 80049ce:	673b      	str	r3, [r7, #112]	; 0x70
 80049d0:	677a      	str	r2, [r7, #116]	; 0x74
 80049d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80049d6:	4642      	mov	r2, r8
 80049d8:	464b      	mov	r3, r9
 80049da:	1891      	adds	r1, r2, r2
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	415b      	adcs	r3, r3
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049e6:	4641      	mov	r1, r8
 80049e8:	1851      	adds	r1, r2, r1
 80049ea:	6039      	str	r1, [r7, #0]
 80049ec:	4649      	mov	r1, r9
 80049ee:	414b      	adcs	r3, r1
 80049f0:	607b      	str	r3, [r7, #4]
 80049f2:	f04f 0200 	mov.w	r2, #0
 80049f6:	f04f 0300 	mov.w	r3, #0
 80049fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049fe:	4659      	mov	r1, fp
 8004a00:	00cb      	lsls	r3, r1, #3
 8004a02:	4651      	mov	r1, sl
 8004a04:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a08:	4651      	mov	r1, sl
 8004a0a:	00ca      	lsls	r2, r1, #3
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	4619      	mov	r1, r3
 8004a10:	4603      	mov	r3, r0
 8004a12:	4642      	mov	r2, r8
 8004a14:	189b      	adds	r3, r3, r2
 8004a16:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a18:	464b      	mov	r3, r9
 8004a1a:	460a      	mov	r2, r1
 8004a1c:	eb42 0303 	adc.w	r3, r2, r3
 8004a20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	663b      	str	r3, [r7, #96]	; 0x60
 8004a2c:	667a      	str	r2, [r7, #100]	; 0x64
 8004a2e:	f04f 0200 	mov.w	r2, #0
 8004a32:	f04f 0300 	mov.w	r3, #0
 8004a36:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a3a:	4649      	mov	r1, r9
 8004a3c:	008b      	lsls	r3, r1, #2
 8004a3e:	4641      	mov	r1, r8
 8004a40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a44:	4641      	mov	r1, r8
 8004a46:	008a      	lsls	r2, r1, #2
 8004a48:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a4c:	f7fb fc18 	bl	8000280 <__aeabi_uldivmod>
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4b0d      	ldr	r3, [pc, #52]	; (8004a8c <UART_SetConfig+0x4e4>)
 8004a56:	fba3 1302 	umull	r1, r3, r3, r2
 8004a5a:	095b      	lsrs	r3, r3, #5
 8004a5c:	2164      	movs	r1, #100	; 0x64
 8004a5e:	fb01 f303 	mul.w	r3, r1, r3
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	3332      	adds	r3, #50	; 0x32
 8004a68:	4a08      	ldr	r2, [pc, #32]	; (8004a8c <UART_SetConfig+0x4e4>)
 8004a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6e:	095b      	lsrs	r3, r3, #5
 8004a70:	f003 020f 	and.w	r2, r3, #15
 8004a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4422      	add	r2, r4
 8004a7c:	609a      	str	r2, [r3, #8]
}
 8004a7e:	bf00      	nop
 8004a80:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a84:	46bd      	mov	sp, r7
 8004a86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a8a:	bf00      	nop
 8004a8c:	51eb851f 	.word	0x51eb851f

08004a90 <__errno>:
 8004a90:	4b01      	ldr	r3, [pc, #4]	; (8004a98 <__errno+0x8>)
 8004a92:	6818      	ldr	r0, [r3, #0]
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	2000000c 	.word	0x2000000c

08004a9c <__libc_init_array>:
 8004a9c:	b570      	push	{r4, r5, r6, lr}
 8004a9e:	4d0d      	ldr	r5, [pc, #52]	; (8004ad4 <__libc_init_array+0x38>)
 8004aa0:	4c0d      	ldr	r4, [pc, #52]	; (8004ad8 <__libc_init_array+0x3c>)
 8004aa2:	1b64      	subs	r4, r4, r5
 8004aa4:	10a4      	asrs	r4, r4, #2
 8004aa6:	2600      	movs	r6, #0
 8004aa8:	42a6      	cmp	r6, r4
 8004aaa:	d109      	bne.n	8004ac0 <__libc_init_array+0x24>
 8004aac:	4d0b      	ldr	r5, [pc, #44]	; (8004adc <__libc_init_array+0x40>)
 8004aae:	4c0c      	ldr	r4, [pc, #48]	; (8004ae0 <__libc_init_array+0x44>)
 8004ab0:	f000 fc8e 	bl	80053d0 <_init>
 8004ab4:	1b64      	subs	r4, r4, r5
 8004ab6:	10a4      	asrs	r4, r4, #2
 8004ab8:	2600      	movs	r6, #0
 8004aba:	42a6      	cmp	r6, r4
 8004abc:	d105      	bne.n	8004aca <__libc_init_array+0x2e>
 8004abe:	bd70      	pop	{r4, r5, r6, pc}
 8004ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ac4:	4798      	blx	r3
 8004ac6:	3601      	adds	r6, #1
 8004ac8:	e7ee      	b.n	8004aa8 <__libc_init_array+0xc>
 8004aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ace:	4798      	blx	r3
 8004ad0:	3601      	adds	r6, #1
 8004ad2:	e7f2      	b.n	8004aba <__libc_init_array+0x1e>
 8004ad4:	080056c4 	.word	0x080056c4
 8004ad8:	080056c4 	.word	0x080056c4
 8004adc:	080056c4 	.word	0x080056c4
 8004ae0:	080056c8 	.word	0x080056c8

08004ae4 <memset>:
 8004ae4:	4402      	add	r2, r0
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d100      	bne.n	8004aee <memset+0xa>
 8004aec:	4770      	bx	lr
 8004aee:	f803 1b01 	strb.w	r1, [r3], #1
 8004af2:	e7f9      	b.n	8004ae8 <memset+0x4>

08004af4 <siprintf>:
 8004af4:	b40e      	push	{r1, r2, r3}
 8004af6:	b500      	push	{lr}
 8004af8:	b09c      	sub	sp, #112	; 0x70
 8004afa:	ab1d      	add	r3, sp, #116	; 0x74
 8004afc:	9002      	str	r0, [sp, #8]
 8004afe:	9006      	str	r0, [sp, #24]
 8004b00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b04:	4809      	ldr	r0, [pc, #36]	; (8004b2c <siprintf+0x38>)
 8004b06:	9107      	str	r1, [sp, #28]
 8004b08:	9104      	str	r1, [sp, #16]
 8004b0a:	4909      	ldr	r1, [pc, #36]	; (8004b30 <siprintf+0x3c>)
 8004b0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b10:	9105      	str	r1, [sp, #20]
 8004b12:	6800      	ldr	r0, [r0, #0]
 8004b14:	9301      	str	r3, [sp, #4]
 8004b16:	a902      	add	r1, sp, #8
 8004b18:	f000 f868 	bl	8004bec <_svfiprintf_r>
 8004b1c:	9b02      	ldr	r3, [sp, #8]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	701a      	strb	r2, [r3, #0]
 8004b22:	b01c      	add	sp, #112	; 0x70
 8004b24:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b28:	b003      	add	sp, #12
 8004b2a:	4770      	bx	lr
 8004b2c:	2000000c 	.word	0x2000000c
 8004b30:	ffff0208 	.word	0xffff0208

08004b34 <__ssputs_r>:
 8004b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b38:	688e      	ldr	r6, [r1, #8]
 8004b3a:	429e      	cmp	r6, r3
 8004b3c:	4682      	mov	sl, r0
 8004b3e:	460c      	mov	r4, r1
 8004b40:	4690      	mov	r8, r2
 8004b42:	461f      	mov	r7, r3
 8004b44:	d838      	bhi.n	8004bb8 <__ssputs_r+0x84>
 8004b46:	898a      	ldrh	r2, [r1, #12]
 8004b48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b4c:	d032      	beq.n	8004bb4 <__ssputs_r+0x80>
 8004b4e:	6825      	ldr	r5, [r4, #0]
 8004b50:	6909      	ldr	r1, [r1, #16]
 8004b52:	eba5 0901 	sub.w	r9, r5, r1
 8004b56:	6965      	ldr	r5, [r4, #20]
 8004b58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b60:	3301      	adds	r3, #1
 8004b62:	444b      	add	r3, r9
 8004b64:	106d      	asrs	r5, r5, #1
 8004b66:	429d      	cmp	r5, r3
 8004b68:	bf38      	it	cc
 8004b6a:	461d      	movcc	r5, r3
 8004b6c:	0553      	lsls	r3, r2, #21
 8004b6e:	d531      	bpl.n	8004bd4 <__ssputs_r+0xa0>
 8004b70:	4629      	mov	r1, r5
 8004b72:	f000 fb63 	bl	800523c <_malloc_r>
 8004b76:	4606      	mov	r6, r0
 8004b78:	b950      	cbnz	r0, 8004b90 <__ssputs_r+0x5c>
 8004b7a:	230c      	movs	r3, #12
 8004b7c:	f8ca 3000 	str.w	r3, [sl]
 8004b80:	89a3      	ldrh	r3, [r4, #12]
 8004b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b86:	81a3      	strh	r3, [r4, #12]
 8004b88:	f04f 30ff 	mov.w	r0, #4294967295
 8004b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b90:	6921      	ldr	r1, [r4, #16]
 8004b92:	464a      	mov	r2, r9
 8004b94:	f000 fabe 	bl	8005114 <memcpy>
 8004b98:	89a3      	ldrh	r3, [r4, #12]
 8004b9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba2:	81a3      	strh	r3, [r4, #12]
 8004ba4:	6126      	str	r6, [r4, #16]
 8004ba6:	6165      	str	r5, [r4, #20]
 8004ba8:	444e      	add	r6, r9
 8004baa:	eba5 0509 	sub.w	r5, r5, r9
 8004bae:	6026      	str	r6, [r4, #0]
 8004bb0:	60a5      	str	r5, [r4, #8]
 8004bb2:	463e      	mov	r6, r7
 8004bb4:	42be      	cmp	r6, r7
 8004bb6:	d900      	bls.n	8004bba <__ssputs_r+0x86>
 8004bb8:	463e      	mov	r6, r7
 8004bba:	6820      	ldr	r0, [r4, #0]
 8004bbc:	4632      	mov	r2, r6
 8004bbe:	4641      	mov	r1, r8
 8004bc0:	f000 fab6 	bl	8005130 <memmove>
 8004bc4:	68a3      	ldr	r3, [r4, #8]
 8004bc6:	1b9b      	subs	r3, r3, r6
 8004bc8:	60a3      	str	r3, [r4, #8]
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	4433      	add	r3, r6
 8004bce:	6023      	str	r3, [r4, #0]
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	e7db      	b.n	8004b8c <__ssputs_r+0x58>
 8004bd4:	462a      	mov	r2, r5
 8004bd6:	f000 fba5 	bl	8005324 <_realloc_r>
 8004bda:	4606      	mov	r6, r0
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	d1e1      	bne.n	8004ba4 <__ssputs_r+0x70>
 8004be0:	6921      	ldr	r1, [r4, #16]
 8004be2:	4650      	mov	r0, sl
 8004be4:	f000 fabe 	bl	8005164 <_free_r>
 8004be8:	e7c7      	b.n	8004b7a <__ssputs_r+0x46>
	...

08004bec <_svfiprintf_r>:
 8004bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf0:	4698      	mov	r8, r3
 8004bf2:	898b      	ldrh	r3, [r1, #12]
 8004bf4:	061b      	lsls	r3, r3, #24
 8004bf6:	b09d      	sub	sp, #116	; 0x74
 8004bf8:	4607      	mov	r7, r0
 8004bfa:	460d      	mov	r5, r1
 8004bfc:	4614      	mov	r4, r2
 8004bfe:	d50e      	bpl.n	8004c1e <_svfiprintf_r+0x32>
 8004c00:	690b      	ldr	r3, [r1, #16]
 8004c02:	b963      	cbnz	r3, 8004c1e <_svfiprintf_r+0x32>
 8004c04:	2140      	movs	r1, #64	; 0x40
 8004c06:	f000 fb19 	bl	800523c <_malloc_r>
 8004c0a:	6028      	str	r0, [r5, #0]
 8004c0c:	6128      	str	r0, [r5, #16]
 8004c0e:	b920      	cbnz	r0, 8004c1a <_svfiprintf_r+0x2e>
 8004c10:	230c      	movs	r3, #12
 8004c12:	603b      	str	r3, [r7, #0]
 8004c14:	f04f 30ff 	mov.w	r0, #4294967295
 8004c18:	e0d1      	b.n	8004dbe <_svfiprintf_r+0x1d2>
 8004c1a:	2340      	movs	r3, #64	; 0x40
 8004c1c:	616b      	str	r3, [r5, #20]
 8004c1e:	2300      	movs	r3, #0
 8004c20:	9309      	str	r3, [sp, #36]	; 0x24
 8004c22:	2320      	movs	r3, #32
 8004c24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c28:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c2c:	2330      	movs	r3, #48	; 0x30
 8004c2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004dd8 <_svfiprintf_r+0x1ec>
 8004c32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c36:	f04f 0901 	mov.w	r9, #1
 8004c3a:	4623      	mov	r3, r4
 8004c3c:	469a      	mov	sl, r3
 8004c3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c42:	b10a      	cbz	r2, 8004c48 <_svfiprintf_r+0x5c>
 8004c44:	2a25      	cmp	r2, #37	; 0x25
 8004c46:	d1f9      	bne.n	8004c3c <_svfiprintf_r+0x50>
 8004c48:	ebba 0b04 	subs.w	fp, sl, r4
 8004c4c:	d00b      	beq.n	8004c66 <_svfiprintf_r+0x7a>
 8004c4e:	465b      	mov	r3, fp
 8004c50:	4622      	mov	r2, r4
 8004c52:	4629      	mov	r1, r5
 8004c54:	4638      	mov	r0, r7
 8004c56:	f7ff ff6d 	bl	8004b34 <__ssputs_r>
 8004c5a:	3001      	adds	r0, #1
 8004c5c:	f000 80aa 	beq.w	8004db4 <_svfiprintf_r+0x1c8>
 8004c60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c62:	445a      	add	r2, fp
 8004c64:	9209      	str	r2, [sp, #36]	; 0x24
 8004c66:	f89a 3000 	ldrb.w	r3, [sl]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 80a2 	beq.w	8004db4 <_svfiprintf_r+0x1c8>
 8004c70:	2300      	movs	r3, #0
 8004c72:	f04f 32ff 	mov.w	r2, #4294967295
 8004c76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c7a:	f10a 0a01 	add.w	sl, sl, #1
 8004c7e:	9304      	str	r3, [sp, #16]
 8004c80:	9307      	str	r3, [sp, #28]
 8004c82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c86:	931a      	str	r3, [sp, #104]	; 0x68
 8004c88:	4654      	mov	r4, sl
 8004c8a:	2205      	movs	r2, #5
 8004c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c90:	4851      	ldr	r0, [pc, #324]	; (8004dd8 <_svfiprintf_r+0x1ec>)
 8004c92:	f7fb faa5 	bl	80001e0 <memchr>
 8004c96:	9a04      	ldr	r2, [sp, #16]
 8004c98:	b9d8      	cbnz	r0, 8004cd2 <_svfiprintf_r+0xe6>
 8004c9a:	06d0      	lsls	r0, r2, #27
 8004c9c:	bf44      	itt	mi
 8004c9e:	2320      	movmi	r3, #32
 8004ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ca4:	0711      	lsls	r1, r2, #28
 8004ca6:	bf44      	itt	mi
 8004ca8:	232b      	movmi	r3, #43	; 0x2b
 8004caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cae:	f89a 3000 	ldrb.w	r3, [sl]
 8004cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8004cb4:	d015      	beq.n	8004ce2 <_svfiprintf_r+0xf6>
 8004cb6:	9a07      	ldr	r2, [sp, #28]
 8004cb8:	4654      	mov	r4, sl
 8004cba:	2000      	movs	r0, #0
 8004cbc:	f04f 0c0a 	mov.w	ip, #10
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cc6:	3b30      	subs	r3, #48	; 0x30
 8004cc8:	2b09      	cmp	r3, #9
 8004cca:	d94e      	bls.n	8004d6a <_svfiprintf_r+0x17e>
 8004ccc:	b1b0      	cbz	r0, 8004cfc <_svfiprintf_r+0x110>
 8004cce:	9207      	str	r2, [sp, #28]
 8004cd0:	e014      	b.n	8004cfc <_svfiprintf_r+0x110>
 8004cd2:	eba0 0308 	sub.w	r3, r0, r8
 8004cd6:	fa09 f303 	lsl.w	r3, r9, r3
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	9304      	str	r3, [sp, #16]
 8004cde:	46a2      	mov	sl, r4
 8004ce0:	e7d2      	b.n	8004c88 <_svfiprintf_r+0x9c>
 8004ce2:	9b03      	ldr	r3, [sp, #12]
 8004ce4:	1d19      	adds	r1, r3, #4
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	9103      	str	r1, [sp, #12]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	bfbb      	ittet	lt
 8004cee:	425b      	neglt	r3, r3
 8004cf0:	f042 0202 	orrlt.w	r2, r2, #2
 8004cf4:	9307      	strge	r3, [sp, #28]
 8004cf6:	9307      	strlt	r3, [sp, #28]
 8004cf8:	bfb8      	it	lt
 8004cfa:	9204      	strlt	r2, [sp, #16]
 8004cfc:	7823      	ldrb	r3, [r4, #0]
 8004cfe:	2b2e      	cmp	r3, #46	; 0x2e
 8004d00:	d10c      	bne.n	8004d1c <_svfiprintf_r+0x130>
 8004d02:	7863      	ldrb	r3, [r4, #1]
 8004d04:	2b2a      	cmp	r3, #42	; 0x2a
 8004d06:	d135      	bne.n	8004d74 <_svfiprintf_r+0x188>
 8004d08:	9b03      	ldr	r3, [sp, #12]
 8004d0a:	1d1a      	adds	r2, r3, #4
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	9203      	str	r2, [sp, #12]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	bfb8      	it	lt
 8004d14:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d18:	3402      	adds	r4, #2
 8004d1a:	9305      	str	r3, [sp, #20]
 8004d1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004de8 <_svfiprintf_r+0x1fc>
 8004d20:	7821      	ldrb	r1, [r4, #0]
 8004d22:	2203      	movs	r2, #3
 8004d24:	4650      	mov	r0, sl
 8004d26:	f7fb fa5b 	bl	80001e0 <memchr>
 8004d2a:	b140      	cbz	r0, 8004d3e <_svfiprintf_r+0x152>
 8004d2c:	2340      	movs	r3, #64	; 0x40
 8004d2e:	eba0 000a 	sub.w	r0, r0, sl
 8004d32:	fa03 f000 	lsl.w	r0, r3, r0
 8004d36:	9b04      	ldr	r3, [sp, #16]
 8004d38:	4303      	orrs	r3, r0
 8004d3a:	3401      	adds	r4, #1
 8004d3c:	9304      	str	r3, [sp, #16]
 8004d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d42:	4826      	ldr	r0, [pc, #152]	; (8004ddc <_svfiprintf_r+0x1f0>)
 8004d44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d48:	2206      	movs	r2, #6
 8004d4a:	f7fb fa49 	bl	80001e0 <memchr>
 8004d4e:	2800      	cmp	r0, #0
 8004d50:	d038      	beq.n	8004dc4 <_svfiprintf_r+0x1d8>
 8004d52:	4b23      	ldr	r3, [pc, #140]	; (8004de0 <_svfiprintf_r+0x1f4>)
 8004d54:	bb1b      	cbnz	r3, 8004d9e <_svfiprintf_r+0x1b2>
 8004d56:	9b03      	ldr	r3, [sp, #12]
 8004d58:	3307      	adds	r3, #7
 8004d5a:	f023 0307 	bic.w	r3, r3, #7
 8004d5e:	3308      	adds	r3, #8
 8004d60:	9303      	str	r3, [sp, #12]
 8004d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d64:	4433      	add	r3, r6
 8004d66:	9309      	str	r3, [sp, #36]	; 0x24
 8004d68:	e767      	b.n	8004c3a <_svfiprintf_r+0x4e>
 8004d6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d6e:	460c      	mov	r4, r1
 8004d70:	2001      	movs	r0, #1
 8004d72:	e7a5      	b.n	8004cc0 <_svfiprintf_r+0xd4>
 8004d74:	2300      	movs	r3, #0
 8004d76:	3401      	adds	r4, #1
 8004d78:	9305      	str	r3, [sp, #20]
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	f04f 0c0a 	mov.w	ip, #10
 8004d80:	4620      	mov	r0, r4
 8004d82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d86:	3a30      	subs	r2, #48	; 0x30
 8004d88:	2a09      	cmp	r2, #9
 8004d8a:	d903      	bls.n	8004d94 <_svfiprintf_r+0x1a8>
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0c5      	beq.n	8004d1c <_svfiprintf_r+0x130>
 8004d90:	9105      	str	r1, [sp, #20]
 8004d92:	e7c3      	b.n	8004d1c <_svfiprintf_r+0x130>
 8004d94:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d98:	4604      	mov	r4, r0
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e7f0      	b.n	8004d80 <_svfiprintf_r+0x194>
 8004d9e:	ab03      	add	r3, sp, #12
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	462a      	mov	r2, r5
 8004da4:	4b0f      	ldr	r3, [pc, #60]	; (8004de4 <_svfiprintf_r+0x1f8>)
 8004da6:	a904      	add	r1, sp, #16
 8004da8:	4638      	mov	r0, r7
 8004daa:	f3af 8000 	nop.w
 8004dae:	1c42      	adds	r2, r0, #1
 8004db0:	4606      	mov	r6, r0
 8004db2:	d1d6      	bne.n	8004d62 <_svfiprintf_r+0x176>
 8004db4:	89ab      	ldrh	r3, [r5, #12]
 8004db6:	065b      	lsls	r3, r3, #25
 8004db8:	f53f af2c 	bmi.w	8004c14 <_svfiprintf_r+0x28>
 8004dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004dbe:	b01d      	add	sp, #116	; 0x74
 8004dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dc4:	ab03      	add	r3, sp, #12
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	462a      	mov	r2, r5
 8004dca:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <_svfiprintf_r+0x1f8>)
 8004dcc:	a904      	add	r1, sp, #16
 8004dce:	4638      	mov	r0, r7
 8004dd0:	f000 f87a 	bl	8004ec8 <_printf_i>
 8004dd4:	e7eb      	b.n	8004dae <_svfiprintf_r+0x1c2>
 8004dd6:	bf00      	nop
 8004dd8:	08005688 	.word	0x08005688
 8004ddc:	08005692 	.word	0x08005692
 8004de0:	00000000 	.word	0x00000000
 8004de4:	08004b35 	.word	0x08004b35
 8004de8:	0800568e 	.word	0x0800568e

08004dec <_printf_common>:
 8004dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004df0:	4616      	mov	r6, r2
 8004df2:	4699      	mov	r9, r3
 8004df4:	688a      	ldr	r2, [r1, #8]
 8004df6:	690b      	ldr	r3, [r1, #16]
 8004df8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	bfb8      	it	lt
 8004e00:	4613      	movlt	r3, r2
 8004e02:	6033      	str	r3, [r6, #0]
 8004e04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e08:	4607      	mov	r7, r0
 8004e0a:	460c      	mov	r4, r1
 8004e0c:	b10a      	cbz	r2, 8004e12 <_printf_common+0x26>
 8004e0e:	3301      	adds	r3, #1
 8004e10:	6033      	str	r3, [r6, #0]
 8004e12:	6823      	ldr	r3, [r4, #0]
 8004e14:	0699      	lsls	r1, r3, #26
 8004e16:	bf42      	ittt	mi
 8004e18:	6833      	ldrmi	r3, [r6, #0]
 8004e1a:	3302      	addmi	r3, #2
 8004e1c:	6033      	strmi	r3, [r6, #0]
 8004e1e:	6825      	ldr	r5, [r4, #0]
 8004e20:	f015 0506 	ands.w	r5, r5, #6
 8004e24:	d106      	bne.n	8004e34 <_printf_common+0x48>
 8004e26:	f104 0a19 	add.w	sl, r4, #25
 8004e2a:	68e3      	ldr	r3, [r4, #12]
 8004e2c:	6832      	ldr	r2, [r6, #0]
 8004e2e:	1a9b      	subs	r3, r3, r2
 8004e30:	42ab      	cmp	r3, r5
 8004e32:	dc26      	bgt.n	8004e82 <_printf_common+0x96>
 8004e34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e38:	1e13      	subs	r3, r2, #0
 8004e3a:	6822      	ldr	r2, [r4, #0]
 8004e3c:	bf18      	it	ne
 8004e3e:	2301      	movne	r3, #1
 8004e40:	0692      	lsls	r2, r2, #26
 8004e42:	d42b      	bmi.n	8004e9c <_printf_common+0xb0>
 8004e44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e48:	4649      	mov	r1, r9
 8004e4a:	4638      	mov	r0, r7
 8004e4c:	47c0      	blx	r8
 8004e4e:	3001      	adds	r0, #1
 8004e50:	d01e      	beq.n	8004e90 <_printf_common+0xa4>
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	68e5      	ldr	r5, [r4, #12]
 8004e56:	6832      	ldr	r2, [r6, #0]
 8004e58:	f003 0306 	and.w	r3, r3, #6
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	bf08      	it	eq
 8004e60:	1aad      	subeq	r5, r5, r2
 8004e62:	68a3      	ldr	r3, [r4, #8]
 8004e64:	6922      	ldr	r2, [r4, #16]
 8004e66:	bf0c      	ite	eq
 8004e68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e6c:	2500      	movne	r5, #0
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	bfc4      	itt	gt
 8004e72:	1a9b      	subgt	r3, r3, r2
 8004e74:	18ed      	addgt	r5, r5, r3
 8004e76:	2600      	movs	r6, #0
 8004e78:	341a      	adds	r4, #26
 8004e7a:	42b5      	cmp	r5, r6
 8004e7c:	d11a      	bne.n	8004eb4 <_printf_common+0xc8>
 8004e7e:	2000      	movs	r0, #0
 8004e80:	e008      	b.n	8004e94 <_printf_common+0xa8>
 8004e82:	2301      	movs	r3, #1
 8004e84:	4652      	mov	r2, sl
 8004e86:	4649      	mov	r1, r9
 8004e88:	4638      	mov	r0, r7
 8004e8a:	47c0      	blx	r8
 8004e8c:	3001      	adds	r0, #1
 8004e8e:	d103      	bne.n	8004e98 <_printf_common+0xac>
 8004e90:	f04f 30ff 	mov.w	r0, #4294967295
 8004e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e98:	3501      	adds	r5, #1
 8004e9a:	e7c6      	b.n	8004e2a <_printf_common+0x3e>
 8004e9c:	18e1      	adds	r1, r4, r3
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	2030      	movs	r0, #48	; 0x30
 8004ea2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ea6:	4422      	add	r2, r4
 8004ea8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004eac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004eb0:	3302      	adds	r3, #2
 8004eb2:	e7c7      	b.n	8004e44 <_printf_common+0x58>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	4622      	mov	r2, r4
 8004eb8:	4649      	mov	r1, r9
 8004eba:	4638      	mov	r0, r7
 8004ebc:	47c0      	blx	r8
 8004ebe:	3001      	adds	r0, #1
 8004ec0:	d0e6      	beq.n	8004e90 <_printf_common+0xa4>
 8004ec2:	3601      	adds	r6, #1
 8004ec4:	e7d9      	b.n	8004e7a <_printf_common+0x8e>
	...

08004ec8 <_printf_i>:
 8004ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ecc:	7e0f      	ldrb	r7, [r1, #24]
 8004ece:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ed0:	2f78      	cmp	r7, #120	; 0x78
 8004ed2:	4691      	mov	r9, r2
 8004ed4:	4680      	mov	r8, r0
 8004ed6:	460c      	mov	r4, r1
 8004ed8:	469a      	mov	sl, r3
 8004eda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ede:	d807      	bhi.n	8004ef0 <_printf_i+0x28>
 8004ee0:	2f62      	cmp	r7, #98	; 0x62
 8004ee2:	d80a      	bhi.n	8004efa <_printf_i+0x32>
 8004ee4:	2f00      	cmp	r7, #0
 8004ee6:	f000 80d8 	beq.w	800509a <_printf_i+0x1d2>
 8004eea:	2f58      	cmp	r7, #88	; 0x58
 8004eec:	f000 80a3 	beq.w	8005036 <_printf_i+0x16e>
 8004ef0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ef4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ef8:	e03a      	b.n	8004f70 <_printf_i+0xa8>
 8004efa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004efe:	2b15      	cmp	r3, #21
 8004f00:	d8f6      	bhi.n	8004ef0 <_printf_i+0x28>
 8004f02:	a101      	add	r1, pc, #4	; (adr r1, 8004f08 <_printf_i+0x40>)
 8004f04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f08:	08004f61 	.word	0x08004f61
 8004f0c:	08004f75 	.word	0x08004f75
 8004f10:	08004ef1 	.word	0x08004ef1
 8004f14:	08004ef1 	.word	0x08004ef1
 8004f18:	08004ef1 	.word	0x08004ef1
 8004f1c:	08004ef1 	.word	0x08004ef1
 8004f20:	08004f75 	.word	0x08004f75
 8004f24:	08004ef1 	.word	0x08004ef1
 8004f28:	08004ef1 	.word	0x08004ef1
 8004f2c:	08004ef1 	.word	0x08004ef1
 8004f30:	08004ef1 	.word	0x08004ef1
 8004f34:	08005081 	.word	0x08005081
 8004f38:	08004fa5 	.word	0x08004fa5
 8004f3c:	08005063 	.word	0x08005063
 8004f40:	08004ef1 	.word	0x08004ef1
 8004f44:	08004ef1 	.word	0x08004ef1
 8004f48:	080050a3 	.word	0x080050a3
 8004f4c:	08004ef1 	.word	0x08004ef1
 8004f50:	08004fa5 	.word	0x08004fa5
 8004f54:	08004ef1 	.word	0x08004ef1
 8004f58:	08004ef1 	.word	0x08004ef1
 8004f5c:	0800506b 	.word	0x0800506b
 8004f60:	682b      	ldr	r3, [r5, #0]
 8004f62:	1d1a      	adds	r2, r3, #4
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	602a      	str	r2, [r5, #0]
 8004f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f70:	2301      	movs	r3, #1
 8004f72:	e0a3      	b.n	80050bc <_printf_i+0x1f4>
 8004f74:	6820      	ldr	r0, [r4, #0]
 8004f76:	6829      	ldr	r1, [r5, #0]
 8004f78:	0606      	lsls	r6, r0, #24
 8004f7a:	f101 0304 	add.w	r3, r1, #4
 8004f7e:	d50a      	bpl.n	8004f96 <_printf_i+0xce>
 8004f80:	680e      	ldr	r6, [r1, #0]
 8004f82:	602b      	str	r3, [r5, #0]
 8004f84:	2e00      	cmp	r6, #0
 8004f86:	da03      	bge.n	8004f90 <_printf_i+0xc8>
 8004f88:	232d      	movs	r3, #45	; 0x2d
 8004f8a:	4276      	negs	r6, r6
 8004f8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f90:	485e      	ldr	r0, [pc, #376]	; (800510c <_printf_i+0x244>)
 8004f92:	230a      	movs	r3, #10
 8004f94:	e019      	b.n	8004fca <_printf_i+0x102>
 8004f96:	680e      	ldr	r6, [r1, #0]
 8004f98:	602b      	str	r3, [r5, #0]
 8004f9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f9e:	bf18      	it	ne
 8004fa0:	b236      	sxthne	r6, r6
 8004fa2:	e7ef      	b.n	8004f84 <_printf_i+0xbc>
 8004fa4:	682b      	ldr	r3, [r5, #0]
 8004fa6:	6820      	ldr	r0, [r4, #0]
 8004fa8:	1d19      	adds	r1, r3, #4
 8004faa:	6029      	str	r1, [r5, #0]
 8004fac:	0601      	lsls	r1, r0, #24
 8004fae:	d501      	bpl.n	8004fb4 <_printf_i+0xec>
 8004fb0:	681e      	ldr	r6, [r3, #0]
 8004fb2:	e002      	b.n	8004fba <_printf_i+0xf2>
 8004fb4:	0646      	lsls	r6, r0, #25
 8004fb6:	d5fb      	bpl.n	8004fb0 <_printf_i+0xe8>
 8004fb8:	881e      	ldrh	r6, [r3, #0]
 8004fba:	4854      	ldr	r0, [pc, #336]	; (800510c <_printf_i+0x244>)
 8004fbc:	2f6f      	cmp	r7, #111	; 0x6f
 8004fbe:	bf0c      	ite	eq
 8004fc0:	2308      	moveq	r3, #8
 8004fc2:	230a      	movne	r3, #10
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fca:	6865      	ldr	r5, [r4, #4]
 8004fcc:	60a5      	str	r5, [r4, #8]
 8004fce:	2d00      	cmp	r5, #0
 8004fd0:	bfa2      	ittt	ge
 8004fd2:	6821      	ldrge	r1, [r4, #0]
 8004fd4:	f021 0104 	bicge.w	r1, r1, #4
 8004fd8:	6021      	strge	r1, [r4, #0]
 8004fda:	b90e      	cbnz	r6, 8004fe0 <_printf_i+0x118>
 8004fdc:	2d00      	cmp	r5, #0
 8004fde:	d04d      	beq.n	800507c <_printf_i+0x1b4>
 8004fe0:	4615      	mov	r5, r2
 8004fe2:	fbb6 f1f3 	udiv	r1, r6, r3
 8004fe6:	fb03 6711 	mls	r7, r3, r1, r6
 8004fea:	5dc7      	ldrb	r7, [r0, r7]
 8004fec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ff0:	4637      	mov	r7, r6
 8004ff2:	42bb      	cmp	r3, r7
 8004ff4:	460e      	mov	r6, r1
 8004ff6:	d9f4      	bls.n	8004fe2 <_printf_i+0x11a>
 8004ff8:	2b08      	cmp	r3, #8
 8004ffa:	d10b      	bne.n	8005014 <_printf_i+0x14c>
 8004ffc:	6823      	ldr	r3, [r4, #0]
 8004ffe:	07de      	lsls	r6, r3, #31
 8005000:	d508      	bpl.n	8005014 <_printf_i+0x14c>
 8005002:	6923      	ldr	r3, [r4, #16]
 8005004:	6861      	ldr	r1, [r4, #4]
 8005006:	4299      	cmp	r1, r3
 8005008:	bfde      	ittt	le
 800500a:	2330      	movle	r3, #48	; 0x30
 800500c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005010:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005014:	1b52      	subs	r2, r2, r5
 8005016:	6122      	str	r2, [r4, #16]
 8005018:	f8cd a000 	str.w	sl, [sp]
 800501c:	464b      	mov	r3, r9
 800501e:	aa03      	add	r2, sp, #12
 8005020:	4621      	mov	r1, r4
 8005022:	4640      	mov	r0, r8
 8005024:	f7ff fee2 	bl	8004dec <_printf_common>
 8005028:	3001      	adds	r0, #1
 800502a:	d14c      	bne.n	80050c6 <_printf_i+0x1fe>
 800502c:	f04f 30ff 	mov.w	r0, #4294967295
 8005030:	b004      	add	sp, #16
 8005032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005036:	4835      	ldr	r0, [pc, #212]	; (800510c <_printf_i+0x244>)
 8005038:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800503c:	6829      	ldr	r1, [r5, #0]
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	f851 6b04 	ldr.w	r6, [r1], #4
 8005044:	6029      	str	r1, [r5, #0]
 8005046:	061d      	lsls	r5, r3, #24
 8005048:	d514      	bpl.n	8005074 <_printf_i+0x1ac>
 800504a:	07df      	lsls	r7, r3, #31
 800504c:	bf44      	itt	mi
 800504e:	f043 0320 	orrmi.w	r3, r3, #32
 8005052:	6023      	strmi	r3, [r4, #0]
 8005054:	b91e      	cbnz	r6, 800505e <_printf_i+0x196>
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	f023 0320 	bic.w	r3, r3, #32
 800505c:	6023      	str	r3, [r4, #0]
 800505e:	2310      	movs	r3, #16
 8005060:	e7b0      	b.n	8004fc4 <_printf_i+0xfc>
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	f043 0320 	orr.w	r3, r3, #32
 8005068:	6023      	str	r3, [r4, #0]
 800506a:	2378      	movs	r3, #120	; 0x78
 800506c:	4828      	ldr	r0, [pc, #160]	; (8005110 <_printf_i+0x248>)
 800506e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005072:	e7e3      	b.n	800503c <_printf_i+0x174>
 8005074:	0659      	lsls	r1, r3, #25
 8005076:	bf48      	it	mi
 8005078:	b2b6      	uxthmi	r6, r6
 800507a:	e7e6      	b.n	800504a <_printf_i+0x182>
 800507c:	4615      	mov	r5, r2
 800507e:	e7bb      	b.n	8004ff8 <_printf_i+0x130>
 8005080:	682b      	ldr	r3, [r5, #0]
 8005082:	6826      	ldr	r6, [r4, #0]
 8005084:	6961      	ldr	r1, [r4, #20]
 8005086:	1d18      	adds	r0, r3, #4
 8005088:	6028      	str	r0, [r5, #0]
 800508a:	0635      	lsls	r5, r6, #24
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	d501      	bpl.n	8005094 <_printf_i+0x1cc>
 8005090:	6019      	str	r1, [r3, #0]
 8005092:	e002      	b.n	800509a <_printf_i+0x1d2>
 8005094:	0670      	lsls	r0, r6, #25
 8005096:	d5fb      	bpl.n	8005090 <_printf_i+0x1c8>
 8005098:	8019      	strh	r1, [r3, #0]
 800509a:	2300      	movs	r3, #0
 800509c:	6123      	str	r3, [r4, #16]
 800509e:	4615      	mov	r5, r2
 80050a0:	e7ba      	b.n	8005018 <_printf_i+0x150>
 80050a2:	682b      	ldr	r3, [r5, #0]
 80050a4:	1d1a      	adds	r2, r3, #4
 80050a6:	602a      	str	r2, [r5, #0]
 80050a8:	681d      	ldr	r5, [r3, #0]
 80050aa:	6862      	ldr	r2, [r4, #4]
 80050ac:	2100      	movs	r1, #0
 80050ae:	4628      	mov	r0, r5
 80050b0:	f7fb f896 	bl	80001e0 <memchr>
 80050b4:	b108      	cbz	r0, 80050ba <_printf_i+0x1f2>
 80050b6:	1b40      	subs	r0, r0, r5
 80050b8:	6060      	str	r0, [r4, #4]
 80050ba:	6863      	ldr	r3, [r4, #4]
 80050bc:	6123      	str	r3, [r4, #16]
 80050be:	2300      	movs	r3, #0
 80050c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050c4:	e7a8      	b.n	8005018 <_printf_i+0x150>
 80050c6:	6923      	ldr	r3, [r4, #16]
 80050c8:	462a      	mov	r2, r5
 80050ca:	4649      	mov	r1, r9
 80050cc:	4640      	mov	r0, r8
 80050ce:	47d0      	blx	sl
 80050d0:	3001      	adds	r0, #1
 80050d2:	d0ab      	beq.n	800502c <_printf_i+0x164>
 80050d4:	6823      	ldr	r3, [r4, #0]
 80050d6:	079b      	lsls	r3, r3, #30
 80050d8:	d413      	bmi.n	8005102 <_printf_i+0x23a>
 80050da:	68e0      	ldr	r0, [r4, #12]
 80050dc:	9b03      	ldr	r3, [sp, #12]
 80050de:	4298      	cmp	r0, r3
 80050e0:	bfb8      	it	lt
 80050e2:	4618      	movlt	r0, r3
 80050e4:	e7a4      	b.n	8005030 <_printf_i+0x168>
 80050e6:	2301      	movs	r3, #1
 80050e8:	4632      	mov	r2, r6
 80050ea:	4649      	mov	r1, r9
 80050ec:	4640      	mov	r0, r8
 80050ee:	47d0      	blx	sl
 80050f0:	3001      	adds	r0, #1
 80050f2:	d09b      	beq.n	800502c <_printf_i+0x164>
 80050f4:	3501      	adds	r5, #1
 80050f6:	68e3      	ldr	r3, [r4, #12]
 80050f8:	9903      	ldr	r1, [sp, #12]
 80050fa:	1a5b      	subs	r3, r3, r1
 80050fc:	42ab      	cmp	r3, r5
 80050fe:	dcf2      	bgt.n	80050e6 <_printf_i+0x21e>
 8005100:	e7eb      	b.n	80050da <_printf_i+0x212>
 8005102:	2500      	movs	r5, #0
 8005104:	f104 0619 	add.w	r6, r4, #25
 8005108:	e7f5      	b.n	80050f6 <_printf_i+0x22e>
 800510a:	bf00      	nop
 800510c:	08005699 	.word	0x08005699
 8005110:	080056aa 	.word	0x080056aa

08005114 <memcpy>:
 8005114:	440a      	add	r2, r1
 8005116:	4291      	cmp	r1, r2
 8005118:	f100 33ff 	add.w	r3, r0, #4294967295
 800511c:	d100      	bne.n	8005120 <memcpy+0xc>
 800511e:	4770      	bx	lr
 8005120:	b510      	push	{r4, lr}
 8005122:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005126:	f803 4f01 	strb.w	r4, [r3, #1]!
 800512a:	4291      	cmp	r1, r2
 800512c:	d1f9      	bne.n	8005122 <memcpy+0xe>
 800512e:	bd10      	pop	{r4, pc}

08005130 <memmove>:
 8005130:	4288      	cmp	r0, r1
 8005132:	b510      	push	{r4, lr}
 8005134:	eb01 0402 	add.w	r4, r1, r2
 8005138:	d902      	bls.n	8005140 <memmove+0x10>
 800513a:	4284      	cmp	r4, r0
 800513c:	4623      	mov	r3, r4
 800513e:	d807      	bhi.n	8005150 <memmove+0x20>
 8005140:	1e43      	subs	r3, r0, #1
 8005142:	42a1      	cmp	r1, r4
 8005144:	d008      	beq.n	8005158 <memmove+0x28>
 8005146:	f811 2b01 	ldrb.w	r2, [r1], #1
 800514a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800514e:	e7f8      	b.n	8005142 <memmove+0x12>
 8005150:	4402      	add	r2, r0
 8005152:	4601      	mov	r1, r0
 8005154:	428a      	cmp	r2, r1
 8005156:	d100      	bne.n	800515a <memmove+0x2a>
 8005158:	bd10      	pop	{r4, pc}
 800515a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800515e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005162:	e7f7      	b.n	8005154 <memmove+0x24>

08005164 <_free_r>:
 8005164:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005166:	2900      	cmp	r1, #0
 8005168:	d044      	beq.n	80051f4 <_free_r+0x90>
 800516a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800516e:	9001      	str	r0, [sp, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	f1a1 0404 	sub.w	r4, r1, #4
 8005176:	bfb8      	it	lt
 8005178:	18e4      	addlt	r4, r4, r3
 800517a:	f000 f913 	bl	80053a4 <__malloc_lock>
 800517e:	4a1e      	ldr	r2, [pc, #120]	; (80051f8 <_free_r+0x94>)
 8005180:	9801      	ldr	r0, [sp, #4]
 8005182:	6813      	ldr	r3, [r2, #0]
 8005184:	b933      	cbnz	r3, 8005194 <_free_r+0x30>
 8005186:	6063      	str	r3, [r4, #4]
 8005188:	6014      	str	r4, [r2, #0]
 800518a:	b003      	add	sp, #12
 800518c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005190:	f000 b90e 	b.w	80053b0 <__malloc_unlock>
 8005194:	42a3      	cmp	r3, r4
 8005196:	d908      	bls.n	80051aa <_free_r+0x46>
 8005198:	6825      	ldr	r5, [r4, #0]
 800519a:	1961      	adds	r1, r4, r5
 800519c:	428b      	cmp	r3, r1
 800519e:	bf01      	itttt	eq
 80051a0:	6819      	ldreq	r1, [r3, #0]
 80051a2:	685b      	ldreq	r3, [r3, #4]
 80051a4:	1949      	addeq	r1, r1, r5
 80051a6:	6021      	streq	r1, [r4, #0]
 80051a8:	e7ed      	b.n	8005186 <_free_r+0x22>
 80051aa:	461a      	mov	r2, r3
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	b10b      	cbz	r3, 80051b4 <_free_r+0x50>
 80051b0:	42a3      	cmp	r3, r4
 80051b2:	d9fa      	bls.n	80051aa <_free_r+0x46>
 80051b4:	6811      	ldr	r1, [r2, #0]
 80051b6:	1855      	adds	r5, r2, r1
 80051b8:	42a5      	cmp	r5, r4
 80051ba:	d10b      	bne.n	80051d4 <_free_r+0x70>
 80051bc:	6824      	ldr	r4, [r4, #0]
 80051be:	4421      	add	r1, r4
 80051c0:	1854      	adds	r4, r2, r1
 80051c2:	42a3      	cmp	r3, r4
 80051c4:	6011      	str	r1, [r2, #0]
 80051c6:	d1e0      	bne.n	800518a <_free_r+0x26>
 80051c8:	681c      	ldr	r4, [r3, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	6053      	str	r3, [r2, #4]
 80051ce:	4421      	add	r1, r4
 80051d0:	6011      	str	r1, [r2, #0]
 80051d2:	e7da      	b.n	800518a <_free_r+0x26>
 80051d4:	d902      	bls.n	80051dc <_free_r+0x78>
 80051d6:	230c      	movs	r3, #12
 80051d8:	6003      	str	r3, [r0, #0]
 80051da:	e7d6      	b.n	800518a <_free_r+0x26>
 80051dc:	6825      	ldr	r5, [r4, #0]
 80051de:	1961      	adds	r1, r4, r5
 80051e0:	428b      	cmp	r3, r1
 80051e2:	bf04      	itt	eq
 80051e4:	6819      	ldreq	r1, [r3, #0]
 80051e6:	685b      	ldreq	r3, [r3, #4]
 80051e8:	6063      	str	r3, [r4, #4]
 80051ea:	bf04      	itt	eq
 80051ec:	1949      	addeq	r1, r1, r5
 80051ee:	6021      	streq	r1, [r4, #0]
 80051f0:	6054      	str	r4, [r2, #4]
 80051f2:	e7ca      	b.n	800518a <_free_r+0x26>
 80051f4:	b003      	add	sp, #12
 80051f6:	bd30      	pop	{r4, r5, pc}
 80051f8:	2000ffe0 	.word	0x2000ffe0

080051fc <sbrk_aligned>:
 80051fc:	b570      	push	{r4, r5, r6, lr}
 80051fe:	4e0e      	ldr	r6, [pc, #56]	; (8005238 <sbrk_aligned+0x3c>)
 8005200:	460c      	mov	r4, r1
 8005202:	6831      	ldr	r1, [r6, #0]
 8005204:	4605      	mov	r5, r0
 8005206:	b911      	cbnz	r1, 800520e <sbrk_aligned+0x12>
 8005208:	f000 f8bc 	bl	8005384 <_sbrk_r>
 800520c:	6030      	str	r0, [r6, #0]
 800520e:	4621      	mov	r1, r4
 8005210:	4628      	mov	r0, r5
 8005212:	f000 f8b7 	bl	8005384 <_sbrk_r>
 8005216:	1c43      	adds	r3, r0, #1
 8005218:	d00a      	beq.n	8005230 <sbrk_aligned+0x34>
 800521a:	1cc4      	adds	r4, r0, #3
 800521c:	f024 0403 	bic.w	r4, r4, #3
 8005220:	42a0      	cmp	r0, r4
 8005222:	d007      	beq.n	8005234 <sbrk_aligned+0x38>
 8005224:	1a21      	subs	r1, r4, r0
 8005226:	4628      	mov	r0, r5
 8005228:	f000 f8ac 	bl	8005384 <_sbrk_r>
 800522c:	3001      	adds	r0, #1
 800522e:	d101      	bne.n	8005234 <sbrk_aligned+0x38>
 8005230:	f04f 34ff 	mov.w	r4, #4294967295
 8005234:	4620      	mov	r0, r4
 8005236:	bd70      	pop	{r4, r5, r6, pc}
 8005238:	2000ffe4 	.word	0x2000ffe4

0800523c <_malloc_r>:
 800523c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005240:	1ccd      	adds	r5, r1, #3
 8005242:	f025 0503 	bic.w	r5, r5, #3
 8005246:	3508      	adds	r5, #8
 8005248:	2d0c      	cmp	r5, #12
 800524a:	bf38      	it	cc
 800524c:	250c      	movcc	r5, #12
 800524e:	2d00      	cmp	r5, #0
 8005250:	4607      	mov	r7, r0
 8005252:	db01      	blt.n	8005258 <_malloc_r+0x1c>
 8005254:	42a9      	cmp	r1, r5
 8005256:	d905      	bls.n	8005264 <_malloc_r+0x28>
 8005258:	230c      	movs	r3, #12
 800525a:	603b      	str	r3, [r7, #0]
 800525c:	2600      	movs	r6, #0
 800525e:	4630      	mov	r0, r6
 8005260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005264:	4e2e      	ldr	r6, [pc, #184]	; (8005320 <_malloc_r+0xe4>)
 8005266:	f000 f89d 	bl	80053a4 <__malloc_lock>
 800526a:	6833      	ldr	r3, [r6, #0]
 800526c:	461c      	mov	r4, r3
 800526e:	bb34      	cbnz	r4, 80052be <_malloc_r+0x82>
 8005270:	4629      	mov	r1, r5
 8005272:	4638      	mov	r0, r7
 8005274:	f7ff ffc2 	bl	80051fc <sbrk_aligned>
 8005278:	1c43      	adds	r3, r0, #1
 800527a:	4604      	mov	r4, r0
 800527c:	d14d      	bne.n	800531a <_malloc_r+0xde>
 800527e:	6834      	ldr	r4, [r6, #0]
 8005280:	4626      	mov	r6, r4
 8005282:	2e00      	cmp	r6, #0
 8005284:	d140      	bne.n	8005308 <_malloc_r+0xcc>
 8005286:	6823      	ldr	r3, [r4, #0]
 8005288:	4631      	mov	r1, r6
 800528a:	4638      	mov	r0, r7
 800528c:	eb04 0803 	add.w	r8, r4, r3
 8005290:	f000 f878 	bl	8005384 <_sbrk_r>
 8005294:	4580      	cmp	r8, r0
 8005296:	d13a      	bne.n	800530e <_malloc_r+0xd2>
 8005298:	6821      	ldr	r1, [r4, #0]
 800529a:	3503      	adds	r5, #3
 800529c:	1a6d      	subs	r5, r5, r1
 800529e:	f025 0503 	bic.w	r5, r5, #3
 80052a2:	3508      	adds	r5, #8
 80052a4:	2d0c      	cmp	r5, #12
 80052a6:	bf38      	it	cc
 80052a8:	250c      	movcc	r5, #12
 80052aa:	4629      	mov	r1, r5
 80052ac:	4638      	mov	r0, r7
 80052ae:	f7ff ffa5 	bl	80051fc <sbrk_aligned>
 80052b2:	3001      	adds	r0, #1
 80052b4:	d02b      	beq.n	800530e <_malloc_r+0xd2>
 80052b6:	6823      	ldr	r3, [r4, #0]
 80052b8:	442b      	add	r3, r5
 80052ba:	6023      	str	r3, [r4, #0]
 80052bc:	e00e      	b.n	80052dc <_malloc_r+0xa0>
 80052be:	6822      	ldr	r2, [r4, #0]
 80052c0:	1b52      	subs	r2, r2, r5
 80052c2:	d41e      	bmi.n	8005302 <_malloc_r+0xc6>
 80052c4:	2a0b      	cmp	r2, #11
 80052c6:	d916      	bls.n	80052f6 <_malloc_r+0xba>
 80052c8:	1961      	adds	r1, r4, r5
 80052ca:	42a3      	cmp	r3, r4
 80052cc:	6025      	str	r5, [r4, #0]
 80052ce:	bf18      	it	ne
 80052d0:	6059      	strne	r1, [r3, #4]
 80052d2:	6863      	ldr	r3, [r4, #4]
 80052d4:	bf08      	it	eq
 80052d6:	6031      	streq	r1, [r6, #0]
 80052d8:	5162      	str	r2, [r4, r5]
 80052da:	604b      	str	r3, [r1, #4]
 80052dc:	4638      	mov	r0, r7
 80052de:	f104 060b 	add.w	r6, r4, #11
 80052e2:	f000 f865 	bl	80053b0 <__malloc_unlock>
 80052e6:	f026 0607 	bic.w	r6, r6, #7
 80052ea:	1d23      	adds	r3, r4, #4
 80052ec:	1af2      	subs	r2, r6, r3
 80052ee:	d0b6      	beq.n	800525e <_malloc_r+0x22>
 80052f0:	1b9b      	subs	r3, r3, r6
 80052f2:	50a3      	str	r3, [r4, r2]
 80052f4:	e7b3      	b.n	800525e <_malloc_r+0x22>
 80052f6:	6862      	ldr	r2, [r4, #4]
 80052f8:	42a3      	cmp	r3, r4
 80052fa:	bf0c      	ite	eq
 80052fc:	6032      	streq	r2, [r6, #0]
 80052fe:	605a      	strne	r2, [r3, #4]
 8005300:	e7ec      	b.n	80052dc <_malloc_r+0xa0>
 8005302:	4623      	mov	r3, r4
 8005304:	6864      	ldr	r4, [r4, #4]
 8005306:	e7b2      	b.n	800526e <_malloc_r+0x32>
 8005308:	4634      	mov	r4, r6
 800530a:	6876      	ldr	r6, [r6, #4]
 800530c:	e7b9      	b.n	8005282 <_malloc_r+0x46>
 800530e:	230c      	movs	r3, #12
 8005310:	603b      	str	r3, [r7, #0]
 8005312:	4638      	mov	r0, r7
 8005314:	f000 f84c 	bl	80053b0 <__malloc_unlock>
 8005318:	e7a1      	b.n	800525e <_malloc_r+0x22>
 800531a:	6025      	str	r5, [r4, #0]
 800531c:	e7de      	b.n	80052dc <_malloc_r+0xa0>
 800531e:	bf00      	nop
 8005320:	2000ffe0 	.word	0x2000ffe0

08005324 <_realloc_r>:
 8005324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005328:	4680      	mov	r8, r0
 800532a:	4614      	mov	r4, r2
 800532c:	460e      	mov	r6, r1
 800532e:	b921      	cbnz	r1, 800533a <_realloc_r+0x16>
 8005330:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005334:	4611      	mov	r1, r2
 8005336:	f7ff bf81 	b.w	800523c <_malloc_r>
 800533a:	b92a      	cbnz	r2, 8005348 <_realloc_r+0x24>
 800533c:	f7ff ff12 	bl	8005164 <_free_r>
 8005340:	4625      	mov	r5, r4
 8005342:	4628      	mov	r0, r5
 8005344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005348:	f000 f838 	bl	80053bc <_malloc_usable_size_r>
 800534c:	4284      	cmp	r4, r0
 800534e:	4607      	mov	r7, r0
 8005350:	d802      	bhi.n	8005358 <_realloc_r+0x34>
 8005352:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005356:	d812      	bhi.n	800537e <_realloc_r+0x5a>
 8005358:	4621      	mov	r1, r4
 800535a:	4640      	mov	r0, r8
 800535c:	f7ff ff6e 	bl	800523c <_malloc_r>
 8005360:	4605      	mov	r5, r0
 8005362:	2800      	cmp	r0, #0
 8005364:	d0ed      	beq.n	8005342 <_realloc_r+0x1e>
 8005366:	42bc      	cmp	r4, r7
 8005368:	4622      	mov	r2, r4
 800536a:	4631      	mov	r1, r6
 800536c:	bf28      	it	cs
 800536e:	463a      	movcs	r2, r7
 8005370:	f7ff fed0 	bl	8005114 <memcpy>
 8005374:	4631      	mov	r1, r6
 8005376:	4640      	mov	r0, r8
 8005378:	f7ff fef4 	bl	8005164 <_free_r>
 800537c:	e7e1      	b.n	8005342 <_realloc_r+0x1e>
 800537e:	4635      	mov	r5, r6
 8005380:	e7df      	b.n	8005342 <_realloc_r+0x1e>
	...

08005384 <_sbrk_r>:
 8005384:	b538      	push	{r3, r4, r5, lr}
 8005386:	4d06      	ldr	r5, [pc, #24]	; (80053a0 <_sbrk_r+0x1c>)
 8005388:	2300      	movs	r3, #0
 800538a:	4604      	mov	r4, r0
 800538c:	4608      	mov	r0, r1
 800538e:	602b      	str	r3, [r5, #0]
 8005390:	f7fb fefa 	bl	8001188 <_sbrk>
 8005394:	1c43      	adds	r3, r0, #1
 8005396:	d102      	bne.n	800539e <_sbrk_r+0x1a>
 8005398:	682b      	ldr	r3, [r5, #0]
 800539a:	b103      	cbz	r3, 800539e <_sbrk_r+0x1a>
 800539c:	6023      	str	r3, [r4, #0]
 800539e:	bd38      	pop	{r3, r4, r5, pc}
 80053a0:	2000ffe8 	.word	0x2000ffe8

080053a4 <__malloc_lock>:
 80053a4:	4801      	ldr	r0, [pc, #4]	; (80053ac <__malloc_lock+0x8>)
 80053a6:	f000 b811 	b.w	80053cc <__retarget_lock_acquire_recursive>
 80053aa:	bf00      	nop
 80053ac:	2000ffec 	.word	0x2000ffec

080053b0 <__malloc_unlock>:
 80053b0:	4801      	ldr	r0, [pc, #4]	; (80053b8 <__malloc_unlock+0x8>)
 80053b2:	f000 b80c 	b.w	80053ce <__retarget_lock_release_recursive>
 80053b6:	bf00      	nop
 80053b8:	2000ffec 	.word	0x2000ffec

080053bc <_malloc_usable_size_r>:
 80053bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053c0:	1f18      	subs	r0, r3, #4
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	bfbc      	itt	lt
 80053c6:	580b      	ldrlt	r3, [r1, r0]
 80053c8:	18c0      	addlt	r0, r0, r3
 80053ca:	4770      	bx	lr

080053cc <__retarget_lock_acquire_recursive>:
 80053cc:	4770      	bx	lr

080053ce <__retarget_lock_release_recursive>:
 80053ce:	4770      	bx	lr

080053d0 <_init>:
 80053d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053d2:	bf00      	nop
 80053d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053d6:	bc08      	pop	{r3}
 80053d8:	469e      	mov	lr, r3
 80053da:	4770      	bx	lr

080053dc <_fini>:
 80053dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053de:	bf00      	nop
 80053e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053e2:	bc08      	pop	{r3}
 80053e4:	469e      	mov	lr, r3
 80053e6:	4770      	bx	lr
