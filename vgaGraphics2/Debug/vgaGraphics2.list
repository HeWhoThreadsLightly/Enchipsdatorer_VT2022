
vgaGraphics2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  0800565c  0800565c  0001565c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005acc  08005acc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005acc  08005acc  00015acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ad4  08005ad4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ad4  08005ad4  00015ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ad8  08005ad8  00015ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ff74  20000070  08005b4c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ffe4  08005b4c  0002ffe4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2f9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000205f  00000000  00000000  0002f399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  000313f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d50  00000000  00000000  000321a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002915  00000000  00000000  00032ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eedd  00000000  00000000  00035805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e0da  00000000  00000000  000446e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d27bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db4  00000000  00000000  000d280c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005644 	.word	0x08005644

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005644 	.word	0x08005644

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <dumpLine>:
/* USER CODE BEGIN 0 */

char str[81] = { '\0' };
uint16_t str_len = 0;

void dumpLine(){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0

	for(int i = 0; i < 40; i++){
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	e018      	b.n	80005c2 <dumpLine+0x3e>
		int tmp = screenBuff[i].value;
 8000590:	4a17      	ldr	r2, [pc, #92]	; (80005f0 <dumpLine+0x6c>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4413      	add	r3, r2
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	603b      	str	r3, [r7, #0]
		str_len = sprintf(str, "%02x ", tmp);
 800059a:	683a      	ldr	r2, [r7, #0]
 800059c:	4915      	ldr	r1, [pc, #84]	; (80005f4 <dumpLine+0x70>)
 800059e:	4816      	ldr	r0, [pc, #88]	; (80005f8 <dumpLine+0x74>)
 80005a0:	f004 fbe2 	bl	8004d68 <siprintf>
 80005a4:	4603      	mov	r3, r0
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	4b14      	ldr	r3, [pc, #80]	; (80005fc <dumpLine+0x78>)
 80005aa:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80005ac:	4b13      	ldr	r3, [pc, #76]	; (80005fc <dumpLine+0x78>)
 80005ae:	881a      	ldrh	r2, [r3, #0]
 80005b0:	f04f 33ff 	mov.w	r3, #4294967295
 80005b4:	4910      	ldr	r1, [pc, #64]	; (80005f8 <dumpLine+0x74>)
 80005b6:	4812      	ldr	r0, [pc, #72]	; (8000600 <dumpLine+0x7c>)
 80005b8:	f004 f82f 	bl	800461a <HAL_UART_Transmit>
	for(int i = 0; i < 40; i++){
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3301      	adds	r3, #1
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b27      	cmp	r3, #39	; 0x27
 80005c6:	dde3      	ble.n	8000590 <dumpLine+0xc>
	}
	str_len = sprintf(str, "\r\n");
 80005c8:	490e      	ldr	r1, [pc, #56]	; (8000604 <dumpLine+0x80>)
 80005ca:	480b      	ldr	r0, [pc, #44]	; (80005f8 <dumpLine+0x74>)
 80005cc:	f004 fbcc 	bl	8004d68 <siprintf>
 80005d0:	4603      	mov	r3, r0
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <dumpLine+0x78>)
 80005d6:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <dumpLine+0x78>)
 80005da:	881a      	ldrh	r2, [r3, #0]
 80005dc:	f04f 33ff 	mov.w	r3, #4294967295
 80005e0:	4905      	ldr	r1, [pc, #20]	; (80005f8 <dumpLine+0x74>)
 80005e2:	4807      	ldr	r0, [pc, #28]	; (8000600 <dumpLine+0x7c>)
 80005e4:	f004 f819 	bl	800461a <HAL_UART_Transmit>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	2000059c 	.word	0x2000059c
 80005f4:	0800565c 	.word	0x0800565c
 80005f8:	20000220 	.word	0x20000220
 80005fc:	20000272 	.word	0x20000272
 8000600:	2000017c 	.word	0x2000017c
 8000604:	08005664 	.word	0x08005664

08000608 <HAL_TIM_PeriodElapsedCallback>:
	HAL_UART_Transmit(&huart2, (uint8_t*) str, sizeof(str), HAL_MAX_DELAY);
}

int lastLine = -100;
uint32_t profileCount = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	if(htim == &htim5){
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4a0f      	ldr	r2, [pc, #60]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d116      	bne.n	8000646 <HAL_TIM_PeriodElapsedCallback+0x3e>
		str_len = sprintf(str, "Profile %8lu ticks clock\t line %i\r\n", profileCount, lineCount);
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	490e      	ldr	r1, [pc, #56]	; (800065c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000622:	480f      	ldr	r0, [pc, #60]	; (8000660 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000624:	f004 fba0 	bl	8004d68 <siprintf>
 8000628:	4603      	mov	r3, r0
 800062a:	b29a      	uxth	r2, r3
 800062c:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800062e:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000632:	881a      	ldrh	r2, [r3, #0]
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	4909      	ldr	r1, [pc, #36]	; (8000660 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800063a:	480b      	ldr	r0, [pc, #44]	; (8000668 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800063c:	f003 ffed 	bl	800461a <HAL_UART_Transmit>
		profileCount = 0;
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
	}
	return;
 8000646:	bf00      	nop
	if(htim == &htim5){
		timerReset();
	}else if(htim == &htim1){
		timerReset();
	}
}
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	200000d4 	.word	0x200000d4
 8000654:	20000274 	.word	0x20000274
 8000658:	2000ffb0 	.word	0x2000ffb0
 800065c:	08005678 	.word	0x08005678
 8000660:	20000220 	.word	0x20000220
 8000664:	20000272 	.word	0x20000272
 8000668:	2000017c 	.word	0x2000017c

0800066c <printState>:
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
	return status != HAL_OK;

}

int printState(HAL_DMA_StateTypeDef state){
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
	//HAL_DMA_STATE_BUSY              = 0x02U,  /*!< DMA process is ongoing              */
	//HAL_DMA_STATE_TIMEOUT           = 0x03U,  /*!< DMA timeout state                   */
	//HAL_DMA_STATE_ERROR             = 0x04U,  /*!< DMA error state                     */
	//HAL_DMA_STATE_ABORT             = 0x05U,  /*!< DMA Abort state                     */
	//}HAL_DMA_StateTypeDef;
	switch(state){
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	2b05      	cmp	r3, #5
 800067a:	d845      	bhi.n	8000708 <printState+0x9c>
 800067c:	a201      	add	r2, pc, #4	; (adr r2, 8000684 <printState+0x18>)
 800067e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000682:	bf00      	nop
 8000684:	0800069d 	.word	0x0800069d
 8000688:	080006af 	.word	0x080006af
 800068c:	080006c1 	.word	0x080006c1
 8000690:	080006d3 	.word	0x080006d3
 8000694:	080006e5 	.word	0x080006e5
 8000698:	080006f7 	.word	0x080006f7
	case HAL_DMA_STATE_RESET:str_len = sprintf(str, "DMA not yet initialized or disabled\r\n");break;
 800069c:	4928      	ldr	r1, [pc, #160]	; (8000740 <printState+0xd4>)
 800069e:	4829      	ldr	r0, [pc, #164]	; (8000744 <printState+0xd8>)
 80006a0:	f004 fb62 	bl	8004d68 <siprintf>
 80006a4:	4603      	mov	r3, r0
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	4b27      	ldr	r3, [pc, #156]	; (8000748 <printState+0xdc>)
 80006aa:	801a      	strh	r2, [r3, #0]
 80006ac:	e035      	b.n	800071a <printState+0xae>
	case HAL_DMA_STATE_READY:str_len = sprintf(str, "DMA initialized and ready for use\r\n");break;
 80006ae:	4927      	ldr	r1, [pc, #156]	; (800074c <printState+0xe0>)
 80006b0:	4824      	ldr	r0, [pc, #144]	; (8000744 <printState+0xd8>)
 80006b2:	f004 fb59 	bl	8004d68 <siprintf>
 80006b6:	4603      	mov	r3, r0
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	4b23      	ldr	r3, [pc, #140]	; (8000748 <printState+0xdc>)
 80006bc:	801a      	strh	r2, [r3, #0]
 80006be:	e02c      	b.n	800071a <printState+0xae>
	case HAL_DMA_STATE_BUSY:str_len = sprintf(str, "DMA process is ongoing\r\n");break;
 80006c0:	4923      	ldr	r1, [pc, #140]	; (8000750 <printState+0xe4>)
 80006c2:	4820      	ldr	r0, [pc, #128]	; (8000744 <printState+0xd8>)
 80006c4:	f004 fb50 	bl	8004d68 <siprintf>
 80006c8:	4603      	mov	r3, r0
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <printState+0xdc>)
 80006ce:	801a      	strh	r2, [r3, #0]
 80006d0:	e023      	b.n	800071a <printState+0xae>
	case HAL_DMA_STATE_TIMEOUT:str_len = sprintf(str, "DMA timeout state\r\n");break;
 80006d2:	4920      	ldr	r1, [pc, #128]	; (8000754 <printState+0xe8>)
 80006d4:	481b      	ldr	r0, [pc, #108]	; (8000744 <printState+0xd8>)
 80006d6:	f004 fb47 	bl	8004d68 <siprintf>
 80006da:	4603      	mov	r3, r0
 80006dc:	b29a      	uxth	r2, r3
 80006de:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <printState+0xdc>)
 80006e0:	801a      	strh	r2, [r3, #0]
 80006e2:	e01a      	b.n	800071a <printState+0xae>
	case HAL_DMA_STATE_ERROR:str_len = sprintf(str, "DMA error state\r\n");break;
 80006e4:	491c      	ldr	r1, [pc, #112]	; (8000758 <printState+0xec>)
 80006e6:	4817      	ldr	r0, [pc, #92]	; (8000744 <printState+0xd8>)
 80006e8:	f004 fb3e 	bl	8004d68 <siprintf>
 80006ec:	4603      	mov	r3, r0
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <printState+0xdc>)
 80006f2:	801a      	strh	r2, [r3, #0]
 80006f4:	e011      	b.n	800071a <printState+0xae>
	case HAL_DMA_STATE_ABORT:str_len = sprintf(str, "DMA Abort state\r\n");break;
 80006f6:	4919      	ldr	r1, [pc, #100]	; (800075c <printState+0xf0>)
 80006f8:	4812      	ldr	r0, [pc, #72]	; (8000744 <printState+0xd8>)
 80006fa:	f004 fb35 	bl	8004d68 <siprintf>
 80006fe:	4603      	mov	r3, r0
 8000700:	b29a      	uxth	r2, r3
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <printState+0xdc>)
 8000704:	801a      	strh	r2, [r3, #0]
 8000706:	e008      	b.n	800071a <printState+0xae>
	default:str_len = sprintf(str, "DMA_Unknown\r\n");break;
 8000708:	4915      	ldr	r1, [pc, #84]	; (8000760 <printState+0xf4>)
 800070a:	480e      	ldr	r0, [pc, #56]	; (8000744 <printState+0xd8>)
 800070c:	f004 fb2c 	bl	8004d68 <siprintf>
 8000710:	4603      	mov	r3, r0
 8000712:	b29a      	uxth	r2, r3
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <printState+0xdc>)
 8000716:	801a      	strh	r2, [r3, #0]
 8000718:	bf00      	nop

	}
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <printState+0xdc>)
 800071c:	881a      	ldrh	r2, [r3, #0]
 800071e:	f04f 33ff 	mov.w	r3, #4294967295
 8000722:	4908      	ldr	r1, [pc, #32]	; (8000744 <printState+0xd8>)
 8000724:	480f      	ldr	r0, [pc, #60]	; (8000764 <printState+0xf8>)
 8000726:	f003 ff78 	bl	800461a <HAL_UART_Transmit>
	return state != HAL_DMA_STATE_READY;
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	2b01      	cmp	r3, #1
 800072e:	bf14      	ite	ne
 8000730:	2301      	movne	r3, #1
 8000732:	2300      	moveq	r3, #0
 8000734:	b2db      	uxtb	r3, r3
}
 8000736:	4618      	mov	r0, r3
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	080056e0 	.word	0x080056e0
 8000744:	20000220 	.word	0x20000220
 8000748:	20000272 	.word	0x20000272
 800074c:	08005708 	.word	0x08005708
 8000750:	0800572c 	.word	0x0800572c
 8000754:	08005748 	.word	0x08005748
 8000758:	0800575c 	.word	0x0800575c
 800075c:	08005770 	.word	0x08005770
 8000760:	08005784 	.word	0x08005784
 8000764:	2000017c 	.word	0x2000017c

08000768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b09c      	sub	sp, #112	; 0x70
 800076c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076e:	f001 fbbd 	bl	8001eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000772:	f000 f8bd 	bl	80008f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000776:	f000 fa95 	bl	8000ca4 <MX_GPIO_Init>
  MX_DMA_Init();
 800077a:	f000 fa3b 	bl	8000bf4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800077e:	f000 fa0f 	bl	8000ba0 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8000782:	f000 f9bf 	bl	8000b04 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000786:	f000 f91d 	bl	80009c4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	char str[81] = { '\0' };
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	224d      	movs	r2, #77	; 0x4d
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f004 fadf 	bl	8004d58 <memset>
	uint16_t str_len = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	str_len = sprintf(str, "Starting up!\r\n");
 80007a0:	463b      	mov	r3, r7
 80007a2:	494a      	ldr	r1, [pc, #296]	; (80008cc <main+0x164>)
 80007a4:	4618      	mov	r0, r3
 80007a6:	f004 fadf 	bl	8004d68 <siprintf>
 80007aa:	4603      	mov	r3, r0
 80007ac:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80007b0:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80007b4:	4639      	mov	r1, r7
 80007b6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ba:	4845      	ldr	r0, [pc, #276]	; (80008d0 <main+0x168>)
 80007bc:	f003 ff2d 	bl	800461a <HAL_UART_Transmit>

	for(int i = 0; i < vertRes; i++){//load a test pattern
 80007c0:	2300      	movs	r3, #0
 80007c2:	667b      	str	r3, [r7, #100]	; 0x64
 80007c4:	e033      	b.n	800082e <main+0xc6>
		for(int j = 0; j < horiRes; j++){
 80007c6:	2300      	movs	r3, #0
 80007c8:	663b      	str	r3, [r7, #96]	; 0x60
 80007ca:	e00b      	b.n	80007e4 <main+0x7c>
			screenBuff[i*vertRes + j].value = 0b00111111;
 80007cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007ce:	22c8      	movs	r2, #200	; 0xc8
 80007d0:	fb03 f202 	mul.w	r2, r3, r2
 80007d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80007d6:	4413      	add	r3, r2
 80007d8:	4a3e      	ldr	r2, [pc, #248]	; (80008d4 <main+0x16c>)
 80007da:	213f      	movs	r1, #63	; 0x3f
 80007dc:	54d1      	strb	r1, [r2, r3]
		for(int j = 0; j < horiRes; j++){
 80007de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80007e0:	3301      	adds	r3, #1
 80007e2:	663b      	str	r3, [r7, #96]	; 0x60
 80007e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80007e6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80007ea:	dbef      	blt.n	80007cc <main+0x64>
			//screenBuff[i*vertRes + j].value = j & 0b111111;
		}
		for(int j = 0; j<16;j++){
 80007ec:	2300      	movs	r3, #0
 80007ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80007f0:	e017      	b.n	8000822 <main+0xba>
			screenBuff[i*vertRes + 8 + j].value = 0b00111000 + j%8;
 80007f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007f4:	425a      	negs	r2, r3
 80007f6:	f003 0307 	and.w	r3, r3, #7
 80007fa:	f002 0207 	and.w	r2, r2, #7
 80007fe:	bf58      	it	pl
 8000800:	4253      	negpl	r3, r2
 8000802:	b2da      	uxtb	r2, r3
 8000804:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000806:	21c8      	movs	r1, #200	; 0xc8
 8000808:	fb01 f303 	mul.w	r3, r1, r3
 800080c:	f103 0108 	add.w	r1, r3, #8
 8000810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000812:	440b      	add	r3, r1
 8000814:	3238      	adds	r2, #56	; 0x38
 8000816:	b2d1      	uxtb	r1, r2
 8000818:	4a2e      	ldr	r2, [pc, #184]	; (80008d4 <main+0x16c>)
 800081a:	54d1      	strb	r1, [r2, r3]
		for(int j = 0; j<16;j++){
 800081c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800081e:	3301      	adds	r3, #1
 8000820:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000824:	2b0f      	cmp	r3, #15
 8000826:	dde4      	ble.n	80007f2 <main+0x8a>
	for(int i = 0; i < vertRes; i++){//load a test pattern
 8000828:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800082a:	3301      	adds	r3, #1
 800082c:	667b      	str	r3, [r7, #100]	; 0x64
 800082e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000830:	2bc7      	cmp	r3, #199	; 0xc7
 8000832:	ddc8      	ble.n	80007c6 <main+0x5e>
		}
	}

	for(int i = 0; i < vertRes; i++){//load a clear test pattern
 8000834:	2300      	movs	r3, #0
 8000836:	65bb      	str	r3, [r7, #88]	; 0x58
 8000838:	e015      	b.n	8000866 <main+0xfe>
		for(int j = 0; j < horiRes; j++){
 800083a:	2300      	movs	r3, #0
 800083c:	657b      	str	r3, [r7, #84]	; 0x54
 800083e:	e00b      	b.n	8000858 <main+0xf0>
			screenBuff[i*vertRes + j].value = 0;
 8000840:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000842:	22c8      	movs	r2, #200	; 0xc8
 8000844:	fb03 f202 	mul.w	r2, r3, r2
 8000848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800084a:	4413      	add	r3, r2
 800084c:	4a21      	ldr	r2, [pc, #132]	; (80008d4 <main+0x16c>)
 800084e:	2100      	movs	r1, #0
 8000850:	54d1      	strb	r1, [r2, r3]
		for(int j = 0; j < horiRes; j++){
 8000852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000854:	3301      	adds	r3, #1
 8000856:	657b      	str	r3, [r7, #84]	; 0x54
 8000858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800085a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800085e:	dbef      	blt.n	8000840 <main+0xd8>
	for(int i = 0; i < vertRes; i++){//load a clear test pattern
 8000860:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000862:	3301      	adds	r3, #1
 8000864:	65bb      	str	r3, [r7, #88]	; 0x58
 8000866:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000868:	2bc7      	cmp	r3, #199	; 0xc7
 800086a:	dde6      	ble.n	800083a <main+0xd2>
		}
	}



	vgaSetup(&htim1, &hdma_tim1_up, &hdma_memtomem_dma2_stream0, vgaPin13_Vsync_GPIO_Port, vgaPin13_Vsync_Pin);
 800086c:	2302      	movs	r3, #2
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <main+0x170>)
 8000872:	4a1a      	ldr	r2, [pc, #104]	; (80008dc <main+0x174>)
 8000874:	491a      	ldr	r1, [pc, #104]	; (80008e0 <main+0x178>)
 8000876:	481b      	ldr	r0, [pc, #108]	; (80008e4 <main+0x17c>)
 8000878:	f001 fa38 	bl	8001cec <vgaSetup>
	registerHUART(&huart2);
 800087c:	4814      	ldr	r0, [pc, #80]	; (80008d0 <main+0x168>)
 800087e:	f000 feb7 	bl	80015f0 <registerHUART>
	registerDebugInterupts(&hdma_tim1_up);
 8000882:	4817      	ldr	r0, [pc, #92]	; (80008e0 <main+0x178>)
 8000884:	f000 fe7a 	bl	800157c <registerDebugInterupts>


	//HAL_TIM_Base_Start_IT(&htim5);

	dumpLine();
 8000888:	f7ff fe7c 	bl	8000584 <dumpLine>
	printState(HAL_DMA_GetState(&hdma_memtomem_dma2_stream0));
 800088c:	4813      	ldr	r0, [pc, #76]	; (80008dc <main+0x174>)
 800088e:	f001 ff95 	bl	80027bc <HAL_DMA_GetState>
 8000892:	4603      	mov	r3, r0
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fee9 	bl	800066c <printState>
	printStatus(old_memSet(0xff, (uint32_t*)&screenBuff[0], 2));//testingMemset
	printState(HAL_DMA_GetState(&hdma_memtomem_dma2_stream0));
	dumpLine();
	while(printStatus(HAL_DMA_PollForTransfer(&hdma_memtomem_dma2_stream0, HAL_DMA_FULL_TRANSFER, 100))){HAL_Delay(1000);};
	//*/
	str_len = sprintf(str, "\r\nDone\r\n");
 800089a:	463b      	mov	r3, r7
 800089c:	4912      	ldr	r1, [pc, #72]	; (80008e8 <main+0x180>)
 800089e:	4618      	mov	r0, r3
 80008a0:	f004 fa62 	bl	8004d68 <siprintf>
 80008a4:	4603      	mov	r3, r0
 80008a6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80008aa:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80008ae:	4639      	mov	r1, r7
 80008b0:	f04f 33ff 	mov.w	r3, #4294967295
 80008b4:	4806      	ldr	r0, [pc, #24]	; (80008d0 <main+0x168>)
 80008b6:	f003 feb0 	bl	800461a <HAL_UART_Transmit>

	vgaStart();
 80008ba:	f001 faa1 	bl	8001e00 <vgaStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		profileCount++;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <main+0x184>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3301      	adds	r3, #1
 80008c4:	4a09      	ldr	r2, [pc, #36]	; (80008ec <main+0x184>)
 80008c6:	6013      	str	r3, [r2, #0]
 80008c8:	e7f9      	b.n	80008be <main+0x156>
 80008ca:	bf00      	nop
 80008cc:	08005794 	.word	0x08005794
 80008d0:	2000017c 	.word	0x2000017c
 80008d4:	2000059c 	.word	0x2000059c
 80008d8:	40020000 	.word	0x40020000
 80008dc:	200001c0 	.word	0x200001c0
 80008e0:	2000011c 	.word	0x2000011c
 80008e4:	2000008c 	.word	0x2000008c
 80008e8:	080057a4 	.word	0x080057a4
 80008ec:	20000274 	.word	0x20000274

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b094      	sub	sp, #80	; 0x50
 80008f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 0320 	add.w	r3, r7, #32
 80008fa:	2230      	movs	r2, #48	; 0x30
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f004 fa2a 	bl	8004d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000914:	2300      	movs	r3, #0
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	4b28      	ldr	r3, [pc, #160]	; (80009bc <SystemClock_Config+0xcc>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	4a27      	ldr	r2, [pc, #156]	; (80009bc <SystemClock_Config+0xcc>)
 800091e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000922:	6413      	str	r3, [r2, #64]	; 0x40
 8000924:	4b25      	ldr	r3, [pc, #148]	; (80009bc <SystemClock_Config+0xcc>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000930:	2300      	movs	r3, #0
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <SystemClock_Config+0xd0>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800093c:	4a20      	ldr	r2, [pc, #128]	; (80009c0 <SystemClock_Config+0xd0>)
 800093e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <SystemClock_Config+0xd0>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000950:	2302      	movs	r3, #2
 8000952:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000954:	2301      	movs	r3, #1
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000958:	2310      	movs	r3, #16
 800095a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095c:	2302      	movs	r3, #2
 800095e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000960:	2300      	movs	r3, #0
 8000962:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000964:	2308      	movs	r3, #8
 8000966:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 151;
 8000968:	2397      	movs	r3, #151	; 0x97
 800096a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800096c:	2304      	movs	r3, #4
 800096e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000970:	2307      	movs	r3, #7
 8000972:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000974:	f107 0320 	add.w	r3, r7, #32
 8000978:	4618      	mov	r0, r3
 800097a:	f002 f9b7 	bl	8002cec <HAL_RCC_OscConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000984:	f000 fa20 	bl	8000dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000988:	230f      	movs	r3, #15
 800098a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098c:	2302      	movs	r3, #2
 800098e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000998:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	2102      	movs	r1, #2
 80009a4:	4618      	mov	r0, r3
 80009a6:	f002 fc19 	bl	80031dc <HAL_RCC_ClockConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009b0:	f000 fa0a 	bl	8000dc8 <Error_Handler>
  }
}
 80009b4:	bf00      	nop
 80009b6:	3750      	adds	r7, #80	; 0x50
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40007000 	.word	0x40007000

080009c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b096      	sub	sp, #88	; 0x58
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]
 80009f2:	615a      	str	r2, [r3, #20]
 80009f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2220      	movs	r2, #32
 80009fa:	2100      	movs	r1, #0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f004 f9ab 	bl	8004d58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a02:	4b3e      	ldr	r3, [pc, #248]	; (8000afc <MX_TIM1_Init+0x138>)
 8000a04:	4a3e      	ldr	r2, [pc, #248]	; (8000b00 <MX_TIM1_Init+0x13c>)
 8000a06:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8000a08:	4b3c      	ldr	r3, [pc, #240]	; (8000afc <MX_TIM1_Init+0x138>)
 8000a0a:	22c7      	movs	r2, #199	; 0xc7
 8000a0c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0e:	4b3b      	ldr	r3, [pc, #236]	; (8000afc <MX_TIM1_Init+0x138>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3-1;
 8000a14:	4b39      	ldr	r3, [pc, #228]	; (8000afc <MX_TIM1_Init+0x138>)
 8000a16:	2202      	movs	r2, #2
 8000a18:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1a:	4b38      	ldr	r3, [pc, #224]	; (8000afc <MX_TIM1_Init+0x138>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a20:	4b36      	ldr	r3, [pc, #216]	; (8000afc <MX_TIM1_Init+0x138>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a26:	4b35      	ldr	r3, [pc, #212]	; (8000afc <MX_TIM1_Init+0x138>)
 8000a28:	2280      	movs	r2, #128	; 0x80
 8000a2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a2c:	4833      	ldr	r0, [pc, #204]	; (8000afc <MX_TIM1_Init+0x138>)
 8000a2e:	f002 fdf5 	bl	800361c <HAL_TIM_Base_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000a38:	f000 f9c6 	bl	8000dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a40:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a46:	4619      	mov	r1, r3
 8000a48:	482c      	ldr	r0, [pc, #176]	; (8000afc <MX_TIM1_Init+0x138>)
 8000a4a:	f003 f909 	bl	8003c60 <HAL_TIM_ConfigClockSource>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000a54:	f000 f9b8 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a58:	4828      	ldr	r0, [pc, #160]	; (8000afc <MX_TIM1_Init+0x138>)
 8000a5a:	f002 fe2e 	bl	80036ba <HAL_TIM_PWM_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000a64:	f000 f9b0 	bl	8000dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a74:	4619      	mov	r1, r3
 8000a76:	4821      	ldr	r0, [pc, #132]	; (8000afc <MX_TIM1_Init+0x138>)
 8000a78:	f003 fcae 	bl	80043d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000a82:	f000 f9a1 	bl	8000dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a86:	2360      	movs	r3, #96	; 0x60
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a92:	2300      	movs	r3, #0
 8000a94:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4814      	ldr	r0, [pc, #80]	; (8000afc <MX_TIM1_Init+0x138>)
 8000aac:	f003 f816 	bl	8003adc <HAL_TIM_PWM_ConfigChannel>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000ab6:	f000 f987 	bl	8000dc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ace:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	4619      	mov	r1, r3
 8000adc:	4807      	ldr	r0, [pc, #28]	; (8000afc <MX_TIM1_Init+0x138>)
 8000ade:	f003 fce9 	bl	80044b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000ae8:	f000 f96e 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000aec:	4803      	ldr	r0, [pc, #12]	; (8000afc <MX_TIM1_Init+0x138>)
 8000aee:	f000 fa15 	bl	8000f1c <HAL_TIM_MspPostInit>

}
 8000af2:	bf00      	nop
 8000af4:	3758      	adds	r7, #88	; 0x58
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	2000008c 	.word	0x2000008c
 8000b00:	40010000 	.word	0x40010000

08000b04 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b18:	463b      	mov	r3, r7
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b20:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <MX_TIM5_Init+0x94>)
 8000b22:	4a1e      	ldr	r2, [pc, #120]	; (8000b9c <MX_TIM5_Init+0x98>)
 8000b24:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 7550-1;
 8000b26:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <MX_TIM5_Init+0x94>)
 8000b28:	f641 527d 	movw	r2, #7549	; 0x1d7d
 8000b2c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <MX_TIM5_Init+0x94>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 8000b34:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <MX_TIM5_Init+0x94>)
 8000b36:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b3a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3c:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <MX_TIM5_Init+0x94>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <MX_TIM5_Init+0x94>)
 8000b44:	2280      	movs	r2, #128	; 0x80
 8000b46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000b48:	4813      	ldr	r0, [pc, #76]	; (8000b98 <MX_TIM5_Init+0x94>)
 8000b4a:	f002 fd67 	bl	800361c <HAL_TIM_Base_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000b54:	f000 f938 	bl	8000dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000b5e:	f107 0308 	add.w	r3, r7, #8
 8000b62:	4619      	mov	r1, r3
 8000b64:	480c      	ldr	r0, [pc, #48]	; (8000b98 <MX_TIM5_Init+0x94>)
 8000b66:	f003 f87b 	bl	8003c60 <HAL_TIM_ConfigClockSource>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000b70:	f000 f92a 	bl	8000dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b74:	2300      	movs	r3, #0
 8000b76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_TIM5_Init+0x94>)
 8000b82:	f003 fc29 	bl	80043d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000b8c:	f000 f91c 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200000d4 	.word	0x200000d4
 8000b9c:	40000c00 	.word	0x40000c00

08000ba0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_USART2_UART_Init+0x4c>)
 8000ba6:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <MX_USART2_UART_Init+0x50>)
 8000ba8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bd8:	f003 fcd2 	bl	8004580 <HAL_UART_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000be2:	f000 f8f1 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	2000017c 	.word	0x2000017c
 8000bf0:	40004400 	.word	0x40004400

08000bf4 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	4b26      	ldr	r3, [pc, #152]	; (8000c98 <MX_DMA_Init+0xa4>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a25      	ldr	r2, [pc, #148]	; (8000c98 <MX_DMA_Init+0xa4>)
 8000c04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b23      	ldr	r3, [pc, #140]	; (8000c98 <MX_DMA_Init+0xa4>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000c16:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <MX_DMA_Init+0xa8>)
 8000c18:	4a21      	ldr	r2, [pc, #132]	; (8000ca0 <MX_DMA_Init+0xac>)
 8000c1a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000c1c:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <MX_DMA_Init+0xa8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000c22:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <MX_DMA_Init+0xa8>)
 8000c24:	2280      	movs	r2, #128	; 0x80
 8000c26:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000c28:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <MX_DMA_Init+0xa8>)
 8000c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c2e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000c30:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <MX_DMA_Init+0xa8>)
 8000c32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c36:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c38:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <MX_DMA_Init+0xa8>)
 8000c3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c3e:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c40:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <MX_DMA_Init+0xa8>)
 8000c42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c46:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <MX_DMA_Init+0xa8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000c4e:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <MX_DMA_Init+0xa8>)
 8000c50:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c54:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <MX_DMA_Init+0xa8>)
 8000c58:	2204      	movs	r2, #4
 8000c5a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <MX_DMA_Init+0xa8>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <MX_DMA_Init+0xa8>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <MX_DMA_Init+0xa8>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000c6e:	480b      	ldr	r0, [pc, #44]	; (8000c9c <MX_DMA_Init+0xa8>)
 8000c70:	f001 fac0 	bl	80021f4 <HAL_DMA_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_DMA_Init+0x8a>
  {
    Error_Handler( );
 8000c7a:	f000 f8a5 	bl	8000dc8 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2100      	movs	r1, #0
 8000c82:	2044      	movs	r0, #68	; 0x44
 8000c84:	f001 fa7f 	bl	8002186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000c88:	2044      	movs	r0, #68	; 0x44
 8000c8a:	f001 fa98 	bl	80021be <HAL_NVIC_EnableIRQ>

}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	200001c0 	.word	0x200001c0
 8000ca0:	40026410 	.word	0x40026410

08000ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	4b3f      	ldr	r3, [pc, #252]	; (8000dbc <MX_GPIO_Init+0x118>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a3e      	ldr	r2, [pc, #248]	; (8000dbc <MX_GPIO_Init+0x118>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b3c      	ldr	r3, [pc, #240]	; (8000dbc <MX_GPIO_Init+0x118>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b38      	ldr	r3, [pc, #224]	; (8000dbc <MX_GPIO_Init+0x118>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a37      	ldr	r2, [pc, #220]	; (8000dbc <MX_GPIO_Init+0x118>)
 8000ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b35      	ldr	r3, [pc, #212]	; (8000dbc <MX_GPIO_Init+0x118>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	4b31      	ldr	r3, [pc, #196]	; (8000dbc <MX_GPIO_Init+0x118>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a30      	ldr	r2, [pc, #192]	; (8000dbc <MX_GPIO_Init+0x118>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b2e      	ldr	r3, [pc, #184]	; (8000dbc <MX_GPIO_Init+0x118>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b2a      	ldr	r3, [pc, #168]	; (8000dbc <MX_GPIO_Init+0x118>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a29      	ldr	r2, [pc, #164]	; (8000dbc <MX_GPIO_Init+0x118>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b27      	ldr	r3, [pc, #156]	; (8000dbc <MX_GPIO_Init+0x118>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, vgaPin0_B0_Pin|vgaPin1_B1_Pin|vgaPin2_B2_Pin|vgaPin3_B3_Pin
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8000d30:	4823      	ldr	r0, [pc, #140]	; (8000dc0 <MX_GPIO_Init+0x11c>)
 8000d32:	f001 ffc1 	bl	8002cb8 <HAL_GPIO_WritePin>
                          |vgaPin4_G0_Pin|vgaPin5_G1_Pin|vgaPin6_G2_Pin|vgaPin7_G3_Pin
                          |vgaPin8_R0_Pin|vgaPin9_R1_Pin|vgaPin10_R2_Pin|vgaPin11_R3_Pin
                          |vgaPin12_Hsync_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, vgaPin13_Vsync_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2122      	movs	r1, #34	; 0x22
 8000d3a:	4822      	ldr	r0, [pc, #136]	; (8000dc4 <MX_GPIO_Init+0x120>)
 8000d3c:	f001 ffbc 	bl	8002cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d46:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4619      	mov	r1, r3
 8000d56:	481a      	ldr	r0, [pc, #104]	; (8000dc0 <MX_GPIO_Init+0x11c>)
 8000d58:	f001 fe2a 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : vgaPin0_B0_Pin vgaPin1_B1_Pin vgaPin2_B2_Pin vgaPin3_B3_Pin
                           vgaPin4_G0_Pin vgaPin5_G1_Pin vgaPin6_G2_Pin vgaPin7_G3_Pin
                           vgaPin8_R0_Pin vgaPin9_R1_Pin vgaPin10_R2_Pin vgaPin11_R3_Pin
                           vgaPin12_Hsync_Pin */
  GPIO_InitStruct.Pin = vgaPin0_B0_Pin|vgaPin1_B1_Pin|vgaPin2_B2_Pin|vgaPin3_B3_Pin
 8000d5c:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000d60:	617b      	str	r3, [r7, #20]
                          |vgaPin4_G0_Pin|vgaPin5_G1_Pin|vgaPin6_G2_Pin|vgaPin7_G3_Pin
                          |vgaPin8_R0_Pin|vgaPin9_R1_Pin|vgaPin10_R2_Pin|vgaPin11_R3_Pin
                          |vgaPin12_Hsync_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	4812      	ldr	r0, [pc, #72]	; (8000dc0 <MX_GPIO_Init+0x11c>)
 8000d76:	f001 fe1b 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : vgaPin13_Vsync_Pin */
  GPIO_InitStruct.Pin = vgaPin13_Vsync_Pin;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d86:	2302      	movs	r3, #2
 8000d88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(vgaPin13_Vsync_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <MX_GPIO_Init+0x120>)
 8000d92:	f001 fe0d 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d96:	2320      	movs	r3, #32
 8000d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_GPIO_Init+0x120>)
 8000dae:	f001 fdff 	bl	80029b0 <HAL_GPIO_Init>

}
 8000db2:	bf00      	nop
 8000db4:	3728      	adds	r7, #40	; 0x28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020800 	.word	0x40020800
 8000dc4:	40020000 	.word	0x40020000

08000dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i
}
 8000dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <Error_Handler+0x8>
	...

08000dd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <HAL_MspInit+0x4c>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	4a0f      	ldr	r2, [pc, #60]	; (8000e20 <HAL_MspInit+0x4c>)
 8000de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dea:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <HAL_MspInit+0x4c>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	603b      	str	r3, [r7, #0]
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <HAL_MspInit+0x4c>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a08      	ldr	r2, [pc, #32]	; (8000e20 <HAL_MspInit+0x4c>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_MspInit+0x4c>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e12:	2007      	movs	r0, #7
 8000e14:	f001 f9ac 	bl	8002170 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40023800 	.word	0x40023800

08000e24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a35      	ldr	r2, [pc, #212]	; (8000f08 <HAL_TIM_Base_MspInit+0xe4>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d148      	bne.n	8000ec8 <HAL_TIM_Base_MspInit+0xa4>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	4b34      	ldr	r3, [pc, #208]	; (8000f0c <HAL_TIM_Base_MspInit+0xe8>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	4a33      	ldr	r2, [pc, #204]	; (8000f0c <HAL_TIM_Base_MspInit+0xe8>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6453      	str	r3, [r2, #68]	; 0x44
 8000e46:	4b31      	ldr	r3, [pc, #196]	; (8000f0c <HAL_TIM_Base_MspInit+0xe8>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8000e52:	4b2f      	ldr	r3, [pc, #188]	; (8000f10 <HAL_TIM_Base_MspInit+0xec>)
 8000e54:	4a2f      	ldr	r2, [pc, #188]	; (8000f14 <HAL_TIM_Base_MspInit+0xf0>)
 8000e56:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8000e58:	4b2d      	ldr	r3, [pc, #180]	; (8000f10 <HAL_TIM_Base_MspInit+0xec>)
 8000e5a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000e5e:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e60:	4b2b      	ldr	r3, [pc, #172]	; (8000f10 <HAL_TIM_Base_MspInit+0xec>)
 8000e62:	2240      	movs	r2, #64	; 0x40
 8000e64:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e66:	4b2a      	ldr	r3, [pc, #168]	; (8000f10 <HAL_TIM_Base_MspInit+0xec>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000e6c:	4b28      	ldr	r3, [pc, #160]	; (8000f10 <HAL_TIM_Base_MspInit+0xec>)
 8000e6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e72:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e74:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <HAL_TIM_Base_MspInit+0xec>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e7a:	4b25      	ldr	r3, [pc, #148]	; (8000f10 <HAL_TIM_Base_MspInit+0xec>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8000e80:	4b23      	ldr	r3, [pc, #140]	; (8000f10 <HAL_TIM_Base_MspInit+0xec>)
 8000e82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e86:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e88:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <HAL_TIM_Base_MspInit+0xec>)
 8000e8a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e8e:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e90:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <HAL_TIM_Base_MspInit+0xec>)
 8000e92:	2204      	movs	r2, #4
 8000e94:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim1_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8000e96:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <HAL_TIM_Base_MspInit+0xec>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim1_up.Init.MemBurst = DMA_MBURST_INC4;
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <HAL_TIM_Base_MspInit+0xec>)
 8000e9e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000ea2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim1_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <HAL_TIM_Base_MspInit+0xec>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000eaa:	4819      	ldr	r0, [pc, #100]	; (8000f10 <HAL_TIM_Base_MspInit+0xec>)
 8000eac:	f001 f9a2 	bl	80021f4 <HAL_DMA_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_TIM_Base_MspInit+0x96>
    {
      Error_Handler();
 8000eb6:	f7ff ff87 	bl	8000dc8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <HAL_TIM_Base_MspInit+0xec>)
 8000ebe:	621a      	str	r2, [r3, #32]
 8000ec0:	4a13      	ldr	r2, [pc, #76]	; (8000f10 <HAL_TIM_Base_MspInit+0xec>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000ec6:	e01a      	b.n	8000efe <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM5)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <HAL_TIM_Base_MspInit+0xf4>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d115      	bne.n	8000efe <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <HAL_TIM_Base_MspInit+0xe8>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	4a0c      	ldr	r2, [pc, #48]	; (8000f0c <HAL_TIM_Base_MspInit+0xe8>)
 8000edc:	f043 0308 	orr.w	r3, r3, #8
 8000ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <HAL_TIM_Base_MspInit+0xe8>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f003 0308 	and.w	r3, r3, #8
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 1);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2032      	movs	r0, #50	; 0x32
 8000ef4:	f001 f947 	bl	8002186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000ef8:	2032      	movs	r0, #50	; 0x32
 8000efa:	f001 f960 	bl	80021be <HAL_NVIC_EnableIRQ>
}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40010000 	.word	0x40010000
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	2000011c 	.word	0x2000011c
 8000f14:	40026488 	.word	0x40026488
 8000f18:	40000c00 	.word	0x40000c00

08000f1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <HAL_TIM_MspPostInit+0x68>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d11e      	bne.n	8000f7c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <HAL_TIM_MspPostInit+0x6c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a10      	ldr	r2, [pc, #64]	; (8000f88 <HAL_TIM_MspPostInit+0x6c>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_TIM_MspPostInit+0x6c>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	4619      	mov	r1, r3
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <HAL_TIM_MspPostInit+0x70>)
 8000f78:	f001 fd1a 	bl	80029b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f7c:	bf00      	nop
 8000f7e:	3720      	adds	r7, #32
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40010000 	.word	0x40010000
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020000 	.word	0x40020000

08000f90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a19      	ldr	r2, [pc, #100]	; (8001014 <HAL_UART_MspInit+0x84>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d12b      	bne.n	800100a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	4a17      	ldr	r2, [pc, #92]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a10      	ldr	r2, [pc, #64]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fea:	230c      	movs	r3, #12
 8000fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	4805      	ldr	r0, [pc, #20]	; (800101c <HAL_UART_MspInit+0x8c>)
 8001006:	f001 fcd3 	bl	80029b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3728      	adds	r7, #40	; 0x28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40004400 	.word	0x40004400
 8001018:	40023800 	.word	0x40023800
 800101c:	40020000 	.word	0x40020000

08001020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <NMI_Handler+0x4>

08001026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <HardFault_Handler+0x4>

0800102c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <MemManage_Handler+0x4>

08001032 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <BusFault_Handler+0x4>

08001038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <UsageFault_Handler+0x4>

0800103e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800106c:	f000 ff90 	bl	8001f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <TIM5_IRQHandler+0x10>)
 800107a:	f002 fc27 	bl	80038cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200000d4 	.word	0x200000d4

08001088 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <DMA2_Stream5_IRQHandler+0x10>)
 800108e:	f001 f9b7 	bl	8002400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2000011c 	.word	0x2000011c

0800109c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a4:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <_sbrk+0x5c>)
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <_sbrk+0x60>)
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <_sbrk+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <_sbrk+0x64>)
 80010ba:	4a12      	ldr	r2, [pc, #72]	; (8001104 <_sbrk+0x68>)
 80010bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d207      	bcs.n	80010dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010cc:	f003 fe1a 	bl	8004d04 <__errno>
 80010d0:	4603      	mov	r3, r0
 80010d2:	220c      	movs	r2, #12
 80010d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	e009      	b.n	80010f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <_sbrk+0x64>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	4a05      	ldr	r2, [pc, #20]	; (8001100 <_sbrk+0x64>)
 80010ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ee:	68fb      	ldr	r3, [r7, #12]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20018000 	.word	0x20018000
 80010fc:	00000400 	.word	0x00000400
 8001100:	20000278 	.word	0x20000278
 8001104:	2000ffe8 	.word	0x2000ffe8

08001108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <SystemInit+0x20>)
 800110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001112:	4a05      	ldr	r2, [pc, #20]	; (8001128 <SystemInit+0x20>)
 8001114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <old_memCopy>:
 *
 * @param DstAddress copies to destination address incrementing
 *
 * @param DataLength number of unit32_t to be copied
 */
HAL_StatusTypeDef old_memCopy(uint32_t * SrcAddress, uint32_t * DstAddress, uint32_t DataLength){
 800112c:	b580      	push	{r7, lr}
 800112e:	b09a      	sub	sp, #104	; 0x68
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]

	memCopyDMA->Init.PeriphInc = DMA_PINC_ENABLE;
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <old_memCopy+0x78>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001140:	60da      	str	r2, [r3, #12]
	if (HAL_DMA_Init(memCopyDMA) != HAL_OK) {
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <old_memCopy+0x78>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f001 f854 	bl	80021f4 <HAL_DMA_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <old_memCopy+0x2a>
		Error_Handler();
 8001152:	f7ff fe39 	bl	8000dc8 <Error_Handler>
	}
	char str[81] = { '\0' };
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	224d      	movs	r2, #77	; 0x4d
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f003 fdf8 	bl	8004d58 <memset>
	int str_len = sprintf(str, "start mem copy\r\n");
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	490e      	ldr	r1, [pc, #56]	; (80011a8 <old_memCopy+0x7c>)
 800116e:	4618      	mov	r0, r3
 8001170:	f003 fdfa 	bl	8004d68 <siprintf>
 8001174:	6678      	str	r0, [r7, #100]	; 0x64
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8001176:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <old_memCopy+0x80>)
 8001178:	6818      	ldr	r0, [r3, #0]
 800117a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800117c:	b29a      	uxth	r2, r3
 800117e:	f107 0110 	add.w	r1, r7, #16
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	f003 fa48 	bl	800461a <HAL_UART_Transmit>
	//SET_BIT(vgaCircularDMA.Instance->CR, DMA_MINC_ENABLE);
	return HAL_DMA_Start_IT(memCopyDMA, (uint32_t)SrcAddress, (uint32_t)DstAddress, DataLength);
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <old_memCopy+0x78>)
 800118c:	6818      	ldr	r0, [r3, #0]
 800118e:	68f9      	ldr	r1, [r7, #12]
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f001 f8dc 	bl	8002350 <HAL_DMA_Start_IT>
 8001198:	4603      	mov	r3, r0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3768      	adds	r7, #104	; 0x68
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2000ffa4 	.word	0x2000ffa4
 80011a8:	080057c8 	.word	0x080057c8
 80011ac:	2000ffc8 	.word	0x2000ffc8

080011b0 <old_memSet>:
 *
 * @param DstAddress destination address incrementing
 *
 * @param DataLength number of unit32_t to be written
 */
HAL_StatusTypeDef old_memSet(uint32_t value, uint32_t * DstAddress, uint32_t DataLength){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b09a      	sub	sp, #104	; 0x68
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
	static volatile uint32_t setVal = 0;
	setVal = value;
 80011bc:	4a1b      	ldr	r2, [pc, #108]	; (800122c <old_memSet+0x7c>)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6013      	str	r3, [r2, #0]
	memCopyDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 80011c2:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <old_memSet+0x80>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
	if (HAL_DMA_Init(memCopyDMA) != HAL_OK) {
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <old_memSet+0x80>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f001 f810 	bl	80021f4 <HAL_DMA_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <old_memSet+0x2e>
		Error_Handler();
 80011da:	f7ff fdf5 	bl	8000dc8 <Error_Handler>
	}
	char str[81] = { '\0' };
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	224d      	movs	r2, #77	; 0x4d
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f003 fdb4 	bl	8004d58 <memset>
	int str_len = sprintf(str, "start mem set\r\n");
 80011f0:	f107 0310 	add.w	r3, r7, #16
 80011f4:	490f      	ldr	r1, [pc, #60]	; (8001234 <old_memSet+0x84>)
 80011f6:	4618      	mov	r0, r3
 80011f8:	f003 fdb6 	bl	8004d68 <siprintf>
 80011fc:	6678      	str	r0, [r7, #100]	; 0x64
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <old_memSet+0x88>)
 8001200:	6818      	ldr	r0, [r3, #0]
 8001202:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001204:	b29a      	uxth	r2, r3
 8001206:	f107 0110 	add.w	r1, r7, #16
 800120a:	f04f 33ff 	mov.w	r3, #4294967295
 800120e:	f003 fa04 	bl	800461a <HAL_UART_Transmit>
	//CLEAR_BIT(vgaCircularDMA.Instance->CR, DMA_MINC_ENABLE);
	return HAL_DMA_Start_IT(memCopyDMA, (uint32_t)&setVal, (uint32_t)DstAddress, DataLength);
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <old_memSet+0x80>)
 8001214:	6818      	ldr	r0, [r3, #0]
 8001216:	4905      	ldr	r1, [pc, #20]	; (800122c <old_memSet+0x7c>)
 8001218:	68ba      	ldr	r2, [r7, #8]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f001 f898 	bl	8002350 <HAL_DMA_Start_IT>
 8001220:	4603      	mov	r3, r0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3768      	adds	r7, #104	; 0x68
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	2000ffcc 	.word	0x2000ffcc
 8001230:	2000ffa4 	.word	0x2000ffa4
 8001234:	080057dc 	.word	0x080057dc
 8001238:	2000ffc8 	.word	0x2000ffc8

0800123c <vga_DMA_XFER_CPLT_CB_ID>:


//HAL_DMA_XFER_CPLT_CB_ID         = 0x00U,  /*!< Full transfer     */
void vga_DMA_XFER_CPLT_CB_ID(){
 800123c:	b580      	push	{r7, lr}
 800123e:	b096      	sub	sp, #88	; 0x58
 8001240:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 8001242:	2300      	movs	r3, #0
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	224d      	movs	r2, #77	; 0x4d
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f003 fd83 	bl	8004d58 <memset>
	int str_len = sprintf(str, "Full transfer\r\n");
 8001252:	463b      	mov	r3, r7
 8001254:	4908      	ldr	r1, [pc, #32]	; (8001278 <vga_DMA_XFER_CPLT_CB_ID+0x3c>)
 8001256:	4618      	mov	r0, r3
 8001258:	f003 fd86 	bl	8004d68 <siprintf>
 800125c:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800125e:	4b07      	ldr	r3, [pc, #28]	; (800127c <vga_DMA_XFER_CPLT_CB_ID+0x40>)
 8001260:	6818      	ldr	r0, [r3, #0]
 8001262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001264:	b29a      	uxth	r2, r3
 8001266:	4639      	mov	r1, r7
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
 800126c:	f003 f9d5 	bl	800461a <HAL_UART_Transmit>
}
 8001270:	bf00      	nop
 8001272:	3758      	adds	r7, #88	; 0x58
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	080057ec 	.word	0x080057ec
 800127c:	2000ffc8 	.word	0x2000ffc8

08001280 <vga_DMA_XFER_HALFCPLT_CB_ID>:
//HAL_DMA_XFER_HALFCPLT_CB_ID     = 0x01U,  /*!< Half Transfer     */
void vga_DMA_XFER_HALFCPLT_CB_ID(){
 8001280:	b580      	push	{r7, lr}
 8001282:	b096      	sub	sp, #88	; 0x58
 8001284:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	224d      	movs	r2, #77	; 0x4d
 800128e:	2100      	movs	r1, #0
 8001290:	4618      	mov	r0, r3
 8001292:	f003 fd61 	bl	8004d58 <memset>
	int str_len = sprintf(str, "Half Transfer\r\n");
 8001296:	463b      	mov	r3, r7
 8001298:	4908      	ldr	r1, [pc, #32]	; (80012bc <vga_DMA_XFER_HALFCPLT_CB_ID+0x3c>)
 800129a:	4618      	mov	r0, r3
 800129c:	f003 fd64 	bl	8004d68 <siprintf>
 80012a0:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <vga_DMA_XFER_HALFCPLT_CB_ID+0x40>)
 80012a4:	6818      	ldr	r0, [r3, #0]
 80012a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	4639      	mov	r1, r7
 80012ac:	f04f 33ff 	mov.w	r3, #4294967295
 80012b0:	f003 f9b3 	bl	800461a <HAL_UART_Transmit>
}
 80012b4:	bf00      	nop
 80012b6:	3758      	adds	r7, #88	; 0x58
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	080057fc 	.word	0x080057fc
 80012c0:	2000ffc8 	.word	0x2000ffc8

080012c4 <vga_DMA_XFER_M1CPLT_CB_ID>:
//HAL_DMA_XFER_M1CPLT_CB_ID       = 0x02U,  /*!< M1 Full Transfer  */
void vga_DMA_XFER_M1CPLT_CB_ID(){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b096      	sub	sp, #88	; 0x58
 80012c8:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 80012ca:	2300      	movs	r3, #0
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	224d      	movs	r2, #77	; 0x4d
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f003 fd3f 	bl	8004d58 <memset>
	int str_len = sprintf(str, "M1 Full Transfer\r\n");
 80012da:	463b      	mov	r3, r7
 80012dc:	4908      	ldr	r1, [pc, #32]	; (8001300 <vga_DMA_XFER_M1CPLT_CB_ID+0x3c>)
 80012de:	4618      	mov	r0, r3
 80012e0:	f003 fd42 	bl	8004d68 <siprintf>
 80012e4:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80012e6:	4b07      	ldr	r3, [pc, #28]	; (8001304 <vga_DMA_XFER_M1CPLT_CB_ID+0x40>)
 80012e8:	6818      	ldr	r0, [r3, #0]
 80012ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	4639      	mov	r1, r7
 80012f0:	f04f 33ff 	mov.w	r3, #4294967295
 80012f4:	f003 f991 	bl	800461a <HAL_UART_Transmit>
}
 80012f8:	bf00      	nop
 80012fa:	3758      	adds	r7, #88	; 0x58
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	0800580c 	.word	0x0800580c
 8001304:	2000ffc8 	.word	0x2000ffc8

08001308 <vga_DMA_XFER_M1HALFCPLT_CB_ID>:
//HAL_DMA_XFER_M1HALFCPLT_CB_ID   = 0x03U,  /*!< M1 Half Transfer  */
void vga_DMA_XFER_M1HALFCPLT_CB_ID(){
 8001308:	b580      	push	{r7, lr}
 800130a:	b096      	sub	sp, #88	; 0x58
 800130c:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 800130e:	2300      	movs	r3, #0
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	224d      	movs	r2, #77	; 0x4d
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f003 fd1d 	bl	8004d58 <memset>
	int str_len = sprintf(str, "M1 Half Transfer\r\n");
 800131e:	463b      	mov	r3, r7
 8001320:	4908      	ldr	r1, [pc, #32]	; (8001344 <vga_DMA_XFER_M1HALFCPLT_CB_ID+0x3c>)
 8001322:	4618      	mov	r0, r3
 8001324:	f003 fd20 	bl	8004d68 <siprintf>
 8001328:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800132a:	4b07      	ldr	r3, [pc, #28]	; (8001348 <vga_DMA_XFER_M1HALFCPLT_CB_ID+0x40>)
 800132c:	6818      	ldr	r0, [r3, #0]
 800132e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001330:	b29a      	uxth	r2, r3
 8001332:	4639      	mov	r1, r7
 8001334:	f04f 33ff 	mov.w	r3, #4294967295
 8001338:	f003 f96f 	bl	800461a <HAL_UART_Transmit>
}
 800133c:	bf00      	nop
 800133e:	3758      	adds	r7, #88	; 0x58
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	08005820 	.word	0x08005820
 8001348:	2000ffc8 	.word	0x2000ffc8

0800134c <vga_DMA_XFER_ERROR_CB_ID>:
//HAL_DMA_XFER_ERROR_CB_ID        = 0x04U,  /*!< Error             */
void vga_DMA_XFER_ERROR_CB_ID(){
 800134c:	b580      	push	{r7, lr}
 800134e:	b09a      	sub	sp, #104	; 0x68
 8001350:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	f107 0308 	add.w	r3, r7, #8
 800135a:	224d      	movs	r2, #77	; 0x4d
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f003 fcfa 	bl	8004d58 <memset>
	char * err = "Default";
 8001364:	4b57      	ldr	r3, [pc, #348]	; (80014c4 <vga_DMA_XFER_ERROR_CB_ID+0x178>)
 8001366:	667b      	str	r3, [r7, #100]	; 0x64
	uint32_t errorCode = HAL_DMA_GetError(vgaCircularDMA);
 8001368:	4b57      	ldr	r3, [pc, #348]	; (80014c8 <vga_DMA_XFER_ERROR_CB_ID+0x17c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f001 fa33 	bl	80027d8 <HAL_DMA_GetError>
 8001372:	6638      	str	r0, [r7, #96]	; 0x60
	if(errorCode == HAL_DMA_ERROR_NONE){
 8001374:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001376:	2b00      	cmp	r3, #0
 8001378:	f040 809b 	bne.w	80014b2 <vga_DMA_XFER_ERROR_CB_ID+0x166>
		int str_len = sprintf(str, "DMA %s\r\n", "No error");
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	4a53      	ldr	r2, [pc, #332]	; (80014cc <vga_DMA_XFER_ERROR_CB_ID+0x180>)
 8001380:	4953      	ldr	r1, [pc, #332]	; (80014d0 <vga_DMA_XFER_ERROR_CB_ID+0x184>)
 8001382:	4618      	mov	r0, r3
 8001384:	f003 fcf0 	bl	8004d68 <siprintf>
 8001388:	65f8      	str	r0, [r7, #92]	; 0x5c
		HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800138a:	4b52      	ldr	r3, [pc, #328]	; (80014d4 <vga_DMA_XFER_ERROR_CB_ID+0x188>)
 800138c:	6818      	ldr	r0, [r3, #0]
 800138e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001390:	b29a      	uxth	r2, r3
 8001392:	1d39      	adds	r1, r7, #4
 8001394:	f04f 33ff 	mov.w	r3, #4294967295
 8001398:	f003 f93f 	bl	800461a <HAL_UART_Transmit>
	}
	while(errorCode){
 800139c:	e089      	b.n	80014b2 <vga_DMA_XFER_ERROR_CB_ID+0x166>
		switch(errorCode){
 800139e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013a4:	d06d      	beq.n	8001482 <vga_DMA_XFER_ERROR_CB_ID+0x136>
 80013a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013ac:	d86c      	bhi.n	8001488 <vga_DMA_XFER_ERROR_CB_ID+0x13c>
 80013ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013b0:	2b80      	cmp	r3, #128	; 0x80
 80013b2:	d063      	beq.n	800147c <vga_DMA_XFER_ERROR_CB_ID+0x130>
 80013b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013b6:	2b80      	cmp	r3, #128	; 0x80
 80013b8:	d866      	bhi.n	8001488 <vga_DMA_XFER_ERROR_CB_ID+0x13c>
 80013ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013bc:	2b20      	cmp	r3, #32
 80013be:	d847      	bhi.n	8001450 <vga_DMA_XFER_ERROR_CB_ID+0x104>
 80013c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013c2:	2b20      	cmp	r3, #32
 80013c4:	d860      	bhi.n	8001488 <vga_DMA_XFER_ERROR_CB_ID+0x13c>
 80013c6:	a201      	add	r2, pc, #4	; (adr r2, 80013cc <vga_DMA_XFER_ERROR_CB_ID+0x80>)
 80013c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013cc:	08001459 	.word	0x08001459
 80013d0:	0800145f 	.word	0x0800145f
 80013d4:	08001465 	.word	0x08001465
 80013d8:	08001489 	.word	0x08001489
 80013dc:	0800146b 	.word	0x0800146b
 80013e0:	08001489 	.word	0x08001489
 80013e4:	08001489 	.word	0x08001489
 80013e8:	08001489 	.word	0x08001489
 80013ec:	08001489 	.word	0x08001489
 80013f0:	08001489 	.word	0x08001489
 80013f4:	08001489 	.word	0x08001489
 80013f8:	08001489 	.word	0x08001489
 80013fc:	08001489 	.word	0x08001489
 8001400:	08001489 	.word	0x08001489
 8001404:	08001489 	.word	0x08001489
 8001408:	08001489 	.word	0x08001489
 800140c:	08001489 	.word	0x08001489
 8001410:	08001489 	.word	0x08001489
 8001414:	08001489 	.word	0x08001489
 8001418:	08001489 	.word	0x08001489
 800141c:	08001489 	.word	0x08001489
 8001420:	08001489 	.word	0x08001489
 8001424:	08001489 	.word	0x08001489
 8001428:	08001489 	.word	0x08001489
 800142c:	08001489 	.word	0x08001489
 8001430:	08001489 	.word	0x08001489
 8001434:	08001489 	.word	0x08001489
 8001438:	08001489 	.word	0x08001489
 800143c:	08001489 	.word	0x08001489
 8001440:	08001489 	.word	0x08001489
 8001444:	08001489 	.word	0x08001489
 8001448:	08001489 	.word	0x08001489
 800144c:	08001471 	.word	0x08001471
 8001450:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001452:	2b40      	cmp	r3, #64	; 0x40
 8001454:	d00f      	beq.n	8001476 <vga_DMA_XFER_ERROR_CB_ID+0x12a>
 8001456:	e017      	b.n	8001488 <vga_DMA_XFER_ERROR_CB_ID+0x13c>
		case HAL_DMA_ERROR_NONE            : err = "No error";break;    /*!< No error                               */
 8001458:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <vga_DMA_XFER_ERROR_CB_ID+0x180>)
 800145a:	667b      	str	r3, [r7, #100]	; 0x64
 800145c:	e014      	b.n	8001488 <vga_DMA_XFER_ERROR_CB_ID+0x13c>
		case HAL_DMA_ERROR_TE              : err = "Transfer error";break;    /*!< Transfer error                         */
 800145e:	4b1e      	ldr	r3, [pc, #120]	; (80014d8 <vga_DMA_XFER_ERROR_CB_ID+0x18c>)
 8001460:	667b      	str	r3, [r7, #100]	; 0x64
 8001462:	e011      	b.n	8001488 <vga_DMA_XFER_ERROR_CB_ID+0x13c>
		case HAL_DMA_ERROR_FE              : err = "FIFO error";break;    /*!< FIFO error                             */
 8001464:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <vga_DMA_XFER_ERROR_CB_ID+0x190>)
 8001466:	667b      	str	r3, [r7, #100]	; 0x64
 8001468:	e00e      	b.n	8001488 <vga_DMA_XFER_ERROR_CB_ID+0x13c>
		case HAL_DMA_ERROR_DME             : err = "Direct Mode error";break;    /*!< Direct Mode error                      */
 800146a:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <vga_DMA_XFER_ERROR_CB_ID+0x194>)
 800146c:	667b      	str	r3, [r7, #100]	; 0x64
 800146e:	e00b      	b.n	8001488 <vga_DMA_XFER_ERROR_CB_ID+0x13c>
		case HAL_DMA_ERROR_TIMEOUT         : err = "Timeout error";break;    /*!< Timeout error                          */
 8001470:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <vga_DMA_XFER_ERROR_CB_ID+0x198>)
 8001472:	667b      	str	r3, [r7, #100]	; 0x64
 8001474:	e008      	b.n	8001488 <vga_DMA_XFER_ERROR_CB_ID+0x13c>
		case HAL_DMA_ERROR_PARAM           : err = "Parameter error";break;    /*!< Parameter error                        */
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <vga_DMA_XFER_ERROR_CB_ID+0x19c>)
 8001478:	667b      	str	r3, [r7, #100]	; 0x64
 800147a:	e005      	b.n	8001488 <vga_DMA_XFER_ERROR_CB_ID+0x13c>
		case HAL_DMA_ERROR_NO_XFER         : err = "Abort requested with no Xfer ongoing";break;    /*!< Abort requested with no Xfer ongoing   */
 800147c:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <vga_DMA_XFER_ERROR_CB_ID+0x1a0>)
 800147e:	667b      	str	r3, [r7, #100]	; 0x64
 8001480:	e002      	b.n	8001488 <vga_DMA_XFER_ERROR_CB_ID+0x13c>
		case HAL_DMA_ERROR_NOT_SUPPORTED   : err = "Not supported mode";break;    /*!< Not supported mode                     */
 8001482:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <vga_DMA_XFER_ERROR_CB_ID+0x1a4>)
 8001484:	667b      	str	r3, [r7, #100]	; 0x64
 8001486:	bf00      	nop
		}

		int str_len = sprintf(str, "DMA %s\r\n", err);
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800148c:	4910      	ldr	r1, [pc, #64]	; (80014d0 <vga_DMA_XFER_ERROR_CB_ID+0x184>)
 800148e:	4618      	mov	r0, r3
 8001490:	f003 fc6a 	bl	8004d68 <siprintf>
 8001494:	65b8      	str	r0, [r7, #88]	; 0x58
		HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8001496:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <vga_DMA_XFER_ERROR_CB_ID+0x188>)
 8001498:	6818      	ldr	r0, [r3, #0]
 800149a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800149c:	b29a      	uxth	r2, r3
 800149e:	1d39      	adds	r1, r7, #4
 80014a0:	f04f 33ff 	mov.w	r3, #4294967295
 80014a4:	f003 f8b9 	bl	800461a <HAL_UART_Transmit>
		errorCode &= errorCode - 1;
 80014a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014aa:	3b01      	subs	r3, #1
 80014ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014ae:	4013      	ands	r3, r2
 80014b0:	663b      	str	r3, [r7, #96]	; 0x60
	while(errorCode){
 80014b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f47f af72 	bne.w	800139e <vga_DMA_XFER_ERROR_CB_ID+0x52>
	};

}
 80014ba:	bf00      	nop
 80014bc:	bf00      	nop
 80014be:	3768      	adds	r7, #104	; 0x68
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	08005834 	.word	0x08005834
 80014c8:	2000ffa0 	.word	0x2000ffa0
 80014cc:	0800583c 	.word	0x0800583c
 80014d0:	08005848 	.word	0x08005848
 80014d4:	2000ffc8 	.word	0x2000ffc8
 80014d8:	08005854 	.word	0x08005854
 80014dc:	08005864 	.word	0x08005864
 80014e0:	08005870 	.word	0x08005870
 80014e4:	08005884 	.word	0x08005884
 80014e8:	08005894 	.word	0x08005894
 80014ec:	080058a4 	.word	0x080058a4
 80014f0:	080058cc 	.word	0x080058cc

080014f4 <vga_DMA_XFER_ABORT_CB_ID>:
//HAL_DMA_XFER_ABORT_CB_ID        = 0x05U,  /*!< Abort             */
void vga_DMA_XFER_ABORT_CB_ID(){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b096      	sub	sp, #88	; 0x58
 80014f8:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 80014fa:	2300      	movs	r3, #0
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	224d      	movs	r2, #77	; 0x4d
 8001502:	2100      	movs	r1, #0
 8001504:	4618      	mov	r0, r3
 8001506:	f003 fc27 	bl	8004d58 <memset>
	int str_len = sprintf(str, "DMA Abort\r\n");
 800150a:	463b      	mov	r3, r7
 800150c:	4908      	ldr	r1, [pc, #32]	; (8001530 <vga_DMA_XFER_ABORT_CB_ID+0x3c>)
 800150e:	4618      	mov	r0, r3
 8001510:	f003 fc2a 	bl	8004d68 <siprintf>
 8001514:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8001516:	4b07      	ldr	r3, [pc, #28]	; (8001534 <vga_DMA_XFER_ABORT_CB_ID+0x40>)
 8001518:	6818      	ldr	r0, [r3, #0]
 800151a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800151c:	b29a      	uxth	r2, r3
 800151e:	4639      	mov	r1, r7
 8001520:	f04f 33ff 	mov.w	r3, #4294967295
 8001524:	f003 f879 	bl	800461a <HAL_UART_Transmit>
}
 8001528:	bf00      	nop
 800152a:	3758      	adds	r7, #88	; 0x58
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	080058e0 	.word	0x080058e0
 8001534:	2000ffc8 	.word	0x2000ffc8

08001538 <vga_DMA_XFER_ALL_CB_ID>:
//HAL_DMA_XFER_ALL_CB_ID          = 0x06U   /*!< All               */
void vga_DMA_XFER_ALL_CB_ID(){
 8001538:	b580      	push	{r7, lr}
 800153a:	b096      	sub	sp, #88	; 0x58
 800153c:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 800153e:	2300      	movs	r3, #0
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	224d      	movs	r2, #77	; 0x4d
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f003 fc05 	bl	8004d58 <memset>
	int str_len = sprintf(str, "Full transfer\r\n");
 800154e:	463b      	mov	r3, r7
 8001550:	4908      	ldr	r1, [pc, #32]	; (8001574 <vga_DMA_XFER_ALL_CB_ID+0x3c>)
 8001552:	4618      	mov	r0, r3
 8001554:	f003 fc08 	bl	8004d68 <siprintf>
 8001558:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800155a:	4b07      	ldr	r3, [pc, #28]	; (8001578 <vga_DMA_XFER_ALL_CB_ID+0x40>)
 800155c:	6818      	ldr	r0, [r3, #0]
 800155e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001560:	b29a      	uxth	r2, r3
 8001562:	4639      	mov	r1, r7
 8001564:	f04f 33ff 	mov.w	r3, #4294967295
 8001568:	f003 f857 	bl	800461a <HAL_UART_Transmit>
}
 800156c:	bf00      	nop
 800156e:	3758      	adds	r7, #88	; 0x58
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	080057ec 	.word	0x080057ec
 8001578:	2000ffc8 	.word	0x2000ffc8

0800157c <registerDebugInterupts>:



void registerDebugInterupts(DMA_HandleTypeDef * toDebug){
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	HAL_DMA_RegisterCallback(toDebug, HAL_DMA_XFER_ABORT_CB_ID, vga_DMA_XFER_CPLT_CB_ID);
 8001584:	4a13      	ldr	r2, [pc, #76]	; (80015d4 <registerDebugInterupts+0x58>)
 8001586:	2105      	movs	r1, #5
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f001 f8c3 	bl	8002714 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(toDebug, HAL_DMA_XFER_HALFCPLT_CB_ID, vga_DMA_XFER_HALFCPLT_CB_ID);
 800158e:	4a12      	ldr	r2, [pc, #72]	; (80015d8 <registerDebugInterupts+0x5c>)
 8001590:	2101      	movs	r1, #1
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f001 f8be 	bl	8002714 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(toDebug, HAL_DMA_XFER_M1CPLT_CB_ID, vga_DMA_XFER_M1CPLT_CB_ID);
 8001598:	4a10      	ldr	r2, [pc, #64]	; (80015dc <registerDebugInterupts+0x60>)
 800159a:	2102      	movs	r1, #2
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f001 f8b9 	bl	8002714 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(toDebug, HAL_DMA_XFER_M1HALFCPLT_CB_ID, vga_DMA_XFER_M1HALFCPLT_CB_ID);
 80015a2:	4a0f      	ldr	r2, [pc, #60]	; (80015e0 <registerDebugInterupts+0x64>)
 80015a4:	2103      	movs	r1, #3
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f001 f8b4 	bl	8002714 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(toDebug, HAL_DMA_XFER_ERROR_CB_ID, vga_DMA_XFER_ERROR_CB_ID);
 80015ac:	4a0d      	ldr	r2, [pc, #52]	; (80015e4 <registerDebugInterupts+0x68>)
 80015ae:	2104      	movs	r1, #4
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f001 f8af 	bl	8002714 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(toDebug, HAL_DMA_XFER_ABORT_CB_ID, vga_DMA_XFER_ABORT_CB_ID);
 80015b6:	4a0c      	ldr	r2, [pc, #48]	; (80015e8 <registerDebugInterupts+0x6c>)
 80015b8:	2105      	movs	r1, #5
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f001 f8aa 	bl	8002714 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(toDebug, HAL_DMA_XFER_ALL_CB_ID, vga_DMA_XFER_ALL_CB_ID);
 80015c0:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <registerDebugInterupts+0x70>)
 80015c2:	2106      	movs	r1, #6
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f001 f8a5 	bl	8002714 <HAL_DMA_RegisterCallback>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	0800123d 	.word	0x0800123d
 80015d8:	08001281 	.word	0x08001281
 80015dc:	080012c5 	.word	0x080012c5
 80015e0:	08001309 	.word	0x08001309
 80015e4:	0800134d 	.word	0x0800134d
 80015e8:	080014f5 	.word	0x080014f5
 80015ec:	08001539 	.word	0x08001539

080015f0 <registerHUART>:

void registerHUART(UART_HandleTypeDef * huart){
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	huartE = huart;
 80015f8:	4a04      	ldr	r2, [pc, #16]	; (800160c <registerHUART+0x1c>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6013      	str	r3, [r2, #0]
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	2000ffc8 	.word	0x2000ffc8

08001610 <clearVisibleArea>:

void clearVisibleArea(Color * lineBuffPart){
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	//uses 32 bit mode to clear faster
	old_memSet(0, (uint32_t*)&lineBuffPart[horiFront+horiSync+horiBack], horiRes/4);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3350      	adds	r3, #80	; 0x50
 800161c:	2250      	movs	r2, #80	; 0x50
 800161e:	4619      	mov	r1, r3
 8001620:	2000      	movs	r0, #0
 8001622:	f7ff fdc5 	bl	80011b0 <old_memSet>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop

08001630 <setVerticalSyncP1>:
	old_memSet(0x80808080, (uint32_t*)lineBuffPart, horiWhole/4);
	//set vertical and Horizontal sync in overlap
	old_memSet(0xC0C0C0C0, (uint32_t*)&lineBuffPart[horiFront], horiSync/4);
}

void setVerticalSyncP1(Color * lineBuffPart){
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	//uses 32 bit accesses to clear faster

	//set VerticalSync everywhere
	//HAL_DMA_RegisterCallback(memCopyDMA, HAL_DMA_XFER_CPLT_CB_ID, setVerticalSyncP2);
	old_memSet(0x80808080, (uint32_t*)lineBuffPart, horiWhole/4);
 8001638:	2264      	movs	r2, #100	; 0x64
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	f04f 3080 	mov.w	r0, #2155905152	; 0x80808080
 8001640:	f7ff fdb6 	bl	80011b0 <old_memSet>
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <setVerticalSyncP2>:

void setVerticalSyncP2(Color * lineBuffPart){
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	//uses 32 bit accesses to clear faster

	//set vertical and Horizontal sync in overlap
	old_memSet(0xC0C0C0C0, (uint32_t*)&lineBuffPart[horiFront], horiSync/4);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3308      	adds	r3, #8
 8001658:	220c      	movs	r2, #12
 800165a:	4619      	mov	r1, r3
 800165c:	f04f 30c0 	mov.w	r0, #3233857728	; 0xc0c0c0c0
 8001660:	f7ff fda6 	bl	80011b0 <old_memSet>
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <setHorizontalSyncP1>:
	old_memSet(0, (uint32_t*)lineBuffPart, horiWhole/4);
	//set Horizontal sync
	old_memSet(0x40404040, (uint32_t*)&lineBuffPart[horiFront], horiSync/4);
}

void setHorizontalSyncP1(Color * lineBuffPart){
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	//uses 32 bit accesses to clear faster

	//clear VerticalSync everywhere / clear entire buffer
	old_memSet(0, (uint32_t*)lineBuffPart, horiWhole/4);
 8001674:	2264      	movs	r2, #100	; 0x64
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	2000      	movs	r0, #0
 800167a:	f7ff fd99 	bl	80011b0 <old_memSet>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop

08001688 <setHorizontalSyncP2>:

void setHorizontalSyncP2(Color * lineBuffPart){
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	//uses 32 bit accesses to clear faster

	//set Horizontal sync
	old_memSet(0x40404040, (uint32_t*)&lineBuffPart[horiFront], horiSync/4);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3308      	adds	r3, #8
 8001694:	220c      	movs	r2, #12
 8001696:	4619      	mov	r1, r3
 8001698:	f04f 3040 	mov.w	r0, #1077952576	; 0x40404040
 800169c:	f7ff fd88 	bl	80011b0 <old_memSet>
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <renderLine>:

void __weak renderLine(Color * lineBuffPart, const int lineCount){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b098      	sub	sp, #96	; 0x60
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
	//both buffers are 32 bit aligned

	char str[81] = { '\0' };
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	224d      	movs	r2, #77	; 0x4d
 80016bc:	2100      	movs	r1, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f003 fb4a 	bl	8004d58 <memset>
	int str_len = sprintf(str, "Rendering line %i\r\n", lineCount);
 80016c4:	f107 0308 	add.w	r3, r7, #8
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	4910      	ldr	r1, [pc, #64]	; (800170c <renderLine+0x64>)
 80016cc:	4618      	mov	r0, r3
 80016ce:	f003 fb4b 	bl	8004d68 <siprintf>
 80016d2:	65f8      	str	r0, [r7, #92]	; 0x5c
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80016d4:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <renderLine+0x68>)
 80016d6:	6818      	ldr	r0, [r3, #0]
 80016d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016da:	b29a      	uxth	r2, r3
 80016dc:	f107 0108 	add.w	r1, r7, #8
 80016e0:	f04f 33ff 	mov.w	r3, #4294967295
 80016e4:	f002 ff99 	bl	800461a <HAL_UART_Transmit>
	//copy the current line of the screen buffer in to the line buffer
	old_memCopy((uint32_t*)&screenBuff[horiRes*lineCount], (uint32_t *)&lineBuffPart[horiFront+horiSync+horiBack], horiRes/4);
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	019b      	lsls	r3, r3, #6
 80016f2:	461a      	mov	r2, r3
 80016f4:	4b07      	ldr	r3, [pc, #28]	; (8001714 <renderLine+0x6c>)
 80016f6:	18d0      	adds	r0, r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3350      	adds	r3, #80	; 0x50
 80016fc:	2250      	movs	r2, #80	; 0x50
 80016fe:	4619      	mov	r1, r3
 8001700:	f7ff fd14 	bl	800112c <old_memCopy>
}
 8001704:	bf00      	nop
 8001706:	3760      	adds	r7, #96	; 0x60
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	080058ec 	.word	0x080058ec
 8001710:	2000ffc8 	.word	0x2000ffc8
 8001714:	2000059c 	.word	0x2000059c

08001718 <copyLastLine>:

void copyLastLine(Color * activeBuffer, const Color * oldBuffer){
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
	//both buffers are 32 bit aligned
	old_memCopy((uint32_t*)&oldBuffer[horiFront+horiSync+horiBack], (uint32_t *)&activeBuffer[horiFront+horiSync+horiBack], horiRes/4);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3350      	adds	r3, #80	; 0x50
 800172c:	2250      	movs	r2, #80	; 0x50
 800172e:	4619      	mov	r1, r3
 8001730:	f7ff fcfc 	bl	800112c <old_memCopy>
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <printVgaState>:


void printVgaState(){
 800173c:	b580      	push	{r7, lr}
 800173e:	b098      	sub	sp, #96	; 0x60
 8001740:	af00      	add	r7, sp, #0
	char * ref_str;
	char str[81] = { '\0' };
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	224d      	movs	r2, #77	; 0x4d
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f003 fb02 	bl	8004d58 <memset>
	int str_len = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	65bb      	str	r3, [r7, #88]	; 0x58

	switch(state){
 8001758:	4b46      	ldr	r3, [pc, #280]	; (8001874 <printVgaState+0x138>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b15      	cmp	r3, #21
 800175e:	d871      	bhi.n	8001844 <printVgaState+0x108>
 8001760:	a201      	add	r2, pc, #4	; (adr r2, 8001768 <printVgaState+0x2c>)
 8001762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001766:	bf00      	nop
 8001768:	080017c1 	.word	0x080017c1
 800176c:	080017c7 	.word	0x080017c7
 8001770:	080017cd 	.word	0x080017cd
 8001774:	080017d3 	.word	0x080017d3
 8001778:	080017d9 	.word	0x080017d9
 800177c:	080017df 	.word	0x080017df
 8001780:	080017e5 	.word	0x080017e5
 8001784:	080017eb 	.word	0x080017eb
 8001788:	080017f1 	.word	0x080017f1
 800178c:	080017f7 	.word	0x080017f7
 8001790:	080017fd 	.word	0x080017fd
 8001794:	08001803 	.word	0x08001803
 8001798:	08001809 	.word	0x08001809
 800179c:	0800180f 	.word	0x0800180f
 80017a0:	08001815 	.word	0x08001815
 80017a4:	0800181b 	.word	0x0800181b
 80017a8:	08001821 	.word	0x08001821
 80017ac:	08001827 	.word	0x08001827
 80017b0:	0800182d 	.word	0x0800182d
 80017b4:	08001833 	.word	0x08001833
 80017b8:	08001839 	.word	0x08001839
 80017bc:	0800183f 	.word	0x0800183f
	case sDecideNext:ref_str = "sDecideNext";break;
 80017c0:	4b2d      	ldr	r3, [pc, #180]	; (8001878 <printVgaState+0x13c>)
 80017c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017c4:	e041      	b.n	800184a <printVgaState+0x10e>
	case sRenderLine:ref_str = "sRenderLine";break;
 80017c6:	4b2d      	ldr	r3, [pc, #180]	; (800187c <printVgaState+0x140>)
 80017c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017ca:	e03e      	b.n	800184a <printVgaState+0x10e>
	case sDoneRenderLine:ref_str = "sDoneRenderLine";break;
 80017cc:	4b2c      	ldr	r3, [pc, #176]	; (8001880 <printVgaState+0x144>)
 80017ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017d0:	e03b      	b.n	800184a <printVgaState+0x10e>
	case sCopyLastLine:ref_str = "sCopyLastLine";break;
 80017d2:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <printVgaState+0x148>)
 80017d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017d6:	e038      	b.n	800184a <printVgaState+0x10e>
	case sDoneCopylastLine:ref_str = "sDoneCopylastLine";break;
 80017d8:	4b2b      	ldr	r3, [pc, #172]	; (8001888 <printVgaState+0x14c>)
 80017da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017dc:	e035      	b.n	800184a <printVgaState+0x10e>

	case sExitVisible1:ref_str = "sExitVisible1";break;
 80017de:	4b2b      	ldr	r3, [pc, #172]	; (800188c <printVgaState+0x150>)
 80017e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017e2:	e032      	b.n	800184a <printVgaState+0x10e>
	case sDoneExitVisible1:ref_str = "sDoneExitVisible1";break;
 80017e4:	4b2a      	ldr	r3, [pc, #168]	; (8001890 <printVgaState+0x154>)
 80017e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017e8:	e02f      	b.n	800184a <printVgaState+0x10e>
	case sExitVisible2:ref_str = "sExitVisible2";break;
 80017ea:	4b2a      	ldr	r3, [pc, #168]	; (8001894 <printVgaState+0x158>)
 80017ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017ee:	e02c      	b.n	800184a <printVgaState+0x10e>
	case sDoneExitVisible2:ref_str = "sDoneExitVisible2";break;
 80017f0:	4b29      	ldr	r3, [pc, #164]	; (8001898 <printVgaState+0x15c>)
 80017f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017f4:	e029      	b.n	800184a <printVgaState+0x10e>

	case sSetVsync1P1:ref_str = "sSetVsync1P1";break;
 80017f6:	4b29      	ldr	r3, [pc, #164]	; (800189c <printVgaState+0x160>)
 80017f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017fa:	e026      	b.n	800184a <printVgaState+0x10e>
	case sSetVsync1P2:ref_str = "sSetVsync1P2";break;
 80017fc:	4b28      	ldr	r3, [pc, #160]	; (80018a0 <printVgaState+0x164>)
 80017fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001800:	e023      	b.n	800184a <printVgaState+0x10e>
	case sDoneSetVsync1:ref_str = "sDoneSetVsync1";break;
 8001802:	4b28      	ldr	r3, [pc, #160]	; (80018a4 <printVgaState+0x168>)
 8001804:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001806:	e020      	b.n	800184a <printVgaState+0x10e>
	case sSetVsync2P1:ref_str = "sSetVsync2P1";break;
 8001808:	4b27      	ldr	r3, [pc, #156]	; (80018a8 <printVgaState+0x16c>)
 800180a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800180c:	e01d      	b.n	800184a <printVgaState+0x10e>
	case sSetVsync2P2:ref_str = "sSetVsync2P2";break;
 800180e:	4b27      	ldr	r3, [pc, #156]	; (80018ac <printVgaState+0x170>)
 8001810:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001812:	e01a      	b.n	800184a <printVgaState+0x10e>
	case sDoneSetVsync2:ref_str = "sDoneSetVsync2";break;
 8001814:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <printVgaState+0x174>)
 8001816:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001818:	e017      	b.n	800184a <printVgaState+0x10e>

	case sSetHsync1P1:ref_str = "sSetHsync1P1";break;
 800181a:	4b26      	ldr	r3, [pc, #152]	; (80018b4 <printVgaState+0x178>)
 800181c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800181e:	e014      	b.n	800184a <printVgaState+0x10e>
	case sSetHsync1P2:ref_str = "sSetHsync1P2";break;
 8001820:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <printVgaState+0x17c>)
 8001822:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001824:	e011      	b.n	800184a <printVgaState+0x10e>
	case sDoneSetHsync1:ref_str = "sDoneSetHsync1";break;
 8001826:	4b25      	ldr	r3, [pc, #148]	; (80018bc <printVgaState+0x180>)
 8001828:	65fb      	str	r3, [r7, #92]	; 0x5c
 800182a:	e00e      	b.n	800184a <printVgaState+0x10e>
	case sSetHsync2P1:ref_str = "sSetHsync2P1";break;
 800182c:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <printVgaState+0x184>)
 800182e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001830:	e00b      	b.n	800184a <printVgaState+0x10e>
	case sSetHsync2P2:ref_str = "sSetHsync2P2";break;
 8001832:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <printVgaState+0x188>)
 8001834:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001836:	e008      	b.n	800184a <printVgaState+0x10e>
	case sDoneSetHsync2:ref_str = "sDoneSetHsync2";break;
 8001838:	4b23      	ldr	r3, [pc, #140]	; (80018c8 <printVgaState+0x18c>)
 800183a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800183c:	e005      	b.n	800184a <printVgaState+0x10e>

	case sEndBuffer:ref_str = "sEndBuffer";break;
 800183e:	4b23      	ldr	r3, [pc, #140]	; (80018cc <printVgaState+0x190>)
 8001840:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001842:	e002      	b.n	800184a <printVgaState+0x10e>
	default:ref_str = "Unknown";break;
 8001844:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <printVgaState+0x194>)
 8001846:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001848:	bf00      	nop
	}
	str_len = sprintf(str, "Line %i\t vga state %s \t", lineCount, ref_str);
 800184a:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <printVgaState+0x198>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	1d38      	adds	r0, r7, #4
 8001850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001852:	4921      	ldr	r1, [pc, #132]	; (80018d8 <printVgaState+0x19c>)
 8001854:	f003 fa88 	bl	8004d68 <siprintf>
 8001858:	65b8      	str	r0, [r7, #88]	; 0x58
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800185a:	4b20      	ldr	r3, [pc, #128]	; (80018dc <printVgaState+0x1a0>)
 800185c:	6818      	ldr	r0, [r3, #0]
 800185e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001860:	b29a      	uxth	r2, r3
 8001862:	1d39      	adds	r1, r7, #4
 8001864:	f04f 33ff 	mov.w	r3, #4294967295
 8001868:	f002 fed7 	bl	800461a <HAL_UART_Transmit>
}
 800186c:	bf00      	nop
 800186e:	3760      	adds	r7, #96	; 0x60
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	2000ffbc 	.word	0x2000ffbc
 8001878:	08005900 	.word	0x08005900
 800187c:	0800590c 	.word	0x0800590c
 8001880:	08005918 	.word	0x08005918
 8001884:	08005928 	.word	0x08005928
 8001888:	08005938 	.word	0x08005938
 800188c:	0800594c 	.word	0x0800594c
 8001890:	0800595c 	.word	0x0800595c
 8001894:	08005970 	.word	0x08005970
 8001898:	08005980 	.word	0x08005980
 800189c:	08005994 	.word	0x08005994
 80018a0:	080059a4 	.word	0x080059a4
 80018a4:	080059b4 	.word	0x080059b4
 80018a8:	080059c4 	.word	0x080059c4
 80018ac:	080059d4 	.word	0x080059d4
 80018b0:	080059e4 	.word	0x080059e4
 80018b4:	080059f4 	.word	0x080059f4
 80018b8:	08005a04 	.word	0x08005a04
 80018bc:	08005a14 	.word	0x08005a14
 80018c0:	08005a24 	.word	0x08005a24
 80018c4:	08005a34 	.word	0x08005a34
 80018c8:	08005a44 	.word	0x08005a44
 80018cc:	08005a54 	.word	0x08005a54
 80018d0:	08005a60 	.word	0x08005a60
 80018d4:	2000ffb0 	.word	0x2000ffb0
 80018d8:	08005a68 	.word	0x08005a68
 80018dc:	2000ffc8 	.word	0x2000ffc8

080018e0 <vgaStateMachine>:

void vgaStateMachine(int activatedFromCircularBuffer){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

	if(activatedFromCircularBuffer){
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d011      	beq.n	8001912 <vgaStateMachine+0x32>
		if(!readyForNextLine){
			//we ran out of time rendering the last line
			//todo log error
		}
		readyForNextLine = 0;
 80018ee:	4ba3      	ldr	r3, [pc, #652]	; (8001b7c <vgaStateMachine+0x29c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
		lineCount++;
 80018f4:	4ba2      	ldr	r3, [pc, #648]	; (8001b80 <vgaStateMachine+0x2a0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	3301      	adds	r3, #1
 80018fa:	4aa1      	ldr	r2, [pc, #644]	; (8001b80 <vgaStateMachine+0x2a0>)
 80018fc:	6013      	str	r3, [r2, #0]
		Color * tmp = activeBuffer;
 80018fe:	4ba1      	ldr	r3, [pc, #644]	; (8001b84 <vgaStateMachine+0x2a4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	60fb      	str	r3, [r7, #12]
		activeBuffer = oldBuffer;
 8001904:	4ba0      	ldr	r3, [pc, #640]	; (8001b88 <vgaStateMachine+0x2a8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a9e      	ldr	r2, [pc, #632]	; (8001b84 <vgaStateMachine+0x2a4>)
 800190a:	6013      	str	r3, [r2, #0]
		oldBuffer = tmp;
 800190c:	4a9e      	ldr	r2, [pc, #632]	; (8001b88 <vgaStateMachine+0x2a8>)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6013      	str	r3, [r2, #0]

	}

	while(1){
		printVgaState();
 8001912:	f7ff ff13 	bl	800173c <printVgaState>
		switch(state){
 8001916:	4b9d      	ldr	r3, [pc, #628]	; (8001b8c <vgaStateMachine+0x2ac>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b15      	cmp	r3, #21
 800191c:	d8f9      	bhi.n	8001912 <vgaStateMachine+0x32>
 800191e:	a201      	add	r2, pc, #4	; (adr r2, 8001924 <vgaStateMachine+0x44>)
 8001920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001924:	0800197d 	.word	0x0800197d
 8001928:	08001997 	.word	0x08001997
 800192c:	080019b5 	.word	0x080019b5
 8001930:	080019c3 	.word	0x080019c3
 8001934:	080019db 	.word	0x080019db
 8001938:	08001a03 	.word	0x08001a03
 800193c:	08001a15 	.word	0x08001a15
 8001940:	08001a23 	.word	0x08001a23
 8001944:	08001a35 	.word	0x08001a35
 8001948:	08001a43 	.word	0x08001a43
 800194c:	08001a77 	.word	0x08001a77
 8001950:	08001a89 	.word	0x08001a89
 8001954:	08001a97 	.word	0x08001a97
 8001958:	08001aa9 	.word	0x08001aa9
 800195c:	08001abb 	.word	0x08001abb
 8001960:	08001ac9 	.word	0x08001ac9
 8001964:	08001afd 	.word	0x08001afd
 8001968:	08001b0f 	.word	0x08001b0f
 800196c:	08001b1d 	.word	0x08001b1d
 8001970:	08001b2f 	.word	0x08001b2f
 8001974:	08001b41 	.word	0x08001b41
 8001978:	08001b4f 	.word	0x08001b4f
		//Render screen
		case sDecideNext:{
			if(lineCount < vertArea){
 800197c:	4b80      	ldr	r3, [pc, #512]	; (8001b80 <vgaStateMachine+0x2a0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001984:	da03      	bge.n	800198e <vgaStateMachine+0xae>
				state = sRenderLine;
 8001986:	4b81      	ldr	r3, [pc, #516]	; (8001b8c <vgaStateMachine+0x2ac>)
 8001988:	2201      	movs	r2, #1
 800198a:	701a      	strb	r2, [r3, #0]
			}else{
				state = sExitVisible1;
			}
			break;
 800198c:	e0f0      	b.n	8001b70 <vgaStateMachine+0x290>
				state = sExitVisible1;
 800198e:	4b7f      	ldr	r3, [pc, #508]	; (8001b8c <vgaStateMachine+0x2ac>)
 8001990:	2205      	movs	r2, #5
 8001992:	701a      	strb	r2, [r3, #0]
			break;
 8001994:	e0ec      	b.n	8001b70 <vgaStateMachine+0x290>
		}
		case sRenderLine:{
			renderLine(activeBuffer, lineCount);//render line by copying from screenBuff
 8001996:	4b7b      	ldr	r3, [pc, #492]	; (8001b84 <vgaStateMachine+0x2a4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a79      	ldr	r2, [pc, #484]	; (8001b80 <vgaStateMachine+0x2a0>)
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fe81 	bl	80016a8 <renderLine>
			lineUpscale = 1;
 80019a6:	4b7a      	ldr	r3, [pc, #488]	; (8001b90 <vgaStateMachine+0x2b0>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	601a      	str	r2, [r3, #0]
			state = sDoneRenderLine;
 80019ac:	4b77      	ldr	r3, [pc, #476]	; (8001b8c <vgaStateMachine+0x2ac>)
 80019ae:	2202      	movs	r2, #2
 80019b0:	701a      	strb	r2, [r3, #0]
			return;
 80019b2:	e0df      	b.n	8001b74 <vgaStateMachine+0x294>
		}
		case sDoneRenderLine:{
			state = vgaUpscale==1?sDecideNext:sCopyLastLine;
 80019b4:	4b75      	ldr	r3, [pc, #468]	; (8001b8c <vgaStateMachine+0x2ac>)
 80019b6:	2203      	movs	r2, #3
 80019b8:	701a      	strb	r2, [r3, #0]
			readyForNextLine = 1;
 80019ba:	4b70      	ldr	r3, [pc, #448]	; (8001b7c <vgaStateMachine+0x29c>)
 80019bc:	2201      	movs	r2, #1
 80019be:	601a      	str	r2, [r3, #0]
			return;
 80019c0:	e0d8      	b.n	8001b74 <vgaStateMachine+0x294>
		}
		case sCopyLastLine:{
			//we are upscaling and can save recourses by copying last buffer
			//would be faster if we could use a fifo queue of dma transfers instead of a circular buffer
			copyLastLine(activeBuffer, oldBuffer);
 80019c2:	4b70      	ldr	r3, [pc, #448]	; (8001b84 <vgaStateMachine+0x2a4>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a70      	ldr	r2, [pc, #448]	; (8001b88 <vgaStateMachine+0x2a8>)
 80019c8:	6812      	ldr	r2, [r2, #0]
 80019ca:	4611      	mov	r1, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fea3 	bl	8001718 <copyLastLine>
			state = sDoneCopylastLine;
 80019d2:	4b6e      	ldr	r3, [pc, #440]	; (8001b8c <vgaStateMachine+0x2ac>)
 80019d4:	2204      	movs	r2, #4
 80019d6:	701a      	strb	r2, [r3, #0]
			return;
 80019d8:	e0cc      	b.n	8001b74 <vgaStateMachine+0x294>
		}
		case sDoneCopylastLine:{
			lineUpscale++;
 80019da:	4b6d      	ldr	r3, [pc, #436]	; (8001b90 <vgaStateMachine+0x2b0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	3301      	adds	r3, #1
 80019e0:	4a6b      	ldr	r2, [pc, #428]	; (8001b90 <vgaStateMachine+0x2b0>)
 80019e2:	6013      	str	r3, [r2, #0]
			if(lineUpscale == vgaUpscale){//waits in current state until we need to render a new line and can't reuse old buffers
 80019e4:	4b6a      	ldr	r3, [pc, #424]	; (8001b90 <vgaStateMachine+0x2b0>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	f040 80c2 	bne.w	8001b72 <vgaStateMachine+0x292>
				lineUpscale = 0;
 80019ee:	4b68      	ldr	r3, [pc, #416]	; (8001b90 <vgaStateMachine+0x2b0>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
				state = sDecideNext;
 80019f4:	4b65      	ldr	r3, [pc, #404]	; (8001b8c <vgaStateMachine+0x2ac>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
				readyForNextLine = 1;
 80019fa:	4b60      	ldr	r3, [pc, #384]	; (8001b7c <vgaStateMachine+0x29c>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	601a      	str	r2, [r3, #0]
			}
			return;
 8001a00:	e0b7      	b.n	8001b72 <vgaStateMachine+0x292>
		}
		//Exit visible area
		case sExitVisible1:{
			clearVisibleArea(activeBuffer);//clear leftover data in buffer 1
 8001a02:	4b60      	ldr	r3, [pc, #384]	; (8001b84 <vgaStateMachine+0x2a4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fe02 	bl	8001610 <clearVisibleArea>
			state = sDoneExitVisible1;
 8001a0c:	4b5f      	ldr	r3, [pc, #380]	; (8001b8c <vgaStateMachine+0x2ac>)
 8001a0e:	2206      	movs	r2, #6
 8001a10:	701a      	strb	r2, [r3, #0]
			return;
 8001a12:	e0af      	b.n	8001b74 <vgaStateMachine+0x294>
		}
		case sDoneExitVisible1:{
			state = sExitVisible2;
 8001a14:	4b5d      	ldr	r3, [pc, #372]	; (8001b8c <vgaStateMachine+0x2ac>)
 8001a16:	2207      	movs	r2, #7
 8001a18:	701a      	strb	r2, [r3, #0]
			readyForNextLine = 1;
 8001a1a:	4b58      	ldr	r3, [pc, #352]	; (8001b7c <vgaStateMachine+0x29c>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]
			return;
 8001a20:	e0a8      	b.n	8001b74 <vgaStateMachine+0x294>
		}
		case sExitVisible2:{
			clearVisibleArea(activeBuffer);//clear leftover data in buffer 2
 8001a22:	4b58      	ldr	r3, [pc, #352]	; (8001b84 <vgaStateMachine+0x2a4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fdf2 	bl	8001610 <clearVisibleArea>
			state = sDoneExitVisible2;
 8001a2c:	4b57      	ldr	r3, [pc, #348]	; (8001b8c <vgaStateMachine+0x2ac>)
 8001a2e:	2208      	movs	r2, #8
 8001a30:	701a      	strb	r2, [r3, #0]
			return;
 8001a32:	e09f      	b.n	8001b74 <vgaStateMachine+0x294>
		}
		case sDoneExitVisible2:{
			state = sSetVsync1P1;
 8001a34:	4b55      	ldr	r3, [pc, #340]	; (8001b8c <vgaStateMachine+0x2ac>)
 8001a36:	2209      	movs	r2, #9
 8001a38:	701a      	strb	r2, [r3, #0]
			readyForNextLine = 1;
 8001a3a:	4b50      	ldr	r3, [pc, #320]	; (8001b7c <vgaStateMachine+0x29c>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]
			return;
 8001a40:	e098      	b.n	8001b74 <vgaStateMachine+0x294>
		}
		//Vertical sync
		case sSetVsync1P1:{
			if(lineCount == vertArea + vertFront){//wait until vertical sync starts
 8001a42:	4b4f      	ldr	r3, [pc, #316]	; (8001b80 <vgaStateMachine+0x2a0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f5b3 7fce 	cmp.w	r3, #412	; 0x19c
 8001a4a:	d110      	bne.n	8001a6e <vgaStateMachine+0x18e>
				setVerticalSyncP1(activeBuffer);//set vertical sync in buffer 1
 8001a4c:	4b4d      	ldr	r3, [pc, #308]	; (8001b84 <vgaStateMachine+0x2a4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fded 	bl	8001630 <setVerticalSyncP1>
				state = sSetVsync1P2;
 8001a56:	4b4d      	ldr	r3, [pc, #308]	; (8001b8c <vgaStateMachine+0x2ac>)
 8001a58:	220a      	movs	r2, #10
 8001a5a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_SET);
 8001a5c:	4b4d      	ldr	r3, [pc, #308]	; (8001b94 <vgaStateMachine+0x2b4>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a4d      	ldr	r2, [pc, #308]	; (8001b98 <vgaStateMachine+0x2b8>)
 8001a62:	8811      	ldrh	r1, [r2, #0]
 8001a64:	2201      	movs	r2, #1
 8001a66:	4618      	mov	r0, r3
 8001a68:	f001 f926 	bl	8002cb8 <HAL_GPIO_WritePin>
			}else{
				readyForNextLine = 1;
			}
			return;
 8001a6c:	e082      	b.n	8001b74 <vgaStateMachine+0x294>
				readyForNextLine = 1;
 8001a6e:	4b43      	ldr	r3, [pc, #268]	; (8001b7c <vgaStateMachine+0x29c>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
			return;
 8001a74:	e07e      	b.n	8001b74 <vgaStateMachine+0x294>
		}
		case sSetVsync1P2:{
			setVerticalSyncP2(activeBuffer);
 8001a76:	4b43      	ldr	r3, [pc, #268]	; (8001b84 <vgaStateMachine+0x2a4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fde6 	bl	800164c <setVerticalSyncP2>
			state = sDoneSetVsync1;
 8001a80:	4b42      	ldr	r3, [pc, #264]	; (8001b8c <vgaStateMachine+0x2ac>)
 8001a82:	220b      	movs	r2, #11
 8001a84:	701a      	strb	r2, [r3, #0]
			return;
 8001a86:	e075      	b.n	8001b74 <vgaStateMachine+0x294>
		}
		case sDoneSetVsync1:{
			state = sSetVsync2P1;
 8001a88:	4b40      	ldr	r3, [pc, #256]	; (8001b8c <vgaStateMachine+0x2ac>)
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	701a      	strb	r2, [r3, #0]
			readyForNextLine = 1;
 8001a8e:	4b3b      	ldr	r3, [pc, #236]	; (8001b7c <vgaStateMachine+0x29c>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	601a      	str	r2, [r3, #0]
			return;
 8001a94:	e06e      	b.n	8001b74 <vgaStateMachine+0x294>
		}
		case sSetVsync2P1:{
			setVerticalSyncP1(activeBuffer);//set Vertical Sync in buffer 2
 8001a96:	4b3b      	ldr	r3, [pc, #236]	; (8001b84 <vgaStateMachine+0x2a4>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fdc8 	bl	8001630 <setVerticalSyncP1>
			state = sSetVsync2P2;
 8001aa0:	4b3a      	ldr	r3, [pc, #232]	; (8001b8c <vgaStateMachine+0x2ac>)
 8001aa2:	220d      	movs	r2, #13
 8001aa4:	701a      	strb	r2, [r3, #0]
			return;
 8001aa6:	e065      	b.n	8001b74 <vgaStateMachine+0x294>
		}
		case sSetVsync2P2:{
			setVerticalSyncP2(activeBuffer);
 8001aa8:	4b36      	ldr	r3, [pc, #216]	; (8001b84 <vgaStateMachine+0x2a4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fdcd 	bl	800164c <setVerticalSyncP2>
			state = sDoneSetVsync2;
 8001ab2:	4b36      	ldr	r3, [pc, #216]	; (8001b8c <vgaStateMachine+0x2ac>)
 8001ab4:	220e      	movs	r2, #14
 8001ab6:	701a      	strb	r2, [r3, #0]
			return;
 8001ab8:	e05c      	b.n	8001b74 <vgaStateMachine+0x294>
		}
		case sDoneSetVsync2:{
			state = sSetHsync1P1;
 8001aba:	4b34      	ldr	r3, [pc, #208]	; (8001b8c <vgaStateMachine+0x2ac>)
 8001abc:	220f      	movs	r2, #15
 8001abe:	701a      	strb	r2, [r3, #0]
			readyForNextLine = 1;
 8001ac0:	4b2e      	ldr	r3, [pc, #184]	; (8001b7c <vgaStateMachine+0x29c>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]
			return;
 8001ac6:	e055      	b.n	8001b74 <vgaStateMachine+0x294>
		}
		//Horizontal sync
		case sSetHsync1P1:{
			if(lineCount == vertArea + vertFront + vertSync){//wait until vertical sync ends
 8001ac8:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <vgaStateMachine+0x2a0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 8001ad0:	d110      	bne.n	8001af4 <vgaStateMachine+0x214>
				setHorizontalSyncP1(activeBuffer);//set horizontal sync in buffer 2
 8001ad2:	4b2c      	ldr	r3, [pc, #176]	; (8001b84 <vgaStateMachine+0x2a4>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fdc8 	bl	800166c <setHorizontalSyncP1>
				state = sSetHsync1P2;
 8001adc:	4b2b      	ldr	r3, [pc, #172]	; (8001b8c <vgaStateMachine+0x2ac>)
 8001ade:	2210      	movs	r2, #16
 8001ae0:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_RESET);
 8001ae2:	4b2c      	ldr	r3, [pc, #176]	; (8001b94 <vgaStateMachine+0x2b4>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a2c      	ldr	r2, [pc, #176]	; (8001b98 <vgaStateMachine+0x2b8>)
 8001ae8:	8811      	ldrh	r1, [r2, #0]
 8001aea:	2200      	movs	r2, #0
 8001aec:	4618      	mov	r0, r3
 8001aee:	f001 f8e3 	bl	8002cb8 <HAL_GPIO_WritePin>
			}else{
				readyForNextLine = 1;
			}
			return;
 8001af2:	e03f      	b.n	8001b74 <vgaStateMachine+0x294>
				readyForNextLine = 1;
 8001af4:	4b21      	ldr	r3, [pc, #132]	; (8001b7c <vgaStateMachine+0x29c>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	601a      	str	r2, [r3, #0]
			return;
 8001afa:	e03b      	b.n	8001b74 <vgaStateMachine+0x294>
		}
		case sSetHsync1P2:{
			setHorizontalSyncP2(activeBuffer);
 8001afc:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <vgaStateMachine+0x2a4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fdc1 	bl	8001688 <setHorizontalSyncP2>
			state = sDoneSetHsync1;
 8001b06:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <vgaStateMachine+0x2ac>)
 8001b08:	2211      	movs	r2, #17
 8001b0a:	701a      	strb	r2, [r3, #0]
			return;
 8001b0c:	e032      	b.n	8001b74 <vgaStateMachine+0x294>
		}
		case sDoneSetHsync1:{
			state = sSetHsync2P1;
 8001b0e:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <vgaStateMachine+0x2ac>)
 8001b10:	2212      	movs	r2, #18
 8001b12:	701a      	strb	r2, [r3, #0]
			readyForNextLine = 1;
 8001b14:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <vgaStateMachine+0x29c>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]
			return;
 8001b1a:	e02b      	b.n	8001b74 <vgaStateMachine+0x294>
		}
		case sSetHsync2P1:{
			setVerticalSyncP1(activeBuffer);//set Horizontal Sync in buffer 2
 8001b1c:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <vgaStateMachine+0x2a4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fd85 	bl	8001630 <setVerticalSyncP1>
			state = sSetHsync2P2;
 8001b26:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <vgaStateMachine+0x2ac>)
 8001b28:	2213      	movs	r2, #19
 8001b2a:	701a      	strb	r2, [r3, #0]
			return;
 8001b2c:	e022      	b.n	8001b74 <vgaStateMachine+0x294>
		}
		case sSetHsync2P2:{
			setVerticalSyncP2(activeBuffer);
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <vgaStateMachine+0x2a4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fd8a 	bl	800164c <setVerticalSyncP2>
			state = sDoneSetHsync2;
 8001b38:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <vgaStateMachine+0x2ac>)
 8001b3a:	2214      	movs	r2, #20
 8001b3c:	701a      	strb	r2, [r3, #0]
			return;
 8001b3e:	e019      	b.n	8001b74 <vgaStateMachine+0x294>
		}
		case sDoneSetHsync2:{
			state = sEndBuffer;
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <vgaStateMachine+0x2ac>)
 8001b42:	2215      	movs	r2, #21
 8001b44:	701a      	strb	r2, [r3, #0]
			readyForNextLine = 1;
 8001b46:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <vgaStateMachine+0x29c>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]
			return;
 8001b4c:	e012      	b.n	8001b74 <vgaStateMachine+0x294>
		}
		case sEndBuffer:{
			if(lineCount == vertWhole){//wait until end of the screen
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <vgaStateMachine+0x2a0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f240 12c1 	movw	r2, #449	; 0x1c1
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d106      	bne.n	8001b68 <vgaStateMachine+0x288>
				state = sDecideNext;
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <vgaStateMachine+0x2ac>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
				lineCount = -1;// set line count back to the start
 8001b60:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <vgaStateMachine+0x2a0>)
 8001b62:	f04f 32ff 	mov.w	r2, #4294967295
 8001b66:	601a      	str	r2, [r3, #0]
			}
			readyForNextLine = 1;
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <vgaStateMachine+0x29c>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]
			return;
 8001b6e:	e001      	b.n	8001b74 <vgaStateMachine+0x294>
		printVgaState();
 8001b70:	e6cf      	b.n	8001912 <vgaStateMachine+0x32>
			return;
 8001b72:	bf00      	nop
		}
		}


	}
}
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	2000ffb8 	.word	0x2000ffb8
 8001b80:	2000ffb0 	.word	0x2000ffb0
 8001b84:	2000ffc0 	.word	0x2000ffc0
 8001b88:	2000ffc4 	.word	0x2000ffc4
 8001b8c:	2000ffbc 	.word	0x2000ffbc
 8001b90:	2000ffb4 	.word	0x2000ffb4
 8001b94:	2000ffa8 	.word	0x2000ffa8
 8001b98:	2000ffac 	.word	0x2000ffac

08001b9c <vgaDriver>:
#ifdef vgaDebug
	int str_len;
	char str[81] = {'\0'};
	static char * ref_str = "null";
#endif
	lineCount++;
 8001b9c:	492e      	ldr	r1, [pc, #184]	; (8001c58 <vgaDriver+0xbc>)
		activeBuffer = oldBuffer;
 8001b9e:	482f      	ldr	r0, [pc, #188]	; (8001c5c <vgaDriver+0xc0>)
	lineCount++;
 8001ba0:	680b      	ldr	r3, [r1, #0]
		activeBuffer = oldBuffer;
 8001ba2:	6802      	ldr	r2, [r0, #0]
void __attribute__((optimize("O3"))) vgaDriver(){
 8001ba4:	b430      	push	{r4, r5}
		Color * tmp = activeBuffer;
 8001ba6:	4c2e      	ldr	r4, [pc, #184]	; (8001c60 <vgaDriver+0xc4>)
	lineCount++;
 8001ba8:	3301      	adds	r3, #1
		Color * tmp = activeBuffer;
 8001baa:	6825      	ldr	r5, [r4, #0]
		oldBuffer = tmp;
 8001bac:	6005      	str	r5, [r0, #0]
	if(lineCount < vertArea){//send line
 8001bae:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
		activeBuffer = oldBuffer;
 8001bb2:	6022      	str	r2, [r4, #0]
	lineCount++;
 8001bb4:	600b      	str	r3, [r1, #0]
	if(lineCount < vertArea){//send line
 8001bb6:	da1b      	bge.n	8001bf0 <vgaDriver+0x54>
		ref_str = "render line";
#endif
		//renderLine(activeBuffer, lineCount);
		//while(HAL_DMA_PollForTransfer(memCopyDMA, HAL_DMA_FULL_TRANSFER, 100)){HAL_Delay(1);};
		uint32_t * active32 = (uint32_t*)&activeBuffer[horiWhole-horiRes];
		uint32_t * screen32 = (uint32_t*)&screenBuff[lineCount*vertRes];
 8001bb8:	4c2a      	ldr	r4, [pc, #168]	; (8001c64 <vgaDriver+0xc8>)
 8001bba:	20c8      	movs	r0, #200	; 0xc8
 8001bbc:	fb03 f000 	mul.w	r0, r3, r0
 8001bc0:	1901      	adds	r1, r0, r4
		uint32_t * active32 = (uint32_t*)&activeBuffer[horiWhole-horiRes];
 8001bc2:	f102 0350 	add.w	r3, r2, #80	; 0x50
 8001bc6:	ea41 0503 	orr.w	r5, r1, r3
 8001bca:	076d      	lsls	r5, r5, #29
 8001bcc:	d128      	bne.n	8001c20 <vgaDriver+0x84>
 8001bce:	3004      	adds	r0, #4
 8001bd0:	4420      	add	r0, r4
 8001bd2:	4283      	cmp	r3, r0
 8001bd4:	d024      	beq.n	8001c20 <vgaDriver+0x84>
 8001bd6:	3908      	subs	r1, #8
 8001bd8:	f502 72c8 	add.w	r2, r2, #400	; 0x190
		for(uint32_t i = 0; i < horiRes/4;i++){
			*active32 = *screen32;
 8001bdc:	ed91 7b02 	vldr	d7, [r1, #8]
 8001be0:	eca3 7b02 	vstmia	r3!, {d7}
 8001be4:	429a      	cmp	r2, r3
 8001be6:	f101 0108 	add.w	r1, r1, #8
 8001bea:	d1f7      	bne.n	8001bdc <vgaDriver+0x40>
	//dumpBuffer(activeBuffer);
#ifdef vgaDebug
	str_len = sprintf(str, "Line %i\t %s \t", lineCount, ref_str);
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
#endif
}
 8001bec:	bc30      	pop	{r4, r5}
 8001bee:	4770      	bx	lr
	}else if(lineCount == vertArea){//last line clear
 8001bf0:	d012      	beq.n	8001c18 <vgaDriver+0x7c>
	}else if(lineCount == vertArea + 1){//last line clear buffer
 8001bf2:	f240 1091 	movw	r0, #401	; 0x191
 8001bf6:	4283      	cmp	r3, r0
 8001bf8:	d00e      	beq.n	8001c18 <vgaDriver+0x7c>
	}else if(lineCount == vertArea + vertFront){//enter vertical sync todo check for of by one error
 8001bfa:	f5b3 7fce 	cmp.w	r3, #412	; 0x19c
 8001bfe:	d01a      	beq.n	8001c36 <vgaDriver+0x9a>
	}else if(lineCount == vertArea + vertFront + vertSync){//exit vertical sync
 8001c00:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 8001c04:	d01f      	beq.n	8001c46 <vgaDriver+0xaa>
	}else if(lineCount >= vertWhole){//return to beginning
 8001c06:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
		lineCount = -1;
 8001c0a:	bfc8      	it	gt
 8001c0c:	f04f 33ff 	movgt.w	r3, #4294967295
}
 8001c10:	bc30      	pop	{r4, r5}
		lineCount = -1;
 8001c12:	bfc8      	it	gt
 8001c14:	600b      	strgt	r3, [r1, #0]
}
 8001c16:	4770      	bx	lr
 8001c18:	2300      	movs	r3, #0
 8001c1a:	bc30      	pop	{r4, r5}
 8001c1c:	6513      	str	r3, [r2, #80]	; 0x50
 8001c1e:	4770      	bx	lr
 8001c20:	3904      	subs	r1, #4
 8001c22:	f502 72c8 	add.w	r2, r2, #400	; 0x190
			*active32 = *screen32;
 8001c26:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8001c2a:	f843 0b04 	str.w	r0, [r3], #4
		for(uint32_t i = 0; i < horiRes/4;i++){
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d1f9      	bne.n	8001c26 <vgaDriver+0x8a>
}
 8001c32:	bc30      	pop	{r4, r5}
 8001c34:	4770      	bx	lr
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_SET);
 8001c36:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <vgaDriver+0xcc>)
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <vgaDriver+0xd0>)
 8001c3a:	8811      	ldrh	r1, [r2, #0]
 8001c3c:	6818      	ldr	r0, [r3, #0]
}
 8001c3e:	bc30      	pop	{r4, r5}
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_SET);
 8001c40:	2201      	movs	r2, #1
 8001c42:	f001 b839 	b.w	8002cb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_RESET);
 8001c46:	4a08      	ldr	r2, [pc, #32]	; (8001c68 <vgaDriver+0xcc>)
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <vgaDriver+0xd0>)
 8001c4a:	8811      	ldrh	r1, [r2, #0]
 8001c4c:	6818      	ldr	r0, [r3, #0]
}
 8001c4e:	bc30      	pop	{r4, r5}
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_RESET);
 8001c50:	2200      	movs	r2, #0
 8001c52:	f001 b831 	b.w	8002cb8 <HAL_GPIO_WritePin>
 8001c56:	bf00      	nop
 8001c58:	2000ffb0 	.word	0x2000ffb0
 8001c5c:	2000ffc4 	.word	0x2000ffc4
 8001c60:	2000ffc0 	.word	0x2000ffc0
 8001c64:	2000059c 	.word	0x2000059c
 8001c68:	2000ffac 	.word	0x2000ffac
 8001c6c:	2000ffa8 	.word	0x2000ffa8

08001c70 <vgaHalfCallBack>:

void vgaHalfCallBack(DMA_HandleTypeDef *_hdma){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	//prepareLine(lineBuff, &lineBuff[horiWhole]);
	//readyForNextLine++;
	//vga_DMA_XFER_HALFCPLT_CB_ID();
	vgaDriver();
 8001c78:	f7ff ff90 	bl	8001b9c <vgaDriver>
	//vgaStateMachine(1);
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <vgaFullCallBack>:

void vgaFullCallBack(DMA_HandleTypeDef *_hdma){
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	//prepareLine(&lineBuff[horiWhole], lineBuff);
	//readyForNextLine++;
	//vga_DMA_XFER_CPLT_CB_ID();
	vgaDriver();
 8001c8c:	f7ff ff86 	bl	8001b9c <vgaDriver>
	//vgaStateMachine(1);
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <vgaCopyAndSetCallBack>:

void vgaCopyAndSetCallBack(DMA_HandleTypeDef *_hdma){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b098      	sub	sp, #96	; 0x60
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
	char str[81] = { '\0' };
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	f107 030c 	add.w	r3, r7, #12
 8001ca8:	224d      	movs	r2, #77	; 0x4d
 8001caa:	2100      	movs	r1, #0
 8001cac:	4618      	mov	r0, r3
 8001cae:	f003 f853 	bl	8004d58 <memset>
	int str_len = sprintf(str, "memCopyDMA\r\n");
 8001cb2:	f107 0308 	add.w	r3, r7, #8
 8001cb6:	490b      	ldr	r1, [pc, #44]	; (8001ce4 <vgaCopyAndSetCallBack+0x4c>)
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f003 f855 	bl	8004d68 <siprintf>
 8001cbe:	65f8      	str	r0, [r7, #92]	; 0x5c
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <vgaCopyAndSetCallBack+0x50>)
 8001cc2:	6818      	ldr	r0, [r3, #0]
 8001cc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	f107 0108 	add.w	r1, r7, #8
 8001ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd0:	f002 fca3 	bl	800461a <HAL_UART_Transmit>
	vgaStateMachine(0);
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f7ff fe03 	bl	80018e0 <vgaStateMachine>
}
 8001cda:	bf00      	nop
 8001cdc:	3760      	adds	r7, #96	; 0x60
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	08005a80 	.word	0x08005a80
 8001ce8:	2000ffc8 	.word	0x2000ffc8

08001cec <vgaSetup>:
		TIM_HandleTypeDef * vgaPixelTimer_,
		DMA_HandleTypeDef * vgaCircularDMA_,
		DMA_HandleTypeDef * memCopyDMA_,
		GPIO_TypeDef* Vsync_GPIO_Port_,
		uint16_t Vsync_Pin_
		){
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	603b      	str	r3, [r7, #0]

	vgaPixelTimer = vgaPixelTimer_;
 8001cfa:	4a34      	ldr	r2, [pc, #208]	; (8001dcc <vgaSetup+0xe0>)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6013      	str	r3, [r2, #0]
	vgaCircularDMA = vgaCircularDMA_;
 8001d00:	4a33      	ldr	r2, [pc, #204]	; (8001dd0 <vgaSetup+0xe4>)
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	6013      	str	r3, [r2, #0]
	memCopyDMA = memCopyDMA_;
 8001d06:	4a33      	ldr	r2, [pc, #204]	; (8001dd4 <vgaSetup+0xe8>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6013      	str	r3, [r2, #0]

	Vsync_GPIO_Port = Vsync_GPIO_Port_;
 8001d0c:	4a32      	ldr	r2, [pc, #200]	; (8001dd8 <vgaSetup+0xec>)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	6013      	str	r3, [r2, #0]
	Vsync_Pin = Vsync_Pin_;
 8001d12:	4a32      	ldr	r2, [pc, #200]	; (8001ddc <vgaSetup+0xf0>)
 8001d14:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d16:	8013      	strh	r3, [r2, #0]

	lineCount = 0; //vertArea + vertFront - 1 - 2;//start right after a vertical sync
 8001d18:	4b31      	ldr	r3, [pc, #196]	; (8001de0 <vgaSetup+0xf4>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
	lineUpscale = 0;//copy old buffer if non zero
 8001d1e:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <vgaSetup+0xf8>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
	readyForNextLine = 1;
 8001d24:	4b30      	ldr	r3, [pc, #192]	; (8001de8 <vgaSetup+0xfc>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	601a      	str	r2, [r3, #0]
	state = sSetVsync1P1;
 8001d2a:	4b30      	ldr	r3, [pc, #192]	; (8001dec <vgaSetup+0x100>)
 8001d2c:	2209      	movs	r2, #9
 8001d2e:	701a      	strb	r2, [r3, #0]
	activeBuffer = lineBuff;
 8001d30:	4b2f      	ldr	r3, [pc, #188]	; (8001df0 <vgaSetup+0x104>)
 8001d32:	4a30      	ldr	r2, [pc, #192]	; (8001df4 <vgaSetup+0x108>)
 8001d34:	601a      	str	r2, [r3, #0]
	oldBuffer = &lineBuff[horiWhole];
 8001d36:	4b30      	ldr	r3, [pc, #192]	; (8001df8 <vgaSetup+0x10c>)
 8001d38:	4a30      	ldr	r2, [pc, #192]	; (8001dfc <vgaSetup+0x110>)
 8001d3a:	601a      	str	r2, [r3, #0]

	for(uint32_t i = 0; i < horiWhole; i += 2){//clear all
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
 8001d40:	e00e      	b.n	8001d60 <vgaSetup+0x74>
		activeBuffer[i].value = 0;
 8001d42:	4b2b      	ldr	r3, [pc, #172]	; (8001df0 <vgaSetup+0x104>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	4413      	add	r3, r2
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	701a      	strb	r2, [r3, #0]
		oldBuffer[i].value = 0;
 8001d4e:	4b2a      	ldr	r3, [pc, #168]	; (8001df8 <vgaSetup+0x10c>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	4413      	add	r3, r2
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < horiWhole; i += 2){//clear all
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3302      	adds	r3, #2
 8001d5e:	61fb      	str	r3, [r7, #28]
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001d66:	d3ec      	bcc.n	8001d42 <vgaSetup+0x56>
	}
	for(uint32_t i = 0; i < horiRes; i++){//load test data
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61bb      	str	r3, [r7, #24]
 8001d6c:	e00e      	b.n	8001d8c <vgaSetup+0xa0>
		activeBuffer[i].value = 0x0;
 8001d6e:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <vgaSetup+0x104>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	4413      	add	r3, r2
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]
		oldBuffer[i].value = 0x00;
 8001d7a:	4b1f      	ldr	r3, [pc, #124]	; (8001df8 <vgaSetup+0x10c>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	4413      	add	r3, r2
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < horiRes; i++){//load test data
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	61bb      	str	r3, [r7, #24]
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001d92:	d3ec      	bcc.n	8001d6e <vgaSetup+0x82>
	}
	for(uint32_t i = horiFront; i < horiFront + horiSync; i++){//set horizontal sync
 8001d94:	2308      	movs	r3, #8
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	e00e      	b.n	8001db8 <vgaSetup+0xcc>
		activeBuffer[i].value = 0x80;
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <vgaSetup+0x104>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	4413      	add	r3, r2
 8001da2:	2280      	movs	r2, #128	; 0x80
 8001da4:	701a      	strb	r2, [r3, #0]
		oldBuffer[i].value = 0x80;
 8001da6:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <vgaSetup+0x10c>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	4413      	add	r3, r2
 8001dae:	2280      	movs	r2, #128	; 0x80
 8001db0:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = horiFront; i < horiFront + horiSync; i++){//set horizontal sync
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	3301      	adds	r3, #1
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2b37      	cmp	r3, #55	; 0x37
 8001dbc:	d9ed      	bls.n	8001d9a <vgaSetup+0xae>
	}
}
 8001dbe:	bf00      	nop
 8001dc0:	bf00      	nop
 8001dc2:	3724      	adds	r7, #36	; 0x24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	2000ff9c 	.word	0x2000ff9c
 8001dd0:	2000ffa0 	.word	0x2000ffa0
 8001dd4:	2000ffa4 	.word	0x2000ffa4
 8001dd8:	2000ffa8 	.word	0x2000ffa8
 8001ddc:	2000ffac 	.word	0x2000ffac
 8001de0:	2000ffb0 	.word	0x2000ffb0
 8001de4:	2000ffb4 	.word	0x2000ffb4
 8001de8:	2000ffb8 	.word	0x2000ffb8
 8001dec:	2000ffbc 	.word	0x2000ffbc
 8001df0:	2000ffc0 	.word	0x2000ffc0
 8001df4:	2000027c 	.word	0x2000027c
 8001df8:	2000ffc4 	.word	0x2000ffc4
 8001dfc:	2000040c 	.word	0x2000040c

08001e00 <vgaStart>:



void vgaStart(){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
	//HAL_DMA_Init(vgaCircularDMA);
	__HAL_TIM_ENABLE_DMA(vgaPixelTimer, TIM_DMA_UPDATE);
 8001e04:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <vgaStart+0x78>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <vgaStart+0x78>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e16:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE(vgaPixelTimer);
 8001e18:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <vgaStart+0x78>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <vgaStart+0x78>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0201 	orr.w	r2, r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]

	HAL_TIM_PWM_Start(vgaPixelTimer, TIM_CHANNEL_1);
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <vgaStart+0x78>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2100      	movs	r1, #0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f001 fc9a 	bl	800376c <HAL_TIM_PWM_Start>

	HAL_DMA_RegisterCallback(vgaCircularDMA, HAL_DMA_XFER_HALFCPLT_CB_ID, vgaHalfCallBack);
 8001e38:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <vgaStart+0x7c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a10      	ldr	r2, [pc, #64]	; (8001e80 <vgaStart+0x80>)
 8001e3e:	2101      	movs	r1, #1
 8001e40:	4618      	mov	r0, r3
 8001e42:	f000 fc67 	bl	8002714 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(vgaCircularDMA, HAL_DMA_XFER_CPLT_CB_ID, vgaFullCallBack);
 8001e46:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <vgaStart+0x7c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a0e      	ldr	r2, [pc, #56]	; (8001e84 <vgaStart+0x84>)
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 fc60 	bl	8002714 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(memCopyDMA, HAL_DMA_XFER_CPLT_CB_ID, vgaCopyAndSetCallBack);
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <vgaStart+0x88>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a0c      	ldr	r2, [pc, #48]	; (8001e8c <vgaStart+0x8c>)
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f000 fc59 	bl	8002714 <HAL_DMA_RegisterCallback>
	//prepare the buffer with the first two lines
	//vgaStateMachine(1);
	//vgaStateMachine(1);

	//start the circular buffer dma transfer aka vga main loop
	HAL_DMA_Start_IT(vgaCircularDMA, (uint32_t)&lineBuff[0], (uint32_t)&(GPIOC->ODR), horiWhole*2);
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <vgaStart+0x7c>)
 8001e64:	6818      	ldr	r0, [r3, #0]
 8001e66:	490a      	ldr	r1, [pc, #40]	; (8001e90 <vgaStart+0x90>)
 8001e68:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001e6c:	4a09      	ldr	r2, [pc, #36]	; (8001e94 <vgaStart+0x94>)
 8001e6e:	f000 fa6f 	bl	8002350 <HAL_DMA_Start_IT>
	//__HAL_TIM_ENABLE_DMA(vgaPixelTimer, TIM_DMA_TRIGGER);//no effect


	//HAL_DMAEx_MultiBufferStart_IT(hdma, SrcAddress, DstAddress, SecondMemAddress, DataLength);
	//vgaLoop();
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	2000ff9c 	.word	0x2000ff9c
 8001e7c:	2000ffa0 	.word	0x2000ffa0
 8001e80:	08001c71 	.word	0x08001c71
 8001e84:	08001c85 	.word	0x08001c85
 8001e88:	2000ffa4 	.word	0x2000ffa4
 8001e8c:	08001c99 	.word	0x08001c99
 8001e90:	2000027c 	.word	0x2000027c
 8001e94:	40020814 	.word	0x40020814

08001e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ed0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e9c:	480d      	ldr	r0, [pc, #52]	; (8001ed4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e9e:	490e      	ldr	r1, [pc, #56]	; (8001ed8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ea0:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea4:	e002      	b.n	8001eac <LoopCopyDataInit>

08001ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eaa:	3304      	adds	r3, #4

08001eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb0:	d3f9      	bcc.n	8001ea6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eb2:	4a0b      	ldr	r2, [pc, #44]	; (8001ee0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001eb4:	4c0b      	ldr	r4, [pc, #44]	; (8001ee4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb8:	e001      	b.n	8001ebe <LoopFillZerobss>

08001eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ebc:	3204      	adds	r2, #4

08001ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec0:	d3fb      	bcc.n	8001eba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ec2:	f7ff f921 	bl	8001108 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ec6:	f002 ff23 	bl	8004d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eca:	f7fe fc4d 	bl	8000768 <main>
  bx  lr    
 8001ece:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ed0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001edc:	08005adc 	.word	0x08005adc
  ldr r2, =_sbss
 8001ee0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ee4:	2000ffe4 	.word	0x2000ffe4

08001ee8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ee8:	e7fe      	b.n	8001ee8 <ADC_IRQHandler>
	...

08001eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <HAL_Init+0x40>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0d      	ldr	r2, [pc, #52]	; (8001f2c <HAL_Init+0x40>)
 8001ef6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001efa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <HAL_Init+0x40>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <HAL_Init+0x40>)
 8001f02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <HAL_Init+0x40>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a07      	ldr	r2, [pc, #28]	; (8001f2c <HAL_Init+0x40>)
 8001f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f14:	2003      	movs	r0, #3
 8001f16:	f000 f92b 	bl	8002170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f000 f808 	bl	8001f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f20:	f7fe ff58 	bl	8000dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40023c00 	.word	0x40023c00

08001f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f38:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_InitTick+0x54>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_InitTick+0x58>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	4619      	mov	r1, r3
 8001f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 f943 	bl	80021da <HAL_SYSTICK_Config>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e00e      	b.n	8001f7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b0f      	cmp	r3, #15
 8001f62:	d80a      	bhi.n	8001f7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f64:	2200      	movs	r2, #0
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6c:	f000 f90b 	bl	8002186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f70:	4a06      	ldr	r2, [pc, #24]	; (8001f8c <HAL_InitTick+0x5c>)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	e000      	b.n	8001f7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000000 	.word	0x20000000
 8001f88:	20000008 	.word	0x20000008
 8001f8c:	20000004 	.word	0x20000004

08001f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_IncTick+0x20>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_IncTick+0x24>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <HAL_IncTick+0x24>)
 8001fa2:	6013      	str	r3, [r2, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	20000008 	.word	0x20000008
 8001fb4:	2000ffd0 	.word	0x2000ffd0

08001fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return uwTick;
 8001fbc:	4b03      	ldr	r3, [pc, #12]	; (8001fcc <HAL_GetTick+0x14>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	2000ffd0 	.word	0x2000ffd0

08001fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fec:	4013      	ands	r3, r2
 8001fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ff8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002002:	4a04      	ldr	r2, [pc, #16]	; (8002014 <__NVIC_SetPriorityGrouping+0x44>)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	60d3      	str	r3, [r2, #12]
}
 8002008:	bf00      	nop
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800201c:	4b04      	ldr	r3, [pc, #16]	; (8002030 <__NVIC_GetPriorityGrouping+0x18>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	f003 0307 	and.w	r3, r3, #7
}
 8002026:	4618      	mov	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	2b00      	cmp	r3, #0
 8002044:	db0b      	blt.n	800205e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	f003 021f 	and.w	r2, r3, #31
 800204c:	4907      	ldr	r1, [pc, #28]	; (800206c <__NVIC_EnableIRQ+0x38>)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	095b      	lsrs	r3, r3, #5
 8002054:	2001      	movs	r0, #1
 8002056:	fa00 f202 	lsl.w	r2, r0, r2
 800205a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	e000e100 	.word	0xe000e100

08002070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	6039      	str	r1, [r7, #0]
 800207a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002080:	2b00      	cmp	r3, #0
 8002082:	db0a      	blt.n	800209a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	b2da      	uxtb	r2, r3
 8002088:	490c      	ldr	r1, [pc, #48]	; (80020bc <__NVIC_SetPriority+0x4c>)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	0112      	lsls	r2, r2, #4
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	440b      	add	r3, r1
 8002094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002098:	e00a      	b.n	80020b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	b2da      	uxtb	r2, r3
 800209e:	4908      	ldr	r1, [pc, #32]	; (80020c0 <__NVIC_SetPriority+0x50>)
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	3b04      	subs	r3, #4
 80020a8:	0112      	lsls	r2, r2, #4
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	440b      	add	r3, r1
 80020ae:	761a      	strb	r2, [r3, #24]
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000e100 	.word	0xe000e100
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b089      	sub	sp, #36	; 0x24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f1c3 0307 	rsb	r3, r3, #7
 80020de:	2b04      	cmp	r3, #4
 80020e0:	bf28      	it	cs
 80020e2:	2304      	movcs	r3, #4
 80020e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3304      	adds	r3, #4
 80020ea:	2b06      	cmp	r3, #6
 80020ec:	d902      	bls.n	80020f4 <NVIC_EncodePriority+0x30>
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3b03      	subs	r3, #3
 80020f2:	e000      	b.n	80020f6 <NVIC_EncodePriority+0x32>
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f8:	f04f 32ff 	mov.w	r2, #4294967295
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43da      	mvns	r2, r3
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	401a      	ands	r2, r3
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800210c:	f04f 31ff 	mov.w	r1, #4294967295
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	fa01 f303 	lsl.w	r3, r1, r3
 8002116:	43d9      	mvns	r1, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800211c:	4313      	orrs	r3, r2
         );
}
 800211e:	4618      	mov	r0, r3
 8002120:	3724      	adds	r7, #36	; 0x24
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
	...

0800212c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3b01      	subs	r3, #1
 8002138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800213c:	d301      	bcc.n	8002142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800213e:	2301      	movs	r3, #1
 8002140:	e00f      	b.n	8002162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002142:	4a0a      	ldr	r2, [pc, #40]	; (800216c <SysTick_Config+0x40>)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3b01      	subs	r3, #1
 8002148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800214a:	210f      	movs	r1, #15
 800214c:	f04f 30ff 	mov.w	r0, #4294967295
 8002150:	f7ff ff8e 	bl	8002070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002154:	4b05      	ldr	r3, [pc, #20]	; (800216c <SysTick_Config+0x40>)
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800215a:	4b04      	ldr	r3, [pc, #16]	; (800216c <SysTick_Config+0x40>)
 800215c:	2207      	movs	r2, #7
 800215e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	e000e010 	.word	0xe000e010

08002170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ff29 	bl	8001fd0 <__NVIC_SetPriorityGrouping>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002186:	b580      	push	{r7, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
 800218c:	4603      	mov	r3, r0
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	607a      	str	r2, [r7, #4]
 8002192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002198:	f7ff ff3e 	bl	8002018 <__NVIC_GetPriorityGrouping>
 800219c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68b9      	ldr	r1, [r7, #8]
 80021a2:	6978      	ldr	r0, [r7, #20]
 80021a4:	f7ff ff8e 	bl	80020c4 <NVIC_EncodePriority>
 80021a8:	4602      	mov	r2, r0
 80021aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ff5d 	bl	8002070 <__NVIC_SetPriority>
}
 80021b6:	bf00      	nop
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	4603      	mov	r3, r0
 80021c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ff31 	bl	8002034 <__NVIC_EnableIRQ>
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff ffa2 	bl	800212c <SysTick_Config>
 80021e8:	4603      	mov	r3, r0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002200:	f7ff feda 	bl	8001fb8 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e099      	b.n	8002344 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0201 	bic.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002230:	e00f      	b.n	8002252 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002232:	f7ff fec1 	bl	8001fb8 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b05      	cmp	r3, #5
 800223e:	d908      	bls.n	8002252 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2220      	movs	r2, #32
 8002244:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2203      	movs	r2, #3
 800224a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e078      	b.n	8002344 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1e8      	bne.n	8002232 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	4b38      	ldr	r3, [pc, #224]	; (800234c <HAL_DMA_Init+0x158>)
 800226c:	4013      	ands	r3, r2
 800226e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800227e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800228a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002296:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d107      	bne.n	80022bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b4:	4313      	orrs	r3, r2
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f023 0307 	bic.w	r3, r3, #7
 80022d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	4313      	orrs	r3, r2
 80022dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d117      	bne.n	8002316 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00e      	beq.n	8002316 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 fadd 	bl	80028b8 <DMA_CheckFifoParam>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d008      	beq.n	8002316 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2240      	movs	r2, #64	; 0x40
 8002308:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002312:	2301      	movs	r3, #1
 8002314:	e016      	b.n	8002344 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 fa94 	bl	800284c <DMA_CalcBaseAndBitshift>
 8002324:	4603      	mov	r3, r0
 8002326:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232c:	223f      	movs	r2, #63	; 0x3f
 800232e:	409a      	lsls	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	f010803f 	.word	0xf010803f

08002350 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002366:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <HAL_DMA_Start_IT+0x26>
 8002372:	2302      	movs	r3, #2
 8002374:	e040      	b.n	80023f8 <HAL_DMA_Start_IT+0xa8>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b01      	cmp	r3, #1
 8002388:	d12f      	bne.n	80023ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2202      	movs	r2, #2
 800238e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68b9      	ldr	r1, [r7, #8]
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 fa26 	bl	80027f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a8:	223f      	movs	r2, #63	; 0x3f
 80023aa:	409a      	lsls	r2, r3
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0216 	orr.w	r2, r2, #22
 80023be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d007      	beq.n	80023d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0208 	orr.w	r2, r2, #8
 80023d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0201 	orr.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	e005      	b.n	80023f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023f2:	2302      	movs	r3, #2
 80023f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800240c:	4b8e      	ldr	r3, [pc, #568]	; (8002648 <HAL_DMA_IRQHandler+0x248>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a8e      	ldr	r2, [pc, #568]	; (800264c <HAL_DMA_IRQHandler+0x24c>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	0a9b      	lsrs	r3, r3, #10
 8002418:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242a:	2208      	movs	r2, #8
 800242c:	409a      	lsls	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4013      	ands	r3, r2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d01a      	beq.n	800246c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d013      	beq.n	800246c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0204 	bic.w	r2, r2, #4
 8002452:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002458:	2208      	movs	r2, #8
 800245a:	409a      	lsls	r2, r3
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002464:	f043 0201 	orr.w	r2, r3, #1
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002470:	2201      	movs	r2, #1
 8002472:	409a      	lsls	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4013      	ands	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d012      	beq.n	80024a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00b      	beq.n	80024a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248e:	2201      	movs	r2, #1
 8002490:	409a      	lsls	r2, r3
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249a:	f043 0202 	orr.w	r2, r3, #2
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a6:	2204      	movs	r2, #4
 80024a8:	409a      	lsls	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4013      	ands	r3, r2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d012      	beq.n	80024d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00b      	beq.n	80024d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c4:	2204      	movs	r2, #4
 80024c6:	409a      	lsls	r2, r3
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d0:	f043 0204 	orr.w	r2, r3, #4
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024dc:	2210      	movs	r2, #16
 80024de:	409a      	lsls	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4013      	ands	r3, r2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d043      	beq.n	8002570 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d03c      	beq.n	8002570 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fa:	2210      	movs	r2, #16
 80024fc:	409a      	lsls	r2, r3
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d018      	beq.n	8002542 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d108      	bne.n	8002530 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	2b00      	cmp	r3, #0
 8002524:	d024      	beq.n	8002570 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	4798      	blx	r3
 800252e:	e01f      	b.n	8002570 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002534:	2b00      	cmp	r3, #0
 8002536:	d01b      	beq.n	8002570 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	4798      	blx	r3
 8002540:	e016      	b.n	8002570 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254c:	2b00      	cmp	r3, #0
 800254e:	d107      	bne.n	8002560 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0208 	bic.w	r2, r2, #8
 800255e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002574:	2220      	movs	r2, #32
 8002576:	409a      	lsls	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4013      	ands	r3, r2
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 808f 	beq.w	80026a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0310 	and.w	r3, r3, #16
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 8087 	beq.w	80026a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002596:	2220      	movs	r2, #32
 8002598:	409a      	lsls	r2, r3
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b05      	cmp	r3, #5
 80025a8:	d136      	bne.n	8002618 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0216 	bic.w	r2, r2, #22
 80025b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695a      	ldr	r2, [r3, #20]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d103      	bne.n	80025da <HAL_DMA_IRQHandler+0x1da>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d007      	beq.n	80025ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0208 	bic.w	r2, r2, #8
 80025e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ee:	223f      	movs	r2, #63	; 0x3f
 80025f0:	409a      	lsls	r2, r3
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800260a:	2b00      	cmp	r3, #0
 800260c:	d07e      	beq.n	800270c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	4798      	blx	r3
        }
        return;
 8002616:	e079      	b.n	800270c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d01d      	beq.n	8002662 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10d      	bne.n	8002650 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002638:	2b00      	cmp	r3, #0
 800263a:	d031      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	4798      	blx	r3
 8002644:	e02c      	b.n	80026a0 <HAL_DMA_IRQHandler+0x2a0>
 8002646:	bf00      	nop
 8002648:	20000000 	.word	0x20000000
 800264c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002654:	2b00      	cmp	r3, #0
 8002656:	d023      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	4798      	blx	r3
 8002660:	e01e      	b.n	80026a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10f      	bne.n	8002690 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0210 	bic.w	r2, r2, #16
 800267e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d032      	beq.n	800270e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d022      	beq.n	80026fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2205      	movs	r2, #5
 80026b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0201 	bic.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	3301      	adds	r3, #1
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d307      	bcc.n	80026e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f2      	bne.n	80026cc <HAL_DMA_IRQHandler+0x2cc>
 80026e6:	e000      	b.n	80026ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80026e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d005      	beq.n	800270e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	4798      	blx	r3
 800270a:	e000      	b.n	800270e <HAL_DMA_IRQHandler+0x30e>
        return;
 800270c:	bf00      	nop
    }
  }
}
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8002714:	b480      	push	{r7}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	460b      	mov	r3, r1
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_DMA_RegisterCallback+0x20>
 8002730:	2302      	movs	r3, #2
 8002732:	e03d      	b.n	80027b0 <HAL_DMA_RegisterCallback+0x9c>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b01      	cmp	r3, #1
 8002746:	d12c      	bne.n	80027a2 <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 8002748:	7afb      	ldrb	r3, [r7, #11]
 800274a:	2b05      	cmp	r3, #5
 800274c:	d826      	bhi.n	800279c <HAL_DMA_RegisterCallback+0x88>
 800274e:	a201      	add	r2, pc, #4	; (adr r2, 8002754 <HAL_DMA_RegisterCallback+0x40>)
 8002750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002754:	0800276d 	.word	0x0800276d
 8002758:	08002775 	.word	0x08002775
 800275c:	0800277d 	.word	0x0800277d
 8002760:	08002785 	.word	0x08002785
 8002764:	0800278d 	.word	0x0800278d
 8002768:	08002795 	.word	0x08002795
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8002772:	e018      	b.n	80027a6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800277a:	e014      	b.n	80027a6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8002782:	e010      	b.n	80027a6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 800278a:	e00c      	b.n	80027a6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8002792:	e008      	b.n	80027a6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800279a:	e004      	b.n	80027a6 <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	75fb      	strb	r3, [r7, #23]
      break;
 80027a0:	e001      	b.n	80027a6 <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 80027ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	371c      	adds	r7, #28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027ca:	b2db      	uxtb	r3, r3
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
 80027fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800280c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b40      	cmp	r3, #64	; 0x40
 800281c:	d108      	bne.n	8002830 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800282e:	e007      	b.n	8002840 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	60da      	str	r2, [r3, #12]
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	b2db      	uxtb	r3, r3
 800285a:	3b10      	subs	r3, #16
 800285c:	4a14      	ldr	r2, [pc, #80]	; (80028b0 <DMA_CalcBaseAndBitshift+0x64>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	091b      	lsrs	r3, r3, #4
 8002864:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002866:	4a13      	ldr	r2, [pc, #76]	; (80028b4 <DMA_CalcBaseAndBitshift+0x68>)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4413      	add	r3, r2
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b03      	cmp	r3, #3
 8002878:	d909      	bls.n	800288e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002882:	f023 0303 	bic.w	r3, r3, #3
 8002886:	1d1a      	adds	r2, r3, #4
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	659a      	str	r2, [r3, #88]	; 0x58
 800288c:	e007      	b.n	800289e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002896:	f023 0303 	bic.w	r3, r3, #3
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	aaaaaaab 	.word	0xaaaaaaab
 80028b4:	08005a90 	.word	0x08005a90

080028b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d11f      	bne.n	8002912 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d856      	bhi.n	8002986 <DMA_CheckFifoParam+0xce>
 80028d8:	a201      	add	r2, pc, #4	; (adr r2, 80028e0 <DMA_CheckFifoParam+0x28>)
 80028da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028de:	bf00      	nop
 80028e0:	080028f1 	.word	0x080028f1
 80028e4:	08002903 	.word	0x08002903
 80028e8:	080028f1 	.word	0x080028f1
 80028ec:	08002987 	.word	0x08002987
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d046      	beq.n	800298a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002900:	e043      	b.n	800298a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002906:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800290a:	d140      	bne.n	800298e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002910:	e03d      	b.n	800298e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800291a:	d121      	bne.n	8002960 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b03      	cmp	r3, #3
 8002920:	d837      	bhi.n	8002992 <DMA_CheckFifoParam+0xda>
 8002922:	a201      	add	r2, pc, #4	; (adr r2, 8002928 <DMA_CheckFifoParam+0x70>)
 8002924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002928:	08002939 	.word	0x08002939
 800292c:	0800293f 	.word	0x0800293f
 8002930:	08002939 	.word	0x08002939
 8002934:	08002951 	.word	0x08002951
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
      break;
 800293c:	e030      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002942:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d025      	beq.n	8002996 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800294e:	e022      	b.n	8002996 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002958:	d11f      	bne.n	800299a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800295e:	e01c      	b.n	800299a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b02      	cmp	r3, #2
 8002964:	d903      	bls.n	800296e <DMA_CheckFifoParam+0xb6>
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d003      	beq.n	8002974 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800296c:	e018      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	73fb      	strb	r3, [r7, #15]
      break;
 8002972:	e015      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002978:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00e      	beq.n	800299e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
      break;
 8002984:	e00b      	b.n	800299e <DMA_CheckFifoParam+0xe6>
      break;
 8002986:	bf00      	nop
 8002988:	e00a      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;
 800298a:	bf00      	nop
 800298c:	e008      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;
 800298e:	bf00      	nop
 8002990:	e006      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002992:	bf00      	nop
 8002994:	e004      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002996:	bf00      	nop
 8002998:	e002      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800299a:	bf00      	nop
 800299c:	e000      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;
 800299e:	bf00      	nop
    }
  } 
  
  return status; 
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop

080029b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b089      	sub	sp, #36	; 0x24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	e159      	b.n	8002c80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029cc:	2201      	movs	r2, #1
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	f040 8148 	bne.w	8002c7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d005      	beq.n	8002a02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d130      	bne.n	8002a64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4013      	ands	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a38:	2201      	movs	r2, #1
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	f003 0201 	and.w	r2, r3, #1
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d017      	beq.n	8002aa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d123      	bne.n	8002af4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	08da      	lsrs	r2, r3, #3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3208      	adds	r2, #8
 8002ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	220f      	movs	r2, #15
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	08da      	lsrs	r2, r3, #3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3208      	adds	r2, #8
 8002aee:	69b9      	ldr	r1, [r7, #24]
 8002af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2203      	movs	r2, #3
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0203 	and.w	r2, r3, #3
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 80a2 	beq.w	8002c7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	4b57      	ldr	r3, [pc, #348]	; (8002c98 <HAL_GPIO_Init+0x2e8>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	4a56      	ldr	r2, [pc, #344]	; (8002c98 <HAL_GPIO_Init+0x2e8>)
 8002b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b44:	6453      	str	r3, [r2, #68]	; 0x44
 8002b46:	4b54      	ldr	r3, [pc, #336]	; (8002c98 <HAL_GPIO_Init+0x2e8>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b52:	4a52      	ldr	r2, [pc, #328]	; (8002c9c <HAL_GPIO_Init+0x2ec>)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	089b      	lsrs	r3, r3, #2
 8002b58:	3302      	adds	r3, #2
 8002b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	220f      	movs	r2, #15
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a49      	ldr	r2, [pc, #292]	; (8002ca0 <HAL_GPIO_Init+0x2f0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d019      	beq.n	8002bb2 <HAL_GPIO_Init+0x202>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a48      	ldr	r2, [pc, #288]	; (8002ca4 <HAL_GPIO_Init+0x2f4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d013      	beq.n	8002bae <HAL_GPIO_Init+0x1fe>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a47      	ldr	r2, [pc, #284]	; (8002ca8 <HAL_GPIO_Init+0x2f8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00d      	beq.n	8002baa <HAL_GPIO_Init+0x1fa>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a46      	ldr	r2, [pc, #280]	; (8002cac <HAL_GPIO_Init+0x2fc>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d007      	beq.n	8002ba6 <HAL_GPIO_Init+0x1f6>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a45      	ldr	r2, [pc, #276]	; (8002cb0 <HAL_GPIO_Init+0x300>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d101      	bne.n	8002ba2 <HAL_GPIO_Init+0x1f2>
 8002b9e:	2304      	movs	r3, #4
 8002ba0:	e008      	b.n	8002bb4 <HAL_GPIO_Init+0x204>
 8002ba2:	2307      	movs	r3, #7
 8002ba4:	e006      	b.n	8002bb4 <HAL_GPIO_Init+0x204>
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e004      	b.n	8002bb4 <HAL_GPIO_Init+0x204>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e002      	b.n	8002bb4 <HAL_GPIO_Init+0x204>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <HAL_GPIO_Init+0x204>
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	69fa      	ldr	r2, [r7, #28]
 8002bb6:	f002 0203 	and.w	r2, r2, #3
 8002bba:	0092      	lsls	r2, r2, #2
 8002bbc:	4093      	lsls	r3, r2
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bc4:	4935      	ldr	r1, [pc, #212]	; (8002c9c <HAL_GPIO_Init+0x2ec>)
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	089b      	lsrs	r3, r3, #2
 8002bca:	3302      	adds	r3, #2
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bd2:	4b38      	ldr	r3, [pc, #224]	; (8002cb4 <HAL_GPIO_Init+0x304>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bf6:	4a2f      	ldr	r2, [pc, #188]	; (8002cb4 <HAL_GPIO_Init+0x304>)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bfc:	4b2d      	ldr	r3, [pc, #180]	; (8002cb4 <HAL_GPIO_Init+0x304>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c20:	4a24      	ldr	r2, [pc, #144]	; (8002cb4 <HAL_GPIO_Init+0x304>)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c26:	4b23      	ldr	r3, [pc, #140]	; (8002cb4 <HAL_GPIO_Init+0x304>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4013      	ands	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c4a:	4a1a      	ldr	r2, [pc, #104]	; (8002cb4 <HAL_GPIO_Init+0x304>)
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c50:	4b18      	ldr	r3, [pc, #96]	; (8002cb4 <HAL_GPIO_Init+0x304>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c74:	4a0f      	ldr	r2, [pc, #60]	; (8002cb4 <HAL_GPIO_Init+0x304>)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	61fb      	str	r3, [r7, #28]
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	2b0f      	cmp	r3, #15
 8002c84:	f67f aea2 	bls.w	80029cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c88:	bf00      	nop
 8002c8a:	bf00      	nop
 8002c8c:	3724      	adds	r7, #36	; 0x24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40013800 	.word	0x40013800
 8002ca0:	40020000 	.word	0x40020000
 8002ca4:	40020400 	.word	0x40020400
 8002ca8:	40020800 	.word	0x40020800
 8002cac:	40020c00 	.word	0x40020c00
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40013c00 	.word	0x40013c00

08002cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	807b      	strh	r3, [r7, #2]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cc8:	787b      	ldrb	r3, [r7, #1]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cce:	887a      	ldrh	r2, [r7, #2]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cd4:	e003      	b.n	8002cde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cd6:	887b      	ldrh	r3, [r7, #2]
 8002cd8:	041a      	lsls	r2, r3, #16
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	619a      	str	r2, [r3, #24]
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
	...

08002cec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e267      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d075      	beq.n	8002df6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d0a:	4b88      	ldr	r3, [pc, #544]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d00c      	beq.n	8002d30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d16:	4b85      	ldr	r3, [pc, #532]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d112      	bne.n	8002d48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d22:	4b82      	ldr	r3, [pc, #520]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d2e:	d10b      	bne.n	8002d48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d30:	4b7e      	ldr	r3, [pc, #504]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d05b      	beq.n	8002df4 <HAL_RCC_OscConfig+0x108>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d157      	bne.n	8002df4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e242      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d50:	d106      	bne.n	8002d60 <HAL_RCC_OscConfig+0x74>
 8002d52:	4b76      	ldr	r3, [pc, #472]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a75      	ldr	r2, [pc, #468]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	e01d      	b.n	8002d9c <HAL_RCC_OscConfig+0xb0>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d68:	d10c      	bne.n	8002d84 <HAL_RCC_OscConfig+0x98>
 8002d6a:	4b70      	ldr	r3, [pc, #448]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a6f      	ldr	r2, [pc, #444]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	4b6d      	ldr	r3, [pc, #436]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a6c      	ldr	r2, [pc, #432]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	e00b      	b.n	8002d9c <HAL_RCC_OscConfig+0xb0>
 8002d84:	4b69      	ldr	r3, [pc, #420]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a68      	ldr	r2, [pc, #416]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	4b66      	ldr	r3, [pc, #408]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a65      	ldr	r2, [pc, #404]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d013      	beq.n	8002dcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da4:	f7ff f908 	bl	8001fb8 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dac:	f7ff f904 	bl	8001fb8 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b64      	cmp	r3, #100	; 0x64
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e207      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dbe:	4b5b      	ldr	r3, [pc, #364]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCC_OscConfig+0xc0>
 8002dca:	e014      	b.n	8002df6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dcc:	f7ff f8f4 	bl	8001fb8 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd4:	f7ff f8f0 	bl	8001fb8 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b64      	cmp	r3, #100	; 0x64
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e1f3      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de6:	4b51      	ldr	r3, [pc, #324]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0xe8>
 8002df2:	e000      	b.n	8002df6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d063      	beq.n	8002eca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e02:	4b4a      	ldr	r3, [pc, #296]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00b      	beq.n	8002e26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e0e:	4b47      	ldr	r3, [pc, #284]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d11c      	bne.n	8002e54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e1a:	4b44      	ldr	r3, [pc, #272]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d116      	bne.n	8002e54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e26:	4b41      	ldr	r3, [pc, #260]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d005      	beq.n	8002e3e <HAL_RCC_OscConfig+0x152>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d001      	beq.n	8002e3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e1c7      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3e:	4b3b      	ldr	r3, [pc, #236]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4937      	ldr	r1, [pc, #220]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e52:	e03a      	b.n	8002eca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d020      	beq.n	8002e9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e5c:	4b34      	ldr	r3, [pc, #208]	; (8002f30 <HAL_RCC_OscConfig+0x244>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e62:	f7ff f8a9 	bl	8001fb8 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e6a:	f7ff f8a5 	bl	8001fb8 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e1a8      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7c:	4b2b      	ldr	r3, [pc, #172]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e88:	4b28      	ldr	r3, [pc, #160]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	4925      	ldr	r1, [pc, #148]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	600b      	str	r3, [r1, #0]
 8002e9c:	e015      	b.n	8002eca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e9e:	4b24      	ldr	r3, [pc, #144]	; (8002f30 <HAL_RCC_OscConfig+0x244>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea4:	f7ff f888 	bl	8001fb8 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eac:	f7ff f884 	bl	8001fb8 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e187      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ebe:	4b1b      	ldr	r3, [pc, #108]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d036      	beq.n	8002f44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d016      	beq.n	8002f0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ede:	4b15      	ldr	r3, [pc, #84]	; (8002f34 <HAL_RCC_OscConfig+0x248>)
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee4:	f7ff f868 	bl	8001fb8 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eec:	f7ff f864 	bl	8001fb8 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e167      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efe:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0f0      	beq.n	8002eec <HAL_RCC_OscConfig+0x200>
 8002f0a:	e01b      	b.n	8002f44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f0c:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <HAL_RCC_OscConfig+0x248>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f12:	f7ff f851 	bl	8001fb8 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f18:	e00e      	b.n	8002f38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f1a:	f7ff f84d 	bl	8001fb8 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d907      	bls.n	8002f38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e150      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	42470000 	.word	0x42470000
 8002f34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f38:	4b88      	ldr	r3, [pc, #544]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8002f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1ea      	bne.n	8002f1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 8097 	beq.w	8003080 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f52:	2300      	movs	r3, #0
 8002f54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f56:	4b81      	ldr	r3, [pc, #516]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10f      	bne.n	8002f82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	4b7d      	ldr	r3, [pc, #500]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	4a7c      	ldr	r2, [pc, #496]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8002f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f70:	6413      	str	r3, [r2, #64]	; 0x40
 8002f72:	4b7a      	ldr	r3, [pc, #488]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	60bb      	str	r3, [r7, #8]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f82:	4b77      	ldr	r3, [pc, #476]	; (8003160 <HAL_RCC_OscConfig+0x474>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d118      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f8e:	4b74      	ldr	r3, [pc, #464]	; (8003160 <HAL_RCC_OscConfig+0x474>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a73      	ldr	r2, [pc, #460]	; (8003160 <HAL_RCC_OscConfig+0x474>)
 8002f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9a:	f7ff f80d 	bl	8001fb8 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa2:	f7ff f809 	bl	8001fb8 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e10c      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb4:	4b6a      	ldr	r3, [pc, #424]	; (8003160 <HAL_RCC_OscConfig+0x474>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d106      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x2ea>
 8002fc8:	4b64      	ldr	r3, [pc, #400]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fcc:	4a63      	ldr	r2, [pc, #396]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd4:	e01c      	b.n	8003010 <HAL_RCC_OscConfig+0x324>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b05      	cmp	r3, #5
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x30c>
 8002fde:	4b5f      	ldr	r3, [pc, #380]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8002fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe2:	4a5e      	ldr	r2, [pc, #376]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8002fe4:	f043 0304 	orr.w	r3, r3, #4
 8002fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fea:	4b5c      	ldr	r3, [pc, #368]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8002fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fee:	4a5b      	ldr	r2, [pc, #364]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff6:	e00b      	b.n	8003010 <HAL_RCC_OscConfig+0x324>
 8002ff8:	4b58      	ldr	r3, [pc, #352]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8002ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffc:	4a57      	ldr	r2, [pc, #348]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8002ffe:	f023 0301 	bic.w	r3, r3, #1
 8003002:	6713      	str	r3, [r2, #112]	; 0x70
 8003004:	4b55      	ldr	r3, [pc, #340]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8003006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003008:	4a54      	ldr	r2, [pc, #336]	; (800315c <HAL_RCC_OscConfig+0x470>)
 800300a:	f023 0304 	bic.w	r3, r3, #4
 800300e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d015      	beq.n	8003044 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003018:	f7fe ffce 	bl	8001fb8 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301e:	e00a      	b.n	8003036 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003020:	f7fe ffca 	bl	8001fb8 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	; 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e0cb      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003036:	4b49      	ldr	r3, [pc, #292]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8003038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0ee      	beq.n	8003020 <HAL_RCC_OscConfig+0x334>
 8003042:	e014      	b.n	800306e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003044:	f7fe ffb8 	bl	8001fb8 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800304a:	e00a      	b.n	8003062 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800304c:	f7fe ffb4 	bl	8001fb8 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	f241 3288 	movw	r2, #5000	; 0x1388
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e0b5      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003062:	4b3e      	ldr	r3, [pc, #248]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8003064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1ee      	bne.n	800304c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800306e:	7dfb      	ldrb	r3, [r7, #23]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d105      	bne.n	8003080 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003074:	4b39      	ldr	r3, [pc, #228]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	4a38      	ldr	r2, [pc, #224]	; (800315c <HAL_RCC_OscConfig+0x470>)
 800307a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800307e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80a1 	beq.w	80031cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800308a:	4b34      	ldr	r3, [pc, #208]	; (800315c <HAL_RCC_OscConfig+0x470>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	2b08      	cmp	r3, #8
 8003094:	d05c      	beq.n	8003150 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d141      	bne.n	8003122 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800309e:	4b31      	ldr	r3, [pc, #196]	; (8003164 <HAL_RCC_OscConfig+0x478>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a4:	f7fe ff88 	bl	8001fb8 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ac:	f7fe ff84 	bl	8001fb8 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e087      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030be:	4b27      	ldr	r3, [pc, #156]	; (800315c <HAL_RCC_OscConfig+0x470>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f0      	bne.n	80030ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69da      	ldr	r2, [r3, #28]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	019b      	lsls	r3, r3, #6
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	085b      	lsrs	r3, r3, #1
 80030e2:	3b01      	subs	r3, #1
 80030e4:	041b      	lsls	r3, r3, #16
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	061b      	lsls	r3, r3, #24
 80030ee:	491b      	ldr	r1, [pc, #108]	; (800315c <HAL_RCC_OscConfig+0x470>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030f4:	4b1b      	ldr	r3, [pc, #108]	; (8003164 <HAL_RCC_OscConfig+0x478>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fa:	f7fe ff5d 	bl	8001fb8 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003102:	f7fe ff59 	bl	8001fb8 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e05c      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003114:	4b11      	ldr	r3, [pc, #68]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0f0      	beq.n	8003102 <HAL_RCC_OscConfig+0x416>
 8003120:	e054      	b.n	80031cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003122:	4b10      	ldr	r3, [pc, #64]	; (8003164 <HAL_RCC_OscConfig+0x478>)
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003128:	f7fe ff46 	bl	8001fb8 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003130:	f7fe ff42 	bl	8001fb8 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e045      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003142:	4b06      	ldr	r3, [pc, #24]	; (800315c <HAL_RCC_OscConfig+0x470>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f0      	bne.n	8003130 <HAL_RCC_OscConfig+0x444>
 800314e:	e03d      	b.n	80031cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d107      	bne.n	8003168 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e038      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
 800315c:	40023800 	.word	0x40023800
 8003160:	40007000 	.word	0x40007000
 8003164:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003168:	4b1b      	ldr	r3, [pc, #108]	; (80031d8 <HAL_RCC_OscConfig+0x4ec>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d028      	beq.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003180:	429a      	cmp	r2, r3
 8003182:	d121      	bne.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318e:	429a      	cmp	r2, r3
 8003190:	d11a      	bne.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003198:	4013      	ands	r3, r2
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800319e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d111      	bne.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ae:	085b      	lsrs	r3, r3, #1
 80031b0:	3b01      	subs	r3, #1
 80031b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d107      	bne.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40023800 	.word	0x40023800

080031dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e0cc      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031f0:	4b68      	ldr	r3, [pc, #416]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d90c      	bls.n	8003218 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fe:	4b65      	ldr	r3, [pc, #404]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b63      	ldr	r3, [pc, #396]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0b8      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d020      	beq.n	8003266 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003230:	4b59      	ldr	r3, [pc, #356]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	4a58      	ldr	r2, [pc, #352]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800323a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003248:	4b53      	ldr	r3, [pc, #332]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	4a52      	ldr	r2, [pc, #328]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003252:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003254:	4b50      	ldr	r3, [pc, #320]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	494d      	ldr	r1, [pc, #308]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	4313      	orrs	r3, r2
 8003264:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d044      	beq.n	80032fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d107      	bne.n	800328a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	4b47      	ldr	r3, [pc, #284]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d119      	bne.n	80032ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e07f      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d003      	beq.n	800329a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003296:	2b03      	cmp	r3, #3
 8003298:	d107      	bne.n	80032aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329a:	4b3f      	ldr	r3, [pc, #252]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d109      	bne.n	80032ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e06f      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032aa:	4b3b      	ldr	r3, [pc, #236]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e067      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ba:	4b37      	ldr	r3, [pc, #220]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f023 0203 	bic.w	r2, r3, #3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4934      	ldr	r1, [pc, #208]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032cc:	f7fe fe74 	bl	8001fb8 <HAL_GetTick>
 80032d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d2:	e00a      	b.n	80032ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d4:	f7fe fe70 	bl	8001fb8 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e04f      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ea:	4b2b      	ldr	r3, [pc, #172]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 020c 	and.w	r2, r3, #12
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d1eb      	bne.n	80032d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032fc:	4b25      	ldr	r3, [pc, #148]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d20c      	bcs.n	8003324 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330a:	4b22      	ldr	r3, [pc, #136]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003312:	4b20      	ldr	r3, [pc, #128]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d001      	beq.n	8003324 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e032      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003330:	4b19      	ldr	r3, [pc, #100]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4916      	ldr	r1, [pc, #88]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	4313      	orrs	r3, r2
 8003340:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d009      	beq.n	8003362 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800334e:	4b12      	ldr	r3, [pc, #72]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	490e      	ldr	r1, [pc, #56]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800335e:	4313      	orrs	r3, r2
 8003360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003362:	f000 f821 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8003366:	4602      	mov	r2, r0
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	091b      	lsrs	r3, r3, #4
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	490a      	ldr	r1, [pc, #40]	; (800339c <HAL_RCC_ClockConfig+0x1c0>)
 8003374:	5ccb      	ldrb	r3, [r1, r3]
 8003376:	fa22 f303 	lsr.w	r3, r2, r3
 800337a:	4a09      	ldr	r2, [pc, #36]	; (80033a0 <HAL_RCC_ClockConfig+0x1c4>)
 800337c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800337e:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7fe fdd4 	bl	8001f30 <HAL_InitTick>

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40023c00 	.word	0x40023c00
 8003398:	40023800 	.word	0x40023800
 800339c:	080057b0 	.word	0x080057b0
 80033a0:	20000000 	.word	0x20000000
 80033a4:	20000004 	.word	0x20000004

080033a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033ac:	b094      	sub	sp, #80	; 0x50
 80033ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	647b      	str	r3, [r7, #68]	; 0x44
 80033b4:	2300      	movs	r3, #0
 80033b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033b8:	2300      	movs	r3, #0
 80033ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033c0:	4b79      	ldr	r3, [pc, #484]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 030c 	and.w	r3, r3, #12
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d00d      	beq.n	80033e8 <HAL_RCC_GetSysClockFreq+0x40>
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	f200 80e1 	bhi.w	8003594 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_RCC_GetSysClockFreq+0x34>
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d003      	beq.n	80033e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80033da:	e0db      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033dc:	4b73      	ldr	r3, [pc, #460]	; (80035ac <HAL_RCC_GetSysClockFreq+0x204>)
 80033de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80033e0:	e0db      	b.n	800359a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033e2:	4b73      	ldr	r3, [pc, #460]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80033e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033e6:	e0d8      	b.n	800359a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033e8:	4b6f      	ldr	r3, [pc, #444]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033f2:	4b6d      	ldr	r3, [pc, #436]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d063      	beq.n	80034c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033fe:	4b6a      	ldr	r3, [pc, #424]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	099b      	lsrs	r3, r3, #6
 8003404:	2200      	movs	r2, #0
 8003406:	63bb      	str	r3, [r7, #56]	; 0x38
 8003408:	63fa      	str	r2, [r7, #60]	; 0x3c
 800340a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003410:	633b      	str	r3, [r7, #48]	; 0x30
 8003412:	2300      	movs	r3, #0
 8003414:	637b      	str	r3, [r7, #52]	; 0x34
 8003416:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800341a:	4622      	mov	r2, r4
 800341c:	462b      	mov	r3, r5
 800341e:	f04f 0000 	mov.w	r0, #0
 8003422:	f04f 0100 	mov.w	r1, #0
 8003426:	0159      	lsls	r1, r3, #5
 8003428:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800342c:	0150      	lsls	r0, r2, #5
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	4621      	mov	r1, r4
 8003434:	1a51      	subs	r1, r2, r1
 8003436:	6139      	str	r1, [r7, #16]
 8003438:	4629      	mov	r1, r5
 800343a:	eb63 0301 	sbc.w	r3, r3, r1
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800344c:	4659      	mov	r1, fp
 800344e:	018b      	lsls	r3, r1, #6
 8003450:	4651      	mov	r1, sl
 8003452:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003456:	4651      	mov	r1, sl
 8003458:	018a      	lsls	r2, r1, #6
 800345a:	4651      	mov	r1, sl
 800345c:	ebb2 0801 	subs.w	r8, r2, r1
 8003460:	4659      	mov	r1, fp
 8003462:	eb63 0901 	sbc.w	r9, r3, r1
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	f04f 0300 	mov.w	r3, #0
 800346e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003472:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003476:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800347a:	4690      	mov	r8, r2
 800347c:	4699      	mov	r9, r3
 800347e:	4623      	mov	r3, r4
 8003480:	eb18 0303 	adds.w	r3, r8, r3
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	462b      	mov	r3, r5
 8003488:	eb49 0303 	adc.w	r3, r9, r3
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	f04f 0300 	mov.w	r3, #0
 8003496:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800349a:	4629      	mov	r1, r5
 800349c:	024b      	lsls	r3, r1, #9
 800349e:	4621      	mov	r1, r4
 80034a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034a4:	4621      	mov	r1, r4
 80034a6:	024a      	lsls	r2, r1, #9
 80034a8:	4610      	mov	r0, r2
 80034aa:	4619      	mov	r1, r3
 80034ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ae:	2200      	movs	r2, #0
 80034b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80034b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034b8:	f7fc fee2 	bl	8000280 <__aeabi_uldivmod>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4613      	mov	r3, r2
 80034c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c4:	e058      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034c6:	4b38      	ldr	r3, [pc, #224]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	099b      	lsrs	r3, r3, #6
 80034cc:	2200      	movs	r2, #0
 80034ce:	4618      	mov	r0, r3
 80034d0:	4611      	mov	r1, r2
 80034d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034d6:	623b      	str	r3, [r7, #32]
 80034d8:	2300      	movs	r3, #0
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
 80034dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034e0:	4642      	mov	r2, r8
 80034e2:	464b      	mov	r3, r9
 80034e4:	f04f 0000 	mov.w	r0, #0
 80034e8:	f04f 0100 	mov.w	r1, #0
 80034ec:	0159      	lsls	r1, r3, #5
 80034ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f2:	0150      	lsls	r0, r2, #5
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4641      	mov	r1, r8
 80034fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80034fe:	4649      	mov	r1, r9
 8003500:	eb63 0b01 	sbc.w	fp, r3, r1
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003510:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003514:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003518:	ebb2 040a 	subs.w	r4, r2, sl
 800351c:	eb63 050b 	sbc.w	r5, r3, fp
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	00eb      	lsls	r3, r5, #3
 800352a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800352e:	00e2      	lsls	r2, r4, #3
 8003530:	4614      	mov	r4, r2
 8003532:	461d      	mov	r5, r3
 8003534:	4643      	mov	r3, r8
 8003536:	18e3      	adds	r3, r4, r3
 8003538:	603b      	str	r3, [r7, #0]
 800353a:	464b      	mov	r3, r9
 800353c:	eb45 0303 	adc.w	r3, r5, r3
 8003540:	607b      	str	r3, [r7, #4]
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800354e:	4629      	mov	r1, r5
 8003550:	028b      	lsls	r3, r1, #10
 8003552:	4621      	mov	r1, r4
 8003554:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003558:	4621      	mov	r1, r4
 800355a:	028a      	lsls	r2, r1, #10
 800355c:	4610      	mov	r0, r2
 800355e:	4619      	mov	r1, r3
 8003560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003562:	2200      	movs	r2, #0
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	61fa      	str	r2, [r7, #28]
 8003568:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800356c:	f7fc fe88 	bl	8000280 <__aeabi_uldivmod>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4613      	mov	r3, r2
 8003576:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003578:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	0c1b      	lsrs	r3, r3, #16
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	3301      	adds	r3, #1
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003588:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800358a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800358c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003590:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003592:	e002      	b.n	800359a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <HAL_RCC_GetSysClockFreq+0x204>)
 8003596:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800359a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800359c:	4618      	mov	r0, r3
 800359e:	3750      	adds	r7, #80	; 0x50
 80035a0:	46bd      	mov	sp, r7
 80035a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035a6:	bf00      	nop
 80035a8:	40023800 	.word	0x40023800
 80035ac:	00f42400 	.word	0x00f42400
 80035b0:	007a1200 	.word	0x007a1200

080035b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035b8:	4b03      	ldr	r3, [pc, #12]	; (80035c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80035ba:	681b      	ldr	r3, [r3, #0]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	20000000 	.word	0x20000000

080035cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035d0:	f7ff fff0 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 80035d4:	4602      	mov	r2, r0
 80035d6:	4b05      	ldr	r3, [pc, #20]	; (80035ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	0a9b      	lsrs	r3, r3, #10
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	4903      	ldr	r1, [pc, #12]	; (80035f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035e2:	5ccb      	ldrb	r3, [r1, r3]
 80035e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40023800 	.word	0x40023800
 80035f0:	080057c0 	.word	0x080057c0

080035f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035f8:	f7ff ffdc 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 80035fc:	4602      	mov	r2, r0
 80035fe:	4b05      	ldr	r3, [pc, #20]	; (8003614 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	0b5b      	lsrs	r3, r3, #13
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	4903      	ldr	r1, [pc, #12]	; (8003618 <HAL_RCC_GetPCLK2Freq+0x24>)
 800360a:	5ccb      	ldrb	r3, [r1, r3]
 800360c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003610:	4618      	mov	r0, r3
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40023800 	.word	0x40023800
 8003618:	080057c0 	.word	0x080057c0

0800361c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e041      	b.n	80036b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7fd fbee 	bl	8000e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3304      	adds	r3, #4
 8003658:	4619      	mov	r1, r3
 800365a:	4610      	mov	r0, r2
 800365c:	f000 fbf0 	bl	8003e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e041      	b.n	8003750 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d106      	bne.n	80036e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f839 	bl	8003758 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2202      	movs	r2, #2
 80036ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3304      	adds	r3, #4
 80036f6:	4619      	mov	r1, r3
 80036f8:	4610      	mov	r0, r2
 80036fa:	f000 fba1 	bl	8003e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d109      	bne.n	8003790 <HAL_TIM_PWM_Start+0x24>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b01      	cmp	r3, #1
 8003786:	bf14      	ite	ne
 8003788:	2301      	movne	r3, #1
 800378a:	2300      	moveq	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	e022      	b.n	80037d6 <HAL_TIM_PWM_Start+0x6a>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	2b04      	cmp	r3, #4
 8003794:	d109      	bne.n	80037aa <HAL_TIM_PWM_Start+0x3e>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b01      	cmp	r3, #1
 80037a0:	bf14      	ite	ne
 80037a2:	2301      	movne	r3, #1
 80037a4:	2300      	moveq	r3, #0
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	e015      	b.n	80037d6 <HAL_TIM_PWM_Start+0x6a>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d109      	bne.n	80037c4 <HAL_TIM_PWM_Start+0x58>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	bf14      	ite	ne
 80037bc:	2301      	movne	r3, #1
 80037be:	2300      	moveq	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	e008      	b.n	80037d6 <HAL_TIM_PWM_Start+0x6a>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	bf14      	ite	ne
 80037d0:	2301      	movne	r3, #1
 80037d2:	2300      	moveq	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e068      	b.n	80038b0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d104      	bne.n	80037ee <HAL_TIM_PWM_Start+0x82>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037ec:	e013      	b.n	8003816 <HAL_TIM_PWM_Start+0xaa>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d104      	bne.n	80037fe <HAL_TIM_PWM_Start+0x92>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037fc:	e00b      	b.n	8003816 <HAL_TIM_PWM_Start+0xaa>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2b08      	cmp	r3, #8
 8003802:	d104      	bne.n	800380e <HAL_TIM_PWM_Start+0xa2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800380c:	e003      	b.n	8003816 <HAL_TIM_PWM_Start+0xaa>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2202      	movs	r2, #2
 8003812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2201      	movs	r2, #1
 800381c:	6839      	ldr	r1, [r7, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fdb4 	bl	800438c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a23      	ldr	r2, [pc, #140]	; (80038b8 <HAL_TIM_PWM_Start+0x14c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d107      	bne.n	800383e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800383c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a1d      	ldr	r2, [pc, #116]	; (80038b8 <HAL_TIM_PWM_Start+0x14c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d018      	beq.n	800387a <HAL_TIM_PWM_Start+0x10e>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003850:	d013      	beq.n	800387a <HAL_TIM_PWM_Start+0x10e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a19      	ldr	r2, [pc, #100]	; (80038bc <HAL_TIM_PWM_Start+0x150>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d00e      	beq.n	800387a <HAL_TIM_PWM_Start+0x10e>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a17      	ldr	r2, [pc, #92]	; (80038c0 <HAL_TIM_PWM_Start+0x154>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d009      	beq.n	800387a <HAL_TIM_PWM_Start+0x10e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a16      	ldr	r2, [pc, #88]	; (80038c4 <HAL_TIM_PWM_Start+0x158>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d004      	beq.n	800387a <HAL_TIM_PWM_Start+0x10e>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a14      	ldr	r2, [pc, #80]	; (80038c8 <HAL_TIM_PWM_Start+0x15c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d111      	bne.n	800389e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b06      	cmp	r3, #6
 800388a:	d010      	beq.n	80038ae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800389c:	e007      	b.n	80038ae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f042 0201 	orr.w	r2, r2, #1
 80038ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40010000 	.word	0x40010000
 80038bc:	40000400 	.word	0x40000400
 80038c0:	40000800 	.word	0x40000800
 80038c4:	40000c00 	.word	0x40000c00
 80038c8:	40014000 	.word	0x40014000

080038cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d122      	bne.n	8003928 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d11b      	bne.n	8003928 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f06f 0202 	mvn.w	r2, #2
 80038f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fa77 	bl	8003e02 <HAL_TIM_IC_CaptureCallback>
 8003914:	e005      	b.n	8003922 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fa69 	bl	8003dee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fa7a 	bl	8003e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	2b04      	cmp	r3, #4
 8003934:	d122      	bne.n	800397c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b04      	cmp	r3, #4
 8003942:	d11b      	bne.n	800397c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f06f 0204 	mvn.w	r2, #4
 800394c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2202      	movs	r2, #2
 8003952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 fa4d 	bl	8003e02 <HAL_TIM_IC_CaptureCallback>
 8003968:	e005      	b.n	8003976 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 fa3f 	bl	8003dee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 fa50 	bl	8003e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	2b08      	cmp	r3, #8
 8003988:	d122      	bne.n	80039d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b08      	cmp	r3, #8
 8003996:	d11b      	bne.n	80039d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f06f 0208 	mvn.w	r2, #8
 80039a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2204      	movs	r2, #4
 80039a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fa23 	bl	8003e02 <HAL_TIM_IC_CaptureCallback>
 80039bc:	e005      	b.n	80039ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fa15 	bl	8003dee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 fa26 	bl	8003e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	2b10      	cmp	r3, #16
 80039dc:	d122      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f003 0310 	and.w	r3, r3, #16
 80039e8:	2b10      	cmp	r3, #16
 80039ea:	d11b      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f06f 0210 	mvn.w	r2, #16
 80039f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2208      	movs	r2, #8
 80039fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f9f9 	bl	8003e02 <HAL_TIM_IC_CaptureCallback>
 8003a10:	e005      	b.n	8003a1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f9eb 	bl	8003dee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f9fc 	bl	8003e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d10e      	bne.n	8003a50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d107      	bne.n	8003a50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f06f 0201 	mvn.w	r2, #1
 8003a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fc fddc 	bl	8000608 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5a:	2b80      	cmp	r3, #128	; 0x80
 8003a5c:	d10e      	bne.n	8003a7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a68:	2b80      	cmp	r3, #128	; 0x80
 8003a6a:	d107      	bne.n	8003a7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fd78 	bl	800456c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a86:	2b40      	cmp	r3, #64	; 0x40
 8003a88:	d10e      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a94:	2b40      	cmp	r3, #64	; 0x40
 8003a96:	d107      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f9c1 	bl	8003e2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	2b20      	cmp	r3, #32
 8003ab4:	d10e      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f003 0320 	and.w	r3, r3, #32
 8003ac0:	2b20      	cmp	r3, #32
 8003ac2:	d107      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f06f 0220 	mvn.w	r2, #32
 8003acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fd42 	bl	8004558 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ad4:	bf00      	nop
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d101      	bne.n	8003afa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003af6:	2302      	movs	r3, #2
 8003af8:	e0ae      	b.n	8003c58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b0c      	cmp	r3, #12
 8003b06:	f200 809f 	bhi.w	8003c48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b0a:	a201      	add	r2, pc, #4	; (adr r2, 8003b10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b10:	08003b45 	.word	0x08003b45
 8003b14:	08003c49 	.word	0x08003c49
 8003b18:	08003c49 	.word	0x08003c49
 8003b1c:	08003c49 	.word	0x08003c49
 8003b20:	08003b85 	.word	0x08003b85
 8003b24:	08003c49 	.word	0x08003c49
 8003b28:	08003c49 	.word	0x08003c49
 8003b2c:	08003c49 	.word	0x08003c49
 8003b30:	08003bc7 	.word	0x08003bc7
 8003b34:	08003c49 	.word	0x08003c49
 8003b38:	08003c49 	.word	0x08003c49
 8003b3c:	08003c49 	.word	0x08003c49
 8003b40:	08003c07 	.word	0x08003c07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 f9f8 	bl	8003f40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699a      	ldr	r2, [r3, #24]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0208 	orr.w	r2, r2, #8
 8003b5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0204 	bic.w	r2, r2, #4
 8003b6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6999      	ldr	r1, [r3, #24]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	691a      	ldr	r2, [r3, #16]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	619a      	str	r2, [r3, #24]
      break;
 8003b82:	e064      	b.n	8003c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68b9      	ldr	r1, [r7, #8]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 fa3e 	bl	800400c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699a      	ldr	r2, [r3, #24]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699a      	ldr	r2, [r3, #24]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6999      	ldr	r1, [r3, #24]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	021a      	lsls	r2, r3, #8
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	619a      	str	r2, [r3, #24]
      break;
 8003bc4:	e043      	b.n	8003c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68b9      	ldr	r1, [r7, #8]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fa89 	bl	80040e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69da      	ldr	r2, [r3, #28]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f042 0208 	orr.w	r2, r2, #8
 8003be0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69da      	ldr	r2, [r3, #28]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0204 	bic.w	r2, r2, #4
 8003bf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69d9      	ldr	r1, [r3, #28]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	691a      	ldr	r2, [r3, #16]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	61da      	str	r2, [r3, #28]
      break;
 8003c04:	e023      	b.n	8003c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68b9      	ldr	r1, [r7, #8]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 fad3 	bl	80041b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69da      	ldr	r2, [r3, #28]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	69da      	ldr	r2, [r3, #28]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69d9      	ldr	r1, [r3, #28]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	021a      	lsls	r2, r3, #8
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	61da      	str	r2, [r3, #28]
      break;
 8003c46:	e002      	b.n	8003c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d101      	bne.n	8003c7c <HAL_TIM_ConfigClockSource+0x1c>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	e0b4      	b.n	8003de6 <HAL_TIM_ConfigClockSource+0x186>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2202      	movs	r2, #2
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ca2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cb4:	d03e      	beq.n	8003d34 <HAL_TIM_ConfigClockSource+0xd4>
 8003cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cba:	f200 8087 	bhi.w	8003dcc <HAL_TIM_ConfigClockSource+0x16c>
 8003cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc2:	f000 8086 	beq.w	8003dd2 <HAL_TIM_ConfigClockSource+0x172>
 8003cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cca:	d87f      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x16c>
 8003ccc:	2b70      	cmp	r3, #112	; 0x70
 8003cce:	d01a      	beq.n	8003d06 <HAL_TIM_ConfigClockSource+0xa6>
 8003cd0:	2b70      	cmp	r3, #112	; 0x70
 8003cd2:	d87b      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x16c>
 8003cd4:	2b60      	cmp	r3, #96	; 0x60
 8003cd6:	d050      	beq.n	8003d7a <HAL_TIM_ConfigClockSource+0x11a>
 8003cd8:	2b60      	cmp	r3, #96	; 0x60
 8003cda:	d877      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x16c>
 8003cdc:	2b50      	cmp	r3, #80	; 0x50
 8003cde:	d03c      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0xfa>
 8003ce0:	2b50      	cmp	r3, #80	; 0x50
 8003ce2:	d873      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x16c>
 8003ce4:	2b40      	cmp	r3, #64	; 0x40
 8003ce6:	d058      	beq.n	8003d9a <HAL_TIM_ConfigClockSource+0x13a>
 8003ce8:	2b40      	cmp	r3, #64	; 0x40
 8003cea:	d86f      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x16c>
 8003cec:	2b30      	cmp	r3, #48	; 0x30
 8003cee:	d064      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0x15a>
 8003cf0:	2b30      	cmp	r3, #48	; 0x30
 8003cf2:	d86b      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x16c>
 8003cf4:	2b20      	cmp	r3, #32
 8003cf6:	d060      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0x15a>
 8003cf8:	2b20      	cmp	r3, #32
 8003cfa:	d867      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x16c>
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d05c      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0x15a>
 8003d00:	2b10      	cmp	r3, #16
 8003d02:	d05a      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0x15a>
 8003d04:	e062      	b.n	8003dcc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6818      	ldr	r0, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	6899      	ldr	r1, [r3, #8]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f000 fb19 	bl	800434c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	609a      	str	r2, [r3, #8]
      break;
 8003d32:	e04f      	b.n	8003dd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6818      	ldr	r0, [r3, #0]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	6899      	ldr	r1, [r3, #8]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f000 fb02 	bl	800434c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d56:	609a      	str	r2, [r3, #8]
      break;
 8003d58:	e03c      	b.n	8003dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	6859      	ldr	r1, [r3, #4]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	461a      	mov	r2, r3
 8003d68:	f000 fa76 	bl	8004258 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2150      	movs	r1, #80	; 0x50
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 facf 	bl	8004316 <TIM_ITRx_SetConfig>
      break;
 8003d78:	e02c      	b.n	8003dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6818      	ldr	r0, [r3, #0]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	6859      	ldr	r1, [r3, #4]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	461a      	mov	r2, r3
 8003d88:	f000 fa95 	bl	80042b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2160      	movs	r1, #96	; 0x60
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fabf 	bl	8004316 <TIM_ITRx_SetConfig>
      break;
 8003d98:	e01c      	b.n	8003dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	6859      	ldr	r1, [r3, #4]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	461a      	mov	r2, r3
 8003da8:	f000 fa56 	bl	8004258 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2140      	movs	r1, #64	; 0x40
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 faaf 	bl	8004316 <TIM_ITRx_SetConfig>
      break;
 8003db8:	e00c      	b.n	8003dd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	f000 faa6 	bl	8004316 <TIM_ITRx_SetConfig>
      break;
 8003dca:	e003      	b.n	8003dd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd0:	e000      	b.n	8003dd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
	...

08003e40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a34      	ldr	r2, [pc, #208]	; (8003f24 <TIM_Base_SetConfig+0xe4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d00f      	beq.n	8003e78 <TIM_Base_SetConfig+0x38>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e5e:	d00b      	beq.n	8003e78 <TIM_Base_SetConfig+0x38>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a31      	ldr	r2, [pc, #196]	; (8003f28 <TIM_Base_SetConfig+0xe8>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d007      	beq.n	8003e78 <TIM_Base_SetConfig+0x38>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a30      	ldr	r2, [pc, #192]	; (8003f2c <TIM_Base_SetConfig+0xec>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d003      	beq.n	8003e78 <TIM_Base_SetConfig+0x38>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a2f      	ldr	r2, [pc, #188]	; (8003f30 <TIM_Base_SetConfig+0xf0>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d108      	bne.n	8003e8a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a25      	ldr	r2, [pc, #148]	; (8003f24 <TIM_Base_SetConfig+0xe4>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d01b      	beq.n	8003eca <TIM_Base_SetConfig+0x8a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e98:	d017      	beq.n	8003eca <TIM_Base_SetConfig+0x8a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a22      	ldr	r2, [pc, #136]	; (8003f28 <TIM_Base_SetConfig+0xe8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d013      	beq.n	8003eca <TIM_Base_SetConfig+0x8a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a21      	ldr	r2, [pc, #132]	; (8003f2c <TIM_Base_SetConfig+0xec>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00f      	beq.n	8003eca <TIM_Base_SetConfig+0x8a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a20      	ldr	r2, [pc, #128]	; (8003f30 <TIM_Base_SetConfig+0xf0>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00b      	beq.n	8003eca <TIM_Base_SetConfig+0x8a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a1f      	ldr	r2, [pc, #124]	; (8003f34 <TIM_Base_SetConfig+0xf4>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d007      	beq.n	8003eca <TIM_Base_SetConfig+0x8a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a1e      	ldr	r2, [pc, #120]	; (8003f38 <TIM_Base_SetConfig+0xf8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d003      	beq.n	8003eca <TIM_Base_SetConfig+0x8a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a1d      	ldr	r2, [pc, #116]	; (8003f3c <TIM_Base_SetConfig+0xfc>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d108      	bne.n	8003edc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a08      	ldr	r2, [pc, #32]	; (8003f24 <TIM_Base_SetConfig+0xe4>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d103      	bne.n	8003f10 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	615a      	str	r2, [r3, #20]
}
 8003f16:	bf00      	nop
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	40010000 	.word	0x40010000
 8003f28:	40000400 	.word	0x40000400
 8003f2c:	40000800 	.word	0x40000800
 8003f30:	40000c00 	.word	0x40000c00
 8003f34:	40014000 	.word	0x40014000
 8003f38:	40014400 	.word	0x40014400
 8003f3c:	40014800 	.word	0x40014800

08003f40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	f023 0201 	bic.w	r2, r3, #1
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f023 0303 	bic.w	r3, r3, #3
 8003f76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f023 0302 	bic.w	r3, r3, #2
 8003f88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a1c      	ldr	r2, [pc, #112]	; (8004008 <TIM_OC1_SetConfig+0xc8>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d10c      	bne.n	8003fb6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f023 0308 	bic.w	r3, r3, #8
 8003fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f023 0304 	bic.w	r3, r3, #4
 8003fb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a13      	ldr	r2, [pc, #76]	; (8004008 <TIM_OC1_SetConfig+0xc8>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d111      	bne.n	8003fe2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	621a      	str	r2, [r3, #32]
}
 8003ffc:	bf00      	nop
 8003ffe:	371c      	adds	r7, #28
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	40010000 	.word	0x40010000

0800400c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800400c:	b480      	push	{r7}
 800400e:	b087      	sub	sp, #28
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	f023 0210 	bic.w	r2, r3, #16
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800403a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	021b      	lsls	r3, r3, #8
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	4313      	orrs	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f023 0320 	bic.w	r3, r3, #32
 8004056:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	011b      	lsls	r3, r3, #4
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	4313      	orrs	r3, r2
 8004062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a1e      	ldr	r2, [pc, #120]	; (80040e0 <TIM_OC2_SetConfig+0xd4>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d10d      	bne.n	8004088 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	4313      	orrs	r3, r2
 800407e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004086:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a15      	ldr	r2, [pc, #84]	; (80040e0 <TIM_OC2_SetConfig+0xd4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d113      	bne.n	80040b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004096:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800409e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	621a      	str	r2, [r3, #32]
}
 80040d2:	bf00      	nop
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40010000 	.word	0x40010000

080040e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0303 	bic.w	r3, r3, #3
 800411a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800412c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	021b      	lsls	r3, r3, #8
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	4313      	orrs	r3, r2
 8004138:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a1d      	ldr	r2, [pc, #116]	; (80041b4 <TIM_OC3_SetConfig+0xd0>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d10d      	bne.n	800415e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004148:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	021b      	lsls	r3, r3, #8
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	4313      	orrs	r3, r2
 8004154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800415c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a14      	ldr	r2, [pc, #80]	; (80041b4 <TIM_OC3_SetConfig+0xd0>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d113      	bne.n	800418e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800416c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4313      	orrs	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	621a      	str	r2, [r3, #32]
}
 80041a8:	bf00      	nop
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	40010000 	.word	0x40010000

080041b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	021b      	lsls	r3, r3, #8
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004202:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	031b      	lsls	r3, r3, #12
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a10      	ldr	r2, [pc, #64]	; (8004254 <TIM_OC4_SetConfig+0x9c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d109      	bne.n	800422c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800421e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	019b      	lsls	r3, r3, #6
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	621a      	str	r2, [r3, #32]
}
 8004246:	bf00      	nop
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40010000 	.word	0x40010000

08004258 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	f023 0201 	bic.w	r2, r3, #1
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	4313      	orrs	r3, r2
 800428c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f023 030a 	bic.w	r3, r3, #10
 8004294:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	621a      	str	r2, [r3, #32]
}
 80042aa:	bf00      	nop
 80042ac:	371c      	adds	r7, #28
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b087      	sub	sp, #28
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	60f8      	str	r0, [r7, #12]
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	f023 0210 	bic.w	r2, r3, #16
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	031b      	lsls	r3, r3, #12
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	011b      	lsls	r3, r3, #4
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	621a      	str	r2, [r3, #32]
}
 800430a:	bf00      	nop
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004316:	b480      	push	{r7}
 8004318:	b085      	sub	sp, #20
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4313      	orrs	r3, r2
 8004334:	f043 0307 	orr.w	r3, r3, #7
 8004338:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	609a      	str	r2, [r3, #8]
}
 8004340:	bf00      	nop
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
 8004358:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004366:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	021a      	lsls	r2, r3, #8
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	431a      	orrs	r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4313      	orrs	r3, r2
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	609a      	str	r2, [r3, #8]
}
 8004380:	bf00      	nop
 8004382:	371c      	adds	r7, #28
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800438c:	b480      	push	{r7}
 800438e:	b087      	sub	sp, #28
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f003 031f 	and.w	r3, r3, #31
 800439e:	2201      	movs	r2, #1
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6a1a      	ldr	r2, [r3, #32]
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	43db      	mvns	r3, r3
 80043ae:	401a      	ands	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6a1a      	ldr	r2, [r3, #32]
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	f003 031f 	and.w	r3, r3, #31
 80043be:	6879      	ldr	r1, [r7, #4]
 80043c0:	fa01 f303 	lsl.w	r3, r1, r3
 80043c4:	431a      	orrs	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	621a      	str	r2, [r3, #32]
}
 80043ca:	bf00      	nop
 80043cc:	371c      	adds	r7, #28
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
	...

080043d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d101      	bne.n	80043f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043ec:	2302      	movs	r3, #2
 80043ee:	e050      	b.n	8004492 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004416:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	4313      	orrs	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a1c      	ldr	r2, [pc, #112]	; (80044a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d018      	beq.n	8004466 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800443c:	d013      	beq.n	8004466 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a18      	ldr	r2, [pc, #96]	; (80044a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d00e      	beq.n	8004466 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a16      	ldr	r2, [pc, #88]	; (80044a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d009      	beq.n	8004466 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a15      	ldr	r2, [pc, #84]	; (80044ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d004      	beq.n	8004466 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a13      	ldr	r2, [pc, #76]	; (80044b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d10c      	bne.n	8004480 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800446c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	4313      	orrs	r3, r2
 8004476:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40010000 	.word	0x40010000
 80044a4:	40000400 	.word	0x40000400
 80044a8:	40000800 	.word	0x40000800
 80044ac:	40000c00 	.word	0x40000c00
 80044b0:	40014000 	.word	0x40014000

080044b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80044be:	2300      	movs	r3, #0
 80044c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80044cc:	2302      	movs	r3, #2
 80044ce:	e03d      	b.n	800454c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4313      	orrs	r3, r2
 800450e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	4313      	orrs	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	4313      	orrs	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e03f      	b.n	8004612 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d106      	bne.n	80045ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fc fcf2 	bl	8000f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2224      	movs	r2, #36	; 0x24
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f929 	bl	800481c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	691a      	ldr	r2, [r3, #16]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695a      	ldr	r2, [r3, #20]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2220      	movs	r2, #32
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2220      	movs	r2, #32
 800460c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b08a      	sub	sp, #40	; 0x28
 800461e:	af02      	add	r7, sp, #8
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	603b      	str	r3, [r7, #0]
 8004626:	4613      	mov	r3, r2
 8004628:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b20      	cmp	r3, #32
 8004638:	d17c      	bne.n	8004734 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <HAL_UART_Transmit+0x2c>
 8004640:	88fb      	ldrh	r3, [r7, #6]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e075      	b.n	8004736 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <HAL_UART_Transmit+0x3e>
 8004654:	2302      	movs	r3, #2
 8004656:	e06e      	b.n	8004736 <HAL_UART_Transmit+0x11c>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2221      	movs	r2, #33	; 0x21
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800466e:	f7fd fca3 	bl	8001fb8 <HAL_GetTick>
 8004672:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	88fa      	ldrh	r2, [r7, #6]
 8004678:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	88fa      	ldrh	r2, [r7, #6]
 800467e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004688:	d108      	bne.n	800469c <HAL_UART_Transmit+0x82>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d104      	bne.n	800469c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004692:	2300      	movs	r3, #0
 8004694:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	61bb      	str	r3, [r7, #24]
 800469a:	e003      	b.n	80046a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046a0:	2300      	movs	r3, #0
 80046a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80046ac:	e02a      	b.n	8004704 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2200      	movs	r2, #0
 80046b6:	2180      	movs	r1, #128	; 0x80
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 f840 	bl	800473e <UART_WaitOnFlagUntilTimeout>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e036      	b.n	8004736 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10b      	bne.n	80046e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	461a      	mov	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	3302      	adds	r3, #2
 80046e2:	61bb      	str	r3, [r7, #24]
 80046e4:	e007      	b.n	80046f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	781a      	ldrb	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	3301      	adds	r3, #1
 80046f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004708:	b29b      	uxth	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1cf      	bne.n	80046ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	2200      	movs	r2, #0
 8004716:	2140      	movs	r1, #64	; 0x40
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 f810 	bl	800473e <UART_WaitOnFlagUntilTimeout>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e006      	b.n	8004736 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004730:	2300      	movs	r3, #0
 8004732:	e000      	b.n	8004736 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004734:	2302      	movs	r3, #2
  }
}
 8004736:	4618      	mov	r0, r3
 8004738:	3720      	adds	r7, #32
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b090      	sub	sp, #64	; 0x40
 8004742:	af00      	add	r7, sp, #0
 8004744:	60f8      	str	r0, [r7, #12]
 8004746:	60b9      	str	r1, [r7, #8]
 8004748:	603b      	str	r3, [r7, #0]
 800474a:	4613      	mov	r3, r2
 800474c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800474e:	e050      	b.n	80047f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004756:	d04c      	beq.n	80047f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800475a:	2b00      	cmp	r3, #0
 800475c:	d007      	beq.n	800476e <UART_WaitOnFlagUntilTimeout+0x30>
 800475e:	f7fd fc2b 	bl	8001fb8 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800476a:	429a      	cmp	r2, r3
 800476c:	d241      	bcs.n	80047f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	330c      	adds	r3, #12
 8004774:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004778:	e853 3f00 	ldrex	r3, [r3]
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004784:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	330c      	adds	r3, #12
 800478c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800478e:	637a      	str	r2, [r7, #52]	; 0x34
 8004790:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004792:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004794:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004796:	e841 2300 	strex	r3, r2, [r1]
 800479a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800479c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1e5      	bne.n	800476e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3314      	adds	r3, #20
 80047a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	e853 3f00 	ldrex	r3, [r3]
 80047b0:	613b      	str	r3, [r7, #16]
   return(result);
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	f023 0301 	bic.w	r3, r3, #1
 80047b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	3314      	adds	r3, #20
 80047c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047c2:	623a      	str	r2, [r7, #32]
 80047c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c6:	69f9      	ldr	r1, [r7, #28]
 80047c8:	6a3a      	ldr	r2, [r7, #32]
 80047ca:	e841 2300 	strex	r3, r2, [r1]
 80047ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1e5      	bne.n	80047a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2220      	movs	r2, #32
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2220      	movs	r2, #32
 80047e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e00f      	b.n	8004812 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	4013      	ands	r3, r2
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	429a      	cmp	r2, r3
 8004800:	bf0c      	ite	eq
 8004802:	2301      	moveq	r3, #1
 8004804:	2300      	movne	r3, #0
 8004806:	b2db      	uxtb	r3, r3
 8004808:	461a      	mov	r2, r3
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	429a      	cmp	r2, r3
 800480e:	d09f      	beq.n	8004750 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3740      	adds	r7, #64	; 0x40
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800481c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004820:	b0c0      	sub	sp, #256	; 0x100
 8004822:	af00      	add	r7, sp, #0
 8004824:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004838:	68d9      	ldr	r1, [r3, #12]
 800483a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	ea40 0301 	orr.w	r3, r0, r1
 8004844:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	431a      	orrs	r2, r3
 8004854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	431a      	orrs	r2, r3
 800485c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	4313      	orrs	r3, r2
 8004864:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004874:	f021 010c 	bic.w	r1, r1, #12
 8004878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004882:	430b      	orrs	r3, r1
 8004884:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004896:	6999      	ldr	r1, [r3, #24]
 8004898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	ea40 0301 	orr.w	r3, r0, r1
 80048a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	4b8f      	ldr	r3, [pc, #572]	; (8004ae8 <UART_SetConfig+0x2cc>)
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d005      	beq.n	80048bc <UART_SetConfig+0xa0>
 80048b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	4b8d      	ldr	r3, [pc, #564]	; (8004aec <UART_SetConfig+0x2d0>)
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d104      	bne.n	80048c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048bc:	f7fe fe9a 	bl	80035f4 <HAL_RCC_GetPCLK2Freq>
 80048c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80048c4:	e003      	b.n	80048ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048c6:	f7fe fe81 	bl	80035cc <HAL_RCC_GetPCLK1Freq>
 80048ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048d8:	f040 810c 	bne.w	8004af4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048e0:	2200      	movs	r2, #0
 80048e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80048ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80048ee:	4622      	mov	r2, r4
 80048f0:	462b      	mov	r3, r5
 80048f2:	1891      	adds	r1, r2, r2
 80048f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80048f6:	415b      	adcs	r3, r3
 80048f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048fe:	4621      	mov	r1, r4
 8004900:	eb12 0801 	adds.w	r8, r2, r1
 8004904:	4629      	mov	r1, r5
 8004906:	eb43 0901 	adc.w	r9, r3, r1
 800490a:	f04f 0200 	mov.w	r2, #0
 800490e:	f04f 0300 	mov.w	r3, #0
 8004912:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004916:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800491a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800491e:	4690      	mov	r8, r2
 8004920:	4699      	mov	r9, r3
 8004922:	4623      	mov	r3, r4
 8004924:	eb18 0303 	adds.w	r3, r8, r3
 8004928:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800492c:	462b      	mov	r3, r5
 800492e:	eb49 0303 	adc.w	r3, r9, r3
 8004932:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004942:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004946:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800494a:	460b      	mov	r3, r1
 800494c:	18db      	adds	r3, r3, r3
 800494e:	653b      	str	r3, [r7, #80]	; 0x50
 8004950:	4613      	mov	r3, r2
 8004952:	eb42 0303 	adc.w	r3, r2, r3
 8004956:	657b      	str	r3, [r7, #84]	; 0x54
 8004958:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800495c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004960:	f7fb fc8e 	bl	8000280 <__aeabi_uldivmod>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4b61      	ldr	r3, [pc, #388]	; (8004af0 <UART_SetConfig+0x2d4>)
 800496a:	fba3 2302 	umull	r2, r3, r3, r2
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	011c      	lsls	r4, r3, #4
 8004972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004976:	2200      	movs	r2, #0
 8004978:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800497c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004980:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004984:	4642      	mov	r2, r8
 8004986:	464b      	mov	r3, r9
 8004988:	1891      	adds	r1, r2, r2
 800498a:	64b9      	str	r1, [r7, #72]	; 0x48
 800498c:	415b      	adcs	r3, r3
 800498e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004990:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004994:	4641      	mov	r1, r8
 8004996:	eb12 0a01 	adds.w	sl, r2, r1
 800499a:	4649      	mov	r1, r9
 800499c:	eb43 0b01 	adc.w	fp, r3, r1
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	f04f 0300 	mov.w	r3, #0
 80049a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049b4:	4692      	mov	sl, r2
 80049b6:	469b      	mov	fp, r3
 80049b8:	4643      	mov	r3, r8
 80049ba:	eb1a 0303 	adds.w	r3, sl, r3
 80049be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049c2:	464b      	mov	r3, r9
 80049c4:	eb4b 0303 	adc.w	r3, fp, r3
 80049c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80049dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80049e0:	460b      	mov	r3, r1
 80049e2:	18db      	adds	r3, r3, r3
 80049e4:	643b      	str	r3, [r7, #64]	; 0x40
 80049e6:	4613      	mov	r3, r2
 80049e8:	eb42 0303 	adc.w	r3, r2, r3
 80049ec:	647b      	str	r3, [r7, #68]	; 0x44
 80049ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80049f6:	f7fb fc43 	bl	8000280 <__aeabi_uldivmod>
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	4611      	mov	r1, r2
 8004a00:	4b3b      	ldr	r3, [pc, #236]	; (8004af0 <UART_SetConfig+0x2d4>)
 8004a02:	fba3 2301 	umull	r2, r3, r3, r1
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	2264      	movs	r2, #100	; 0x64
 8004a0a:	fb02 f303 	mul.w	r3, r2, r3
 8004a0e:	1acb      	subs	r3, r1, r3
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a16:	4b36      	ldr	r3, [pc, #216]	; (8004af0 <UART_SetConfig+0x2d4>)
 8004a18:	fba3 2302 	umull	r2, r3, r3, r2
 8004a1c:	095b      	lsrs	r3, r3, #5
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a24:	441c      	add	r4, r3
 8004a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a38:	4642      	mov	r2, r8
 8004a3a:	464b      	mov	r3, r9
 8004a3c:	1891      	adds	r1, r2, r2
 8004a3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a40:	415b      	adcs	r3, r3
 8004a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a48:	4641      	mov	r1, r8
 8004a4a:	1851      	adds	r1, r2, r1
 8004a4c:	6339      	str	r1, [r7, #48]	; 0x30
 8004a4e:	4649      	mov	r1, r9
 8004a50:	414b      	adcs	r3, r1
 8004a52:	637b      	str	r3, [r7, #52]	; 0x34
 8004a54:	f04f 0200 	mov.w	r2, #0
 8004a58:	f04f 0300 	mov.w	r3, #0
 8004a5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a60:	4659      	mov	r1, fp
 8004a62:	00cb      	lsls	r3, r1, #3
 8004a64:	4651      	mov	r1, sl
 8004a66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a6a:	4651      	mov	r1, sl
 8004a6c:	00ca      	lsls	r2, r1, #3
 8004a6e:	4610      	mov	r0, r2
 8004a70:	4619      	mov	r1, r3
 8004a72:	4603      	mov	r3, r0
 8004a74:	4642      	mov	r2, r8
 8004a76:	189b      	adds	r3, r3, r2
 8004a78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a7c:	464b      	mov	r3, r9
 8004a7e:	460a      	mov	r2, r1
 8004a80:	eb42 0303 	adc.w	r3, r2, r3
 8004a84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	18db      	adds	r3, r3, r3
 8004aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	eb42 0303 	adc.w	r3, r2, r3
 8004aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004aae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ab2:	f7fb fbe5 	bl	8000280 <__aeabi_uldivmod>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4b0d      	ldr	r3, [pc, #52]	; (8004af0 <UART_SetConfig+0x2d4>)
 8004abc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ac0:	095b      	lsrs	r3, r3, #5
 8004ac2:	2164      	movs	r1, #100	; 0x64
 8004ac4:	fb01 f303 	mul.w	r3, r1, r3
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	3332      	adds	r3, #50	; 0x32
 8004ace:	4a08      	ldr	r2, [pc, #32]	; (8004af0 <UART_SetConfig+0x2d4>)
 8004ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad4:	095b      	lsrs	r3, r3, #5
 8004ad6:	f003 0207 	and.w	r2, r3, #7
 8004ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4422      	add	r2, r4
 8004ae2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ae4:	e105      	b.n	8004cf2 <UART_SetConfig+0x4d6>
 8004ae6:	bf00      	nop
 8004ae8:	40011000 	.word	0x40011000
 8004aec:	40011400 	.word	0x40011400
 8004af0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004af4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004af8:	2200      	movs	r2, #0
 8004afa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004afe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b06:	4642      	mov	r2, r8
 8004b08:	464b      	mov	r3, r9
 8004b0a:	1891      	adds	r1, r2, r2
 8004b0c:	6239      	str	r1, [r7, #32]
 8004b0e:	415b      	adcs	r3, r3
 8004b10:	627b      	str	r3, [r7, #36]	; 0x24
 8004b12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b16:	4641      	mov	r1, r8
 8004b18:	1854      	adds	r4, r2, r1
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	eb43 0501 	adc.w	r5, r3, r1
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	00eb      	lsls	r3, r5, #3
 8004b2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b2e:	00e2      	lsls	r2, r4, #3
 8004b30:	4614      	mov	r4, r2
 8004b32:	461d      	mov	r5, r3
 8004b34:	4643      	mov	r3, r8
 8004b36:	18e3      	adds	r3, r4, r3
 8004b38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b3c:	464b      	mov	r3, r9
 8004b3e:	eb45 0303 	adc.w	r3, r5, r3
 8004b42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b56:	f04f 0200 	mov.w	r2, #0
 8004b5a:	f04f 0300 	mov.w	r3, #0
 8004b5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b62:	4629      	mov	r1, r5
 8004b64:	008b      	lsls	r3, r1, #2
 8004b66:	4621      	mov	r1, r4
 8004b68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b6c:	4621      	mov	r1, r4
 8004b6e:	008a      	lsls	r2, r1, #2
 8004b70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b74:	f7fb fb84 	bl	8000280 <__aeabi_uldivmod>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4b60      	ldr	r3, [pc, #384]	; (8004d00 <UART_SetConfig+0x4e4>)
 8004b7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b82:	095b      	lsrs	r3, r3, #5
 8004b84:	011c      	lsls	r4, r3, #4
 8004b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b98:	4642      	mov	r2, r8
 8004b9a:	464b      	mov	r3, r9
 8004b9c:	1891      	adds	r1, r2, r2
 8004b9e:	61b9      	str	r1, [r7, #24]
 8004ba0:	415b      	adcs	r3, r3
 8004ba2:	61fb      	str	r3, [r7, #28]
 8004ba4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ba8:	4641      	mov	r1, r8
 8004baa:	1851      	adds	r1, r2, r1
 8004bac:	6139      	str	r1, [r7, #16]
 8004bae:	4649      	mov	r1, r9
 8004bb0:	414b      	adcs	r3, r1
 8004bb2:	617b      	str	r3, [r7, #20]
 8004bb4:	f04f 0200 	mov.w	r2, #0
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bc0:	4659      	mov	r1, fp
 8004bc2:	00cb      	lsls	r3, r1, #3
 8004bc4:	4651      	mov	r1, sl
 8004bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bca:	4651      	mov	r1, sl
 8004bcc:	00ca      	lsls	r2, r1, #3
 8004bce:	4610      	mov	r0, r2
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	4642      	mov	r2, r8
 8004bd6:	189b      	adds	r3, r3, r2
 8004bd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bdc:	464b      	mov	r3, r9
 8004bde:	460a      	mov	r2, r1
 8004be0:	eb42 0303 	adc.w	r3, r2, r3
 8004be4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bf2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c00:	4649      	mov	r1, r9
 8004c02:	008b      	lsls	r3, r1, #2
 8004c04:	4641      	mov	r1, r8
 8004c06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c0a:	4641      	mov	r1, r8
 8004c0c:	008a      	lsls	r2, r1, #2
 8004c0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c12:	f7fb fb35 	bl	8000280 <__aeabi_uldivmod>
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4b39      	ldr	r3, [pc, #228]	; (8004d00 <UART_SetConfig+0x4e4>)
 8004c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c20:	095b      	lsrs	r3, r3, #5
 8004c22:	2164      	movs	r1, #100	; 0x64
 8004c24:	fb01 f303 	mul.w	r3, r1, r3
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	011b      	lsls	r3, r3, #4
 8004c2c:	3332      	adds	r3, #50	; 0x32
 8004c2e:	4a34      	ldr	r2, [pc, #208]	; (8004d00 <UART_SetConfig+0x4e4>)
 8004c30:	fba2 2303 	umull	r2, r3, r2, r3
 8004c34:	095b      	lsrs	r3, r3, #5
 8004c36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c3a:	441c      	add	r4, r3
 8004c3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c40:	2200      	movs	r2, #0
 8004c42:	673b      	str	r3, [r7, #112]	; 0x70
 8004c44:	677a      	str	r2, [r7, #116]	; 0x74
 8004c46:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c4a:	4642      	mov	r2, r8
 8004c4c:	464b      	mov	r3, r9
 8004c4e:	1891      	adds	r1, r2, r2
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	415b      	adcs	r3, r3
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c5a:	4641      	mov	r1, r8
 8004c5c:	1851      	adds	r1, r2, r1
 8004c5e:	6039      	str	r1, [r7, #0]
 8004c60:	4649      	mov	r1, r9
 8004c62:	414b      	adcs	r3, r1
 8004c64:	607b      	str	r3, [r7, #4]
 8004c66:	f04f 0200 	mov.w	r2, #0
 8004c6a:	f04f 0300 	mov.w	r3, #0
 8004c6e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c72:	4659      	mov	r1, fp
 8004c74:	00cb      	lsls	r3, r1, #3
 8004c76:	4651      	mov	r1, sl
 8004c78:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c7c:	4651      	mov	r1, sl
 8004c7e:	00ca      	lsls	r2, r1, #3
 8004c80:	4610      	mov	r0, r2
 8004c82:	4619      	mov	r1, r3
 8004c84:	4603      	mov	r3, r0
 8004c86:	4642      	mov	r2, r8
 8004c88:	189b      	adds	r3, r3, r2
 8004c8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c8c:	464b      	mov	r3, r9
 8004c8e:	460a      	mov	r2, r1
 8004c90:	eb42 0303 	adc.w	r3, r2, r3
 8004c94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	663b      	str	r3, [r7, #96]	; 0x60
 8004ca0:	667a      	str	r2, [r7, #100]	; 0x64
 8004ca2:	f04f 0200 	mov.w	r2, #0
 8004ca6:	f04f 0300 	mov.w	r3, #0
 8004caa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004cae:	4649      	mov	r1, r9
 8004cb0:	008b      	lsls	r3, r1, #2
 8004cb2:	4641      	mov	r1, r8
 8004cb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cb8:	4641      	mov	r1, r8
 8004cba:	008a      	lsls	r2, r1, #2
 8004cbc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004cc0:	f7fb fade 	bl	8000280 <__aeabi_uldivmod>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	4b0d      	ldr	r3, [pc, #52]	; (8004d00 <UART_SetConfig+0x4e4>)
 8004cca:	fba3 1302 	umull	r1, r3, r3, r2
 8004cce:	095b      	lsrs	r3, r3, #5
 8004cd0:	2164      	movs	r1, #100	; 0x64
 8004cd2:	fb01 f303 	mul.w	r3, r1, r3
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	3332      	adds	r3, #50	; 0x32
 8004cdc:	4a08      	ldr	r2, [pc, #32]	; (8004d00 <UART_SetConfig+0x4e4>)
 8004cde:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce2:	095b      	lsrs	r3, r3, #5
 8004ce4:	f003 020f 	and.w	r2, r3, #15
 8004ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4422      	add	r2, r4
 8004cf0:	609a      	str	r2, [r3, #8]
}
 8004cf2:	bf00      	nop
 8004cf4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cfe:	bf00      	nop
 8004d00:	51eb851f 	.word	0x51eb851f

08004d04 <__errno>:
 8004d04:	4b01      	ldr	r3, [pc, #4]	; (8004d0c <__errno+0x8>)
 8004d06:	6818      	ldr	r0, [r3, #0]
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	2000000c 	.word	0x2000000c

08004d10 <__libc_init_array>:
 8004d10:	b570      	push	{r4, r5, r6, lr}
 8004d12:	4d0d      	ldr	r5, [pc, #52]	; (8004d48 <__libc_init_array+0x38>)
 8004d14:	4c0d      	ldr	r4, [pc, #52]	; (8004d4c <__libc_init_array+0x3c>)
 8004d16:	1b64      	subs	r4, r4, r5
 8004d18:	10a4      	asrs	r4, r4, #2
 8004d1a:	2600      	movs	r6, #0
 8004d1c:	42a6      	cmp	r6, r4
 8004d1e:	d109      	bne.n	8004d34 <__libc_init_array+0x24>
 8004d20:	4d0b      	ldr	r5, [pc, #44]	; (8004d50 <__libc_init_array+0x40>)
 8004d22:	4c0c      	ldr	r4, [pc, #48]	; (8004d54 <__libc_init_array+0x44>)
 8004d24:	f000 fc8e 	bl	8005644 <_init>
 8004d28:	1b64      	subs	r4, r4, r5
 8004d2a:	10a4      	asrs	r4, r4, #2
 8004d2c:	2600      	movs	r6, #0
 8004d2e:	42a6      	cmp	r6, r4
 8004d30:	d105      	bne.n	8004d3e <__libc_init_array+0x2e>
 8004d32:	bd70      	pop	{r4, r5, r6, pc}
 8004d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d38:	4798      	blx	r3
 8004d3a:	3601      	adds	r6, #1
 8004d3c:	e7ee      	b.n	8004d1c <__libc_init_array+0xc>
 8004d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d42:	4798      	blx	r3
 8004d44:	3601      	adds	r6, #1
 8004d46:	e7f2      	b.n	8004d2e <__libc_init_array+0x1e>
 8004d48:	08005ad4 	.word	0x08005ad4
 8004d4c:	08005ad4 	.word	0x08005ad4
 8004d50:	08005ad4 	.word	0x08005ad4
 8004d54:	08005ad8 	.word	0x08005ad8

08004d58 <memset>:
 8004d58:	4402      	add	r2, r0
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d100      	bne.n	8004d62 <memset+0xa>
 8004d60:	4770      	bx	lr
 8004d62:	f803 1b01 	strb.w	r1, [r3], #1
 8004d66:	e7f9      	b.n	8004d5c <memset+0x4>

08004d68 <siprintf>:
 8004d68:	b40e      	push	{r1, r2, r3}
 8004d6a:	b500      	push	{lr}
 8004d6c:	b09c      	sub	sp, #112	; 0x70
 8004d6e:	ab1d      	add	r3, sp, #116	; 0x74
 8004d70:	9002      	str	r0, [sp, #8]
 8004d72:	9006      	str	r0, [sp, #24]
 8004d74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d78:	4809      	ldr	r0, [pc, #36]	; (8004da0 <siprintf+0x38>)
 8004d7a:	9107      	str	r1, [sp, #28]
 8004d7c:	9104      	str	r1, [sp, #16]
 8004d7e:	4909      	ldr	r1, [pc, #36]	; (8004da4 <siprintf+0x3c>)
 8004d80:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d84:	9105      	str	r1, [sp, #20]
 8004d86:	6800      	ldr	r0, [r0, #0]
 8004d88:	9301      	str	r3, [sp, #4]
 8004d8a:	a902      	add	r1, sp, #8
 8004d8c:	f000 f868 	bl	8004e60 <_svfiprintf_r>
 8004d90:	9b02      	ldr	r3, [sp, #8]
 8004d92:	2200      	movs	r2, #0
 8004d94:	701a      	strb	r2, [r3, #0]
 8004d96:	b01c      	add	sp, #112	; 0x70
 8004d98:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d9c:	b003      	add	sp, #12
 8004d9e:	4770      	bx	lr
 8004da0:	2000000c 	.word	0x2000000c
 8004da4:	ffff0208 	.word	0xffff0208

08004da8 <__ssputs_r>:
 8004da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dac:	688e      	ldr	r6, [r1, #8]
 8004dae:	429e      	cmp	r6, r3
 8004db0:	4682      	mov	sl, r0
 8004db2:	460c      	mov	r4, r1
 8004db4:	4690      	mov	r8, r2
 8004db6:	461f      	mov	r7, r3
 8004db8:	d838      	bhi.n	8004e2c <__ssputs_r+0x84>
 8004dba:	898a      	ldrh	r2, [r1, #12]
 8004dbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004dc0:	d032      	beq.n	8004e28 <__ssputs_r+0x80>
 8004dc2:	6825      	ldr	r5, [r4, #0]
 8004dc4:	6909      	ldr	r1, [r1, #16]
 8004dc6:	eba5 0901 	sub.w	r9, r5, r1
 8004dca:	6965      	ldr	r5, [r4, #20]
 8004dcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004dd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	444b      	add	r3, r9
 8004dd8:	106d      	asrs	r5, r5, #1
 8004dda:	429d      	cmp	r5, r3
 8004ddc:	bf38      	it	cc
 8004dde:	461d      	movcc	r5, r3
 8004de0:	0553      	lsls	r3, r2, #21
 8004de2:	d531      	bpl.n	8004e48 <__ssputs_r+0xa0>
 8004de4:	4629      	mov	r1, r5
 8004de6:	f000 fb63 	bl	80054b0 <_malloc_r>
 8004dea:	4606      	mov	r6, r0
 8004dec:	b950      	cbnz	r0, 8004e04 <__ssputs_r+0x5c>
 8004dee:	230c      	movs	r3, #12
 8004df0:	f8ca 3000 	str.w	r3, [sl]
 8004df4:	89a3      	ldrh	r3, [r4, #12]
 8004df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dfa:	81a3      	strh	r3, [r4, #12]
 8004dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8004e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e04:	6921      	ldr	r1, [r4, #16]
 8004e06:	464a      	mov	r2, r9
 8004e08:	f000 fabe 	bl	8005388 <memcpy>
 8004e0c:	89a3      	ldrh	r3, [r4, #12]
 8004e0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e16:	81a3      	strh	r3, [r4, #12]
 8004e18:	6126      	str	r6, [r4, #16]
 8004e1a:	6165      	str	r5, [r4, #20]
 8004e1c:	444e      	add	r6, r9
 8004e1e:	eba5 0509 	sub.w	r5, r5, r9
 8004e22:	6026      	str	r6, [r4, #0]
 8004e24:	60a5      	str	r5, [r4, #8]
 8004e26:	463e      	mov	r6, r7
 8004e28:	42be      	cmp	r6, r7
 8004e2a:	d900      	bls.n	8004e2e <__ssputs_r+0x86>
 8004e2c:	463e      	mov	r6, r7
 8004e2e:	6820      	ldr	r0, [r4, #0]
 8004e30:	4632      	mov	r2, r6
 8004e32:	4641      	mov	r1, r8
 8004e34:	f000 fab6 	bl	80053a4 <memmove>
 8004e38:	68a3      	ldr	r3, [r4, #8]
 8004e3a:	1b9b      	subs	r3, r3, r6
 8004e3c:	60a3      	str	r3, [r4, #8]
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	4433      	add	r3, r6
 8004e42:	6023      	str	r3, [r4, #0]
 8004e44:	2000      	movs	r0, #0
 8004e46:	e7db      	b.n	8004e00 <__ssputs_r+0x58>
 8004e48:	462a      	mov	r2, r5
 8004e4a:	f000 fba5 	bl	8005598 <_realloc_r>
 8004e4e:	4606      	mov	r6, r0
 8004e50:	2800      	cmp	r0, #0
 8004e52:	d1e1      	bne.n	8004e18 <__ssputs_r+0x70>
 8004e54:	6921      	ldr	r1, [r4, #16]
 8004e56:	4650      	mov	r0, sl
 8004e58:	f000 fabe 	bl	80053d8 <_free_r>
 8004e5c:	e7c7      	b.n	8004dee <__ssputs_r+0x46>
	...

08004e60 <_svfiprintf_r>:
 8004e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e64:	4698      	mov	r8, r3
 8004e66:	898b      	ldrh	r3, [r1, #12]
 8004e68:	061b      	lsls	r3, r3, #24
 8004e6a:	b09d      	sub	sp, #116	; 0x74
 8004e6c:	4607      	mov	r7, r0
 8004e6e:	460d      	mov	r5, r1
 8004e70:	4614      	mov	r4, r2
 8004e72:	d50e      	bpl.n	8004e92 <_svfiprintf_r+0x32>
 8004e74:	690b      	ldr	r3, [r1, #16]
 8004e76:	b963      	cbnz	r3, 8004e92 <_svfiprintf_r+0x32>
 8004e78:	2140      	movs	r1, #64	; 0x40
 8004e7a:	f000 fb19 	bl	80054b0 <_malloc_r>
 8004e7e:	6028      	str	r0, [r5, #0]
 8004e80:	6128      	str	r0, [r5, #16]
 8004e82:	b920      	cbnz	r0, 8004e8e <_svfiprintf_r+0x2e>
 8004e84:	230c      	movs	r3, #12
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	f04f 30ff 	mov.w	r0, #4294967295
 8004e8c:	e0d1      	b.n	8005032 <_svfiprintf_r+0x1d2>
 8004e8e:	2340      	movs	r3, #64	; 0x40
 8004e90:	616b      	str	r3, [r5, #20]
 8004e92:	2300      	movs	r3, #0
 8004e94:	9309      	str	r3, [sp, #36]	; 0x24
 8004e96:	2320      	movs	r3, #32
 8004e98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ea0:	2330      	movs	r3, #48	; 0x30
 8004ea2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800504c <_svfiprintf_r+0x1ec>
 8004ea6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004eaa:	f04f 0901 	mov.w	r9, #1
 8004eae:	4623      	mov	r3, r4
 8004eb0:	469a      	mov	sl, r3
 8004eb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004eb6:	b10a      	cbz	r2, 8004ebc <_svfiprintf_r+0x5c>
 8004eb8:	2a25      	cmp	r2, #37	; 0x25
 8004eba:	d1f9      	bne.n	8004eb0 <_svfiprintf_r+0x50>
 8004ebc:	ebba 0b04 	subs.w	fp, sl, r4
 8004ec0:	d00b      	beq.n	8004eda <_svfiprintf_r+0x7a>
 8004ec2:	465b      	mov	r3, fp
 8004ec4:	4622      	mov	r2, r4
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	4638      	mov	r0, r7
 8004eca:	f7ff ff6d 	bl	8004da8 <__ssputs_r>
 8004ece:	3001      	adds	r0, #1
 8004ed0:	f000 80aa 	beq.w	8005028 <_svfiprintf_r+0x1c8>
 8004ed4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ed6:	445a      	add	r2, fp
 8004ed8:	9209      	str	r2, [sp, #36]	; 0x24
 8004eda:	f89a 3000 	ldrb.w	r3, [sl]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 80a2 	beq.w	8005028 <_svfiprintf_r+0x1c8>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004eee:	f10a 0a01 	add.w	sl, sl, #1
 8004ef2:	9304      	str	r3, [sp, #16]
 8004ef4:	9307      	str	r3, [sp, #28]
 8004ef6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004efa:	931a      	str	r3, [sp, #104]	; 0x68
 8004efc:	4654      	mov	r4, sl
 8004efe:	2205      	movs	r2, #5
 8004f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f04:	4851      	ldr	r0, [pc, #324]	; (800504c <_svfiprintf_r+0x1ec>)
 8004f06:	f7fb f96b 	bl	80001e0 <memchr>
 8004f0a:	9a04      	ldr	r2, [sp, #16]
 8004f0c:	b9d8      	cbnz	r0, 8004f46 <_svfiprintf_r+0xe6>
 8004f0e:	06d0      	lsls	r0, r2, #27
 8004f10:	bf44      	itt	mi
 8004f12:	2320      	movmi	r3, #32
 8004f14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f18:	0711      	lsls	r1, r2, #28
 8004f1a:	bf44      	itt	mi
 8004f1c:	232b      	movmi	r3, #43	; 0x2b
 8004f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f22:	f89a 3000 	ldrb.w	r3, [sl]
 8004f26:	2b2a      	cmp	r3, #42	; 0x2a
 8004f28:	d015      	beq.n	8004f56 <_svfiprintf_r+0xf6>
 8004f2a:	9a07      	ldr	r2, [sp, #28]
 8004f2c:	4654      	mov	r4, sl
 8004f2e:	2000      	movs	r0, #0
 8004f30:	f04f 0c0a 	mov.w	ip, #10
 8004f34:	4621      	mov	r1, r4
 8004f36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f3a:	3b30      	subs	r3, #48	; 0x30
 8004f3c:	2b09      	cmp	r3, #9
 8004f3e:	d94e      	bls.n	8004fde <_svfiprintf_r+0x17e>
 8004f40:	b1b0      	cbz	r0, 8004f70 <_svfiprintf_r+0x110>
 8004f42:	9207      	str	r2, [sp, #28]
 8004f44:	e014      	b.n	8004f70 <_svfiprintf_r+0x110>
 8004f46:	eba0 0308 	sub.w	r3, r0, r8
 8004f4a:	fa09 f303 	lsl.w	r3, r9, r3
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	9304      	str	r3, [sp, #16]
 8004f52:	46a2      	mov	sl, r4
 8004f54:	e7d2      	b.n	8004efc <_svfiprintf_r+0x9c>
 8004f56:	9b03      	ldr	r3, [sp, #12]
 8004f58:	1d19      	adds	r1, r3, #4
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	9103      	str	r1, [sp, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	bfbb      	ittet	lt
 8004f62:	425b      	neglt	r3, r3
 8004f64:	f042 0202 	orrlt.w	r2, r2, #2
 8004f68:	9307      	strge	r3, [sp, #28]
 8004f6a:	9307      	strlt	r3, [sp, #28]
 8004f6c:	bfb8      	it	lt
 8004f6e:	9204      	strlt	r2, [sp, #16]
 8004f70:	7823      	ldrb	r3, [r4, #0]
 8004f72:	2b2e      	cmp	r3, #46	; 0x2e
 8004f74:	d10c      	bne.n	8004f90 <_svfiprintf_r+0x130>
 8004f76:	7863      	ldrb	r3, [r4, #1]
 8004f78:	2b2a      	cmp	r3, #42	; 0x2a
 8004f7a:	d135      	bne.n	8004fe8 <_svfiprintf_r+0x188>
 8004f7c:	9b03      	ldr	r3, [sp, #12]
 8004f7e:	1d1a      	adds	r2, r3, #4
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	9203      	str	r2, [sp, #12]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	bfb8      	it	lt
 8004f88:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f8c:	3402      	adds	r4, #2
 8004f8e:	9305      	str	r3, [sp, #20]
 8004f90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800505c <_svfiprintf_r+0x1fc>
 8004f94:	7821      	ldrb	r1, [r4, #0]
 8004f96:	2203      	movs	r2, #3
 8004f98:	4650      	mov	r0, sl
 8004f9a:	f7fb f921 	bl	80001e0 <memchr>
 8004f9e:	b140      	cbz	r0, 8004fb2 <_svfiprintf_r+0x152>
 8004fa0:	2340      	movs	r3, #64	; 0x40
 8004fa2:	eba0 000a 	sub.w	r0, r0, sl
 8004fa6:	fa03 f000 	lsl.w	r0, r3, r0
 8004faa:	9b04      	ldr	r3, [sp, #16]
 8004fac:	4303      	orrs	r3, r0
 8004fae:	3401      	adds	r4, #1
 8004fb0:	9304      	str	r3, [sp, #16]
 8004fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fb6:	4826      	ldr	r0, [pc, #152]	; (8005050 <_svfiprintf_r+0x1f0>)
 8004fb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fbc:	2206      	movs	r2, #6
 8004fbe:	f7fb f90f 	bl	80001e0 <memchr>
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	d038      	beq.n	8005038 <_svfiprintf_r+0x1d8>
 8004fc6:	4b23      	ldr	r3, [pc, #140]	; (8005054 <_svfiprintf_r+0x1f4>)
 8004fc8:	bb1b      	cbnz	r3, 8005012 <_svfiprintf_r+0x1b2>
 8004fca:	9b03      	ldr	r3, [sp, #12]
 8004fcc:	3307      	adds	r3, #7
 8004fce:	f023 0307 	bic.w	r3, r3, #7
 8004fd2:	3308      	adds	r3, #8
 8004fd4:	9303      	str	r3, [sp, #12]
 8004fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fd8:	4433      	add	r3, r6
 8004fda:	9309      	str	r3, [sp, #36]	; 0x24
 8004fdc:	e767      	b.n	8004eae <_svfiprintf_r+0x4e>
 8004fde:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fe2:	460c      	mov	r4, r1
 8004fe4:	2001      	movs	r0, #1
 8004fe6:	e7a5      	b.n	8004f34 <_svfiprintf_r+0xd4>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	3401      	adds	r4, #1
 8004fec:	9305      	str	r3, [sp, #20]
 8004fee:	4619      	mov	r1, r3
 8004ff0:	f04f 0c0a 	mov.w	ip, #10
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ffa:	3a30      	subs	r2, #48	; 0x30
 8004ffc:	2a09      	cmp	r2, #9
 8004ffe:	d903      	bls.n	8005008 <_svfiprintf_r+0x1a8>
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0c5      	beq.n	8004f90 <_svfiprintf_r+0x130>
 8005004:	9105      	str	r1, [sp, #20]
 8005006:	e7c3      	b.n	8004f90 <_svfiprintf_r+0x130>
 8005008:	fb0c 2101 	mla	r1, ip, r1, r2
 800500c:	4604      	mov	r4, r0
 800500e:	2301      	movs	r3, #1
 8005010:	e7f0      	b.n	8004ff4 <_svfiprintf_r+0x194>
 8005012:	ab03      	add	r3, sp, #12
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	462a      	mov	r2, r5
 8005018:	4b0f      	ldr	r3, [pc, #60]	; (8005058 <_svfiprintf_r+0x1f8>)
 800501a:	a904      	add	r1, sp, #16
 800501c:	4638      	mov	r0, r7
 800501e:	f3af 8000 	nop.w
 8005022:	1c42      	adds	r2, r0, #1
 8005024:	4606      	mov	r6, r0
 8005026:	d1d6      	bne.n	8004fd6 <_svfiprintf_r+0x176>
 8005028:	89ab      	ldrh	r3, [r5, #12]
 800502a:	065b      	lsls	r3, r3, #25
 800502c:	f53f af2c 	bmi.w	8004e88 <_svfiprintf_r+0x28>
 8005030:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005032:	b01d      	add	sp, #116	; 0x74
 8005034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005038:	ab03      	add	r3, sp, #12
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	462a      	mov	r2, r5
 800503e:	4b06      	ldr	r3, [pc, #24]	; (8005058 <_svfiprintf_r+0x1f8>)
 8005040:	a904      	add	r1, sp, #16
 8005042:	4638      	mov	r0, r7
 8005044:	f000 f87a 	bl	800513c <_printf_i>
 8005048:	e7eb      	b.n	8005022 <_svfiprintf_r+0x1c2>
 800504a:	bf00      	nop
 800504c:	08005a98 	.word	0x08005a98
 8005050:	08005aa2 	.word	0x08005aa2
 8005054:	00000000 	.word	0x00000000
 8005058:	08004da9 	.word	0x08004da9
 800505c:	08005a9e 	.word	0x08005a9e

08005060 <_printf_common>:
 8005060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005064:	4616      	mov	r6, r2
 8005066:	4699      	mov	r9, r3
 8005068:	688a      	ldr	r2, [r1, #8]
 800506a:	690b      	ldr	r3, [r1, #16]
 800506c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005070:	4293      	cmp	r3, r2
 8005072:	bfb8      	it	lt
 8005074:	4613      	movlt	r3, r2
 8005076:	6033      	str	r3, [r6, #0]
 8005078:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800507c:	4607      	mov	r7, r0
 800507e:	460c      	mov	r4, r1
 8005080:	b10a      	cbz	r2, 8005086 <_printf_common+0x26>
 8005082:	3301      	adds	r3, #1
 8005084:	6033      	str	r3, [r6, #0]
 8005086:	6823      	ldr	r3, [r4, #0]
 8005088:	0699      	lsls	r1, r3, #26
 800508a:	bf42      	ittt	mi
 800508c:	6833      	ldrmi	r3, [r6, #0]
 800508e:	3302      	addmi	r3, #2
 8005090:	6033      	strmi	r3, [r6, #0]
 8005092:	6825      	ldr	r5, [r4, #0]
 8005094:	f015 0506 	ands.w	r5, r5, #6
 8005098:	d106      	bne.n	80050a8 <_printf_common+0x48>
 800509a:	f104 0a19 	add.w	sl, r4, #25
 800509e:	68e3      	ldr	r3, [r4, #12]
 80050a0:	6832      	ldr	r2, [r6, #0]
 80050a2:	1a9b      	subs	r3, r3, r2
 80050a4:	42ab      	cmp	r3, r5
 80050a6:	dc26      	bgt.n	80050f6 <_printf_common+0x96>
 80050a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050ac:	1e13      	subs	r3, r2, #0
 80050ae:	6822      	ldr	r2, [r4, #0]
 80050b0:	bf18      	it	ne
 80050b2:	2301      	movne	r3, #1
 80050b4:	0692      	lsls	r2, r2, #26
 80050b6:	d42b      	bmi.n	8005110 <_printf_common+0xb0>
 80050b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050bc:	4649      	mov	r1, r9
 80050be:	4638      	mov	r0, r7
 80050c0:	47c0      	blx	r8
 80050c2:	3001      	adds	r0, #1
 80050c4:	d01e      	beq.n	8005104 <_printf_common+0xa4>
 80050c6:	6823      	ldr	r3, [r4, #0]
 80050c8:	68e5      	ldr	r5, [r4, #12]
 80050ca:	6832      	ldr	r2, [r6, #0]
 80050cc:	f003 0306 	and.w	r3, r3, #6
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	bf08      	it	eq
 80050d4:	1aad      	subeq	r5, r5, r2
 80050d6:	68a3      	ldr	r3, [r4, #8]
 80050d8:	6922      	ldr	r2, [r4, #16]
 80050da:	bf0c      	ite	eq
 80050dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050e0:	2500      	movne	r5, #0
 80050e2:	4293      	cmp	r3, r2
 80050e4:	bfc4      	itt	gt
 80050e6:	1a9b      	subgt	r3, r3, r2
 80050e8:	18ed      	addgt	r5, r5, r3
 80050ea:	2600      	movs	r6, #0
 80050ec:	341a      	adds	r4, #26
 80050ee:	42b5      	cmp	r5, r6
 80050f0:	d11a      	bne.n	8005128 <_printf_common+0xc8>
 80050f2:	2000      	movs	r0, #0
 80050f4:	e008      	b.n	8005108 <_printf_common+0xa8>
 80050f6:	2301      	movs	r3, #1
 80050f8:	4652      	mov	r2, sl
 80050fa:	4649      	mov	r1, r9
 80050fc:	4638      	mov	r0, r7
 80050fe:	47c0      	blx	r8
 8005100:	3001      	adds	r0, #1
 8005102:	d103      	bne.n	800510c <_printf_common+0xac>
 8005104:	f04f 30ff 	mov.w	r0, #4294967295
 8005108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800510c:	3501      	adds	r5, #1
 800510e:	e7c6      	b.n	800509e <_printf_common+0x3e>
 8005110:	18e1      	adds	r1, r4, r3
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	2030      	movs	r0, #48	; 0x30
 8005116:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800511a:	4422      	add	r2, r4
 800511c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005120:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005124:	3302      	adds	r3, #2
 8005126:	e7c7      	b.n	80050b8 <_printf_common+0x58>
 8005128:	2301      	movs	r3, #1
 800512a:	4622      	mov	r2, r4
 800512c:	4649      	mov	r1, r9
 800512e:	4638      	mov	r0, r7
 8005130:	47c0      	blx	r8
 8005132:	3001      	adds	r0, #1
 8005134:	d0e6      	beq.n	8005104 <_printf_common+0xa4>
 8005136:	3601      	adds	r6, #1
 8005138:	e7d9      	b.n	80050ee <_printf_common+0x8e>
	...

0800513c <_printf_i>:
 800513c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005140:	7e0f      	ldrb	r7, [r1, #24]
 8005142:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005144:	2f78      	cmp	r7, #120	; 0x78
 8005146:	4691      	mov	r9, r2
 8005148:	4680      	mov	r8, r0
 800514a:	460c      	mov	r4, r1
 800514c:	469a      	mov	sl, r3
 800514e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005152:	d807      	bhi.n	8005164 <_printf_i+0x28>
 8005154:	2f62      	cmp	r7, #98	; 0x62
 8005156:	d80a      	bhi.n	800516e <_printf_i+0x32>
 8005158:	2f00      	cmp	r7, #0
 800515a:	f000 80d8 	beq.w	800530e <_printf_i+0x1d2>
 800515e:	2f58      	cmp	r7, #88	; 0x58
 8005160:	f000 80a3 	beq.w	80052aa <_printf_i+0x16e>
 8005164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005168:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800516c:	e03a      	b.n	80051e4 <_printf_i+0xa8>
 800516e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005172:	2b15      	cmp	r3, #21
 8005174:	d8f6      	bhi.n	8005164 <_printf_i+0x28>
 8005176:	a101      	add	r1, pc, #4	; (adr r1, 800517c <_printf_i+0x40>)
 8005178:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800517c:	080051d5 	.word	0x080051d5
 8005180:	080051e9 	.word	0x080051e9
 8005184:	08005165 	.word	0x08005165
 8005188:	08005165 	.word	0x08005165
 800518c:	08005165 	.word	0x08005165
 8005190:	08005165 	.word	0x08005165
 8005194:	080051e9 	.word	0x080051e9
 8005198:	08005165 	.word	0x08005165
 800519c:	08005165 	.word	0x08005165
 80051a0:	08005165 	.word	0x08005165
 80051a4:	08005165 	.word	0x08005165
 80051a8:	080052f5 	.word	0x080052f5
 80051ac:	08005219 	.word	0x08005219
 80051b0:	080052d7 	.word	0x080052d7
 80051b4:	08005165 	.word	0x08005165
 80051b8:	08005165 	.word	0x08005165
 80051bc:	08005317 	.word	0x08005317
 80051c0:	08005165 	.word	0x08005165
 80051c4:	08005219 	.word	0x08005219
 80051c8:	08005165 	.word	0x08005165
 80051cc:	08005165 	.word	0x08005165
 80051d0:	080052df 	.word	0x080052df
 80051d4:	682b      	ldr	r3, [r5, #0]
 80051d6:	1d1a      	adds	r2, r3, #4
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	602a      	str	r2, [r5, #0]
 80051dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051e4:	2301      	movs	r3, #1
 80051e6:	e0a3      	b.n	8005330 <_printf_i+0x1f4>
 80051e8:	6820      	ldr	r0, [r4, #0]
 80051ea:	6829      	ldr	r1, [r5, #0]
 80051ec:	0606      	lsls	r6, r0, #24
 80051ee:	f101 0304 	add.w	r3, r1, #4
 80051f2:	d50a      	bpl.n	800520a <_printf_i+0xce>
 80051f4:	680e      	ldr	r6, [r1, #0]
 80051f6:	602b      	str	r3, [r5, #0]
 80051f8:	2e00      	cmp	r6, #0
 80051fa:	da03      	bge.n	8005204 <_printf_i+0xc8>
 80051fc:	232d      	movs	r3, #45	; 0x2d
 80051fe:	4276      	negs	r6, r6
 8005200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005204:	485e      	ldr	r0, [pc, #376]	; (8005380 <_printf_i+0x244>)
 8005206:	230a      	movs	r3, #10
 8005208:	e019      	b.n	800523e <_printf_i+0x102>
 800520a:	680e      	ldr	r6, [r1, #0]
 800520c:	602b      	str	r3, [r5, #0]
 800520e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005212:	bf18      	it	ne
 8005214:	b236      	sxthne	r6, r6
 8005216:	e7ef      	b.n	80051f8 <_printf_i+0xbc>
 8005218:	682b      	ldr	r3, [r5, #0]
 800521a:	6820      	ldr	r0, [r4, #0]
 800521c:	1d19      	adds	r1, r3, #4
 800521e:	6029      	str	r1, [r5, #0]
 8005220:	0601      	lsls	r1, r0, #24
 8005222:	d501      	bpl.n	8005228 <_printf_i+0xec>
 8005224:	681e      	ldr	r6, [r3, #0]
 8005226:	e002      	b.n	800522e <_printf_i+0xf2>
 8005228:	0646      	lsls	r6, r0, #25
 800522a:	d5fb      	bpl.n	8005224 <_printf_i+0xe8>
 800522c:	881e      	ldrh	r6, [r3, #0]
 800522e:	4854      	ldr	r0, [pc, #336]	; (8005380 <_printf_i+0x244>)
 8005230:	2f6f      	cmp	r7, #111	; 0x6f
 8005232:	bf0c      	ite	eq
 8005234:	2308      	moveq	r3, #8
 8005236:	230a      	movne	r3, #10
 8005238:	2100      	movs	r1, #0
 800523a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800523e:	6865      	ldr	r5, [r4, #4]
 8005240:	60a5      	str	r5, [r4, #8]
 8005242:	2d00      	cmp	r5, #0
 8005244:	bfa2      	ittt	ge
 8005246:	6821      	ldrge	r1, [r4, #0]
 8005248:	f021 0104 	bicge.w	r1, r1, #4
 800524c:	6021      	strge	r1, [r4, #0]
 800524e:	b90e      	cbnz	r6, 8005254 <_printf_i+0x118>
 8005250:	2d00      	cmp	r5, #0
 8005252:	d04d      	beq.n	80052f0 <_printf_i+0x1b4>
 8005254:	4615      	mov	r5, r2
 8005256:	fbb6 f1f3 	udiv	r1, r6, r3
 800525a:	fb03 6711 	mls	r7, r3, r1, r6
 800525e:	5dc7      	ldrb	r7, [r0, r7]
 8005260:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005264:	4637      	mov	r7, r6
 8005266:	42bb      	cmp	r3, r7
 8005268:	460e      	mov	r6, r1
 800526a:	d9f4      	bls.n	8005256 <_printf_i+0x11a>
 800526c:	2b08      	cmp	r3, #8
 800526e:	d10b      	bne.n	8005288 <_printf_i+0x14c>
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	07de      	lsls	r6, r3, #31
 8005274:	d508      	bpl.n	8005288 <_printf_i+0x14c>
 8005276:	6923      	ldr	r3, [r4, #16]
 8005278:	6861      	ldr	r1, [r4, #4]
 800527a:	4299      	cmp	r1, r3
 800527c:	bfde      	ittt	le
 800527e:	2330      	movle	r3, #48	; 0x30
 8005280:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005284:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005288:	1b52      	subs	r2, r2, r5
 800528a:	6122      	str	r2, [r4, #16]
 800528c:	f8cd a000 	str.w	sl, [sp]
 8005290:	464b      	mov	r3, r9
 8005292:	aa03      	add	r2, sp, #12
 8005294:	4621      	mov	r1, r4
 8005296:	4640      	mov	r0, r8
 8005298:	f7ff fee2 	bl	8005060 <_printf_common>
 800529c:	3001      	adds	r0, #1
 800529e:	d14c      	bne.n	800533a <_printf_i+0x1fe>
 80052a0:	f04f 30ff 	mov.w	r0, #4294967295
 80052a4:	b004      	add	sp, #16
 80052a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052aa:	4835      	ldr	r0, [pc, #212]	; (8005380 <_printf_i+0x244>)
 80052ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80052b0:	6829      	ldr	r1, [r5, #0]
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80052b8:	6029      	str	r1, [r5, #0]
 80052ba:	061d      	lsls	r5, r3, #24
 80052bc:	d514      	bpl.n	80052e8 <_printf_i+0x1ac>
 80052be:	07df      	lsls	r7, r3, #31
 80052c0:	bf44      	itt	mi
 80052c2:	f043 0320 	orrmi.w	r3, r3, #32
 80052c6:	6023      	strmi	r3, [r4, #0]
 80052c8:	b91e      	cbnz	r6, 80052d2 <_printf_i+0x196>
 80052ca:	6823      	ldr	r3, [r4, #0]
 80052cc:	f023 0320 	bic.w	r3, r3, #32
 80052d0:	6023      	str	r3, [r4, #0]
 80052d2:	2310      	movs	r3, #16
 80052d4:	e7b0      	b.n	8005238 <_printf_i+0xfc>
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	f043 0320 	orr.w	r3, r3, #32
 80052dc:	6023      	str	r3, [r4, #0]
 80052de:	2378      	movs	r3, #120	; 0x78
 80052e0:	4828      	ldr	r0, [pc, #160]	; (8005384 <_printf_i+0x248>)
 80052e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052e6:	e7e3      	b.n	80052b0 <_printf_i+0x174>
 80052e8:	0659      	lsls	r1, r3, #25
 80052ea:	bf48      	it	mi
 80052ec:	b2b6      	uxthmi	r6, r6
 80052ee:	e7e6      	b.n	80052be <_printf_i+0x182>
 80052f0:	4615      	mov	r5, r2
 80052f2:	e7bb      	b.n	800526c <_printf_i+0x130>
 80052f4:	682b      	ldr	r3, [r5, #0]
 80052f6:	6826      	ldr	r6, [r4, #0]
 80052f8:	6961      	ldr	r1, [r4, #20]
 80052fa:	1d18      	adds	r0, r3, #4
 80052fc:	6028      	str	r0, [r5, #0]
 80052fe:	0635      	lsls	r5, r6, #24
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	d501      	bpl.n	8005308 <_printf_i+0x1cc>
 8005304:	6019      	str	r1, [r3, #0]
 8005306:	e002      	b.n	800530e <_printf_i+0x1d2>
 8005308:	0670      	lsls	r0, r6, #25
 800530a:	d5fb      	bpl.n	8005304 <_printf_i+0x1c8>
 800530c:	8019      	strh	r1, [r3, #0]
 800530e:	2300      	movs	r3, #0
 8005310:	6123      	str	r3, [r4, #16]
 8005312:	4615      	mov	r5, r2
 8005314:	e7ba      	b.n	800528c <_printf_i+0x150>
 8005316:	682b      	ldr	r3, [r5, #0]
 8005318:	1d1a      	adds	r2, r3, #4
 800531a:	602a      	str	r2, [r5, #0]
 800531c:	681d      	ldr	r5, [r3, #0]
 800531e:	6862      	ldr	r2, [r4, #4]
 8005320:	2100      	movs	r1, #0
 8005322:	4628      	mov	r0, r5
 8005324:	f7fa ff5c 	bl	80001e0 <memchr>
 8005328:	b108      	cbz	r0, 800532e <_printf_i+0x1f2>
 800532a:	1b40      	subs	r0, r0, r5
 800532c:	6060      	str	r0, [r4, #4]
 800532e:	6863      	ldr	r3, [r4, #4]
 8005330:	6123      	str	r3, [r4, #16]
 8005332:	2300      	movs	r3, #0
 8005334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005338:	e7a8      	b.n	800528c <_printf_i+0x150>
 800533a:	6923      	ldr	r3, [r4, #16]
 800533c:	462a      	mov	r2, r5
 800533e:	4649      	mov	r1, r9
 8005340:	4640      	mov	r0, r8
 8005342:	47d0      	blx	sl
 8005344:	3001      	adds	r0, #1
 8005346:	d0ab      	beq.n	80052a0 <_printf_i+0x164>
 8005348:	6823      	ldr	r3, [r4, #0]
 800534a:	079b      	lsls	r3, r3, #30
 800534c:	d413      	bmi.n	8005376 <_printf_i+0x23a>
 800534e:	68e0      	ldr	r0, [r4, #12]
 8005350:	9b03      	ldr	r3, [sp, #12]
 8005352:	4298      	cmp	r0, r3
 8005354:	bfb8      	it	lt
 8005356:	4618      	movlt	r0, r3
 8005358:	e7a4      	b.n	80052a4 <_printf_i+0x168>
 800535a:	2301      	movs	r3, #1
 800535c:	4632      	mov	r2, r6
 800535e:	4649      	mov	r1, r9
 8005360:	4640      	mov	r0, r8
 8005362:	47d0      	blx	sl
 8005364:	3001      	adds	r0, #1
 8005366:	d09b      	beq.n	80052a0 <_printf_i+0x164>
 8005368:	3501      	adds	r5, #1
 800536a:	68e3      	ldr	r3, [r4, #12]
 800536c:	9903      	ldr	r1, [sp, #12]
 800536e:	1a5b      	subs	r3, r3, r1
 8005370:	42ab      	cmp	r3, r5
 8005372:	dcf2      	bgt.n	800535a <_printf_i+0x21e>
 8005374:	e7eb      	b.n	800534e <_printf_i+0x212>
 8005376:	2500      	movs	r5, #0
 8005378:	f104 0619 	add.w	r6, r4, #25
 800537c:	e7f5      	b.n	800536a <_printf_i+0x22e>
 800537e:	bf00      	nop
 8005380:	08005aa9 	.word	0x08005aa9
 8005384:	08005aba 	.word	0x08005aba

08005388 <memcpy>:
 8005388:	440a      	add	r2, r1
 800538a:	4291      	cmp	r1, r2
 800538c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005390:	d100      	bne.n	8005394 <memcpy+0xc>
 8005392:	4770      	bx	lr
 8005394:	b510      	push	{r4, lr}
 8005396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800539a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800539e:	4291      	cmp	r1, r2
 80053a0:	d1f9      	bne.n	8005396 <memcpy+0xe>
 80053a2:	bd10      	pop	{r4, pc}

080053a4 <memmove>:
 80053a4:	4288      	cmp	r0, r1
 80053a6:	b510      	push	{r4, lr}
 80053a8:	eb01 0402 	add.w	r4, r1, r2
 80053ac:	d902      	bls.n	80053b4 <memmove+0x10>
 80053ae:	4284      	cmp	r4, r0
 80053b0:	4623      	mov	r3, r4
 80053b2:	d807      	bhi.n	80053c4 <memmove+0x20>
 80053b4:	1e43      	subs	r3, r0, #1
 80053b6:	42a1      	cmp	r1, r4
 80053b8:	d008      	beq.n	80053cc <memmove+0x28>
 80053ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053c2:	e7f8      	b.n	80053b6 <memmove+0x12>
 80053c4:	4402      	add	r2, r0
 80053c6:	4601      	mov	r1, r0
 80053c8:	428a      	cmp	r2, r1
 80053ca:	d100      	bne.n	80053ce <memmove+0x2a>
 80053cc:	bd10      	pop	{r4, pc}
 80053ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053d6:	e7f7      	b.n	80053c8 <memmove+0x24>

080053d8 <_free_r>:
 80053d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053da:	2900      	cmp	r1, #0
 80053dc:	d044      	beq.n	8005468 <_free_r+0x90>
 80053de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053e2:	9001      	str	r0, [sp, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f1a1 0404 	sub.w	r4, r1, #4
 80053ea:	bfb8      	it	lt
 80053ec:	18e4      	addlt	r4, r4, r3
 80053ee:	f000 f913 	bl	8005618 <__malloc_lock>
 80053f2:	4a1e      	ldr	r2, [pc, #120]	; (800546c <_free_r+0x94>)
 80053f4:	9801      	ldr	r0, [sp, #4]
 80053f6:	6813      	ldr	r3, [r2, #0]
 80053f8:	b933      	cbnz	r3, 8005408 <_free_r+0x30>
 80053fa:	6063      	str	r3, [r4, #4]
 80053fc:	6014      	str	r4, [r2, #0]
 80053fe:	b003      	add	sp, #12
 8005400:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005404:	f000 b90e 	b.w	8005624 <__malloc_unlock>
 8005408:	42a3      	cmp	r3, r4
 800540a:	d908      	bls.n	800541e <_free_r+0x46>
 800540c:	6825      	ldr	r5, [r4, #0]
 800540e:	1961      	adds	r1, r4, r5
 8005410:	428b      	cmp	r3, r1
 8005412:	bf01      	itttt	eq
 8005414:	6819      	ldreq	r1, [r3, #0]
 8005416:	685b      	ldreq	r3, [r3, #4]
 8005418:	1949      	addeq	r1, r1, r5
 800541a:	6021      	streq	r1, [r4, #0]
 800541c:	e7ed      	b.n	80053fa <_free_r+0x22>
 800541e:	461a      	mov	r2, r3
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	b10b      	cbz	r3, 8005428 <_free_r+0x50>
 8005424:	42a3      	cmp	r3, r4
 8005426:	d9fa      	bls.n	800541e <_free_r+0x46>
 8005428:	6811      	ldr	r1, [r2, #0]
 800542a:	1855      	adds	r5, r2, r1
 800542c:	42a5      	cmp	r5, r4
 800542e:	d10b      	bne.n	8005448 <_free_r+0x70>
 8005430:	6824      	ldr	r4, [r4, #0]
 8005432:	4421      	add	r1, r4
 8005434:	1854      	adds	r4, r2, r1
 8005436:	42a3      	cmp	r3, r4
 8005438:	6011      	str	r1, [r2, #0]
 800543a:	d1e0      	bne.n	80053fe <_free_r+0x26>
 800543c:	681c      	ldr	r4, [r3, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	6053      	str	r3, [r2, #4]
 8005442:	4421      	add	r1, r4
 8005444:	6011      	str	r1, [r2, #0]
 8005446:	e7da      	b.n	80053fe <_free_r+0x26>
 8005448:	d902      	bls.n	8005450 <_free_r+0x78>
 800544a:	230c      	movs	r3, #12
 800544c:	6003      	str	r3, [r0, #0]
 800544e:	e7d6      	b.n	80053fe <_free_r+0x26>
 8005450:	6825      	ldr	r5, [r4, #0]
 8005452:	1961      	adds	r1, r4, r5
 8005454:	428b      	cmp	r3, r1
 8005456:	bf04      	itt	eq
 8005458:	6819      	ldreq	r1, [r3, #0]
 800545a:	685b      	ldreq	r3, [r3, #4]
 800545c:	6063      	str	r3, [r4, #4]
 800545e:	bf04      	itt	eq
 8005460:	1949      	addeq	r1, r1, r5
 8005462:	6021      	streq	r1, [r4, #0]
 8005464:	6054      	str	r4, [r2, #4]
 8005466:	e7ca      	b.n	80053fe <_free_r+0x26>
 8005468:	b003      	add	sp, #12
 800546a:	bd30      	pop	{r4, r5, pc}
 800546c:	2000ffd4 	.word	0x2000ffd4

08005470 <sbrk_aligned>:
 8005470:	b570      	push	{r4, r5, r6, lr}
 8005472:	4e0e      	ldr	r6, [pc, #56]	; (80054ac <sbrk_aligned+0x3c>)
 8005474:	460c      	mov	r4, r1
 8005476:	6831      	ldr	r1, [r6, #0]
 8005478:	4605      	mov	r5, r0
 800547a:	b911      	cbnz	r1, 8005482 <sbrk_aligned+0x12>
 800547c:	f000 f8bc 	bl	80055f8 <_sbrk_r>
 8005480:	6030      	str	r0, [r6, #0]
 8005482:	4621      	mov	r1, r4
 8005484:	4628      	mov	r0, r5
 8005486:	f000 f8b7 	bl	80055f8 <_sbrk_r>
 800548a:	1c43      	adds	r3, r0, #1
 800548c:	d00a      	beq.n	80054a4 <sbrk_aligned+0x34>
 800548e:	1cc4      	adds	r4, r0, #3
 8005490:	f024 0403 	bic.w	r4, r4, #3
 8005494:	42a0      	cmp	r0, r4
 8005496:	d007      	beq.n	80054a8 <sbrk_aligned+0x38>
 8005498:	1a21      	subs	r1, r4, r0
 800549a:	4628      	mov	r0, r5
 800549c:	f000 f8ac 	bl	80055f8 <_sbrk_r>
 80054a0:	3001      	adds	r0, #1
 80054a2:	d101      	bne.n	80054a8 <sbrk_aligned+0x38>
 80054a4:	f04f 34ff 	mov.w	r4, #4294967295
 80054a8:	4620      	mov	r0, r4
 80054aa:	bd70      	pop	{r4, r5, r6, pc}
 80054ac:	2000ffd8 	.word	0x2000ffd8

080054b0 <_malloc_r>:
 80054b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054b4:	1ccd      	adds	r5, r1, #3
 80054b6:	f025 0503 	bic.w	r5, r5, #3
 80054ba:	3508      	adds	r5, #8
 80054bc:	2d0c      	cmp	r5, #12
 80054be:	bf38      	it	cc
 80054c0:	250c      	movcc	r5, #12
 80054c2:	2d00      	cmp	r5, #0
 80054c4:	4607      	mov	r7, r0
 80054c6:	db01      	blt.n	80054cc <_malloc_r+0x1c>
 80054c8:	42a9      	cmp	r1, r5
 80054ca:	d905      	bls.n	80054d8 <_malloc_r+0x28>
 80054cc:	230c      	movs	r3, #12
 80054ce:	603b      	str	r3, [r7, #0]
 80054d0:	2600      	movs	r6, #0
 80054d2:	4630      	mov	r0, r6
 80054d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054d8:	4e2e      	ldr	r6, [pc, #184]	; (8005594 <_malloc_r+0xe4>)
 80054da:	f000 f89d 	bl	8005618 <__malloc_lock>
 80054de:	6833      	ldr	r3, [r6, #0]
 80054e0:	461c      	mov	r4, r3
 80054e2:	bb34      	cbnz	r4, 8005532 <_malloc_r+0x82>
 80054e4:	4629      	mov	r1, r5
 80054e6:	4638      	mov	r0, r7
 80054e8:	f7ff ffc2 	bl	8005470 <sbrk_aligned>
 80054ec:	1c43      	adds	r3, r0, #1
 80054ee:	4604      	mov	r4, r0
 80054f0:	d14d      	bne.n	800558e <_malloc_r+0xde>
 80054f2:	6834      	ldr	r4, [r6, #0]
 80054f4:	4626      	mov	r6, r4
 80054f6:	2e00      	cmp	r6, #0
 80054f8:	d140      	bne.n	800557c <_malloc_r+0xcc>
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	4631      	mov	r1, r6
 80054fe:	4638      	mov	r0, r7
 8005500:	eb04 0803 	add.w	r8, r4, r3
 8005504:	f000 f878 	bl	80055f8 <_sbrk_r>
 8005508:	4580      	cmp	r8, r0
 800550a:	d13a      	bne.n	8005582 <_malloc_r+0xd2>
 800550c:	6821      	ldr	r1, [r4, #0]
 800550e:	3503      	adds	r5, #3
 8005510:	1a6d      	subs	r5, r5, r1
 8005512:	f025 0503 	bic.w	r5, r5, #3
 8005516:	3508      	adds	r5, #8
 8005518:	2d0c      	cmp	r5, #12
 800551a:	bf38      	it	cc
 800551c:	250c      	movcc	r5, #12
 800551e:	4629      	mov	r1, r5
 8005520:	4638      	mov	r0, r7
 8005522:	f7ff ffa5 	bl	8005470 <sbrk_aligned>
 8005526:	3001      	adds	r0, #1
 8005528:	d02b      	beq.n	8005582 <_malloc_r+0xd2>
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	442b      	add	r3, r5
 800552e:	6023      	str	r3, [r4, #0]
 8005530:	e00e      	b.n	8005550 <_malloc_r+0xa0>
 8005532:	6822      	ldr	r2, [r4, #0]
 8005534:	1b52      	subs	r2, r2, r5
 8005536:	d41e      	bmi.n	8005576 <_malloc_r+0xc6>
 8005538:	2a0b      	cmp	r2, #11
 800553a:	d916      	bls.n	800556a <_malloc_r+0xba>
 800553c:	1961      	adds	r1, r4, r5
 800553e:	42a3      	cmp	r3, r4
 8005540:	6025      	str	r5, [r4, #0]
 8005542:	bf18      	it	ne
 8005544:	6059      	strne	r1, [r3, #4]
 8005546:	6863      	ldr	r3, [r4, #4]
 8005548:	bf08      	it	eq
 800554a:	6031      	streq	r1, [r6, #0]
 800554c:	5162      	str	r2, [r4, r5]
 800554e:	604b      	str	r3, [r1, #4]
 8005550:	4638      	mov	r0, r7
 8005552:	f104 060b 	add.w	r6, r4, #11
 8005556:	f000 f865 	bl	8005624 <__malloc_unlock>
 800555a:	f026 0607 	bic.w	r6, r6, #7
 800555e:	1d23      	adds	r3, r4, #4
 8005560:	1af2      	subs	r2, r6, r3
 8005562:	d0b6      	beq.n	80054d2 <_malloc_r+0x22>
 8005564:	1b9b      	subs	r3, r3, r6
 8005566:	50a3      	str	r3, [r4, r2]
 8005568:	e7b3      	b.n	80054d2 <_malloc_r+0x22>
 800556a:	6862      	ldr	r2, [r4, #4]
 800556c:	42a3      	cmp	r3, r4
 800556e:	bf0c      	ite	eq
 8005570:	6032      	streq	r2, [r6, #0]
 8005572:	605a      	strne	r2, [r3, #4]
 8005574:	e7ec      	b.n	8005550 <_malloc_r+0xa0>
 8005576:	4623      	mov	r3, r4
 8005578:	6864      	ldr	r4, [r4, #4]
 800557a:	e7b2      	b.n	80054e2 <_malloc_r+0x32>
 800557c:	4634      	mov	r4, r6
 800557e:	6876      	ldr	r6, [r6, #4]
 8005580:	e7b9      	b.n	80054f6 <_malloc_r+0x46>
 8005582:	230c      	movs	r3, #12
 8005584:	603b      	str	r3, [r7, #0]
 8005586:	4638      	mov	r0, r7
 8005588:	f000 f84c 	bl	8005624 <__malloc_unlock>
 800558c:	e7a1      	b.n	80054d2 <_malloc_r+0x22>
 800558e:	6025      	str	r5, [r4, #0]
 8005590:	e7de      	b.n	8005550 <_malloc_r+0xa0>
 8005592:	bf00      	nop
 8005594:	2000ffd4 	.word	0x2000ffd4

08005598 <_realloc_r>:
 8005598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800559c:	4680      	mov	r8, r0
 800559e:	4614      	mov	r4, r2
 80055a0:	460e      	mov	r6, r1
 80055a2:	b921      	cbnz	r1, 80055ae <_realloc_r+0x16>
 80055a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055a8:	4611      	mov	r1, r2
 80055aa:	f7ff bf81 	b.w	80054b0 <_malloc_r>
 80055ae:	b92a      	cbnz	r2, 80055bc <_realloc_r+0x24>
 80055b0:	f7ff ff12 	bl	80053d8 <_free_r>
 80055b4:	4625      	mov	r5, r4
 80055b6:	4628      	mov	r0, r5
 80055b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055bc:	f000 f838 	bl	8005630 <_malloc_usable_size_r>
 80055c0:	4284      	cmp	r4, r0
 80055c2:	4607      	mov	r7, r0
 80055c4:	d802      	bhi.n	80055cc <_realloc_r+0x34>
 80055c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80055ca:	d812      	bhi.n	80055f2 <_realloc_r+0x5a>
 80055cc:	4621      	mov	r1, r4
 80055ce:	4640      	mov	r0, r8
 80055d0:	f7ff ff6e 	bl	80054b0 <_malloc_r>
 80055d4:	4605      	mov	r5, r0
 80055d6:	2800      	cmp	r0, #0
 80055d8:	d0ed      	beq.n	80055b6 <_realloc_r+0x1e>
 80055da:	42bc      	cmp	r4, r7
 80055dc:	4622      	mov	r2, r4
 80055de:	4631      	mov	r1, r6
 80055e0:	bf28      	it	cs
 80055e2:	463a      	movcs	r2, r7
 80055e4:	f7ff fed0 	bl	8005388 <memcpy>
 80055e8:	4631      	mov	r1, r6
 80055ea:	4640      	mov	r0, r8
 80055ec:	f7ff fef4 	bl	80053d8 <_free_r>
 80055f0:	e7e1      	b.n	80055b6 <_realloc_r+0x1e>
 80055f2:	4635      	mov	r5, r6
 80055f4:	e7df      	b.n	80055b6 <_realloc_r+0x1e>
	...

080055f8 <_sbrk_r>:
 80055f8:	b538      	push	{r3, r4, r5, lr}
 80055fa:	4d06      	ldr	r5, [pc, #24]	; (8005614 <_sbrk_r+0x1c>)
 80055fc:	2300      	movs	r3, #0
 80055fe:	4604      	mov	r4, r0
 8005600:	4608      	mov	r0, r1
 8005602:	602b      	str	r3, [r5, #0]
 8005604:	f7fb fd4a 	bl	800109c <_sbrk>
 8005608:	1c43      	adds	r3, r0, #1
 800560a:	d102      	bne.n	8005612 <_sbrk_r+0x1a>
 800560c:	682b      	ldr	r3, [r5, #0]
 800560e:	b103      	cbz	r3, 8005612 <_sbrk_r+0x1a>
 8005610:	6023      	str	r3, [r4, #0]
 8005612:	bd38      	pop	{r3, r4, r5, pc}
 8005614:	2000ffdc 	.word	0x2000ffdc

08005618 <__malloc_lock>:
 8005618:	4801      	ldr	r0, [pc, #4]	; (8005620 <__malloc_lock+0x8>)
 800561a:	f000 b811 	b.w	8005640 <__retarget_lock_acquire_recursive>
 800561e:	bf00      	nop
 8005620:	2000ffe0 	.word	0x2000ffe0

08005624 <__malloc_unlock>:
 8005624:	4801      	ldr	r0, [pc, #4]	; (800562c <__malloc_unlock+0x8>)
 8005626:	f000 b80c 	b.w	8005642 <__retarget_lock_release_recursive>
 800562a:	bf00      	nop
 800562c:	2000ffe0 	.word	0x2000ffe0

08005630 <_malloc_usable_size_r>:
 8005630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005634:	1f18      	subs	r0, r3, #4
 8005636:	2b00      	cmp	r3, #0
 8005638:	bfbc      	itt	lt
 800563a:	580b      	ldrlt	r3, [r1, r0]
 800563c:	18c0      	addlt	r0, r0, r3
 800563e:	4770      	bx	lr

08005640 <__retarget_lock_acquire_recursive>:
 8005640:	4770      	bx	lr

08005642 <__retarget_lock_release_recursive>:
 8005642:	4770      	bx	lr

08005644 <_init>:
 8005644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005646:	bf00      	nop
 8005648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800564a:	bc08      	pop	{r3}
 800564c:	469e      	mov	lr, r3
 800564e:	4770      	bx	lr

08005650 <_fini>:
 8005650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005652:	bf00      	nop
 8005654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005656:	bc08      	pop	{r3}
 8005658:	469e      	mov	lr, r3
 800565a:	4770      	bx	lr
