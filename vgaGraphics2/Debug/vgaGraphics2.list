
vgaGraphics2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013e0  08006484  08006484  00016484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007864  08007864  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007864  08007864  00017864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800786c  0800786c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800786c  0800786c  0001786c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007870  08007870  00017870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f08  20000070  080078e4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f78  080078e4  00020f78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fedf  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002458  00000000  00000000  0002ff7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  000323d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000166ef  00000000  00000000  00033188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00011291  00000000  00000000  00049877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008ea3d  00000000  00000000  0005ab08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000e9545  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000d50  00000000  00000000  000e9598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d3c  00000000  00000000  000ea2e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800646c 	.word	0x0800646c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800646c 	.word	0x0800646c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <combineColors>:

int getBitN(uint32_t n, char * buff){
	return (buff[n/8] >> (n%8)) & 0b1;
}

Color combineColors(Color existing, Color new){
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
 800058a:	80b8      	strh	r0, [r7, #4]
 800058c:	8039      	strh	r1, [r7, #0]
	if((new.value >> 14) == 0b00){//new color is transparent
 800058e:	883b      	ldrh	r3, [r7, #0]
 8000590:	0b9b      	lsrs	r3, r3, #14
 8000592:	b29b      	uxth	r3, r3
 8000594:	2b00      	cmp	r3, #0
 8000596:	d101      	bne.n	800059c <combineColors+0x18>
		return existing;
 8000598:	88bb      	ldrh	r3, [r7, #4]
 800059a:	e09f      	b.n	80006dc <combineColors+0x158>
	}
	if((new.value >> 14) == 0b11){//new color is opaque and overwrites the old
 800059c:	883b      	ldrh	r3, [r7, #0]
 800059e:	0b9b      	lsrs	r3, r3, #14
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	2b03      	cmp	r3, #3
 80005a4:	d106      	bne.n	80005b4 <combineColors+0x30>
		new.value &= ~(0b11 << 14); //clear the transparency value
 80005a6:	883b      	ldrh	r3, [r7, #0]
 80005a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	803b      	strh	r3, [r7, #0]
		return new;
 80005b0:	883b      	ldrh	r3, [r7, #0]
 80005b2:	e093      	b.n	80006dc <combineColors+0x158>
	}
	float r = ((existing.value >> 8) & 0xF) * ((existing.value >> 8) & 0xF) + ((new.value >> 8) & 0xF) * ((new.value >> 8) & 0xF);
 80005b4:	88bb      	ldrh	r3, [r7, #4]
 80005b6:	0a1b      	lsrs	r3, r3, #8
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	f003 030f 	and.w	r3, r3, #15
 80005be:	88ba      	ldrh	r2, [r7, #4]
 80005c0:	0a12      	lsrs	r2, r2, #8
 80005c2:	b292      	uxth	r2, r2
 80005c4:	f002 020f 	and.w	r2, r2, #15
 80005c8:	fb03 f202 	mul.w	r2, r3, r2
 80005cc:	883b      	ldrh	r3, [r7, #0]
 80005ce:	0a1b      	lsrs	r3, r3, #8
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	f003 030f 	and.w	r3, r3, #15
 80005d6:	8839      	ldrh	r1, [r7, #0]
 80005d8:	0a09      	lsrs	r1, r1, #8
 80005da:	b289      	uxth	r1, r1
 80005dc:	f001 010f 	and.w	r1, r1, #15
 80005e0:	fb01 f303 	mul.w	r3, r1, r3
 80005e4:	4413      	add	r3, r2
 80005e6:	ee07 3a90 	vmov	s15, r3
 80005ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005ee:	edc7 7a05 	vstr	s15, [r7, #20]
	float g = ((existing.value >> 4) & 0xF) * ((existing.value >> 4) & 0xF) + ((new.value >> 4) & 0xF) * ((new.value >> 4) & 0xF);
 80005f2:	88bb      	ldrh	r3, [r7, #4]
 80005f4:	091b      	lsrs	r3, r3, #4
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	88ba      	ldrh	r2, [r7, #4]
 80005fe:	0912      	lsrs	r2, r2, #4
 8000600:	b292      	uxth	r2, r2
 8000602:	f002 020f 	and.w	r2, r2, #15
 8000606:	fb03 f202 	mul.w	r2, r3, r2
 800060a:	883b      	ldrh	r3, [r7, #0]
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	b29b      	uxth	r3, r3
 8000610:	f003 030f 	and.w	r3, r3, #15
 8000614:	8839      	ldrh	r1, [r7, #0]
 8000616:	0909      	lsrs	r1, r1, #4
 8000618:	b289      	uxth	r1, r1
 800061a:	f001 010f 	and.w	r1, r1, #15
 800061e:	fb01 f303 	mul.w	r3, r1, r3
 8000622:	4413      	add	r3, r2
 8000624:	ee07 3a90 	vmov	s15, r3
 8000628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800062c:	edc7 7a04 	vstr	s15, [r7, #16]
	float b = ((existing.value >> 0) & 0xF) * ((existing.value >> 0) & 0xF) + ((new.value >> 0) & 0xF) * ((new.value >> 0) & 0xF);
 8000630:	88bb      	ldrh	r3, [r7, #4]
 8000632:	f003 030f 	and.w	r3, r3, #15
 8000636:	88ba      	ldrh	r2, [r7, #4]
 8000638:	f002 020f 	and.w	r2, r2, #15
 800063c:	fb03 f202 	mul.w	r2, r3, r2
 8000640:	883b      	ldrh	r3, [r7, #0]
 8000642:	f003 030f 	and.w	r3, r3, #15
 8000646:	8839      	ldrh	r1, [r7, #0]
 8000648:	f001 010f 	and.w	r1, r1, #15
 800064c:	fb01 f303 	mul.w	r3, r1, r3
 8000650:	4413      	add	r3, r2
 8000652:	ee07 3a90 	vmov	s15, r3
 8000656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800065a:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t R = sqrtf(r);
 800065e:	ed97 0a05 	vldr	s0, [r7, #20]
 8000662:	f005 fee1 	bl	8006428 <sqrtf>
 8000666:	eef0 7a40 	vmov.f32	s15, s0
 800066a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800066e:	ee17 3a90 	vmov	r3, s15
 8000672:	83fb      	strh	r3, [r7, #30]
	uint16_t G = sqrtf(g);
 8000674:	ed97 0a04 	vldr	s0, [r7, #16]
 8000678:	f005 fed6 	bl	8006428 <sqrtf>
 800067c:	eef0 7a40 	vmov.f32	s15, s0
 8000680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000684:	ee17 3a90 	vmov	r3, s15
 8000688:	83bb      	strh	r3, [r7, #28]
	uint16_t B = sqrtf(b);
 800068a:	ed97 0a03 	vldr	s0, [r7, #12]
 800068e:	f005 fecb 	bl	8006428 <sqrtf>
 8000692:	eef0 7a40 	vmov.f32	s15, s0
 8000696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800069a:	ee17 3a90 	vmov	r3, s15
 800069e:	837b      	strh	r3, [r7, #26]
	if(R > 0xF) R = 0xF;
 80006a0:	8bfb      	ldrh	r3, [r7, #30]
 80006a2:	2b0f      	cmp	r3, #15
 80006a4:	d901      	bls.n	80006aa <combineColors+0x126>
 80006a6:	230f      	movs	r3, #15
 80006a8:	83fb      	strh	r3, [r7, #30]
	if(G > 0xF) G = 0xF;
 80006aa:	8bbb      	ldrh	r3, [r7, #28]
 80006ac:	2b0f      	cmp	r3, #15
 80006ae:	d901      	bls.n	80006b4 <combineColors+0x130>
 80006b0:	230f      	movs	r3, #15
 80006b2:	83bb      	strh	r3, [r7, #28]
	if(B > 0xF) B = 0xF;
 80006b4:	8b7b      	ldrh	r3, [r7, #26]
 80006b6:	2b0f      	cmp	r3, #15
 80006b8:	d901      	bls.n	80006be <combineColors+0x13a>
 80006ba:	230f      	movs	r3, #15
 80006bc:	837b      	strh	r3, [r7, #26]
	Color ret;
	ret.value = R << 8 | G << 4 | B;
 80006be:	8bfb      	ldrh	r3, [r7, #30]
 80006c0:	021b      	lsls	r3, r3, #8
 80006c2:	b21a      	sxth	r2, r3
 80006c4:	8bbb      	ldrh	r3, [r7, #28]
 80006c6:	011b      	lsls	r3, r3, #4
 80006c8:	b21b      	sxth	r3, r3
 80006ca:	4313      	orrs	r3, r2
 80006cc:	b21a      	sxth	r2, r3
 80006ce:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80006d2:	4313      	orrs	r3, r2
 80006d4:	b21b      	sxth	r3, r3
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	813b      	strh	r3, [r7, #8]
	return ret;
 80006da:	893b      	ldrh	r3, [r7, #8]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3720      	adds	r7, #32
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <renderChar>:

void renderChar(char c, int h, int v, const Color background, const Color forground, const Sprite_map * font){
 80006e4:	b5b0      	push	{r4, r5, r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60b9      	str	r1, [r7, #8]
 80006ec:	607a      	str	r2, [r7, #4]
 80006ee:	81bb      	strh	r3, [r7, #12]
 80006f0:	4603      	mov	r3, r0
 80006f2:	73fb      	strb	r3, [r7, #15]
	if(h < -font->sprite_hori || h >= horiRes
 80006f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	425b      	negs	r3, r3
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	f2c0 80a1 	blt.w	8000844 <renderChar+0x160>
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000708:	f280 809c 	bge.w	8000844 <renderChar+0x160>
		|| v < -font->sprite_vert || v >= vertRes) return;//sprite is outside visible area
 800070c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800070e:	785b      	ldrb	r3, [r3, #1]
 8000710:	425b      	negs	r3, r3
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	429a      	cmp	r2, r3
 8000716:	f2c0 8095 	blt.w	8000844 <renderChar+0x160>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2bc7      	cmp	r3, #199	; 0xc7
 800071e:	f300 8091 	bgt.w	8000844 <renderChar+0x160>

	const uint8_t * data = font->data;
 8000722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000724:	3304      	adds	r3, #4
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t bitBuffer;
	uint8_t bitsRemaining;
	{
		uint32_t bitOffset = c * font->sprite_hori * font->sprite_vert + font->sprite_hori - 1;// 8 + 2
 8000728:	7bfb      	ldrb	r3, [r7, #15]
 800072a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800072c:	7812      	ldrb	r2, [r2, #0]
 800072e:	fb02 f303 	mul.w	r3, r2, r3
 8000732:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000734:	7852      	ldrb	r2, [r2, #1]
 8000736:	fb02 f303 	mul.w	r3, r2, r3
 800073a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800073c:	7812      	ldrb	r2, [r2, #0]
 800073e:	4413      	add	r3, r2
 8000740:	3b01      	subs	r3, #1
 8000742:	617b      	str	r3, [r7, #20]
		data += bitOffset / 8; // 0b10xx
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	08db      	lsrs	r3, r3, #3
 8000748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800074a:	4413      	add	r3, r2
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
		bitsRemaining = 8 - bitOffset % 8;
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	b2db      	uxtb	r3, r3
 8000752:	f003 0307 	and.w	r3, r3, #7
 8000756:	b2db      	uxtb	r3, r3
 8000758:	f1c3 0308 	rsb	r3, r3, #8
 800075c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		bitBuffer = *data >> (8 - bitsRemaining + 1);
 8000760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	461a      	mov	r2, r3
 8000766:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800076a:	f1c3 0309 	rsb	r3, r3, #9
 800076e:	fa42 f303 	asr.w	r3, r2, r3
 8000772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	for(int vpx = 0; vpx <  font->sprite_vert; vpx++){
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
 800077a:	e05c      	b.n	8000836 <renderChar+0x152>
		for(int hpx = 0; hpx <  font->sprite_hori; hpx++){
 800077c:	2300      	movs	r3, #0
 800077e:	61bb      	str	r3, [r7, #24]
 8000780:	e050      	b.n	8000824 <renderChar+0x140>
			if(bitsRemaining == 0){//out of pixel data load more
 8000782:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000786:	2b00      	cmp	r3, #0
 8000788:	d109      	bne.n	800079e <renderChar+0xba>
				bitBuffer = *data;
 800078a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				data++;
 8000792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000794:	3301      	adds	r3, #1
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
				bitsRemaining = 8;
 8000798:	2308      	movs	r3, #8
 800079a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			}
			if(		!(v + vpx < 0 || v + vpx >= vertRes) &&//row is outside screen
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	4413      	add	r3, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	db30      	blt.n	800080a <renderChar+0x126>
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	4413      	add	r3, r2
 80007ae:	2bc7      	cmp	r3, #199	; 0xc7
 80007b0:	dc2b      	bgt.n	800080a <renderChar+0x126>
					!(h + hpx < 0 || h + hpx >= horiRes)){ //pixel is outside screen
 80007b2:	68ba      	ldr	r2, [r7, #8]
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	4413      	add	r3, r2
			if(		!(v + vpx < 0 || v + vpx >= vertRes) &&//row is outside screen
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	db26      	blt.n	800080a <renderChar+0x126>
					!(h + hpx < 0 || h + hpx >= horiRes)){ //pixel is outside screen
 80007bc:	68ba      	ldr	r2, [r7, #8]
 80007be:	69bb      	ldr	r3, [r7, #24]
 80007c0:	4413      	add	r3, r2
 80007c2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80007c6:	da20      	bge.n	800080a <renderChar+0x126>
				uint32_t pos = (v + vpx) * horiRes + h + hpx;
 80007c8:	687a      	ldr	r2, [r7, #4]
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	441a      	add	r2, r3
 80007ce:	4613      	mov	r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	4413      	add	r3, r2
 80007d4:	019b      	lsls	r3, r3, #6
 80007d6:	461a      	mov	r2, r3
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	441a      	add	r2, r3
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	4413      	add	r3, r2
 80007e0:	613b      	str	r3, [r7, #16]
				screenBuff[pos] = combineColors(screenBuff[pos], bitBuffer&1 ? forground : background);
 80007e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <renderChar+0x10e>
 80007ee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80007f0:	e000      	b.n	80007f4 <renderChar+0x110>
 80007f2:	89bb      	ldrh	r3, [r7, #12]
 80007f4:	4d15      	ldr	r5, [pc, #84]	; (800084c <renderChar+0x168>)
 80007f6:	693c      	ldr	r4, [r7, #16]
 80007f8:	4814      	ldr	r0, [pc, #80]	; (800084c <renderChar+0x168>)
 80007fa:	693a      	ldr	r2, [r7, #16]
 80007fc:	4619      	mov	r1, r3
 80007fe:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
 8000802:	f7ff febf 	bl	8000584 <combineColors>
 8000806:	f825 0014 	strh.w	r0, [r5, r4, lsl #1]
			}
			bitsRemaining--;
 800080a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800080e:	3b01      	subs	r3, #1
 8000810:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			bitBuffer >>= 1;
 8000814:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		for(int hpx = 0; hpx <  font->sprite_hori; hpx++){
 800081e:	69bb      	ldr	r3, [r7, #24]
 8000820:	3301      	adds	r3, #1
 8000822:	61bb      	str	r3, [r7, #24]
 8000824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	69bb      	ldr	r3, [r7, #24]
 800082c:	4293      	cmp	r3, r2
 800082e:	dba8      	blt.n	8000782 <renderChar+0x9e>
	for(int vpx = 0; vpx <  font->sprite_vert; vpx++){
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	3301      	adds	r3, #1
 8000834:	61fb      	str	r3, [r7, #28]
 8000836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000838:	785b      	ldrb	r3, [r3, #1]
 800083a:	461a      	mov	r2, r3
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	4293      	cmp	r3, r2
 8000840:	db9c      	blt.n	800077c <renderChar+0x98>
 8000842:	e000      	b.n	8000846 <renderChar+0x162>
		|| v < -font->sprite_vert || v >= vertRes) return;//sprite is outside visible area
 8000844:	bf00      	nop
		}
	}
}
 8000846:	3728      	adds	r7, #40	; 0x28
 8000848:	46bd      	mov	sp, r7
 800084a:	bdb0      	pop	{r4, r5, r7, pc}
 800084c:	200008bc 	.word	0x200008bc

08000850 <renderString>:

void renderString(char * str, int h, int v, const Color background, const Color forground, const Sprite_map * font){
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af02      	add	r7, sp, #8
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
 800085c:	803b      	strh	r3, [r7, #0]
	while(*str != 0){
 800085e:	e014      	b.n	800088a <renderString+0x3a>
		renderChar(*str, h, v, background, forground, font);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	7818      	ldrb	r0, [r3, #0]
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	9301      	str	r3, [sp, #4]
 8000868:	8b3b      	ldrh	r3, [r7, #24]
 800086a:	f8ad 3000 	strh.w	r3, [sp]
 800086e:	883b      	ldrh	r3, [r7, #0]
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	68b9      	ldr	r1, [r7, #8]
 8000874:	f7ff ff36 	bl	80006e4 <renderChar>
		h += font->sprite_hori;
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	461a      	mov	r2, r3
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	4413      	add	r3, r2
 8000882:	60bb      	str	r3, [r7, #8]
		str++;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	3301      	adds	r3, #1
 8000888:	60fb      	str	r3, [r7, #12]
	while(*str != 0){
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d1e6      	bne.n	8000860 <renderString+0x10>
	}
}
 8000892:	bf00      	nop
 8000894:	bf00      	nop
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <HAL_TIM_PeriodElapsedCallback>:
	HAL_UART_Transmit(&huart2, (uint8_t*) str, sizeof(str), HAL_MAX_DELAY);
}

int lastLine = -100;
uint32_t profileCount = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	if(htim == &htim5){
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a0f      	ldr	r2, [pc, #60]	; (80008e4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d116      	bne.n	80008da <HAL_TIM_PeriodElapsedCallback+0x3e>
		str_len = sprintf(str, "Profile %8lu ticks clock\t line %i\r\n", profileCount, lineCount);
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <HAL_TIM_PeriodElapsedCallback+0x50>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	490e      	ldr	r1, [pc, #56]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80008b6:	480f      	ldr	r0, [pc, #60]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80008b8:	f005 f948 	bl	8005b4c <siprintf>
 80008bc:	4603      	mov	r3, r0
 80008be:	b29a      	uxth	r2, r3
 80008c0:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80008c2:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80008c6:	881a      	ldrh	r2, [r3, #0]
 80008c8:	f04f 33ff 	mov.w	r3, #4294967295
 80008cc:	4909      	ldr	r1, [pc, #36]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80008ce:	480b      	ldr	r0, [pc, #44]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x60>)
 80008d0:	f004 fd95 	bl	80053fe <HAL_UART_Transmit>
		profileCount = 0;
 80008d4:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
	}
	return;
 80008da:	bf00      	nop
	if(htim == &htim5){
		timerReset();
	}else if(htim == &htim1){
		timerReset();
	}
}
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200000d4 	.word	0x200000d4
 80008e8:	20000274 	.word	0x20000274
 80008ec:	20000b64 	.word	0x20000b64
 80008f0:	08006494 	.word	0x08006494
 80008f4:	20000220 	.word	0x20000220
 80008f8:	20000272 	.word	0x20000272
 80008fc:	2000017c 	.word	0x2000017c

08000900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b0a4      	sub	sp, #144	; 0x90
 8000904:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000906:	f001 f8f1 	bl	8001aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090a:	f000 f9c7 	bl	8000c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090e:	f000 fb9f 	bl	8001050 <MX_GPIO_Init>
  MX_DMA_Init();
 8000912:	f000 fb45 	bl	8000fa0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000916:	f000 fb19 	bl	8000f4c <MX_USART2_UART_Init>
  MX_TIM5_Init();
 800091a:	f000 fac9 	bl	8000eb0 <MX_TIM5_Init>
  MX_TIM1_Init();
 800091e:	f000 fa27 	bl	8000d70 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	char str[81] = { '\0' };
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	224d      	movs	r2, #77	; 0x4d
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f005 f904 	bl	8005b3c <memset>
	uint16_t str_len = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	str_len = sprintf(str, "Starting up!\r\n");
 800093a:	f107 0308 	add.w	r3, r7, #8
 800093e:	4955      	ldr	r1, [pc, #340]	; (8000a94 <main+0x194>)
 8000940:	4618      	mov	r0, r3
 8000942:	f005 f903 	bl	8005b4c <siprintf>
 8000946:	4603      	mov	r3, r0
 8000948:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800094c:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8000950:	f107 0108 	add.w	r1, r7, #8
 8000954:	f04f 33ff 	mov.w	r3, #4294967295
 8000958:	484f      	ldr	r0, [pc, #316]	; (8000a98 <main+0x198>)
 800095a:	f004 fd50 	bl	80053fe <HAL_UART_Transmit>

	vgaSetup(&htim1, &hdma_tim1_up, &hdma_memtomem_dma2_stream0, vgaPin13_Vsync_GPIO_Port, vgaPin13_Vsync_Pin);
 800095e:	2302      	movs	r3, #2
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	4b4e      	ldr	r3, [pc, #312]	; (8000a9c <main+0x19c>)
 8000964:	4a4e      	ldr	r2, [pc, #312]	; (8000aa0 <main+0x1a0>)
 8000966:	494f      	ldr	r1, [pc, #316]	; (8000aa4 <main+0x1a4>)
 8000968:	484f      	ldr	r0, [pc, #316]	; (8000aa8 <main+0x1a8>)
 800096a:	f000 ff59 	bl	8001820 <vgaSetup>
	registerHUARTvga(&huart2);
 800096e:	484a      	ldr	r0, [pc, #296]	; (8000a98 <main+0x198>)
 8000970:	f000 fdb4 	bl	80014dc <registerHUARTvga>

	vgaStart();//start VGA driver
 8000974:	f001 f82c 	bl	80019d0 <vgaStart>
	HAL_Delay(500);//delay rendering for monitor sync
 8000978:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800097c:	f001 f928 	bl	8001bd0 <HAL_Delay>
	int cCounter = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	for(int i = 0; i < vertRes; i++){//load a rainbow test pattern
 8000986:	2300      	movs	r3, #0
 8000988:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800098c:	e06d      	b.n	8000a6a <main+0x16a>
		for(int j = 0; j < horiRes; j++){
 800098e:	2300      	movs	r3, #0
 8000990:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000992:	e010      	b.n	80009b6 <main+0xb6>
			screenBuff[i*horiRes + j] = ColorWhite;
 8000994:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000998:	4613      	mov	r3, r2
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	4413      	add	r3, r2
 800099e:	019b      	lsls	r3, r3, #6
 80009a0:	461a      	mov	r2, r3
 80009a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80009a4:	4413      	add	r3, r2
 80009a6:	4941      	ldr	r1, [pc, #260]	; (8000aac <main+0x1ac>)
 80009a8:	4a41      	ldr	r2, [pc, #260]	; (8000ab0 <main+0x1b0>)
 80009aa:	8812      	ldrh	r2, [r2, #0]
 80009ac:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j = 0; j < horiRes; j++){
 80009b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80009b2:	3301      	adds	r3, #1
 80009b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80009b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80009b8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80009bc:	dbea      	blt.n	8000994 <main+0x94>
			//screenBuff[i*vertRes + j].value = j & 0b111111;
		}

		screenBuff[i*horiRes + 4] = ColorRed;
 80009be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80009c2:	4613      	mov	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	4413      	add	r3, r2
 80009c8:	019b      	lsls	r3, r3, #6
 80009ca:	3304      	adds	r3, #4
 80009cc:	4937      	ldr	r1, [pc, #220]	; (8000aac <main+0x1ac>)
 80009ce:	4a39      	ldr	r2, [pc, #228]	; (8000ab4 <main+0x1b4>)
 80009d0:	8812      	ldrh	r2, [r2, #0]
 80009d2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		screenBuff[i*horiRes + 5] = ColorGreen;
 80009d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80009da:	4613      	mov	r3, r2
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	4413      	add	r3, r2
 80009e0:	019b      	lsls	r3, r3, #6
 80009e2:	3305      	adds	r3, #5
 80009e4:	4931      	ldr	r1, [pc, #196]	; (8000aac <main+0x1ac>)
 80009e6:	4a34      	ldr	r2, [pc, #208]	; (8000ab8 <main+0x1b8>)
 80009e8:	8812      	ldrh	r2, [r2, #0]
 80009ea:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		screenBuff[i*horiRes + 6] = ColorBlue;
 80009ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80009f2:	4613      	mov	r3, r2
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	4413      	add	r3, r2
 80009f8:	019b      	lsls	r3, r3, #6
 80009fa:	3306      	adds	r3, #6
 80009fc:	492b      	ldr	r1, [pc, #172]	; (8000aac <main+0x1ac>)
 80009fe:	4a2f      	ldr	r2, [pc, #188]	; (8000abc <main+0x1bc>)
 8000a00:	8812      	ldrh	r2, [r2, #0]
 8000a02:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j = 0; j<=0xF && 8+j < horiRes ;j++){
 8000a06:	2300      	movs	r3, #0
 8000a08:	67bb      	str	r3, [r7, #120]	; 0x78
 8000a0a:	e022      	b.n	8000a52 <main+0x152>
			screenBuff[i*horiRes + 8 + j].value = (j + ((i&0xFF)<<4)) & 0xFFF;
 8000a0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000a10:	011b      	lsls	r3, r3, #4
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	4413      	add	r3, r2
 8000a20:	b299      	uxth	r1, r3
 8000a22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000a26:	4613      	mov	r3, r2
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	4413      	add	r3, r2
 8000a2c:	019b      	lsls	r3, r3, #6
 8000a2e:	f103 0208 	add.w	r2, r3, #8
 8000a32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a34:	4413      	add	r3, r2
 8000a36:	f3c1 020b 	ubfx	r2, r1, #0, #12
 8000a3a:	b291      	uxth	r1, r2
 8000a3c:	4a1b      	ldr	r2, [pc, #108]	; (8000aac <main+0x1ac>)
 8000a3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			cCounter++;
 8000a42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000a46:	3301      	adds	r3, #1
 8000a48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		for(int j = 0; j<=0xF && 8+j < horiRes ;j++){
 8000a4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a4e:	3301      	adds	r3, #1
 8000a50:	67bb      	str	r3, [r7, #120]	; 0x78
 8000a52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a54:	2b0f      	cmp	r3, #15
 8000a56:	dc03      	bgt.n	8000a60 <main+0x160>
 8000a58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a5a:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8000a5e:	dbd5      	blt.n	8000a0c <main+0x10c>
	for(int i = 0; i < vertRes; i++){//load a rainbow test pattern
 8000a60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000a64:	3301      	adds	r3, #1
 8000a66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000a6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000a6e:	2bc7      	cmp	r3, #199	; 0xc7
 8000a70:	dd8d      	ble.n	800098e <main+0x8e>
		}
	}

	//Write test text
	Color textColor = ColorBlack;
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <main+0x1c0>)
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	80bb      	strh	r3, [r7, #4]
	//vgaUpscale;
	int h = 10, w = 30, x = 64+8+8, y = 10;
 8000a78:	230a      	movs	r3, #10
 8000a7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8000a7c:	231e      	movs	r3, #30
 8000a7e:	667b      	str	r3, [r7, #100]	; 0x64
 8000a80:	2350      	movs	r3, #80	; 0x50
 8000a82:	663b      	str	r3, [r7, #96]	; 0x60
 8000a84:	230a      	movs	r3, #10
 8000a86:	65fb      	str	r3, [r7, #92]	; 0x5c
	for(int i = y; i < vertRes && i < y+h; i++){//render a black rectangle
 8000a88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a8a:	677b      	str	r3, [r7, #116]	; 0x74
 8000a8c:	e036      	b.n	8000afc <main+0x1fc>
		for(int j = x; j < horiRes && j < x+w; j++){
 8000a8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a90:	673b      	str	r3, [r7, #112]	; 0x70
 8000a92:	e026      	b.n	8000ae2 <main+0x1e2>
 8000a94:	08006508 	.word	0x08006508
 8000a98:	2000017c 	.word	0x2000017c
 8000a9c:	40020000 	.word	0x40020000
 8000aa0:	200001c0 	.word	0x200001c0
 8000aa4:	2000011c 	.word	0x2000011c
 8000aa8:	2000008c 	.word	0x2000008c
 8000aac:	200008bc 	.word	0x200008bc
 8000ab0:	0800777c 	.word	0x0800777c
 8000ab4:	08007784 	.word	0x08007784
 8000ab8:	08007788 	.word	0x08007788
 8000abc:	0800778c 	.word	0x0800778c
 8000ac0:	08007780 	.word	0x08007780
			screenBuff[i*horiRes + j] = textColor;
 8000ac4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	4413      	add	r3, r2
 8000acc:	019b      	lsls	r3, r3, #6
 8000ace:	461a      	mov	r2, r3
 8000ad0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4968      	ldr	r1, [pc, #416]	; (8000c78 <main+0x378>)
 8000ad6:	88ba      	ldrh	r2, [r7, #4]
 8000ad8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j = x; j < horiRes && j < x+w; j++){
 8000adc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ade:	3301      	adds	r3, #1
 8000ae0:	673b      	str	r3, [r7, #112]	; 0x70
 8000ae2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ae4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000ae8:	da05      	bge.n	8000af6 <main+0x1f6>
 8000aea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000aec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000aee:	4413      	add	r3, r2
 8000af0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000af2:	429a      	cmp	r2, r3
 8000af4:	dbe6      	blt.n	8000ac4 <main+0x1c4>
	for(int i = y; i < vertRes && i < y+h; i++){//render a black rectangle
 8000af6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000af8:	3301      	adds	r3, #1
 8000afa:	677b      	str	r3, [r7, #116]	; 0x74
 8000afc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000afe:	2bc7      	cmp	r3, #199	; 0xc7
 8000b00:	dc05      	bgt.n	8000b0e <main+0x20e>
 8000b02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000b04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b06:	4413      	add	r3, r2
 8000b08:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	dbbf      	blt.n	8000a8e <main+0x18e>
		}
	}
	y+=codepage_437.sprite_vert;
 8000b0e:	4b5b      	ldr	r3, [pc, #364]	; (8000c7c <main+0x37c>)
 8000b10:	785b      	ldrb	r3, [r3, #1]
 8000b12:	461a      	mov	r2, r3
 8000b14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b16:	4413      	add	r3, r2
 8000b18:	65fb      	str	r3, [r7, #92]	; 0x5c
	//renderString(str, h, v, background, forground)
	renderString("Hi", x, y, ColorTransparant, textColor, &codepage_437);
 8000b1a:	4a59      	ldr	r2, [pc, #356]	; (8000c80 <main+0x380>)
 8000b1c:	4b57      	ldr	r3, [pc, #348]	; (8000c7c <main+0x37c>)
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	88bb      	ldrh	r3, [r7, #4]
 8000b22:	f8ad 3000 	strh.w	r3, [sp]
 8000b26:	8813      	ldrh	r3, [r2, #0]
 8000b28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000b2a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000b2c:	4855      	ldr	r0, [pc, #340]	; (8000c84 <main+0x384>)
 8000b2e:	f7ff fe8f 	bl	8000850 <renderString>

	y+=codepage_437.sprite_vert;
 8000b32:	4b52      	ldr	r3, [pc, #328]	; (8000c7c <main+0x37c>)
 8000b34:	785b      	ldrb	r3, [r3, #1]
 8000b36:	461a      	mov	r2, r3
 8000b38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b3a:	4413      	add	r3, r2
 8000b3c:	65fb      	str	r3, [r7, #92]	; 0x5c
	renderString("Hello world!", x, y, ColorTransparant, textColor, &codepage_437);
 8000b3e:	4a50      	ldr	r2, [pc, #320]	; (8000c80 <main+0x380>)
 8000b40:	4b4e      	ldr	r3, [pc, #312]	; (8000c7c <main+0x37c>)
 8000b42:	9301      	str	r3, [sp, #4]
 8000b44:	88bb      	ldrh	r3, [r7, #4]
 8000b46:	f8ad 3000 	strh.w	r3, [sp]
 8000b4a:	8813      	ldrh	r3, [r2, #0]
 8000b4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000b4e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000b50:	484d      	ldr	r0, [pc, #308]	; (8000c88 <main+0x388>)
 8000b52:	f7ff fe7d 	bl	8000850 <renderString>
	y+=codepage_437.sprite_vert;
 8000b56:	4b49      	ldr	r3, [pc, #292]	; (8000c7c <main+0x37c>)
 8000b58:	785b      	ldrb	r3, [r3, #1]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b5e:	4413      	add	r3, r2
 8000b60:	65fb      	str	r3, [r7, #92]	; 0x5c
	renderString("Press <any> key for TTY", x, y, ColorTransparant, textColor, &codepage_437);
 8000b62:	4a47      	ldr	r2, [pc, #284]	; (8000c80 <main+0x380>)
 8000b64:	4b45      	ldr	r3, [pc, #276]	; (8000c7c <main+0x37c>)
 8000b66:	9301      	str	r3, [sp, #4]
 8000b68:	88bb      	ldrh	r3, [r7, #4]
 8000b6a:	f8ad 3000 	strh.w	r3, [sp]
 8000b6e:	8813      	ldrh	r3, [r2, #0]
 8000b70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000b72:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000b74:	4845      	ldr	r0, [pc, #276]	; (8000c8c <main+0x38c>)
 8000b76:	f7ff fe6b 	bl	8000850 <renderString>
	y+=codepage_437.sprite_vert;
 8000b7a:	4b40      	ldr	r3, [pc, #256]	; (8000c7c <main+0x37c>)
 8000b7c:	785b      	ldrb	r3, [r3, #1]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b82:	4413      	add	r3, r2
 8000b84:	65fb      	str	r3, [r7, #92]	; 0x5c
	renderChar(177, x, y, ColorTransparant, textColor, &codepage_437);
 8000b86:	4a3e      	ldr	r2, [pc, #248]	; (8000c80 <main+0x380>)
 8000b88:	4b3c      	ldr	r3, [pc, #240]	; (8000c7c <main+0x37c>)
 8000b8a:	9301      	str	r3, [sp, #4]
 8000b8c:	88bb      	ldrh	r3, [r7, #4]
 8000b8e:	f8ad 3000 	strh.w	r3, [sp]
 8000b92:	8813      	ldrh	r3, [r2, #0]
 8000b94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000b96:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000b98:	20b1      	movs	r0, #177	; 0xb1
 8000b9a:	f7ff fda3 	bl	80006e4 <renderChar>

	y+=codepage_437.sprite_vert;//test patterns
 8000b9e:	4b37      	ldr	r3, [pc, #220]	; (8000c7c <main+0x37c>)
 8000ba0:	785b      	ldrb	r3, [r3, #1]
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ba6:	4413      	add	r3, r2
 8000ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
	renderChar(201, x, y, ColorTransparant, textColor, &codepage_437);
 8000baa:	4a35      	ldr	r2, [pc, #212]	; (8000c80 <main+0x380>)
 8000bac:	4b33      	ldr	r3, [pc, #204]	; (8000c7c <main+0x37c>)
 8000bae:	9301      	str	r3, [sp, #4]
 8000bb0:	88bb      	ldrh	r3, [r7, #4]
 8000bb2:	f8ad 3000 	strh.w	r3, [sp]
 8000bb6:	8813      	ldrh	r3, [r2, #0]
 8000bb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000bba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000bbc:	20c9      	movs	r0, #201	; 0xc9
 8000bbe:	f7ff fd91 	bl	80006e4 <renderChar>
	renderChar(187, x + codepage_437.sprite_hori, y, ColorTransparant, textColor, &codepage_437);
 8000bc2:	4b2e      	ldr	r3, [pc, #184]	; (8000c7c <main+0x37c>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000bca:	18d1      	adds	r1, r2, r3
 8000bcc:	4a2c      	ldr	r2, [pc, #176]	; (8000c80 <main+0x380>)
 8000bce:	4b2b      	ldr	r3, [pc, #172]	; (8000c7c <main+0x37c>)
 8000bd0:	9301      	str	r3, [sp, #4]
 8000bd2:	88bb      	ldrh	r3, [r7, #4]
 8000bd4:	f8ad 3000 	strh.w	r3, [sp]
 8000bd8:	8813      	ldrh	r3, [r2, #0]
 8000bda:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000bdc:	20bb      	movs	r0, #187	; 0xbb
 8000bde:	f7ff fd81 	bl	80006e4 <renderChar>
	renderChar(186, x + 2*codepage_437.sprite_hori, y, ColorTransparant, textColor, &codepage_437);
 8000be2:	4b26      	ldr	r3, [pc, #152]	; (8000c7c <main+0x37c>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	005a      	lsls	r2, r3, #1
 8000be8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000bea:	18d1      	adds	r1, r2, r3
 8000bec:	4a24      	ldr	r2, [pc, #144]	; (8000c80 <main+0x380>)
 8000bee:	4b23      	ldr	r3, [pc, #140]	; (8000c7c <main+0x37c>)
 8000bf0:	9301      	str	r3, [sp, #4]
 8000bf2:	88bb      	ldrh	r3, [r7, #4]
 8000bf4:	f8ad 3000 	strh.w	r3, [sp]
 8000bf8:	8813      	ldrh	r3, [r2, #0]
 8000bfa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000bfc:	20ba      	movs	r0, #186	; 0xba
 8000bfe:	f7ff fd71 	bl	80006e4 <renderChar>
	y+=codepage_437.sprite_vert;
 8000c02:	4b1e      	ldr	r3, [pc, #120]	; (8000c7c <main+0x37c>)
 8000c04:	785b      	ldrb	r3, [r3, #1]
 8000c06:	461a      	mov	r2, r3
 8000c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c0a:	4413      	add	r3, r2
 8000c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
	renderChar(200, x, y, ColorTransparant, textColor, &codepage_437);
 8000c0e:	4a1c      	ldr	r2, [pc, #112]	; (8000c80 <main+0x380>)
 8000c10:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <main+0x37c>)
 8000c12:	9301      	str	r3, [sp, #4]
 8000c14:	88bb      	ldrh	r3, [r7, #4]
 8000c16:	f8ad 3000 	strh.w	r3, [sp]
 8000c1a:	8813      	ldrh	r3, [r2, #0]
 8000c1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000c1e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000c20:	20c8      	movs	r0, #200	; 0xc8
 8000c22:	f7ff fd5f 	bl	80006e4 <renderChar>
	renderChar(188, x + codepage_437.sprite_hori, y, ColorTransparant, textColor, &codepage_437);
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <main+0x37c>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c2e:	18d1      	adds	r1, r2, r3
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <main+0x380>)
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <main+0x37c>)
 8000c34:	9301      	str	r3, [sp, #4]
 8000c36:	88bb      	ldrh	r3, [r7, #4]
 8000c38:	f8ad 3000 	strh.w	r3, [sp]
 8000c3c:	8813      	ldrh	r3, [r2, #0]
 8000c3e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000c40:	20bc      	movs	r0, #188	; 0xbc
 8000c42:	f7ff fd4f 	bl	80006e4 <renderChar>

	str_len = sprintf(str, "\r\nDone\r\n");
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	4911      	ldr	r1, [pc, #68]	; (8000c90 <main+0x390>)
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f004 ff7d 	bl	8005b4c <siprintf>
 8000c52:	4603      	mov	r3, r0
 8000c54:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8000c58:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8000c5c:	f107 0108 	add.w	r1, r7, #8
 8000c60:	f04f 33ff 	mov.w	r3, #4294967295
 8000c64:	480b      	ldr	r0, [pc, #44]	; (8000c94 <main+0x394>)
 8000c66:	f004 fbca 	bl	80053fe <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
	//makeRainbow();
	//runTTY();
	while (1)
	{
		profileCount++;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <main+0x398>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	4a09      	ldr	r2, [pc, #36]	; (8000c98 <main+0x398>)
 8000c72:	6013      	str	r3, [r2, #0]
 8000c74:	e7f9      	b.n	8000c6a <main+0x36a>
 8000c76:	bf00      	nop
 8000c78:	200008bc 	.word	0x200008bc
 8000c7c:	08006570 	.word	0x08006570
 8000c80:	08007774 	.word	0x08007774
 8000c84:	08006518 	.word	0x08006518
 8000c88:	0800651c 	.word	0x0800651c
 8000c8c:	0800652c 	.word	0x0800652c
 8000c90:	08006544 	.word	0x08006544
 8000c94:	2000017c 	.word	0x2000017c
 8000c98:	20000274 	.word	0x20000274

08000c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b094      	sub	sp, #80	; 0x50
 8000ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca2:	f107 0320 	add.w	r3, r7, #32
 8000ca6:	2230      	movs	r2, #48	; 0x30
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f004 ff46 	bl	8005b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	4b28      	ldr	r3, [pc, #160]	; (8000d68 <SystemClock_Config+0xcc>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc8:	4a27      	ldr	r2, [pc, #156]	; (8000d68 <SystemClock_Config+0xcc>)
 8000cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cce:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd0:	4b25      	ldr	r3, [pc, #148]	; (8000d68 <SystemClock_Config+0xcc>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cdc:	2300      	movs	r3, #0
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	4b22      	ldr	r3, [pc, #136]	; (8000d6c <SystemClock_Config+0xd0>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ce8:	4a20      	ldr	r2, [pc, #128]	; (8000d6c <SystemClock_Config+0xd0>)
 8000cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cee:	6013      	str	r3, [r2, #0]
 8000cf0:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <SystemClock_Config+0xd0>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d00:	2301      	movs	r3, #1
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d04:	2310      	movs	r3, #16
 8000d06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d10:	2308      	movs	r3, #8
 8000d12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 151;
 8000d14:	2397      	movs	r3, #151	; 0x97
 8000d16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d1c:	2307      	movs	r3, #7
 8000d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d20:	f107 0320 	add.w	r3, r7, #32
 8000d24:	4618      	mov	r0, r3
 8000d26:	f002 fed3 	bl	8003ad0 <HAL_RCC_OscConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d30:	f000 fa20 	bl	8001174 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d34:	230f      	movs	r3, #15
 8000d36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	2102      	movs	r1, #2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f003 f935 	bl	8003fc0 <HAL_RCC_ClockConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d5c:	f000 fa0a 	bl	8001174 <Error_Handler>
  }
}
 8000d60:	bf00      	nop
 8000d62:	3750      	adds	r7, #80	; 0x50
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40007000 	.word	0x40007000

08000d70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b096      	sub	sp, #88	; 0x58
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d76:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]
 8000d9e:	615a      	str	r2, [r3, #20]
 8000da0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2220      	movs	r2, #32
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f004 fec7 	bl	8005b3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dae:	4b3e      	ldr	r3, [pc, #248]	; (8000ea8 <MX_TIM1_Init+0x138>)
 8000db0:	4a3e      	ldr	r2, [pc, #248]	; (8000eac <MX_TIM1_Init+0x13c>)
 8000db2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = vgaUpscale-1;
 8000db4:	4b3c      	ldr	r3, [pc, #240]	; (8000ea8 <MX_TIM1_Init+0x138>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dba:	4b3b      	ldr	r3, [pc, #236]	; (8000ea8 <MX_TIM1_Init+0x138>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3-1;
 8000dc0:	4b39      	ldr	r3, [pc, #228]	; (8000ea8 <MX_TIM1_Init+0x138>)
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc6:	4b38      	ldr	r3, [pc, #224]	; (8000ea8 <MX_TIM1_Init+0x138>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dcc:	4b36      	ldr	r3, [pc, #216]	; (8000ea8 <MX_TIM1_Init+0x138>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dd2:	4b35      	ldr	r3, [pc, #212]	; (8000ea8 <MX_TIM1_Init+0x138>)
 8000dd4:	2280      	movs	r2, #128	; 0x80
 8000dd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dd8:	4833      	ldr	r0, [pc, #204]	; (8000ea8 <MX_TIM1_Init+0x138>)
 8000dda:	f003 fb11 	bl	8004400 <HAL_TIM_Base_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000de4:	f000 f9c6 	bl	8001174 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000df2:	4619      	mov	r1, r3
 8000df4:	482c      	ldr	r0, [pc, #176]	; (8000ea8 <MX_TIM1_Init+0x138>)
 8000df6:	f003 fe25 	bl	8004a44 <HAL_TIM_ConfigClockSource>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000e00:	f000 f9b8 	bl	8001174 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e04:	4828      	ldr	r0, [pc, #160]	; (8000ea8 <MX_TIM1_Init+0x138>)
 8000e06:	f003 fb4a 	bl	800449e <HAL_TIM_PWM_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000e10:	f000 f9b0 	bl	8001174 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e14:	2300      	movs	r3, #0
 8000e16:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e20:	4619      	mov	r1, r3
 8000e22:	4821      	ldr	r0, [pc, #132]	; (8000ea8 <MX_TIM1_Init+0x138>)
 8000e24:	f004 f9ca 	bl	80051bc <HAL_TIMEx_MasterConfigSynchronization>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000e2e:	f000 f9a1 	bl	8001174 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e32:	2360      	movs	r3, #96	; 0x60
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 8000e36:	2302      	movs	r3, #2
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e52:	2200      	movs	r2, #0
 8000e54:	4619      	mov	r1, r3
 8000e56:	4814      	ldr	r0, [pc, #80]	; (8000ea8 <MX_TIM1_Init+0x138>)
 8000e58:	f003 fd32 	bl	80048c0 <HAL_TIM_PWM_ConfigChannel>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000e62:	f000 f987 	bl	8001174 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	4619      	mov	r1, r3
 8000e88:	4807      	ldr	r0, [pc, #28]	; (8000ea8 <MX_TIM1_Init+0x138>)
 8000e8a:	f004 fa05 	bl	8005298 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000e94:	f000 f96e 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e98:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <MX_TIM1_Init+0x138>)
 8000e9a:	f000 fa17 	bl	80012cc <HAL_TIM_MspPostInit>

}
 8000e9e:	bf00      	nop
 8000ea0:	3758      	adds	r7, #88	; 0x58
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	2000008c 	.word	0x2000008c
 8000eac:	40010000 	.word	0x40010000

08000eb0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eb6:	f107 0308 	add.w	r3, r7, #8
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <MX_TIM5_Init+0x94>)
 8000ece:	4a1e      	ldr	r2, [pc, #120]	; (8000f48 <MX_TIM5_Init+0x98>)
 8000ed0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 7550-1;
 8000ed2:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <MX_TIM5_Init+0x94>)
 8000ed4:	f641 527d 	movw	r2, #7549	; 0x1d7d
 8000ed8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eda:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <MX_TIM5_Init+0x94>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 8000ee0:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <MX_TIM5_Init+0x94>)
 8000ee2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ee6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <MX_TIM5_Init+0x94>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <MX_TIM5_Init+0x94>)
 8000ef0:	2280      	movs	r2, #128	; 0x80
 8000ef2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000ef4:	4813      	ldr	r0, [pc, #76]	; (8000f44 <MX_TIM5_Init+0x94>)
 8000ef6:	f003 fa83 	bl	8004400 <HAL_TIM_Base_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000f00:	f000 f938 	bl	8001174 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f0a:	f107 0308 	add.w	r3, r7, #8
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480c      	ldr	r0, [pc, #48]	; (8000f44 <MX_TIM5_Init+0x94>)
 8000f12:	f003 fd97 	bl	8004a44 <HAL_TIM_ConfigClockSource>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000f1c:	f000 f92a 	bl	8001174 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f20:	2300      	movs	r3, #0
 8000f22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f28:	463b      	mov	r3, r7
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4805      	ldr	r0, [pc, #20]	; (8000f44 <MX_TIM5_Init+0x94>)
 8000f2e:	f004 f945 	bl	80051bc <HAL_TIMEx_MasterConfigSynchronization>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000f38:	f000 f91c 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200000d4 	.word	0x200000d4
 8000f48:	40000c00 	.word	0x40000c00

08000f4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_USART2_UART_Init+0x4c>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <MX_USART2_UART_Init+0x50>)
 8000f54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <MX_USART2_UART_Init+0x4c>)
 8000f58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_USART2_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <MX_USART2_UART_Init+0x4c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <MX_USART2_UART_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MX_USART2_UART_Init+0x4c>)
 8000f72:	220c      	movs	r2, #12
 8000f74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <MX_USART2_UART_Init+0x4c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_USART2_UART_Init+0x4c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_USART2_UART_Init+0x4c>)
 8000f84:	f004 f9ee 	bl	8005364 <HAL_UART_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f8e:	f000 f8f1 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	2000017c 	.word	0x2000017c
 8000f9c:	40004400 	.word	0x40004400

08000fa0 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	4b26      	ldr	r3, [pc, #152]	; (8001044 <MX_DMA_Init+0xa4>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a25      	ldr	r2, [pc, #148]	; (8001044 <MX_DMA_Init+0xa4>)
 8000fb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b23      	ldr	r3, [pc, #140]	; (8001044 <MX_DMA_Init+0xa4>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000fc2:	4b21      	ldr	r3, [pc, #132]	; (8001048 <MX_DMA_Init+0xa8>)
 8000fc4:	4a21      	ldr	r2, [pc, #132]	; (800104c <MX_DMA_Init+0xac>)
 8000fc6:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000fc8:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <MX_DMA_Init+0xa8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000fce:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <MX_DMA_Init+0xa8>)
 8000fd0:	2280      	movs	r2, #128	; 0x80
 8000fd2:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <MX_DMA_Init+0xa8>)
 8000fd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fda:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <MX_DMA_Init+0xa8>)
 8000fde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe2:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fe4:	4b18      	ldr	r3, [pc, #96]	; (8001048 <MX_DMA_Init+0xa8>)
 8000fe6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fea:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <MX_DMA_Init+0xa8>)
 8000fee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ff2:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <MX_DMA_Init+0xa8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <MX_DMA_Init+0xa8>)
 8000ffc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001000:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_DMA_Init+0xa8>)
 8001004:	2204      	movs	r2, #4
 8001006:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <MX_DMA_Init+0xa8>)
 800100a:	2201      	movs	r2, #1
 800100c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <MX_DMA_Init+0xa8>)
 8001010:	2200      	movs	r2, #0
 8001012:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <MX_DMA_Init+0xa8>)
 8001016:	2200      	movs	r2, #0
 8001018:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 800101a:	480b      	ldr	r0, [pc, #44]	; (8001048 <MX_DMA_Init+0xa8>)
 800101c:	f000 ff0e 	bl	8001e3c <HAL_DMA_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_DMA_Init+0x8a>
  {
    Error_Handler( );
 8001026:	f000 f8a5 	bl	8001174 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	2044      	movs	r0, #68	; 0x44
 8001030:	f000 fecd 	bl	8001dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001034:	2044      	movs	r0, #68	; 0x44
 8001036:	f000 fee6 	bl	8001e06 <HAL_NVIC_EnableIRQ>

}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800
 8001048:	200001c0 	.word	0x200001c0
 800104c:	40026410 	.word	0x40026410

08001050 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	; 0x28
 8001054:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	4b3f      	ldr	r3, [pc, #252]	; (8001168 <MX_GPIO_Init+0x118>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a3e      	ldr	r2, [pc, #248]	; (8001168 <MX_GPIO_Init+0x118>)
 8001070:	f043 0304 	orr.w	r3, r3, #4
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b3c      	ldr	r3, [pc, #240]	; (8001168 <MX_GPIO_Init+0x118>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0304 	and.w	r3, r3, #4
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b38      	ldr	r3, [pc, #224]	; (8001168 <MX_GPIO_Init+0x118>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a37      	ldr	r2, [pc, #220]	; (8001168 <MX_GPIO_Init+0x118>)
 800108c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b35      	ldr	r3, [pc, #212]	; (8001168 <MX_GPIO_Init+0x118>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	4b31      	ldr	r3, [pc, #196]	; (8001168 <MX_GPIO_Init+0x118>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a30      	ldr	r2, [pc, #192]	; (8001168 <MX_GPIO_Init+0x118>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b2e      	ldr	r3, [pc, #184]	; (8001168 <MX_GPIO_Init+0x118>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	4b2a      	ldr	r3, [pc, #168]	; (8001168 <MX_GPIO_Init+0x118>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a29      	ldr	r2, [pc, #164]	; (8001168 <MX_GPIO_Init+0x118>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b27      	ldr	r3, [pc, #156]	; (8001168 <MX_GPIO_Init+0x118>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, vgaPin0_B0_Pin|vgaPin1_B1_Pin|vgaPin2_B2_Pin|vgaPin3_B3_Pin
 80010d6:	2200      	movs	r2, #0
 80010d8:	f641 71ff 	movw	r1, #8191	; 0x1fff
 80010dc:	4823      	ldr	r0, [pc, #140]	; (800116c <MX_GPIO_Init+0x11c>)
 80010de:	f002 fcdd 	bl	8003a9c <HAL_GPIO_WritePin>
                          |vgaPin4_G0_Pin|vgaPin5_G1_Pin|vgaPin6_G2_Pin|vgaPin7_G3_Pin
                          |vgaPin8_R0_Pin|vgaPin9_R1_Pin|vgaPin10_R2_Pin|vgaPin11_R3_Pin
                          |vgaPin12_Hsync_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, vgaPin13_Vsync_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2122      	movs	r1, #34	; 0x22
 80010e6:	4822      	ldr	r0, [pc, #136]	; (8001170 <MX_GPIO_Init+0x120>)
 80010e8:	f002 fcd8 	bl	8003a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010f2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	481a      	ldr	r0, [pc, #104]	; (800116c <MX_GPIO_Init+0x11c>)
 8001104:	f002 fb46 	bl	8003794 <HAL_GPIO_Init>

  /*Configure GPIO pins : vgaPin0_B0_Pin vgaPin1_B1_Pin vgaPin2_B2_Pin vgaPin3_B3_Pin
                           vgaPin4_G0_Pin vgaPin5_G1_Pin vgaPin6_G2_Pin vgaPin7_G3_Pin
                           vgaPin8_R0_Pin vgaPin9_R1_Pin vgaPin10_R2_Pin vgaPin11_R3_Pin
                           vgaPin12_Hsync_Pin */
  GPIO_InitStruct.Pin = vgaPin0_B0_Pin|vgaPin1_B1_Pin|vgaPin2_B2_Pin|vgaPin3_B3_Pin
 8001108:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800110c:	617b      	str	r3, [r7, #20]
                          |vgaPin4_G0_Pin|vgaPin5_G1_Pin|vgaPin6_G2_Pin|vgaPin7_G3_Pin
                          |vgaPin8_R0_Pin|vgaPin9_R1_Pin|vgaPin10_R2_Pin|vgaPin11_R3_Pin
                          |vgaPin12_Hsync_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	2301      	movs	r3, #1
 8001110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001116:	2303      	movs	r3, #3
 8001118:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	4812      	ldr	r0, [pc, #72]	; (800116c <MX_GPIO_Init+0x11c>)
 8001122:	f002 fb37 	bl	8003794 <HAL_GPIO_Init>

  /*Configure GPIO pin : vgaPin13_Vsync_Pin */
  GPIO_InitStruct.Pin = vgaPin13_Vsync_Pin;
 8001126:	2302      	movs	r3, #2
 8001128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112a:	2301      	movs	r3, #1
 800112c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001132:	2302      	movs	r3, #2
 8001134:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(vgaPin13_Vsync_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	480c      	ldr	r0, [pc, #48]	; (8001170 <MX_GPIO_Init+0x120>)
 800113e:	f002 fb29 	bl	8003794 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001142:	2320      	movs	r3, #32
 8001144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001146:	2301      	movs	r3, #1
 8001148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_GPIO_Init+0x120>)
 800115a:	f002 fb1b 	bl	8003794 <HAL_GPIO_Init>

}
 800115e:	bf00      	nop
 8001160:	3728      	adds	r7, #40	; 0x28
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800
 800116c:	40020800 	.word	0x40020800
 8001170:	40020000 	.word	0x40020000

08001174 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001178:	b672      	cpsid	i
}
 800117a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800117c:	e7fe      	b.n	800117c <Error_Handler+0x8>
	...

08001180 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <HAL_MspInit+0x4c>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	4a0f      	ldr	r2, [pc, #60]	; (80011cc <HAL_MspInit+0x4c>)
 8001190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001194:	6453      	str	r3, [r2, #68]	; 0x44
 8001196:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <HAL_MspInit+0x4c>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_MspInit+0x4c>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	4a08      	ldr	r2, [pc, #32]	; (80011cc <HAL_MspInit+0x4c>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b0:	6413      	str	r3, [r2, #64]	; 0x40
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_MspInit+0x4c>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011be:	2007      	movs	r0, #7
 80011c0:	f000 fdfa 	bl	8001db8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40023800 	.word	0x40023800

080011d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a36      	ldr	r2, [pc, #216]	; (80012b8 <HAL_TIM_Base_MspInit+0xe8>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d14a      	bne.n	8001278 <HAL_TIM_Base_MspInit+0xa8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	4b35      	ldr	r3, [pc, #212]	; (80012bc <HAL_TIM_Base_MspInit+0xec>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	4a34      	ldr	r2, [pc, #208]	; (80012bc <HAL_TIM_Base_MspInit+0xec>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6453      	str	r3, [r2, #68]	; 0x44
 80011f2:	4b32      	ldr	r3, [pc, #200]	; (80012bc <HAL_TIM_Base_MspInit+0xec>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 80011fe:	4b30      	ldr	r3, [pc, #192]	; (80012c0 <HAL_TIM_Base_MspInit+0xf0>)
 8001200:	4a30      	ldr	r2, [pc, #192]	; (80012c4 <HAL_TIM_Base_MspInit+0xf4>)
 8001202:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8001204:	4b2e      	ldr	r3, [pc, #184]	; (80012c0 <HAL_TIM_Base_MspInit+0xf0>)
 8001206:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800120a:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800120c:	4b2c      	ldr	r3, [pc, #176]	; (80012c0 <HAL_TIM_Base_MspInit+0xf0>)
 800120e:	2240      	movs	r2, #64	; 0x40
 8001210:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001212:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <HAL_TIM_Base_MspInit+0xf0>)
 8001214:	2200      	movs	r2, #0
 8001216:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8001218:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <HAL_TIM_Base_MspInit+0xf0>)
 800121a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800121e:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001220:	4b27      	ldr	r3, [pc, #156]	; (80012c0 <HAL_TIM_Base_MspInit+0xf0>)
 8001222:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001226:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001228:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <HAL_TIM_Base_MspInit+0xf0>)
 800122a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800122e:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8001230:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <HAL_TIM_Base_MspInit+0xf0>)
 8001232:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001236:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001238:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <HAL_TIM_Base_MspInit+0xf0>)
 800123a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800123e:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001240:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <HAL_TIM_Base_MspInit+0xf0>)
 8001242:	2204      	movs	r2, #4
 8001244:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim1_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8001246:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <HAL_TIM_Base_MspInit+0xf0>)
 8001248:	2201      	movs	r2, #1
 800124a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim1_up.Init.MemBurst = DMA_MBURST_INC4;
 800124c:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <HAL_TIM_Base_MspInit+0xf0>)
 800124e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001252:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim1_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <HAL_TIM_Base_MspInit+0xf0>)
 8001256:	2200      	movs	r2, #0
 8001258:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 800125a:	4819      	ldr	r0, [pc, #100]	; (80012c0 <HAL_TIM_Base_MspInit+0xf0>)
 800125c:	f000 fdee 	bl	8001e3c <HAL_DMA_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_TIM_Base_MspInit+0x9a>
    {
      Error_Handler();
 8001266:	f7ff ff85 	bl	8001174 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a14      	ldr	r2, [pc, #80]	; (80012c0 <HAL_TIM_Base_MspInit+0xf0>)
 800126e:	621a      	str	r2, [r3, #32]
 8001270:	4a13      	ldr	r2, [pc, #76]	; (80012c0 <HAL_TIM_Base_MspInit+0xf0>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001276:	e01a      	b.n	80012ae <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM5)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <HAL_TIM_Base_MspInit+0xf8>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d115      	bne.n	80012ae <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <HAL_TIM_Base_MspInit+0xec>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	4a0c      	ldr	r2, [pc, #48]	; (80012bc <HAL_TIM_Base_MspInit+0xec>)
 800128c:	f043 0308 	orr.w	r3, r3, #8
 8001290:	6413      	str	r3, [r2, #64]	; 0x40
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_TIM_Base_MspInit+0xec>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 1);
 800129e:	2201      	movs	r2, #1
 80012a0:	2100      	movs	r1, #0
 80012a2:	2032      	movs	r0, #50	; 0x32
 80012a4:	f000 fd93 	bl	8001dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80012a8:	2032      	movs	r0, #50	; 0x32
 80012aa:	f000 fdac 	bl	8001e06 <HAL_NVIC_EnableIRQ>
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40010000 	.word	0x40010000
 80012bc:	40023800 	.word	0x40023800
 80012c0:	2000011c 	.word	0x2000011c
 80012c4:	40026488 	.word	0x40026488
 80012c8:	40000c00 	.word	0x40000c00

080012cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a12      	ldr	r2, [pc, #72]	; (8001334 <HAL_TIM_MspPostInit+0x68>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d11e      	bne.n	800132c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <HAL_TIM_MspPostInit+0x6c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a10      	ldr	r2, [pc, #64]	; (8001338 <HAL_TIM_MspPostInit+0x6c>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <HAL_TIM_MspPostInit+0x6c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800130a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800130e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001318:	2303      	movs	r3, #3
 800131a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800131c:	2301      	movs	r3, #1
 800131e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	4619      	mov	r1, r3
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <HAL_TIM_MspPostInit+0x70>)
 8001328:	f002 fa34 	bl	8003794 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800132c:	bf00      	nop
 800132e:	3720      	adds	r7, #32
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40010000 	.word	0x40010000
 8001338:	40023800 	.word	0x40023800
 800133c:	40020000 	.word	0x40020000

08001340 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a19      	ldr	r2, [pc, #100]	; (80013c4 <HAL_UART_MspInit+0x84>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d12b      	bne.n	80013ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_UART_MspInit+0x88>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	4a17      	ldr	r2, [pc, #92]	; (80013c8 <HAL_UART_MspInit+0x88>)
 800136c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_UART_MspInit+0x88>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <HAL_UART_MspInit+0x88>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a10      	ldr	r2, [pc, #64]	; (80013c8 <HAL_UART_MspInit+0x88>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <HAL_UART_MspInit+0x88>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800139a:	230c      	movs	r3, #12
 800139c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013aa:	2307      	movs	r3, #7
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	4805      	ldr	r0, [pc, #20]	; (80013cc <HAL_UART_MspInit+0x8c>)
 80013b6:	f002 f9ed 	bl	8003794 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013ba:	bf00      	nop
 80013bc:	3728      	adds	r7, #40	; 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40004400 	.word	0x40004400
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40020000 	.word	0x40020000

080013d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <NMI_Handler+0x4>

080013d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013da:	e7fe      	b.n	80013da <HardFault_Handler+0x4>

080013dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <MemManage_Handler+0x4>

080013e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <BusFault_Handler+0x4>

080013e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <UsageFault_Handler+0x4>

080013ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800141c:	f000 fbb8 	bl	8001b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}

08001424 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <TIM5_IRQHandler+0x10>)
 800142a:	f003 f941 	bl	80046b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200000d4 	.word	0x200000d4

08001438 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <DMA2_Stream5_IRQHandler+0x10>)
 800143e:	f000 fdab 	bl	8001f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	2000011c 	.word	0x2000011c

0800144c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001454:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <_sbrk+0x5c>)
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <_sbrk+0x60>)
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <_sbrk+0x64>)
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <_sbrk+0x68>)
 800146c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	429a      	cmp	r2, r3
 800147a:	d207      	bcs.n	800148c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800147c:	f004 fb34 	bl	8005ae8 <__errno>
 8001480:	4603      	mov	r3, r0
 8001482:	220c      	movs	r2, #12
 8001484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	e009      	b.n	80014a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <_sbrk+0x64>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <_sbrk+0x64>)
 800149c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800149e:	68fb      	ldr	r3, [r7, #12]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20018000 	.word	0x20018000
 80014ac:	00000400 	.word	0x00000400
 80014b0:	20000278 	.word	0x20000278
 80014b4:	20000f78 	.word	0x20000f78

080014b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <SystemInit+0x20>)
 80014be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <SystemInit+0x20>)
 80014c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <registerHUARTvga>:

	_Static_assert(horiWhole == horiRes+horiFront+horiSync+horiBack, "Horizontal vga configuration does not sum up");
	_Static_assert(vertWhole == vertArea+vertFront+vertSync+vertBack, "Vertical vga configuration does not sum up");
}

void registerHUARTvga(UART_HandleTypeDef * huart){
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	huartE = huart;
 80014e4:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <registerHUARTvga+0x1c>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000b78 	.word	0x20000b78

080014fc <renderLine>:

void __weak renderLine(Color * lineBuffPart, const int lineCount){
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
	//both buffers are 32 bit aligned

	//char str[81] = { '\0' };
	//int str_len = sprintf(str, "Rendering line %i\r\n", lineCount);
	//HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
	for (int i = 0; i < horiRes; ++i) {
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	e01a      	b.n	8001542 <renderLine+0x46>
		lineBuffPart[i].value = ( lineCount + i + (frameCount/64 << 8)) % ColorWhite.value;
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	441a      	add	r2, r3
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <renderLine+0x5c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	da00      	bge.n	800151c <renderLine+0x20>
 800151a:	333f      	adds	r3, #63	; 0x3f
 800151c:	119b      	asrs	r3, r3, #6
 800151e:	021b      	lsls	r3, r3, #8
 8001520:	4413      	add	r3, r2
 8001522:	4a0e      	ldr	r2, [pc, #56]	; (800155c <renderLine+0x60>)
 8001524:	8812      	ldrh	r2, [r2, #0]
 8001526:	fb93 f1f2 	sdiv	r1, r3, r2
 800152a:	fb01 f202 	mul.w	r2, r1, r2
 800152e:	1a99      	subs	r1, r3, r2
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	4413      	add	r3, r2
 8001538:	b28a      	uxth	r2, r1
 800153a:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < horiRes; ++i) {
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3301      	adds	r3, #1
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001548:	dbe0      	blt.n	800150c <renderLine+0x10>
	}
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	20000b4c 	.word	0x20000b4c
 800155c:	0800777c 	.word	0x0800777c

08001560 <dumpBuffer>:


char strDumpBuff[1000];
void dumpBuffer(char * dump, uint32_t bytes, uint32_t * indicatorLength, char * indicator, uint32_t columnSets){
 8001560:	b580      	push	{r7, lr}
 8001562:	b08e      	sub	sp, #56	; 0x38
 8001564:	af02      	add	r7, sp, #8
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	603b      	str	r3, [r7, #0]
	char * str = strDumpBuff;
 800156e:	4b66      	ldr	r3, [pc, #408]	; (8001708 <dumpBuffer+0x1a8>)
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t nextIndicator;
	if(indicatorLength != NULL){
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d002      	beq.n	800157e <dumpBuffer+0x1e>
		nextIndicator = *indicatorLength;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	str += sprintf(str, "      ");
 800157e:	4963      	ldr	r1, [pc, #396]	; (800170c <dumpBuffer+0x1ac>)
 8001580:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001582:	f004 fae3 	bl	8005b4c <siprintf>
 8001586:	4603      	mov	r3, r0
 8001588:	461a      	mov	r2, r3
 800158a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158c:	4413      	add	r3, r2
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint32_t i = 0; i < columnSets; i++){
 8001590:	2300      	movs	r3, #0
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
 8001594:	e00b      	b.n	80015ae <dumpBuffer+0x4e>
		str += sprintf(str, "0   1   2   3   4   5   6   7   8   9   a   b   c   d   e   f    ");
 8001596:	495e      	ldr	r1, [pc, #376]	; (8001710 <dumpBuffer+0x1b0>)
 8001598:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800159a:	f004 fad7 	bl	8005b4c <siprintf>
 800159e:	4603      	mov	r3, r0
 80015a0:	461a      	mov	r2, r3
 80015a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a4:	4413      	add	r3, r2
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint32_t i = 0; i < columnSets; i++){
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	3301      	adds	r3, #1
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
 80015ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d3ef      	bcc.n	8001596 <dumpBuffer+0x36>
	}
	str += sprintf(str, "\n\r");
 80015b6:	4957      	ldr	r1, [pc, #348]	; (8001714 <dumpBuffer+0x1b4>)
 80015b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015ba:	f004 fac7 	bl	8005b4c <siprintf>
 80015be:	4603      	mov	r3, r0
 80015c0:	461a      	mov	r2, r3
 80015c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c4:	4413      	add	r3, r2
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint32_t i = 0; i < bytes;){
 80015c8:	2300      	movs	r3, #0
 80015ca:	623b      	str	r3, [r7, #32]
 80015cc:	e07f      	b.n	80016ce <dumpBuffer+0x16e>

		str += sprintf(str, "%3lx ", i / (16));
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	091b      	lsrs	r3, r3, #4
 80015d2:	461a      	mov	r2, r3
 80015d4:	4950      	ldr	r1, [pc, #320]	; (8001718 <dumpBuffer+0x1b8>)
 80015d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015d8:	f004 fab8 	bl	8005b4c <siprintf>
 80015dc:	4603      	mov	r3, r0
 80015de:	461a      	mov	r2, r3
 80015e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e2:	4413      	add	r3, r2
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(uint32_t columnSetI = 0; columnSetI < columnSets; columnSetI++){
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
 80015ea:	e063      	b.n	80016b4 <dumpBuffer+0x154>
			for(uint32_t j = i+16; i<j && i < bytes; i++){
 80015ec:	6a3b      	ldr	r3, [r7, #32]
 80015ee:	3310      	adds	r3, #16
 80015f0:	61bb      	str	r3, [r7, #24]
 80015f2:	e038      	b.n	8001666 <dumpBuffer+0x106>
				uint32_t tmp = dump[i];
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	6a3b      	ldr	r3, [r7, #32]
 80015f8:	4413      	add	r3, r2
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	617b      	str	r3, [r7, #20]
				if(indicatorLength == NULL){
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10a      	bne.n	800161a <dumpBuffer+0xba>
					str += sprintf(str, " %02lx ", tmp);
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	4945      	ldr	r1, [pc, #276]	; (800171c <dumpBuffer+0x1bc>)
 8001608:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800160a:	f004 fa9f 	bl	8005b4c <siprintf>
 800160e:	4603      	mov	r3, r0
 8001610:	461a      	mov	r2, r3
 8001612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001614:	4413      	add	r3, r2
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001618:	e022      	b.n	8001660 <dumpBuffer+0x100>
				}else{
					if(i == nextIndicator){
 800161a:	6a3a      	ldr	r2, [r7, #32]
 800161c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161e:	429a      	cmp	r2, r3
 8001620:	d10d      	bne.n	800163e <dumpBuffer+0xde>
						indicatorLength++;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3304      	adds	r3, #4
 8001626:	607b      	str	r3, [r7, #4]
						nextIndicator += *indicatorLength;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800162e:	4413      	add	r3, r2
 8001630:	62bb      	str	r3, [r7, #40]	; 0x28
						indicator++;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	3301      	adds	r3, #1
 8001636:	603b      	str	r3, [r7, #0]
						indicator++;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	3301      	adds	r3, #1
 800163c:	603b      	str	r3, [r7, #0]
					}
					str += sprintf(str, "%c%02lx%c", *indicator, tmp, *(indicator+1));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	3301      	adds	r3, #1
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	4934      	ldr	r1, [pc, #208]	; (8001720 <dumpBuffer+0x1c0>)
 8001650:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001652:	f004 fa7b 	bl	8005b4c <siprintf>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165c:	4413      	add	r3, r2
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(uint32_t j = i+16; i<j && i < bytes; i++){
 8001660:	6a3b      	ldr	r3, [r7, #32]
 8001662:	3301      	adds	r3, #1
 8001664:	623b      	str	r3, [r7, #32]
 8001666:	6a3a      	ldr	r2, [r7, #32]
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	429a      	cmp	r2, r3
 800166c:	d203      	bcs.n	8001676 <dumpBuffer+0x116>
 800166e:	6a3a      	ldr	r2, [r7, #32]
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	429a      	cmp	r2, r3
 8001674:	d3be      	bcc.n	80015f4 <dumpBuffer+0x94>
				}
			}
			str += sprintf(str, "  ");
 8001676:	492b      	ldr	r1, [pc, #172]	; (8001724 <dumpBuffer+0x1c4>)
 8001678:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800167a:	f004 fa67 	bl	8005b4c <siprintf>
 800167e:	4603      	mov	r3, r0
 8001680:	461a      	mov	r2, r3
 8001682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001684:	4413      	add	r3, r2
 8001686:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(str - strDumpBuff > sizeof(strDumpBuff)/2){
 8001688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168a:	4a1f      	ldr	r2, [pc, #124]	; (8001708 <dumpBuffer+0x1a8>)
 800168c:	1a9b      	subs	r3, r3, r2
 800168e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001692:	d90c      	bls.n	80016ae <dumpBuffer+0x14e>
				HAL_UART_Transmit(huartE, (uint8_t*) strDumpBuff, str - strDumpBuff, HAL_MAX_DELAY);
 8001694:	4b24      	ldr	r3, [pc, #144]	; (8001728 <dumpBuffer+0x1c8>)
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169a:	4a1b      	ldr	r2, [pc, #108]	; (8001708 <dumpBuffer+0x1a8>)
 800169c:	1a9b      	subs	r3, r3, r2
 800169e:	b29a      	uxth	r2, r3
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295
 80016a4:	4918      	ldr	r1, [pc, #96]	; (8001708 <dumpBuffer+0x1a8>)
 80016a6:	f003 feaa 	bl	80053fe <HAL_UART_Transmit>
				str = strDumpBuff;
 80016aa:	4b17      	ldr	r3, [pc, #92]	; (8001708 <dumpBuffer+0x1a8>)
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(uint32_t columnSetI = 0; columnSetI < columnSets; columnSetI++){
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3301      	adds	r3, #1
 80016b2:	61fb      	str	r3, [r7, #28]
 80016b4:	69fa      	ldr	r2, [r7, #28]
 80016b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d397      	bcc.n	80015ec <dumpBuffer+0x8c>
			}
		}
		str += sprintf(str, "\n\r");
 80016bc:	4915      	ldr	r1, [pc, #84]	; (8001714 <dumpBuffer+0x1b4>)
 80016be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016c0:	f004 fa44 	bl	8005b4c <siprintf>
 80016c4:	4603      	mov	r3, r0
 80016c6:	461a      	mov	r2, r3
 80016c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ca:	4413      	add	r3, r2
 80016cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint32_t i = 0; i < bytes;){
 80016ce:	6a3a      	ldr	r2, [r7, #32]
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	f4ff af7b 	bcc.w	80015ce <dumpBuffer+0x6e>
	}
	str += sprintf(str, "\n\r");
 80016d8:	490e      	ldr	r1, [pc, #56]	; (8001714 <dumpBuffer+0x1b4>)
 80016da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016dc:	f004 fa36 	bl	8005b4c <siprintf>
 80016e0:	4603      	mov	r3, r0
 80016e2:	461a      	mov	r2, r3
 80016e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e6:	4413      	add	r3, r2
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	//str += sprintf(str, "\0");
	HAL_UART_Transmit(huartE, (uint8_t*) strDumpBuff, str - strDumpBuff, HAL_MAX_DELAY);
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <dumpBuffer+0x1c8>)
 80016ec:	6818      	ldr	r0, [r3, #0]
 80016ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f0:	4a05      	ldr	r2, [pc, #20]	; (8001708 <dumpBuffer+0x1a8>)
 80016f2:	1a9b      	subs	r3, r3, r2
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
 80016fa:	4903      	ldr	r1, [pc, #12]	; (8001708 <dumpBuffer+0x1a8>)
 80016fc:	f003 fe7f 	bl	80053fe <HAL_UART_Transmit>
}
 8001700:	bf00      	nop
 8001702:	3730      	adds	r7, #48	; 0x30
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000b7c 	.word	0x20000b7c
 800170c:	080077a8 	.word	0x080077a8
 8001710:	080077b0 	.word	0x080077b0
 8001714:	080077f4 	.word	0x080077f4
 8001718:	080077f8 	.word	0x080077f8
 800171c:	08007800 	.word	0x08007800
 8001720:	08007808 	.word	0x08007808
 8001724:	080077ac 	.word	0x080077ac
 8001728:	20000b78 	.word	0x20000b78

0800172c <vgaDriver2>:
enum { vertBack = 35};
enum { vertWhole = 449};
 */
//#define vgaDebug

void __attribute__((optimize("O3"))) vgaDriver2(){
 800172c:	e92d 4178 	stmdb	sp!, {r3, r4, r5, r6, r8, lr}
#ifdef vgaDebug
	int str_len;
	char str[81] = {'\0'};
	static char * ref_str = "null";
#endif
	lineCount++;
 8001730:	4c33      	ldr	r4, [pc, #204]	; (8001800 <vgaDriver2+0xd4>)
 8001732:	6823      	ldr	r3, [r4, #0]
 8001734:	3301      	adds	r3, #1

	if(lineCount == vertArea + vertFront){//enter vertical sync
 8001736:	f5b3 7fce 	cmp.w	r3, #412	; 0x19c
	lineCount++;
 800173a:	6023      	str	r3, [r4, #0]
	if(lineCount == vertArea + vertFront){//enter vertical sync
 800173c:	d03b      	beq.n	80017b6 <vgaDriver2+0x8a>
#ifdef vgaDebug
		ref_str = "vertical sync start";
#endif
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_SET);

	}else if(lineCount == vertArea + vertFront + vertSync){//exit vertical sync
 800173e:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 8001742:	d04a      	beq.n	80017da <vgaDriver2+0xae>
		ref_str = "vertical sync end";
#endif
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_RESET);
	}

	if(currentLineValidFor != 0){//reuse the last dma buffer
 8001744:	4b2f      	ldr	r3, [pc, #188]	; (8001804 <vgaDriver2+0xd8>)
 8001746:	6819      	ldr	r1, [r3, #0]
 8001748:	bb69      	cbnz	r1, 80017a6 <vgaDriver2+0x7a>
		currentLine = nextLine;
		nextLine = tmp;
		currentLineValidFor = nextLineValidFor;
	}
	//load the new current line buffer into dma
	if(vgaCircularDMA->Instance->CR & (1 << 19)){
 800174a:	4a2f      	ldr	r2, [pc, #188]	; (8001808 <vgaDriver2+0xdc>)
		Color * tmp = currentLine;
 800174c:	4e2f      	ldr	r6, [pc, #188]	; (800180c <vgaDriver2+0xe0>)
	if(vgaCircularDMA->Instance->CR & (1 << 19)){
 800174e:	6812      	ldr	r2, [r2, #0]
		currentLine = nextLine;
 8001750:	482f      	ldr	r0, [pc, #188]	; (8001810 <vgaDriver2+0xe4>)
	if(vgaCircularDMA->Instance->CR & (1 << 19)){
 8001752:	6812      	ldr	r2, [r2, #0]
		currentLineValidFor = nextLineValidFor;
 8001754:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 800181c <vgaDriver2+0xf0>
	if(vgaCircularDMA->Instance->CR & (1 << 19)){
 8001758:	6812      	ldr	r2, [r2, #0]
	}else{
		//vgaCircularDMA->Instance->M1AR = (uint32_t)currentLine;//dma is currently using buffer 0 update buffer 1
	}
	//start rendering the next line

	if(lineCount < vertArea){//render visual line
 800175a:	6822      	ldr	r2, [r4, #0]
		Color * tmp = currentLine;
 800175c:	f8d6 c000 	ldr.w	ip, [r6]
		currentLine = nextLine;
 8001760:	6805      	ldr	r5, [r0, #0]
		nextLine = tmp;
 8001762:	f8c0 c000 	str.w	ip, [r0]
	if(lineCount < vertArea){//render visual line
 8001766:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
		currentLineValidFor = nextLineValidFor;
 800176a:	f8d8 0000 	ldr.w	r0, [r8]
		currentLine = nextLine;
 800176e:	6035      	str	r5, [r6, #0]
		currentLineValidFor = nextLineValidFor;
 8001770:	6018      	str	r0, [r3, #0]
	if(lineCount < vertArea){//render visual line
 8001772:	db0c      	blt.n	800178e <vgaDriver2+0x62>
		ref_str = "render line";
#endif

		renderLine(&nextLine[horiWhole-horiRes], lineCount/vgaUpscale);//call user code to render next line
		nextLineValidFor = vgaUpscale;
	}else if(lineCount == vertArea){//last line clear
 8001774:	d039      	beq.n	80017ea <vgaDriver2+0xbe>
		for(uint32_t i = 0; i < horiRes/(sizeof(uint32_t)/sizeof(Color)); i++){//clear the next buffer
			*active32 = 0;
			active32++;
		}
		nextLineValidFor = 1;
	}else if(lineCount == vertArea + 1){//last line clear buffer
 8001776:	f240 1391 	movw	r3, #401	; 0x191
 800177a:	429a      	cmp	r2, r3
 800177c:	d023      	beq.n	80017c6 <vgaDriver2+0x9a>
		for(uint32_t i = 0; i < horiRes/(sizeof(uint32_t)/sizeof(Color)); i++){//clear the next buffer
			*active32 = 0;
			active32++;
		}
		nextLineValidFor = vertWhole-vertArea-1;
	}else if(lineCount >= vertWhole){//return to beginning
 800177e:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
#ifdef vgaDebug
		ref_str = "next frame";
#endif
		lineCount = -1;
 8001782:	bfc4      	itt	gt
 8001784:	f04f 33ff 	movgt.w	r3, #4294967295
 8001788:	6023      	strgt	r3, [r4, #0]
	str_len = sprintf(str, "Line %i\t %s \n\r", lineCount, ref_str);
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
	uint32_t indicatorLengths[] = {horiFront, horiSync, horiBack, horiRes, horiFront, horiSync, horiBack, horiRes};
	dumpBuffer((char*)lineBuff, horiWhole*2, indicatorLengths, "  []  ||  []  ||EE", 2);
#endif
}
 800178a:	e8bd 8178 	ldmia.w	sp!, {r3, r4, r5, r6, r8, pc}
		renderLine(&nextLine[horiWhole-horiRes], lineCount/vgaUpscale);//call user code to render next line
 800178e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8001792:	1051      	asrs	r1, r2, #1
 8001794:	f10c 00a0 	add.w	r0, ip, #160	; 0xa0
 8001798:	f7ff feb0 	bl	80014fc <renderLine>
		nextLineValidFor = vgaUpscale;
 800179c:	2302      	movs	r3, #2
 800179e:	f8c8 3000 	str.w	r3, [r8]
}
 80017a2:	e8bd 8178 	ldmia.w	sp!, {r3, r4, r5, r6, r8, pc}
		if(vgaCircularDMA->Instance->CR & (1 << 19)){
 80017a6:	4a18      	ldr	r2, [pc, #96]	; (8001808 <vgaDriver2+0xdc>)
 80017a8:	6812      	ldr	r2, [r2, #0]
		currentLineValidFor--;
 80017aa:	3901      	subs	r1, #1
 80017ac:	6019      	str	r1, [r3, #0]
		if(vgaCircularDMA->Instance->CR & (1 << 19)){
 80017ae:	6813      	ldr	r3, [r2, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
}
 80017b2:	e8bd 8178 	ldmia.w	sp!, {r3, r4, r5, r6, r8, pc}
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_SET);
 80017b6:	4a17      	ldr	r2, [pc, #92]	; (8001814 <vgaDriver2+0xe8>)
 80017b8:	4b17      	ldr	r3, [pc, #92]	; (8001818 <vgaDriver2+0xec>)
 80017ba:	8811      	ldrh	r1, [r2, #0]
 80017bc:	6818      	ldr	r0, [r3, #0]
 80017be:	2201      	movs	r2, #1
 80017c0:	f002 f96c 	bl	8003a9c <HAL_GPIO_WritePin>
 80017c4:	e7be      	b.n	8001744 <vgaDriver2+0x18>
			*active32 = 0;
 80017c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80017ca:	f10c 00a0 	add.w	r0, ip, #160	; 0xa0
 80017ce:	f004 f9b5 	bl	8005b3c <memset>
		nextLineValidFor = vertWhole-vertArea-1;
 80017d2:	2330      	movs	r3, #48	; 0x30
 80017d4:	f8c8 3000 	str.w	r3, [r8]
 80017d8:	e7e3      	b.n	80017a2 <vgaDriver2+0x76>
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_RESET);
 80017da:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <vgaDriver2+0xe8>)
 80017dc:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <vgaDriver2+0xec>)
 80017de:	8811      	ldrh	r1, [r2, #0]
 80017e0:	6818      	ldr	r0, [r3, #0]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f002 f95a 	bl	8003a9c <HAL_GPIO_WritePin>
 80017e8:	e7ac      	b.n	8001744 <vgaDriver2+0x18>
			*active32 = 0;
 80017ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80017ee:	f10c 00a0 	add.w	r0, ip, #160	; 0xa0
 80017f2:	f004 f9a3 	bl	8005b3c <memset>
		nextLineValidFor = 1;
 80017f6:	2301      	movs	r3, #1
 80017f8:	f8c8 3000 	str.w	r3, [r8]
}
 80017fc:	e8bd 8178 	ldmia.w	sp!, {r3, r4, r5, r6, r8, pc}
 8001800:	20000b64 	.word	0x20000b64
 8001804:	20000b3c 	.word	0x20000b3c
 8001808:	20000b54 	.word	0x20000b54
 800180c:	20000b44 	.word	0x20000b44
 8001810:	20000b48 	.word	0x20000b48
 8001814:	20000b60 	.word	0x20000b60
 8001818:	20000b5c 	.word	0x20000b5c
 800181c:	20000b40 	.word	0x20000b40

08001820 <vgaSetup>:
		TIM_HandleTypeDef * vgaPixelTimer_,
		DMA_HandleTypeDef * vgaCircularDMA_,
		DMA_HandleTypeDef * memCopyDMA_,
		GPIO_TypeDef* Vsync_GPIO_Port_,
		uint16_t Vsync_Pin_
		){
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	b094      	sub	sp, #80	; 0x50
 8001824:	af02      	add	r7, sp, #8
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	603b      	str	r3, [r7, #0]

	vgaPixelTimer = vgaPixelTimer_;
 800182e:	4a56      	ldr	r2, [pc, #344]	; (8001988 <vgaSetup+0x168>)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6013      	str	r3, [r2, #0]
	vgaCircularDMA = vgaCircularDMA_;
 8001834:	4a55      	ldr	r2, [pc, #340]	; (800198c <vgaSetup+0x16c>)
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	6013      	str	r3, [r2, #0]
	memCopyDMA = memCopyDMA_;
 800183a:	4a55      	ldr	r2, [pc, #340]	; (8001990 <vgaSetup+0x170>)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6013      	str	r3, [r2, #0]

	Vsync_GPIO_Port = Vsync_GPIO_Port_;
 8001840:	4a54      	ldr	r2, [pc, #336]	; (8001994 <vgaSetup+0x174>)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	6013      	str	r3, [r2, #0]
	Vsync_Pin = Vsync_Pin_;
 8001846:	4a54      	ldr	r2, [pc, #336]	; (8001998 <vgaSetup+0x178>)
 8001848:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800184c:	8013      	strh	r3, [r2, #0]

	lineCount = 0; //vertArea + vertFront - 1 - 2;//start right after a vertical sync
 800184e:	4b53      	ldr	r3, [pc, #332]	; (800199c <vgaSetup+0x17c>)
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
	lineUpscale = 0;//copy old buffer if non zero
 8001854:	4b52      	ldr	r3, [pc, #328]	; (80019a0 <vgaSetup+0x180>)
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
	readyForNextLine = 1;
 800185a:	4b52      	ldr	r3, [pc, #328]	; (80019a4 <vgaSetup+0x184>)
 800185c:	2201      	movs	r2, #1
 800185e:	601a      	str	r2, [r3, #0]
	activeBuffer = lineBuff;
 8001860:	4b51      	ldr	r3, [pc, #324]	; (80019a8 <vgaSetup+0x188>)
 8001862:	4a52      	ldr	r2, [pc, #328]	; (80019ac <vgaSetup+0x18c>)
 8001864:	601a      	str	r2, [r3, #0]
	oldBuffer = &lineBuff[horiWhole];
 8001866:	4b52      	ldr	r3, [pc, #328]	; (80019b0 <vgaSetup+0x190>)
 8001868:	4a52      	ldr	r2, [pc, #328]	; (80019b4 <vgaSetup+0x194>)
 800186a:	601a      	str	r2, [r3, #0]
	currentLine = lineBuff;
 800186c:	4b52      	ldr	r3, [pc, #328]	; (80019b8 <vgaSetup+0x198>)
 800186e:	4a4f      	ldr	r2, [pc, #316]	; (80019ac <vgaSetup+0x18c>)
 8001870:	601a      	str	r2, [r3, #0]
	nextLine = &lineBuff[horiWhole];
 8001872:	4b52      	ldr	r3, [pc, #328]	; (80019bc <vgaSetup+0x19c>)
 8001874:	4a4f      	ldr	r2, [pc, #316]	; (80019b4 <vgaSetup+0x194>)
 8001876:	601a      	str	r2, [r3, #0]

	for(uint32_t i = 0; i < horiWhole; i += 2){//clear all
 8001878:	2300      	movs	r3, #0
 800187a:	647b      	str	r3, [r7, #68]	; 0x44
 800187c:	e01e      	b.n	80018bc <vgaSetup+0x9c>
		activeBuffer[i].value = 0;
 800187e:	4b4a      	ldr	r3, [pc, #296]	; (80019a8 <vgaSetup+0x188>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4413      	add	r3, r2
 8001888:	2200      	movs	r2, #0
 800188a:	801a      	strh	r2, [r3, #0]
		oldBuffer[i].value = 0;
 800188c:	4b48      	ldr	r3, [pc, #288]	; (80019b0 <vgaSetup+0x190>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4413      	add	r3, r2
 8001896:	2200      	movs	r2, #0
 8001898:	801a      	strh	r2, [r3, #0]
		currentLine[i].value = 0;
 800189a:	4b47      	ldr	r3, [pc, #284]	; (80019b8 <vgaSetup+0x198>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4413      	add	r3, r2
 80018a4:	2200      	movs	r2, #0
 80018a6:	801a      	strh	r2, [r3, #0]
		nextLine[i].value = 0;
 80018a8:	4b44      	ldr	r3, [pc, #272]	; (80019bc <vgaSetup+0x19c>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	4413      	add	r3, r2
 80018b2:	2200      	movs	r2, #0
 80018b4:	801a      	strh	r2, [r3, #0]
	for(uint32_t i = 0; i < horiWhole; i += 2){//clear all
 80018b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018b8:	3302      	adds	r3, #2
 80018ba:	647b      	str	r3, [r7, #68]	; 0x44
 80018bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018be:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80018c2:	d3dc      	bcc.n	800187e <vgaSetup+0x5e>
	}
	Color * currentDisplayPart = &currentLine[horiWhole-horiRes];
 80018c4:	4b3c      	ldr	r3, [pc, #240]	; (80019b8 <vgaSetup+0x198>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	33a0      	adds	r3, #160	; 0xa0
 80018ca:	63bb      	str	r3, [r7, #56]	; 0x38
	Color * nextDisplayPart = &nextLine[horiWhole-horiRes];
 80018cc:	4b3b      	ldr	r3, [pc, #236]	; (80019bc <vgaSetup+0x19c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	33a0      	adds	r3, #160	; 0xa0
 80018d2:	637b      	str	r3, [r7, #52]	; 0x34
	for(uint32_t i = 0; i < horiWhole; i++){//load test data
 80018d4:	2300      	movs	r3, #0
 80018d6:	643b      	str	r3, [r7, #64]	; 0x40
 80018d8:	e010      	b.n	80018fc <vgaSetup+0xdc>
		currentDisplayPart[i] = ColorWhite;
 80018da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018e0:	4413      	add	r3, r2
 80018e2:	4a37      	ldr	r2, [pc, #220]	; (80019c0 <vgaSetup+0x1a0>)
 80018e4:	8812      	ldrh	r2, [r2, #0]
 80018e6:	801a      	strh	r2, [r3, #0]
		nextDisplayPart[i] = ColorWhite;
 80018e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018ee:	4413      	add	r3, r2
 80018f0:	4a33      	ldr	r2, [pc, #204]	; (80019c0 <vgaSetup+0x1a0>)
 80018f2:	8812      	ldrh	r2, [r2, #0]
 80018f4:	801a      	strh	r2, [r3, #0]
	for(uint32_t i = 0; i < horiWhole; i++){//load test data
 80018f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018f8:	3301      	adds	r3, #1
 80018fa:	643b      	str	r3, [r7, #64]	; 0x40
 80018fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018fe:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001902:	d3ea      	bcc.n	80018da <vgaSetup+0xba>
	}
	for(uint32_t i = horiFront; i < horiFront + horiSync; i++){//set horizontal sync
 8001904:	2308      	movs	r3, #8
 8001906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001908:	e022      	b.n	8001950 <vgaSetup+0x130>
		activeBuffer[i] = ColorHsync;
 800190a:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <vgaSetup+0x188>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4413      	add	r3, r2
 8001914:	4a2b      	ldr	r2, [pc, #172]	; (80019c4 <vgaSetup+0x1a4>)
 8001916:	8812      	ldrh	r2, [r2, #0]
 8001918:	801a      	strh	r2, [r3, #0]
		oldBuffer[i] = ColorHsync;
 800191a:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <vgaSetup+0x190>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4413      	add	r3, r2
 8001924:	4a27      	ldr	r2, [pc, #156]	; (80019c4 <vgaSetup+0x1a4>)
 8001926:	8812      	ldrh	r2, [r2, #0]
 8001928:	801a      	strh	r2, [r3, #0]
		currentLine[i] = ColorHsync;
 800192a:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <vgaSetup+0x198>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4413      	add	r3, r2
 8001934:	4a23      	ldr	r2, [pc, #140]	; (80019c4 <vgaSetup+0x1a4>)
 8001936:	8812      	ldrh	r2, [r2, #0]
 8001938:	801a      	strh	r2, [r3, #0]
		nextLine[i] = ColorHsync;
 800193a:	4b20      	ldr	r3, [pc, #128]	; (80019bc <vgaSetup+0x19c>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4413      	add	r3, r2
 8001944:	4a1f      	ldr	r2, [pc, #124]	; (80019c4 <vgaSetup+0x1a4>)
 8001946:	8812      	ldrh	r2, [r2, #0]
 8001948:	801a      	strh	r2, [r3, #0]
	for(uint32_t i = horiFront; i < horiFront + horiSync; i++){//set horizontal sync
 800194a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800194c:	3301      	adds	r3, #1
 800194e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001952:	2b37      	cmp	r3, #55	; 0x37
 8001954:	d9d9      	bls.n	800190a <vgaSetup+0xea>
	}
	uint32_t indicatorLengths[] = {horiFront, horiSync, horiBack, horiRes, horiFront, horiSync, horiBack, horiRes};
 8001956:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <vgaSetup+0x1a8>)
 8001958:	f107 0414 	add.w	r4, r7, #20
 800195c:	461d      	mov	r5, r3
 800195e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001962:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001966:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	dumpBuffer((char*)lineBuff, horiWhole*2, indicatorLengths, "  []  ||  []  ||EE", 2);
 800196a:	f107 0214 	add.w	r2, r7, #20
 800196e:	2302      	movs	r3, #2
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	4b16      	ldr	r3, [pc, #88]	; (80019cc <vgaSetup+0x1ac>)
 8001974:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001978:	480c      	ldr	r0, [pc, #48]	; (80019ac <vgaSetup+0x18c>)
 800197a:	f7ff fdf1 	bl	8001560 <dumpBuffer>
}
 800197e:	bf00      	nop
 8001980:	3748      	adds	r7, #72	; 0x48
 8001982:	46bd      	mov	sp, r7
 8001984:	bdb0      	pop	{r4, r5, r7, pc}
 8001986:	bf00      	nop
 8001988:	20000b50 	.word	0x20000b50
 800198c:	20000b54 	.word	0x20000b54
 8001990:	20000b58 	.word	0x20000b58
 8001994:	20000b5c 	.word	0x20000b5c
 8001998:	20000b60 	.word	0x20000b60
 800199c:	20000b64 	.word	0x20000b64
 80019a0:	20000b68 	.word	0x20000b68
 80019a4:	20000b6c 	.word	0x20000b6c
 80019a8:	20000b70 	.word	0x20000b70
 80019ac:	2000027c 	.word	0x2000027c
 80019b0:	20000b74 	.word	0x20000b74
 80019b4:	2000059c 	.word	0x2000059c
 80019b8:	20000b44 	.word	0x20000b44
 80019bc:	20000b48 	.word	0x20000b48
 80019c0:	0800777c 	.word	0x0800777c
 80019c4:	08007778 	.word	0x08007778
 80019c8:	08006550 	.word	0x08006550
 80019cc:	08007814 	.word	0x08007814

080019d0 <vgaStart>:

void vgaStart(){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af02      	add	r7, sp, #8

	//dumpBuffer((char*)screenBuff, horiRes*vertRes, NULL, "", 2);
	//HAL_DMA_Init(vgaCircularDMA);
	__HAL_TIM_ENABLE_DMA(vgaPixelTimer, TIM_DMA_UPDATE);
 80019d6:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <vgaStart+0x98>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <vgaStart+0x98>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019e8:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE(vgaPixelTimer);
 80019ea:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <vgaStart+0x98>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <vgaStart+0x98>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f042 0201 	orr.w	r2, r2, #1
 80019fc:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef statusTIM = HAL_TIM_PWM_Start(vgaPixelTimer, TIM_CHANNEL_1);
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <vgaStart+0x98>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2100      	movs	r1, #0
 8001a04:	4618      	mov	r0, r3
 8001a06:	f002 fda3 	bl	8004550 <HAL_TIM_PWM_Start>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]

	//HAL_DMA_RegisterCallback(vgaCircularDMA, HAL_DMA_XFER_HALFCPLT_CB_ID, vgaHalfCallBack);
	//HAL_DMA_RegisterCallback(vgaCircularDMA, HAL_DMA_XFER_CPLT_CB_ID, vgaFullCallBack);ck);
	HAL_StatusTypeDef statusReg1 = HAL_DMA_RegisterCallback(vgaCircularDMA, HAL_DMA_XFER_M1CPLT_CB_ID, vgaDriver2);
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <vgaStart+0x9c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a17      	ldr	r2, [pc, #92]	; (8001a70 <vgaStart+0xa0>)
 8001a14:	2102      	movs	r1, #2
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 fc48 	bl	80022ac <HAL_DMA_RegisterCallback>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef statusReg2 = HAL_DMA_RegisterCallback(vgaCircularDMA, HAL_DMA_XFER_CPLT_CB_ID, vgaDriver2);
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <vgaStart+0x9c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <vgaStart+0xa0>)
 8001a26:	2100      	movs	r1, #0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f000 fc3f 	bl	80022ac <HAL_DMA_RegisterCallback>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef statusReg3 = HAL_DMA_RegisterCallback(vgaCircularDMA, HAL_DMA_XFER_ERROR_CB_ID, vgaStop);
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <vgaStart+0x9c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a0f      	ldr	r2, [pc, #60]	; (8001a74 <vgaStart+0xa4>)
 8001a38:	2104      	movs	r1, #4
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 fc36 	bl	80022ac <HAL_DMA_RegisterCallback>
 8001a40:	4603      	mov	r3, r0
 8001a42:	713b      	strb	r3, [r7, #4]

	//__HAL_TIM_ENABLE(&htim5);

	//start the circular buffer dma transfer aka vga main loop
	HAL_StatusTypeDef statusDMA = HAL_DMAEx_MultiBufferStart_IT(vgaCircularDMA, (uint32_t)&lineBuff[0], (uint32_t)&(GPIOC->ODR), (uint32_t)&lineBuff[horiWhole], horiWhole);
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <vgaStart+0x9c>)
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	490b      	ldr	r1, [pc, #44]	; (8001a78 <vgaStart+0xa8>)
 8001a4a:	4a0c      	ldr	r2, [pc, #48]	; (8001a7c <vgaStart+0xac>)
 8001a4c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	4613      	mov	r3, r2
 8001a54:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <vgaStart+0xb0>)
 8001a56:	f000 fd2f 	bl	80024b8 <HAL_DMAEx_MultiBufferStart_IT>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	70fb      	strb	r3, [r7, #3]
	//HAL_DMA_Start_IT(vgaCircularDMA, (uint32_t)&lineBuff[0], (uint32_t)&(GPIOC->ODR), horiWhole*2);

	//HAL_DMAEx_MultiBufferStart_IT(hdma, SrcAddress, DstAddress, SecondMemAddress, DataLength);
	//vgaLoop();
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000b50 	.word	0x20000b50
 8001a6c:	20000b54 	.word	0x20000b54
 8001a70:	0800172d 	.word	0x0800172d
 8001a74:	08001a85 	.word	0x08001a85
 8001a78:	2000027c 	.word	0x2000027c
 8001a7c:	2000059c 	.word	0x2000059c
 8001a80:	40020814 	.word	0x40020814

08001a84 <vgaStop>:

int vgaErrorCount;
void vgaStop(){
 8001a84:	b480      	push	{r7}
 8001a86:	b097      	sub	sp, #92	; 0x5c
 8001a88:	af00      	add	r7, sp, #0
	//todo stop the circular buffer copy
	// write 0 to the vga port
	// remove call backs
	// set the vga state machine in a good state
	return;
 8001a8a:	bf00      	nop
	}
	return;
	while(1){

	}
}
 8001a8c:	375c      	adds	r7, #92	; 0x5c
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop

08001a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ad0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a9c:	480d      	ldr	r0, [pc, #52]	; (8001ad4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a9e:	490e      	ldr	r1, [pc, #56]	; (8001ad8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001aa0:	4a0e      	ldr	r2, [pc, #56]	; (8001adc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa4:	e002      	b.n	8001aac <LoopCopyDataInit>

08001aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aaa:	3304      	adds	r3, #4

08001aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab0:	d3f9      	bcc.n	8001aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab2:	4a0b      	ldr	r2, [pc, #44]	; (8001ae0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ab4:	4c0b      	ldr	r4, [pc, #44]	; (8001ae4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab8:	e001      	b.n	8001abe <LoopFillZerobss>

08001aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001abc:	3204      	adds	r2, #4

08001abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac0:	d3fb      	bcc.n	8001aba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ac2:	f7ff fcf9 	bl	80014b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ac6:	f004 f815 	bl	8005af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aca:	f7fe ff19 	bl	8000900 <main>
  bx  lr    
 8001ace:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ad0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001adc:	08007874 	.word	0x08007874
  ldr r2, =_sbss
 8001ae0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ae4:	20000f78 	.word	0x20000f78

08001ae8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae8:	e7fe      	b.n	8001ae8 <ADC_IRQHandler>
	...

08001aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001af0:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <HAL_Init+0x40>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0d      	ldr	r2, [pc, #52]	; (8001b2c <HAL_Init+0x40>)
 8001af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001afa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_Init+0x40>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <HAL_Init+0x40>)
 8001b02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <HAL_Init+0x40>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a07      	ldr	r2, [pc, #28]	; (8001b2c <HAL_Init+0x40>)
 8001b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b14:	2003      	movs	r0, #3
 8001b16:	f000 f94f 	bl	8001db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f000 f808 	bl	8001b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b20:	f7ff fb2e 	bl	8001180 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023c00 	.word	0x40023c00

08001b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_InitTick+0x54>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_InitTick+0x58>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	4619      	mov	r1, r3
 8001b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 f967 	bl	8001e22 <HAL_SYSTICK_Config>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e00e      	b.n	8001b7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b0f      	cmp	r3, #15
 8001b62:	d80a      	bhi.n	8001b7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b64:	2200      	movs	r2, #0
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	f04f 30ff 	mov.w	r0, #4294967295
 8001b6c:	f000 f92f 	bl	8001dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b70:	4a06      	ldr	r2, [pc, #24]	; (8001b8c <HAL_InitTick+0x5c>)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
 8001b78:	e000      	b.n	8001b7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000000 	.word	0x20000000
 8001b88:	20000008 	.word	0x20000008
 8001b8c:	20000004 	.word	0x20000004

08001b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <HAL_IncTick+0x20>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_IncTick+0x24>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	4a04      	ldr	r2, [pc, #16]	; (8001bb4 <HAL_IncTick+0x24>)
 8001ba2:	6013      	str	r3, [r2, #0]
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	20000008 	.word	0x20000008
 8001bb4:	20000f64 	.word	0x20000f64

08001bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return uwTick;
 8001bbc:	4b03      	ldr	r3, [pc, #12]	; (8001bcc <HAL_GetTick+0x14>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20000f64 	.word	0x20000f64

08001bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd8:	f7ff ffee 	bl	8001bb8 <HAL_GetTick>
 8001bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be8:	d005      	beq.n	8001bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <HAL_Delay+0x44>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bf6:	bf00      	nop
 8001bf8:	f7ff ffde 	bl	8001bb8 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d8f7      	bhi.n	8001bf8 <HAL_Delay+0x28>
  {
  }
}
 8001c08:	bf00      	nop
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000008 	.word	0x20000008

08001c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <__NVIC_SetPriorityGrouping+0x44>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c34:	4013      	ands	r3, r2
 8001c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4a:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <__NVIC_SetPriorityGrouping+0x44>)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	60d3      	str	r3, [r2, #12]
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c64:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <__NVIC_GetPriorityGrouping+0x18>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	0a1b      	lsrs	r3, r3, #8
 8001c6a:	f003 0307 	and.w	r3, r3, #7
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	db0b      	blt.n	8001ca6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	f003 021f 	and.w	r2, r3, #31
 8001c94:	4907      	ldr	r1, [pc, #28]	; (8001cb4 <__NVIC_EnableIRQ+0x38>)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	095b      	lsrs	r3, r3, #5
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000e100 	.word	0xe000e100

08001cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	6039      	str	r1, [r7, #0]
 8001cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	db0a      	blt.n	8001ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	490c      	ldr	r1, [pc, #48]	; (8001d04 <__NVIC_SetPriority+0x4c>)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	0112      	lsls	r2, r2, #4
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	440b      	add	r3, r1
 8001cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce0:	e00a      	b.n	8001cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	4908      	ldr	r1, [pc, #32]	; (8001d08 <__NVIC_SetPriority+0x50>)
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	3b04      	subs	r3, #4
 8001cf0:	0112      	lsls	r2, r2, #4
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	761a      	strb	r2, [r3, #24]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000e100 	.word	0xe000e100
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b089      	sub	sp, #36	; 0x24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f1c3 0307 	rsb	r3, r3, #7
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	bf28      	it	cs
 8001d2a:	2304      	movcs	r3, #4
 8001d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3304      	adds	r3, #4
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	d902      	bls.n	8001d3c <NVIC_EncodePriority+0x30>
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3b03      	subs	r3, #3
 8001d3a:	e000      	b.n	8001d3e <NVIC_EncodePriority+0x32>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d40:	f04f 32ff 	mov.w	r2, #4294967295
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	401a      	ands	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d54:	f04f 31ff 	mov.w	r1, #4294967295
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5e:	43d9      	mvns	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	4313      	orrs	r3, r2
         );
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3724      	adds	r7, #36	; 0x24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d84:	d301      	bcc.n	8001d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d86:	2301      	movs	r3, #1
 8001d88:	e00f      	b.n	8001daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	; (8001db4 <SysTick_Config+0x40>)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d92:	210f      	movs	r1, #15
 8001d94:	f04f 30ff 	mov.w	r0, #4294967295
 8001d98:	f7ff ff8e 	bl	8001cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <SysTick_Config+0x40>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da2:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <SysTick_Config+0x40>)
 8001da4:	2207      	movs	r2, #7
 8001da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	e000e010 	.word	0xe000e010

08001db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ff29 	bl	8001c18 <__NVIC_SetPriorityGrouping>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
 8001dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001de0:	f7ff ff3e 	bl	8001c60 <__NVIC_GetPriorityGrouping>
 8001de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	68b9      	ldr	r1, [r7, #8]
 8001dea:	6978      	ldr	r0, [r7, #20]
 8001dec:	f7ff ff8e 	bl	8001d0c <NVIC_EncodePriority>
 8001df0:	4602      	mov	r2, r0
 8001df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df6:	4611      	mov	r1, r2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff5d 	bl	8001cb8 <__NVIC_SetPriority>
}
 8001dfe:	bf00      	nop
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff31 	bl	8001c7c <__NVIC_EnableIRQ>
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff ffa2 	bl	8001d74 <SysTick_Config>
 8001e30:	4603      	mov	r3, r0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e48:	f7ff feb6 	bl	8001bb8 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e099      	b.n	8001f8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0201 	bic.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e78:	e00f      	b.n	8001e9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e7a:	f7ff fe9d 	bl	8001bb8 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b05      	cmp	r3, #5
 8001e86:	d908      	bls.n	8001e9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2203      	movs	r2, #3
 8001e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e078      	b.n	8001f8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1e8      	bne.n	8001e7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	4b38      	ldr	r3, [pc, #224]	; (8001f94 <HAL_DMA_Init+0x158>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ede:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d107      	bne.n	8001f04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	4313      	orrs	r3, r2
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f023 0307 	bic.w	r3, r3, #7
 8001f1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d117      	bne.n	8001f5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00e      	beq.n	8001f5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 fa3d 	bl	80023c0 <DMA_CheckFifoParam>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d008      	beq.n	8001f5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2240      	movs	r2, #64	; 0x40
 8001f50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e016      	b.n	8001f8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f9f4 	bl	8002354 <DMA_CalcBaseAndBitshift>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f74:	223f      	movs	r2, #63	; 0x3f
 8001f76:	409a      	lsls	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	f010803f 	.word	0xf010803f

08001f98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fa4:	4b8e      	ldr	r3, [pc, #568]	; (80021e0 <HAL_DMA_IRQHandler+0x248>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a8e      	ldr	r2, [pc, #568]	; (80021e4 <HAL_DMA_IRQHandler+0x24c>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	0a9b      	lsrs	r3, r3, #10
 8001fb0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc2:	2208      	movs	r2, #8
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d01a      	beq.n	8002004 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d013      	beq.n	8002004 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0204 	bic.w	r2, r2, #4
 8001fea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff0:	2208      	movs	r2, #8
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffc:	f043 0201 	orr.w	r2, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002008:	2201      	movs	r2, #1
 800200a:	409a      	lsls	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4013      	ands	r3, r2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d012      	beq.n	800203a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00b      	beq.n	800203a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002026:	2201      	movs	r2, #1
 8002028:	409a      	lsls	r2, r3
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002032:	f043 0202 	orr.w	r2, r3, #2
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203e:	2204      	movs	r2, #4
 8002040:	409a      	lsls	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4013      	ands	r3, r2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d012      	beq.n	8002070 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00b      	beq.n	8002070 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205c:	2204      	movs	r2, #4
 800205e:	409a      	lsls	r2, r3
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002068:	f043 0204 	orr.w	r2, r3, #4
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002074:	2210      	movs	r2, #16
 8002076:	409a      	lsls	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4013      	ands	r3, r2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d043      	beq.n	8002108 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	d03c      	beq.n	8002108 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002092:	2210      	movs	r2, #16
 8002094:	409a      	lsls	r2, r3
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d018      	beq.n	80020da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d108      	bne.n	80020c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d024      	beq.n	8002108 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	4798      	blx	r3
 80020c6:	e01f      	b.n	8002108 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d01b      	beq.n	8002108 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	4798      	blx	r3
 80020d8:	e016      	b.n	8002108 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d107      	bne.n	80020f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0208 	bic.w	r2, r2, #8
 80020f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210c:	2220      	movs	r2, #32
 800210e:	409a      	lsls	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 808f 	beq.w	8002238 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0310 	and.w	r3, r3, #16
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 8087 	beq.w	8002238 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212e:	2220      	movs	r2, #32
 8002130:	409a      	lsls	r2, r3
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b05      	cmp	r3, #5
 8002140:	d136      	bne.n	80021b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0216 	bic.w	r2, r2, #22
 8002150:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	695a      	ldr	r2, [r3, #20]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002160:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	2b00      	cmp	r3, #0
 8002168:	d103      	bne.n	8002172 <HAL_DMA_IRQHandler+0x1da>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800216e:	2b00      	cmp	r3, #0
 8002170:	d007      	beq.n	8002182 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0208 	bic.w	r2, r2, #8
 8002180:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002186:	223f      	movs	r2, #63	; 0x3f
 8002188:	409a      	lsls	r2, r3
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d07e      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	4798      	blx	r3
        }
        return;
 80021ae:	e079      	b.n	80022a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d01d      	beq.n	80021fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10d      	bne.n	80021e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d031      	beq.n	8002238 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	4798      	blx	r3
 80021dc:	e02c      	b.n	8002238 <HAL_DMA_IRQHandler+0x2a0>
 80021de:	bf00      	nop
 80021e0:	20000000 	.word	0x20000000
 80021e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d023      	beq.n	8002238 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	4798      	blx	r3
 80021f8:	e01e      	b.n	8002238 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10f      	bne.n	8002228 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0210 	bic.w	r2, r2, #16
 8002216:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223c:	2b00      	cmp	r3, #0
 800223e:	d032      	beq.n	80022a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	d022      	beq.n	8002292 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2205      	movs	r2, #5
 8002250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0201 	bic.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	3301      	adds	r3, #1
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	429a      	cmp	r2, r3
 800226e:	d307      	bcc.n	8002280 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f2      	bne.n	8002264 <HAL_DMA_IRQHandler+0x2cc>
 800227e:	e000      	b.n	8002282 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002280:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002296:	2b00      	cmp	r3, #0
 8002298:	d005      	beq.n	80022a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	4798      	blx	r3
 80022a2:	e000      	b.n	80022a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80022a4:	bf00      	nop
    }
  }
}
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	460b      	mov	r3, r1
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <HAL_DMA_RegisterCallback+0x20>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e03d      	b.n	8002348 <HAL_DMA_RegisterCallback+0x9c>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d12c      	bne.n	800233a <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 80022e0:	7afb      	ldrb	r3, [r7, #11]
 80022e2:	2b05      	cmp	r3, #5
 80022e4:	d826      	bhi.n	8002334 <HAL_DMA_RegisterCallback+0x88>
 80022e6:	a201      	add	r2, pc, #4	; (adr r2, 80022ec <HAL_DMA_RegisterCallback+0x40>)
 80022e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ec:	08002305 	.word	0x08002305
 80022f0:	0800230d 	.word	0x0800230d
 80022f4:	08002315 	.word	0x08002315
 80022f8:	0800231d 	.word	0x0800231d
 80022fc:	08002325 	.word	0x08002325
 8002300:	0800232d 	.word	0x0800232d
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 800230a:	e018      	b.n	800233e <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002312:	e014      	b.n	800233e <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 800231a:	e010      	b.n	800233e <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8002322:	e00c      	b.n	800233e <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 800232a:	e008      	b.n	800233e <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002332:	e004      	b.n	800233e <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	75fb      	strb	r3, [r7, #23]
      break;
 8002338:	e001      	b.n	800233e <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8002346:	7dfb      	ldrb	r3, [r7, #23]
}
 8002348:	4618      	mov	r0, r3
 800234a:	371c      	adds	r7, #28
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	3b10      	subs	r3, #16
 8002364:	4a14      	ldr	r2, [pc, #80]	; (80023b8 <DMA_CalcBaseAndBitshift+0x64>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	091b      	lsrs	r3, r3, #4
 800236c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800236e:	4a13      	ldr	r2, [pc, #76]	; (80023bc <DMA_CalcBaseAndBitshift+0x68>)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4413      	add	r3, r2
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2b03      	cmp	r3, #3
 8002380:	d909      	bls.n	8002396 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800238a:	f023 0303 	bic.w	r3, r3, #3
 800238e:	1d1a      	adds	r2, r3, #4
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	659a      	str	r2, [r3, #88]	; 0x58
 8002394:	e007      	b.n	80023a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800239e:	f023 0303 	bic.w	r3, r3, #3
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	aaaaaaab 	.word	0xaaaaaaab
 80023bc:	08007828 	.word	0x08007828

080023c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023c8:	2300      	movs	r3, #0
 80023ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d11f      	bne.n	800241a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d856      	bhi.n	800248e <DMA_CheckFifoParam+0xce>
 80023e0:	a201      	add	r2, pc, #4	; (adr r2, 80023e8 <DMA_CheckFifoParam+0x28>)
 80023e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e6:	bf00      	nop
 80023e8:	080023f9 	.word	0x080023f9
 80023ec:	0800240b 	.word	0x0800240b
 80023f0:	080023f9 	.word	0x080023f9
 80023f4:	0800248f 	.word	0x0800248f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d046      	beq.n	8002492 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002408:	e043      	b.n	8002492 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002412:	d140      	bne.n	8002496 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002418:	e03d      	b.n	8002496 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002422:	d121      	bne.n	8002468 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b03      	cmp	r3, #3
 8002428:	d837      	bhi.n	800249a <DMA_CheckFifoParam+0xda>
 800242a:	a201      	add	r2, pc, #4	; (adr r2, 8002430 <DMA_CheckFifoParam+0x70>)
 800242c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002430:	08002441 	.word	0x08002441
 8002434:	08002447 	.word	0x08002447
 8002438:	08002441 	.word	0x08002441
 800243c:	08002459 	.word	0x08002459
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
      break;
 8002444:	e030      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d025      	beq.n	800249e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002456:	e022      	b.n	800249e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002460:	d11f      	bne.n	80024a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002466:	e01c      	b.n	80024a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d903      	bls.n	8002476 <DMA_CheckFifoParam+0xb6>
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b03      	cmp	r3, #3
 8002472:	d003      	beq.n	800247c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002474:	e018      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	73fb      	strb	r3, [r7, #15]
      break;
 800247a:	e015      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002480:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00e      	beq.n	80024a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
      break;
 800248c:	e00b      	b.n	80024a6 <DMA_CheckFifoParam+0xe6>
      break;
 800248e:	bf00      	nop
 8002490:	e00a      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002492:	bf00      	nop
 8002494:	e008      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002496:	bf00      	nop
 8002498:	e006      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      break;
 800249a:	bf00      	nop
 800249c:	e004      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      break;
 800249e:	bf00      	nop
 80024a0:	e002      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80024a2:	bf00      	nop
 80024a4:	e000      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      break;
 80024a6:	bf00      	nop
    }
  } 
  
  return status; 
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop

080024b8 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2b80      	cmp	r3, #128	; 0x80
 80024d0:	d106      	bne.n	80024e0 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	f001 b911 	b.w	8003702 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d007      	beq.n	80024f8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d105      	bne.n	8002504 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2240      	movs	r2, #64	; 0x40
 80024fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	f001 b8ff 	b.w	8003702 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800250a:	2b01      	cmp	r3, #1
 800250c:	d102      	bne.n	8002514 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 800250e:	2302      	movs	r3, #2
 8002510:	f001 b8f7 	b.w	8003702 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b01      	cmp	r3, #1
 8002526:	f041 80e5 	bne.w	80036f4 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2202      	movs	r2, #2
 800252e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002546:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f001 f8f6 	bl	8003748 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	461a      	mov	r2, r3
 8002562:	4b8d      	ldr	r3, [pc, #564]	; (8002798 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8002564:	429a      	cmp	r2, r3
 8002566:	d960      	bls.n	800262a <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a8b      	ldr	r2, [pc, #556]	; (800279c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d057      	beq.n	8002622 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a8a      	ldr	r2, [pc, #552]	; (80027a0 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d050      	beq.n	800261e <HAL_DMAEx_MultiBufferStart_IT+0x166>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a88      	ldr	r2, [pc, #544]	; (80027a4 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d049      	beq.n	800261a <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a87      	ldr	r2, [pc, #540]	; (80027a8 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d042      	beq.n	8002616 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a85      	ldr	r2, [pc, #532]	; (80027ac <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d03a      	beq.n	8002610 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a84      	ldr	r2, [pc, #528]	; (80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d032      	beq.n	800260a <HAL_DMAEx_MultiBufferStart_IT+0x152>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a82      	ldr	r2, [pc, #520]	; (80027b4 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d02a      	beq.n	8002604 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a81      	ldr	r2, [pc, #516]	; (80027b8 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d022      	beq.n	80025fe <HAL_DMAEx_MultiBufferStart_IT+0x146>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a7f      	ldr	r2, [pc, #508]	; (80027bc <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d01a      	beq.n	80025f8 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a7e      	ldr	r2, [pc, #504]	; (80027c0 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d012      	beq.n	80025f2 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a7c      	ldr	r2, [pc, #496]	; (80027c4 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d00a      	beq.n	80025ec <HAL_DMAEx_MultiBufferStart_IT+0x134>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a7b      	ldr	r2, [pc, #492]	; (80027c8 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d102      	bne.n	80025e6 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 80025e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025e4:	e01e      	b.n	8002624 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80025e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80025ea:	e01b      	b.n	8002624 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80025ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025f0:	e018      	b.n	8002624 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80025f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025f6:	e015      	b.n	8002624 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80025f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025fc:	e012      	b.n	8002624 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80025fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002602:	e00f      	b.n	8002624 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002604:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002608:	e00c      	b.n	8002624 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800260a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800260e:	e009      	b.n	8002624 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002610:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002614:	e006      	b.n	8002624 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002616:	2320      	movs	r3, #32
 8002618:	e004      	b.n	8002624 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800261a:	2320      	movs	r3, #32
 800261c:	e002      	b.n	8002624 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800261e:	2320      	movs	r3, #32
 8002620:	e000      	b.n	8002624 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002622:	2320      	movs	r3, #32
 8002624:	4a69      	ldr	r2, [pc, #420]	; (80027cc <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002626:	60d3      	str	r3, [r2, #12]
 8002628:	e14f      	b.n	80028ca <HAL_DMAEx_MultiBufferStart_IT+0x412>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	4b67      	ldr	r3, [pc, #412]	; (80027d0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002632:	429a      	cmp	r2, r3
 8002634:	d960      	bls.n	80026f8 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a58      	ldr	r2, [pc, #352]	; (800279c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d057      	beq.n	80026f0 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a56      	ldr	r2, [pc, #344]	; (80027a0 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d050      	beq.n	80026ec <HAL_DMAEx_MultiBufferStart_IT+0x234>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a55      	ldr	r2, [pc, #340]	; (80027a4 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d049      	beq.n	80026e8 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a53      	ldr	r2, [pc, #332]	; (80027a8 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d042      	beq.n	80026e4 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a52      	ldr	r2, [pc, #328]	; (80027ac <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d03a      	beq.n	80026de <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a50      	ldr	r2, [pc, #320]	; (80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d032      	beq.n	80026d8 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a4f      	ldr	r2, [pc, #316]	; (80027b4 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d02a      	beq.n	80026d2 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a4d      	ldr	r2, [pc, #308]	; (80027b8 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d022      	beq.n	80026cc <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a4c      	ldr	r2, [pc, #304]	; (80027bc <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d01a      	beq.n	80026c6 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a4a      	ldr	r2, [pc, #296]	; (80027c0 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d012      	beq.n	80026c0 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a49      	ldr	r2, [pc, #292]	; (80027c4 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d00a      	beq.n	80026ba <HAL_DMAEx_MultiBufferStart_IT+0x202>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a47      	ldr	r2, [pc, #284]	; (80027c8 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d102      	bne.n	80026b4 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 80026ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026b2:	e01e      	b.n	80026f2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80026b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80026b8:	e01b      	b.n	80026f2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80026ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026be:	e018      	b.n	80026f2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80026c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026c4:	e015      	b.n	80026f2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80026c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026ca:	e012      	b.n	80026f2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80026cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026d0:	e00f      	b.n	80026f2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80026d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026d6:	e00c      	b.n	80026f2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80026d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026dc:	e009      	b.n	80026f2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80026de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026e2:	e006      	b.n	80026f2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80026e4:	2320      	movs	r3, #32
 80026e6:	e004      	b.n	80026f2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80026e8:	2320      	movs	r3, #32
 80026ea:	e002      	b.n	80026f2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80026ec:	2320      	movs	r3, #32
 80026ee:	e000      	b.n	80026f2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80026f0:	2320      	movs	r3, #32
 80026f2:	4a36      	ldr	r2, [pc, #216]	; (80027cc <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80026f4:	6093      	str	r3, [r2, #8]
 80026f6:	e0e8      	b.n	80028ca <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	4b35      	ldr	r3, [pc, #212]	; (80027d4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002700:	429a      	cmp	r2, r3
 8002702:	f240 8082 	bls.w	800280a <HAL_DMAEx_MultiBufferStart_IT+0x352>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a24      	ldr	r2, [pc, #144]	; (800279c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d078      	beq.n	8002802 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a22      	ldr	r2, [pc, #136]	; (80027a0 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d071      	beq.n	80027fe <HAL_DMAEx_MultiBufferStart_IT+0x346>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a21      	ldr	r2, [pc, #132]	; (80027a4 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d06a      	beq.n	80027fa <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a1f      	ldr	r2, [pc, #124]	; (80027a8 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d063      	beq.n	80027f6 <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a1e      	ldr	r2, [pc, #120]	; (80027ac <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d05b      	beq.n	80027f0 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a1c      	ldr	r2, [pc, #112]	; (80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d053      	beq.n	80027ea <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a1b      	ldr	r2, [pc, #108]	; (80027b4 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d04b      	beq.n	80027e4 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a19      	ldr	r2, [pc, #100]	; (80027b8 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d043      	beq.n	80027de <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a18      	ldr	r2, [pc, #96]	; (80027bc <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d03b      	beq.n	80027d8 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a16      	ldr	r2, [pc, #88]	; (80027c0 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d012      	beq.n	8002790 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a15      	ldr	r2, [pc, #84]	; (80027c4 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d00a      	beq.n	800278a <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a13      	ldr	r2, [pc, #76]	; (80027c8 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d102      	bne.n	8002784 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 800277e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002782:	e03f      	b.n	8002804 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002784:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002788:	e03c      	b.n	8002804 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800278a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800278e:	e039      	b.n	8002804 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002790:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002794:	e036      	b.n	8002804 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002796:	bf00      	nop
 8002798:	40026458 	.word	0x40026458
 800279c:	40026010 	.word	0x40026010
 80027a0:	40026410 	.word	0x40026410
 80027a4:	40026070 	.word	0x40026070
 80027a8:	40026470 	.word	0x40026470
 80027ac:	40026028 	.word	0x40026028
 80027b0:	40026428 	.word	0x40026428
 80027b4:	40026088 	.word	0x40026088
 80027b8:	40026488 	.word	0x40026488
 80027bc:	40026040 	.word	0x40026040
 80027c0:	40026440 	.word	0x40026440
 80027c4:	400260a0 	.word	0x400260a0
 80027c8:	400264a0 	.word	0x400264a0
 80027cc:	40026400 	.word	0x40026400
 80027d0:	400260b8 	.word	0x400260b8
 80027d4:	40026058 	.word	0x40026058
 80027d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027dc:	e012      	b.n	8002804 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80027de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027e2:	e00f      	b.n	8002804 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80027e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027e8:	e00c      	b.n	8002804 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80027ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027ee:	e009      	b.n	8002804 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80027f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027f4:	e006      	b.n	8002804 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80027f6:	2320      	movs	r3, #32
 80027f8:	e004      	b.n	8002804 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80027fa:	2320      	movs	r3, #32
 80027fc:	e002      	b.n	8002804 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80027fe:	2320      	movs	r3, #32
 8002800:	e000      	b.n	8002804 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002802:	2320      	movs	r3, #32
 8002804:	4a8c      	ldr	r2, [pc, #560]	; (8002a38 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002806:	60d3      	str	r3, [r2, #12]
 8002808:	e05f      	b.n	80028ca <HAL_DMAEx_MultiBufferStart_IT+0x412>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a8b      	ldr	r2, [pc, #556]	; (8002a3c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d057      	beq.n	80028c4 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a89      	ldr	r2, [pc, #548]	; (8002a40 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d050      	beq.n	80028c0 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a88      	ldr	r2, [pc, #544]	; (8002a44 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d049      	beq.n	80028bc <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a86      	ldr	r2, [pc, #536]	; (8002a48 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d042      	beq.n	80028b8 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a85      	ldr	r2, [pc, #532]	; (8002a4c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d03a      	beq.n	80028b2 <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a83      	ldr	r2, [pc, #524]	; (8002a50 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d032      	beq.n	80028ac <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a82      	ldr	r2, [pc, #520]	; (8002a54 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d02a      	beq.n	80028a6 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a80      	ldr	r2, [pc, #512]	; (8002a58 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d022      	beq.n	80028a0 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a7f      	ldr	r2, [pc, #508]	; (8002a5c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d01a      	beq.n	800289a <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a7d      	ldr	r2, [pc, #500]	; (8002a60 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d012      	beq.n	8002894 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a7c      	ldr	r2, [pc, #496]	; (8002a64 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d00a      	beq.n	800288e <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a7a      	ldr	r2, [pc, #488]	; (8002a68 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d102      	bne.n	8002888 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8002882:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002886:	e01e      	b.n	80028c6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002888:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800288c:	e01b      	b.n	80028c6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800288e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002892:	e018      	b.n	80028c6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002894:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002898:	e015      	b.n	80028c6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800289a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800289e:	e012      	b.n	80028c6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80028a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028a4:	e00f      	b.n	80028c6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80028a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028aa:	e00c      	b.n	80028c6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80028ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028b0:	e009      	b.n	80028c6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80028b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028b6:	e006      	b.n	80028c6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80028b8:	2320      	movs	r3, #32
 80028ba:	e004      	b.n	80028c6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80028bc:	2320      	movs	r3, #32
 80028be:	e002      	b.n	80028c6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80028c0:	2320      	movs	r3, #32
 80028c2:	e000      	b.n	80028c6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80028c4:	2320      	movs	r3, #32
 80028c6:	4a5c      	ldr	r2, [pc, #368]	; (8002a38 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80028c8:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	4b66      	ldr	r3, [pc, #408]	; (8002a6c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d960      	bls.n	8002998 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a58      	ldr	r2, [pc, #352]	; (8002a3c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d057      	beq.n	8002990 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a56      	ldr	r2, [pc, #344]	; (8002a40 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d050      	beq.n	800298c <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a55      	ldr	r2, [pc, #340]	; (8002a44 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d049      	beq.n	8002988 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a53      	ldr	r2, [pc, #332]	; (8002a48 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d042      	beq.n	8002984 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a52      	ldr	r2, [pc, #328]	; (8002a4c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d03a      	beq.n	800297e <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a50      	ldr	r2, [pc, #320]	; (8002a50 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d032      	beq.n	8002978 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a4f      	ldr	r2, [pc, #316]	; (8002a54 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d02a      	beq.n	8002972 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a4d      	ldr	r2, [pc, #308]	; (8002a58 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d022      	beq.n	800296c <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a4c      	ldr	r2, [pc, #304]	; (8002a5c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d01a      	beq.n	8002966 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a4a      	ldr	r2, [pc, #296]	; (8002a60 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d012      	beq.n	8002960 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a49      	ldr	r2, [pc, #292]	; (8002a64 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d00a      	beq.n	800295a <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a47      	ldr	r2, [pc, #284]	; (8002a68 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d102      	bne.n	8002954 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 800294e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002952:	e01e      	b.n	8002992 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002954:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002958:	e01b      	b.n	8002992 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800295a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800295e:	e018      	b.n	8002992 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002960:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002964:	e015      	b.n	8002992 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002966:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800296a:	e012      	b.n	8002992 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800296c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002970:	e00f      	b.n	8002992 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002976:	e00c      	b.n	8002992 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800297c:	e009      	b.n	8002992 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800297e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002982:	e006      	b.n	8002992 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002984:	2310      	movs	r3, #16
 8002986:	e004      	b.n	8002992 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002988:	2310      	movs	r3, #16
 800298a:	e002      	b.n	8002992 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800298c:	2310      	movs	r3, #16
 800298e:	e000      	b.n	8002992 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002990:	2310      	movs	r3, #16
 8002992:	4a37      	ldr	r2, [pc, #220]	; (8002a70 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002994:	60d3      	str	r3, [r2, #12]
 8002996:	e14f      	b.n	8002c38 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	4b35      	ldr	r3, [pc, #212]	; (8002a74 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80029a0:	429a      	cmp	r2, r3
 80029a2:	f240 8082 	bls.w	8002aaa <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a24      	ldr	r2, [pc, #144]	; (8002a3c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d078      	beq.n	8002aa2 <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a22      	ldr	r2, [pc, #136]	; (8002a40 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d071      	beq.n	8002a9e <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a21      	ldr	r2, [pc, #132]	; (8002a44 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d06a      	beq.n	8002a9a <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a1f      	ldr	r2, [pc, #124]	; (8002a48 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d063      	beq.n	8002a96 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a1e      	ldr	r2, [pc, #120]	; (8002a4c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d05b      	beq.n	8002a90 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a1c      	ldr	r2, [pc, #112]	; (8002a50 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d053      	beq.n	8002a8a <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a1b      	ldr	r2, [pc, #108]	; (8002a54 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d04b      	beq.n	8002a84 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a19      	ldr	r2, [pc, #100]	; (8002a58 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d043      	beq.n	8002a7e <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a18      	ldr	r2, [pc, #96]	; (8002a5c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d03b      	beq.n	8002a78 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a16      	ldr	r2, [pc, #88]	; (8002a60 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d012      	beq.n	8002a30 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a15      	ldr	r2, [pc, #84]	; (8002a64 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d00a      	beq.n	8002a2a <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a13      	ldr	r2, [pc, #76]	; (8002a68 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d102      	bne.n	8002a24 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8002a1e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a22:	e03f      	b.n	8002aa4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002a24:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a28:	e03c      	b.n	8002aa4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002a2a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a2e:	e039      	b.n	8002aa4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002a30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a34:	e036      	b.n	8002aa4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002a36:	bf00      	nop
 8002a38:	40026000 	.word	0x40026000
 8002a3c:	40026010 	.word	0x40026010
 8002a40:	40026410 	.word	0x40026410
 8002a44:	40026070 	.word	0x40026070
 8002a48:	40026470 	.word	0x40026470
 8002a4c:	40026028 	.word	0x40026028
 8002a50:	40026428 	.word	0x40026428
 8002a54:	40026088 	.word	0x40026088
 8002a58:	40026488 	.word	0x40026488
 8002a5c:	40026040 	.word	0x40026040
 8002a60:	40026440 	.word	0x40026440
 8002a64:	400260a0 	.word	0x400260a0
 8002a68:	400264a0 	.word	0x400264a0
 8002a6c:	40026458 	.word	0x40026458
 8002a70:	40026400 	.word	0x40026400
 8002a74:	400260b8 	.word	0x400260b8
 8002a78:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a7c:	e012      	b.n	8002aa4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a82:	e00f      	b.n	8002aa4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a88:	e00c      	b.n	8002aa4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a8e:	e009      	b.n	8002aa4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a94:	e006      	b.n	8002aa4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002a96:	2310      	movs	r3, #16
 8002a98:	e004      	b.n	8002aa4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002a9a:	2310      	movs	r3, #16
 8002a9c:	e002      	b.n	8002aa4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002a9e:	2310      	movs	r3, #16
 8002aa0:	e000      	b.n	8002aa4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002aa2:	2310      	movs	r3, #16
 8002aa4:	4a8c      	ldr	r2, [pc, #560]	; (8002cd8 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8002aa6:	6093      	str	r3, [r2, #8]
 8002aa8:	e0c6      	b.n	8002c38 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	4b8a      	ldr	r3, [pc, #552]	; (8002cdc <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d960      	bls.n	8002b78 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a89      	ldr	r2, [pc, #548]	; (8002ce0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d057      	beq.n	8002b70 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a87      	ldr	r2, [pc, #540]	; (8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d050      	beq.n	8002b6c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a86      	ldr	r2, [pc, #536]	; (8002ce8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d049      	beq.n	8002b68 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a84      	ldr	r2, [pc, #528]	; (8002cec <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d042      	beq.n	8002b64 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a83      	ldr	r2, [pc, #524]	; (8002cf0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d03a      	beq.n	8002b5e <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a81      	ldr	r2, [pc, #516]	; (8002cf4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d032      	beq.n	8002b58 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a80      	ldr	r2, [pc, #512]	; (8002cf8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d02a      	beq.n	8002b52 <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a7e      	ldr	r2, [pc, #504]	; (8002cfc <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d022      	beq.n	8002b4c <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a7d      	ldr	r2, [pc, #500]	; (8002d00 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d01a      	beq.n	8002b46 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a7b      	ldr	r2, [pc, #492]	; (8002d04 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d012      	beq.n	8002b40 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a7a      	ldr	r2, [pc, #488]	; (8002d08 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d00a      	beq.n	8002b3a <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a78      	ldr	r2, [pc, #480]	; (8002d0c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d102      	bne.n	8002b34 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8002b2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b32:	e01e      	b.n	8002b72 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002b34:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002b38:	e01b      	b.n	8002b72 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002b3a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b3e:	e018      	b.n	8002b72 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002b40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b44:	e015      	b.n	8002b72 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002b46:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b4a:	e012      	b.n	8002b72 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b50:	e00f      	b.n	8002b72 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b56:	e00c      	b.n	8002b72 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b5c:	e009      	b.n	8002b72 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b62:	e006      	b.n	8002b72 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002b64:	2310      	movs	r3, #16
 8002b66:	e004      	b.n	8002b72 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002b68:	2310      	movs	r3, #16
 8002b6a:	e002      	b.n	8002b72 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002b6c:	2310      	movs	r3, #16
 8002b6e:	e000      	b.n	8002b72 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002b70:	2310      	movs	r3, #16
 8002b72:	4a67      	ldr	r2, [pc, #412]	; (8002d10 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002b74:	60d3      	str	r3, [r2, #12]
 8002b76:	e05f      	b.n	8002c38 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a58      	ldr	r2, [pc, #352]	; (8002ce0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d057      	beq.n	8002c32 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a57      	ldr	r2, [pc, #348]	; (8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d050      	beq.n	8002c2e <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a55      	ldr	r2, [pc, #340]	; (8002ce8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d049      	beq.n	8002c2a <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a54      	ldr	r2, [pc, #336]	; (8002cec <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d042      	beq.n	8002c26 <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a52      	ldr	r2, [pc, #328]	; (8002cf0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d03a      	beq.n	8002c20 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a51      	ldr	r2, [pc, #324]	; (8002cf4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d032      	beq.n	8002c1a <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a4f      	ldr	r2, [pc, #316]	; (8002cf8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d02a      	beq.n	8002c14 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a4e      	ldr	r2, [pc, #312]	; (8002cfc <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d022      	beq.n	8002c0e <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a4c      	ldr	r2, [pc, #304]	; (8002d00 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d01a      	beq.n	8002c08 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a4b      	ldr	r2, [pc, #300]	; (8002d04 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d012      	beq.n	8002c02 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a49      	ldr	r2, [pc, #292]	; (8002d08 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00a      	beq.n	8002bfc <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a48      	ldr	r2, [pc, #288]	; (8002d0c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d102      	bne.n	8002bf6 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8002bf0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002bf4:	e01e      	b.n	8002c34 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002bf6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002bfa:	e01b      	b.n	8002c34 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002bfc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c00:	e018      	b.n	8002c34 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002c02:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c06:	e015      	b.n	8002c34 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002c08:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c0c:	e012      	b.n	8002c34 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c12:	e00f      	b.n	8002c34 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002c14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c18:	e00c      	b.n	8002c34 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c1e:	e009      	b.n	8002c34 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c24:	e006      	b.n	8002c34 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002c26:	2310      	movs	r3, #16
 8002c28:	e004      	b.n	8002c34 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002c2a:	2310      	movs	r3, #16
 8002c2c:	e002      	b.n	8002c34 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002c2e:	2310      	movs	r3, #16
 8002c30:	e000      	b.n	8002c34 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002c32:	2310      	movs	r3, #16
 8002c34:	4a36      	ldr	r2, [pc, #216]	; (8002d10 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002c36:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4b35      	ldr	r3, [pc, #212]	; (8002d14 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002c40:	429a      	cmp	r2, r3
 8002c42:	f240 8082 	bls.w	8002d4a <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a25      	ldr	r2, [pc, #148]	; (8002ce0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d078      	beq.n	8002d42 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a23      	ldr	r2, [pc, #140]	; (8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d071      	beq.n	8002d3e <HAL_DMAEx_MultiBufferStart_IT+0x886>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a22      	ldr	r2, [pc, #136]	; (8002ce8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d06a      	beq.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a20      	ldr	r2, [pc, #128]	; (8002cec <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d063      	beq.n	8002d36 <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a1f      	ldr	r2, [pc, #124]	; (8002cf0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d05b      	beq.n	8002d30 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a1d      	ldr	r2, [pc, #116]	; (8002cf4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d053      	beq.n	8002d2a <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a1c      	ldr	r2, [pc, #112]	; (8002cf8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d04b      	beq.n	8002d24 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a1a      	ldr	r2, [pc, #104]	; (8002cfc <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d043      	beq.n	8002d1e <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a19      	ldr	r2, [pc, #100]	; (8002d00 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d03b      	beq.n	8002d18 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a17      	ldr	r2, [pc, #92]	; (8002d04 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d012      	beq.n	8002cd0 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a16      	ldr	r2, [pc, #88]	; (8002d08 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d00a      	beq.n	8002cca <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a14      	ldr	r2, [pc, #80]	; (8002d0c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d102      	bne.n	8002cc4 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8002cbe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002cc2:	e03f      	b.n	8002d44 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002cc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cc8:	e03c      	b.n	8002d44 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002cca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002cce:	e039      	b.n	8002d44 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002cd0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002cd4:	e036      	b.n	8002d44 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002cd6:	bf00      	nop
 8002cd8:	40026400 	.word	0x40026400
 8002cdc:	40026058 	.word	0x40026058
 8002ce0:	40026010 	.word	0x40026010
 8002ce4:	40026410 	.word	0x40026410
 8002ce8:	40026070 	.word	0x40026070
 8002cec:	40026470 	.word	0x40026470
 8002cf0:	40026028 	.word	0x40026028
 8002cf4:	40026428 	.word	0x40026428
 8002cf8:	40026088 	.word	0x40026088
 8002cfc:	40026488 	.word	0x40026488
 8002d00:	40026040 	.word	0x40026040
 8002d04:	40026440 	.word	0x40026440
 8002d08:	400260a0 	.word	0x400260a0
 8002d0c:	400264a0 	.word	0x400264a0
 8002d10:	40026000 	.word	0x40026000
 8002d14:	40026458 	.word	0x40026458
 8002d18:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002d1c:	e012      	b.n	8002d44 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002d1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d22:	e00f      	b.n	8002d44 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d28:	e00c      	b.n	8002d44 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002d2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d2e:	e009      	b.n	8002d44 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002d30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d34:	e006      	b.n	8002d44 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002d36:	2308      	movs	r3, #8
 8002d38:	e004      	b.n	8002d44 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002d3a:	2308      	movs	r3, #8
 8002d3c:	e002      	b.n	8002d44 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002d3e:	2308      	movs	r3, #8
 8002d40:	e000      	b.n	8002d44 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002d42:	2308      	movs	r3, #8
 8002d44:	4a8c      	ldr	r2, [pc, #560]	; (8002f78 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8002d46:	60d3      	str	r3, [r2, #12]
 8002d48:	e14e      	b.n	8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	4b8a      	ldr	r3, [pc, #552]	; (8002f7c <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d960      	bls.n	8002e18 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a89      	ldr	r2, [pc, #548]	; (8002f80 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d057      	beq.n	8002e10 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a87      	ldr	r2, [pc, #540]	; (8002f84 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d050      	beq.n	8002e0c <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a86      	ldr	r2, [pc, #536]	; (8002f88 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d049      	beq.n	8002e08 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a84      	ldr	r2, [pc, #528]	; (8002f8c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d042      	beq.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a83      	ldr	r2, [pc, #524]	; (8002f90 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d03a      	beq.n	8002dfe <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a81      	ldr	r2, [pc, #516]	; (8002f94 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d032      	beq.n	8002df8 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a80      	ldr	r2, [pc, #512]	; (8002f98 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d02a      	beq.n	8002df2 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a7e      	ldr	r2, [pc, #504]	; (8002f9c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d022      	beq.n	8002dec <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a7d      	ldr	r2, [pc, #500]	; (8002fa0 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d01a      	beq.n	8002de6 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a7b      	ldr	r2, [pc, #492]	; (8002fa4 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d012      	beq.n	8002de0 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a7a      	ldr	r2, [pc, #488]	; (8002fa8 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d00a      	beq.n	8002dda <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a78      	ldr	r2, [pc, #480]	; (8002fac <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d102      	bne.n	8002dd4 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8002dce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002dd2:	e01e      	b.n	8002e12 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002dd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dd8:	e01b      	b.n	8002e12 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002dda:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002dde:	e018      	b.n	8002e12 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002de0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002de4:	e015      	b.n	8002e12 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002de6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002dea:	e012      	b.n	8002e12 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002dec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002df0:	e00f      	b.n	8002e12 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002df2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002df6:	e00c      	b.n	8002e12 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002df8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dfc:	e009      	b.n	8002e12 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e02:	e006      	b.n	8002e12 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002e04:	2308      	movs	r3, #8
 8002e06:	e004      	b.n	8002e12 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002e08:	2308      	movs	r3, #8
 8002e0a:	e002      	b.n	8002e12 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002e0c:	2308      	movs	r3, #8
 8002e0e:	e000      	b.n	8002e12 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002e10:	2308      	movs	r3, #8
 8002e12:	4a59      	ldr	r2, [pc, #356]	; (8002f78 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8002e14:	6093      	str	r3, [r2, #8]
 8002e16:	e0e7      	b.n	8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4b64      	ldr	r3, [pc, #400]	; (8002fb0 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d960      	bls.n	8002ee6 <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a55      	ldr	r2, [pc, #340]	; (8002f80 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d057      	beq.n	8002ede <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a54      	ldr	r2, [pc, #336]	; (8002f84 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d050      	beq.n	8002eda <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a52      	ldr	r2, [pc, #328]	; (8002f88 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d049      	beq.n	8002ed6 <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a51      	ldr	r2, [pc, #324]	; (8002f8c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d042      	beq.n	8002ed2 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a4f      	ldr	r2, [pc, #316]	; (8002f90 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d03a      	beq.n	8002ecc <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a4e      	ldr	r2, [pc, #312]	; (8002f94 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d032      	beq.n	8002ec6 <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a4c      	ldr	r2, [pc, #304]	; (8002f98 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d02a      	beq.n	8002ec0 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a4b      	ldr	r2, [pc, #300]	; (8002f9c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d022      	beq.n	8002eba <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a49      	ldr	r2, [pc, #292]	; (8002fa0 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d01a      	beq.n	8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a48      	ldr	r2, [pc, #288]	; (8002fa4 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d012      	beq.n	8002eae <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a46      	ldr	r2, [pc, #280]	; (8002fa8 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d00a      	beq.n	8002ea8 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a45      	ldr	r2, [pc, #276]	; (8002fac <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d102      	bne.n	8002ea2 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8002e9c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ea0:	e01e      	b.n	8002ee0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002ea2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ea6:	e01b      	b.n	8002ee0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002ea8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002eac:	e018      	b.n	8002ee0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002eae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002eb2:	e015      	b.n	8002ee0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002eb4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002eb8:	e012      	b.n	8002ee0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002eba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ebe:	e00f      	b.n	8002ee0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ec4:	e00c      	b.n	8002ee0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002ec6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eca:	e009      	b.n	8002ee0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002ecc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ed0:	e006      	b.n	8002ee0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002ed2:	2308      	movs	r3, #8
 8002ed4:	e004      	b.n	8002ee0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002ed6:	2308      	movs	r3, #8
 8002ed8:	e002      	b.n	8002ee0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002eda:	2308      	movs	r3, #8
 8002edc:	e000      	b.n	8002ee0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002ede:	2308      	movs	r3, #8
 8002ee0:	4a34      	ldr	r2, [pc, #208]	; (8002fb4 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002ee2:	60d3      	str	r3, [r2, #12]
 8002ee4:	e080      	b.n	8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a25      	ldr	r2, [pc, #148]	; (8002f80 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d078      	beq.n	8002fe2 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a23      	ldr	r2, [pc, #140]	; (8002f84 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d071      	beq.n	8002fde <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a22      	ldr	r2, [pc, #136]	; (8002f88 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d06a      	beq.n	8002fda <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a20      	ldr	r2, [pc, #128]	; (8002f8c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d063      	beq.n	8002fd6 <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a1f      	ldr	r2, [pc, #124]	; (8002f90 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d05b      	beq.n	8002fd0 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a1d      	ldr	r2, [pc, #116]	; (8002f94 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d053      	beq.n	8002fca <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a1c      	ldr	r2, [pc, #112]	; (8002f98 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d04b      	beq.n	8002fc4 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a1a      	ldr	r2, [pc, #104]	; (8002f9c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d043      	beq.n	8002fbe <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a19      	ldr	r2, [pc, #100]	; (8002fa0 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d03b      	beq.n	8002fb8 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a17      	ldr	r2, [pc, #92]	; (8002fa4 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d012      	beq.n	8002f70 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a16      	ldr	r2, [pc, #88]	; (8002fa8 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00a      	beq.n	8002f6a <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a14      	ldr	r2, [pc, #80]	; (8002fac <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d102      	bne.n	8002f64 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8002f5e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f62:	e03f      	b.n	8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002f64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f68:	e03c      	b.n	8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002f6a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f6e:	e039      	b.n	8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002f70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f74:	e036      	b.n	8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002f76:	bf00      	nop
 8002f78:	40026400 	.word	0x40026400
 8002f7c:	400260b8 	.word	0x400260b8
 8002f80:	40026010 	.word	0x40026010
 8002f84:	40026410 	.word	0x40026410
 8002f88:	40026070 	.word	0x40026070
 8002f8c:	40026470 	.word	0x40026470
 8002f90:	40026028 	.word	0x40026028
 8002f94:	40026428 	.word	0x40026428
 8002f98:	40026088 	.word	0x40026088
 8002f9c:	40026488 	.word	0x40026488
 8002fa0:	40026040 	.word	0x40026040
 8002fa4:	40026440 	.word	0x40026440
 8002fa8:	400260a0 	.word	0x400260a0
 8002fac:	400264a0 	.word	0x400264a0
 8002fb0:	40026058 	.word	0x40026058
 8002fb4:	40026000 	.word	0x40026000
 8002fb8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002fbc:	e012      	b.n	8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002fbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fc2:	e00f      	b.n	8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002fc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fc8:	e00c      	b.n	8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002fca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fce:	e009      	b.n	8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002fd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fd4:	e006      	b.n	8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002fd6:	2308      	movs	r3, #8
 8002fd8:	e004      	b.n	8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002fda:	2308      	movs	r3, #8
 8002fdc:	e002      	b.n	8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002fde:	2308      	movs	r3, #8
 8002fe0:	e000      	b.n	8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002fe2:	2308      	movs	r3, #8
 8002fe4:	4a8a      	ldr	r2, [pc, #552]	; (8003210 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8002fe6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	461a      	mov	r2, r3
 8002fee:	4b89      	ldr	r3, [pc, #548]	; (8003214 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d960      	bls.n	80030b6 <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a87      	ldr	r2, [pc, #540]	; (8003218 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d057      	beq.n	80030ae <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a86      	ldr	r2, [pc, #536]	; (800321c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d050      	beq.n	80030aa <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a84      	ldr	r2, [pc, #528]	; (8003220 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d049      	beq.n	80030a6 <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a83      	ldr	r2, [pc, #524]	; (8003224 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d042      	beq.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a81      	ldr	r2, [pc, #516]	; (8003228 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d03a      	beq.n	800309c <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a80      	ldr	r2, [pc, #512]	; (800322c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d032      	beq.n	8003096 <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a7e      	ldr	r2, [pc, #504]	; (8003230 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d02a      	beq.n	8003090 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a7d      	ldr	r2, [pc, #500]	; (8003234 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d022      	beq.n	800308a <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a7b      	ldr	r2, [pc, #492]	; (8003238 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d01a      	beq.n	8003084 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a7a      	ldr	r2, [pc, #488]	; (800323c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d012      	beq.n	800307e <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a78      	ldr	r2, [pc, #480]	; (8003240 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d00a      	beq.n	8003078 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a77      	ldr	r2, [pc, #476]	; (8003244 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d102      	bne.n	8003072 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 800306c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003070:	e01e      	b.n	80030b0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003072:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003076:	e01b      	b.n	80030b0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003078:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800307c:	e018      	b.n	80030b0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800307e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003082:	e015      	b.n	80030b0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003084:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003088:	e012      	b.n	80030b0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800308a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800308e:	e00f      	b.n	80030b0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003090:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003094:	e00c      	b.n	80030b0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003096:	f44f 7380 	mov.w	r3, #256	; 0x100
 800309a:	e009      	b.n	80030b0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800309c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030a0:	e006      	b.n	80030b0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80030a2:	2304      	movs	r3, #4
 80030a4:	e004      	b.n	80030b0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80030a6:	2304      	movs	r3, #4
 80030a8:	e002      	b.n	80030b0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80030aa:	2304      	movs	r3, #4
 80030ac:	e000      	b.n	80030b0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80030ae:	2304      	movs	r3, #4
 80030b0:	4a65      	ldr	r2, [pc, #404]	; (8003248 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80030b2:	60d3      	str	r3, [r2, #12]
 80030b4:	e150      	b.n	8003358 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	4b63      	ldr	r3, [pc, #396]	; (800324c <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 80030be:	429a      	cmp	r2, r3
 80030c0:	d960      	bls.n	8003184 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a54      	ldr	r2, [pc, #336]	; (8003218 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d057      	beq.n	800317c <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a52      	ldr	r2, [pc, #328]	; (800321c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d050      	beq.n	8003178 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a51      	ldr	r2, [pc, #324]	; (8003220 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d049      	beq.n	8003174 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a4f      	ldr	r2, [pc, #316]	; (8003224 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d042      	beq.n	8003170 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a4e      	ldr	r2, [pc, #312]	; (8003228 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d03a      	beq.n	800316a <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a4c      	ldr	r2, [pc, #304]	; (800322c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d032      	beq.n	8003164 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a4b      	ldr	r2, [pc, #300]	; (8003230 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d02a      	beq.n	800315e <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a49      	ldr	r2, [pc, #292]	; (8003234 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d022      	beq.n	8003158 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a48      	ldr	r2, [pc, #288]	; (8003238 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d01a      	beq.n	8003152 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a46      	ldr	r2, [pc, #280]	; (800323c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d012      	beq.n	800314c <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a45      	ldr	r2, [pc, #276]	; (8003240 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d00a      	beq.n	8003146 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a43      	ldr	r2, [pc, #268]	; (8003244 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d102      	bne.n	8003140 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 800313a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800313e:	e01e      	b.n	800317e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003140:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003144:	e01b      	b.n	800317e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003146:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800314a:	e018      	b.n	800317e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800314c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003150:	e015      	b.n	800317e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003152:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003156:	e012      	b.n	800317e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003158:	f44f 7380 	mov.w	r3, #256	; 0x100
 800315c:	e00f      	b.n	800317e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800315e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003162:	e00c      	b.n	800317e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003164:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003168:	e009      	b.n	800317e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800316a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800316e:	e006      	b.n	800317e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003170:	2304      	movs	r3, #4
 8003172:	e004      	b.n	800317e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003174:	2304      	movs	r3, #4
 8003176:	e002      	b.n	800317e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003178:	2304      	movs	r3, #4
 800317a:	e000      	b.n	800317e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800317c:	2304      	movs	r3, #4
 800317e:	4a32      	ldr	r2, [pc, #200]	; (8003248 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003180:	6093      	str	r3, [r2, #8]
 8003182:	e0e9      	b.n	8003358 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	461a      	mov	r2, r3
 800318a:	4b31      	ldr	r3, [pc, #196]	; (8003250 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 800318c:	429a      	cmp	r2, r3
 800318e:	f240 8083 	bls.w	8003298 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a20      	ldr	r2, [pc, #128]	; (8003218 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d079      	beq.n	8003290 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a1e      	ldr	r2, [pc, #120]	; (800321c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d072      	beq.n	800328c <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a1d      	ldr	r2, [pc, #116]	; (8003220 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d06b      	beq.n	8003288 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a1b      	ldr	r2, [pc, #108]	; (8003224 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d064      	beq.n	8003284 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a1a      	ldr	r2, [pc, #104]	; (8003228 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d05c      	beq.n	800327e <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a18      	ldr	r2, [pc, #96]	; (800322c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d054      	beq.n	8003278 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a17      	ldr	r2, [pc, #92]	; (8003230 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d04c      	beq.n	8003272 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a15      	ldr	r2, [pc, #84]	; (8003234 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d044      	beq.n	800326c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a14      	ldr	r2, [pc, #80]	; (8003238 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d03c      	beq.n	8003266 <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a12      	ldr	r2, [pc, #72]	; (800323c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d034      	beq.n	8003260 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a11      	ldr	r2, [pc, #68]	; (8003240 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d02c      	beq.n	800325a <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a0f      	ldr	r2, [pc, #60]	; (8003244 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d124      	bne.n	8003254 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 800320a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800320e:	e040      	b.n	8003292 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003210:	40026000 	.word	0x40026000
 8003214:	40026458 	.word	0x40026458
 8003218:	40026010 	.word	0x40026010
 800321c:	40026410 	.word	0x40026410
 8003220:	40026070 	.word	0x40026070
 8003224:	40026470 	.word	0x40026470
 8003228:	40026028 	.word	0x40026028
 800322c:	40026428 	.word	0x40026428
 8003230:	40026088 	.word	0x40026088
 8003234:	40026488 	.word	0x40026488
 8003238:	40026040 	.word	0x40026040
 800323c:	40026440 	.word	0x40026440
 8003240:	400260a0 	.word	0x400260a0
 8003244:	400264a0 	.word	0x400264a0
 8003248:	40026400 	.word	0x40026400
 800324c:	400260b8 	.word	0x400260b8
 8003250:	40026058 	.word	0x40026058
 8003254:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003258:	e01b      	b.n	8003292 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800325a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800325e:	e018      	b.n	8003292 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003260:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003264:	e015      	b.n	8003292 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003266:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800326a:	e012      	b.n	8003292 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800326c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003270:	e00f      	b.n	8003292 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003272:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003276:	e00c      	b.n	8003292 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003278:	f44f 7380 	mov.w	r3, #256	; 0x100
 800327c:	e009      	b.n	8003292 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800327e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003282:	e006      	b.n	8003292 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003284:	2304      	movs	r3, #4
 8003286:	e004      	b.n	8003292 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003288:	2304      	movs	r3, #4
 800328a:	e002      	b.n	8003292 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800328c:	2304      	movs	r3, #4
 800328e:	e000      	b.n	8003292 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003290:	2304      	movs	r3, #4
 8003292:	4a8b      	ldr	r2, [pc, #556]	; (80034c0 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003294:	60d3      	str	r3, [r2, #12]
 8003296:	e05f      	b.n	8003358 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a89      	ldr	r2, [pc, #548]	; (80034c4 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d057      	beq.n	8003352 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a88      	ldr	r2, [pc, #544]	; (80034c8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d050      	beq.n	800334e <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a86      	ldr	r2, [pc, #536]	; (80034cc <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d049      	beq.n	800334a <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a85      	ldr	r2, [pc, #532]	; (80034d0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d042      	beq.n	8003346 <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a83      	ldr	r2, [pc, #524]	; (80034d4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d03a      	beq.n	8003340 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a82      	ldr	r2, [pc, #520]	; (80034d8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d032      	beq.n	800333a <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a80      	ldr	r2, [pc, #512]	; (80034dc <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d02a      	beq.n	8003334 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a7f      	ldr	r2, [pc, #508]	; (80034e0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d022      	beq.n	800332e <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a7d      	ldr	r2, [pc, #500]	; (80034e4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d01a      	beq.n	8003328 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a7c      	ldr	r2, [pc, #496]	; (80034e8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d012      	beq.n	8003322 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a7a      	ldr	r2, [pc, #488]	; (80034ec <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00a      	beq.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a79      	ldr	r2, [pc, #484]	; (80034f0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d102      	bne.n	8003316 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8003310:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003314:	e01e      	b.n	8003354 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003316:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800331a:	e01b      	b.n	8003354 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800331c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003320:	e018      	b.n	8003354 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003322:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003326:	e015      	b.n	8003354 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003328:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800332c:	e012      	b.n	8003354 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800332e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003332:	e00f      	b.n	8003354 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003334:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003338:	e00c      	b.n	8003354 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800333a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800333e:	e009      	b.n	8003354 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003340:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003344:	e006      	b.n	8003354 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003346:	2304      	movs	r3, #4
 8003348:	e004      	b.n	8003354 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800334a:	2304      	movs	r3, #4
 800334c:	e002      	b.n	8003354 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800334e:	2304      	movs	r3, #4
 8003350:	e000      	b.n	8003354 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003352:	2304      	movs	r3, #4
 8003354:	4a5a      	ldr	r2, [pc, #360]	; (80034c0 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003356:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	4b65      	ldr	r3, [pc, #404]	; (80034f4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003360:	429a      	cmp	r2, r3
 8003362:	d95c      	bls.n	800341e <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a56      	ldr	r2, [pc, #344]	; (80034c4 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d053      	beq.n	8003416 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a55      	ldr	r2, [pc, #340]	; (80034c8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d04c      	beq.n	8003412 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a53      	ldr	r2, [pc, #332]	; (80034cc <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d045      	beq.n	800340e <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a52      	ldr	r2, [pc, #328]	; (80034d0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d03e      	beq.n	800340a <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a50      	ldr	r2, [pc, #320]	; (80034d4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d037      	beq.n	8003406 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a4f      	ldr	r2, [pc, #316]	; (80034d8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d030      	beq.n	8003402 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a4d      	ldr	r2, [pc, #308]	; (80034dc <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d029      	beq.n	80033fe <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a4c      	ldr	r2, [pc, #304]	; (80034e0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d022      	beq.n	80033fa <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a4a      	ldr	r2, [pc, #296]	; (80034e4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d01a      	beq.n	80033f4 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a49      	ldr	r2, [pc, #292]	; (80034e8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d012      	beq.n	80033ee <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a47      	ldr	r2, [pc, #284]	; (80034ec <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00a      	beq.n	80033e8 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a46      	ldr	r2, [pc, #280]	; (80034f0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d102      	bne.n	80033e2 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 80033dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033e0:	e01a      	b.n	8003418 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80033e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033e6:	e017      	b.n	8003418 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80033e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033ec:	e014      	b.n	8003418 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80033ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033f2:	e011      	b.n	8003418 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80033f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033f8:	e00e      	b.n	8003418 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80033fa:	2340      	movs	r3, #64	; 0x40
 80033fc:	e00c      	b.n	8003418 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80033fe:	2340      	movs	r3, #64	; 0x40
 8003400:	e00a      	b.n	8003418 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003402:	2340      	movs	r3, #64	; 0x40
 8003404:	e008      	b.n	8003418 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003406:	2340      	movs	r3, #64	; 0x40
 8003408:	e006      	b.n	8003418 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800340a:	2301      	movs	r3, #1
 800340c:	e004      	b.n	8003418 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800340e:	2301      	movs	r3, #1
 8003410:	e002      	b.n	8003418 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003416:	2301      	movs	r3, #1
 8003418:	4a37      	ldr	r2, [pc, #220]	; (80034f8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 800341a:	60d3      	str	r3, [r2, #12]
 800341c:	e141      	b.n	80036a2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	4b35      	ldr	r3, [pc, #212]	; (80034fc <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003426:	429a      	cmp	r2, r3
 8003428:	d97c      	bls.n	8003524 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a25      	ldr	r2, [pc, #148]	; (80034c4 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d073      	beq.n	800351c <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a23      	ldr	r2, [pc, #140]	; (80034c8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d06c      	beq.n	8003518 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a22      	ldr	r2, [pc, #136]	; (80034cc <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d065      	beq.n	8003514 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a20      	ldr	r2, [pc, #128]	; (80034d0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d05e      	beq.n	8003510 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a1f      	ldr	r2, [pc, #124]	; (80034d4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d057      	beq.n	800350c <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a1d      	ldr	r2, [pc, #116]	; (80034d8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d050      	beq.n	8003508 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a1c      	ldr	r2, [pc, #112]	; (80034dc <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d049      	beq.n	8003504 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a1a      	ldr	r2, [pc, #104]	; (80034e0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d042      	beq.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a19      	ldr	r2, [pc, #100]	; (80034e4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d01a      	beq.n	80034ba <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a17      	ldr	r2, [pc, #92]	; (80034e8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d012      	beq.n	80034b4 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a16      	ldr	r2, [pc, #88]	; (80034ec <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d00a      	beq.n	80034ae <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a14      	ldr	r2, [pc, #80]	; (80034f0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d102      	bne.n	80034a8 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 80034a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034a6:	e03a      	b.n	800351e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80034a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034ac:	e037      	b.n	800351e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80034ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034b2:	e034      	b.n	800351e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80034b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034b8:	e031      	b.n	800351e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80034ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034be:	e02e      	b.n	800351e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80034c0:	40026000 	.word	0x40026000
 80034c4:	40026010 	.word	0x40026010
 80034c8:	40026410 	.word	0x40026410
 80034cc:	40026070 	.word	0x40026070
 80034d0:	40026470 	.word	0x40026470
 80034d4:	40026028 	.word	0x40026028
 80034d8:	40026428 	.word	0x40026428
 80034dc:	40026088 	.word	0x40026088
 80034e0:	40026488 	.word	0x40026488
 80034e4:	40026040 	.word	0x40026040
 80034e8:	40026440 	.word	0x40026440
 80034ec:	400260a0 	.word	0x400260a0
 80034f0:	400264a0 	.word	0x400264a0
 80034f4:	40026458 	.word	0x40026458
 80034f8:	40026400 	.word	0x40026400
 80034fc:	400260b8 	.word	0x400260b8
 8003500:	2340      	movs	r3, #64	; 0x40
 8003502:	e00c      	b.n	800351e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003504:	2340      	movs	r3, #64	; 0x40
 8003506:	e00a      	b.n	800351e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003508:	2340      	movs	r3, #64	; 0x40
 800350a:	e008      	b.n	800351e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800350c:	2340      	movs	r3, #64	; 0x40
 800350e:	e006      	b.n	800351e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003510:	2301      	movs	r3, #1
 8003512:	e004      	b.n	800351e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003514:	2301      	movs	r3, #1
 8003516:	e002      	b.n	800351e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800351c:	2301      	movs	r3, #1
 800351e:	4a7b      	ldr	r2, [pc, #492]	; (800370c <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8003520:	6093      	str	r3, [r2, #8]
 8003522:	e0be      	b.n	80036a2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	461a      	mov	r2, r3
 800352a:	4b79      	ldr	r3, [pc, #484]	; (8003710 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 800352c:	429a      	cmp	r2, r3
 800352e:	d95c      	bls.n	80035ea <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a77      	ldr	r2, [pc, #476]	; (8003714 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d053      	beq.n	80035e2 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a76      	ldr	r2, [pc, #472]	; (8003718 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d04c      	beq.n	80035de <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a74      	ldr	r2, [pc, #464]	; (800371c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d045      	beq.n	80035da <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a73      	ldr	r2, [pc, #460]	; (8003720 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d03e      	beq.n	80035d6 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a71      	ldr	r2, [pc, #452]	; (8003724 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d037      	beq.n	80035d2 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a70      	ldr	r2, [pc, #448]	; (8003728 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d030      	beq.n	80035ce <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a6e      	ldr	r2, [pc, #440]	; (800372c <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d029      	beq.n	80035ca <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a6d      	ldr	r2, [pc, #436]	; (8003730 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d022      	beq.n	80035c6 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a6b      	ldr	r2, [pc, #428]	; (8003734 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d01a      	beq.n	80035c0 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a6a      	ldr	r2, [pc, #424]	; (8003738 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d012      	beq.n	80035ba <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a68      	ldr	r2, [pc, #416]	; (800373c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00a      	beq.n	80035b4 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a67      	ldr	r2, [pc, #412]	; (8003740 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d102      	bne.n	80035ae <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 80035a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035ac:	e01a      	b.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80035ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80035b2:	e017      	b.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80035b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035b8:	e014      	b.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80035ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035be:	e011      	b.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80035c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035c4:	e00e      	b.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80035c6:	2340      	movs	r3, #64	; 0x40
 80035c8:	e00c      	b.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80035ca:	2340      	movs	r3, #64	; 0x40
 80035cc:	e00a      	b.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80035ce:	2340      	movs	r3, #64	; 0x40
 80035d0:	e008      	b.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80035d2:	2340      	movs	r3, #64	; 0x40
 80035d4:	e006      	b.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e004      	b.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80035da:	2301      	movs	r3, #1
 80035dc:	e002      	b.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80035e2:	2301      	movs	r3, #1
 80035e4:	4a57      	ldr	r2, [pc, #348]	; (8003744 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80035e6:	60d3      	str	r3, [r2, #12]
 80035e8:	e05b      	b.n	80036a2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a49      	ldr	r2, [pc, #292]	; (8003714 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d053      	beq.n	800369c <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a47      	ldr	r2, [pc, #284]	; (8003718 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d04c      	beq.n	8003698 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a46      	ldr	r2, [pc, #280]	; (800371c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d045      	beq.n	8003694 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a44      	ldr	r2, [pc, #272]	; (8003720 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d03e      	beq.n	8003690 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a43      	ldr	r2, [pc, #268]	; (8003724 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d037      	beq.n	800368c <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a41      	ldr	r2, [pc, #260]	; (8003728 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d030      	beq.n	8003688 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a40      	ldr	r2, [pc, #256]	; (800372c <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d029      	beq.n	8003684 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a3e      	ldr	r2, [pc, #248]	; (8003730 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d022      	beq.n	8003680 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a3d      	ldr	r2, [pc, #244]	; (8003734 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d01a      	beq.n	800367a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a3b      	ldr	r2, [pc, #236]	; (8003738 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d012      	beq.n	8003674 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a3a      	ldr	r2, [pc, #232]	; (800373c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d00a      	beq.n	800366e <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a38      	ldr	r2, [pc, #224]	; (8003740 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d102      	bne.n	8003668 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8003662:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003666:	e01a      	b.n	800369e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003668:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800366c:	e017      	b.n	800369e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800366e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003672:	e014      	b.n	800369e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003678:	e011      	b.n	800369e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800367a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800367e:	e00e      	b.n	800369e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003680:	2340      	movs	r3, #64	; 0x40
 8003682:	e00c      	b.n	800369e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003684:	2340      	movs	r3, #64	; 0x40
 8003686:	e00a      	b.n	800369e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003688:	2340      	movs	r3, #64	; 0x40
 800368a:	e008      	b.n	800369e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800368c:	2340      	movs	r3, #64	; 0x40
 800368e:	e006      	b.n	800369e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003690:	2301      	movs	r3, #1
 8003692:	e004      	b.n	800369e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003694:	2301      	movs	r3, #1
 8003696:	e002      	b.n	800369e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800369c:	2301      	movs	r3, #1
 800369e:	4a29      	ldr	r2, [pc, #164]	; (8003744 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80036a0:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 0216 	orr.w	r2, r2, #22
 80036b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695a      	ldr	r2, [r3, #20]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d103      	bne.n	80036d2 <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d007      	beq.n	80036e2 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0208 	orr.w	r2, r2, #8
 80036e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 0201 	orr.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	e005      	b.n	8003700 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036fc:	2302      	movs	r3, #2
 80036fe:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003700:	7dfb      	ldrb	r3, [r7, #23]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40026400 	.word	0x40026400
 8003710:	40026058 	.word	0x40026058
 8003714:	40026010 	.word	0x40026010
 8003718:	40026410 	.word	0x40026410
 800371c:	40026070 	.word	0x40026070
 8003720:	40026470 	.word	0x40026470
 8003724:	40026028 	.word	0x40026028
 8003728:	40026428 	.word	0x40026428
 800372c:	40026088 	.word	0x40026088
 8003730:	40026488 	.word	0x40026488
 8003734:	40026040 	.word	0x40026040
 8003738:	40026440 	.word	0x40026440
 800373c:	400260a0 	.word	0x400260a0
 8003740:	400264a0 	.word	0x400264a0
 8003744:	40026000 	.word	0x40026000

08003748 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2b40      	cmp	r3, #64	; 0x40
 8003764:	d108      	bne.n	8003778 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003776:	e007      	b.n	8003788 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	60da      	str	r2, [r3, #12]
}
 8003788:	bf00      	nop
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003794:	b480      	push	{r7}
 8003796:	b089      	sub	sp, #36	; 0x24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800379e:	2300      	movs	r3, #0
 80037a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037aa:	2300      	movs	r3, #0
 80037ac:	61fb      	str	r3, [r7, #28]
 80037ae:	e159      	b.n	8003a64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037b0:	2201      	movs	r2, #1
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	4013      	ands	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	f040 8148 	bne.w	8003a5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d005      	beq.n	80037e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d130      	bne.n	8003848 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	2203      	movs	r2, #3
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	43db      	mvns	r3, r3
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	4013      	ands	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	4313      	orrs	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800381c:	2201      	movs	r2, #1
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4013      	ands	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	091b      	lsrs	r3, r3, #4
 8003832:	f003 0201 	and.w	r2, r3, #1
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4313      	orrs	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f003 0303 	and.w	r3, r3, #3
 8003850:	2b03      	cmp	r3, #3
 8003852:	d017      	beq.n	8003884 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	2203      	movs	r2, #3
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4013      	ands	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4313      	orrs	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 0303 	and.w	r3, r3, #3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d123      	bne.n	80038d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	08da      	lsrs	r2, r3, #3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3208      	adds	r2, #8
 8003898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800389c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	220f      	movs	r2, #15
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	43db      	mvns	r3, r3
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4013      	ands	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	08da      	lsrs	r2, r3, #3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	3208      	adds	r2, #8
 80038d2:	69b9      	ldr	r1, [r7, #24]
 80038d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	2203      	movs	r2, #3
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	43db      	mvns	r3, r3
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	4013      	ands	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f003 0203 	and.w	r2, r3, #3
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4313      	orrs	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 80a2 	beq.w	8003a5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	4b57      	ldr	r3, [pc, #348]	; (8003a7c <HAL_GPIO_Init+0x2e8>)
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	4a56      	ldr	r2, [pc, #344]	; (8003a7c <HAL_GPIO_Init+0x2e8>)
 8003924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003928:	6453      	str	r3, [r2, #68]	; 0x44
 800392a:	4b54      	ldr	r3, [pc, #336]	; (8003a7c <HAL_GPIO_Init+0x2e8>)
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003936:	4a52      	ldr	r2, [pc, #328]	; (8003a80 <HAL_GPIO_Init+0x2ec>)
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	089b      	lsrs	r3, r3, #2
 800393c:	3302      	adds	r3, #2
 800393e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003942:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	220f      	movs	r2, #15
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	43db      	mvns	r3, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4013      	ands	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a49      	ldr	r2, [pc, #292]	; (8003a84 <HAL_GPIO_Init+0x2f0>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d019      	beq.n	8003996 <HAL_GPIO_Init+0x202>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a48      	ldr	r2, [pc, #288]	; (8003a88 <HAL_GPIO_Init+0x2f4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d013      	beq.n	8003992 <HAL_GPIO_Init+0x1fe>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a47      	ldr	r2, [pc, #284]	; (8003a8c <HAL_GPIO_Init+0x2f8>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d00d      	beq.n	800398e <HAL_GPIO_Init+0x1fa>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a46      	ldr	r2, [pc, #280]	; (8003a90 <HAL_GPIO_Init+0x2fc>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d007      	beq.n	800398a <HAL_GPIO_Init+0x1f6>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a45      	ldr	r2, [pc, #276]	; (8003a94 <HAL_GPIO_Init+0x300>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d101      	bne.n	8003986 <HAL_GPIO_Init+0x1f2>
 8003982:	2304      	movs	r3, #4
 8003984:	e008      	b.n	8003998 <HAL_GPIO_Init+0x204>
 8003986:	2307      	movs	r3, #7
 8003988:	e006      	b.n	8003998 <HAL_GPIO_Init+0x204>
 800398a:	2303      	movs	r3, #3
 800398c:	e004      	b.n	8003998 <HAL_GPIO_Init+0x204>
 800398e:	2302      	movs	r3, #2
 8003990:	e002      	b.n	8003998 <HAL_GPIO_Init+0x204>
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <HAL_GPIO_Init+0x204>
 8003996:	2300      	movs	r3, #0
 8003998:	69fa      	ldr	r2, [r7, #28]
 800399a:	f002 0203 	and.w	r2, r2, #3
 800399e:	0092      	lsls	r2, r2, #2
 80039a0:	4093      	lsls	r3, r2
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039a8:	4935      	ldr	r1, [pc, #212]	; (8003a80 <HAL_GPIO_Init+0x2ec>)
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	089b      	lsrs	r3, r3, #2
 80039ae:	3302      	adds	r3, #2
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039b6:	4b38      	ldr	r3, [pc, #224]	; (8003a98 <HAL_GPIO_Init+0x304>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	43db      	mvns	r3, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4013      	ands	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039da:	4a2f      	ldr	r2, [pc, #188]	; (8003a98 <HAL_GPIO_Init+0x304>)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039e0:	4b2d      	ldr	r3, [pc, #180]	; (8003a98 <HAL_GPIO_Init+0x304>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	43db      	mvns	r3, r3
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4013      	ands	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a04:	4a24      	ldr	r2, [pc, #144]	; (8003a98 <HAL_GPIO_Init+0x304>)
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a0a:	4b23      	ldr	r3, [pc, #140]	; (8003a98 <HAL_GPIO_Init+0x304>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	43db      	mvns	r3, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4013      	ands	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a2e:	4a1a      	ldr	r2, [pc, #104]	; (8003a98 <HAL_GPIO_Init+0x304>)
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a34:	4b18      	ldr	r3, [pc, #96]	; (8003a98 <HAL_GPIO_Init+0x304>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4013      	ands	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a58:	4a0f      	ldr	r2, [pc, #60]	; (8003a98 <HAL_GPIO_Init+0x304>)
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	3301      	adds	r3, #1
 8003a62:	61fb      	str	r3, [r7, #28]
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	2b0f      	cmp	r3, #15
 8003a68:	f67f aea2 	bls.w	80037b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a6c:	bf00      	nop
 8003a6e:	bf00      	nop
 8003a70:	3724      	adds	r7, #36	; 0x24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	40013800 	.word	0x40013800
 8003a84:	40020000 	.word	0x40020000
 8003a88:	40020400 	.word	0x40020400
 8003a8c:	40020800 	.word	0x40020800
 8003a90:	40020c00 	.word	0x40020c00
 8003a94:	40021000 	.word	0x40021000
 8003a98:	40013c00 	.word	0x40013c00

08003a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	807b      	strh	r3, [r7, #2]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003aac:	787b      	ldrb	r3, [r7, #1]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ab2:	887a      	ldrh	r2, [r7, #2]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ab8:	e003      	b.n	8003ac2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003aba:	887b      	ldrh	r3, [r7, #2]
 8003abc:	041a      	lsls	r2, r3, #16
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	619a      	str	r2, [r3, #24]
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
	...

08003ad0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e267      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d075      	beq.n	8003bda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aee:	4b88      	ldr	r3, [pc, #544]	; (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d00c      	beq.n	8003b14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003afa:	4b85      	ldr	r3, [pc, #532]	; (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d112      	bne.n	8003b2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b06:	4b82      	ldr	r3, [pc, #520]	; (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b12:	d10b      	bne.n	8003b2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b14:	4b7e      	ldr	r3, [pc, #504]	; (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d05b      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x108>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d157      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e242      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b34:	d106      	bne.n	8003b44 <HAL_RCC_OscConfig+0x74>
 8003b36:	4b76      	ldr	r3, [pc, #472]	; (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a75      	ldr	r2, [pc, #468]	; (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	e01d      	b.n	8003b80 <HAL_RCC_OscConfig+0xb0>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b4c:	d10c      	bne.n	8003b68 <HAL_RCC_OscConfig+0x98>
 8003b4e:	4b70      	ldr	r3, [pc, #448]	; (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a6f      	ldr	r2, [pc, #444]	; (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	4b6d      	ldr	r3, [pc, #436]	; (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a6c      	ldr	r2, [pc, #432]	; (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	e00b      	b.n	8003b80 <HAL_RCC_OscConfig+0xb0>
 8003b68:	4b69      	ldr	r3, [pc, #420]	; (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a68      	ldr	r2, [pc, #416]	; (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	4b66      	ldr	r3, [pc, #408]	; (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a65      	ldr	r2, [pc, #404]	; (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d013      	beq.n	8003bb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b88:	f7fe f816 	bl	8001bb8 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b90:	f7fe f812 	bl	8001bb8 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b64      	cmp	r3, #100	; 0x64
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e207      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ba2:	4b5b      	ldr	r3, [pc, #364]	; (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0f0      	beq.n	8003b90 <HAL_RCC_OscConfig+0xc0>
 8003bae:	e014      	b.n	8003bda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb0:	f7fe f802 	bl	8001bb8 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bb8:	f7fd fffe 	bl	8001bb8 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b64      	cmp	r3, #100	; 0x64
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e1f3      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bca:	4b51      	ldr	r3, [pc, #324]	; (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f0      	bne.n	8003bb8 <HAL_RCC_OscConfig+0xe8>
 8003bd6:	e000      	b.n	8003bda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d063      	beq.n	8003cae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003be6:	4b4a      	ldr	r3, [pc, #296]	; (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00b      	beq.n	8003c0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bf2:	4b47      	ldr	r3, [pc, #284]	; (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bfa:	2b08      	cmp	r3, #8
 8003bfc:	d11c      	bne.n	8003c38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bfe:	4b44      	ldr	r3, [pc, #272]	; (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d116      	bne.n	8003c38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c0a:	4b41      	ldr	r3, [pc, #260]	; (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d005      	beq.n	8003c22 <HAL_RCC_OscConfig+0x152>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d001      	beq.n	8003c22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e1c7      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c22:	4b3b      	ldr	r3, [pc, #236]	; (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	4937      	ldr	r1, [pc, #220]	; (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c36:	e03a      	b.n	8003cae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d020      	beq.n	8003c82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c40:	4b34      	ldr	r3, [pc, #208]	; (8003d14 <HAL_RCC_OscConfig+0x244>)
 8003c42:	2201      	movs	r2, #1
 8003c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c46:	f7fd ffb7 	bl	8001bb8 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c4e:	f7fd ffb3 	bl	8001bb8 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e1a8      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c60:	4b2b      	ldr	r3, [pc, #172]	; (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0f0      	beq.n	8003c4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6c:	4b28      	ldr	r3, [pc, #160]	; (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	4925      	ldr	r1, [pc, #148]	; (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	600b      	str	r3, [r1, #0]
 8003c80:	e015      	b.n	8003cae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c82:	4b24      	ldr	r3, [pc, #144]	; (8003d14 <HAL_RCC_OscConfig+0x244>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c88:	f7fd ff96 	bl	8001bb8 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c90:	f7fd ff92 	bl	8001bb8 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e187      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ca2:	4b1b      	ldr	r3, [pc, #108]	; (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f0      	bne.n	8003c90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d036      	beq.n	8003d28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d016      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cc2:	4b15      	ldr	r3, [pc, #84]	; (8003d18 <HAL_RCC_OscConfig+0x248>)
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc8:	f7fd ff76 	bl	8001bb8 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cd0:	f7fd ff72 	bl	8001bb8 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e167      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ce2:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x200>
 8003cee:	e01b      	b.n	8003d28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cf0:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <HAL_RCC_OscConfig+0x248>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf6:	f7fd ff5f 	bl	8001bb8 <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cfc:	e00e      	b.n	8003d1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cfe:	f7fd ff5b 	bl	8001bb8 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d907      	bls.n	8003d1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e150      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
 8003d10:	40023800 	.word	0x40023800
 8003d14:	42470000 	.word	0x42470000
 8003d18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d1c:	4b88      	ldr	r3, [pc, #544]	; (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1ea      	bne.n	8003cfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 8097 	beq.w	8003e64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d36:	2300      	movs	r3, #0
 8003d38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d3a:	4b81      	ldr	r3, [pc, #516]	; (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10f      	bne.n	8003d66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	4b7d      	ldr	r3, [pc, #500]	; (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	4a7c      	ldr	r2, [pc, #496]	; (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d54:	6413      	str	r3, [r2, #64]	; 0x40
 8003d56:	4b7a      	ldr	r3, [pc, #488]	; (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	60bb      	str	r3, [r7, #8]
 8003d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d62:	2301      	movs	r3, #1
 8003d64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d66:	4b77      	ldr	r3, [pc, #476]	; (8003f44 <HAL_RCC_OscConfig+0x474>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d118      	bne.n	8003da4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d72:	4b74      	ldr	r3, [pc, #464]	; (8003f44 <HAL_RCC_OscConfig+0x474>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a73      	ldr	r2, [pc, #460]	; (8003f44 <HAL_RCC_OscConfig+0x474>)
 8003d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d7e:	f7fd ff1b 	bl	8001bb8 <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d86:	f7fd ff17 	bl	8001bb8 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e10c      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d98:	4b6a      	ldr	r3, [pc, #424]	; (8003f44 <HAL_RCC_OscConfig+0x474>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0f0      	beq.n	8003d86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d106      	bne.n	8003dba <HAL_RCC_OscConfig+0x2ea>
 8003dac:	4b64      	ldr	r3, [pc, #400]	; (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db0:	4a63      	ldr	r2, [pc, #396]	; (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003db2:	f043 0301 	orr.w	r3, r3, #1
 8003db6:	6713      	str	r3, [r2, #112]	; 0x70
 8003db8:	e01c      	b.n	8003df4 <HAL_RCC_OscConfig+0x324>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2b05      	cmp	r3, #5
 8003dc0:	d10c      	bne.n	8003ddc <HAL_RCC_OscConfig+0x30c>
 8003dc2:	4b5f      	ldr	r3, [pc, #380]	; (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc6:	4a5e      	ldr	r2, [pc, #376]	; (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003dc8:	f043 0304 	orr.w	r3, r3, #4
 8003dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dce:	4b5c      	ldr	r3, [pc, #368]	; (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd2:	4a5b      	ldr	r2, [pc, #364]	; (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003dd4:	f043 0301 	orr.w	r3, r3, #1
 8003dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dda:	e00b      	b.n	8003df4 <HAL_RCC_OscConfig+0x324>
 8003ddc:	4b58      	ldr	r3, [pc, #352]	; (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de0:	4a57      	ldr	r2, [pc, #348]	; (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003de2:	f023 0301 	bic.w	r3, r3, #1
 8003de6:	6713      	str	r3, [r2, #112]	; 0x70
 8003de8:	4b55      	ldr	r3, [pc, #340]	; (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dec:	4a54      	ldr	r2, [pc, #336]	; (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003dee:	f023 0304 	bic.w	r3, r3, #4
 8003df2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d015      	beq.n	8003e28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfc:	f7fd fedc 	bl	8001bb8 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e02:	e00a      	b.n	8003e1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e04:	f7fd fed8 	bl	8001bb8 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e0cb      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e1a:	4b49      	ldr	r3, [pc, #292]	; (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0ee      	beq.n	8003e04 <HAL_RCC_OscConfig+0x334>
 8003e26:	e014      	b.n	8003e52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e28:	f7fd fec6 	bl	8001bb8 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e2e:	e00a      	b.n	8003e46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e30:	f7fd fec2 	bl	8001bb8 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e0b5      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e46:	4b3e      	ldr	r3, [pc, #248]	; (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1ee      	bne.n	8003e30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e52:	7dfb      	ldrb	r3, [r7, #23]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d105      	bne.n	8003e64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e58:	4b39      	ldr	r3, [pc, #228]	; (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	4a38      	ldr	r2, [pc, #224]	; (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003e5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 80a1 	beq.w	8003fb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e6e:	4b34      	ldr	r3, [pc, #208]	; (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 030c 	and.w	r3, r3, #12
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	d05c      	beq.n	8003f34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d141      	bne.n	8003f06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e82:	4b31      	ldr	r3, [pc, #196]	; (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e88:	f7fd fe96 	bl	8001bb8 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e90:	f7fd fe92 	bl	8001bb8 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e087      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ea2:	4b27      	ldr	r3, [pc, #156]	; (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1f0      	bne.n	8003e90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69da      	ldr	r2, [r3, #28]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	019b      	lsls	r3, r3, #6
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec4:	085b      	lsrs	r3, r3, #1
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	041b      	lsls	r3, r3, #16
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed0:	061b      	lsls	r3, r3, #24
 8003ed2:	491b      	ldr	r1, [pc, #108]	; (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ed8:	4b1b      	ldr	r3, [pc, #108]	; (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ede:	f7fd fe6b 	bl	8001bb8 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee6:	f7fd fe67 	bl	8001bb8 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e05c      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef8:	4b11      	ldr	r3, [pc, #68]	; (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f0      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x416>
 8003f04:	e054      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f06:	4b10      	ldr	r3, [pc, #64]	; (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0c:	f7fd fe54 	bl	8001bb8 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f14:	f7fd fe50 	bl	8001bb8 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e045      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f26:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x444>
 8003f32:	e03d      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d107      	bne.n	8003f4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e038      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
 8003f40:	40023800 	.word	0x40023800
 8003f44:	40007000 	.word	0x40007000
 8003f48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f4c:	4b1b      	ldr	r3, [pc, #108]	; (8003fbc <HAL_RCC_OscConfig+0x4ec>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d028      	beq.n	8003fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d121      	bne.n	8003fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d11a      	bne.n	8003fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d111      	bne.n	8003fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f92:	085b      	lsrs	r3, r3, #1
 8003f94:	3b01      	subs	r3, #1
 8003f96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d107      	bne.n	8003fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d001      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e000      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	40023800 	.word	0x40023800

08003fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e0cc      	b.n	800416e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fd4:	4b68      	ldr	r3, [pc, #416]	; (8004178 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d90c      	bls.n	8003ffc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe2:	4b65      	ldr	r3, [pc, #404]	; (8004178 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fea:	4b63      	ldr	r3, [pc, #396]	; (8004178 <HAL_RCC_ClockConfig+0x1b8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d001      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0b8      	b.n	800416e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d020      	beq.n	800404a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	d005      	beq.n	8004020 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004014:	4b59      	ldr	r3, [pc, #356]	; (800417c <HAL_RCC_ClockConfig+0x1bc>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	4a58      	ldr	r2, [pc, #352]	; (800417c <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800401e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0308 	and.w	r3, r3, #8
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800402c:	4b53      	ldr	r3, [pc, #332]	; (800417c <HAL_RCC_ClockConfig+0x1bc>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	4a52      	ldr	r2, [pc, #328]	; (800417c <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004036:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004038:	4b50      	ldr	r3, [pc, #320]	; (800417c <HAL_RCC_ClockConfig+0x1bc>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	494d      	ldr	r1, [pc, #308]	; (800417c <HAL_RCC_ClockConfig+0x1bc>)
 8004046:	4313      	orrs	r3, r2
 8004048:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d044      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d107      	bne.n	800406e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800405e:	4b47      	ldr	r3, [pc, #284]	; (800417c <HAL_RCC_ClockConfig+0x1bc>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d119      	bne.n	800409e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e07f      	b.n	800416e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d003      	beq.n	800407e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800407a:	2b03      	cmp	r3, #3
 800407c:	d107      	bne.n	800408e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800407e:	4b3f      	ldr	r3, [pc, #252]	; (800417c <HAL_RCC_ClockConfig+0x1bc>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d109      	bne.n	800409e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e06f      	b.n	800416e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800408e:	4b3b      	ldr	r3, [pc, #236]	; (800417c <HAL_RCC_ClockConfig+0x1bc>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e067      	b.n	800416e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800409e:	4b37      	ldr	r3, [pc, #220]	; (800417c <HAL_RCC_ClockConfig+0x1bc>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f023 0203 	bic.w	r2, r3, #3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	4934      	ldr	r1, [pc, #208]	; (800417c <HAL_RCC_ClockConfig+0x1bc>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040b0:	f7fd fd82 	bl	8001bb8 <HAL_GetTick>
 80040b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b6:	e00a      	b.n	80040ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b8:	f7fd fd7e 	bl	8001bb8 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e04f      	b.n	800416e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ce:	4b2b      	ldr	r3, [pc, #172]	; (800417c <HAL_RCC_ClockConfig+0x1bc>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 020c 	and.w	r2, r3, #12
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	429a      	cmp	r2, r3
 80040de:	d1eb      	bne.n	80040b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040e0:	4b25      	ldr	r3, [pc, #148]	; (8004178 <HAL_RCC_ClockConfig+0x1b8>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d20c      	bcs.n	8004108 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ee:	4b22      	ldr	r3, [pc, #136]	; (8004178 <HAL_RCC_ClockConfig+0x1b8>)
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f6:	4b20      	ldr	r3, [pc, #128]	; (8004178 <HAL_RCC_ClockConfig+0x1b8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d001      	beq.n	8004108 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e032      	b.n	800416e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	d008      	beq.n	8004126 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004114:	4b19      	ldr	r3, [pc, #100]	; (800417c <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	4916      	ldr	r1, [pc, #88]	; (800417c <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	4313      	orrs	r3, r2
 8004124:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	2b00      	cmp	r3, #0
 8004130:	d009      	beq.n	8004146 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004132:	4b12      	ldr	r3, [pc, #72]	; (800417c <HAL_RCC_ClockConfig+0x1bc>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	490e      	ldr	r1, [pc, #56]	; (800417c <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	4313      	orrs	r3, r2
 8004144:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004146:	f000 f821 	bl	800418c <HAL_RCC_GetSysClockFreq>
 800414a:	4602      	mov	r2, r0
 800414c:	4b0b      	ldr	r3, [pc, #44]	; (800417c <HAL_RCC_ClockConfig+0x1bc>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	091b      	lsrs	r3, r3, #4
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	490a      	ldr	r1, [pc, #40]	; (8004180 <HAL_RCC_ClockConfig+0x1c0>)
 8004158:	5ccb      	ldrb	r3, [r1, r3]
 800415a:	fa22 f303 	lsr.w	r3, r2, r3
 800415e:	4a09      	ldr	r2, [pc, #36]	; (8004184 <HAL_RCC_ClockConfig+0x1c4>)
 8004160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004162:	4b09      	ldr	r3, [pc, #36]	; (8004188 <HAL_RCC_ClockConfig+0x1c8>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4618      	mov	r0, r3
 8004168:	f7fd fce2 	bl	8001b30 <HAL_InitTick>

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40023c00 	.word	0x40023c00
 800417c:	40023800 	.word	0x40023800
 8004180:	08007790 	.word	0x08007790
 8004184:	20000000 	.word	0x20000000
 8004188:	20000004 	.word	0x20000004

0800418c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800418c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004190:	b094      	sub	sp, #80	; 0x50
 8004192:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	647b      	str	r3, [r7, #68]	; 0x44
 8004198:	2300      	movs	r3, #0
 800419a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800419c:	2300      	movs	r3, #0
 800419e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041a4:	4b79      	ldr	r3, [pc, #484]	; (800438c <HAL_RCC_GetSysClockFreq+0x200>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 030c 	and.w	r3, r3, #12
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d00d      	beq.n	80041cc <HAL_RCC_GetSysClockFreq+0x40>
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	f200 80e1 	bhi.w	8004378 <HAL_RCC_GetSysClockFreq+0x1ec>
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <HAL_RCC_GetSysClockFreq+0x34>
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	d003      	beq.n	80041c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80041be:	e0db      	b.n	8004378 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041c0:	4b73      	ldr	r3, [pc, #460]	; (8004390 <HAL_RCC_GetSysClockFreq+0x204>)
 80041c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80041c4:	e0db      	b.n	800437e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041c6:	4b73      	ldr	r3, [pc, #460]	; (8004394 <HAL_RCC_GetSysClockFreq+0x208>)
 80041c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041ca:	e0d8      	b.n	800437e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041cc:	4b6f      	ldr	r3, [pc, #444]	; (800438c <HAL_RCC_GetSysClockFreq+0x200>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041d6:	4b6d      	ldr	r3, [pc, #436]	; (800438c <HAL_RCC_GetSysClockFreq+0x200>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d063      	beq.n	80042aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041e2:	4b6a      	ldr	r3, [pc, #424]	; (800438c <HAL_RCC_GetSysClockFreq+0x200>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	099b      	lsrs	r3, r3, #6
 80041e8:	2200      	movs	r2, #0
 80041ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80041ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80041ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f4:	633b      	str	r3, [r7, #48]	; 0x30
 80041f6:	2300      	movs	r3, #0
 80041f8:	637b      	str	r3, [r7, #52]	; 0x34
 80041fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80041fe:	4622      	mov	r2, r4
 8004200:	462b      	mov	r3, r5
 8004202:	f04f 0000 	mov.w	r0, #0
 8004206:	f04f 0100 	mov.w	r1, #0
 800420a:	0159      	lsls	r1, r3, #5
 800420c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004210:	0150      	lsls	r0, r2, #5
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	4621      	mov	r1, r4
 8004218:	1a51      	subs	r1, r2, r1
 800421a:	6139      	str	r1, [r7, #16]
 800421c:	4629      	mov	r1, r5
 800421e:	eb63 0301 	sbc.w	r3, r3, r1
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004230:	4659      	mov	r1, fp
 8004232:	018b      	lsls	r3, r1, #6
 8004234:	4651      	mov	r1, sl
 8004236:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800423a:	4651      	mov	r1, sl
 800423c:	018a      	lsls	r2, r1, #6
 800423e:	4651      	mov	r1, sl
 8004240:	ebb2 0801 	subs.w	r8, r2, r1
 8004244:	4659      	mov	r1, fp
 8004246:	eb63 0901 	sbc.w	r9, r3, r1
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	f04f 0300 	mov.w	r3, #0
 8004252:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004256:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800425a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800425e:	4690      	mov	r8, r2
 8004260:	4699      	mov	r9, r3
 8004262:	4623      	mov	r3, r4
 8004264:	eb18 0303 	adds.w	r3, r8, r3
 8004268:	60bb      	str	r3, [r7, #8]
 800426a:	462b      	mov	r3, r5
 800426c:	eb49 0303 	adc.w	r3, r9, r3
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	f04f 0200 	mov.w	r2, #0
 8004276:	f04f 0300 	mov.w	r3, #0
 800427a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800427e:	4629      	mov	r1, r5
 8004280:	024b      	lsls	r3, r1, #9
 8004282:	4621      	mov	r1, r4
 8004284:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004288:	4621      	mov	r1, r4
 800428a:	024a      	lsls	r2, r1, #9
 800428c:	4610      	mov	r0, r2
 800428e:	4619      	mov	r1, r3
 8004290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004292:	2200      	movs	r2, #0
 8004294:	62bb      	str	r3, [r7, #40]	; 0x28
 8004296:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004298:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800429c:	f7fb fff0 	bl	8000280 <__aeabi_uldivmod>
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	4613      	mov	r3, r2
 80042a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042a8:	e058      	b.n	800435c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042aa:	4b38      	ldr	r3, [pc, #224]	; (800438c <HAL_RCC_GetSysClockFreq+0x200>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	099b      	lsrs	r3, r3, #6
 80042b0:	2200      	movs	r2, #0
 80042b2:	4618      	mov	r0, r3
 80042b4:	4611      	mov	r1, r2
 80042b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042ba:	623b      	str	r3, [r7, #32]
 80042bc:	2300      	movs	r3, #0
 80042be:	627b      	str	r3, [r7, #36]	; 0x24
 80042c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042c4:	4642      	mov	r2, r8
 80042c6:	464b      	mov	r3, r9
 80042c8:	f04f 0000 	mov.w	r0, #0
 80042cc:	f04f 0100 	mov.w	r1, #0
 80042d0:	0159      	lsls	r1, r3, #5
 80042d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042d6:	0150      	lsls	r0, r2, #5
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	4641      	mov	r1, r8
 80042de:	ebb2 0a01 	subs.w	sl, r2, r1
 80042e2:	4649      	mov	r1, r9
 80042e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	f04f 0300 	mov.w	r3, #0
 80042f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042fc:	ebb2 040a 	subs.w	r4, r2, sl
 8004300:	eb63 050b 	sbc.w	r5, r3, fp
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	f04f 0300 	mov.w	r3, #0
 800430c:	00eb      	lsls	r3, r5, #3
 800430e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004312:	00e2      	lsls	r2, r4, #3
 8004314:	4614      	mov	r4, r2
 8004316:	461d      	mov	r5, r3
 8004318:	4643      	mov	r3, r8
 800431a:	18e3      	adds	r3, r4, r3
 800431c:	603b      	str	r3, [r7, #0]
 800431e:	464b      	mov	r3, r9
 8004320:	eb45 0303 	adc.w	r3, r5, r3
 8004324:	607b      	str	r3, [r7, #4]
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004332:	4629      	mov	r1, r5
 8004334:	028b      	lsls	r3, r1, #10
 8004336:	4621      	mov	r1, r4
 8004338:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800433c:	4621      	mov	r1, r4
 800433e:	028a      	lsls	r2, r1, #10
 8004340:	4610      	mov	r0, r2
 8004342:	4619      	mov	r1, r3
 8004344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004346:	2200      	movs	r2, #0
 8004348:	61bb      	str	r3, [r7, #24]
 800434a:	61fa      	str	r2, [r7, #28]
 800434c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004350:	f7fb ff96 	bl	8000280 <__aeabi_uldivmod>
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	4613      	mov	r3, r2
 800435a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800435c:	4b0b      	ldr	r3, [pc, #44]	; (800438c <HAL_RCC_GetSysClockFreq+0x200>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	0c1b      	lsrs	r3, r3, #16
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	3301      	adds	r3, #1
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800436c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800436e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004370:	fbb2 f3f3 	udiv	r3, r2, r3
 8004374:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004376:	e002      	b.n	800437e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004378:	4b05      	ldr	r3, [pc, #20]	; (8004390 <HAL_RCC_GetSysClockFreq+0x204>)
 800437a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800437c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800437e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004380:	4618      	mov	r0, r3
 8004382:	3750      	adds	r7, #80	; 0x50
 8004384:	46bd      	mov	sp, r7
 8004386:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800438a:	bf00      	nop
 800438c:	40023800 	.word	0x40023800
 8004390:	00f42400 	.word	0x00f42400
 8004394:	007a1200 	.word	0x007a1200

08004398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800439c:	4b03      	ldr	r3, [pc, #12]	; (80043ac <HAL_RCC_GetHCLKFreq+0x14>)
 800439e:	681b      	ldr	r3, [r3, #0]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	20000000 	.word	0x20000000

080043b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043b4:	f7ff fff0 	bl	8004398 <HAL_RCC_GetHCLKFreq>
 80043b8:	4602      	mov	r2, r0
 80043ba:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	0a9b      	lsrs	r3, r3, #10
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	4903      	ldr	r1, [pc, #12]	; (80043d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043c6:	5ccb      	ldrb	r3, [r1, r3]
 80043c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40023800 	.word	0x40023800
 80043d4:	080077a0 	.word	0x080077a0

080043d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043dc:	f7ff ffdc 	bl	8004398 <HAL_RCC_GetHCLKFreq>
 80043e0:	4602      	mov	r2, r0
 80043e2:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	0b5b      	lsrs	r3, r3, #13
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	4903      	ldr	r1, [pc, #12]	; (80043fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80043ee:	5ccb      	ldrb	r3, [r1, r3]
 80043f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40023800 	.word	0x40023800
 80043fc:	080077a0 	.word	0x080077a0

08004400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e041      	b.n	8004496 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d106      	bne.n	800442c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7fc fed2 	bl	80011d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3304      	adds	r3, #4
 800443c:	4619      	mov	r1, r3
 800443e:	4610      	mov	r0, r2
 8004440:	f000 fbf0 	bl	8004c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b082      	sub	sp, #8
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e041      	b.n	8004534 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d106      	bne.n	80044ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f839 	bl	800453c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2202      	movs	r2, #2
 80044ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	3304      	adds	r3, #4
 80044da:	4619      	mov	r1, r3
 80044dc:	4610      	mov	r0, r2
 80044de:	f000 fba1 	bl	8004c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d109      	bne.n	8004574 <HAL_TIM_PWM_Start+0x24>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b01      	cmp	r3, #1
 800456a:	bf14      	ite	ne
 800456c:	2301      	movne	r3, #1
 800456e:	2300      	moveq	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	e022      	b.n	80045ba <HAL_TIM_PWM_Start+0x6a>
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	2b04      	cmp	r3, #4
 8004578:	d109      	bne.n	800458e <HAL_TIM_PWM_Start+0x3e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b01      	cmp	r3, #1
 8004584:	bf14      	ite	ne
 8004586:	2301      	movne	r3, #1
 8004588:	2300      	moveq	r3, #0
 800458a:	b2db      	uxtb	r3, r3
 800458c:	e015      	b.n	80045ba <HAL_TIM_PWM_Start+0x6a>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b08      	cmp	r3, #8
 8004592:	d109      	bne.n	80045a8 <HAL_TIM_PWM_Start+0x58>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b01      	cmp	r3, #1
 800459e:	bf14      	ite	ne
 80045a0:	2301      	movne	r3, #1
 80045a2:	2300      	moveq	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	e008      	b.n	80045ba <HAL_TIM_PWM_Start+0x6a>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	bf14      	ite	ne
 80045b4:	2301      	movne	r3, #1
 80045b6:	2300      	moveq	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e068      	b.n	8004694 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d104      	bne.n	80045d2 <HAL_TIM_PWM_Start+0x82>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045d0:	e013      	b.n	80045fa <HAL_TIM_PWM_Start+0xaa>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d104      	bne.n	80045e2 <HAL_TIM_PWM_Start+0x92>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045e0:	e00b      	b.n	80045fa <HAL_TIM_PWM_Start+0xaa>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d104      	bne.n	80045f2 <HAL_TIM_PWM_Start+0xa2>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045f0:	e003      	b.n	80045fa <HAL_TIM_PWM_Start+0xaa>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2202      	movs	r2, #2
 80045f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2201      	movs	r2, #1
 8004600:	6839      	ldr	r1, [r7, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fdb4 	bl	8005170 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a23      	ldr	r2, [pc, #140]	; (800469c <HAL_TIM_PWM_Start+0x14c>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d107      	bne.n	8004622 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004620:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a1d      	ldr	r2, [pc, #116]	; (800469c <HAL_TIM_PWM_Start+0x14c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d018      	beq.n	800465e <HAL_TIM_PWM_Start+0x10e>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004634:	d013      	beq.n	800465e <HAL_TIM_PWM_Start+0x10e>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a19      	ldr	r2, [pc, #100]	; (80046a0 <HAL_TIM_PWM_Start+0x150>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d00e      	beq.n	800465e <HAL_TIM_PWM_Start+0x10e>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a17      	ldr	r2, [pc, #92]	; (80046a4 <HAL_TIM_PWM_Start+0x154>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d009      	beq.n	800465e <HAL_TIM_PWM_Start+0x10e>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a16      	ldr	r2, [pc, #88]	; (80046a8 <HAL_TIM_PWM_Start+0x158>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d004      	beq.n	800465e <HAL_TIM_PWM_Start+0x10e>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a14      	ldr	r2, [pc, #80]	; (80046ac <HAL_TIM_PWM_Start+0x15c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d111      	bne.n	8004682 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b06      	cmp	r3, #6
 800466e:	d010      	beq.n	8004692 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0201 	orr.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004680:	e007      	b.n	8004692 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f042 0201 	orr.w	r2, r2, #1
 8004690:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	40010000 	.word	0x40010000
 80046a0:	40000400 	.word	0x40000400
 80046a4:	40000800 	.word	0x40000800
 80046a8:	40000c00 	.word	0x40000c00
 80046ac:	40014000 	.word	0x40014000

080046b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d122      	bne.n	800470c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d11b      	bne.n	800470c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f06f 0202 	mvn.w	r2, #2
 80046dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fa77 	bl	8004be6 <HAL_TIM_IC_CaptureCallback>
 80046f8:	e005      	b.n	8004706 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 fa69 	bl	8004bd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 fa7a 	bl	8004bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	2b04      	cmp	r3, #4
 8004718:	d122      	bne.n	8004760 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b04      	cmp	r3, #4
 8004726:	d11b      	bne.n	8004760 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f06f 0204 	mvn.w	r2, #4
 8004730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2202      	movs	r2, #2
 8004736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fa4d 	bl	8004be6 <HAL_TIM_IC_CaptureCallback>
 800474c:	e005      	b.n	800475a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fa3f 	bl	8004bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 fa50 	bl	8004bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f003 0308 	and.w	r3, r3, #8
 800476a:	2b08      	cmp	r3, #8
 800476c:	d122      	bne.n	80047b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b08      	cmp	r3, #8
 800477a:	d11b      	bne.n	80047b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f06f 0208 	mvn.w	r2, #8
 8004784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2204      	movs	r2, #4
 800478a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 fa23 	bl	8004be6 <HAL_TIM_IC_CaptureCallback>
 80047a0:	e005      	b.n	80047ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fa15 	bl	8004bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 fa26 	bl	8004bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	f003 0310 	and.w	r3, r3, #16
 80047be:	2b10      	cmp	r3, #16
 80047c0:	d122      	bne.n	8004808 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f003 0310 	and.w	r3, r3, #16
 80047cc:	2b10      	cmp	r3, #16
 80047ce:	d11b      	bne.n	8004808 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f06f 0210 	mvn.w	r2, #16
 80047d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2208      	movs	r2, #8
 80047de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f9f9 	bl	8004be6 <HAL_TIM_IC_CaptureCallback>
 80047f4:	e005      	b.n	8004802 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f9eb 	bl	8004bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f9fc 	bl	8004bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b01      	cmp	r3, #1
 8004814:	d10e      	bne.n	8004834 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b01      	cmp	r3, #1
 8004822:	d107      	bne.n	8004834 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f06f 0201 	mvn.w	r2, #1
 800482c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7fc f834 	bl	800089c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483e:	2b80      	cmp	r3, #128	; 0x80
 8004840:	d10e      	bne.n	8004860 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484c:	2b80      	cmp	r3, #128	; 0x80
 800484e:	d107      	bne.n	8004860 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 fd78 	bl	8005350 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486a:	2b40      	cmp	r3, #64	; 0x40
 800486c:	d10e      	bne.n	800488c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004878:	2b40      	cmp	r3, #64	; 0x40
 800487a:	d107      	bne.n	800488c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f9c1 	bl	8004c0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	2b20      	cmp	r3, #32
 8004898:	d10e      	bne.n	80048b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	f003 0320 	and.w	r3, r3, #32
 80048a4:	2b20      	cmp	r3, #32
 80048a6:	d107      	bne.n	80048b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f06f 0220 	mvn.w	r2, #32
 80048b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 fd42 	bl	800533c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048b8:	bf00      	nop
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d101      	bne.n	80048de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048da:	2302      	movs	r3, #2
 80048dc:	e0ae      	b.n	8004a3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b0c      	cmp	r3, #12
 80048ea:	f200 809f 	bhi.w	8004a2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80048ee:	a201      	add	r2, pc, #4	; (adr r2, 80048f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f4:	08004929 	.word	0x08004929
 80048f8:	08004a2d 	.word	0x08004a2d
 80048fc:	08004a2d 	.word	0x08004a2d
 8004900:	08004a2d 	.word	0x08004a2d
 8004904:	08004969 	.word	0x08004969
 8004908:	08004a2d 	.word	0x08004a2d
 800490c:	08004a2d 	.word	0x08004a2d
 8004910:	08004a2d 	.word	0x08004a2d
 8004914:	080049ab 	.word	0x080049ab
 8004918:	08004a2d 	.word	0x08004a2d
 800491c:	08004a2d 	.word	0x08004a2d
 8004920:	08004a2d 	.word	0x08004a2d
 8004924:	080049eb 	.word	0x080049eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68b9      	ldr	r1, [r7, #8]
 800492e:	4618      	mov	r0, r3
 8004930:	f000 f9f8 	bl	8004d24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699a      	ldr	r2, [r3, #24]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0208 	orr.w	r2, r2, #8
 8004942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699a      	ldr	r2, [r3, #24]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0204 	bic.w	r2, r2, #4
 8004952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6999      	ldr	r1, [r3, #24]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	691a      	ldr	r2, [r3, #16]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	619a      	str	r2, [r3, #24]
      break;
 8004966:	e064      	b.n	8004a32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68b9      	ldr	r1, [r7, #8]
 800496e:	4618      	mov	r0, r3
 8004970:	f000 fa3e 	bl	8004df0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	699a      	ldr	r2, [r3, #24]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004982:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699a      	ldr	r2, [r3, #24]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004992:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6999      	ldr	r1, [r3, #24]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	021a      	lsls	r2, r3, #8
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	619a      	str	r2, [r3, #24]
      break;
 80049a8:	e043      	b.n	8004a32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68b9      	ldr	r1, [r7, #8]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 fa89 	bl	8004ec8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	69da      	ldr	r2, [r3, #28]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f042 0208 	orr.w	r2, r2, #8
 80049c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	69da      	ldr	r2, [r3, #28]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0204 	bic.w	r2, r2, #4
 80049d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69d9      	ldr	r1, [r3, #28]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	691a      	ldr	r2, [r3, #16]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	61da      	str	r2, [r3, #28]
      break;
 80049e8:	e023      	b.n	8004a32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68b9      	ldr	r1, [r7, #8]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 fad3 	bl	8004f9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	69da      	ldr	r2, [r3, #28]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69da      	ldr	r2, [r3, #28]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	69d9      	ldr	r1, [r3, #28]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	021a      	lsls	r2, r3, #8
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	61da      	str	r2, [r3, #28]
      break;
 8004a2a:	e002      	b.n	8004a32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3718      	adds	r7, #24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_TIM_ConfigClockSource+0x1c>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e0b4      	b.n	8004bca <HAL_TIM_ConfigClockSource+0x186>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a98:	d03e      	beq.n	8004b18 <HAL_TIM_ConfigClockSource+0xd4>
 8004a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a9e:	f200 8087 	bhi.w	8004bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa6:	f000 8086 	beq.w	8004bb6 <HAL_TIM_ConfigClockSource+0x172>
 8004aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aae:	d87f      	bhi.n	8004bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ab0:	2b70      	cmp	r3, #112	; 0x70
 8004ab2:	d01a      	beq.n	8004aea <HAL_TIM_ConfigClockSource+0xa6>
 8004ab4:	2b70      	cmp	r3, #112	; 0x70
 8004ab6:	d87b      	bhi.n	8004bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ab8:	2b60      	cmp	r3, #96	; 0x60
 8004aba:	d050      	beq.n	8004b5e <HAL_TIM_ConfigClockSource+0x11a>
 8004abc:	2b60      	cmp	r3, #96	; 0x60
 8004abe:	d877      	bhi.n	8004bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ac0:	2b50      	cmp	r3, #80	; 0x50
 8004ac2:	d03c      	beq.n	8004b3e <HAL_TIM_ConfigClockSource+0xfa>
 8004ac4:	2b50      	cmp	r3, #80	; 0x50
 8004ac6:	d873      	bhi.n	8004bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ac8:	2b40      	cmp	r3, #64	; 0x40
 8004aca:	d058      	beq.n	8004b7e <HAL_TIM_ConfigClockSource+0x13a>
 8004acc:	2b40      	cmp	r3, #64	; 0x40
 8004ace:	d86f      	bhi.n	8004bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ad0:	2b30      	cmp	r3, #48	; 0x30
 8004ad2:	d064      	beq.n	8004b9e <HAL_TIM_ConfigClockSource+0x15a>
 8004ad4:	2b30      	cmp	r3, #48	; 0x30
 8004ad6:	d86b      	bhi.n	8004bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ad8:	2b20      	cmp	r3, #32
 8004ada:	d060      	beq.n	8004b9e <HAL_TIM_ConfigClockSource+0x15a>
 8004adc:	2b20      	cmp	r3, #32
 8004ade:	d867      	bhi.n	8004bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d05c      	beq.n	8004b9e <HAL_TIM_ConfigClockSource+0x15a>
 8004ae4:	2b10      	cmp	r3, #16
 8004ae6:	d05a      	beq.n	8004b9e <HAL_TIM_ConfigClockSource+0x15a>
 8004ae8:	e062      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6818      	ldr	r0, [r3, #0]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	6899      	ldr	r1, [r3, #8]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f000 fb19 	bl	8005130 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	609a      	str	r2, [r3, #8]
      break;
 8004b16:	e04f      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6818      	ldr	r0, [r3, #0]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	6899      	ldr	r1, [r3, #8]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f000 fb02 	bl	8005130 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b3a:	609a      	str	r2, [r3, #8]
      break;
 8004b3c:	e03c      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6818      	ldr	r0, [r3, #0]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	6859      	ldr	r1, [r3, #4]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f000 fa76 	bl	800503c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2150      	movs	r1, #80	; 0x50
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 facf 	bl	80050fa <TIM_ITRx_SetConfig>
      break;
 8004b5c:	e02c      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6818      	ldr	r0, [r3, #0]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	6859      	ldr	r1, [r3, #4]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	f000 fa95 	bl	800509a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2160      	movs	r1, #96	; 0x60
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fabf 	bl	80050fa <TIM_ITRx_SetConfig>
      break;
 8004b7c:	e01c      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6818      	ldr	r0, [r3, #0]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	6859      	ldr	r1, [r3, #4]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f000 fa56 	bl	800503c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2140      	movs	r1, #64	; 0x40
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 faaf 	bl	80050fa <TIM_ITRx_SetConfig>
      break;
 8004b9c:	e00c      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	4610      	mov	r0, r2
 8004baa:	f000 faa6 	bl	80050fa <TIM_ITRx_SetConfig>
      break;
 8004bae:	e003      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8004bb4:	e000      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004bb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c02:	bf00      	nop
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
	...

08004c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a34      	ldr	r2, [pc, #208]	; (8004d08 <TIM_Base_SetConfig+0xe4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d00f      	beq.n	8004c5c <TIM_Base_SetConfig+0x38>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c42:	d00b      	beq.n	8004c5c <TIM_Base_SetConfig+0x38>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a31      	ldr	r2, [pc, #196]	; (8004d0c <TIM_Base_SetConfig+0xe8>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d007      	beq.n	8004c5c <TIM_Base_SetConfig+0x38>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a30      	ldr	r2, [pc, #192]	; (8004d10 <TIM_Base_SetConfig+0xec>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d003      	beq.n	8004c5c <TIM_Base_SetConfig+0x38>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a2f      	ldr	r2, [pc, #188]	; (8004d14 <TIM_Base_SetConfig+0xf0>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d108      	bne.n	8004c6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a25      	ldr	r2, [pc, #148]	; (8004d08 <TIM_Base_SetConfig+0xe4>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d01b      	beq.n	8004cae <TIM_Base_SetConfig+0x8a>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c7c:	d017      	beq.n	8004cae <TIM_Base_SetConfig+0x8a>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a22      	ldr	r2, [pc, #136]	; (8004d0c <TIM_Base_SetConfig+0xe8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d013      	beq.n	8004cae <TIM_Base_SetConfig+0x8a>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a21      	ldr	r2, [pc, #132]	; (8004d10 <TIM_Base_SetConfig+0xec>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00f      	beq.n	8004cae <TIM_Base_SetConfig+0x8a>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a20      	ldr	r2, [pc, #128]	; (8004d14 <TIM_Base_SetConfig+0xf0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00b      	beq.n	8004cae <TIM_Base_SetConfig+0x8a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a1f      	ldr	r2, [pc, #124]	; (8004d18 <TIM_Base_SetConfig+0xf4>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d007      	beq.n	8004cae <TIM_Base_SetConfig+0x8a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a1e      	ldr	r2, [pc, #120]	; (8004d1c <TIM_Base_SetConfig+0xf8>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d003      	beq.n	8004cae <TIM_Base_SetConfig+0x8a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a1d      	ldr	r2, [pc, #116]	; (8004d20 <TIM_Base_SetConfig+0xfc>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d108      	bne.n	8004cc0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a08      	ldr	r2, [pc, #32]	; (8004d08 <TIM_Base_SetConfig+0xe4>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d103      	bne.n	8004cf4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	691a      	ldr	r2, [r3, #16]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	615a      	str	r2, [r3, #20]
}
 8004cfa:	bf00      	nop
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	40010000 	.word	0x40010000
 8004d0c:	40000400 	.word	0x40000400
 8004d10:	40000800 	.word	0x40000800
 8004d14:	40000c00 	.word	0x40000c00
 8004d18:	40014000 	.word	0x40014000
 8004d1c:	40014400 	.word	0x40014400
 8004d20:	40014800 	.word	0x40014800

08004d24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	f023 0201 	bic.w	r2, r3, #1
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 0303 	bic.w	r3, r3, #3
 8004d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f023 0302 	bic.w	r3, r3, #2
 8004d6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a1c      	ldr	r2, [pc, #112]	; (8004dec <TIM_OC1_SetConfig+0xc8>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d10c      	bne.n	8004d9a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f023 0308 	bic.w	r3, r3, #8
 8004d86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f023 0304 	bic.w	r3, r3, #4
 8004d98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a13      	ldr	r2, [pc, #76]	; (8004dec <TIM_OC1_SetConfig+0xc8>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d111      	bne.n	8004dc6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004da8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004db0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	621a      	str	r2, [r3, #32]
}
 8004de0:	bf00      	nop
 8004de2:	371c      	adds	r7, #28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	40010000 	.word	0x40010000

08004df0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	f023 0210 	bic.w	r2, r3, #16
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	021b      	lsls	r3, r3, #8
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f023 0320 	bic.w	r3, r3, #32
 8004e3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	011b      	lsls	r3, r3, #4
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a1e      	ldr	r2, [pc, #120]	; (8004ec4 <TIM_OC2_SetConfig+0xd4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d10d      	bne.n	8004e6c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	011b      	lsls	r3, r3, #4
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a15      	ldr	r2, [pc, #84]	; (8004ec4 <TIM_OC2_SetConfig+0xd4>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d113      	bne.n	8004e9c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	621a      	str	r2, [r3, #32]
}
 8004eb6:	bf00      	nop
 8004eb8:	371c      	adds	r7, #28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	40010000 	.word	0x40010000

08004ec8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0303 	bic.w	r3, r3, #3
 8004efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	021b      	lsls	r3, r3, #8
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a1d      	ldr	r2, [pc, #116]	; (8004f98 <TIM_OC3_SetConfig+0xd0>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d10d      	bne.n	8004f42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	021b      	lsls	r3, r3, #8
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a14      	ldr	r2, [pc, #80]	; (8004f98 <TIM_OC3_SetConfig+0xd0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d113      	bne.n	8004f72 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	011b      	lsls	r3, r3, #4
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	621a      	str	r2, [r3, #32]
}
 8004f8c:	bf00      	nop
 8004f8e:	371c      	adds	r7, #28
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	40010000 	.word	0x40010000

08004f9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	021b      	lsls	r3, r3, #8
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fe6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	031b      	lsls	r3, r3, #12
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a10      	ldr	r2, [pc, #64]	; (8005038 <TIM_OC4_SetConfig+0x9c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d109      	bne.n	8005010 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005002:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	019b      	lsls	r3, r3, #6
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	4313      	orrs	r3, r2
 800500e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	621a      	str	r2, [r3, #32]
}
 800502a:	bf00      	nop
 800502c:	371c      	adds	r7, #28
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	40010000 	.word	0x40010000

0800503c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	f023 0201 	bic.w	r2, r3, #1
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005066:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4313      	orrs	r3, r2
 8005070:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f023 030a 	bic.w	r3, r3, #10
 8005078:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4313      	orrs	r3, r2
 8005080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	621a      	str	r2, [r3, #32]
}
 800508e:	bf00      	nop
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800509a:	b480      	push	{r7}
 800509c:	b087      	sub	sp, #28
 800509e:	af00      	add	r7, sp, #0
 80050a0:	60f8      	str	r0, [r7, #12]
 80050a2:	60b9      	str	r1, [r7, #8]
 80050a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	f023 0210 	bic.w	r2, r3, #16
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	031b      	lsls	r3, r3, #12
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	011b      	lsls	r3, r3, #4
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	4313      	orrs	r3, r2
 80050e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	621a      	str	r2, [r3, #32]
}
 80050ee:	bf00      	nop
 80050f0:	371c      	adds	r7, #28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b085      	sub	sp, #20
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
 8005102:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005110:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	f043 0307 	orr.w	r3, r3, #7
 800511c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	609a      	str	r2, [r3, #8]
}
 8005124:	bf00      	nop
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005130:	b480      	push	{r7}
 8005132:	b087      	sub	sp, #28
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
 800513c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800514a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	021a      	lsls	r2, r3, #8
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	431a      	orrs	r2, r3
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	4313      	orrs	r3, r2
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	609a      	str	r2, [r3, #8]
}
 8005164:	bf00      	nop
 8005166:	371c      	adds	r7, #28
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f003 031f 	and.w	r3, r3, #31
 8005182:	2201      	movs	r2, #1
 8005184:	fa02 f303 	lsl.w	r3, r2, r3
 8005188:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6a1a      	ldr	r2, [r3, #32]
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	43db      	mvns	r3, r3
 8005192:	401a      	ands	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6a1a      	ldr	r2, [r3, #32]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f003 031f 	and.w	r3, r3, #31
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	fa01 f303 	lsl.w	r3, r1, r3
 80051a8:	431a      	orrs	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	621a      	str	r2, [r3, #32]
}
 80051ae:	bf00      	nop
 80051b0:	371c      	adds	r7, #28
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
	...

080051bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d101      	bne.n	80051d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051d0:	2302      	movs	r3, #2
 80051d2:	e050      	b.n	8005276 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a1c      	ldr	r2, [pc, #112]	; (8005284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d018      	beq.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005220:	d013      	beq.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a18      	ldr	r2, [pc, #96]	; (8005288 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d00e      	beq.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a16      	ldr	r2, [pc, #88]	; (800528c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d009      	beq.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a15      	ldr	r2, [pc, #84]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d004      	beq.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a13      	ldr	r2, [pc, #76]	; (8005294 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d10c      	bne.n	8005264 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005250:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	4313      	orrs	r3, r2
 800525a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	40010000 	.word	0x40010000
 8005288:	40000400 	.word	0x40000400
 800528c:	40000800 	.word	0x40000800
 8005290:	40000c00 	.word	0x40000c00
 8005294:	40014000 	.word	0x40014000

08005298 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d101      	bne.n	80052b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80052b0:	2302      	movs	r3, #2
 80052b2:	e03d      	b.n	8005330 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	4313      	orrs	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e03f      	b.n	80053f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d106      	bne.n	8005390 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7fb ffd8 	bl	8001340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2224      	movs	r2, #36	; 0x24
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68da      	ldr	r2, [r3, #12]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f929 	bl	8005600 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695a      	ldr	r2, [r3, #20]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2220      	movs	r2, #32
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b08a      	sub	sp, #40	; 0x28
 8005402:	af02      	add	r7, sp, #8
 8005404:	60f8      	str	r0, [r7, #12]
 8005406:	60b9      	str	r1, [r7, #8]
 8005408:	603b      	str	r3, [r7, #0]
 800540a:	4613      	mov	r3, r2
 800540c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800540e:	2300      	movs	r3, #0
 8005410:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b20      	cmp	r3, #32
 800541c:	d17c      	bne.n	8005518 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <HAL_UART_Transmit+0x2c>
 8005424:	88fb      	ldrh	r3, [r7, #6]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e075      	b.n	800551a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_UART_Transmit+0x3e>
 8005438:	2302      	movs	r3, #2
 800543a:	e06e      	b.n	800551a <HAL_UART_Transmit+0x11c>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2221      	movs	r2, #33	; 0x21
 800544e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005452:	f7fc fbb1 	bl	8001bb8 <HAL_GetTick>
 8005456:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	88fa      	ldrh	r2, [r7, #6]
 800545c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	88fa      	ldrh	r2, [r7, #6]
 8005462:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800546c:	d108      	bne.n	8005480 <HAL_UART_Transmit+0x82>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d104      	bne.n	8005480 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005476:	2300      	movs	r3, #0
 8005478:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	61bb      	str	r3, [r7, #24]
 800547e:	e003      	b.n	8005488 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005484:	2300      	movs	r3, #0
 8005486:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005490:	e02a      	b.n	80054e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2200      	movs	r2, #0
 800549a:	2180      	movs	r1, #128	; 0x80
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 f840 	bl	8005522 <UART_WaitOnFlagUntilTimeout>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e036      	b.n	800551a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10b      	bne.n	80054ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	3302      	adds	r3, #2
 80054c6:	61bb      	str	r3, [r7, #24]
 80054c8:	e007      	b.n	80054da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	781a      	ldrb	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	3301      	adds	r3, #1
 80054d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054de:	b29b      	uxth	r3, r3
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1cf      	bne.n	8005492 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2200      	movs	r2, #0
 80054fa:	2140      	movs	r1, #64	; 0x40
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 f810 	bl	8005522 <UART_WaitOnFlagUntilTimeout>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e006      	b.n	800551a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2220      	movs	r2, #32
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005514:	2300      	movs	r3, #0
 8005516:	e000      	b.n	800551a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005518:	2302      	movs	r3, #2
  }
}
 800551a:	4618      	mov	r0, r3
 800551c:	3720      	adds	r7, #32
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b090      	sub	sp, #64	; 0x40
 8005526:	af00      	add	r7, sp, #0
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	60b9      	str	r1, [r7, #8]
 800552c:	603b      	str	r3, [r7, #0]
 800552e:	4613      	mov	r3, r2
 8005530:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005532:	e050      	b.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553a:	d04c      	beq.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800553c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800553e:	2b00      	cmp	r3, #0
 8005540:	d007      	beq.n	8005552 <UART_WaitOnFlagUntilTimeout+0x30>
 8005542:	f7fc fb39 	bl	8001bb8 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800554e:	429a      	cmp	r2, r3
 8005550:	d241      	bcs.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	330c      	adds	r3, #12
 8005558:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	e853 3f00 	ldrex	r3, [r3]
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005568:	63fb      	str	r3, [r7, #60]	; 0x3c
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	330c      	adds	r3, #12
 8005570:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005572:	637a      	str	r2, [r7, #52]	; 0x34
 8005574:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005576:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005578:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800557a:	e841 2300 	strex	r3, r2, [r1]
 800557e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1e5      	bne.n	8005552 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3314      	adds	r3, #20
 800558c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	e853 3f00 	ldrex	r3, [r3]
 8005594:	613b      	str	r3, [r7, #16]
   return(result);
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f023 0301 	bic.w	r3, r3, #1
 800559c:	63bb      	str	r3, [r7, #56]	; 0x38
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	3314      	adds	r3, #20
 80055a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055a6:	623a      	str	r2, [r7, #32]
 80055a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055aa:	69f9      	ldr	r1, [r7, #28]
 80055ac:	6a3a      	ldr	r2, [r7, #32]
 80055ae:	e841 2300 	strex	r3, r2, [r1]
 80055b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1e5      	bne.n	8005586 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2220      	movs	r2, #32
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e00f      	b.n	80055f6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	4013      	ands	r3, r2
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	bf0c      	ite	eq
 80055e6:	2301      	moveq	r3, #1
 80055e8:	2300      	movne	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	461a      	mov	r2, r3
 80055ee:	79fb      	ldrb	r3, [r7, #7]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d09f      	beq.n	8005534 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3740      	adds	r7, #64	; 0x40
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005604:	b0c0      	sub	sp, #256	; 0x100
 8005606:	af00      	add	r7, sp, #0
 8005608:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800560c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800561c:	68d9      	ldr	r1, [r3, #12]
 800561e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	ea40 0301 	orr.w	r3, r0, r1
 8005628:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800562a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	431a      	orrs	r2, r3
 8005638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	431a      	orrs	r2, r3
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	4313      	orrs	r3, r2
 8005648:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800564c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005658:	f021 010c 	bic.w	r1, r1, #12
 800565c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005666:	430b      	orrs	r3, r1
 8005668:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800566a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567a:	6999      	ldr	r1, [r3, #24]
 800567c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	ea40 0301 	orr.w	r3, r0, r1
 8005686:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	4b8f      	ldr	r3, [pc, #572]	; (80058cc <UART_SetConfig+0x2cc>)
 8005690:	429a      	cmp	r2, r3
 8005692:	d005      	beq.n	80056a0 <UART_SetConfig+0xa0>
 8005694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	4b8d      	ldr	r3, [pc, #564]	; (80058d0 <UART_SetConfig+0x2d0>)
 800569c:	429a      	cmp	r2, r3
 800569e:	d104      	bne.n	80056aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056a0:	f7fe fe9a 	bl	80043d8 <HAL_RCC_GetPCLK2Freq>
 80056a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80056a8:	e003      	b.n	80056b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056aa:	f7fe fe81 	bl	80043b0 <HAL_RCC_GetPCLK1Freq>
 80056ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056bc:	f040 810c 	bne.w	80058d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056c4:	2200      	movs	r2, #0
 80056c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80056ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80056ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80056d2:	4622      	mov	r2, r4
 80056d4:	462b      	mov	r3, r5
 80056d6:	1891      	adds	r1, r2, r2
 80056d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80056da:	415b      	adcs	r3, r3
 80056dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056e2:	4621      	mov	r1, r4
 80056e4:	eb12 0801 	adds.w	r8, r2, r1
 80056e8:	4629      	mov	r1, r5
 80056ea:	eb43 0901 	adc.w	r9, r3, r1
 80056ee:	f04f 0200 	mov.w	r2, #0
 80056f2:	f04f 0300 	mov.w	r3, #0
 80056f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005702:	4690      	mov	r8, r2
 8005704:	4699      	mov	r9, r3
 8005706:	4623      	mov	r3, r4
 8005708:	eb18 0303 	adds.w	r3, r8, r3
 800570c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005710:	462b      	mov	r3, r5
 8005712:	eb49 0303 	adc.w	r3, r9, r3
 8005716:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800571a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005726:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800572a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800572e:	460b      	mov	r3, r1
 8005730:	18db      	adds	r3, r3, r3
 8005732:	653b      	str	r3, [r7, #80]	; 0x50
 8005734:	4613      	mov	r3, r2
 8005736:	eb42 0303 	adc.w	r3, r2, r3
 800573a:	657b      	str	r3, [r7, #84]	; 0x54
 800573c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005740:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005744:	f7fa fd9c 	bl	8000280 <__aeabi_uldivmod>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	4b61      	ldr	r3, [pc, #388]	; (80058d4 <UART_SetConfig+0x2d4>)
 800574e:	fba3 2302 	umull	r2, r3, r3, r2
 8005752:	095b      	lsrs	r3, r3, #5
 8005754:	011c      	lsls	r4, r3, #4
 8005756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800575a:	2200      	movs	r2, #0
 800575c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005760:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005764:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005768:	4642      	mov	r2, r8
 800576a:	464b      	mov	r3, r9
 800576c:	1891      	adds	r1, r2, r2
 800576e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005770:	415b      	adcs	r3, r3
 8005772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005774:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005778:	4641      	mov	r1, r8
 800577a:	eb12 0a01 	adds.w	sl, r2, r1
 800577e:	4649      	mov	r1, r9
 8005780:	eb43 0b01 	adc.w	fp, r3, r1
 8005784:	f04f 0200 	mov.w	r2, #0
 8005788:	f04f 0300 	mov.w	r3, #0
 800578c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005790:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005794:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005798:	4692      	mov	sl, r2
 800579a:	469b      	mov	fp, r3
 800579c:	4643      	mov	r3, r8
 800579e:	eb1a 0303 	adds.w	r3, sl, r3
 80057a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057a6:	464b      	mov	r3, r9
 80057a8:	eb4b 0303 	adc.w	r3, fp, r3
 80057ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80057b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80057c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80057c4:	460b      	mov	r3, r1
 80057c6:	18db      	adds	r3, r3, r3
 80057c8:	643b      	str	r3, [r7, #64]	; 0x40
 80057ca:	4613      	mov	r3, r2
 80057cc:	eb42 0303 	adc.w	r3, r2, r3
 80057d0:	647b      	str	r3, [r7, #68]	; 0x44
 80057d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80057da:	f7fa fd51 	bl	8000280 <__aeabi_uldivmod>
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	4611      	mov	r1, r2
 80057e4:	4b3b      	ldr	r3, [pc, #236]	; (80058d4 <UART_SetConfig+0x2d4>)
 80057e6:	fba3 2301 	umull	r2, r3, r3, r1
 80057ea:	095b      	lsrs	r3, r3, #5
 80057ec:	2264      	movs	r2, #100	; 0x64
 80057ee:	fb02 f303 	mul.w	r3, r2, r3
 80057f2:	1acb      	subs	r3, r1, r3
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80057fa:	4b36      	ldr	r3, [pc, #216]	; (80058d4 <UART_SetConfig+0x2d4>)
 80057fc:	fba3 2302 	umull	r2, r3, r3, r2
 8005800:	095b      	lsrs	r3, r3, #5
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005808:	441c      	add	r4, r3
 800580a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800580e:	2200      	movs	r2, #0
 8005810:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005814:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005818:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800581c:	4642      	mov	r2, r8
 800581e:	464b      	mov	r3, r9
 8005820:	1891      	adds	r1, r2, r2
 8005822:	63b9      	str	r1, [r7, #56]	; 0x38
 8005824:	415b      	adcs	r3, r3
 8005826:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005828:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800582c:	4641      	mov	r1, r8
 800582e:	1851      	adds	r1, r2, r1
 8005830:	6339      	str	r1, [r7, #48]	; 0x30
 8005832:	4649      	mov	r1, r9
 8005834:	414b      	adcs	r3, r1
 8005836:	637b      	str	r3, [r7, #52]	; 0x34
 8005838:	f04f 0200 	mov.w	r2, #0
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005844:	4659      	mov	r1, fp
 8005846:	00cb      	lsls	r3, r1, #3
 8005848:	4651      	mov	r1, sl
 800584a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800584e:	4651      	mov	r1, sl
 8005850:	00ca      	lsls	r2, r1, #3
 8005852:	4610      	mov	r0, r2
 8005854:	4619      	mov	r1, r3
 8005856:	4603      	mov	r3, r0
 8005858:	4642      	mov	r2, r8
 800585a:	189b      	adds	r3, r3, r2
 800585c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005860:	464b      	mov	r3, r9
 8005862:	460a      	mov	r2, r1
 8005864:	eb42 0303 	adc.w	r3, r2, r3
 8005868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800586c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005878:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800587c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005880:	460b      	mov	r3, r1
 8005882:	18db      	adds	r3, r3, r3
 8005884:	62bb      	str	r3, [r7, #40]	; 0x28
 8005886:	4613      	mov	r3, r2
 8005888:	eb42 0303 	adc.w	r3, r2, r3
 800588c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800588e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005892:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005896:	f7fa fcf3 	bl	8000280 <__aeabi_uldivmod>
 800589a:	4602      	mov	r2, r0
 800589c:	460b      	mov	r3, r1
 800589e:	4b0d      	ldr	r3, [pc, #52]	; (80058d4 <UART_SetConfig+0x2d4>)
 80058a0:	fba3 1302 	umull	r1, r3, r3, r2
 80058a4:	095b      	lsrs	r3, r3, #5
 80058a6:	2164      	movs	r1, #100	; 0x64
 80058a8:	fb01 f303 	mul.w	r3, r1, r3
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	3332      	adds	r3, #50	; 0x32
 80058b2:	4a08      	ldr	r2, [pc, #32]	; (80058d4 <UART_SetConfig+0x2d4>)
 80058b4:	fba2 2303 	umull	r2, r3, r2, r3
 80058b8:	095b      	lsrs	r3, r3, #5
 80058ba:	f003 0207 	and.w	r2, r3, #7
 80058be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4422      	add	r2, r4
 80058c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058c8:	e105      	b.n	8005ad6 <UART_SetConfig+0x4d6>
 80058ca:	bf00      	nop
 80058cc:	40011000 	.word	0x40011000
 80058d0:	40011400 	.word	0x40011400
 80058d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058dc:	2200      	movs	r2, #0
 80058de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80058e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80058ea:	4642      	mov	r2, r8
 80058ec:	464b      	mov	r3, r9
 80058ee:	1891      	adds	r1, r2, r2
 80058f0:	6239      	str	r1, [r7, #32]
 80058f2:	415b      	adcs	r3, r3
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
 80058f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058fa:	4641      	mov	r1, r8
 80058fc:	1854      	adds	r4, r2, r1
 80058fe:	4649      	mov	r1, r9
 8005900:	eb43 0501 	adc.w	r5, r3, r1
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	00eb      	lsls	r3, r5, #3
 800590e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005912:	00e2      	lsls	r2, r4, #3
 8005914:	4614      	mov	r4, r2
 8005916:	461d      	mov	r5, r3
 8005918:	4643      	mov	r3, r8
 800591a:	18e3      	adds	r3, r4, r3
 800591c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005920:	464b      	mov	r3, r9
 8005922:	eb45 0303 	adc.w	r3, r5, r3
 8005926:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800592a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005936:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800593a:	f04f 0200 	mov.w	r2, #0
 800593e:	f04f 0300 	mov.w	r3, #0
 8005942:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005946:	4629      	mov	r1, r5
 8005948:	008b      	lsls	r3, r1, #2
 800594a:	4621      	mov	r1, r4
 800594c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005950:	4621      	mov	r1, r4
 8005952:	008a      	lsls	r2, r1, #2
 8005954:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005958:	f7fa fc92 	bl	8000280 <__aeabi_uldivmod>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4b60      	ldr	r3, [pc, #384]	; (8005ae4 <UART_SetConfig+0x4e4>)
 8005962:	fba3 2302 	umull	r2, r3, r3, r2
 8005966:	095b      	lsrs	r3, r3, #5
 8005968:	011c      	lsls	r4, r3, #4
 800596a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800596e:	2200      	movs	r2, #0
 8005970:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005974:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005978:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800597c:	4642      	mov	r2, r8
 800597e:	464b      	mov	r3, r9
 8005980:	1891      	adds	r1, r2, r2
 8005982:	61b9      	str	r1, [r7, #24]
 8005984:	415b      	adcs	r3, r3
 8005986:	61fb      	str	r3, [r7, #28]
 8005988:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800598c:	4641      	mov	r1, r8
 800598e:	1851      	adds	r1, r2, r1
 8005990:	6139      	str	r1, [r7, #16]
 8005992:	4649      	mov	r1, r9
 8005994:	414b      	adcs	r3, r1
 8005996:	617b      	str	r3, [r7, #20]
 8005998:	f04f 0200 	mov.w	r2, #0
 800599c:	f04f 0300 	mov.w	r3, #0
 80059a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059a4:	4659      	mov	r1, fp
 80059a6:	00cb      	lsls	r3, r1, #3
 80059a8:	4651      	mov	r1, sl
 80059aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059ae:	4651      	mov	r1, sl
 80059b0:	00ca      	lsls	r2, r1, #3
 80059b2:	4610      	mov	r0, r2
 80059b4:	4619      	mov	r1, r3
 80059b6:	4603      	mov	r3, r0
 80059b8:	4642      	mov	r2, r8
 80059ba:	189b      	adds	r3, r3, r2
 80059bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059c0:	464b      	mov	r3, r9
 80059c2:	460a      	mov	r2, r1
 80059c4:	eb42 0303 	adc.w	r3, r2, r3
 80059c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80059d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80059e4:	4649      	mov	r1, r9
 80059e6:	008b      	lsls	r3, r1, #2
 80059e8:	4641      	mov	r1, r8
 80059ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059ee:	4641      	mov	r1, r8
 80059f0:	008a      	lsls	r2, r1, #2
 80059f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80059f6:	f7fa fc43 	bl	8000280 <__aeabi_uldivmod>
 80059fa:	4602      	mov	r2, r0
 80059fc:	460b      	mov	r3, r1
 80059fe:	4b39      	ldr	r3, [pc, #228]	; (8005ae4 <UART_SetConfig+0x4e4>)
 8005a00:	fba3 1302 	umull	r1, r3, r3, r2
 8005a04:	095b      	lsrs	r3, r3, #5
 8005a06:	2164      	movs	r1, #100	; 0x64
 8005a08:	fb01 f303 	mul.w	r3, r1, r3
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	011b      	lsls	r3, r3, #4
 8005a10:	3332      	adds	r3, #50	; 0x32
 8005a12:	4a34      	ldr	r2, [pc, #208]	; (8005ae4 <UART_SetConfig+0x4e4>)
 8005a14:	fba2 2303 	umull	r2, r3, r2, r3
 8005a18:	095b      	lsrs	r3, r3, #5
 8005a1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a1e:	441c      	add	r4, r3
 8005a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a24:	2200      	movs	r2, #0
 8005a26:	673b      	str	r3, [r7, #112]	; 0x70
 8005a28:	677a      	str	r2, [r7, #116]	; 0x74
 8005a2a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a2e:	4642      	mov	r2, r8
 8005a30:	464b      	mov	r3, r9
 8005a32:	1891      	adds	r1, r2, r2
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	415b      	adcs	r3, r3
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a3e:	4641      	mov	r1, r8
 8005a40:	1851      	adds	r1, r2, r1
 8005a42:	6039      	str	r1, [r7, #0]
 8005a44:	4649      	mov	r1, r9
 8005a46:	414b      	adcs	r3, r1
 8005a48:	607b      	str	r3, [r7, #4]
 8005a4a:	f04f 0200 	mov.w	r2, #0
 8005a4e:	f04f 0300 	mov.w	r3, #0
 8005a52:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a56:	4659      	mov	r1, fp
 8005a58:	00cb      	lsls	r3, r1, #3
 8005a5a:	4651      	mov	r1, sl
 8005a5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a60:	4651      	mov	r1, sl
 8005a62:	00ca      	lsls	r2, r1, #3
 8005a64:	4610      	mov	r0, r2
 8005a66:	4619      	mov	r1, r3
 8005a68:	4603      	mov	r3, r0
 8005a6a:	4642      	mov	r2, r8
 8005a6c:	189b      	adds	r3, r3, r2
 8005a6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a70:	464b      	mov	r3, r9
 8005a72:	460a      	mov	r2, r1
 8005a74:	eb42 0303 	adc.w	r3, r2, r3
 8005a78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	663b      	str	r3, [r7, #96]	; 0x60
 8005a84:	667a      	str	r2, [r7, #100]	; 0x64
 8005a86:	f04f 0200 	mov.w	r2, #0
 8005a8a:	f04f 0300 	mov.w	r3, #0
 8005a8e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a92:	4649      	mov	r1, r9
 8005a94:	008b      	lsls	r3, r1, #2
 8005a96:	4641      	mov	r1, r8
 8005a98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a9c:	4641      	mov	r1, r8
 8005a9e:	008a      	lsls	r2, r1, #2
 8005aa0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005aa4:	f7fa fbec 	bl	8000280 <__aeabi_uldivmod>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	460b      	mov	r3, r1
 8005aac:	4b0d      	ldr	r3, [pc, #52]	; (8005ae4 <UART_SetConfig+0x4e4>)
 8005aae:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab2:	095b      	lsrs	r3, r3, #5
 8005ab4:	2164      	movs	r1, #100	; 0x64
 8005ab6:	fb01 f303 	mul.w	r3, r1, r3
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	011b      	lsls	r3, r3, #4
 8005abe:	3332      	adds	r3, #50	; 0x32
 8005ac0:	4a08      	ldr	r2, [pc, #32]	; (8005ae4 <UART_SetConfig+0x4e4>)
 8005ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac6:	095b      	lsrs	r3, r3, #5
 8005ac8:	f003 020f 	and.w	r2, r3, #15
 8005acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4422      	add	r2, r4
 8005ad4:	609a      	str	r2, [r3, #8]
}
 8005ad6:	bf00      	nop
 8005ad8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005adc:	46bd      	mov	sp, r7
 8005ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ae2:	bf00      	nop
 8005ae4:	51eb851f 	.word	0x51eb851f

08005ae8 <__errno>:
 8005ae8:	4b01      	ldr	r3, [pc, #4]	; (8005af0 <__errno+0x8>)
 8005aea:	6818      	ldr	r0, [r3, #0]
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	2000000c 	.word	0x2000000c

08005af4 <__libc_init_array>:
 8005af4:	b570      	push	{r4, r5, r6, lr}
 8005af6:	4d0d      	ldr	r5, [pc, #52]	; (8005b2c <__libc_init_array+0x38>)
 8005af8:	4c0d      	ldr	r4, [pc, #52]	; (8005b30 <__libc_init_array+0x3c>)
 8005afa:	1b64      	subs	r4, r4, r5
 8005afc:	10a4      	asrs	r4, r4, #2
 8005afe:	2600      	movs	r6, #0
 8005b00:	42a6      	cmp	r6, r4
 8005b02:	d109      	bne.n	8005b18 <__libc_init_array+0x24>
 8005b04:	4d0b      	ldr	r5, [pc, #44]	; (8005b34 <__libc_init_array+0x40>)
 8005b06:	4c0c      	ldr	r4, [pc, #48]	; (8005b38 <__libc_init_array+0x44>)
 8005b08:	f000 fcb0 	bl	800646c <_init>
 8005b0c:	1b64      	subs	r4, r4, r5
 8005b0e:	10a4      	asrs	r4, r4, #2
 8005b10:	2600      	movs	r6, #0
 8005b12:	42a6      	cmp	r6, r4
 8005b14:	d105      	bne.n	8005b22 <__libc_init_array+0x2e>
 8005b16:	bd70      	pop	{r4, r5, r6, pc}
 8005b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b1c:	4798      	blx	r3
 8005b1e:	3601      	adds	r6, #1
 8005b20:	e7ee      	b.n	8005b00 <__libc_init_array+0xc>
 8005b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b26:	4798      	blx	r3
 8005b28:	3601      	adds	r6, #1
 8005b2a:	e7f2      	b.n	8005b12 <__libc_init_array+0x1e>
 8005b2c:	0800786c 	.word	0x0800786c
 8005b30:	0800786c 	.word	0x0800786c
 8005b34:	0800786c 	.word	0x0800786c
 8005b38:	08007870 	.word	0x08007870

08005b3c <memset>:
 8005b3c:	4402      	add	r2, r0
 8005b3e:	4603      	mov	r3, r0
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d100      	bne.n	8005b46 <memset+0xa>
 8005b44:	4770      	bx	lr
 8005b46:	f803 1b01 	strb.w	r1, [r3], #1
 8005b4a:	e7f9      	b.n	8005b40 <memset+0x4>

08005b4c <siprintf>:
 8005b4c:	b40e      	push	{r1, r2, r3}
 8005b4e:	b500      	push	{lr}
 8005b50:	b09c      	sub	sp, #112	; 0x70
 8005b52:	ab1d      	add	r3, sp, #116	; 0x74
 8005b54:	9002      	str	r0, [sp, #8]
 8005b56:	9006      	str	r0, [sp, #24]
 8005b58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b5c:	4809      	ldr	r0, [pc, #36]	; (8005b84 <siprintf+0x38>)
 8005b5e:	9107      	str	r1, [sp, #28]
 8005b60:	9104      	str	r1, [sp, #16]
 8005b62:	4909      	ldr	r1, [pc, #36]	; (8005b88 <siprintf+0x3c>)
 8005b64:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b68:	9105      	str	r1, [sp, #20]
 8005b6a:	6800      	ldr	r0, [r0, #0]
 8005b6c:	9301      	str	r3, [sp, #4]
 8005b6e:	a902      	add	r1, sp, #8
 8005b70:	f000 f868 	bl	8005c44 <_svfiprintf_r>
 8005b74:	9b02      	ldr	r3, [sp, #8]
 8005b76:	2200      	movs	r2, #0
 8005b78:	701a      	strb	r2, [r3, #0]
 8005b7a:	b01c      	add	sp, #112	; 0x70
 8005b7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b80:	b003      	add	sp, #12
 8005b82:	4770      	bx	lr
 8005b84:	2000000c 	.word	0x2000000c
 8005b88:	ffff0208 	.word	0xffff0208

08005b8c <__ssputs_r>:
 8005b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b90:	688e      	ldr	r6, [r1, #8]
 8005b92:	429e      	cmp	r6, r3
 8005b94:	4682      	mov	sl, r0
 8005b96:	460c      	mov	r4, r1
 8005b98:	4690      	mov	r8, r2
 8005b9a:	461f      	mov	r7, r3
 8005b9c:	d838      	bhi.n	8005c10 <__ssputs_r+0x84>
 8005b9e:	898a      	ldrh	r2, [r1, #12]
 8005ba0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ba4:	d032      	beq.n	8005c0c <__ssputs_r+0x80>
 8005ba6:	6825      	ldr	r5, [r4, #0]
 8005ba8:	6909      	ldr	r1, [r1, #16]
 8005baa:	eba5 0901 	sub.w	r9, r5, r1
 8005bae:	6965      	ldr	r5, [r4, #20]
 8005bb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005bb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005bb8:	3301      	adds	r3, #1
 8005bba:	444b      	add	r3, r9
 8005bbc:	106d      	asrs	r5, r5, #1
 8005bbe:	429d      	cmp	r5, r3
 8005bc0:	bf38      	it	cc
 8005bc2:	461d      	movcc	r5, r3
 8005bc4:	0553      	lsls	r3, r2, #21
 8005bc6:	d531      	bpl.n	8005c2c <__ssputs_r+0xa0>
 8005bc8:	4629      	mov	r1, r5
 8005bca:	f000 fb63 	bl	8006294 <_malloc_r>
 8005bce:	4606      	mov	r6, r0
 8005bd0:	b950      	cbnz	r0, 8005be8 <__ssputs_r+0x5c>
 8005bd2:	230c      	movs	r3, #12
 8005bd4:	f8ca 3000 	str.w	r3, [sl]
 8005bd8:	89a3      	ldrh	r3, [r4, #12]
 8005bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bde:	81a3      	strh	r3, [r4, #12]
 8005be0:	f04f 30ff 	mov.w	r0, #4294967295
 8005be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005be8:	6921      	ldr	r1, [r4, #16]
 8005bea:	464a      	mov	r2, r9
 8005bec:	f000 fabe 	bl	800616c <memcpy>
 8005bf0:	89a3      	ldrh	r3, [r4, #12]
 8005bf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bfa:	81a3      	strh	r3, [r4, #12]
 8005bfc:	6126      	str	r6, [r4, #16]
 8005bfe:	6165      	str	r5, [r4, #20]
 8005c00:	444e      	add	r6, r9
 8005c02:	eba5 0509 	sub.w	r5, r5, r9
 8005c06:	6026      	str	r6, [r4, #0]
 8005c08:	60a5      	str	r5, [r4, #8]
 8005c0a:	463e      	mov	r6, r7
 8005c0c:	42be      	cmp	r6, r7
 8005c0e:	d900      	bls.n	8005c12 <__ssputs_r+0x86>
 8005c10:	463e      	mov	r6, r7
 8005c12:	6820      	ldr	r0, [r4, #0]
 8005c14:	4632      	mov	r2, r6
 8005c16:	4641      	mov	r1, r8
 8005c18:	f000 fab6 	bl	8006188 <memmove>
 8005c1c:	68a3      	ldr	r3, [r4, #8]
 8005c1e:	1b9b      	subs	r3, r3, r6
 8005c20:	60a3      	str	r3, [r4, #8]
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	4433      	add	r3, r6
 8005c26:	6023      	str	r3, [r4, #0]
 8005c28:	2000      	movs	r0, #0
 8005c2a:	e7db      	b.n	8005be4 <__ssputs_r+0x58>
 8005c2c:	462a      	mov	r2, r5
 8005c2e:	f000 fba5 	bl	800637c <_realloc_r>
 8005c32:	4606      	mov	r6, r0
 8005c34:	2800      	cmp	r0, #0
 8005c36:	d1e1      	bne.n	8005bfc <__ssputs_r+0x70>
 8005c38:	6921      	ldr	r1, [r4, #16]
 8005c3a:	4650      	mov	r0, sl
 8005c3c:	f000 fabe 	bl	80061bc <_free_r>
 8005c40:	e7c7      	b.n	8005bd2 <__ssputs_r+0x46>
	...

08005c44 <_svfiprintf_r>:
 8005c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c48:	4698      	mov	r8, r3
 8005c4a:	898b      	ldrh	r3, [r1, #12]
 8005c4c:	061b      	lsls	r3, r3, #24
 8005c4e:	b09d      	sub	sp, #116	; 0x74
 8005c50:	4607      	mov	r7, r0
 8005c52:	460d      	mov	r5, r1
 8005c54:	4614      	mov	r4, r2
 8005c56:	d50e      	bpl.n	8005c76 <_svfiprintf_r+0x32>
 8005c58:	690b      	ldr	r3, [r1, #16]
 8005c5a:	b963      	cbnz	r3, 8005c76 <_svfiprintf_r+0x32>
 8005c5c:	2140      	movs	r1, #64	; 0x40
 8005c5e:	f000 fb19 	bl	8006294 <_malloc_r>
 8005c62:	6028      	str	r0, [r5, #0]
 8005c64:	6128      	str	r0, [r5, #16]
 8005c66:	b920      	cbnz	r0, 8005c72 <_svfiprintf_r+0x2e>
 8005c68:	230c      	movs	r3, #12
 8005c6a:	603b      	str	r3, [r7, #0]
 8005c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c70:	e0d1      	b.n	8005e16 <_svfiprintf_r+0x1d2>
 8005c72:	2340      	movs	r3, #64	; 0x40
 8005c74:	616b      	str	r3, [r5, #20]
 8005c76:	2300      	movs	r3, #0
 8005c78:	9309      	str	r3, [sp, #36]	; 0x24
 8005c7a:	2320      	movs	r3, #32
 8005c7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c80:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c84:	2330      	movs	r3, #48	; 0x30
 8005c86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005e30 <_svfiprintf_r+0x1ec>
 8005c8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c8e:	f04f 0901 	mov.w	r9, #1
 8005c92:	4623      	mov	r3, r4
 8005c94:	469a      	mov	sl, r3
 8005c96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c9a:	b10a      	cbz	r2, 8005ca0 <_svfiprintf_r+0x5c>
 8005c9c:	2a25      	cmp	r2, #37	; 0x25
 8005c9e:	d1f9      	bne.n	8005c94 <_svfiprintf_r+0x50>
 8005ca0:	ebba 0b04 	subs.w	fp, sl, r4
 8005ca4:	d00b      	beq.n	8005cbe <_svfiprintf_r+0x7a>
 8005ca6:	465b      	mov	r3, fp
 8005ca8:	4622      	mov	r2, r4
 8005caa:	4629      	mov	r1, r5
 8005cac:	4638      	mov	r0, r7
 8005cae:	f7ff ff6d 	bl	8005b8c <__ssputs_r>
 8005cb2:	3001      	adds	r0, #1
 8005cb4:	f000 80aa 	beq.w	8005e0c <_svfiprintf_r+0x1c8>
 8005cb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cba:	445a      	add	r2, fp
 8005cbc:	9209      	str	r2, [sp, #36]	; 0x24
 8005cbe:	f89a 3000 	ldrb.w	r3, [sl]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 80a2 	beq.w	8005e0c <_svfiprintf_r+0x1c8>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	f04f 32ff 	mov.w	r2, #4294967295
 8005cce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cd2:	f10a 0a01 	add.w	sl, sl, #1
 8005cd6:	9304      	str	r3, [sp, #16]
 8005cd8:	9307      	str	r3, [sp, #28]
 8005cda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cde:	931a      	str	r3, [sp, #104]	; 0x68
 8005ce0:	4654      	mov	r4, sl
 8005ce2:	2205      	movs	r2, #5
 8005ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ce8:	4851      	ldr	r0, [pc, #324]	; (8005e30 <_svfiprintf_r+0x1ec>)
 8005cea:	f7fa fa79 	bl	80001e0 <memchr>
 8005cee:	9a04      	ldr	r2, [sp, #16]
 8005cf0:	b9d8      	cbnz	r0, 8005d2a <_svfiprintf_r+0xe6>
 8005cf2:	06d0      	lsls	r0, r2, #27
 8005cf4:	bf44      	itt	mi
 8005cf6:	2320      	movmi	r3, #32
 8005cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cfc:	0711      	lsls	r1, r2, #28
 8005cfe:	bf44      	itt	mi
 8005d00:	232b      	movmi	r3, #43	; 0x2b
 8005d02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d06:	f89a 3000 	ldrb.w	r3, [sl]
 8005d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8005d0c:	d015      	beq.n	8005d3a <_svfiprintf_r+0xf6>
 8005d0e:	9a07      	ldr	r2, [sp, #28]
 8005d10:	4654      	mov	r4, sl
 8005d12:	2000      	movs	r0, #0
 8005d14:	f04f 0c0a 	mov.w	ip, #10
 8005d18:	4621      	mov	r1, r4
 8005d1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d1e:	3b30      	subs	r3, #48	; 0x30
 8005d20:	2b09      	cmp	r3, #9
 8005d22:	d94e      	bls.n	8005dc2 <_svfiprintf_r+0x17e>
 8005d24:	b1b0      	cbz	r0, 8005d54 <_svfiprintf_r+0x110>
 8005d26:	9207      	str	r2, [sp, #28]
 8005d28:	e014      	b.n	8005d54 <_svfiprintf_r+0x110>
 8005d2a:	eba0 0308 	sub.w	r3, r0, r8
 8005d2e:	fa09 f303 	lsl.w	r3, r9, r3
 8005d32:	4313      	orrs	r3, r2
 8005d34:	9304      	str	r3, [sp, #16]
 8005d36:	46a2      	mov	sl, r4
 8005d38:	e7d2      	b.n	8005ce0 <_svfiprintf_r+0x9c>
 8005d3a:	9b03      	ldr	r3, [sp, #12]
 8005d3c:	1d19      	adds	r1, r3, #4
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	9103      	str	r1, [sp, #12]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	bfbb      	ittet	lt
 8005d46:	425b      	neglt	r3, r3
 8005d48:	f042 0202 	orrlt.w	r2, r2, #2
 8005d4c:	9307      	strge	r3, [sp, #28]
 8005d4e:	9307      	strlt	r3, [sp, #28]
 8005d50:	bfb8      	it	lt
 8005d52:	9204      	strlt	r2, [sp, #16]
 8005d54:	7823      	ldrb	r3, [r4, #0]
 8005d56:	2b2e      	cmp	r3, #46	; 0x2e
 8005d58:	d10c      	bne.n	8005d74 <_svfiprintf_r+0x130>
 8005d5a:	7863      	ldrb	r3, [r4, #1]
 8005d5c:	2b2a      	cmp	r3, #42	; 0x2a
 8005d5e:	d135      	bne.n	8005dcc <_svfiprintf_r+0x188>
 8005d60:	9b03      	ldr	r3, [sp, #12]
 8005d62:	1d1a      	adds	r2, r3, #4
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	9203      	str	r2, [sp, #12]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	bfb8      	it	lt
 8005d6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d70:	3402      	adds	r4, #2
 8005d72:	9305      	str	r3, [sp, #20]
 8005d74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005e40 <_svfiprintf_r+0x1fc>
 8005d78:	7821      	ldrb	r1, [r4, #0]
 8005d7a:	2203      	movs	r2, #3
 8005d7c:	4650      	mov	r0, sl
 8005d7e:	f7fa fa2f 	bl	80001e0 <memchr>
 8005d82:	b140      	cbz	r0, 8005d96 <_svfiprintf_r+0x152>
 8005d84:	2340      	movs	r3, #64	; 0x40
 8005d86:	eba0 000a 	sub.w	r0, r0, sl
 8005d8a:	fa03 f000 	lsl.w	r0, r3, r0
 8005d8e:	9b04      	ldr	r3, [sp, #16]
 8005d90:	4303      	orrs	r3, r0
 8005d92:	3401      	adds	r4, #1
 8005d94:	9304      	str	r3, [sp, #16]
 8005d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d9a:	4826      	ldr	r0, [pc, #152]	; (8005e34 <_svfiprintf_r+0x1f0>)
 8005d9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005da0:	2206      	movs	r2, #6
 8005da2:	f7fa fa1d 	bl	80001e0 <memchr>
 8005da6:	2800      	cmp	r0, #0
 8005da8:	d038      	beq.n	8005e1c <_svfiprintf_r+0x1d8>
 8005daa:	4b23      	ldr	r3, [pc, #140]	; (8005e38 <_svfiprintf_r+0x1f4>)
 8005dac:	bb1b      	cbnz	r3, 8005df6 <_svfiprintf_r+0x1b2>
 8005dae:	9b03      	ldr	r3, [sp, #12]
 8005db0:	3307      	adds	r3, #7
 8005db2:	f023 0307 	bic.w	r3, r3, #7
 8005db6:	3308      	adds	r3, #8
 8005db8:	9303      	str	r3, [sp, #12]
 8005dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dbc:	4433      	add	r3, r6
 8005dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8005dc0:	e767      	b.n	8005c92 <_svfiprintf_r+0x4e>
 8005dc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dc6:	460c      	mov	r4, r1
 8005dc8:	2001      	movs	r0, #1
 8005dca:	e7a5      	b.n	8005d18 <_svfiprintf_r+0xd4>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	3401      	adds	r4, #1
 8005dd0:	9305      	str	r3, [sp, #20]
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	f04f 0c0a 	mov.w	ip, #10
 8005dd8:	4620      	mov	r0, r4
 8005dda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dde:	3a30      	subs	r2, #48	; 0x30
 8005de0:	2a09      	cmp	r2, #9
 8005de2:	d903      	bls.n	8005dec <_svfiprintf_r+0x1a8>
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d0c5      	beq.n	8005d74 <_svfiprintf_r+0x130>
 8005de8:	9105      	str	r1, [sp, #20]
 8005dea:	e7c3      	b.n	8005d74 <_svfiprintf_r+0x130>
 8005dec:	fb0c 2101 	mla	r1, ip, r1, r2
 8005df0:	4604      	mov	r4, r0
 8005df2:	2301      	movs	r3, #1
 8005df4:	e7f0      	b.n	8005dd8 <_svfiprintf_r+0x194>
 8005df6:	ab03      	add	r3, sp, #12
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	462a      	mov	r2, r5
 8005dfc:	4b0f      	ldr	r3, [pc, #60]	; (8005e3c <_svfiprintf_r+0x1f8>)
 8005dfe:	a904      	add	r1, sp, #16
 8005e00:	4638      	mov	r0, r7
 8005e02:	f3af 8000 	nop.w
 8005e06:	1c42      	adds	r2, r0, #1
 8005e08:	4606      	mov	r6, r0
 8005e0a:	d1d6      	bne.n	8005dba <_svfiprintf_r+0x176>
 8005e0c:	89ab      	ldrh	r3, [r5, #12]
 8005e0e:	065b      	lsls	r3, r3, #25
 8005e10:	f53f af2c 	bmi.w	8005c6c <_svfiprintf_r+0x28>
 8005e14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e16:	b01d      	add	sp, #116	; 0x74
 8005e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e1c:	ab03      	add	r3, sp, #12
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	462a      	mov	r2, r5
 8005e22:	4b06      	ldr	r3, [pc, #24]	; (8005e3c <_svfiprintf_r+0x1f8>)
 8005e24:	a904      	add	r1, sp, #16
 8005e26:	4638      	mov	r0, r7
 8005e28:	f000 f87a 	bl	8005f20 <_printf_i>
 8005e2c:	e7eb      	b.n	8005e06 <_svfiprintf_r+0x1c2>
 8005e2e:	bf00      	nop
 8005e30:	08007830 	.word	0x08007830
 8005e34:	0800783a 	.word	0x0800783a
 8005e38:	00000000 	.word	0x00000000
 8005e3c:	08005b8d 	.word	0x08005b8d
 8005e40:	08007836 	.word	0x08007836

08005e44 <_printf_common>:
 8005e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e48:	4616      	mov	r6, r2
 8005e4a:	4699      	mov	r9, r3
 8005e4c:	688a      	ldr	r2, [r1, #8]
 8005e4e:	690b      	ldr	r3, [r1, #16]
 8005e50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e54:	4293      	cmp	r3, r2
 8005e56:	bfb8      	it	lt
 8005e58:	4613      	movlt	r3, r2
 8005e5a:	6033      	str	r3, [r6, #0]
 8005e5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e60:	4607      	mov	r7, r0
 8005e62:	460c      	mov	r4, r1
 8005e64:	b10a      	cbz	r2, 8005e6a <_printf_common+0x26>
 8005e66:	3301      	adds	r3, #1
 8005e68:	6033      	str	r3, [r6, #0]
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	0699      	lsls	r1, r3, #26
 8005e6e:	bf42      	ittt	mi
 8005e70:	6833      	ldrmi	r3, [r6, #0]
 8005e72:	3302      	addmi	r3, #2
 8005e74:	6033      	strmi	r3, [r6, #0]
 8005e76:	6825      	ldr	r5, [r4, #0]
 8005e78:	f015 0506 	ands.w	r5, r5, #6
 8005e7c:	d106      	bne.n	8005e8c <_printf_common+0x48>
 8005e7e:	f104 0a19 	add.w	sl, r4, #25
 8005e82:	68e3      	ldr	r3, [r4, #12]
 8005e84:	6832      	ldr	r2, [r6, #0]
 8005e86:	1a9b      	subs	r3, r3, r2
 8005e88:	42ab      	cmp	r3, r5
 8005e8a:	dc26      	bgt.n	8005eda <_printf_common+0x96>
 8005e8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e90:	1e13      	subs	r3, r2, #0
 8005e92:	6822      	ldr	r2, [r4, #0]
 8005e94:	bf18      	it	ne
 8005e96:	2301      	movne	r3, #1
 8005e98:	0692      	lsls	r2, r2, #26
 8005e9a:	d42b      	bmi.n	8005ef4 <_printf_common+0xb0>
 8005e9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ea0:	4649      	mov	r1, r9
 8005ea2:	4638      	mov	r0, r7
 8005ea4:	47c0      	blx	r8
 8005ea6:	3001      	adds	r0, #1
 8005ea8:	d01e      	beq.n	8005ee8 <_printf_common+0xa4>
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	68e5      	ldr	r5, [r4, #12]
 8005eae:	6832      	ldr	r2, [r6, #0]
 8005eb0:	f003 0306 	and.w	r3, r3, #6
 8005eb4:	2b04      	cmp	r3, #4
 8005eb6:	bf08      	it	eq
 8005eb8:	1aad      	subeq	r5, r5, r2
 8005eba:	68a3      	ldr	r3, [r4, #8]
 8005ebc:	6922      	ldr	r2, [r4, #16]
 8005ebe:	bf0c      	ite	eq
 8005ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ec4:	2500      	movne	r5, #0
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	bfc4      	itt	gt
 8005eca:	1a9b      	subgt	r3, r3, r2
 8005ecc:	18ed      	addgt	r5, r5, r3
 8005ece:	2600      	movs	r6, #0
 8005ed0:	341a      	adds	r4, #26
 8005ed2:	42b5      	cmp	r5, r6
 8005ed4:	d11a      	bne.n	8005f0c <_printf_common+0xc8>
 8005ed6:	2000      	movs	r0, #0
 8005ed8:	e008      	b.n	8005eec <_printf_common+0xa8>
 8005eda:	2301      	movs	r3, #1
 8005edc:	4652      	mov	r2, sl
 8005ede:	4649      	mov	r1, r9
 8005ee0:	4638      	mov	r0, r7
 8005ee2:	47c0      	blx	r8
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	d103      	bne.n	8005ef0 <_printf_common+0xac>
 8005ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ef0:	3501      	adds	r5, #1
 8005ef2:	e7c6      	b.n	8005e82 <_printf_common+0x3e>
 8005ef4:	18e1      	adds	r1, r4, r3
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	2030      	movs	r0, #48	; 0x30
 8005efa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005efe:	4422      	add	r2, r4
 8005f00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f08:	3302      	adds	r3, #2
 8005f0a:	e7c7      	b.n	8005e9c <_printf_common+0x58>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	4622      	mov	r2, r4
 8005f10:	4649      	mov	r1, r9
 8005f12:	4638      	mov	r0, r7
 8005f14:	47c0      	blx	r8
 8005f16:	3001      	adds	r0, #1
 8005f18:	d0e6      	beq.n	8005ee8 <_printf_common+0xa4>
 8005f1a:	3601      	adds	r6, #1
 8005f1c:	e7d9      	b.n	8005ed2 <_printf_common+0x8e>
	...

08005f20 <_printf_i>:
 8005f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f24:	7e0f      	ldrb	r7, [r1, #24]
 8005f26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f28:	2f78      	cmp	r7, #120	; 0x78
 8005f2a:	4691      	mov	r9, r2
 8005f2c:	4680      	mov	r8, r0
 8005f2e:	460c      	mov	r4, r1
 8005f30:	469a      	mov	sl, r3
 8005f32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f36:	d807      	bhi.n	8005f48 <_printf_i+0x28>
 8005f38:	2f62      	cmp	r7, #98	; 0x62
 8005f3a:	d80a      	bhi.n	8005f52 <_printf_i+0x32>
 8005f3c:	2f00      	cmp	r7, #0
 8005f3e:	f000 80d8 	beq.w	80060f2 <_printf_i+0x1d2>
 8005f42:	2f58      	cmp	r7, #88	; 0x58
 8005f44:	f000 80a3 	beq.w	800608e <_printf_i+0x16e>
 8005f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f50:	e03a      	b.n	8005fc8 <_printf_i+0xa8>
 8005f52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f56:	2b15      	cmp	r3, #21
 8005f58:	d8f6      	bhi.n	8005f48 <_printf_i+0x28>
 8005f5a:	a101      	add	r1, pc, #4	; (adr r1, 8005f60 <_printf_i+0x40>)
 8005f5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f60:	08005fb9 	.word	0x08005fb9
 8005f64:	08005fcd 	.word	0x08005fcd
 8005f68:	08005f49 	.word	0x08005f49
 8005f6c:	08005f49 	.word	0x08005f49
 8005f70:	08005f49 	.word	0x08005f49
 8005f74:	08005f49 	.word	0x08005f49
 8005f78:	08005fcd 	.word	0x08005fcd
 8005f7c:	08005f49 	.word	0x08005f49
 8005f80:	08005f49 	.word	0x08005f49
 8005f84:	08005f49 	.word	0x08005f49
 8005f88:	08005f49 	.word	0x08005f49
 8005f8c:	080060d9 	.word	0x080060d9
 8005f90:	08005ffd 	.word	0x08005ffd
 8005f94:	080060bb 	.word	0x080060bb
 8005f98:	08005f49 	.word	0x08005f49
 8005f9c:	08005f49 	.word	0x08005f49
 8005fa0:	080060fb 	.word	0x080060fb
 8005fa4:	08005f49 	.word	0x08005f49
 8005fa8:	08005ffd 	.word	0x08005ffd
 8005fac:	08005f49 	.word	0x08005f49
 8005fb0:	08005f49 	.word	0x08005f49
 8005fb4:	080060c3 	.word	0x080060c3
 8005fb8:	682b      	ldr	r3, [r5, #0]
 8005fba:	1d1a      	adds	r2, r3, #4
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	602a      	str	r2, [r5, #0]
 8005fc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e0a3      	b.n	8006114 <_printf_i+0x1f4>
 8005fcc:	6820      	ldr	r0, [r4, #0]
 8005fce:	6829      	ldr	r1, [r5, #0]
 8005fd0:	0606      	lsls	r6, r0, #24
 8005fd2:	f101 0304 	add.w	r3, r1, #4
 8005fd6:	d50a      	bpl.n	8005fee <_printf_i+0xce>
 8005fd8:	680e      	ldr	r6, [r1, #0]
 8005fda:	602b      	str	r3, [r5, #0]
 8005fdc:	2e00      	cmp	r6, #0
 8005fde:	da03      	bge.n	8005fe8 <_printf_i+0xc8>
 8005fe0:	232d      	movs	r3, #45	; 0x2d
 8005fe2:	4276      	negs	r6, r6
 8005fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fe8:	485e      	ldr	r0, [pc, #376]	; (8006164 <_printf_i+0x244>)
 8005fea:	230a      	movs	r3, #10
 8005fec:	e019      	b.n	8006022 <_printf_i+0x102>
 8005fee:	680e      	ldr	r6, [r1, #0]
 8005ff0:	602b      	str	r3, [r5, #0]
 8005ff2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ff6:	bf18      	it	ne
 8005ff8:	b236      	sxthne	r6, r6
 8005ffa:	e7ef      	b.n	8005fdc <_printf_i+0xbc>
 8005ffc:	682b      	ldr	r3, [r5, #0]
 8005ffe:	6820      	ldr	r0, [r4, #0]
 8006000:	1d19      	adds	r1, r3, #4
 8006002:	6029      	str	r1, [r5, #0]
 8006004:	0601      	lsls	r1, r0, #24
 8006006:	d501      	bpl.n	800600c <_printf_i+0xec>
 8006008:	681e      	ldr	r6, [r3, #0]
 800600a:	e002      	b.n	8006012 <_printf_i+0xf2>
 800600c:	0646      	lsls	r6, r0, #25
 800600e:	d5fb      	bpl.n	8006008 <_printf_i+0xe8>
 8006010:	881e      	ldrh	r6, [r3, #0]
 8006012:	4854      	ldr	r0, [pc, #336]	; (8006164 <_printf_i+0x244>)
 8006014:	2f6f      	cmp	r7, #111	; 0x6f
 8006016:	bf0c      	ite	eq
 8006018:	2308      	moveq	r3, #8
 800601a:	230a      	movne	r3, #10
 800601c:	2100      	movs	r1, #0
 800601e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006022:	6865      	ldr	r5, [r4, #4]
 8006024:	60a5      	str	r5, [r4, #8]
 8006026:	2d00      	cmp	r5, #0
 8006028:	bfa2      	ittt	ge
 800602a:	6821      	ldrge	r1, [r4, #0]
 800602c:	f021 0104 	bicge.w	r1, r1, #4
 8006030:	6021      	strge	r1, [r4, #0]
 8006032:	b90e      	cbnz	r6, 8006038 <_printf_i+0x118>
 8006034:	2d00      	cmp	r5, #0
 8006036:	d04d      	beq.n	80060d4 <_printf_i+0x1b4>
 8006038:	4615      	mov	r5, r2
 800603a:	fbb6 f1f3 	udiv	r1, r6, r3
 800603e:	fb03 6711 	mls	r7, r3, r1, r6
 8006042:	5dc7      	ldrb	r7, [r0, r7]
 8006044:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006048:	4637      	mov	r7, r6
 800604a:	42bb      	cmp	r3, r7
 800604c:	460e      	mov	r6, r1
 800604e:	d9f4      	bls.n	800603a <_printf_i+0x11a>
 8006050:	2b08      	cmp	r3, #8
 8006052:	d10b      	bne.n	800606c <_printf_i+0x14c>
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	07de      	lsls	r6, r3, #31
 8006058:	d508      	bpl.n	800606c <_printf_i+0x14c>
 800605a:	6923      	ldr	r3, [r4, #16]
 800605c:	6861      	ldr	r1, [r4, #4]
 800605e:	4299      	cmp	r1, r3
 8006060:	bfde      	ittt	le
 8006062:	2330      	movle	r3, #48	; 0x30
 8006064:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006068:	f105 35ff 	addle.w	r5, r5, #4294967295
 800606c:	1b52      	subs	r2, r2, r5
 800606e:	6122      	str	r2, [r4, #16]
 8006070:	f8cd a000 	str.w	sl, [sp]
 8006074:	464b      	mov	r3, r9
 8006076:	aa03      	add	r2, sp, #12
 8006078:	4621      	mov	r1, r4
 800607a:	4640      	mov	r0, r8
 800607c:	f7ff fee2 	bl	8005e44 <_printf_common>
 8006080:	3001      	adds	r0, #1
 8006082:	d14c      	bne.n	800611e <_printf_i+0x1fe>
 8006084:	f04f 30ff 	mov.w	r0, #4294967295
 8006088:	b004      	add	sp, #16
 800608a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800608e:	4835      	ldr	r0, [pc, #212]	; (8006164 <_printf_i+0x244>)
 8006090:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006094:	6829      	ldr	r1, [r5, #0]
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	f851 6b04 	ldr.w	r6, [r1], #4
 800609c:	6029      	str	r1, [r5, #0]
 800609e:	061d      	lsls	r5, r3, #24
 80060a0:	d514      	bpl.n	80060cc <_printf_i+0x1ac>
 80060a2:	07df      	lsls	r7, r3, #31
 80060a4:	bf44      	itt	mi
 80060a6:	f043 0320 	orrmi.w	r3, r3, #32
 80060aa:	6023      	strmi	r3, [r4, #0]
 80060ac:	b91e      	cbnz	r6, 80060b6 <_printf_i+0x196>
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	f023 0320 	bic.w	r3, r3, #32
 80060b4:	6023      	str	r3, [r4, #0]
 80060b6:	2310      	movs	r3, #16
 80060b8:	e7b0      	b.n	800601c <_printf_i+0xfc>
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	f043 0320 	orr.w	r3, r3, #32
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	2378      	movs	r3, #120	; 0x78
 80060c4:	4828      	ldr	r0, [pc, #160]	; (8006168 <_printf_i+0x248>)
 80060c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060ca:	e7e3      	b.n	8006094 <_printf_i+0x174>
 80060cc:	0659      	lsls	r1, r3, #25
 80060ce:	bf48      	it	mi
 80060d0:	b2b6      	uxthmi	r6, r6
 80060d2:	e7e6      	b.n	80060a2 <_printf_i+0x182>
 80060d4:	4615      	mov	r5, r2
 80060d6:	e7bb      	b.n	8006050 <_printf_i+0x130>
 80060d8:	682b      	ldr	r3, [r5, #0]
 80060da:	6826      	ldr	r6, [r4, #0]
 80060dc:	6961      	ldr	r1, [r4, #20]
 80060de:	1d18      	adds	r0, r3, #4
 80060e0:	6028      	str	r0, [r5, #0]
 80060e2:	0635      	lsls	r5, r6, #24
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	d501      	bpl.n	80060ec <_printf_i+0x1cc>
 80060e8:	6019      	str	r1, [r3, #0]
 80060ea:	e002      	b.n	80060f2 <_printf_i+0x1d2>
 80060ec:	0670      	lsls	r0, r6, #25
 80060ee:	d5fb      	bpl.n	80060e8 <_printf_i+0x1c8>
 80060f0:	8019      	strh	r1, [r3, #0]
 80060f2:	2300      	movs	r3, #0
 80060f4:	6123      	str	r3, [r4, #16]
 80060f6:	4615      	mov	r5, r2
 80060f8:	e7ba      	b.n	8006070 <_printf_i+0x150>
 80060fa:	682b      	ldr	r3, [r5, #0]
 80060fc:	1d1a      	adds	r2, r3, #4
 80060fe:	602a      	str	r2, [r5, #0]
 8006100:	681d      	ldr	r5, [r3, #0]
 8006102:	6862      	ldr	r2, [r4, #4]
 8006104:	2100      	movs	r1, #0
 8006106:	4628      	mov	r0, r5
 8006108:	f7fa f86a 	bl	80001e0 <memchr>
 800610c:	b108      	cbz	r0, 8006112 <_printf_i+0x1f2>
 800610e:	1b40      	subs	r0, r0, r5
 8006110:	6060      	str	r0, [r4, #4]
 8006112:	6863      	ldr	r3, [r4, #4]
 8006114:	6123      	str	r3, [r4, #16]
 8006116:	2300      	movs	r3, #0
 8006118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800611c:	e7a8      	b.n	8006070 <_printf_i+0x150>
 800611e:	6923      	ldr	r3, [r4, #16]
 8006120:	462a      	mov	r2, r5
 8006122:	4649      	mov	r1, r9
 8006124:	4640      	mov	r0, r8
 8006126:	47d0      	blx	sl
 8006128:	3001      	adds	r0, #1
 800612a:	d0ab      	beq.n	8006084 <_printf_i+0x164>
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	079b      	lsls	r3, r3, #30
 8006130:	d413      	bmi.n	800615a <_printf_i+0x23a>
 8006132:	68e0      	ldr	r0, [r4, #12]
 8006134:	9b03      	ldr	r3, [sp, #12]
 8006136:	4298      	cmp	r0, r3
 8006138:	bfb8      	it	lt
 800613a:	4618      	movlt	r0, r3
 800613c:	e7a4      	b.n	8006088 <_printf_i+0x168>
 800613e:	2301      	movs	r3, #1
 8006140:	4632      	mov	r2, r6
 8006142:	4649      	mov	r1, r9
 8006144:	4640      	mov	r0, r8
 8006146:	47d0      	blx	sl
 8006148:	3001      	adds	r0, #1
 800614a:	d09b      	beq.n	8006084 <_printf_i+0x164>
 800614c:	3501      	adds	r5, #1
 800614e:	68e3      	ldr	r3, [r4, #12]
 8006150:	9903      	ldr	r1, [sp, #12]
 8006152:	1a5b      	subs	r3, r3, r1
 8006154:	42ab      	cmp	r3, r5
 8006156:	dcf2      	bgt.n	800613e <_printf_i+0x21e>
 8006158:	e7eb      	b.n	8006132 <_printf_i+0x212>
 800615a:	2500      	movs	r5, #0
 800615c:	f104 0619 	add.w	r6, r4, #25
 8006160:	e7f5      	b.n	800614e <_printf_i+0x22e>
 8006162:	bf00      	nop
 8006164:	08007841 	.word	0x08007841
 8006168:	08007852 	.word	0x08007852

0800616c <memcpy>:
 800616c:	440a      	add	r2, r1
 800616e:	4291      	cmp	r1, r2
 8006170:	f100 33ff 	add.w	r3, r0, #4294967295
 8006174:	d100      	bne.n	8006178 <memcpy+0xc>
 8006176:	4770      	bx	lr
 8006178:	b510      	push	{r4, lr}
 800617a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800617e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006182:	4291      	cmp	r1, r2
 8006184:	d1f9      	bne.n	800617a <memcpy+0xe>
 8006186:	bd10      	pop	{r4, pc}

08006188 <memmove>:
 8006188:	4288      	cmp	r0, r1
 800618a:	b510      	push	{r4, lr}
 800618c:	eb01 0402 	add.w	r4, r1, r2
 8006190:	d902      	bls.n	8006198 <memmove+0x10>
 8006192:	4284      	cmp	r4, r0
 8006194:	4623      	mov	r3, r4
 8006196:	d807      	bhi.n	80061a8 <memmove+0x20>
 8006198:	1e43      	subs	r3, r0, #1
 800619a:	42a1      	cmp	r1, r4
 800619c:	d008      	beq.n	80061b0 <memmove+0x28>
 800619e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061a6:	e7f8      	b.n	800619a <memmove+0x12>
 80061a8:	4402      	add	r2, r0
 80061aa:	4601      	mov	r1, r0
 80061ac:	428a      	cmp	r2, r1
 80061ae:	d100      	bne.n	80061b2 <memmove+0x2a>
 80061b0:	bd10      	pop	{r4, pc}
 80061b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061ba:	e7f7      	b.n	80061ac <memmove+0x24>

080061bc <_free_r>:
 80061bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061be:	2900      	cmp	r1, #0
 80061c0:	d044      	beq.n	800624c <_free_r+0x90>
 80061c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061c6:	9001      	str	r0, [sp, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f1a1 0404 	sub.w	r4, r1, #4
 80061ce:	bfb8      	it	lt
 80061d0:	18e4      	addlt	r4, r4, r3
 80061d2:	f000 f913 	bl	80063fc <__malloc_lock>
 80061d6:	4a1e      	ldr	r2, [pc, #120]	; (8006250 <_free_r+0x94>)
 80061d8:	9801      	ldr	r0, [sp, #4]
 80061da:	6813      	ldr	r3, [r2, #0]
 80061dc:	b933      	cbnz	r3, 80061ec <_free_r+0x30>
 80061de:	6063      	str	r3, [r4, #4]
 80061e0:	6014      	str	r4, [r2, #0]
 80061e2:	b003      	add	sp, #12
 80061e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061e8:	f000 b90e 	b.w	8006408 <__malloc_unlock>
 80061ec:	42a3      	cmp	r3, r4
 80061ee:	d908      	bls.n	8006202 <_free_r+0x46>
 80061f0:	6825      	ldr	r5, [r4, #0]
 80061f2:	1961      	adds	r1, r4, r5
 80061f4:	428b      	cmp	r3, r1
 80061f6:	bf01      	itttt	eq
 80061f8:	6819      	ldreq	r1, [r3, #0]
 80061fa:	685b      	ldreq	r3, [r3, #4]
 80061fc:	1949      	addeq	r1, r1, r5
 80061fe:	6021      	streq	r1, [r4, #0]
 8006200:	e7ed      	b.n	80061de <_free_r+0x22>
 8006202:	461a      	mov	r2, r3
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	b10b      	cbz	r3, 800620c <_free_r+0x50>
 8006208:	42a3      	cmp	r3, r4
 800620a:	d9fa      	bls.n	8006202 <_free_r+0x46>
 800620c:	6811      	ldr	r1, [r2, #0]
 800620e:	1855      	adds	r5, r2, r1
 8006210:	42a5      	cmp	r5, r4
 8006212:	d10b      	bne.n	800622c <_free_r+0x70>
 8006214:	6824      	ldr	r4, [r4, #0]
 8006216:	4421      	add	r1, r4
 8006218:	1854      	adds	r4, r2, r1
 800621a:	42a3      	cmp	r3, r4
 800621c:	6011      	str	r1, [r2, #0]
 800621e:	d1e0      	bne.n	80061e2 <_free_r+0x26>
 8006220:	681c      	ldr	r4, [r3, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	6053      	str	r3, [r2, #4]
 8006226:	4421      	add	r1, r4
 8006228:	6011      	str	r1, [r2, #0]
 800622a:	e7da      	b.n	80061e2 <_free_r+0x26>
 800622c:	d902      	bls.n	8006234 <_free_r+0x78>
 800622e:	230c      	movs	r3, #12
 8006230:	6003      	str	r3, [r0, #0]
 8006232:	e7d6      	b.n	80061e2 <_free_r+0x26>
 8006234:	6825      	ldr	r5, [r4, #0]
 8006236:	1961      	adds	r1, r4, r5
 8006238:	428b      	cmp	r3, r1
 800623a:	bf04      	itt	eq
 800623c:	6819      	ldreq	r1, [r3, #0]
 800623e:	685b      	ldreq	r3, [r3, #4]
 8006240:	6063      	str	r3, [r4, #4]
 8006242:	bf04      	itt	eq
 8006244:	1949      	addeq	r1, r1, r5
 8006246:	6021      	streq	r1, [r4, #0]
 8006248:	6054      	str	r4, [r2, #4]
 800624a:	e7ca      	b.n	80061e2 <_free_r+0x26>
 800624c:	b003      	add	sp, #12
 800624e:	bd30      	pop	{r4, r5, pc}
 8006250:	20000f68 	.word	0x20000f68

08006254 <sbrk_aligned>:
 8006254:	b570      	push	{r4, r5, r6, lr}
 8006256:	4e0e      	ldr	r6, [pc, #56]	; (8006290 <sbrk_aligned+0x3c>)
 8006258:	460c      	mov	r4, r1
 800625a:	6831      	ldr	r1, [r6, #0]
 800625c:	4605      	mov	r5, r0
 800625e:	b911      	cbnz	r1, 8006266 <sbrk_aligned+0x12>
 8006260:	f000 f8bc 	bl	80063dc <_sbrk_r>
 8006264:	6030      	str	r0, [r6, #0]
 8006266:	4621      	mov	r1, r4
 8006268:	4628      	mov	r0, r5
 800626a:	f000 f8b7 	bl	80063dc <_sbrk_r>
 800626e:	1c43      	adds	r3, r0, #1
 8006270:	d00a      	beq.n	8006288 <sbrk_aligned+0x34>
 8006272:	1cc4      	adds	r4, r0, #3
 8006274:	f024 0403 	bic.w	r4, r4, #3
 8006278:	42a0      	cmp	r0, r4
 800627a:	d007      	beq.n	800628c <sbrk_aligned+0x38>
 800627c:	1a21      	subs	r1, r4, r0
 800627e:	4628      	mov	r0, r5
 8006280:	f000 f8ac 	bl	80063dc <_sbrk_r>
 8006284:	3001      	adds	r0, #1
 8006286:	d101      	bne.n	800628c <sbrk_aligned+0x38>
 8006288:	f04f 34ff 	mov.w	r4, #4294967295
 800628c:	4620      	mov	r0, r4
 800628e:	bd70      	pop	{r4, r5, r6, pc}
 8006290:	20000f6c 	.word	0x20000f6c

08006294 <_malloc_r>:
 8006294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006298:	1ccd      	adds	r5, r1, #3
 800629a:	f025 0503 	bic.w	r5, r5, #3
 800629e:	3508      	adds	r5, #8
 80062a0:	2d0c      	cmp	r5, #12
 80062a2:	bf38      	it	cc
 80062a4:	250c      	movcc	r5, #12
 80062a6:	2d00      	cmp	r5, #0
 80062a8:	4607      	mov	r7, r0
 80062aa:	db01      	blt.n	80062b0 <_malloc_r+0x1c>
 80062ac:	42a9      	cmp	r1, r5
 80062ae:	d905      	bls.n	80062bc <_malloc_r+0x28>
 80062b0:	230c      	movs	r3, #12
 80062b2:	603b      	str	r3, [r7, #0]
 80062b4:	2600      	movs	r6, #0
 80062b6:	4630      	mov	r0, r6
 80062b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062bc:	4e2e      	ldr	r6, [pc, #184]	; (8006378 <_malloc_r+0xe4>)
 80062be:	f000 f89d 	bl	80063fc <__malloc_lock>
 80062c2:	6833      	ldr	r3, [r6, #0]
 80062c4:	461c      	mov	r4, r3
 80062c6:	bb34      	cbnz	r4, 8006316 <_malloc_r+0x82>
 80062c8:	4629      	mov	r1, r5
 80062ca:	4638      	mov	r0, r7
 80062cc:	f7ff ffc2 	bl	8006254 <sbrk_aligned>
 80062d0:	1c43      	adds	r3, r0, #1
 80062d2:	4604      	mov	r4, r0
 80062d4:	d14d      	bne.n	8006372 <_malloc_r+0xde>
 80062d6:	6834      	ldr	r4, [r6, #0]
 80062d8:	4626      	mov	r6, r4
 80062da:	2e00      	cmp	r6, #0
 80062dc:	d140      	bne.n	8006360 <_malloc_r+0xcc>
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	4631      	mov	r1, r6
 80062e2:	4638      	mov	r0, r7
 80062e4:	eb04 0803 	add.w	r8, r4, r3
 80062e8:	f000 f878 	bl	80063dc <_sbrk_r>
 80062ec:	4580      	cmp	r8, r0
 80062ee:	d13a      	bne.n	8006366 <_malloc_r+0xd2>
 80062f0:	6821      	ldr	r1, [r4, #0]
 80062f2:	3503      	adds	r5, #3
 80062f4:	1a6d      	subs	r5, r5, r1
 80062f6:	f025 0503 	bic.w	r5, r5, #3
 80062fa:	3508      	adds	r5, #8
 80062fc:	2d0c      	cmp	r5, #12
 80062fe:	bf38      	it	cc
 8006300:	250c      	movcc	r5, #12
 8006302:	4629      	mov	r1, r5
 8006304:	4638      	mov	r0, r7
 8006306:	f7ff ffa5 	bl	8006254 <sbrk_aligned>
 800630a:	3001      	adds	r0, #1
 800630c:	d02b      	beq.n	8006366 <_malloc_r+0xd2>
 800630e:	6823      	ldr	r3, [r4, #0]
 8006310:	442b      	add	r3, r5
 8006312:	6023      	str	r3, [r4, #0]
 8006314:	e00e      	b.n	8006334 <_malloc_r+0xa0>
 8006316:	6822      	ldr	r2, [r4, #0]
 8006318:	1b52      	subs	r2, r2, r5
 800631a:	d41e      	bmi.n	800635a <_malloc_r+0xc6>
 800631c:	2a0b      	cmp	r2, #11
 800631e:	d916      	bls.n	800634e <_malloc_r+0xba>
 8006320:	1961      	adds	r1, r4, r5
 8006322:	42a3      	cmp	r3, r4
 8006324:	6025      	str	r5, [r4, #0]
 8006326:	bf18      	it	ne
 8006328:	6059      	strne	r1, [r3, #4]
 800632a:	6863      	ldr	r3, [r4, #4]
 800632c:	bf08      	it	eq
 800632e:	6031      	streq	r1, [r6, #0]
 8006330:	5162      	str	r2, [r4, r5]
 8006332:	604b      	str	r3, [r1, #4]
 8006334:	4638      	mov	r0, r7
 8006336:	f104 060b 	add.w	r6, r4, #11
 800633a:	f000 f865 	bl	8006408 <__malloc_unlock>
 800633e:	f026 0607 	bic.w	r6, r6, #7
 8006342:	1d23      	adds	r3, r4, #4
 8006344:	1af2      	subs	r2, r6, r3
 8006346:	d0b6      	beq.n	80062b6 <_malloc_r+0x22>
 8006348:	1b9b      	subs	r3, r3, r6
 800634a:	50a3      	str	r3, [r4, r2]
 800634c:	e7b3      	b.n	80062b6 <_malloc_r+0x22>
 800634e:	6862      	ldr	r2, [r4, #4]
 8006350:	42a3      	cmp	r3, r4
 8006352:	bf0c      	ite	eq
 8006354:	6032      	streq	r2, [r6, #0]
 8006356:	605a      	strne	r2, [r3, #4]
 8006358:	e7ec      	b.n	8006334 <_malloc_r+0xa0>
 800635a:	4623      	mov	r3, r4
 800635c:	6864      	ldr	r4, [r4, #4]
 800635e:	e7b2      	b.n	80062c6 <_malloc_r+0x32>
 8006360:	4634      	mov	r4, r6
 8006362:	6876      	ldr	r6, [r6, #4]
 8006364:	e7b9      	b.n	80062da <_malloc_r+0x46>
 8006366:	230c      	movs	r3, #12
 8006368:	603b      	str	r3, [r7, #0]
 800636a:	4638      	mov	r0, r7
 800636c:	f000 f84c 	bl	8006408 <__malloc_unlock>
 8006370:	e7a1      	b.n	80062b6 <_malloc_r+0x22>
 8006372:	6025      	str	r5, [r4, #0]
 8006374:	e7de      	b.n	8006334 <_malloc_r+0xa0>
 8006376:	bf00      	nop
 8006378:	20000f68 	.word	0x20000f68

0800637c <_realloc_r>:
 800637c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006380:	4680      	mov	r8, r0
 8006382:	4614      	mov	r4, r2
 8006384:	460e      	mov	r6, r1
 8006386:	b921      	cbnz	r1, 8006392 <_realloc_r+0x16>
 8006388:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800638c:	4611      	mov	r1, r2
 800638e:	f7ff bf81 	b.w	8006294 <_malloc_r>
 8006392:	b92a      	cbnz	r2, 80063a0 <_realloc_r+0x24>
 8006394:	f7ff ff12 	bl	80061bc <_free_r>
 8006398:	4625      	mov	r5, r4
 800639a:	4628      	mov	r0, r5
 800639c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063a0:	f000 f838 	bl	8006414 <_malloc_usable_size_r>
 80063a4:	4284      	cmp	r4, r0
 80063a6:	4607      	mov	r7, r0
 80063a8:	d802      	bhi.n	80063b0 <_realloc_r+0x34>
 80063aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80063ae:	d812      	bhi.n	80063d6 <_realloc_r+0x5a>
 80063b0:	4621      	mov	r1, r4
 80063b2:	4640      	mov	r0, r8
 80063b4:	f7ff ff6e 	bl	8006294 <_malloc_r>
 80063b8:	4605      	mov	r5, r0
 80063ba:	2800      	cmp	r0, #0
 80063bc:	d0ed      	beq.n	800639a <_realloc_r+0x1e>
 80063be:	42bc      	cmp	r4, r7
 80063c0:	4622      	mov	r2, r4
 80063c2:	4631      	mov	r1, r6
 80063c4:	bf28      	it	cs
 80063c6:	463a      	movcs	r2, r7
 80063c8:	f7ff fed0 	bl	800616c <memcpy>
 80063cc:	4631      	mov	r1, r6
 80063ce:	4640      	mov	r0, r8
 80063d0:	f7ff fef4 	bl	80061bc <_free_r>
 80063d4:	e7e1      	b.n	800639a <_realloc_r+0x1e>
 80063d6:	4635      	mov	r5, r6
 80063d8:	e7df      	b.n	800639a <_realloc_r+0x1e>
	...

080063dc <_sbrk_r>:
 80063dc:	b538      	push	{r3, r4, r5, lr}
 80063de:	4d06      	ldr	r5, [pc, #24]	; (80063f8 <_sbrk_r+0x1c>)
 80063e0:	2300      	movs	r3, #0
 80063e2:	4604      	mov	r4, r0
 80063e4:	4608      	mov	r0, r1
 80063e6:	602b      	str	r3, [r5, #0]
 80063e8:	f7fb f830 	bl	800144c <_sbrk>
 80063ec:	1c43      	adds	r3, r0, #1
 80063ee:	d102      	bne.n	80063f6 <_sbrk_r+0x1a>
 80063f0:	682b      	ldr	r3, [r5, #0]
 80063f2:	b103      	cbz	r3, 80063f6 <_sbrk_r+0x1a>
 80063f4:	6023      	str	r3, [r4, #0]
 80063f6:	bd38      	pop	{r3, r4, r5, pc}
 80063f8:	20000f70 	.word	0x20000f70

080063fc <__malloc_lock>:
 80063fc:	4801      	ldr	r0, [pc, #4]	; (8006404 <__malloc_lock+0x8>)
 80063fe:	f000 b811 	b.w	8006424 <__retarget_lock_acquire_recursive>
 8006402:	bf00      	nop
 8006404:	20000f74 	.word	0x20000f74

08006408 <__malloc_unlock>:
 8006408:	4801      	ldr	r0, [pc, #4]	; (8006410 <__malloc_unlock+0x8>)
 800640a:	f000 b80c 	b.w	8006426 <__retarget_lock_release_recursive>
 800640e:	bf00      	nop
 8006410:	20000f74 	.word	0x20000f74

08006414 <_malloc_usable_size_r>:
 8006414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006418:	1f18      	subs	r0, r3, #4
 800641a:	2b00      	cmp	r3, #0
 800641c:	bfbc      	itt	lt
 800641e:	580b      	ldrlt	r3, [r1, r0]
 8006420:	18c0      	addlt	r0, r0, r3
 8006422:	4770      	bx	lr

08006424 <__retarget_lock_acquire_recursive>:
 8006424:	4770      	bx	lr

08006426 <__retarget_lock_release_recursive>:
 8006426:	4770      	bx	lr

08006428 <sqrtf>:
 8006428:	b508      	push	{r3, lr}
 800642a:	ed2d 8b02 	vpush	{d8}
 800642e:	eeb0 8a40 	vmov.f32	s16, s0
 8006432:	f000 f817 	bl	8006464 <__ieee754_sqrtf>
 8006436:	eeb4 8a48 	vcmp.f32	s16, s16
 800643a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800643e:	d60c      	bvs.n	800645a <sqrtf+0x32>
 8006440:	eddf 8a07 	vldr	s17, [pc, #28]	; 8006460 <sqrtf+0x38>
 8006444:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800644c:	d505      	bpl.n	800645a <sqrtf+0x32>
 800644e:	f7ff fb4b 	bl	8005ae8 <__errno>
 8006452:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006456:	2321      	movs	r3, #33	; 0x21
 8006458:	6003      	str	r3, [r0, #0]
 800645a:	ecbd 8b02 	vpop	{d8}
 800645e:	bd08      	pop	{r3, pc}
 8006460:	00000000 	.word	0x00000000

08006464 <__ieee754_sqrtf>:
 8006464:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006468:	4770      	bx	lr
	...

0800646c <_init>:
 800646c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646e:	bf00      	nop
 8006470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006472:	bc08      	pop	{r3}
 8006474:	469e      	mov	lr, r3
 8006476:	4770      	bx	lr

08006478 <_fini>:
 8006478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800647a:	bf00      	nop
 800647c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800647e:	bc08      	pop	{r3}
 8006480:	469e      	mov	lr, r3
 8006482:	4770      	bx	lr
