
vgaGraphics2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001334  08005370  08005370  00015370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066a4  080066a4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080066a4  080066a4  000166a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066ac  080066ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066ac  080066ac  000166ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066b0  080066b0  000166b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080066b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ff64  20000070  08006724  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ffd4  08006724  0002ffd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fcfb  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d6  00000000  00000000  0002fd9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  00032178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  00032ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170fa  00000000  00000000  00033bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010390  00000000  00000000  0004acb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e010  00000000  00000000  0005b042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9052  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b8c  00000000  00000000  000e90a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005358 	.word	0x08005358

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005358 	.word	0x08005358

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <clearScreen>:
const char cornerBottomLeft = 200;
const char cornerBottomRight = 188;
const char cornerVertical = 186;
const char cornerHorizontal = 205;

void clearScreen(){
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
	for(int i = 0; i < vertRes; i++){
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	e018      	b.n	80005c2 <clearScreen+0x3e>
		for(int j = 0; j < horiRes; j++){
 8000590:	2300      	movs	r3, #0
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	e00e      	b.n	80005b4 <clearScreen+0x30>
			screenBuff[i*horiRes + j] = ColorWhite;
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	4613      	mov	r3, r2
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	4413      	add	r3, r2
 800059e:	019b      	lsls	r3, r3, #6
 80005a0:	461a      	mov	r2, r3
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	4413      	add	r3, r2
 80005a6:	490c      	ldr	r1, [pc, #48]	; (80005d8 <clearScreen+0x54>)
 80005a8:	4a0c      	ldr	r2, [pc, #48]	; (80005dc <clearScreen+0x58>)
 80005aa:	7812      	ldrb	r2, [r2, #0]
 80005ac:	54ca      	strb	r2, [r1, r3]
		for(int j = 0; j < horiRes; j++){
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	3301      	adds	r3, #1
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80005ba:	dbec      	blt.n	8000596 <clearScreen+0x12>
	for(int i = 0; i < vertRes; i++){
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3301      	adds	r3, #1
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2bc7      	cmp	r3, #199	; 0xc7
 80005c6:	dde3      	ble.n	8000590 <clearScreen+0xc>
		}
	}
}
 80005c8:	bf00      	nop
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	2000059c 	.word	0x2000059c
 80005dc:	08006648 	.word	0x08006648

080005e0 <makeBorders>:

void makeBorders(){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af02      	add	r7, sp, #8
	int colums = horiRes / codepage_437.sprite_hori - 1;
 80005e6:	4b49      	ldr	r3, [pc, #292]	; (800070c <makeBorders+0x12c>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	461a      	mov	r2, r3
 80005ec:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80005f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80005f4:	3b01      	subs	r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
	int rows = vertRes / codepage_437.sprite_vert - 1;
 80005f8:	4b44      	ldr	r3, [pc, #272]	; (800070c <makeBorders+0x12c>)
 80005fa:	785b      	ldrb	r3, [r3, #1]
 80005fc:	461a      	mov	r2, r3
 80005fe:	23c8      	movs	r3, #200	; 0xc8
 8000600:	fb93 f3f2 	sdiv	r3, r3, r2
 8000604:	3b01      	subs	r3, #1
 8000606:	603b      	str	r3, [r7, #0]

	renderCharOnGrid(cornerTopLeft, 0, 0, ColorTransparent, ColorRainbow, &codepage_437);
 8000608:	20c9      	movs	r0, #201	; 0xc9
 800060a:	4a41      	ldr	r2, [pc, #260]	; (8000710 <makeBorders+0x130>)
 800060c:	4b3f      	ldr	r3, [pc, #252]	; (800070c <makeBorders+0x12c>)
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	4b40      	ldr	r3, [pc, #256]	; (8000714 <makeBorders+0x134>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	f88d 3000 	strb.w	r3, [sp]
 8000618:	7813      	ldrb	r3, [r2, #0]
 800061a:	2200      	movs	r2, #0
 800061c:	2100      	movs	r1, #0
 800061e:	f000 fae5 	bl	8000bec <renderCharOnGrid>
	renderCharOnGrid(cornerTopRight, colums, 0, ColorTransparent, ColorRainbow, &codepage_437);
 8000622:	20bb      	movs	r0, #187	; 0xbb
 8000624:	4a3a      	ldr	r2, [pc, #232]	; (8000710 <makeBorders+0x130>)
 8000626:	4b39      	ldr	r3, [pc, #228]	; (800070c <makeBorders+0x12c>)
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	4b3a      	ldr	r3, [pc, #232]	; (8000714 <makeBorders+0x134>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	f88d 3000 	strb.w	r3, [sp]
 8000632:	7813      	ldrb	r3, [r2, #0]
 8000634:	2200      	movs	r2, #0
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	f000 fad8 	bl	8000bec <renderCharOnGrid>
	renderCharOnGrid(cornerBottomLeft, 0, rows, ColorTransparent, ColorRainbow, &codepage_437);
 800063c:	20c8      	movs	r0, #200	; 0xc8
 800063e:	4a34      	ldr	r2, [pc, #208]	; (8000710 <makeBorders+0x130>)
 8000640:	4b32      	ldr	r3, [pc, #200]	; (800070c <makeBorders+0x12c>)
 8000642:	9301      	str	r3, [sp, #4]
 8000644:	4b33      	ldr	r3, [pc, #204]	; (8000714 <makeBorders+0x134>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	f88d 3000 	strb.w	r3, [sp]
 800064c:	7813      	ldrb	r3, [r2, #0]
 800064e:	683a      	ldr	r2, [r7, #0]
 8000650:	2100      	movs	r1, #0
 8000652:	f000 facb 	bl	8000bec <renderCharOnGrid>
	renderCharOnGrid(cornerBottomRight, colums, rows, ColorTransparent, ColorRainbow, &codepage_437);
 8000656:	20bc      	movs	r0, #188	; 0xbc
 8000658:	4a2d      	ldr	r2, [pc, #180]	; (8000710 <makeBorders+0x130>)
 800065a:	4b2c      	ldr	r3, [pc, #176]	; (800070c <makeBorders+0x12c>)
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	4b2d      	ldr	r3, [pc, #180]	; (8000714 <makeBorders+0x134>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	f88d 3000 	strb.w	r3, [sp]
 8000666:	7813      	ldrb	r3, [r2, #0]
 8000668:	683a      	ldr	r2, [r7, #0]
 800066a:	6879      	ldr	r1, [r7, #4]
 800066c:	f000 fabe 	bl	8000bec <renderCharOnGrid>
	for(int i = 1; i < colums; i++){
 8000670:	2301      	movs	r3, #1
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	e01c      	b.n	80006b0 <makeBorders+0xd0>
		renderCharOnGrid(cornerHorizontal, i, 0, ColorTransparent, ColorRainbow, &codepage_437);
 8000676:	20cd      	movs	r0, #205	; 0xcd
 8000678:	4a25      	ldr	r2, [pc, #148]	; (8000710 <makeBorders+0x130>)
 800067a:	4b24      	ldr	r3, [pc, #144]	; (800070c <makeBorders+0x12c>)
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	4b25      	ldr	r3, [pc, #148]	; (8000714 <makeBorders+0x134>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	f88d 3000 	strb.w	r3, [sp]
 8000686:	7813      	ldrb	r3, [r2, #0]
 8000688:	2200      	movs	r2, #0
 800068a:	68f9      	ldr	r1, [r7, #12]
 800068c:	f000 faae 	bl	8000bec <renderCharOnGrid>
		renderCharOnGrid(cornerHorizontal, i, rows, ColorTransparent, ColorRainbow, &codepage_437);
 8000690:	20cd      	movs	r0, #205	; 0xcd
 8000692:	4a1f      	ldr	r2, [pc, #124]	; (8000710 <makeBorders+0x130>)
 8000694:	4b1d      	ldr	r3, [pc, #116]	; (800070c <makeBorders+0x12c>)
 8000696:	9301      	str	r3, [sp, #4]
 8000698:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <makeBorders+0x134>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	f88d 3000 	strb.w	r3, [sp]
 80006a0:	7813      	ldrb	r3, [r2, #0]
 80006a2:	683a      	ldr	r2, [r7, #0]
 80006a4:	68f9      	ldr	r1, [r7, #12]
 80006a6:	f000 faa1 	bl	8000bec <renderCharOnGrid>
	for(int i = 1; i < colums; i++){
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	3301      	adds	r3, #1
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	dbde      	blt.n	8000676 <makeBorders+0x96>
	}
	for(int i = 1; i < rows; i++){
 80006b8:	2301      	movs	r3, #1
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	e01c      	b.n	80006f8 <makeBorders+0x118>
		renderCharOnGrid(cornerVertical, 0, i, ColorTransparent, ColorRainbow, &codepage_437);
 80006be:	20ba      	movs	r0, #186	; 0xba
 80006c0:	4a13      	ldr	r2, [pc, #76]	; (8000710 <makeBorders+0x130>)
 80006c2:	4b12      	ldr	r3, [pc, #72]	; (800070c <makeBorders+0x12c>)
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <makeBorders+0x134>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	f88d 3000 	strb.w	r3, [sp]
 80006ce:	7813      	ldrb	r3, [r2, #0]
 80006d0:	68ba      	ldr	r2, [r7, #8]
 80006d2:	2100      	movs	r1, #0
 80006d4:	f000 fa8a 	bl	8000bec <renderCharOnGrid>
		renderCharOnGrid(cornerVertical, colums, i, ColorTransparent, ColorRainbow, &codepage_437);
 80006d8:	20ba      	movs	r0, #186	; 0xba
 80006da:	4a0d      	ldr	r2, [pc, #52]	; (8000710 <makeBorders+0x130>)
 80006dc:	4b0b      	ldr	r3, [pc, #44]	; (800070c <makeBorders+0x12c>)
 80006de:	9301      	str	r3, [sp, #4]
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <makeBorders+0x134>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	f88d 3000 	strb.w	r3, [sp]
 80006e8:	7813      	ldrb	r3, [r2, #0]
 80006ea:	68ba      	ldr	r2, [r7, #8]
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	f000 fa7d 	bl	8000bec <renderCharOnGrid>
	for(int i = 1; i < rows; i++){
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	3301      	adds	r3, #1
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68ba      	ldr	r2, [r7, #8]
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	dbde      	blt.n	80006be <makeBorders+0xde>
	}
}
 8000700:	bf00      	nop
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	0800543c 	.word	0x0800543c
 8000710:	08006644 	.word	0x08006644
 8000714:	08006640 	.word	0x08006640

08000718 <runTTY>:

void runTTY(UART_HandleTypeDef * huart){
 8000718:	b580      	push	{r7, lr}
 800071a:	b0a6      	sub	sp, #152	; 0x98
 800071c:	af02      	add	r7, sp, #8
 800071e:	6078      	str	r0, [r7, #4]
	int init = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	char str[81] = { '\0' };
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	224d      	movs	r2, #77	; 0x4d
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f004 f99a 	bl	8004a6c <memset>
	uint16_t str_len = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

	Color background = ColorWhite;
 800073e:	4b7d      	ldr	r3, [pc, #500]	; (8000934 <runTTY+0x21c>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	763b      	strb	r3, [r7, #24]
	Color forground = ColorBlack;
 8000744:	4b7c      	ldr	r3, [pc, #496]	; (8000938 <runTTY+0x220>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	753b      	strb	r3, [r7, #20]

	const int colums = horiRes / codepage_437.sprite_hori - 1;
 800074a:	4b7c      	ldr	r3, [pc, #496]	; (800093c <runTTY+0x224>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	461a      	mov	r2, r3
 8000750:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000754:	fb93 f3f2 	sdiv	r3, r3, r2
 8000758:	3b01      	subs	r3, #1
 800075a:	67bb      	str	r3, [r7, #120]	; 0x78
	const int rows = vertRes / codepage_437.sprite_vert - 1;
 800075c:	4b77      	ldr	r3, [pc, #476]	; (800093c <runTTY+0x224>)
 800075e:	785b      	ldrb	r3, [r3, #1]
 8000760:	461a      	mov	r2, r3
 8000762:	23c8      	movs	r3, #200	; 0xc8
 8000764:	fb93 f3f2 	sdiv	r3, r3, r2
 8000768:	3b01      	subs	r3, #1
 800076a:	677b      	str	r3, [r7, #116]	; 0x74

	int h = 1, v = 1;
 800076c:	2301      	movs	r3, #1
 800076e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000772:	2301      	movs	r3, #1
 8000774:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	char toPrint;

	char rainbowModeTrigger[] = "rainbow";
 8000778:	4a71      	ldr	r2, [pc, #452]	; (8000940 <runTTY+0x228>)
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000782:	e883 0003 	stmia.w	r3, {r0, r1}
	char *rainbowActivationTracker = rainbowModeTrigger;
 8000786:	f107 0308 	add.w	r3, r7, #8
 800078a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	while(1){
		HAL_StatusTypeDef resStatus = HAL_UART_Receive(huart, (uint8_t*)&toPrint, 1, HAL_MAX_DELAY);
 800078e:	f107 0113 	add.w	r1, r7, #19
 8000792:	f04f 33ff 	mov.w	r3, #4294967295
 8000796:	2201      	movs	r2, #1
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f003 fdb8 	bl	800430e <HAL_UART_Receive>
 800079e:	4603      	mov	r3, r0
 80007a0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		uint16_t charCode = toPrint;
 80007a4:	7cfb      	ldrb	r3, [r7, #19]
 80007a6:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		str_len = sprintf(str, "\r\nRecived byte %c code %u HAL %u\r\n", toPrint, charCode, (uint16_t)resStatus);
 80007aa:	7cfb      	ldrb	r3, [r7, #19]
 80007ac:	4619      	mov	r1, r3
 80007ae:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 80007b2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80007b6:	f107 001c 	add.w	r0, r7, #28
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	4613      	mov	r3, r2
 80007be:	460a      	mov	r2, r1
 80007c0:	4960      	ldr	r1, [pc, #384]	; (8000944 <runTTY+0x22c>)
 80007c2:	f004 f95b 	bl	8004a7c <siprintf>
 80007c6:	4603      	mov	r3, r0
 80007c8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80007cc:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80007d0:	f107 011c 	add.w	r1, r7, #28
 80007d4:	f04f 33ff 	mov.w	r3, #4294967295
 80007d8:	485b      	ldr	r0, [pc, #364]	; (8000948 <runTTY+0x230>)
 80007da:	f003 fd06 	bl	80041ea <HAL_UART_Transmit>

		if(init == 0){//clear the screen and draw the window border
 80007de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d106      	bne.n	80007f4 <runTTY+0xdc>
			init = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			clearScreen();
 80007ec:	f7ff feca 	bl	8000584 <clearScreen>
			makeBorders();
 80007f0:	f7ff fef6 	bl	80005e0 <makeBorders>
		}


		if(toPrint == 13){//newline
 80007f4:	7cfb      	ldrb	r3, [r7, #19]
 80007f6:	2b0d      	cmp	r3, #13
 80007f8:	d108      	bne.n	800080c <runTTY+0xf4>
			v++;
 80007fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80007fe:	3301      	adds	r3, #1
 8000800:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			h = 1;
 8000804:	2301      	movs	r3, #1
 8000806:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800080a:	e03c      	b.n	8000886 <runTTY+0x16e>
		}else if(toPrint == 127){//backspace
 800080c:	7cfb      	ldrb	r3, [r7, #19]
 800080e:	2b7f      	cmp	r3, #127	; 0x7f
 8000810:	d127      	bne.n	8000862 <runTTY+0x14a>
			h--;
 8000812:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000816:	3b01      	subs	r3, #1
 8000818:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			if(h == 0){//beginning of line
 800081c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000820:	2b00      	cmp	r3, #0
 8000822:	d108      	bne.n	8000836 <runTTY+0x11e>
				h = colums - 1;
 8000824:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000826:	3b01      	subs	r3, #1
 8000828:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				v--;
 800082c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000830:	3b01      	subs	r3, #1
 8000832:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			}
			if(v == 0){//beginning of screen
 8000836:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800083a:	2b00      	cmp	r3, #0
 800083c:	d103      	bne.n	8000846 <runTTY+0x12e>
				v = rows - 1;
 800083e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000840:	3b01      	subs	r3, #1
 8000842:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			}
			renderCharOnGrid(' ', h, v, background, forground, &codepage_437);
 8000846:	4b3d      	ldr	r3, [pc, #244]	; (800093c <runTTY+0x224>)
 8000848:	9301      	str	r3, [sp, #4]
 800084a:	7d3b      	ldrb	r3, [r7, #20]
 800084c:	f88d 3000 	strb.w	r3, [sp]
 8000850:	7e3b      	ldrb	r3, [r7, #24]
 8000852:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000856:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800085a:	2020      	movs	r0, #32
 800085c:	f000 f9c6 	bl	8000bec <renderCharOnGrid>
 8000860:	e011      	b.n	8000886 <runTTY+0x16e>
		}else{//print char
			renderCharOnGrid(toPrint, h, v, background, forground, &codepage_437);
 8000862:	7cf8      	ldrb	r0, [r7, #19]
 8000864:	4b35      	ldr	r3, [pc, #212]	; (800093c <runTTY+0x224>)
 8000866:	9301      	str	r3, [sp, #4]
 8000868:	7d3b      	ldrb	r3, [r7, #20]
 800086a:	f88d 3000 	strb.w	r3, [sp]
 800086e:	7e3b      	ldrb	r3, [r7, #24]
 8000870:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000874:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8000878:	f000 f9b8 	bl	8000bec <renderCharOnGrid>
			h++;
 800087c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000880:	3301      	adds	r3, #1
 8000882:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		}
		if(h >= colums){//line wrap
 8000886:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800088a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800088c:	429a      	cmp	r2, r3
 800088e:	db07      	blt.n	80008a0 <runTTY+0x188>
			v++;
 8000890:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000894:	3301      	adds	r3, #1
 8000896:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			h = 1;
 800089a:	2301      	movs	r3, #1
 800089c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		}
		if(v >= rows){//screen wrap
 80008a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80008a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80008a6:	429a      	cmp	r2, r3
 80008a8:	db02      	blt.n	80008b0 <runTTY+0x198>
			v = 1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		}

		if(toPrint == *rainbowActivationTracker){//replace all black text with rainbow text
 80008b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80008b4:	781a      	ldrb	r2, [r3, #0]
 80008b6:	7cfb      	ldrb	r3, [r7, #19]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d136      	bne.n	800092a <runTTY+0x212>
			rainbowActivationTracker++;
 80008bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80008c0:	3301      	adds	r3, #1
 80008c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			str_len = sprintf(str, "\r\nNext activation char %c step %i\r\n", *rainbowActivationTracker, (rainbowActivationTracker - rainbowModeTrigger));
 80008c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	4619      	mov	r1, r3
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80008d6:	1ad3      	subs	r3, r2, r3
 80008d8:	f107 001c 	add.w	r0, r7, #28
 80008dc:	460a      	mov	r2, r1
 80008de:	491b      	ldr	r1, [pc, #108]	; (800094c <runTTY+0x234>)
 80008e0:	f004 f8cc 	bl	8004a7c <siprintf>
 80008e4:	4603      	mov	r3, r0
 80008e6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
			HAL_UART_Transmit(huart, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80008ea:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80008ee:	f107 011c 	add.w	r1, r7, #28
 80008f2:	f04f 33ff 	mov.w	r3, #4294967295
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f003 fc77 	bl	80041ea <HAL_UART_Transmit>
			if(*rainbowActivationTracker == '\0'){
 80008fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b00      	cmp	r3, #0
 8000904:	f47f af43 	bne.w	800078e <runTTY+0x76>
				rainbowActivationTracker = rainbowModeTrigger;
 8000908:	f107 0308 	add.w	r3, r7, #8
 800090c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				if(forground.value == ColorRainbow.value){
 8000910:	7d3a      	ldrb	r2, [r7, #20]
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <runTTY+0x238>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	429a      	cmp	r2, r3
 8000918:	d103      	bne.n	8000922 <runTTY+0x20a>
					forground = ColorBlack;
 800091a:	4b07      	ldr	r3, [pc, #28]	; (8000938 <runTTY+0x220>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	753b      	strb	r3, [r7, #20]
 8000920:	e735      	b.n	800078e <runTTY+0x76>
				}else{
					forground = ColorRainbow;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <runTTY+0x238>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	753b      	strb	r3, [r7, #20]
 8000928:	e731      	b.n	800078e <runTTY+0x76>
				}
			}
		}else{
			rainbowActivationTracker = rainbowModeTrigger;
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	while(1){
 8000932:	e72c      	b.n	800078e <runTTY+0x76>
 8000934:	08006648 	.word	0x08006648
 8000938:	0800664c 	.word	0x0800664c
 800093c:	0800543c 	.word	0x0800543c
 8000940:	080053b8 	.word	0x080053b8
 8000944:	08005370 	.word	0x08005370
 8000948:	2000017c 	.word	0x2000017c
 800094c:	08005394 	.word	0x08005394
 8000950:	08006640 	.word	0x08006640

08000954 <setRGB>:
	c->value = (c->value & 0b11110011) | g;
}
void setBlue(Color * c, char b){
	c->value = (c->value & 0b11111100) | b;
}
void setRGB(Color * c, char r, char g, char b){
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	4608      	mov	r0, r1
 800095e:	4611      	mov	r1, r2
 8000960:	461a      	mov	r2, r3
 8000962:	4603      	mov	r3, r0
 8000964:	70fb      	strb	r3, [r7, #3]
 8000966:	460b      	mov	r3, r1
 8000968:	70bb      	strb	r3, [r7, #2]
 800096a:	4613      	mov	r3, r2
 800096c:	707b      	strb	r3, [r7, #1]
	c->value = r << 4 | g << 2 | b;
 800096e:	78fb      	ldrb	r3, [r7, #3]
 8000970:	011b      	lsls	r3, r3, #4
 8000972:	b25a      	sxtb	r2, r3
 8000974:	78bb      	ldrb	r3, [r7, #2]
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	b25b      	sxtb	r3, r3
 800097a:	4313      	orrs	r3, r2
 800097c:	b25a      	sxtb	r2, r3
 800097e:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000982:	4313      	orrs	r3, r2
 8000984:	b25b      	sxtb	r3, r3
 8000986:	b2da      	uxtb	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	701a      	strb	r2, [r3, #0]
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <getRainbowColor>:

int getBitN(uint32_t n, char * buff){
	return (buff[n/8] >> (n%8)) & 0b1;
}

Color getRainbowColor(int h, int v){
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
	Color c = {(h+v) %64};
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	4413      	add	r3, r2
 80009a8:	425a      	negs	r2, r3
 80009aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80009ae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80009b2:	bf58      	it	pl
 80009b4:	4253      	negpl	r3, r2
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	733b      	strb	r3, [r7, #12]
	return c;
 80009ba:	7b3b      	ldrb	r3, [r7, #12]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <combineColors>:

Color combineColors(Color existing, Color new){
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	7138      	strb	r0, [r7, #4]
 80009d0:	7039      	strb	r1, [r7, #0]
	if((existing.value >> 6) & 1){
 80009d2:	793b      	ldrb	r3, [r7, #4]
 80009d4:	099b      	lsrs	r3, r3, #6
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <combineColors+0x1c>
		return new;//old color is a empty texture use the new color
 80009e0:	783b      	ldrb	r3, [r7, #0]
 80009e2:	e00e      	b.n	8000a02 <combineColors+0x3a>
	}
	switch(new.value>>6){
 80009e4:	783b      	ldrb	r3, [r7, #0]
 80009e6:	099b      	lsrs	r3, r3, #6
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d002      	beq.n	80009f4 <combineColors+0x2c>
 80009ee:	2b03      	cmp	r3, #3
 80009f0:	d002      	beq.n	80009f8 <combineColors+0x30>
 80009f2:	e003      	b.n	80009fc <combineColors+0x34>
	case 0b00: return new;//new color is opaque
 80009f4:	783b      	ldrb	r3, [r7, #0]
 80009f6:	e004      	b.n	8000a02 <combineColors+0x3a>
	case 0b11: return existing;//new color is transparent
 80009f8:	793b      	ldrb	r3, [r7, #4]
 80009fa:	e002      	b.n	8000a02 <combineColors+0x3a>
	case 0b01://new color is partially opaque or a empty texture
	case 0b10://new color is partially transparent
	default:
		{
			Color t;
			t.value = 0b00101010;//purple error not implemented
 80009fc:	232a      	movs	r3, #42	; 0x2a
 80009fe:	733b      	strb	r3, [r7, #12]
			return t;
 8000a00:	7b3b      	ldrb	r3, [r7, #12]
		}
	}
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
	...

08000a10 <renderChar>:

void renderChar(char c, int h, int v, const Color background, const Color forground, const Sprite_map * font){
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b08d      	sub	sp, #52	; 0x34
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60b9      	str	r1, [r7, #8]
 8000a18:	607a      	str	r2, [r7, #4]
 8000a1a:	733b      	strb	r3, [r7, #12]
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	73fb      	strb	r3, [r7, #15]
	if(h < -font->sprite_hori || h >= horiRes
 8000a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	425b      	negs	r3, r3
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	f2c0 80b3 	blt.w	8000b94 <renderChar+0x184>
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000a34:	f280 80ae 	bge.w	8000b94 <renderChar+0x184>
		|| v < -font->sprite_vert || v >= vertRes) return;//sprite is outside visible area
 8000a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a3a:	785b      	ldrb	r3, [r3, #1]
 8000a3c:	425b      	negs	r3, r3
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	f2c0 80a7 	blt.w	8000b94 <renderChar+0x184>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2bc7      	cmp	r3, #199	; 0xc7
 8000a4a:	f300 80a3 	bgt.w	8000b94 <renderChar+0x184>

	const uint8_t * data = font->data;
 8000a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a50:	3304      	adds	r3, #4
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t bitBuffer;
	uint8_t bitsRemaining;
	{
		uint32_t bitOffset = c * font->sprite_hori * font->sprite_vert + font->sprite_hori - 1;// 8 + 2
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000a58:	7812      	ldrb	r2, [r2, #0]
 8000a5a:	fb02 f303 	mul.w	r3, r2, r3
 8000a5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000a60:	7852      	ldrb	r2, [r2, #1]
 8000a62:	fb02 f303 	mul.w	r3, r2, r3
 8000a66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000a68:	7812      	ldrb	r2, [r2, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	61fb      	str	r3, [r7, #28]
		data += bitOffset / 8; // 0b10xx
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	08db      	lsrs	r3, r3, #3
 8000a74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a76:	4413      	add	r3, r2
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
		bitsRemaining = 8 - bitOffset % 8;
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	f1c3 0308 	rsb	r3, r3, #8
 8000a88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		bitBuffer = *data >> (8 - bitsRemaining + 1);
 8000a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000a96:	f1c3 0309 	rsb	r3, r3, #9
 8000a9a:	fa42 f303 	asr.w	r3, r2, r3
 8000a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	}
	for(int vpx = 0; vpx <  font->sprite_vert; vpx++){
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8000aa6:	e06e      	b.n	8000b86 <renderChar+0x176>
		for(int hpx = 0; hpx <  font->sprite_hori; hpx++){
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
 8000aac:	e062      	b.n	8000b74 <renderChar+0x164>
			if(bitsRemaining == 0){//out of pixel data load more
 8000aae:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d109      	bne.n	8000aca <renderChar+0xba>
				bitBuffer = *data;
 8000ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				data++;
 8000abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
				bitsRemaining = 8;
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			}
			if(		!(v + vpx < 0 || v + vpx >= vertRes) &&//row is outside screen
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	4413      	add	r3, r2
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	db42      	blt.n	8000b5a <renderChar+0x14a>
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad8:	4413      	add	r3, r2
 8000ada:	2bc7      	cmp	r3, #199	; 0xc7
 8000adc:	dc3d      	bgt.n	8000b5a <renderChar+0x14a>
					!(h + hpx < 0 || h + hpx >= horiRes)){ //pixel is outside screen
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	6a3b      	ldr	r3, [r7, #32]
 8000ae2:	4413      	add	r3, r2
			if(		!(v + vpx < 0 || v + vpx >= vertRes) &&//row is outside screen
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	db38      	blt.n	8000b5a <renderChar+0x14a>
					!(h + hpx < 0 || h + hpx >= horiRes)){ //pixel is outside screen
 8000ae8:	68ba      	ldr	r2, [r7, #8]
 8000aea:	6a3b      	ldr	r3, [r7, #32]
 8000aec:	4413      	add	r3, r2
 8000aee:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000af2:	da32      	bge.n	8000b5a <renderChar+0x14a>
				uint32_t pos = (v + vpx) * horiRes + h + hpx;
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af8:	441a      	add	r2, r3
 8000afa:	4613      	mov	r3, r2
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	4413      	add	r3, r2
 8000b00:	019b      	lsls	r3, r3, #6
 8000b02:	461a      	mov	r2, r3
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	441a      	add	r2, r3
 8000b08:	6a3b      	ldr	r3, [r7, #32]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	61bb      	str	r3, [r7, #24]
				Color pxColor = bitBuffer&1 ? forground : background;
 8000b0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d003      	beq.n	8000b22 <renderChar+0x112>
 8000b1a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000b1e:	753b      	strb	r3, [r7, #20]
 8000b20:	e001      	b.n	8000b26 <renderChar+0x116>
 8000b22:	7b3b      	ldrb	r3, [r7, #12]
 8000b24:	753b      	strb	r3, [r7, #20]
				if(pxColor.value == ColorRainbow.value){
 8000b26:	7d3b      	ldrb	r3, [r7, #20]
 8000b28:	2280      	movs	r2, #128	; 0x80
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d10a      	bne.n	8000b44 <renderChar+0x134>
					pxColor = getRainbowColor(h + hpx, v + vpx);
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	6a3b      	ldr	r3, [r7, #32]
 8000b32:	18d0      	adds	r0, r2, r3
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b38:	4413      	add	r3, r2
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	f7ff ff2c 	bl	8000998 <getRainbowColor>
 8000b40:	4603      	mov	r3, r0
 8000b42:	753b      	strb	r3, [r7, #20]
				}
				screenBuff[pos] = combineColors(screenBuff[pos], pxColor);
 8000b44:	4a15      	ldr	r2, [pc, #84]	; (8000b9c <renderChar+0x18c>)
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	18d4      	adds	r4, r2, r3
 8000b4a:	4a14      	ldr	r2, [pc, #80]	; (8000b9c <renderChar+0x18c>)
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	4413      	add	r3, r2
 8000b50:	7d39      	ldrb	r1, [r7, #20]
 8000b52:	7818      	ldrb	r0, [r3, #0]
 8000b54:	f7ff ff38 	bl	80009c8 <combineColors>
 8000b58:	7020      	strb	r0, [r4, #0]
			}
			bitsRemaining--;
 8000b5a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			bitBuffer >>= 1;
 8000b64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000b68:	085b      	lsrs	r3, r3, #1
 8000b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		for(int hpx = 0; hpx <  font->sprite_hori; hpx++){
 8000b6e:	6a3b      	ldr	r3, [r7, #32]
 8000b70:	3301      	adds	r3, #1
 8000b72:	623b      	str	r3, [r7, #32]
 8000b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	6a3b      	ldr	r3, [r7, #32]
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	db96      	blt.n	8000aae <renderChar+0x9e>
	for(int vpx = 0; vpx <  font->sprite_vert; vpx++){
 8000b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b82:	3301      	adds	r3, #1
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
 8000b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b88:	785b      	ldrb	r3, [r3, #1]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	db8a      	blt.n	8000aa8 <renderChar+0x98>
 8000b92:	e000      	b.n	8000b96 <renderChar+0x186>
		|| v < -font->sprite_vert || v >= vertRes) return;//sprite is outside visible area
 8000b94:	bf00      	nop
		}
	}
}
 8000b96:	3734      	adds	r7, #52	; 0x34
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd90      	pop	{r4, r7, pc}
 8000b9c:	2000059c 	.word	0x2000059c

08000ba0 <renderString>:

void renderString(char * str, int h, int v, const Color background, const Color forground, const Sprite_map * font){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af02      	add	r7, sp, #8
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
 8000bac:	703b      	strb	r3, [r7, #0]
	while(*str != 0){
 8000bae:	e014      	b.n	8000bda <renderString+0x3a>
		renderChar(*str, h, v, background, forground, font);
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	7818      	ldrb	r0, [r3, #0]
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	9301      	str	r3, [sp, #4]
 8000bb8:	7e3b      	ldrb	r3, [r7, #24]
 8000bba:	f88d 3000 	strb.w	r3, [sp]
 8000bbe:	783b      	ldrb	r3, [r7, #0]
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	68b9      	ldr	r1, [r7, #8]
 8000bc4:	f7ff ff24 	bl	8000a10 <renderChar>
		h += font->sprite_hori;
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	60bb      	str	r3, [r7, #8]
		str++;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
	while(*str != 0){
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d1e6      	bne.n	8000bb0 <renderString+0x10>
	}
}
 8000be2:	bf00      	nop
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <renderCharOnGrid>:


void renderCharOnGrid(char c, int h, int v, const Color background, const Color forground, const Sprite_map * font){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af02      	add	r7, sp, #8
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
 8000bf6:	733b      	strb	r3, [r7, #12]
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	73fb      	strb	r3, [r7, #15]
	renderChar(c, h*font->sprite_hori, v*font->sprite_vert, background, forground, font);
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	fb03 f102 	mul.w	r1, r3, r2
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	785b      	ldrb	r3, [r3, #1]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	fb03 f202 	mul.w	r2, r3, r2
 8000c14:	7bf8      	ldrb	r0, [r7, #15]
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	9301      	str	r3, [sp, #4]
 8000c1a:	7e3b      	ldrb	r3, [r7, #24]
 8000c1c:	f88d 3000 	strb.w	r3, [sp]
 8000c20:	7b3b      	ldrb	r3, [r7, #12]
 8000c22:	f7ff fef5 	bl	8000a10 <renderChar>
}
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <HAL_TIM_PeriodElapsedCallback>:
	HAL_UART_Transmit(&huart2, (uint8_t*) str, sizeof(str), HAL_MAX_DELAY);
}

int lastLine = -100;
uint32_t profileCount = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	if(htim == &htim5){
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a0f      	ldr	r2, [pc, #60]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d116      	bne.n	8000c6e <HAL_TIM_PeriodElapsedCallback+0x3e>
		str_len = sprintf(str, "Profile %8lu ticks clock\t line %i\r\n", profileCount, lineCount);
 8000c40:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	490e      	ldr	r1, [pc, #56]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000c4a:	480f      	ldr	r0, [pc, #60]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000c4c:	f003 ff16 	bl	8004a7c <siprintf>
 8000c50:	4603      	mov	r3, r0
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000c56:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000c5a:	881a      	ldrh	r2, [r3, #0]
 8000c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c60:	4909      	ldr	r1, [pc, #36]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000c62:	480b      	ldr	r0, [pc, #44]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000c64:	f003 fac1 	bl	80041ea <HAL_UART_Transmit>
		profileCount = 0;
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
	}
	return;
 8000c6e:	bf00      	nop
	if(htim == &htim5){
		timerReset();
	}else if(htim == &htim1){
		timerReset();
	}
}
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200000d4 	.word	0x200000d4
 8000c7c:	20000274 	.word	0x20000274
 8000c80:	2000ffb0 	.word	0x2000ffb0
 8000c84:	080053d0 	.word	0x080053d0
 8000c88:	20000220 	.word	0x20000220
 8000c8c:	20000272 	.word	0x20000272
 8000c90:	2000017c 	.word	0x2000017c

08000c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b0a4      	sub	sp, #144	; 0x90
 8000c98:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c9a:	f000 ff05 	bl	8001aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9e:	f000 f983 	bl	8000fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca2:	f000 fb5b 	bl	800135c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ca6:	f000 fb01 	bl	80012ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000caa:	f000 fad5 	bl	8001258 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8000cae:	f000 fa85 	bl	80011bc <MX_TIM5_Init>
  MX_TIM1_Init();
 8000cb2:	f000 f9e3 	bl	800107c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	char str[81] = { '\0' };
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	f107 0310 	add.w	r3, r7, #16
 8000cbe:	224d      	movs	r2, #77	; 0x4d
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f003 fed2 	bl	8004a6c <memset>
	uint16_t str_len = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	str_len = sprintf(str, "Starting up!\r\n");
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	49a8      	ldr	r1, [pc, #672]	; (8000f74 <main+0x2e0>)
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f003 fed1 	bl	8004a7c <siprintf>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8000ce0:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8000ce4:	f107 010c 	add.w	r1, r7, #12
 8000ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cec:	48a2      	ldr	r0, [pc, #648]	; (8000f78 <main+0x2e4>)
 8000cee:	f003 fa7c 	bl	80041ea <HAL_UART_Transmit>

	vgaSetup(&htim1, &hdma_tim1_up, &hdma_memtomem_dma2_stream0, vgaPin13_Vsync_GPIO_Port, vgaPin13_Vsync_Pin);
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	9300      	str	r3, [sp, #0]
 8000cf6:	4ba1      	ldr	r3, [pc, #644]	; (8000f7c <main+0x2e8>)
 8000cf8:	4aa1      	ldr	r2, [pc, #644]	; (8000f80 <main+0x2ec>)
 8000cfa:	49a2      	ldr	r1, [pc, #648]	; (8000f84 <main+0x2f0>)
 8000cfc:	48a2      	ldr	r0, [pc, #648]	; (8000f88 <main+0x2f4>)
 8000cfe:	f000 fe03 	bl	8001908 <vgaSetup>
	registerHUARTvga(&huart2);
 8000d02:	489d      	ldr	r0, [pc, #628]	; (8000f78 <main+0x2e4>)
 8000d04:	f000 fd6e 	bl	80017e4 <registerHUARTvga>

	vgaStart();//start VGA driver
 8000d08:	f000 fe64 	bl	80019d4 <vgaStart>
	HAL_Delay(5000);//delay rendering for monitor sync
 8000d0c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d10:	f000 ff3c 	bl	8001b8c <HAL_Delay>

	for(int i = 0; i < vertRes; i++){//load a rainbow test pattern
 8000d14:	2300      	movs	r3, #0
 8000d16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000d1a:	e03d      	b.n	8000d98 <main+0x104>
		for(int j = 0; j < horiRes; j++){
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000d22:	e011      	b.n	8000d48 <main+0xb4>
			screenBuff[i*horiRes + j].value = 0b00111111;
 8000d24:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000d28:	4613      	mov	r3, r2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4413      	add	r3, r2
 8000d2e:	019b      	lsls	r3, r3, #6
 8000d30:	461a      	mov	r2, r3
 8000d32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d36:	4413      	add	r3, r2
 8000d38:	4a94      	ldr	r2, [pc, #592]	; (8000f8c <main+0x2f8>)
 8000d3a:	213f      	movs	r1, #63	; 0x3f
 8000d3c:	54d1      	strb	r1, [r2, r3]
		for(int j = 0; j < horiRes; j++){
 8000d3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d42:	3301      	adds	r3, #1
 8000d44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000d48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d4c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000d50:	dbe8      	blt.n	8000d24 <main+0x90>
			//screenBuff[i*vertRes + j].value = j & 0b111111;
		}
		for(int j = 0; j<64;j++){
 8000d52:	2300      	movs	r3, #0
 8000d54:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000d56:	e017      	b.n	8000d88 <main+0xf4>
			screenBuff[i*horiRes + 8 + j].value = 0b00000000 + j%64;// + ((j%4)<<2) + ((j%4)<<4);
 8000d58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d5a:	4259      	negs	r1, r3
 8000d5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000d60:	f001 033f 	and.w	r3, r1, #63	; 0x3f
 8000d64:	bf58      	it	pl
 8000d66:	425a      	negpl	r2, r3
 8000d68:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	440b      	add	r3, r1
 8000d72:	019b      	lsls	r3, r3, #6
 8000d74:	f103 0108 	add.w	r1, r3, #8
 8000d78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d7a:	440b      	add	r3, r1
 8000d7c:	b2d1      	uxtb	r1, r2
 8000d7e:	4a83      	ldr	r2, [pc, #524]	; (8000f8c <main+0x2f8>)
 8000d80:	54d1      	strb	r1, [r2, r3]
		for(int j = 0; j<64;j++){
 8000d82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d84:	3301      	adds	r3, #1
 8000d86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000d88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d8a:	2b3f      	cmp	r3, #63	; 0x3f
 8000d8c:	dde4      	ble.n	8000d58 <main+0xc4>
	for(int i = 0; i < vertRes; i++){//load a rainbow test pattern
 8000d8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d92:	3301      	adds	r3, #1
 8000d94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000d98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d9c:	2bc7      	cmp	r3, #199	; 0xc7
 8000d9e:	ddbd      	ble.n	8000d1c <main+0x88>
		}
	}

	//Write test text
	Color black;
	setRGB(&black, 00, 00, 00);
 8000da0:	f107 0008 	add.w	r0, r7, #8
 8000da4:	2300      	movs	r3, #0
 8000da6:	2200      	movs	r2, #0
 8000da8:	2100      	movs	r1, #0
 8000daa:	f7ff fdd3 	bl	8000954 <setRGB>
	Color transparant;
	transparant.value = 0b11000000;
 8000dae:	23c0      	movs	r3, #192	; 0xc0
 8000db0:	713b      	strb	r3, [r7, #4]
	//vgaUpscale;
	int h = 10, w = 30, x = 64+8+8, y = 10;
 8000db2:	230a      	movs	r3, #10
 8000db4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000db6:	231e      	movs	r3, #30
 8000db8:	66bb      	str	r3, [r7, #104]	; 0x68
 8000dba:	2350      	movs	r3, #80	; 0x50
 8000dbc:	667b      	str	r3, [r7, #100]	; 0x64
 8000dbe:	230a      	movs	r3, #10
 8000dc0:	663b      	str	r3, [r7, #96]	; 0x60
	for(int i = y; i < vertRes && i < y+h; i++){//render a black rectangle
 8000dc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000dc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8000dc6:	e01d      	b.n	8000e04 <main+0x170>
		for(int j = x; j < horiRes && j < x+w; j++){
 8000dc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000dca:	677b      	str	r3, [r7, #116]	; 0x74
 8000dcc:	e00d      	b.n	8000dea <main+0x156>
			screenBuff[i*horiRes + j] = black;
 8000dce:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4413      	add	r3, r2
 8000dd6:	019b      	lsls	r3, r3, #6
 8000dd8:	461a      	mov	r2, r3
 8000dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ddc:	4413      	add	r3, r2
 8000dde:	496b      	ldr	r1, [pc, #428]	; (8000f8c <main+0x2f8>)
 8000de0:	7a3a      	ldrb	r2, [r7, #8]
 8000de2:	54ca      	strb	r2, [r1, r3]
		for(int j = x; j < horiRes && j < x+w; j++){
 8000de4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000de6:	3301      	adds	r3, #1
 8000de8:	677b      	str	r3, [r7, #116]	; 0x74
 8000dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000dec:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000df0:	da05      	bge.n	8000dfe <main+0x16a>
 8000df2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000df4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000df6:	4413      	add	r3, r2
 8000df8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbe7      	blt.n	8000dce <main+0x13a>
	for(int i = y; i < vertRes && i < y+h; i++){//render a black rectangle
 8000dfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000e00:	3301      	adds	r3, #1
 8000e02:	67bb      	str	r3, [r7, #120]	; 0x78
 8000e04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000e06:	2bc7      	cmp	r3, #199	; 0xc7
 8000e08:	dc05      	bgt.n	8000e16 <main+0x182>
 8000e0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e0e:	4413      	add	r3, r2
 8000e10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000e12:	429a      	cmp	r2, r3
 8000e14:	dbd8      	blt.n	8000dc8 <main+0x134>
		}
	}
	y+=codepage_437.sprite_vert;
 8000e16:	4b5e      	ldr	r3, [pc, #376]	; (8000f90 <main+0x2fc>)
 8000e18:	785b      	ldrb	r3, [r3, #1]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e1e:	4413      	add	r3, r2
 8000e20:	663b      	str	r3, [r7, #96]	; 0x60
	//renderString(str, h, v, background, forground)
	renderString("Hi", x, y, transparant, black, &codepage_437);
 8000e22:	4b5b      	ldr	r3, [pc, #364]	; (8000f90 <main+0x2fc>)
 8000e24:	9301      	str	r3, [sp, #4]
 8000e26:	7a3b      	ldrb	r3, [r7, #8]
 8000e28:	f88d 3000 	strb.w	r3, [sp]
 8000e2c:	793b      	ldrb	r3, [r7, #4]
 8000e2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e30:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000e32:	4858      	ldr	r0, [pc, #352]	; (8000f94 <main+0x300>)
 8000e34:	f7ff feb4 	bl	8000ba0 <renderString>

	y+=codepage_437.sprite_vert;
 8000e38:	4b55      	ldr	r3, [pc, #340]	; (8000f90 <main+0x2fc>)
 8000e3a:	785b      	ldrb	r3, [r3, #1]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e40:	4413      	add	r3, r2
 8000e42:	663b      	str	r3, [r7, #96]	; 0x60
	renderString("Hello world!", x, y, transparant, black, &codepage_437);
 8000e44:	4b52      	ldr	r3, [pc, #328]	; (8000f90 <main+0x2fc>)
 8000e46:	9301      	str	r3, [sp, #4]
 8000e48:	7a3b      	ldrb	r3, [r7, #8]
 8000e4a:	f88d 3000 	strb.w	r3, [sp]
 8000e4e:	793b      	ldrb	r3, [r7, #4]
 8000e50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e52:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000e54:	4850      	ldr	r0, [pc, #320]	; (8000f98 <main+0x304>)
 8000e56:	f7ff fea3 	bl	8000ba0 <renderString>
	y+=codepage_437.sprite_vert;
 8000e5a:	4b4d      	ldr	r3, [pc, #308]	; (8000f90 <main+0x2fc>)
 8000e5c:	785b      	ldrb	r3, [r3, #1]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e62:	4413      	add	r3, r2
 8000e64:	663b      	str	r3, [r7, #96]	; 0x60
	renderString("Press <any> key for TTY", x, y, transparant, black, &codepage_437);
 8000e66:	4b4a      	ldr	r3, [pc, #296]	; (8000f90 <main+0x2fc>)
 8000e68:	9301      	str	r3, [sp, #4]
 8000e6a:	7a3b      	ldrb	r3, [r7, #8]
 8000e6c:	f88d 3000 	strb.w	r3, [sp]
 8000e70:	793b      	ldrb	r3, [r7, #4]
 8000e72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e74:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000e76:	4849      	ldr	r0, [pc, #292]	; (8000f9c <main+0x308>)
 8000e78:	f7ff fe92 	bl	8000ba0 <renderString>
	y+=codepage_437.sprite_vert;
 8000e7c:	4b44      	ldr	r3, [pc, #272]	; (8000f90 <main+0x2fc>)
 8000e7e:	785b      	ldrb	r3, [r3, #1]
 8000e80:	461a      	mov	r2, r3
 8000e82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e84:	4413      	add	r3, r2
 8000e86:	663b      	str	r3, [r7, #96]	; 0x60
	renderChar(177, x, y, transparant, black, &codepage_437);
 8000e88:	4b41      	ldr	r3, [pc, #260]	; (8000f90 <main+0x2fc>)
 8000e8a:	9301      	str	r3, [sp, #4]
 8000e8c:	7a3b      	ldrb	r3, [r7, #8]
 8000e8e:	f88d 3000 	strb.w	r3, [sp]
 8000e92:	793b      	ldrb	r3, [r7, #4]
 8000e94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e96:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000e98:	20b1      	movs	r0, #177	; 0xb1
 8000e9a:	f7ff fdb9 	bl	8000a10 <renderChar>

	y+=codepage_437.sprite_vert;//test patterns
 8000e9e:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <main+0x2fc>)
 8000ea0:	785b      	ldrb	r3, [r3, #1]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ea6:	4413      	add	r3, r2
 8000ea8:	663b      	str	r3, [r7, #96]	; 0x60
	renderChar(201, x, y, transparant, black, &codepage_437);
 8000eaa:	4b39      	ldr	r3, [pc, #228]	; (8000f90 <main+0x2fc>)
 8000eac:	9301      	str	r3, [sp, #4]
 8000eae:	7a3b      	ldrb	r3, [r7, #8]
 8000eb0:	f88d 3000 	strb.w	r3, [sp]
 8000eb4:	793b      	ldrb	r3, [r7, #4]
 8000eb6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000eb8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000eba:	20c9      	movs	r0, #201	; 0xc9
 8000ebc:	f7ff fda8 	bl	8000a10 <renderChar>
	renderChar(187, x + codepage_437.sprite_hori, y, transparant, black, &codepage_437);
 8000ec0:	4b33      	ldr	r3, [pc, #204]	; (8000f90 <main+0x2fc>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ec8:	18d1      	adds	r1, r2, r3
 8000eca:	4b31      	ldr	r3, [pc, #196]	; (8000f90 <main+0x2fc>)
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	7a3b      	ldrb	r3, [r7, #8]
 8000ed0:	f88d 3000 	strb.w	r3, [sp]
 8000ed4:	793b      	ldrb	r3, [r7, #4]
 8000ed6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ed8:	20bb      	movs	r0, #187	; 0xbb
 8000eda:	f7ff fd99 	bl	8000a10 <renderChar>
	renderChar(186, x + 2*codepage_437.sprite_hori, y, transparant, black, &codepage_437);
 8000ede:	4b2c      	ldr	r3, [pc, #176]	; (8000f90 <main+0x2fc>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	005a      	lsls	r2, r3, #1
 8000ee4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ee6:	18d1      	adds	r1, r2, r3
 8000ee8:	4b29      	ldr	r3, [pc, #164]	; (8000f90 <main+0x2fc>)
 8000eea:	9301      	str	r3, [sp, #4]
 8000eec:	7a3b      	ldrb	r3, [r7, #8]
 8000eee:	f88d 3000 	strb.w	r3, [sp]
 8000ef2:	793b      	ldrb	r3, [r7, #4]
 8000ef4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ef6:	20ba      	movs	r0, #186	; 0xba
 8000ef8:	f7ff fd8a 	bl	8000a10 <renderChar>
	y+=codepage_437.sprite_vert;
 8000efc:	4b24      	ldr	r3, [pc, #144]	; (8000f90 <main+0x2fc>)
 8000efe:	785b      	ldrb	r3, [r3, #1]
 8000f00:	461a      	mov	r2, r3
 8000f02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f04:	4413      	add	r3, r2
 8000f06:	663b      	str	r3, [r7, #96]	; 0x60
	renderChar(200, x, y, transparant, black, &codepage_437);
 8000f08:	4b21      	ldr	r3, [pc, #132]	; (8000f90 <main+0x2fc>)
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	7a3b      	ldrb	r3, [r7, #8]
 8000f0e:	f88d 3000 	strb.w	r3, [sp]
 8000f12:	793b      	ldrb	r3, [r7, #4]
 8000f14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f16:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000f18:	20c8      	movs	r0, #200	; 0xc8
 8000f1a:	f7ff fd79 	bl	8000a10 <renderChar>
	renderChar(188, x + codepage_437.sprite_hori, y, transparant, black, &codepage_437);
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <main+0x2fc>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	461a      	mov	r2, r3
 8000f24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f26:	18d1      	adds	r1, r2, r3
 8000f28:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <main+0x2fc>)
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	7a3b      	ldrb	r3, [r7, #8]
 8000f2e:	f88d 3000 	strb.w	r3, [sp]
 8000f32:	793b      	ldrb	r3, [r7, #4]
 8000f34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f36:	20bc      	movs	r0, #188	; 0xbc
 8000f38:	f7ff fd6a 	bl	8000a10 <renderChar>

	str_len = sprintf(str, "\r\nDone\r\n");
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	4917      	ldr	r1, [pc, #92]	; (8000fa0 <main+0x30c>)
 8000f42:	4618      	mov	r0, r3
 8000f44:	f003 fd9a 	bl	8004a7c <siprintf>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8000f4e:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8000f52:	f107 010c 	add.w	r1, r7, #12
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5a:	4807      	ldr	r0, [pc, #28]	; (8000f78 <main+0x2e4>)
 8000f5c:	f003 f945 	bl	80041ea <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	runTTY(&huart2);
 8000f60:	4805      	ldr	r0, [pc, #20]	; (8000f78 <main+0x2e4>)
 8000f62:	f7ff fbd9 	bl	8000718 <runTTY>
	while (1)
	{
		profileCount++;
 8000f66:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <main+0x310>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	; (8000fa4 <main+0x310>)
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	e7f9      	b.n	8000f66 <main+0x2d2>
 8000f72:	bf00      	nop
 8000f74:	080053f4 	.word	0x080053f4
 8000f78:	2000017c 	.word	0x2000017c
 8000f7c:	40020000 	.word	0x40020000
 8000f80:	200001c0 	.word	0x200001c0
 8000f84:	2000011c 	.word	0x2000011c
 8000f88:	2000008c 	.word	0x2000008c
 8000f8c:	2000059c 	.word	0x2000059c
 8000f90:	0800543c 	.word	0x0800543c
 8000f94:	08005404 	.word	0x08005404
 8000f98:	08005408 	.word	0x08005408
 8000f9c:	08005418 	.word	0x08005418
 8000fa0:	08005430 	.word	0x08005430
 8000fa4:	20000274 	.word	0x20000274

08000fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b094      	sub	sp, #80	; 0x50
 8000fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	f107 0320 	add.w	r3, r7, #32
 8000fb2:	2230      	movs	r2, #48	; 0x30
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f003 fd58 	bl	8004a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	4b28      	ldr	r3, [pc, #160]	; (8001074 <SystemClock_Config+0xcc>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	4a27      	ldr	r2, [pc, #156]	; (8001074 <SystemClock_Config+0xcc>)
 8000fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fda:	6413      	str	r3, [r2, #64]	; 0x40
 8000fdc:	4b25      	ldr	r3, [pc, #148]	; (8001074 <SystemClock_Config+0xcc>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	4b22      	ldr	r3, [pc, #136]	; (8001078 <SystemClock_Config+0xd0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ff4:	4a20      	ldr	r2, [pc, #128]	; (8001078 <SystemClock_Config+0xd0>)
 8000ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <SystemClock_Config+0xd0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001008:	2302      	movs	r3, #2
 800100a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800100c:	2301      	movs	r3, #1
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001010:	2310      	movs	r3, #16
 8001012:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001014:	2302      	movs	r3, #2
 8001016:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001018:	2300      	movs	r3, #0
 800101a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800101c:	2308      	movs	r3, #8
 800101e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 151;
 8001020:	2397      	movs	r3, #151	; 0x97
 8001022:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001024:	2304      	movs	r3, #4
 8001026:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001028:	2307      	movs	r3, #7
 800102a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102c:	f107 0320 	add.w	r3, r7, #32
 8001030:	4618      	mov	r0, r3
 8001032:	f001 fc43 	bl	80028bc <HAL_RCC_OscConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800103c:	f000 fa20 	bl	8001480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001040:	230f      	movs	r3, #15
 8001042:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001044:	2302      	movs	r3, #2
 8001046:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800104c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001050:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	2102      	movs	r1, #2
 800105c:	4618      	mov	r0, r3
 800105e:	f001 fea5 	bl	8002dac <HAL_RCC_ClockConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001068:	f000 fa0a 	bl	8001480 <Error_Handler>
  }
}
 800106c:	bf00      	nop
 800106e:	3750      	adds	r7, #80	; 0x50
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40023800 	.word	0x40023800
 8001078:	40007000 	.word	0x40007000

0800107c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b096      	sub	sp, #88	; 0x58
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001082:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001090:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800109a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]
 80010aa:	615a      	str	r2, [r3, #20]
 80010ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2220      	movs	r2, #32
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f003 fcd9 	bl	8004a6c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010ba:	4b3e      	ldr	r3, [pc, #248]	; (80011b4 <MX_TIM1_Init+0x138>)
 80010bc:	4a3e      	ldr	r2, [pc, #248]	; (80011b8 <MX_TIM1_Init+0x13c>)
 80010be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = vgaUpscale-1;
 80010c0:	4b3c      	ldr	r3, [pc, #240]	; (80011b4 <MX_TIM1_Init+0x138>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c6:	4b3b      	ldr	r3, [pc, #236]	; (80011b4 <MX_TIM1_Init+0x138>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3-1;
 80010cc:	4b39      	ldr	r3, [pc, #228]	; (80011b4 <MX_TIM1_Init+0x138>)
 80010ce:	2202      	movs	r2, #2
 80010d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d2:	4b38      	ldr	r3, [pc, #224]	; (80011b4 <MX_TIM1_Init+0x138>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010d8:	4b36      	ldr	r3, [pc, #216]	; (80011b4 <MX_TIM1_Init+0x138>)
 80010da:	2200      	movs	r2, #0
 80010dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010de:	4b35      	ldr	r3, [pc, #212]	; (80011b4 <MX_TIM1_Init+0x138>)
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010e4:	4833      	ldr	r0, [pc, #204]	; (80011b4 <MX_TIM1_Init+0x138>)
 80010e6:	f002 f881 	bl	80031ec <HAL_TIM_Base_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80010f0:	f000 f9c6 	bl	8001480 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010fe:	4619      	mov	r1, r3
 8001100:	482c      	ldr	r0, [pc, #176]	; (80011b4 <MX_TIM1_Init+0x138>)
 8001102:	f002 fb95 	bl	8003830 <HAL_TIM_ConfigClockSource>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800110c:	f000 f9b8 	bl	8001480 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001110:	4828      	ldr	r0, [pc, #160]	; (80011b4 <MX_TIM1_Init+0x138>)
 8001112:	f002 f8ba 	bl	800328a <HAL_TIM_PWM_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800111c:	f000 f9b0 	bl	8001480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001120:	2300      	movs	r3, #0
 8001122:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001128:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800112c:	4619      	mov	r1, r3
 800112e:	4821      	ldr	r0, [pc, #132]	; (80011b4 <MX_TIM1_Init+0x138>)
 8001130:	f002 ff3a 	bl	8003fa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800113a:	f000 f9a1 	bl	8001480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800113e:	2360      	movs	r3, #96	; 0x60
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 8001142:	2302      	movs	r3, #2
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001146:	2300      	movs	r3, #0
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800114a:	2300      	movs	r3, #0
 800114c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001152:	2300      	movs	r3, #0
 8001154:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001156:	2300      	movs	r3, #0
 8001158:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800115a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115e:	2200      	movs	r2, #0
 8001160:	4619      	mov	r1, r3
 8001162:	4814      	ldr	r0, [pc, #80]	; (80011b4 <MX_TIM1_Init+0x138>)
 8001164:	f002 faa2 	bl	80036ac <HAL_TIM_PWM_ConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800116e:	f000 f987 	bl	8001480 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001186:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800118a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	4619      	mov	r1, r3
 8001194:	4807      	ldr	r0, [pc, #28]	; (80011b4 <MX_TIM1_Init+0x138>)
 8001196:	f002 ff75 	bl	8004084 <HAL_TIMEx_ConfigBreakDeadTime>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80011a0:	f000 f96e 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011a4:	4803      	ldr	r0, [pc, #12]	; (80011b4 <MX_TIM1_Init+0x138>)
 80011a6:	f000 fa15 	bl	80015d4 <HAL_TIM_MspPostInit>

}
 80011aa:	bf00      	nop
 80011ac:	3758      	adds	r7, #88	; 0x58
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2000008c 	.word	0x2000008c
 80011b8:	40010000 	.word	0x40010000

080011bc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d0:	463b      	mov	r3, r7
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011d8:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <MX_TIM5_Init+0x94>)
 80011da:	4a1e      	ldr	r2, [pc, #120]	; (8001254 <MX_TIM5_Init+0x98>)
 80011dc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 7550-1;
 80011de:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <MX_TIM5_Init+0x94>)
 80011e0:	f641 527d 	movw	r2, #7549	; 0x1d7d
 80011e4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e6:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <MX_TIM5_Init+0x94>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 80011ec:	4b18      	ldr	r3, [pc, #96]	; (8001250 <MX_TIM5_Init+0x94>)
 80011ee:	f242 720f 	movw	r2, #9999	; 0x270f
 80011f2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <MX_TIM5_Init+0x94>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <MX_TIM5_Init+0x94>)
 80011fc:	2280      	movs	r2, #128	; 0x80
 80011fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001200:	4813      	ldr	r0, [pc, #76]	; (8001250 <MX_TIM5_Init+0x94>)
 8001202:	f001 fff3 	bl	80031ec <HAL_TIM_Base_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800120c:	f000 f938 	bl	8001480 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001214:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	4619      	mov	r1, r3
 800121c:	480c      	ldr	r0, [pc, #48]	; (8001250 <MX_TIM5_Init+0x94>)
 800121e:	f002 fb07 	bl	8003830 <HAL_TIM_ConfigClockSource>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001228:	f000 f92a 	bl	8001480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122c:	2300      	movs	r3, #0
 800122e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001234:	463b      	mov	r3, r7
 8001236:	4619      	mov	r1, r3
 8001238:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_TIM5_Init+0x94>)
 800123a:	f002 feb5 	bl	8003fa8 <HAL_TIMEx_MasterConfigSynchronization>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001244:	f000 f91c 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200000d4 	.word	0x200000d4
 8001254:	40000c00 	.word	0x40000c00

08001258 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 800125e:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <MX_USART2_UART_Init+0x50>)
 8001260:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001264:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001268:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 800127e:	220c      	movs	r2, #12
 8001280:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001290:	f002 ff5e 	bl	8004150 <HAL_UART_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800129a:	f000 f8f1 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	2000017c 	.word	0x2000017c
 80012a8:	40004400 	.word	0x40004400

080012ac <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	4b26      	ldr	r3, [pc, #152]	; (8001350 <MX_DMA_Init+0xa4>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a25      	ldr	r2, [pc, #148]	; (8001350 <MX_DMA_Init+0xa4>)
 80012bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b23      	ldr	r3, [pc, #140]	; (8001350 <MX_DMA_Init+0xa4>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 80012ce:	4b21      	ldr	r3, [pc, #132]	; (8001354 <MX_DMA_Init+0xa8>)
 80012d0:	4a21      	ldr	r2, [pc, #132]	; (8001358 <MX_DMA_Init+0xac>)
 80012d2:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 80012d4:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <MX_DMA_Init+0xa8>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80012da:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <MX_DMA_Init+0xa8>)
 80012dc:	2280      	movs	r2, #128	; 0x80
 80012de:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 80012e0:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <MX_DMA_Init+0xa8>)
 80012e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e6:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 80012e8:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <MX_DMA_Init+0xa8>)
 80012ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ee:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <MX_DMA_Init+0xa8>)
 80012f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012f6:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <MX_DMA_Init+0xa8>)
 80012fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012fe:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8001300:	4b14      	ldr	r3, [pc, #80]	; (8001354 <MX_DMA_Init+0xa8>)
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <MX_DMA_Init+0xa8>)
 8001308:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800130c:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <MX_DMA_Init+0xa8>)
 8001310:	2204      	movs	r2, #4
 8001312:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8001314:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <MX_DMA_Init+0xa8>)
 8001316:	2201      	movs	r2, #1
 8001318:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MX_DMA_Init+0xa8>)
 800131c:	2200      	movs	r2, #0
 800131e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <MX_DMA_Init+0xa8>)
 8001322:	2200      	movs	r2, #0
 8001324:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8001326:	480b      	ldr	r0, [pc, #44]	; (8001354 <MX_DMA_Init+0xa8>)
 8001328:	f000 fd66 	bl	8001df8 <HAL_DMA_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_DMA_Init+0x8a>
  {
    Error_Handler( );
 8001332:	f000 f8a5 	bl	8001480 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	2044      	movs	r0, #68	; 0x44
 800133c:	f000 fd25 	bl	8001d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001340:	2044      	movs	r0, #68	; 0x44
 8001342:	f000 fd3e 	bl	8001dc2 <HAL_NVIC_EnableIRQ>

}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800
 8001354:	200001c0 	.word	0x200001c0
 8001358:	40026410 	.word	0x40026410

0800135c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b3f      	ldr	r3, [pc, #252]	; (8001474 <MX_GPIO_Init+0x118>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a3e      	ldr	r2, [pc, #248]	; (8001474 <MX_GPIO_Init+0x118>)
 800137c:	f043 0304 	orr.w	r3, r3, #4
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b3c      	ldr	r3, [pc, #240]	; (8001474 <MX_GPIO_Init+0x118>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b38      	ldr	r3, [pc, #224]	; (8001474 <MX_GPIO_Init+0x118>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a37      	ldr	r2, [pc, #220]	; (8001474 <MX_GPIO_Init+0x118>)
 8001398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b35      	ldr	r3, [pc, #212]	; (8001474 <MX_GPIO_Init+0x118>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	4b31      	ldr	r3, [pc, #196]	; (8001474 <MX_GPIO_Init+0x118>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a30      	ldr	r2, [pc, #192]	; (8001474 <MX_GPIO_Init+0x118>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b2e      	ldr	r3, [pc, #184]	; (8001474 <MX_GPIO_Init+0x118>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	4b2a      	ldr	r3, [pc, #168]	; (8001474 <MX_GPIO_Init+0x118>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a29      	ldr	r2, [pc, #164]	; (8001474 <MX_GPIO_Init+0x118>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b27      	ldr	r3, [pc, #156]	; (8001474 <MX_GPIO_Init+0x118>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, vgaPin0_B0_Pin|vgaPin1_B1_Pin|vgaPin2_B2_Pin|vgaPin3_B3_Pin
 80013e2:	2200      	movs	r2, #0
 80013e4:	f641 71ff 	movw	r1, #8191	; 0x1fff
 80013e8:	4823      	ldr	r0, [pc, #140]	; (8001478 <MX_GPIO_Init+0x11c>)
 80013ea:	f001 fa4d 	bl	8002888 <HAL_GPIO_WritePin>
                          |vgaPin4_G0_Pin|vgaPin5_G1_Pin|vgaPin6_G2_Pin|vgaPin7_G3_Pin
                          |vgaPin8_R0_Pin|vgaPin9_R1_Pin|vgaPin10_R2_Pin|vgaPin11_R3_Pin
                          |vgaPin12_Hsync_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, vgaPin13_Vsync_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2122      	movs	r1, #34	; 0x22
 80013f2:	4822      	ldr	r0, [pc, #136]	; (800147c <MX_GPIO_Init+0x120>)
 80013f4:	f001 fa48 	bl	8002888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013fe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4619      	mov	r1, r3
 800140e:	481a      	ldr	r0, [pc, #104]	; (8001478 <MX_GPIO_Init+0x11c>)
 8001410:	f001 f8b6 	bl	8002580 <HAL_GPIO_Init>

  /*Configure GPIO pins : vgaPin0_B0_Pin vgaPin1_B1_Pin vgaPin2_B2_Pin vgaPin3_B3_Pin
                           vgaPin4_G0_Pin vgaPin5_G1_Pin vgaPin6_G2_Pin vgaPin7_G3_Pin
                           vgaPin8_R0_Pin vgaPin9_R1_Pin vgaPin10_R2_Pin vgaPin11_R3_Pin
                           vgaPin12_Hsync_Pin */
  GPIO_InitStruct.Pin = vgaPin0_B0_Pin|vgaPin1_B1_Pin|vgaPin2_B2_Pin|vgaPin3_B3_Pin
 8001414:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001418:	617b      	str	r3, [r7, #20]
                          |vgaPin4_G0_Pin|vgaPin5_G1_Pin|vgaPin6_G2_Pin|vgaPin7_G3_Pin
                          |vgaPin8_R0_Pin|vgaPin9_R1_Pin|vgaPin10_R2_Pin|vgaPin11_R3_Pin
                          |vgaPin12_Hsync_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	4812      	ldr	r0, [pc, #72]	; (8001478 <MX_GPIO_Init+0x11c>)
 800142e:	f001 f8a7 	bl	8002580 <HAL_GPIO_Init>

  /*Configure GPIO pin : vgaPin13_Vsync_Pin */
  GPIO_InitStruct.Pin = vgaPin13_Vsync_Pin;
 8001432:	2302      	movs	r3, #2
 8001434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001436:	2301      	movs	r3, #1
 8001438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800143e:	2302      	movs	r3, #2
 8001440:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(vgaPin13_Vsync_GPIO_Port, &GPIO_InitStruct);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4619      	mov	r1, r3
 8001448:	480c      	ldr	r0, [pc, #48]	; (800147c <MX_GPIO_Init+0x120>)
 800144a:	f001 f899 	bl	8002580 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800144e:	2320      	movs	r3, #32
 8001450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001452:	2301      	movs	r3, #1
 8001454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4619      	mov	r1, r3
 8001464:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_GPIO_Init+0x120>)
 8001466:	f001 f88b 	bl	8002580 <HAL_GPIO_Init>

}
 800146a:	bf00      	nop
 800146c:	3728      	adds	r7, #40	; 0x28
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	40020800 	.word	0x40020800
 800147c:	40020000 	.word	0x40020000

08001480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001484:	b672      	cpsid	i
}
 8001486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001488:	e7fe      	b.n	8001488 <Error_Handler+0x8>
	...

0800148c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <HAL_MspInit+0x4c>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	4a0f      	ldr	r2, [pc, #60]	; (80014d8 <HAL_MspInit+0x4c>)
 800149c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a0:	6453      	str	r3, [r2, #68]	; 0x44
 80014a2:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <HAL_MspInit+0x4c>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	603b      	str	r3, [r7, #0]
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_MspInit+0x4c>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	4a08      	ldr	r2, [pc, #32]	; (80014d8 <HAL_MspInit+0x4c>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_MspInit+0x4c>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014ca:	2007      	movs	r0, #7
 80014cc:	f000 fc52 	bl	8001d74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40023800 	.word	0x40023800

080014dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a35      	ldr	r2, [pc, #212]	; (80015c0 <HAL_TIM_Base_MspInit+0xe4>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d148      	bne.n	8001580 <HAL_TIM_Base_MspInit+0xa4>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b34      	ldr	r3, [pc, #208]	; (80015c4 <HAL_TIM_Base_MspInit+0xe8>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	4a33      	ldr	r2, [pc, #204]	; (80015c4 <HAL_TIM_Base_MspInit+0xe8>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6453      	str	r3, [r2, #68]	; 0x44
 80014fe:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <HAL_TIM_Base_MspInit+0xe8>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 800150a:	4b2f      	ldr	r3, [pc, #188]	; (80015c8 <HAL_TIM_Base_MspInit+0xec>)
 800150c:	4a2f      	ldr	r2, [pc, #188]	; (80015cc <HAL_TIM_Base_MspInit+0xf0>)
 800150e:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8001510:	4b2d      	ldr	r3, [pc, #180]	; (80015c8 <HAL_TIM_Base_MspInit+0xec>)
 8001512:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001516:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001518:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <HAL_TIM_Base_MspInit+0xec>)
 800151a:	2240      	movs	r2, #64	; 0x40
 800151c:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800151e:	4b2a      	ldr	r3, [pc, #168]	; (80015c8 <HAL_TIM_Base_MspInit+0xec>)
 8001520:	2200      	movs	r2, #0
 8001522:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8001524:	4b28      	ldr	r3, [pc, #160]	; (80015c8 <HAL_TIM_Base_MspInit+0xec>)
 8001526:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800152a:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800152c:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <HAL_TIM_Base_MspInit+0xec>)
 800152e:	2200      	movs	r2, #0
 8001530:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001532:	4b25      	ldr	r3, [pc, #148]	; (80015c8 <HAL_TIM_Base_MspInit+0xec>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8001538:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <HAL_TIM_Base_MspInit+0xec>)
 800153a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800153e:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001540:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <HAL_TIM_Base_MspInit+0xec>)
 8001542:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001546:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001548:	4b1f      	ldr	r3, [pc, #124]	; (80015c8 <HAL_TIM_Base_MspInit+0xec>)
 800154a:	2204      	movs	r2, #4
 800154c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim1_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800154e:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <HAL_TIM_Base_MspInit+0xec>)
 8001550:	2201      	movs	r2, #1
 8001552:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim1_up.Init.MemBurst = DMA_MBURST_INC4;
 8001554:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <HAL_TIM_Base_MspInit+0xec>)
 8001556:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800155a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim1_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800155c:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <HAL_TIM_Base_MspInit+0xec>)
 800155e:	2200      	movs	r2, #0
 8001560:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8001562:	4819      	ldr	r0, [pc, #100]	; (80015c8 <HAL_TIM_Base_MspInit+0xec>)
 8001564:	f000 fc48 	bl	8001df8 <HAL_DMA_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_TIM_Base_MspInit+0x96>
    {
      Error_Handler();
 800156e:	f7ff ff87 	bl	8001480 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a14      	ldr	r2, [pc, #80]	; (80015c8 <HAL_TIM_Base_MspInit+0xec>)
 8001576:	621a      	str	r2, [r3, #32]
 8001578:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <HAL_TIM_Base_MspInit+0xec>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800157e:	e01a      	b.n	80015b6 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM5)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <HAL_TIM_Base_MspInit+0xf4>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d115      	bne.n	80015b6 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <HAL_TIM_Base_MspInit+0xe8>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	4a0c      	ldr	r2, [pc, #48]	; (80015c4 <HAL_TIM_Base_MspInit+0xe8>)
 8001594:	f043 0308 	orr.w	r3, r3, #8
 8001598:	6413      	str	r3, [r2, #64]	; 0x40
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <HAL_TIM_Base_MspInit+0xe8>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 1);
 80015a6:	2201      	movs	r2, #1
 80015a8:	2100      	movs	r1, #0
 80015aa:	2032      	movs	r0, #50	; 0x32
 80015ac:	f000 fbed 	bl	8001d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80015b0:	2032      	movs	r0, #50	; 0x32
 80015b2:	f000 fc06 	bl	8001dc2 <HAL_NVIC_EnableIRQ>
}
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40010000 	.word	0x40010000
 80015c4:	40023800 	.word	0x40023800
 80015c8:	2000011c 	.word	0x2000011c
 80015cc:	40026488 	.word	0x40026488
 80015d0:	40000c00 	.word	0x40000c00

080015d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a12      	ldr	r2, [pc, #72]	; (800163c <HAL_TIM_MspPostInit+0x68>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d11e      	bne.n	8001634 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <HAL_TIM_MspPostInit+0x6c>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a10      	ldr	r2, [pc, #64]	; (8001640 <HAL_TIM_MspPostInit+0x6c>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <HAL_TIM_MspPostInit+0x6c>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001612:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001616:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001624:	2301      	movs	r3, #1
 8001626:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	4619      	mov	r1, r3
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <HAL_TIM_MspPostInit+0x70>)
 8001630:	f000 ffa6 	bl	8002580 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001634:	bf00      	nop
 8001636:	3720      	adds	r7, #32
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40010000 	.word	0x40010000
 8001640:	40023800 	.word	0x40023800
 8001644:	40020000 	.word	0x40020000

08001648 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a19      	ldr	r2, [pc, #100]	; (80016cc <HAL_UART_MspInit+0x84>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d12b      	bne.n	80016c2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <HAL_UART_MspInit+0x88>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	4a17      	ldr	r2, [pc, #92]	; (80016d0 <HAL_UART_MspInit+0x88>)
 8001674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001678:	6413      	str	r3, [r2, #64]	; 0x40
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <HAL_UART_MspInit+0x88>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <HAL_UART_MspInit+0x88>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a10      	ldr	r2, [pc, #64]	; (80016d0 <HAL_UART_MspInit+0x88>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <HAL_UART_MspInit+0x88>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016a2:	230c      	movs	r3, #12
 80016a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	2300      	movs	r3, #0
 80016b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016b2:	2307      	movs	r3, #7
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	4805      	ldr	r0, [pc, #20]	; (80016d4 <HAL_UART_MspInit+0x8c>)
 80016be:	f000 ff5f 	bl	8002580 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016c2:	bf00      	nop
 80016c4:	3728      	adds	r7, #40	; 0x28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40004400 	.word	0x40004400
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020000 	.word	0x40020000

080016d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <NMI_Handler+0x4>

080016de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e2:	e7fe      	b.n	80016e2 <HardFault_Handler+0x4>

080016e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <MemManage_Handler+0x4>

080016ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ee:	e7fe      	b.n	80016ee <BusFault_Handler+0x4>

080016f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <UsageFault_Handler+0x4>

080016f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001724:	f000 fa12 	bl	8001b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}

0800172c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <TIM5_IRQHandler+0x10>)
 8001732:	f001 feb3 	bl	800349c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200000d4 	.word	0x200000d4

08001740 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <DMA2_Stream5_IRQHandler+0x10>)
 8001746:	f000 fc5d 	bl	8002004 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	2000011c 	.word	0x2000011c

08001754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800175c:	4a14      	ldr	r2, [pc, #80]	; (80017b0 <_sbrk+0x5c>)
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <_sbrk+0x60>)
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <_sbrk+0x64>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d102      	bne.n	8001776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <_sbrk+0x64>)
 8001772:	4a12      	ldr	r2, [pc, #72]	; (80017bc <_sbrk+0x68>)
 8001774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	429a      	cmp	r2, r3
 8001782:	d207      	bcs.n	8001794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001784:	f003 f948 	bl	8004a18 <__errno>
 8001788:	4603      	mov	r3, r0
 800178a:	220c      	movs	r2, #12
 800178c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800178e:	f04f 33ff 	mov.w	r3, #4294967295
 8001792:	e009      	b.n	80017a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <_sbrk+0x64>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179a:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <_sbrk+0x64>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	4a05      	ldr	r2, [pc, #20]	; (80017b8 <_sbrk+0x64>)
 80017a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20018000 	.word	0x20018000
 80017b4:	00000400 	.word	0x00000400
 80017b8:	20000278 	.word	0x20000278
 80017bc:	2000ffd8 	.word	0x2000ffd8

080017c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <SystemInit+0x20>)
 80017c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <SystemInit+0x20>)
 80017cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <registerHUARTvga>:

	_Static_assert(horiWhole == horiRes+horiFront+horiSync+horiBack, "Horizontal vga configuration does not sum up");
	_Static_assert(vertWhole == vertArea+vertFront+vertSync+vertBack, "Vertical vga configuration does not sum up");
}

void registerHUARTvga(UART_HandleTypeDef * huart){
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	huartE = huart;
 80017ec:	4a04      	ldr	r2, [pc, #16]	; (8001800 <registerHUARTvga+0x1c>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6013      	str	r3, [r2, #0]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	2000ffbc 	.word	0x2000ffbc

08001804 <vgaDriver>:
#ifdef vgaDebug
	int str_len;
	char str[81] = {'\0'};
	static char * ref_str = "null";
#endif
	lineCount++;
 8001804:	4a30      	ldr	r2, [pc, #192]	; (80018c8 <vgaDriver+0xc4>)
		activeBuffer = oldBuffer;
 8001806:	4931      	ldr	r1, [pc, #196]	; (80018cc <vgaDriver+0xc8>)
	lineCount++;
 8001808:	6813      	ldr	r3, [r2, #0]
		activeBuffer = oldBuffer;
 800180a:	6808      	ldr	r0, [r1, #0]
void __attribute__((optimize("O3"))) vgaDriver(){
 800180c:	b430      	push	{r4, r5}
		Color * tmp = activeBuffer;
 800180e:	4c30      	ldr	r4, [pc, #192]	; (80018d0 <vgaDriver+0xcc>)
	lineCount++;
 8001810:	3301      	adds	r3, #1
		Color * tmp = activeBuffer;
 8001812:	6825      	ldr	r5, [r4, #0]
		oldBuffer = tmp;
 8001814:	600d      	str	r5, [r1, #0]
	if(lineCount < vertArea){//send line
 8001816:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
		activeBuffer = oldBuffer;
 800181a:	6020      	str	r0, [r4, #0]
	lineCount++;
 800181c:	6013      	str	r3, [r2, #0]
	if(lineCount < vertArea){//send line
 800181e:	da1d      	bge.n	800185c <vgaDriver+0x58>
#ifdef vgaDebug
		ref_str = "render line";
#endif
		uint32_t * active32 = (uint32_t*)&activeBuffer[horiWhole-horiRes];
		uint32_t * screen32 = (uint32_t*)&screenBuff[(lineCount/vgaUpscale)*horiRes];
 8001820:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8001824:	4a2b      	ldr	r2, [pc, #172]	; (80018d4 <vgaDriver+0xd0>)
 8001826:	1059      	asrs	r1, r3, #1
 8001828:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800182c:	eb02 1481 	add.w	r4, r2, r1, lsl #6
		uint32_t * active32 = (uint32_t*)&activeBuffer[horiWhole-horiRes];
 8001830:	f100 0350 	add.w	r3, r0, #80	; 0x50
 8001834:	3404      	adds	r4, #4
 8001836:	42a3      	cmp	r3, r4
		uint32_t * screen32 = (uint32_t*)&screenBuff[(lineCount/vgaUpscale)*horiRes];
 8001838:	eb02 1281 	add.w	r2, r2, r1, lsl #6
 800183c:	d029      	beq.n	8001892 <vgaDriver+0x8e>
 800183e:	ea42 0103 	orr.w	r1, r2, r3
 8001842:	0749      	lsls	r1, r1, #29
 8001844:	d125      	bne.n	8001892 <vgaDriver+0x8e>
 8001846:	3a08      	subs	r2, #8
 8001848:	f500 7cc8 	add.w	ip, r0, #400	; 0x190
		for(uint32_t i = 0; i < horiRes/4;i++){
			*active32 = *screen32;
 800184c:	e9f2 0102 	ldrd	r0, r1, [r2, #8]!
 8001850:	e8e3 0102 	strd	r0, r1, [r3], #8
 8001854:	459c      	cmp	ip, r3
 8001856:	d1f9      	bne.n	800184c <vgaDriver+0x48>
	str_len = sprintf(str, "Line %i\t %s \n\r", lineCount, ref_str);
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
	uint32_t indicatorLengths[] = {horiFront, horiSync, horiBack, horiRes, horiFront, horiSync, horiBack, horiRes};
	dumpBuffer((char*)lineBuff, horiWhole*2, indicatorLengths, "  []  ||  []  ||EE", 2);
#endif
}
 8001858:	bc30      	pop	{r4, r5}
 800185a:	4770      	bx	lr
	}else if(lineCount == vertArea){//last line clear
 800185c:	d012      	beq.n	8001884 <vgaDriver+0x80>
	}else if(lineCount == vertArea + 1){//last line clear buffer
 800185e:	f240 1191 	movw	r1, #401	; 0x191
 8001862:	428b      	cmp	r3, r1
 8001864:	d00e      	beq.n	8001884 <vgaDriver+0x80>
	}else if(lineCount == vertArea + vertFront){//enter vertical sync todo check for of by one error
 8001866:	f5b3 7fce 	cmp.w	r3, #412	; 0x19c
 800186a:	d01d      	beq.n	80018a8 <vgaDriver+0xa4>
	}else if(lineCount == vertArea + vertFront + vertSync){//exit vertical sync
 800186c:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 8001870:	d022      	beq.n	80018b8 <vgaDriver+0xb4>
	}else if(lineCount >= vertWhole){//return to beginning
 8001872:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
		lineCount = -1;
 8001876:	bfc8      	it	gt
 8001878:	f04f 33ff 	movgt.w	r3, #4294967295
}
 800187c:	bc30      	pop	{r4, r5}
		lineCount = -1;
 800187e:	bfc8      	it	gt
 8001880:	6013      	strgt	r3, [r2, #0]
}
 8001882:	4770      	bx	lr
 8001884:	bc30      	pop	{r4, r5}
			*active32 = 0;
 8001886:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800188a:	2100      	movs	r1, #0
 800188c:	3050      	adds	r0, #80	; 0x50
 800188e:	f003 b8ed 	b.w	8004a6c <memset>
 8001892:	3a04      	subs	r2, #4
 8001894:	f500 70c8 	add.w	r0, r0, #400	; 0x190
			*active32 = *screen32;
 8001898:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800189c:	f843 1b04 	str.w	r1, [r3], #4
		for(uint32_t i = 0; i < horiRes/4;i++){
 80018a0:	4298      	cmp	r0, r3
 80018a2:	d1f9      	bne.n	8001898 <vgaDriver+0x94>
}
 80018a4:	bc30      	pop	{r4, r5}
 80018a6:	4770      	bx	lr
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_SET);
 80018a8:	4a0b      	ldr	r2, [pc, #44]	; (80018d8 <vgaDriver+0xd4>)
 80018aa:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <vgaDriver+0xd8>)
 80018ac:	8811      	ldrh	r1, [r2, #0]
 80018ae:	6818      	ldr	r0, [r3, #0]
}
 80018b0:	bc30      	pop	{r4, r5}
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_SET);
 80018b2:	2201      	movs	r2, #1
 80018b4:	f000 bfe8 	b.w	8002888 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_RESET);
 80018b8:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <vgaDriver+0xd4>)
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <vgaDriver+0xd8>)
 80018bc:	8811      	ldrh	r1, [r2, #0]
 80018be:	6818      	ldr	r0, [r3, #0]
}
 80018c0:	bc30      	pop	{r4, r5}
		HAL_GPIO_WritePin(Vsync_GPIO_Port, Vsync_Pin, GPIO_PIN_RESET);
 80018c2:	2200      	movs	r2, #0
 80018c4:	f000 bfe0 	b.w	8002888 <HAL_GPIO_WritePin>
 80018c8:	2000ffb0 	.word	0x2000ffb0
 80018cc:	2000ffb8 	.word	0x2000ffb8
 80018d0:	2000ffb4 	.word	0x2000ffb4
 80018d4:	2000059c 	.word	0x2000059c
 80018d8:	2000ffac 	.word	0x2000ffac
 80018dc:	2000ffa8 	.word	0x2000ffa8

080018e0 <vgaHalfCallBack>:

void vgaHalfCallBack(DMA_HandleTypeDef *_hdma){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	vgaDriver();
 80018e8:	f7ff ff8c 	bl	8001804 <vgaDriver>
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <vgaFullCallBack>:

void vgaFullCallBack(DMA_HandleTypeDef *_hdma){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	vgaDriver();
 80018fc:	f7ff ff82 	bl	8001804 <vgaDriver>
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <vgaSetup>:
		TIM_HandleTypeDef * vgaPixelTimer_,
		DMA_HandleTypeDef * vgaCircularDMA_,
		DMA_HandleTypeDef * memCopyDMA_,
		GPIO_TypeDef* Vsync_GPIO_Port_,
		uint16_t Vsync_Pin_
		){
 8001908:	b480      	push	{r7}
 800190a:	b087      	sub	sp, #28
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
 8001914:	603b      	str	r3, [r7, #0]

	vgaPixelTimer = vgaPixelTimer_;
 8001916:	4a25      	ldr	r2, [pc, #148]	; (80019ac <vgaSetup+0xa4>)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6013      	str	r3, [r2, #0]
	vgaCircularDMA = vgaCircularDMA_;
 800191c:	4a24      	ldr	r2, [pc, #144]	; (80019b0 <vgaSetup+0xa8>)
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	6013      	str	r3, [r2, #0]
	memCopyDMA = memCopyDMA_;
 8001922:	4a24      	ldr	r2, [pc, #144]	; (80019b4 <vgaSetup+0xac>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6013      	str	r3, [r2, #0]

	Vsync_GPIO_Port = Vsync_GPIO_Port_;
 8001928:	4a23      	ldr	r2, [pc, #140]	; (80019b8 <vgaSetup+0xb0>)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	6013      	str	r3, [r2, #0]
	Vsync_Pin = Vsync_Pin_;
 800192e:	4a23      	ldr	r2, [pc, #140]	; (80019bc <vgaSetup+0xb4>)
 8001930:	8c3b      	ldrh	r3, [r7, #32]
 8001932:	8013      	strh	r3, [r2, #0]

	lineCount = 0;
 8001934:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <vgaSetup+0xb8>)
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
	activeBuffer = lineBuff;
 800193a:	4b22      	ldr	r3, [pc, #136]	; (80019c4 <vgaSetup+0xbc>)
 800193c:	4a22      	ldr	r2, [pc, #136]	; (80019c8 <vgaSetup+0xc0>)
 800193e:	601a      	str	r2, [r3, #0]
	oldBuffer = &lineBuff[horiWhole];
 8001940:	4b22      	ldr	r3, [pc, #136]	; (80019cc <vgaSetup+0xc4>)
 8001942:	4a23      	ldr	r2, [pc, #140]	; (80019d0 <vgaSetup+0xc8>)
 8001944:	601a      	str	r2, [r3, #0]

	for(uint32_t i = 0; i < horiWhole; i += 2){//clear all
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	e00e      	b.n	800196a <vgaSetup+0x62>
		activeBuffer[i].value = 0;
 800194c:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <vgaSetup+0xbc>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	4413      	add	r3, r2
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
		oldBuffer[i].value = 0;
 8001958:	4b1c      	ldr	r3, [pc, #112]	; (80019cc <vgaSetup+0xc4>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	4413      	add	r3, r2
 8001960:	2200      	movs	r2, #0
 8001962:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < horiWhole; i += 2){//clear all
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	3302      	adds	r3, #2
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001970:	d3ec      	bcc.n	800194c <vgaSetup+0x44>
	}
	for(uint32_t i = horiFront; i < horiFront + horiSync; i++){//set horizontal sync
 8001972:	2308      	movs	r3, #8
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	e00e      	b.n	8001996 <vgaSetup+0x8e>
		activeBuffer[i].value = 0x80;
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <vgaSetup+0xbc>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4413      	add	r3, r2
 8001980:	2280      	movs	r2, #128	; 0x80
 8001982:	701a      	strb	r2, [r3, #0]
		oldBuffer[i].value = 0x80;
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <vgaSetup+0xc4>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4413      	add	r3, r2
 800198c:	2280      	movs	r2, #128	; 0x80
 800198e:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = horiFront; i < horiFront + horiSync; i++){//set horizontal sync
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	3301      	adds	r3, #1
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	2b37      	cmp	r3, #55	; 0x37
 800199a:	d9ed      	bls.n	8001978 <vgaSetup+0x70>
	}
}
 800199c:	bf00      	nop
 800199e:	bf00      	nop
 80019a0:	371c      	adds	r7, #28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	2000ff9c 	.word	0x2000ff9c
 80019b0:	2000ffa0 	.word	0x2000ffa0
 80019b4:	2000ffa4 	.word	0x2000ffa4
 80019b8:	2000ffa8 	.word	0x2000ffa8
 80019bc:	2000ffac 	.word	0x2000ffac
 80019c0:	2000ffb0 	.word	0x2000ffb0
 80019c4:	2000ffb4 	.word	0x2000ffb4
 80019c8:	2000027c 	.word	0x2000027c
 80019cc:	2000ffb8 	.word	0x2000ffb8
 80019d0:	2000040c 	.word	0x2000040c

080019d4 <vgaStart>:

void vgaStart(){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0

	__HAL_TIM_ENABLE_DMA(vgaPixelTimer, TIM_DMA_UPDATE);
 80019d8:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <vgaStart+0x68>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <vgaStart+0x68>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019ea:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE(vgaPixelTimer);
 80019ec:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <vgaStart+0x68>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <vgaStart+0x68>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0201 	orr.w	r2, r2, #1
 80019fe:	601a      	str	r2, [r3, #0]

	HAL_TIM_PWM_Start(vgaPixelTimer, TIM_CHANNEL_1);
 8001a00:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <vgaStart+0x68>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f001 fc98 	bl	800333c <HAL_TIM_PWM_Start>

	HAL_DMA_RegisterCallback(vgaCircularDMA, HAL_DMA_XFER_HALFCPLT_CB_ID, vgaHalfCallBack);
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <vgaStart+0x6c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a0c      	ldr	r2, [pc, #48]	; (8001a44 <vgaStart+0x70>)
 8001a12:	2101      	movs	r1, #1
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 fc7f 	bl	8002318 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(vgaCircularDMA, HAL_DMA_XFER_CPLT_CB_ID, vgaFullCallBack);
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <vgaStart+0x6c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <vgaStart+0x74>)
 8001a20:	2100      	movs	r1, #0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 fc78 	bl	8002318 <HAL_DMA_RegisterCallback>

	//start the circular buffer dma transfer aka vga main loop
	HAL_DMA_Start_IT(vgaCircularDMA, (uint32_t)&lineBuff[0], (uint32_t)&(GPIOC->ODR), horiWhole*2);
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <vgaStart+0x6c>)
 8001a2a:	6818      	ldr	r0, [r3, #0]
 8001a2c:	4907      	ldr	r1, [pc, #28]	; (8001a4c <vgaStart+0x78>)
 8001a2e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001a32:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <vgaStart+0x7c>)
 8001a34:	f000 fa8e 	bl	8001f54 <HAL_DMA_Start_IT>
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	2000ff9c 	.word	0x2000ff9c
 8001a40:	2000ffa0 	.word	0x2000ffa0
 8001a44:	080018e1 	.word	0x080018e1
 8001a48:	080018f5 	.word	0x080018f5
 8001a4c:	2000027c 	.word	0x2000027c
 8001a50:	40020814 	.word	0x40020814

08001a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a58:	480d      	ldr	r0, [pc, #52]	; (8001a90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a5a:	490e      	ldr	r1, [pc, #56]	; (8001a94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a5c:	4a0e      	ldr	r2, [pc, #56]	; (8001a98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a60:	e002      	b.n	8001a68 <LoopCopyDataInit>

08001a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a66:	3304      	adds	r3, #4

08001a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a6c:	d3f9      	bcc.n	8001a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a6e:	4a0b      	ldr	r2, [pc, #44]	; (8001a9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a70:	4c0b      	ldr	r4, [pc, #44]	; (8001aa0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a74:	e001      	b.n	8001a7a <LoopFillZerobss>

08001a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a78:	3204      	adds	r2, #4

08001a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a7c:	d3fb      	bcc.n	8001a76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a7e:	f7ff fe9f 	bl	80017c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a82:	f002 ffcf 	bl	8004a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a86:	f7ff f905 	bl	8000c94 <main>
  bx  lr    
 8001a8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a94:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a98:	080066b4 	.word	0x080066b4
  ldr r2, =_sbss
 8001a9c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001aa0:	2000ffd4 	.word	0x2000ffd4

08001aa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aa4:	e7fe      	b.n	8001aa4 <ADC_IRQHandler>
	...

08001aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001aac:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <HAL_Init+0x40>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	; (8001ae8 <HAL_Init+0x40>)
 8001ab2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ab6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_Init+0x40>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <HAL_Init+0x40>)
 8001abe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ac2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <HAL_Init+0x40>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <HAL_Init+0x40>)
 8001aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ace:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	f000 f94f 	bl	8001d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f000 f808 	bl	8001aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001adc:	f7ff fcd6 	bl	800148c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40023c00 	.word	0x40023c00

08001aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_InitTick+0x54>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_InitTick+0x58>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4619      	mov	r1, r3
 8001afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f967 	bl	8001dde <HAL_SYSTICK_Config>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e00e      	b.n	8001b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b0f      	cmp	r3, #15
 8001b1e:	d80a      	bhi.n	8001b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b20:	2200      	movs	r2, #0
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	f04f 30ff 	mov.w	r0, #4294967295
 8001b28:	f000 f92f 	bl	8001d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b2c:	4a06      	ldr	r2, [pc, #24]	; (8001b48 <HAL_InitTick+0x5c>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	e000      	b.n	8001b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000000 	.word	0x20000000
 8001b44:	20000008 	.word	0x20000008
 8001b48:	20000004 	.word	0x20000004

08001b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_IncTick+0x20>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_IncTick+0x24>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <HAL_IncTick+0x24>)
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000008 	.word	0x20000008
 8001b70:	2000ffc0 	.word	0x2000ffc0

08001b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return uwTick;
 8001b78:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <HAL_GetTick+0x14>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	2000ffc0 	.word	0x2000ffc0

08001b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b94:	f7ff ffee 	bl	8001b74 <HAL_GetTick>
 8001b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba4:	d005      	beq.n	8001bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <HAL_Delay+0x44>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4413      	add	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bb2:	bf00      	nop
 8001bb4:	f7ff ffde 	bl	8001b74 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d8f7      	bhi.n	8001bb4 <HAL_Delay+0x28>
  {
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	bf00      	nop
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000008 	.word	0x20000008

08001bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <__NVIC_SetPriorityGrouping+0x44>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c06:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <__NVIC_SetPriorityGrouping+0x44>)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	60d3      	str	r3, [r2, #12]
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c20:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <__NVIC_GetPriorityGrouping+0x18>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	0a1b      	lsrs	r3, r3, #8
 8001c26:	f003 0307 	and.w	r3, r3, #7
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	db0b      	blt.n	8001c62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	f003 021f 	and.w	r2, r3, #31
 8001c50:	4907      	ldr	r1, [pc, #28]	; (8001c70 <__NVIC_EnableIRQ+0x38>)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	095b      	lsrs	r3, r3, #5
 8001c58:	2001      	movs	r0, #1
 8001c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000e100 	.word	0xe000e100

08001c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	6039      	str	r1, [r7, #0]
 8001c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	db0a      	blt.n	8001c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	490c      	ldr	r1, [pc, #48]	; (8001cc0 <__NVIC_SetPriority+0x4c>)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	0112      	lsls	r2, r2, #4
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	440b      	add	r3, r1
 8001c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c9c:	e00a      	b.n	8001cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	4908      	ldr	r1, [pc, #32]	; (8001cc4 <__NVIC_SetPriority+0x50>)
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	3b04      	subs	r3, #4
 8001cac:	0112      	lsls	r2, r2, #4
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	761a      	strb	r2, [r3, #24]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000e100 	.word	0xe000e100
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	; 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f1c3 0307 	rsb	r3, r3, #7
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	bf28      	it	cs
 8001ce6:	2304      	movcs	r3, #4
 8001ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3304      	adds	r3, #4
 8001cee:	2b06      	cmp	r3, #6
 8001cf0:	d902      	bls.n	8001cf8 <NVIC_EncodePriority+0x30>
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3b03      	subs	r3, #3
 8001cf6:	e000      	b.n	8001cfa <NVIC_EncodePriority+0x32>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43da      	mvns	r2, r3
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d10:	f04f 31ff 	mov.w	r1, #4294967295
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1a:	43d9      	mvns	r1, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	4313      	orrs	r3, r2
         );
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3724      	adds	r7, #36	; 0x24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
	...

08001d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d40:	d301      	bcc.n	8001d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d42:	2301      	movs	r3, #1
 8001d44:	e00f      	b.n	8001d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d46:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <SysTick_Config+0x40>)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d4e:	210f      	movs	r1, #15
 8001d50:	f04f 30ff 	mov.w	r0, #4294967295
 8001d54:	f7ff ff8e 	bl	8001c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <SysTick_Config+0x40>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d5e:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <SysTick_Config+0x40>)
 8001d60:	2207      	movs	r2, #7
 8001d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	e000e010 	.word	0xe000e010

08001d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff ff29 	bl	8001bd4 <__NVIC_SetPriorityGrouping>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b086      	sub	sp, #24
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4603      	mov	r3, r0
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
 8001d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d9c:	f7ff ff3e 	bl	8001c1c <__NVIC_GetPriorityGrouping>
 8001da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68b9      	ldr	r1, [r7, #8]
 8001da6:	6978      	ldr	r0, [r7, #20]
 8001da8:	f7ff ff8e 	bl	8001cc8 <NVIC_EncodePriority>
 8001dac:	4602      	mov	r2, r0
 8001dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff5d 	bl	8001c74 <__NVIC_SetPriority>
}
 8001dba:	bf00      	nop
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff31 	bl	8001c38 <__NVIC_EnableIRQ>
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff ffa2 	bl	8001d30 <SysTick_Config>
 8001dec:	4603      	mov	r3, r0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e04:	f7ff feb6 	bl	8001b74 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e099      	b.n	8001f48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 0201 	bic.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e34:	e00f      	b.n	8001e56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e36:	f7ff fe9d 	bl	8001b74 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b05      	cmp	r3, #5
 8001e42:	d908      	bls.n	8001e56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2220      	movs	r2, #32
 8001e48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e078      	b.n	8001f48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1e8      	bne.n	8001e36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	4b38      	ldr	r3, [pc, #224]	; (8001f50 <HAL_DMA_Init+0x158>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d107      	bne.n	8001ec0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f023 0307 	bic.w	r3, r3, #7
 8001ed6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d117      	bne.n	8001f1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00e      	beq.n	8001f1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 fac3 	bl	8002488 <DMA_CheckFifoParam>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d008      	beq.n	8001f1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2240      	movs	r2, #64	; 0x40
 8001f0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f16:	2301      	movs	r3, #1
 8001f18:	e016      	b.n	8001f48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 fa7a 	bl	800241c <DMA_CalcBaseAndBitshift>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f30:	223f      	movs	r2, #63	; 0x3f
 8001f32:	409a      	lsls	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	f010803f 	.word	0xf010803f

08001f54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d101      	bne.n	8001f7a <HAL_DMA_Start_IT+0x26>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e040      	b.n	8001ffc <HAL_DMA_Start_IT+0xa8>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d12f      	bne.n	8001fee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2202      	movs	r2, #2
 8001f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	68b9      	ldr	r1, [r7, #8]
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 fa0c 	bl	80023c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fac:	223f      	movs	r2, #63	; 0x3f
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0216 	orr.w	r2, r2, #22
 8001fc2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d007      	beq.n	8001fdc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0208 	orr.w	r2, r2, #8
 8001fda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0201 	orr.w	r2, r2, #1
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	e005      	b.n	8001ffa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800200c:	2300      	movs	r3, #0
 800200e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002010:	4b8e      	ldr	r3, [pc, #568]	; (800224c <HAL_DMA_IRQHandler+0x248>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a8e      	ldr	r2, [pc, #568]	; (8002250 <HAL_DMA_IRQHandler+0x24c>)
 8002016:	fba2 2303 	umull	r2, r3, r2, r3
 800201a:	0a9b      	lsrs	r3, r3, #10
 800201c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002022:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202e:	2208      	movs	r2, #8
 8002030:	409a      	lsls	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	4013      	ands	r3, r2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d01a      	beq.n	8002070 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	d013      	beq.n	8002070 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0204 	bic.w	r2, r2, #4
 8002056:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205c:	2208      	movs	r2, #8
 800205e:	409a      	lsls	r2, r3
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002068:	f043 0201 	orr.w	r2, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002074:	2201      	movs	r2, #1
 8002076:	409a      	lsls	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4013      	ands	r3, r2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d012      	beq.n	80020a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00b      	beq.n	80020a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002092:	2201      	movs	r2, #1
 8002094:	409a      	lsls	r2, r3
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209e:	f043 0202 	orr.w	r2, r3, #2
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020aa:	2204      	movs	r2, #4
 80020ac:	409a      	lsls	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d012      	beq.n	80020dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00b      	beq.n	80020dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c8:	2204      	movs	r2, #4
 80020ca:	409a      	lsls	r2, r3
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d4:	f043 0204 	orr.w	r2, r3, #4
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e0:	2210      	movs	r2, #16
 80020e2:	409a      	lsls	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d043      	beq.n	8002174 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d03c      	beq.n	8002174 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fe:	2210      	movs	r2, #16
 8002100:	409a      	lsls	r2, r3
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d018      	beq.n	8002146 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d108      	bne.n	8002134 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	2b00      	cmp	r3, #0
 8002128:	d024      	beq.n	8002174 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	4798      	blx	r3
 8002132:	e01f      	b.n	8002174 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002138:	2b00      	cmp	r3, #0
 800213a:	d01b      	beq.n	8002174 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	4798      	blx	r3
 8002144:	e016      	b.n	8002174 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d107      	bne.n	8002164 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0208 	bic.w	r2, r2, #8
 8002162:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002178:	2220      	movs	r2, #32
 800217a:	409a      	lsls	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4013      	ands	r3, r2
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 808f 	beq.w	80022a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0310 	and.w	r3, r3, #16
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 8087 	beq.w	80022a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219a:	2220      	movs	r2, #32
 800219c:	409a      	lsls	r2, r3
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b05      	cmp	r3, #5
 80021ac:	d136      	bne.n	800221c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 0216 	bic.w	r2, r2, #22
 80021bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	695a      	ldr	r2, [r3, #20]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d103      	bne.n	80021de <HAL_DMA_IRQHandler+0x1da>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d007      	beq.n	80021ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0208 	bic.w	r2, r2, #8
 80021ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f2:	223f      	movs	r2, #63	; 0x3f
 80021f4:	409a      	lsls	r2, r3
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800220e:	2b00      	cmp	r3, #0
 8002210:	d07e      	beq.n	8002310 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	4798      	blx	r3
        }
        return;
 800221a:	e079      	b.n	8002310 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d01d      	beq.n	8002266 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10d      	bne.n	8002254 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223c:	2b00      	cmp	r3, #0
 800223e:	d031      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	4798      	blx	r3
 8002248:	e02c      	b.n	80022a4 <HAL_DMA_IRQHandler+0x2a0>
 800224a:	bf00      	nop
 800224c:	20000000 	.word	0x20000000
 8002250:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002258:	2b00      	cmp	r3, #0
 800225a:	d023      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	4798      	blx	r3
 8002264:	e01e      	b.n	80022a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10f      	bne.n	8002294 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0210 	bic.w	r2, r2, #16
 8002282:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d032      	beq.n	8002312 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d022      	beq.n	80022fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2205      	movs	r2, #5
 80022bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0201 	bic.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	3301      	adds	r3, #1
 80022d4:	60bb      	str	r3, [r7, #8]
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d307      	bcc.n	80022ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f2      	bne.n	80022d0 <HAL_DMA_IRQHandler+0x2cc>
 80022ea:	e000      	b.n	80022ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	4798      	blx	r3
 800230e:	e000      	b.n	8002312 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002310:	bf00      	nop
    }
  }
}
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8002318:	b480      	push	{r7}
 800231a:	b087      	sub	sp, #28
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	460b      	mov	r3, r1
 8002322:	607a      	str	r2, [r7, #4]
 8002324:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_DMA_RegisterCallback+0x20>
 8002334:	2302      	movs	r3, #2
 8002336:	e03d      	b.n	80023b4 <HAL_DMA_RegisterCallback+0x9c>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b01      	cmp	r3, #1
 800234a:	d12c      	bne.n	80023a6 <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 800234c:	7afb      	ldrb	r3, [r7, #11]
 800234e:	2b05      	cmp	r3, #5
 8002350:	d826      	bhi.n	80023a0 <HAL_DMA_RegisterCallback+0x88>
 8002352:	a201      	add	r2, pc, #4	; (adr r2, 8002358 <HAL_DMA_RegisterCallback+0x40>)
 8002354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002358:	08002371 	.word	0x08002371
 800235c:	08002379 	.word	0x08002379
 8002360:	08002381 	.word	0x08002381
 8002364:	08002389 	.word	0x08002389
 8002368:	08002391 	.word	0x08002391
 800236c:	08002399 	.word	0x08002399
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8002376:	e018      	b.n	80023aa <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800237e:	e014      	b.n	80023aa <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8002386:	e010      	b.n	80023aa <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 800238e:	e00c      	b.n	80023aa <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8002396:	e008      	b.n	80023aa <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800239e:	e004      	b.n	80023aa <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	75fb      	strb	r3, [r7, #23]
      break;
 80023a4:	e001      	b.n	80023aa <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 80023b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	371c      	adds	r7, #28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b40      	cmp	r3, #64	; 0x40
 80023ec:	d108      	bne.n	8002400 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023fe:	e007      	b.n	8002410 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	60da      	str	r2, [r3, #12]
}
 8002410:	bf00      	nop
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	b2db      	uxtb	r3, r3
 800242a:	3b10      	subs	r3, #16
 800242c:	4a14      	ldr	r2, [pc, #80]	; (8002480 <DMA_CalcBaseAndBitshift+0x64>)
 800242e:	fba2 2303 	umull	r2, r3, r2, r3
 8002432:	091b      	lsrs	r3, r3, #4
 8002434:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002436:	4a13      	ldr	r2, [pc, #76]	; (8002484 <DMA_CalcBaseAndBitshift+0x68>)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4413      	add	r3, r2
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2b03      	cmp	r3, #3
 8002448:	d909      	bls.n	800245e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002452:	f023 0303 	bic.w	r3, r3, #3
 8002456:	1d1a      	adds	r2, r3, #4
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	659a      	str	r2, [r3, #88]	; 0x58
 800245c:	e007      	b.n	800246e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002466:	f023 0303 	bic.w	r3, r3, #3
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002472:	4618      	mov	r0, r3
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	aaaaaaab 	.word	0xaaaaaaab
 8002484:	08006668 	.word	0x08006668

08002488 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002498:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d11f      	bne.n	80024e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d856      	bhi.n	8002556 <DMA_CheckFifoParam+0xce>
 80024a8:	a201      	add	r2, pc, #4	; (adr r2, 80024b0 <DMA_CheckFifoParam+0x28>)
 80024aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ae:	bf00      	nop
 80024b0:	080024c1 	.word	0x080024c1
 80024b4:	080024d3 	.word	0x080024d3
 80024b8:	080024c1 	.word	0x080024c1
 80024bc:	08002557 	.word	0x08002557
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d046      	beq.n	800255a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024d0:	e043      	b.n	800255a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024da:	d140      	bne.n	800255e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024e0:	e03d      	b.n	800255e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ea:	d121      	bne.n	8002530 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b03      	cmp	r3, #3
 80024f0:	d837      	bhi.n	8002562 <DMA_CheckFifoParam+0xda>
 80024f2:	a201      	add	r2, pc, #4	; (adr r2, 80024f8 <DMA_CheckFifoParam+0x70>)
 80024f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f8:	08002509 	.word	0x08002509
 80024fc:	0800250f 	.word	0x0800250f
 8002500:	08002509 	.word	0x08002509
 8002504:	08002521 	.word	0x08002521
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	73fb      	strb	r3, [r7, #15]
      break;
 800250c:	e030      	b.n	8002570 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002512:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d025      	beq.n	8002566 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800251e:	e022      	b.n	8002566 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002524:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002528:	d11f      	bne.n	800256a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800252e:	e01c      	b.n	800256a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d903      	bls.n	800253e <DMA_CheckFifoParam+0xb6>
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b03      	cmp	r3, #3
 800253a:	d003      	beq.n	8002544 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800253c:	e018      	b.n	8002570 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
      break;
 8002542:	e015      	b.n	8002570 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002548:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00e      	beq.n	800256e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	73fb      	strb	r3, [r7, #15]
      break;
 8002554:	e00b      	b.n	800256e <DMA_CheckFifoParam+0xe6>
      break;
 8002556:	bf00      	nop
 8002558:	e00a      	b.n	8002570 <DMA_CheckFifoParam+0xe8>
      break;
 800255a:	bf00      	nop
 800255c:	e008      	b.n	8002570 <DMA_CheckFifoParam+0xe8>
      break;
 800255e:	bf00      	nop
 8002560:	e006      	b.n	8002570 <DMA_CheckFifoParam+0xe8>
      break;
 8002562:	bf00      	nop
 8002564:	e004      	b.n	8002570 <DMA_CheckFifoParam+0xe8>
      break;
 8002566:	bf00      	nop
 8002568:	e002      	b.n	8002570 <DMA_CheckFifoParam+0xe8>
      break;   
 800256a:	bf00      	nop
 800256c:	e000      	b.n	8002570 <DMA_CheckFifoParam+0xe8>
      break;
 800256e:	bf00      	nop
    }
  } 
  
  return status; 
 8002570:	7bfb      	ldrb	r3, [r7, #15]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop

08002580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002580:	b480      	push	{r7}
 8002582:	b089      	sub	sp, #36	; 0x24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800258e:	2300      	movs	r3, #0
 8002590:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002592:	2300      	movs	r3, #0
 8002594:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002596:	2300      	movs	r3, #0
 8002598:	61fb      	str	r3, [r7, #28]
 800259a:	e159      	b.n	8002850 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800259c:	2201      	movs	r2, #1
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	4013      	ands	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	f040 8148 	bne.w	800284a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d005      	beq.n	80025d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d130      	bne.n	8002634 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	2203      	movs	r2, #3
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002608:	2201      	movs	r2, #1
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	091b      	lsrs	r3, r3, #4
 800261e:	f003 0201 	and.w	r2, r3, #1
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	2b03      	cmp	r3, #3
 800263e:	d017      	beq.n	8002670 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	2203      	movs	r2, #3
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 0303 	and.w	r3, r3, #3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d123      	bne.n	80026c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	08da      	lsrs	r2, r3, #3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3208      	adds	r2, #8
 8002684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002688:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	220f      	movs	r2, #15
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	08da      	lsrs	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3208      	adds	r2, #8
 80026be:	69b9      	ldr	r1, [r7, #24]
 80026c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	2203      	movs	r2, #3
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 0203 	and.w	r2, r3, #3
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 80a2 	beq.w	800284a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	4b57      	ldr	r3, [pc, #348]	; (8002868 <HAL_GPIO_Init+0x2e8>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	4a56      	ldr	r2, [pc, #344]	; (8002868 <HAL_GPIO_Init+0x2e8>)
 8002710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002714:	6453      	str	r3, [r2, #68]	; 0x44
 8002716:	4b54      	ldr	r3, [pc, #336]	; (8002868 <HAL_GPIO_Init+0x2e8>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002722:	4a52      	ldr	r2, [pc, #328]	; (800286c <HAL_GPIO_Init+0x2ec>)
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	089b      	lsrs	r3, r3, #2
 8002728:	3302      	adds	r3, #2
 800272a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	220f      	movs	r2, #15
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43db      	mvns	r3, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4013      	ands	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a49      	ldr	r2, [pc, #292]	; (8002870 <HAL_GPIO_Init+0x2f0>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d019      	beq.n	8002782 <HAL_GPIO_Init+0x202>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a48      	ldr	r2, [pc, #288]	; (8002874 <HAL_GPIO_Init+0x2f4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d013      	beq.n	800277e <HAL_GPIO_Init+0x1fe>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a47      	ldr	r2, [pc, #284]	; (8002878 <HAL_GPIO_Init+0x2f8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d00d      	beq.n	800277a <HAL_GPIO_Init+0x1fa>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a46      	ldr	r2, [pc, #280]	; (800287c <HAL_GPIO_Init+0x2fc>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d007      	beq.n	8002776 <HAL_GPIO_Init+0x1f6>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a45      	ldr	r2, [pc, #276]	; (8002880 <HAL_GPIO_Init+0x300>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d101      	bne.n	8002772 <HAL_GPIO_Init+0x1f2>
 800276e:	2304      	movs	r3, #4
 8002770:	e008      	b.n	8002784 <HAL_GPIO_Init+0x204>
 8002772:	2307      	movs	r3, #7
 8002774:	e006      	b.n	8002784 <HAL_GPIO_Init+0x204>
 8002776:	2303      	movs	r3, #3
 8002778:	e004      	b.n	8002784 <HAL_GPIO_Init+0x204>
 800277a:	2302      	movs	r3, #2
 800277c:	e002      	b.n	8002784 <HAL_GPIO_Init+0x204>
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <HAL_GPIO_Init+0x204>
 8002782:	2300      	movs	r3, #0
 8002784:	69fa      	ldr	r2, [r7, #28]
 8002786:	f002 0203 	and.w	r2, r2, #3
 800278a:	0092      	lsls	r2, r2, #2
 800278c:	4093      	lsls	r3, r2
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4313      	orrs	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002794:	4935      	ldr	r1, [pc, #212]	; (800286c <HAL_GPIO_Init+0x2ec>)
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	089b      	lsrs	r3, r3, #2
 800279a:	3302      	adds	r3, #2
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027a2:	4b38      	ldr	r3, [pc, #224]	; (8002884 <HAL_GPIO_Init+0x304>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	43db      	mvns	r3, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4013      	ands	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027c6:	4a2f      	ldr	r2, [pc, #188]	; (8002884 <HAL_GPIO_Init+0x304>)
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027cc:	4b2d      	ldr	r3, [pc, #180]	; (8002884 <HAL_GPIO_Init+0x304>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027f0:	4a24      	ldr	r2, [pc, #144]	; (8002884 <HAL_GPIO_Init+0x304>)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027f6:	4b23      	ldr	r3, [pc, #140]	; (8002884 <HAL_GPIO_Init+0x304>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	43db      	mvns	r3, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4013      	ands	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800281a:	4a1a      	ldr	r2, [pc, #104]	; (8002884 <HAL_GPIO_Init+0x304>)
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002820:	4b18      	ldr	r3, [pc, #96]	; (8002884 <HAL_GPIO_Init+0x304>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002844:	4a0f      	ldr	r2, [pc, #60]	; (8002884 <HAL_GPIO_Init+0x304>)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3301      	adds	r3, #1
 800284e:	61fb      	str	r3, [r7, #28]
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	2b0f      	cmp	r3, #15
 8002854:	f67f aea2 	bls.w	800259c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002858:	bf00      	nop
 800285a:	bf00      	nop
 800285c:	3724      	adds	r7, #36	; 0x24
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40023800 	.word	0x40023800
 800286c:	40013800 	.word	0x40013800
 8002870:	40020000 	.word	0x40020000
 8002874:	40020400 	.word	0x40020400
 8002878:	40020800 	.word	0x40020800
 800287c:	40020c00 	.word	0x40020c00
 8002880:	40021000 	.word	0x40021000
 8002884:	40013c00 	.word	0x40013c00

08002888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	807b      	strh	r3, [r7, #2]
 8002894:	4613      	mov	r3, r2
 8002896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002898:	787b      	ldrb	r3, [r7, #1]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800289e:	887a      	ldrh	r2, [r7, #2]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028a4:	e003      	b.n	80028ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028a6:	887b      	ldrh	r3, [r7, #2]
 80028a8:	041a      	lsls	r2, r3, #16
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	619a      	str	r2, [r3, #24]
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e267      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d075      	beq.n	80029c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028da:	4b88      	ldr	r3, [pc, #544]	; (8002afc <HAL_RCC_OscConfig+0x240>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d00c      	beq.n	8002900 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028e6:	4b85      	ldr	r3, [pc, #532]	; (8002afc <HAL_RCC_OscConfig+0x240>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d112      	bne.n	8002918 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028f2:	4b82      	ldr	r3, [pc, #520]	; (8002afc <HAL_RCC_OscConfig+0x240>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028fe:	d10b      	bne.n	8002918 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002900:	4b7e      	ldr	r3, [pc, #504]	; (8002afc <HAL_RCC_OscConfig+0x240>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d05b      	beq.n	80029c4 <HAL_RCC_OscConfig+0x108>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d157      	bne.n	80029c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e242      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002920:	d106      	bne.n	8002930 <HAL_RCC_OscConfig+0x74>
 8002922:	4b76      	ldr	r3, [pc, #472]	; (8002afc <HAL_RCC_OscConfig+0x240>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a75      	ldr	r2, [pc, #468]	; (8002afc <HAL_RCC_OscConfig+0x240>)
 8002928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e01d      	b.n	800296c <HAL_RCC_OscConfig+0xb0>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002938:	d10c      	bne.n	8002954 <HAL_RCC_OscConfig+0x98>
 800293a:	4b70      	ldr	r3, [pc, #448]	; (8002afc <HAL_RCC_OscConfig+0x240>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a6f      	ldr	r2, [pc, #444]	; (8002afc <HAL_RCC_OscConfig+0x240>)
 8002940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	4b6d      	ldr	r3, [pc, #436]	; (8002afc <HAL_RCC_OscConfig+0x240>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a6c      	ldr	r2, [pc, #432]	; (8002afc <HAL_RCC_OscConfig+0x240>)
 800294c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	e00b      	b.n	800296c <HAL_RCC_OscConfig+0xb0>
 8002954:	4b69      	ldr	r3, [pc, #420]	; (8002afc <HAL_RCC_OscConfig+0x240>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a68      	ldr	r2, [pc, #416]	; (8002afc <HAL_RCC_OscConfig+0x240>)
 800295a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	4b66      	ldr	r3, [pc, #408]	; (8002afc <HAL_RCC_OscConfig+0x240>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a65      	ldr	r2, [pc, #404]	; (8002afc <HAL_RCC_OscConfig+0x240>)
 8002966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800296a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d013      	beq.n	800299c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002974:	f7ff f8fe 	bl	8001b74 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800297c:	f7ff f8fa 	bl	8001b74 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b64      	cmp	r3, #100	; 0x64
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e207      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298e:	4b5b      	ldr	r3, [pc, #364]	; (8002afc <HAL_RCC_OscConfig+0x240>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0xc0>
 800299a:	e014      	b.n	80029c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299c:	f7ff f8ea 	bl	8001b74 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029a4:	f7ff f8e6 	bl	8001b74 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	; 0x64
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e1f3      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b6:	4b51      	ldr	r3, [pc, #324]	; (8002afc <HAL_RCC_OscConfig+0x240>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0xe8>
 80029c2:	e000      	b.n	80029c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d063      	beq.n	8002a9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029d2:	4b4a      	ldr	r3, [pc, #296]	; (8002afc <HAL_RCC_OscConfig+0x240>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 030c 	and.w	r3, r3, #12
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00b      	beq.n	80029f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029de:	4b47      	ldr	r3, [pc, #284]	; (8002afc <HAL_RCC_OscConfig+0x240>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d11c      	bne.n	8002a24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ea:	4b44      	ldr	r3, [pc, #272]	; (8002afc <HAL_RCC_OscConfig+0x240>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d116      	bne.n	8002a24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f6:	4b41      	ldr	r3, [pc, #260]	; (8002afc <HAL_RCC_OscConfig+0x240>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d005      	beq.n	8002a0e <HAL_RCC_OscConfig+0x152>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d001      	beq.n	8002a0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e1c7      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0e:	4b3b      	ldr	r3, [pc, #236]	; (8002afc <HAL_RCC_OscConfig+0x240>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4937      	ldr	r1, [pc, #220]	; (8002afc <HAL_RCC_OscConfig+0x240>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a22:	e03a      	b.n	8002a9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d020      	beq.n	8002a6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a2c:	4b34      	ldr	r3, [pc, #208]	; (8002b00 <HAL_RCC_OscConfig+0x244>)
 8002a2e:	2201      	movs	r2, #1
 8002a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a32:	f7ff f89f 	bl	8001b74 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a3a:	f7ff f89b 	bl	8001b74 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e1a8      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4c:	4b2b      	ldr	r3, [pc, #172]	; (8002afc <HAL_RCC_OscConfig+0x240>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f0      	beq.n	8002a3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a58:	4b28      	ldr	r3, [pc, #160]	; (8002afc <HAL_RCC_OscConfig+0x240>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4925      	ldr	r1, [pc, #148]	; (8002afc <HAL_RCC_OscConfig+0x240>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	600b      	str	r3, [r1, #0]
 8002a6c:	e015      	b.n	8002a9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a6e:	4b24      	ldr	r3, [pc, #144]	; (8002b00 <HAL_RCC_OscConfig+0x244>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a74:	f7ff f87e 	bl	8001b74 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a7c:	f7ff f87a 	bl	8001b74 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e187      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a8e:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <HAL_RCC_OscConfig+0x240>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d036      	beq.n	8002b14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d016      	beq.n	8002adc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aae:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <HAL_RCC_OscConfig+0x248>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab4:	f7ff f85e 	bl	8001b74 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002abc:	f7ff f85a 	bl	8001b74 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e167      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ace:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <HAL_RCC_OscConfig+0x240>)
 8002ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0x200>
 8002ada:	e01b      	b.n	8002b14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002adc:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <HAL_RCC_OscConfig+0x248>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae2:	f7ff f847 	bl	8001b74 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae8:	e00e      	b.n	8002b08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aea:	f7ff f843 	bl	8001b74 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d907      	bls.n	8002b08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e150      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
 8002afc:	40023800 	.word	0x40023800
 8002b00:	42470000 	.word	0x42470000
 8002b04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b08:	4b88      	ldr	r3, [pc, #544]	; (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1ea      	bne.n	8002aea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 8097 	beq.w	8002c50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b22:	2300      	movs	r3, #0
 8002b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b26:	4b81      	ldr	r3, [pc, #516]	; (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10f      	bne.n	8002b52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	4b7d      	ldr	r3, [pc, #500]	; (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	4a7c      	ldr	r2, [pc, #496]	; (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b40:	6413      	str	r3, [r2, #64]	; 0x40
 8002b42:	4b7a      	ldr	r3, [pc, #488]	; (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	60bb      	str	r3, [r7, #8]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b52:	4b77      	ldr	r3, [pc, #476]	; (8002d30 <HAL_RCC_OscConfig+0x474>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d118      	bne.n	8002b90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b5e:	4b74      	ldr	r3, [pc, #464]	; (8002d30 <HAL_RCC_OscConfig+0x474>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a73      	ldr	r2, [pc, #460]	; (8002d30 <HAL_RCC_OscConfig+0x474>)
 8002b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b6a:	f7ff f803 	bl	8001b74 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b72:	f7fe ffff 	bl	8001b74 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e10c      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b84:	4b6a      	ldr	r3, [pc, #424]	; (8002d30 <HAL_RCC_OscConfig+0x474>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0f0      	beq.n	8002b72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d106      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x2ea>
 8002b98:	4b64      	ldr	r3, [pc, #400]	; (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9c:	4a63      	ldr	r2, [pc, #396]	; (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba4:	e01c      	b.n	8002be0 <HAL_RCC_OscConfig+0x324>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	2b05      	cmp	r3, #5
 8002bac:	d10c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x30c>
 8002bae:	4b5f      	ldr	r3, [pc, #380]	; (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb2:	4a5e      	ldr	r2, [pc, #376]	; (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002bb4:	f043 0304 	orr.w	r3, r3, #4
 8002bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bba:	4b5c      	ldr	r3, [pc, #368]	; (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbe:	4a5b      	ldr	r2, [pc, #364]	; (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc6:	e00b      	b.n	8002be0 <HAL_RCC_OscConfig+0x324>
 8002bc8:	4b58      	ldr	r3, [pc, #352]	; (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bcc:	4a57      	ldr	r2, [pc, #348]	; (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002bce:	f023 0301 	bic.w	r3, r3, #1
 8002bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd4:	4b55      	ldr	r3, [pc, #340]	; (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd8:	4a54      	ldr	r2, [pc, #336]	; (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002bda:	f023 0304 	bic.w	r3, r3, #4
 8002bde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d015      	beq.n	8002c14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be8:	f7fe ffc4 	bl	8001b74 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bee:	e00a      	b.n	8002c06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf0:	f7fe ffc0 	bl	8001b74 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e0cb      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c06:	4b49      	ldr	r3, [pc, #292]	; (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0ee      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x334>
 8002c12:	e014      	b.n	8002c3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c14:	f7fe ffae 	bl	8001b74 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c1a:	e00a      	b.n	8002c32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c1c:	f7fe ffaa 	bl	8001b74 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e0b5      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c32:	4b3e      	ldr	r3, [pc, #248]	; (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1ee      	bne.n	8002c1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c3e:	7dfb      	ldrb	r3, [r7, #23]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d105      	bne.n	8002c50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c44:	4b39      	ldr	r3, [pc, #228]	; (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	4a38      	ldr	r2, [pc, #224]	; (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002c4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 80a1 	beq.w	8002d9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c5a:	4b34      	ldr	r3, [pc, #208]	; (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d05c      	beq.n	8002d20 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d141      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6e:	4b31      	ldr	r3, [pc, #196]	; (8002d34 <HAL_RCC_OscConfig+0x478>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c74:	f7fe ff7e 	bl	8001b74 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c7c:	f7fe ff7a 	bl	8001b74 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e087      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c8e:	4b27      	ldr	r3, [pc, #156]	; (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69da      	ldr	r2, [r3, #28]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	019b      	lsls	r3, r3, #6
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb0:	085b      	lsrs	r3, r3, #1
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	041b      	lsls	r3, r3, #16
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbc:	061b      	lsls	r3, r3, #24
 8002cbe:	491b      	ldr	r1, [pc, #108]	; (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cc4:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <HAL_RCC_OscConfig+0x478>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cca:	f7fe ff53 	bl	8001b74 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd2:	f7fe ff4f 	bl	8001b74 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e05c      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce4:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0f0      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x416>
 8002cf0:	e054      	b.n	8002d9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf2:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <HAL_RCC_OscConfig+0x478>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf8:	f7fe ff3c 	bl	8001b74 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d00:	f7fe ff38 	bl	8001b74 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e045      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d12:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f0      	bne.n	8002d00 <HAL_RCC_OscConfig+0x444>
 8002d1e:	e03d      	b.n	8002d9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d107      	bne.n	8002d38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e038      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40007000 	.word	0x40007000
 8002d34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d38:	4b1b      	ldr	r3, [pc, #108]	; (8002da8 <HAL_RCC_OscConfig+0x4ec>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d028      	beq.n	8002d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d121      	bne.n	8002d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d11a      	bne.n	8002d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d68:	4013      	ands	r3, r2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d111      	bne.n	8002d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	085b      	lsrs	r3, r3, #1
 8002d80:	3b01      	subs	r3, #1
 8002d82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d107      	bne.n	8002d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d001      	beq.n	8002d9c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40023800 	.word	0x40023800

08002dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e0cc      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc0:	4b68      	ldr	r3, [pc, #416]	; (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d90c      	bls.n	8002de8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dce:	4b65      	ldr	r3, [pc, #404]	; (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd6:	4b63      	ldr	r3, [pc, #396]	; (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0b8      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d020      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e00:	4b59      	ldr	r3, [pc, #356]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	4a58      	ldr	r2, [pc, #352]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e18:	4b53      	ldr	r3, [pc, #332]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	4a52      	ldr	r2, [pc, #328]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e24:	4b50      	ldr	r3, [pc, #320]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	494d      	ldr	r1, [pc, #308]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d044      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d107      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4a:	4b47      	ldr	r3, [pc, #284]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d119      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e07f      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d003      	beq.n	8002e6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d107      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e6a:	4b3f      	ldr	r3, [pc, #252]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d109      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e06f      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7a:	4b3b      	ldr	r3, [pc, #236]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e067      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e8a:	4b37      	ldr	r3, [pc, #220]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f023 0203 	bic.w	r2, r3, #3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	4934      	ldr	r1, [pc, #208]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e9c:	f7fe fe6a 	bl	8001b74 <HAL_GetTick>
 8002ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea2:	e00a      	b.n	8002eba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea4:	f7fe fe66 	bl	8001b74 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e04f      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eba:	4b2b      	ldr	r3, [pc, #172]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 020c 	and.w	r2, r3, #12
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d1eb      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ecc:	4b25      	ldr	r3, [pc, #148]	; (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d20c      	bcs.n	8002ef4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eda:	4b22      	ldr	r3, [pc, #136]	; (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee2:	4b20      	ldr	r3, [pc, #128]	; (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e032      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d008      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f00:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	4916      	ldr	r1, [pc, #88]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d009      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f1e:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	490e      	ldr	r1, [pc, #56]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f32:	f000 f821 	bl	8002f78 <HAL_RCC_GetSysClockFreq>
 8002f36:	4602      	mov	r2, r0
 8002f38:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	490a      	ldr	r1, [pc, #40]	; (8002f6c <HAL_RCC_ClockConfig+0x1c0>)
 8002f44:	5ccb      	ldrb	r3, [r1, r3]
 8002f46:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4a:	4a09      	ldr	r2, [pc, #36]	; (8002f70 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f4e:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <HAL_RCC_ClockConfig+0x1c8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fe fdca 	bl	8001aec <HAL_InitTick>

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40023c00 	.word	0x40023c00
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	08006650 	.word	0x08006650
 8002f70:	20000000 	.word	0x20000000
 8002f74:	20000004 	.word	0x20000004

08002f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f7c:	b094      	sub	sp, #80	; 0x50
 8002f7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	647b      	str	r3, [r7, #68]	; 0x44
 8002f84:	2300      	movs	r3, #0
 8002f86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f88:	2300      	movs	r3, #0
 8002f8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f90:	4b79      	ldr	r3, [pc, #484]	; (8003178 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 030c 	and.w	r3, r3, #12
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d00d      	beq.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x40>
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	f200 80e1 	bhi.w	8003164 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0x34>
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d003      	beq.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002faa:	e0db      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fac:	4b73      	ldr	r3, [pc, #460]	; (800317c <HAL_RCC_GetSysClockFreq+0x204>)
 8002fae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002fb0:	e0db      	b.n	800316a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fb2:	4b73      	ldr	r3, [pc, #460]	; (8003180 <HAL_RCC_GetSysClockFreq+0x208>)
 8002fb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fb6:	e0d8      	b.n	800316a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fb8:	4b6f      	ldr	r3, [pc, #444]	; (8003178 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fc0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fc2:	4b6d      	ldr	r3, [pc, #436]	; (8003178 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d063      	beq.n	8003096 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fce:	4b6a      	ldr	r3, [pc, #424]	; (8003178 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	099b      	lsrs	r3, r3, #6
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fd8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fe0:	633b      	str	r3, [r7, #48]	; 0x30
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8002fe6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fea:	4622      	mov	r2, r4
 8002fec:	462b      	mov	r3, r5
 8002fee:	f04f 0000 	mov.w	r0, #0
 8002ff2:	f04f 0100 	mov.w	r1, #0
 8002ff6:	0159      	lsls	r1, r3, #5
 8002ff8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ffc:	0150      	lsls	r0, r2, #5
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4621      	mov	r1, r4
 8003004:	1a51      	subs	r1, r2, r1
 8003006:	6139      	str	r1, [r7, #16]
 8003008:	4629      	mov	r1, r5
 800300a:	eb63 0301 	sbc.w	r3, r3, r1
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800301c:	4659      	mov	r1, fp
 800301e:	018b      	lsls	r3, r1, #6
 8003020:	4651      	mov	r1, sl
 8003022:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003026:	4651      	mov	r1, sl
 8003028:	018a      	lsls	r2, r1, #6
 800302a:	4651      	mov	r1, sl
 800302c:	ebb2 0801 	subs.w	r8, r2, r1
 8003030:	4659      	mov	r1, fp
 8003032:	eb63 0901 	sbc.w	r9, r3, r1
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003042:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003046:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800304a:	4690      	mov	r8, r2
 800304c:	4699      	mov	r9, r3
 800304e:	4623      	mov	r3, r4
 8003050:	eb18 0303 	adds.w	r3, r8, r3
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	462b      	mov	r3, r5
 8003058:	eb49 0303 	adc.w	r3, r9, r3
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800306a:	4629      	mov	r1, r5
 800306c:	024b      	lsls	r3, r1, #9
 800306e:	4621      	mov	r1, r4
 8003070:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003074:	4621      	mov	r1, r4
 8003076:	024a      	lsls	r2, r1, #9
 8003078:	4610      	mov	r0, r2
 800307a:	4619      	mov	r1, r3
 800307c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800307e:	2200      	movs	r2, #0
 8003080:	62bb      	str	r3, [r7, #40]	; 0x28
 8003082:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003084:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003088:	f7fd f8fa 	bl	8000280 <__aeabi_uldivmod>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4613      	mov	r3, r2
 8003092:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003094:	e058      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003096:	4b38      	ldr	r3, [pc, #224]	; (8003178 <HAL_RCC_GetSysClockFreq+0x200>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	099b      	lsrs	r3, r3, #6
 800309c:	2200      	movs	r2, #0
 800309e:	4618      	mov	r0, r3
 80030a0:	4611      	mov	r1, r2
 80030a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030a6:	623b      	str	r3, [r7, #32]
 80030a8:	2300      	movs	r3, #0
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
 80030ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030b0:	4642      	mov	r2, r8
 80030b2:	464b      	mov	r3, r9
 80030b4:	f04f 0000 	mov.w	r0, #0
 80030b8:	f04f 0100 	mov.w	r1, #0
 80030bc:	0159      	lsls	r1, r3, #5
 80030be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030c2:	0150      	lsls	r0, r2, #5
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4641      	mov	r1, r8
 80030ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80030ce:	4649      	mov	r1, r9
 80030d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030e8:	ebb2 040a 	subs.w	r4, r2, sl
 80030ec:	eb63 050b 	sbc.w	r5, r3, fp
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	00eb      	lsls	r3, r5, #3
 80030fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030fe:	00e2      	lsls	r2, r4, #3
 8003100:	4614      	mov	r4, r2
 8003102:	461d      	mov	r5, r3
 8003104:	4643      	mov	r3, r8
 8003106:	18e3      	adds	r3, r4, r3
 8003108:	603b      	str	r3, [r7, #0]
 800310a:	464b      	mov	r3, r9
 800310c:	eb45 0303 	adc.w	r3, r5, r3
 8003110:	607b      	str	r3, [r7, #4]
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800311e:	4629      	mov	r1, r5
 8003120:	028b      	lsls	r3, r1, #10
 8003122:	4621      	mov	r1, r4
 8003124:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003128:	4621      	mov	r1, r4
 800312a:	028a      	lsls	r2, r1, #10
 800312c:	4610      	mov	r0, r2
 800312e:	4619      	mov	r1, r3
 8003130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003132:	2200      	movs	r2, #0
 8003134:	61bb      	str	r3, [r7, #24]
 8003136:	61fa      	str	r2, [r7, #28]
 8003138:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800313c:	f7fd f8a0 	bl	8000280 <__aeabi_uldivmod>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4613      	mov	r3, r2
 8003146:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <HAL_RCC_GetSysClockFreq+0x200>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	0c1b      	lsrs	r3, r3, #16
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	3301      	adds	r3, #1
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003158:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800315a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800315c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003160:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003162:	e002      	b.n	800316a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003164:	4b05      	ldr	r3, [pc, #20]	; (800317c <HAL_RCC_GetSysClockFreq+0x204>)
 8003166:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800316a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800316c:	4618      	mov	r0, r3
 800316e:	3750      	adds	r7, #80	; 0x50
 8003170:	46bd      	mov	sp, r7
 8003172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003176:	bf00      	nop
 8003178:	40023800 	.word	0x40023800
 800317c:	00f42400 	.word	0x00f42400
 8003180:	007a1200 	.word	0x007a1200

08003184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003188:	4b03      	ldr	r3, [pc, #12]	; (8003198 <HAL_RCC_GetHCLKFreq+0x14>)
 800318a:	681b      	ldr	r3, [r3, #0]
}
 800318c:	4618      	mov	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	20000000 	.word	0x20000000

0800319c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031a0:	f7ff fff0 	bl	8003184 <HAL_RCC_GetHCLKFreq>
 80031a4:	4602      	mov	r2, r0
 80031a6:	4b05      	ldr	r3, [pc, #20]	; (80031bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	0a9b      	lsrs	r3, r3, #10
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	4903      	ldr	r1, [pc, #12]	; (80031c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031b2:	5ccb      	ldrb	r3, [r1, r3]
 80031b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40023800 	.word	0x40023800
 80031c0:	08006660 	.word	0x08006660

080031c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031c8:	f7ff ffdc 	bl	8003184 <HAL_RCC_GetHCLKFreq>
 80031cc:	4602      	mov	r2, r0
 80031ce:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	0b5b      	lsrs	r3, r3, #13
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	4903      	ldr	r1, [pc, #12]	; (80031e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031da:	5ccb      	ldrb	r3, [r1, r3]
 80031dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40023800 	.word	0x40023800
 80031e8:	08006660 	.word	0x08006660

080031ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e041      	b.n	8003282 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d106      	bne.n	8003218 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7fe f962 	bl	80014dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3304      	adds	r3, #4
 8003228:	4619      	mov	r1, r3
 800322a:	4610      	mov	r0, r2
 800322c:	f000 fbf0 	bl	8003a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b082      	sub	sp, #8
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e041      	b.n	8003320 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d106      	bne.n	80032b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f839 	bl	8003328 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2202      	movs	r2, #2
 80032ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3304      	adds	r3, #4
 80032c6:	4619      	mov	r1, r3
 80032c8:	4610      	mov	r0, r2
 80032ca:	f000 fba1 	bl	8003a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d109      	bne.n	8003360 <HAL_TIM_PWM_Start+0x24>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b01      	cmp	r3, #1
 8003356:	bf14      	ite	ne
 8003358:	2301      	movne	r3, #1
 800335a:	2300      	moveq	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	e022      	b.n	80033a6 <HAL_TIM_PWM_Start+0x6a>
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	2b04      	cmp	r3, #4
 8003364:	d109      	bne.n	800337a <HAL_TIM_PWM_Start+0x3e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b01      	cmp	r3, #1
 8003370:	bf14      	ite	ne
 8003372:	2301      	movne	r3, #1
 8003374:	2300      	moveq	r3, #0
 8003376:	b2db      	uxtb	r3, r3
 8003378:	e015      	b.n	80033a6 <HAL_TIM_PWM_Start+0x6a>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b08      	cmp	r3, #8
 800337e:	d109      	bne.n	8003394 <HAL_TIM_PWM_Start+0x58>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b01      	cmp	r3, #1
 800338a:	bf14      	ite	ne
 800338c:	2301      	movne	r3, #1
 800338e:	2300      	moveq	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	e008      	b.n	80033a6 <HAL_TIM_PWM_Start+0x6a>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b01      	cmp	r3, #1
 800339e:	bf14      	ite	ne
 80033a0:	2301      	movne	r3, #1
 80033a2:	2300      	moveq	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e068      	b.n	8003480 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d104      	bne.n	80033be <HAL_TIM_PWM_Start+0x82>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033bc:	e013      	b.n	80033e6 <HAL_TIM_PWM_Start+0xaa>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	d104      	bne.n	80033ce <HAL_TIM_PWM_Start+0x92>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033cc:	e00b      	b.n	80033e6 <HAL_TIM_PWM_Start+0xaa>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d104      	bne.n	80033de <HAL_TIM_PWM_Start+0xa2>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033dc:	e003      	b.n	80033e6 <HAL_TIM_PWM_Start+0xaa>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2202      	movs	r2, #2
 80033e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2201      	movs	r2, #1
 80033ec:	6839      	ldr	r1, [r7, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fdb4 	bl	8003f5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a23      	ldr	r2, [pc, #140]	; (8003488 <HAL_TIM_PWM_Start+0x14c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d107      	bne.n	800340e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800340c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a1d      	ldr	r2, [pc, #116]	; (8003488 <HAL_TIM_PWM_Start+0x14c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d018      	beq.n	800344a <HAL_TIM_PWM_Start+0x10e>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003420:	d013      	beq.n	800344a <HAL_TIM_PWM_Start+0x10e>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a19      	ldr	r2, [pc, #100]	; (800348c <HAL_TIM_PWM_Start+0x150>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d00e      	beq.n	800344a <HAL_TIM_PWM_Start+0x10e>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a17      	ldr	r2, [pc, #92]	; (8003490 <HAL_TIM_PWM_Start+0x154>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d009      	beq.n	800344a <HAL_TIM_PWM_Start+0x10e>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a16      	ldr	r2, [pc, #88]	; (8003494 <HAL_TIM_PWM_Start+0x158>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d004      	beq.n	800344a <HAL_TIM_PWM_Start+0x10e>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a14      	ldr	r2, [pc, #80]	; (8003498 <HAL_TIM_PWM_Start+0x15c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d111      	bne.n	800346e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2b06      	cmp	r3, #6
 800345a:	d010      	beq.n	800347e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800346c:	e007      	b.n	800347e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f042 0201 	orr.w	r2, r2, #1
 800347c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40010000 	.word	0x40010000
 800348c:	40000400 	.word	0x40000400
 8003490:	40000800 	.word	0x40000800
 8003494:	40000c00 	.word	0x40000c00
 8003498:	40014000 	.word	0x40014000

0800349c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d122      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d11b      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0202 	mvn.w	r2, #2
 80034c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fa77 	bl	80039d2 <HAL_TIM_IC_CaptureCallback>
 80034e4:	e005      	b.n	80034f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 fa69 	bl	80039be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 fa7a 	bl	80039e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b04      	cmp	r3, #4
 8003504:	d122      	bne.n	800354c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b04      	cmp	r3, #4
 8003512:	d11b      	bne.n	800354c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f06f 0204 	mvn.w	r2, #4
 800351c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2202      	movs	r2, #2
 8003522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fa4d 	bl	80039d2 <HAL_TIM_IC_CaptureCallback>
 8003538:	e005      	b.n	8003546 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 fa3f 	bl	80039be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 fa50 	bl	80039e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b08      	cmp	r3, #8
 8003558:	d122      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b08      	cmp	r3, #8
 8003566:	d11b      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f06f 0208 	mvn.w	r2, #8
 8003570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2204      	movs	r2, #4
 8003576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 fa23 	bl	80039d2 <HAL_TIM_IC_CaptureCallback>
 800358c:	e005      	b.n	800359a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 fa15 	bl	80039be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 fa26 	bl	80039e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f003 0310 	and.w	r3, r3, #16
 80035aa:	2b10      	cmp	r3, #16
 80035ac:	d122      	bne.n	80035f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b10      	cmp	r3, #16
 80035ba:	d11b      	bne.n	80035f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0210 	mvn.w	r2, #16
 80035c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2208      	movs	r2, #8
 80035ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f9f9 	bl	80039d2 <HAL_TIM_IC_CaptureCallback>
 80035e0:	e005      	b.n	80035ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f9eb 	bl	80039be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f9fc 	bl	80039e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d10e      	bne.n	8003620 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b01      	cmp	r3, #1
 800360e:	d107      	bne.n	8003620 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0201 	mvn.w	r2, #1
 8003618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7fd fb08 	bl	8000c30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362a:	2b80      	cmp	r3, #128	; 0x80
 800362c:	d10e      	bne.n	800364c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003638:	2b80      	cmp	r3, #128	; 0x80
 800363a:	d107      	bne.n	800364c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fd78 	bl	800413c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003656:	2b40      	cmp	r3, #64	; 0x40
 8003658:	d10e      	bne.n	8003678 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003664:	2b40      	cmp	r3, #64	; 0x40
 8003666:	d107      	bne.n	8003678 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f9c1 	bl	80039fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b20      	cmp	r3, #32
 8003684:	d10e      	bne.n	80036a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f003 0320 	and.w	r3, r3, #32
 8003690:	2b20      	cmp	r3, #32
 8003692:	d107      	bne.n	80036a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f06f 0220 	mvn.w	r2, #32
 800369c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 fd42 	bl	8004128 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036a4:	bf00      	nop
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e0ae      	b.n	8003828 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b0c      	cmp	r3, #12
 80036d6:	f200 809f 	bhi.w	8003818 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036da:	a201      	add	r2, pc, #4	; (adr r2, 80036e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e0:	08003715 	.word	0x08003715
 80036e4:	08003819 	.word	0x08003819
 80036e8:	08003819 	.word	0x08003819
 80036ec:	08003819 	.word	0x08003819
 80036f0:	08003755 	.word	0x08003755
 80036f4:	08003819 	.word	0x08003819
 80036f8:	08003819 	.word	0x08003819
 80036fc:	08003819 	.word	0x08003819
 8003700:	08003797 	.word	0x08003797
 8003704:	08003819 	.word	0x08003819
 8003708:	08003819 	.word	0x08003819
 800370c:	08003819 	.word	0x08003819
 8003710:	080037d7 	.word	0x080037d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68b9      	ldr	r1, [r7, #8]
 800371a:	4618      	mov	r0, r3
 800371c:	f000 f9f8 	bl	8003b10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699a      	ldr	r2, [r3, #24]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0208 	orr.w	r2, r2, #8
 800372e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699a      	ldr	r2, [r3, #24]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0204 	bic.w	r2, r2, #4
 800373e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6999      	ldr	r1, [r3, #24]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	619a      	str	r2, [r3, #24]
      break;
 8003752:	e064      	b.n	800381e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68b9      	ldr	r1, [r7, #8]
 800375a:	4618      	mov	r0, r3
 800375c:	f000 fa3e 	bl	8003bdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699a      	ldr	r2, [r3, #24]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800376e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699a      	ldr	r2, [r3, #24]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800377e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6999      	ldr	r1, [r3, #24]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	021a      	lsls	r2, r3, #8
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	619a      	str	r2, [r3, #24]
      break;
 8003794:	e043      	b.n	800381e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68b9      	ldr	r1, [r7, #8]
 800379c:	4618      	mov	r0, r3
 800379e:	f000 fa89 	bl	8003cb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	69da      	ldr	r2, [r3, #28]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 0208 	orr.w	r2, r2, #8
 80037b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	69da      	ldr	r2, [r3, #28]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0204 	bic.w	r2, r2, #4
 80037c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69d9      	ldr	r1, [r3, #28]
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	61da      	str	r2, [r3, #28]
      break;
 80037d4:	e023      	b.n	800381e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68b9      	ldr	r1, [r7, #8]
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 fad3 	bl	8003d88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	69da      	ldr	r2, [r3, #28]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69da      	ldr	r2, [r3, #28]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69d9      	ldr	r1, [r3, #28]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	021a      	lsls	r2, r3, #8
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	61da      	str	r2, [r3, #28]
      break;
 8003816:	e002      	b.n	800381e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	75fb      	strb	r3, [r7, #23]
      break;
 800381c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003826:	7dfb      	ldrb	r3, [r7, #23]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_TIM_ConfigClockSource+0x1c>
 8003848:	2302      	movs	r3, #2
 800384a:	e0b4      	b.n	80039b6 <HAL_TIM_ConfigClockSource+0x186>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800386a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003872:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003884:	d03e      	beq.n	8003904 <HAL_TIM_ConfigClockSource+0xd4>
 8003886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800388a:	f200 8087 	bhi.w	800399c <HAL_TIM_ConfigClockSource+0x16c>
 800388e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003892:	f000 8086 	beq.w	80039a2 <HAL_TIM_ConfigClockSource+0x172>
 8003896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800389a:	d87f      	bhi.n	800399c <HAL_TIM_ConfigClockSource+0x16c>
 800389c:	2b70      	cmp	r3, #112	; 0x70
 800389e:	d01a      	beq.n	80038d6 <HAL_TIM_ConfigClockSource+0xa6>
 80038a0:	2b70      	cmp	r3, #112	; 0x70
 80038a2:	d87b      	bhi.n	800399c <HAL_TIM_ConfigClockSource+0x16c>
 80038a4:	2b60      	cmp	r3, #96	; 0x60
 80038a6:	d050      	beq.n	800394a <HAL_TIM_ConfigClockSource+0x11a>
 80038a8:	2b60      	cmp	r3, #96	; 0x60
 80038aa:	d877      	bhi.n	800399c <HAL_TIM_ConfigClockSource+0x16c>
 80038ac:	2b50      	cmp	r3, #80	; 0x50
 80038ae:	d03c      	beq.n	800392a <HAL_TIM_ConfigClockSource+0xfa>
 80038b0:	2b50      	cmp	r3, #80	; 0x50
 80038b2:	d873      	bhi.n	800399c <HAL_TIM_ConfigClockSource+0x16c>
 80038b4:	2b40      	cmp	r3, #64	; 0x40
 80038b6:	d058      	beq.n	800396a <HAL_TIM_ConfigClockSource+0x13a>
 80038b8:	2b40      	cmp	r3, #64	; 0x40
 80038ba:	d86f      	bhi.n	800399c <HAL_TIM_ConfigClockSource+0x16c>
 80038bc:	2b30      	cmp	r3, #48	; 0x30
 80038be:	d064      	beq.n	800398a <HAL_TIM_ConfigClockSource+0x15a>
 80038c0:	2b30      	cmp	r3, #48	; 0x30
 80038c2:	d86b      	bhi.n	800399c <HAL_TIM_ConfigClockSource+0x16c>
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	d060      	beq.n	800398a <HAL_TIM_ConfigClockSource+0x15a>
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	d867      	bhi.n	800399c <HAL_TIM_ConfigClockSource+0x16c>
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d05c      	beq.n	800398a <HAL_TIM_ConfigClockSource+0x15a>
 80038d0:	2b10      	cmp	r3, #16
 80038d2:	d05a      	beq.n	800398a <HAL_TIM_ConfigClockSource+0x15a>
 80038d4:	e062      	b.n	800399c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	6899      	ldr	r1, [r3, #8]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f000 fb19 	bl	8003f1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	609a      	str	r2, [r3, #8]
      break;
 8003902:	e04f      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6818      	ldr	r0, [r3, #0]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	6899      	ldr	r1, [r3, #8]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f000 fb02 	bl	8003f1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003926:	609a      	str	r2, [r3, #8]
      break;
 8003928:	e03c      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6818      	ldr	r0, [r3, #0]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6859      	ldr	r1, [r3, #4]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	461a      	mov	r2, r3
 8003938:	f000 fa76 	bl	8003e28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2150      	movs	r1, #80	; 0x50
 8003942:	4618      	mov	r0, r3
 8003944:	f000 facf 	bl	8003ee6 <TIM_ITRx_SetConfig>
      break;
 8003948:	e02c      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6818      	ldr	r0, [r3, #0]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	6859      	ldr	r1, [r3, #4]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	461a      	mov	r2, r3
 8003958:	f000 fa95 	bl	8003e86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2160      	movs	r1, #96	; 0x60
 8003962:	4618      	mov	r0, r3
 8003964:	f000 fabf 	bl	8003ee6 <TIM_ITRx_SetConfig>
      break;
 8003968:	e01c      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6818      	ldr	r0, [r3, #0]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	6859      	ldr	r1, [r3, #4]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	461a      	mov	r2, r3
 8003978:	f000 fa56 	bl	8003e28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2140      	movs	r1, #64	; 0x40
 8003982:	4618      	mov	r0, r3
 8003984:	f000 faaf 	bl	8003ee6 <TIM_ITRx_SetConfig>
      break;
 8003988:	e00c      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4619      	mov	r1, r3
 8003994:	4610      	mov	r0, r2
 8003996:	f000 faa6 	bl	8003ee6 <TIM_ITRx_SetConfig>
      break;
 800399a:	e003      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	73fb      	strb	r3, [r7, #15]
      break;
 80039a0:	e000      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
	...

08003a10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a34      	ldr	r2, [pc, #208]	; (8003af4 <TIM_Base_SetConfig+0xe4>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d00f      	beq.n	8003a48 <TIM_Base_SetConfig+0x38>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a2e:	d00b      	beq.n	8003a48 <TIM_Base_SetConfig+0x38>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a31      	ldr	r2, [pc, #196]	; (8003af8 <TIM_Base_SetConfig+0xe8>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d007      	beq.n	8003a48 <TIM_Base_SetConfig+0x38>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a30      	ldr	r2, [pc, #192]	; (8003afc <TIM_Base_SetConfig+0xec>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d003      	beq.n	8003a48 <TIM_Base_SetConfig+0x38>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a2f      	ldr	r2, [pc, #188]	; (8003b00 <TIM_Base_SetConfig+0xf0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d108      	bne.n	8003a5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a25      	ldr	r2, [pc, #148]	; (8003af4 <TIM_Base_SetConfig+0xe4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d01b      	beq.n	8003a9a <TIM_Base_SetConfig+0x8a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a68:	d017      	beq.n	8003a9a <TIM_Base_SetConfig+0x8a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a22      	ldr	r2, [pc, #136]	; (8003af8 <TIM_Base_SetConfig+0xe8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d013      	beq.n	8003a9a <TIM_Base_SetConfig+0x8a>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a21      	ldr	r2, [pc, #132]	; (8003afc <TIM_Base_SetConfig+0xec>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00f      	beq.n	8003a9a <TIM_Base_SetConfig+0x8a>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a20      	ldr	r2, [pc, #128]	; (8003b00 <TIM_Base_SetConfig+0xf0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d00b      	beq.n	8003a9a <TIM_Base_SetConfig+0x8a>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a1f      	ldr	r2, [pc, #124]	; (8003b04 <TIM_Base_SetConfig+0xf4>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d007      	beq.n	8003a9a <TIM_Base_SetConfig+0x8a>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a1e      	ldr	r2, [pc, #120]	; (8003b08 <TIM_Base_SetConfig+0xf8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d003      	beq.n	8003a9a <TIM_Base_SetConfig+0x8a>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a1d      	ldr	r2, [pc, #116]	; (8003b0c <TIM_Base_SetConfig+0xfc>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d108      	bne.n	8003aac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a08      	ldr	r2, [pc, #32]	; (8003af4 <TIM_Base_SetConfig+0xe4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d103      	bne.n	8003ae0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	615a      	str	r2, [r3, #20]
}
 8003ae6:	bf00      	nop
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40010000 	.word	0x40010000
 8003af8:	40000400 	.word	0x40000400
 8003afc:	40000800 	.word	0x40000800
 8003b00:	40000c00 	.word	0x40000c00
 8003b04:	40014000 	.word	0x40014000
 8003b08:	40014400 	.word	0x40014400
 8003b0c:	40014800 	.word	0x40014800

08003b10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	f023 0201 	bic.w	r2, r3, #1
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f023 0303 	bic.w	r3, r3, #3
 8003b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f023 0302 	bic.w	r3, r3, #2
 8003b58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a1c      	ldr	r2, [pc, #112]	; (8003bd8 <TIM_OC1_SetConfig+0xc8>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d10c      	bne.n	8003b86 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f023 0308 	bic.w	r3, r3, #8
 8003b72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f023 0304 	bic.w	r3, r3, #4
 8003b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a13      	ldr	r2, [pc, #76]	; (8003bd8 <TIM_OC1_SetConfig+0xc8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d111      	bne.n	8003bb2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	621a      	str	r2, [r3, #32]
}
 8003bcc:	bf00      	nop
 8003bce:	371c      	adds	r7, #28
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	40010000 	.word	0x40010000

08003bdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	f023 0210 	bic.w	r2, r3, #16
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	021b      	lsls	r3, r3, #8
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f023 0320 	bic.w	r3, r3, #32
 8003c26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a1e      	ldr	r2, [pc, #120]	; (8003cb0 <TIM_OC2_SetConfig+0xd4>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d10d      	bne.n	8003c58 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a15      	ldr	r2, [pc, #84]	; (8003cb0 <TIM_OC2_SetConfig+0xd4>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d113      	bne.n	8003c88 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	621a      	str	r2, [r3, #32]
}
 8003ca2:	bf00      	nop
 8003ca4:	371c      	adds	r7, #28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40010000 	.word	0x40010000

08003cb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f023 0303 	bic.w	r3, r3, #3
 8003cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	021b      	lsls	r3, r3, #8
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a1d      	ldr	r2, [pc, #116]	; (8003d84 <TIM_OC3_SetConfig+0xd0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d10d      	bne.n	8003d2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	021b      	lsls	r3, r3, #8
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a14      	ldr	r2, [pc, #80]	; (8003d84 <TIM_OC3_SetConfig+0xd0>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d113      	bne.n	8003d5e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	621a      	str	r2, [r3, #32]
}
 8003d78:	bf00      	nop
 8003d7a:	371c      	adds	r7, #28
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	40010000 	.word	0x40010000

08003d88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	021b      	lsls	r3, r3, #8
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	031b      	lsls	r3, r3, #12
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a10      	ldr	r2, [pc, #64]	; (8003e24 <TIM_OC4_SetConfig+0x9c>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d109      	bne.n	8003dfc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	019b      	lsls	r3, r3, #6
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	621a      	str	r2, [r3, #32]
}
 8003e16:	bf00      	nop
 8003e18:	371c      	adds	r7, #28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40010000 	.word	0x40010000

08003e28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	f023 0201 	bic.w	r2, r3, #1
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f023 030a 	bic.w	r3, r3, #10
 8003e64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	621a      	str	r2, [r3, #32]
}
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b087      	sub	sp, #28
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	f023 0210 	bic.w	r2, r3, #16
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003eb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	031b      	lsls	r3, r3, #12
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ec2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	621a      	str	r2, [r3, #32]
}
 8003eda:	bf00      	nop
 8003edc:	371c      	adds	r7, #28
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b085      	sub	sp, #20
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
 8003eee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f043 0307 	orr.w	r3, r3, #7
 8003f08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	609a      	str	r2, [r3, #8]
}
 8003f10:	bf00      	nop
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	021a      	lsls	r2, r3, #8
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	609a      	str	r2, [r3, #8]
}
 8003f50:	bf00      	nop
 8003f52:	371c      	adds	r7, #28
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f003 031f 	and.w	r3, r3, #31
 8003f6e:	2201      	movs	r2, #1
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6a1a      	ldr	r2, [r3, #32]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	401a      	ands	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a1a      	ldr	r2, [r3, #32]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	f003 031f 	and.w	r3, r3, #31
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	fa01 f303 	lsl.w	r3, r1, r3
 8003f94:	431a      	orrs	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	621a      	str	r2, [r3, #32]
}
 8003f9a:	bf00      	nop
 8003f9c:	371c      	adds	r7, #28
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
	...

08003fa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d101      	bne.n	8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e050      	b.n	8004062 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a1c      	ldr	r2, [pc, #112]	; (8004070 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d018      	beq.n	8004036 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400c:	d013      	beq.n	8004036 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a18      	ldr	r2, [pc, #96]	; (8004074 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00e      	beq.n	8004036 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a16      	ldr	r2, [pc, #88]	; (8004078 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d009      	beq.n	8004036 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a15      	ldr	r2, [pc, #84]	; (800407c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d004      	beq.n	8004036 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a13      	ldr	r2, [pc, #76]	; (8004080 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d10c      	bne.n	8004050 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800403c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	4313      	orrs	r3, r2
 8004046:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	40010000 	.word	0x40010000
 8004074:	40000400 	.word	0x40000400
 8004078:	40000800 	.word	0x40000800
 800407c:	40000c00 	.word	0x40000c00
 8004080:	40014000 	.word	0x40014000

08004084 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800409c:	2302      	movs	r3, #2
 800409e:	e03d      	b.n	800411c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e03f      	b.n	80041e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d106      	bne.n	800417c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7fd fa66 	bl	8001648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2224      	movs	r2, #36	; 0x24
 8004180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004192:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f9cb 	bl	8004530 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	691a      	ldr	r2, [r3, #16]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695a      	ldr	r2, [r3, #20]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2220      	movs	r2, #32
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b08a      	sub	sp, #40	; 0x28
 80041ee:	af02      	add	r7, sp, #8
 80041f0:	60f8      	str	r0, [r7, #12]
 80041f2:	60b9      	str	r1, [r7, #8]
 80041f4:	603b      	str	r3, [r7, #0]
 80041f6:	4613      	mov	r3, r2
 80041f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b20      	cmp	r3, #32
 8004208:	d17c      	bne.n	8004304 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <HAL_UART_Transmit+0x2c>
 8004210:	88fb      	ldrh	r3, [r7, #6]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e075      	b.n	8004306 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004220:	2b01      	cmp	r3, #1
 8004222:	d101      	bne.n	8004228 <HAL_UART_Transmit+0x3e>
 8004224:	2302      	movs	r3, #2
 8004226:	e06e      	b.n	8004306 <HAL_UART_Transmit+0x11c>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2221      	movs	r2, #33	; 0x21
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800423e:	f7fd fc99 	bl	8001b74 <HAL_GetTick>
 8004242:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	88fa      	ldrh	r2, [r7, #6]
 8004248:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	88fa      	ldrh	r2, [r7, #6]
 800424e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004258:	d108      	bne.n	800426c <HAL_UART_Transmit+0x82>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d104      	bne.n	800426c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004262:	2300      	movs	r3, #0
 8004264:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	61bb      	str	r3, [r7, #24]
 800426a:	e003      	b.n	8004274 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004270:	2300      	movs	r3, #0
 8004272:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800427c:	e02a      	b.n	80042d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2200      	movs	r2, #0
 8004286:	2180      	movs	r1, #128	; 0x80
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 f8e2 	bl	8004452 <UART_WaitOnFlagUntilTimeout>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e036      	b.n	8004306 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10b      	bne.n	80042b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	461a      	mov	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	3302      	adds	r3, #2
 80042b2:	61bb      	str	r3, [r7, #24]
 80042b4:	e007      	b.n	80042c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	781a      	ldrb	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	3301      	adds	r3, #1
 80042c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042d8:	b29b      	uxth	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1cf      	bne.n	800427e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2200      	movs	r2, #0
 80042e6:	2140      	movs	r1, #64	; 0x40
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 f8b2 	bl	8004452 <UART_WaitOnFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e006      	b.n	8004306 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004300:	2300      	movs	r3, #0
 8004302:	e000      	b.n	8004306 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004304:	2302      	movs	r3, #2
  }
}
 8004306:	4618      	mov	r0, r3
 8004308:	3720      	adds	r7, #32
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b08a      	sub	sp, #40	; 0x28
 8004312:	af02      	add	r7, sp, #8
 8004314:	60f8      	str	r0, [r7, #12]
 8004316:	60b9      	str	r1, [r7, #8]
 8004318:	603b      	str	r3, [r7, #0]
 800431a:	4613      	mov	r3, r2
 800431c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800431e:	2300      	movs	r3, #0
 8004320:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b20      	cmp	r3, #32
 800432c:	f040 808c 	bne.w	8004448 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <HAL_UART_Receive+0x2e>
 8004336:	88fb      	ldrh	r3, [r7, #6]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e084      	b.n	800444a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004346:	2b01      	cmp	r3, #1
 8004348:	d101      	bne.n	800434e <HAL_UART_Receive+0x40>
 800434a:	2302      	movs	r3, #2
 800434c:	e07d      	b.n	800444a <HAL_UART_Receive+0x13c>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2222      	movs	r2, #34	; 0x22
 8004360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800436a:	f7fd fc03 	bl	8001b74 <HAL_GetTick>
 800436e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	88fa      	ldrh	r2, [r7, #6]
 8004374:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	88fa      	ldrh	r2, [r7, #6]
 800437a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004384:	d108      	bne.n	8004398 <HAL_UART_Receive+0x8a>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d104      	bne.n	8004398 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800438e:	2300      	movs	r3, #0
 8004390:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	61bb      	str	r3, [r7, #24]
 8004396:	e003      	b.n	80043a0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800439c:	2300      	movs	r3, #0
 800439e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80043a8:	e043      	b.n	8004432 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2200      	movs	r2, #0
 80043b2:	2120      	movs	r1, #32
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 f84c 	bl	8004452 <UART_WaitOnFlagUntilTimeout>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e042      	b.n	800444a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10c      	bne.n	80043e4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	3302      	adds	r3, #2
 80043e0:	61bb      	str	r3, [r7, #24]
 80043e2:	e01f      	b.n	8004424 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ec:	d007      	beq.n	80043fe <HAL_UART_Receive+0xf0>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10a      	bne.n	800440c <HAL_UART_Receive+0xfe>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	b2da      	uxtb	r2, r3
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	701a      	strb	r2, [r3, #0]
 800440a:	e008      	b.n	800441e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	b2db      	uxtb	r3, r3
 8004414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004418:	b2da      	uxtb	r2, r3
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	3301      	adds	r3, #1
 8004422:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004428:	b29b      	uxth	r3, r3
 800442a:	3b01      	subs	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004436:	b29b      	uxth	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1b6      	bne.n	80043aa <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004444:	2300      	movs	r3, #0
 8004446:	e000      	b.n	800444a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004448:	2302      	movs	r3, #2
  }
}
 800444a:	4618      	mov	r0, r3
 800444c:	3720      	adds	r7, #32
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b090      	sub	sp, #64	; 0x40
 8004456:	af00      	add	r7, sp, #0
 8004458:	60f8      	str	r0, [r7, #12]
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	603b      	str	r3, [r7, #0]
 800445e:	4613      	mov	r3, r2
 8004460:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004462:	e050      	b.n	8004506 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446a:	d04c      	beq.n	8004506 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800446c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800446e:	2b00      	cmp	r3, #0
 8004470:	d007      	beq.n	8004482 <UART_WaitOnFlagUntilTimeout+0x30>
 8004472:	f7fd fb7f 	bl	8001b74 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800447e:	429a      	cmp	r2, r3
 8004480:	d241      	bcs.n	8004506 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	330c      	adds	r3, #12
 8004488:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448c:	e853 3f00 	ldrex	r3, [r3]
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004494:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004498:	63fb      	str	r3, [r7, #60]	; 0x3c
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	330c      	adds	r3, #12
 80044a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044a2:	637a      	str	r2, [r7, #52]	; 0x34
 80044a4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044aa:	e841 2300 	strex	r3, r2, [r1]
 80044ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1e5      	bne.n	8004482 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3314      	adds	r3, #20
 80044bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	e853 3f00 	ldrex	r3, [r3]
 80044c4:	613b      	str	r3, [r7, #16]
   return(result);
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f023 0301 	bic.w	r3, r3, #1
 80044cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	3314      	adds	r3, #20
 80044d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044d6:	623a      	str	r2, [r7, #32]
 80044d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044da:	69f9      	ldr	r1, [r7, #28]
 80044dc:	6a3a      	ldr	r2, [r7, #32]
 80044de:	e841 2300 	strex	r3, r2, [r1]
 80044e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1e5      	bne.n	80044b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2220      	movs	r2, #32
 80044ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e00f      	b.n	8004526 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4013      	ands	r3, r2
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	429a      	cmp	r2, r3
 8004514:	bf0c      	ite	eq
 8004516:	2301      	moveq	r3, #1
 8004518:	2300      	movne	r3, #0
 800451a:	b2db      	uxtb	r3, r3
 800451c:	461a      	mov	r2, r3
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	429a      	cmp	r2, r3
 8004522:	d09f      	beq.n	8004464 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3740      	adds	r7, #64	; 0x40
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004534:	b0c0      	sub	sp, #256	; 0x100
 8004536:	af00      	add	r7, sp, #0
 8004538:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800453c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800454c:	68d9      	ldr	r1, [r3, #12]
 800454e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	ea40 0301 	orr.w	r3, r0, r1
 8004558:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800455a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	431a      	orrs	r2, r3
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	431a      	orrs	r2, r3
 8004570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	4313      	orrs	r3, r2
 8004578:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800457c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004588:	f021 010c 	bic.w	r1, r1, #12
 800458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004596:	430b      	orrs	r3, r1
 8004598:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800459a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045aa:	6999      	ldr	r1, [r3, #24]
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	ea40 0301 	orr.w	r3, r0, r1
 80045b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	4b8f      	ldr	r3, [pc, #572]	; (80047fc <UART_SetConfig+0x2cc>)
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d005      	beq.n	80045d0 <UART_SetConfig+0xa0>
 80045c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	4b8d      	ldr	r3, [pc, #564]	; (8004800 <UART_SetConfig+0x2d0>)
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d104      	bne.n	80045da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045d0:	f7fe fdf8 	bl	80031c4 <HAL_RCC_GetPCLK2Freq>
 80045d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80045d8:	e003      	b.n	80045e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045da:	f7fe fddf 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 80045de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ec:	f040 810c 	bne.w	8004808 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045f4:	2200      	movs	r2, #0
 80045f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80045fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004602:	4622      	mov	r2, r4
 8004604:	462b      	mov	r3, r5
 8004606:	1891      	adds	r1, r2, r2
 8004608:	65b9      	str	r1, [r7, #88]	; 0x58
 800460a:	415b      	adcs	r3, r3
 800460c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800460e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004612:	4621      	mov	r1, r4
 8004614:	eb12 0801 	adds.w	r8, r2, r1
 8004618:	4629      	mov	r1, r5
 800461a:	eb43 0901 	adc.w	r9, r3, r1
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	f04f 0300 	mov.w	r3, #0
 8004626:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800462a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800462e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004632:	4690      	mov	r8, r2
 8004634:	4699      	mov	r9, r3
 8004636:	4623      	mov	r3, r4
 8004638:	eb18 0303 	adds.w	r3, r8, r3
 800463c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004640:	462b      	mov	r3, r5
 8004642:	eb49 0303 	adc.w	r3, r9, r3
 8004646:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800464a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004656:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800465a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800465e:	460b      	mov	r3, r1
 8004660:	18db      	adds	r3, r3, r3
 8004662:	653b      	str	r3, [r7, #80]	; 0x50
 8004664:	4613      	mov	r3, r2
 8004666:	eb42 0303 	adc.w	r3, r2, r3
 800466a:	657b      	str	r3, [r7, #84]	; 0x54
 800466c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004670:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004674:	f7fb fe04 	bl	8000280 <__aeabi_uldivmod>
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	4b61      	ldr	r3, [pc, #388]	; (8004804 <UART_SetConfig+0x2d4>)
 800467e:	fba3 2302 	umull	r2, r3, r3, r2
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	011c      	lsls	r4, r3, #4
 8004686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800468a:	2200      	movs	r2, #0
 800468c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004690:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004694:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004698:	4642      	mov	r2, r8
 800469a:	464b      	mov	r3, r9
 800469c:	1891      	adds	r1, r2, r2
 800469e:	64b9      	str	r1, [r7, #72]	; 0x48
 80046a0:	415b      	adcs	r3, r3
 80046a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046a8:	4641      	mov	r1, r8
 80046aa:	eb12 0a01 	adds.w	sl, r2, r1
 80046ae:	4649      	mov	r1, r9
 80046b0:	eb43 0b01 	adc.w	fp, r3, r1
 80046b4:	f04f 0200 	mov.w	r2, #0
 80046b8:	f04f 0300 	mov.w	r3, #0
 80046bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046c8:	4692      	mov	sl, r2
 80046ca:	469b      	mov	fp, r3
 80046cc:	4643      	mov	r3, r8
 80046ce:	eb1a 0303 	adds.w	r3, sl, r3
 80046d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046d6:	464b      	mov	r3, r9
 80046d8:	eb4b 0303 	adc.w	r3, fp, r3
 80046dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80046e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80046f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80046f4:	460b      	mov	r3, r1
 80046f6:	18db      	adds	r3, r3, r3
 80046f8:	643b      	str	r3, [r7, #64]	; 0x40
 80046fa:	4613      	mov	r3, r2
 80046fc:	eb42 0303 	adc.w	r3, r2, r3
 8004700:	647b      	str	r3, [r7, #68]	; 0x44
 8004702:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004706:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800470a:	f7fb fdb9 	bl	8000280 <__aeabi_uldivmod>
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	4611      	mov	r1, r2
 8004714:	4b3b      	ldr	r3, [pc, #236]	; (8004804 <UART_SetConfig+0x2d4>)
 8004716:	fba3 2301 	umull	r2, r3, r3, r1
 800471a:	095b      	lsrs	r3, r3, #5
 800471c:	2264      	movs	r2, #100	; 0x64
 800471e:	fb02 f303 	mul.w	r3, r2, r3
 8004722:	1acb      	subs	r3, r1, r3
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800472a:	4b36      	ldr	r3, [pc, #216]	; (8004804 <UART_SetConfig+0x2d4>)
 800472c:	fba3 2302 	umull	r2, r3, r3, r2
 8004730:	095b      	lsrs	r3, r3, #5
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004738:	441c      	add	r4, r3
 800473a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800473e:	2200      	movs	r2, #0
 8004740:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004744:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004748:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800474c:	4642      	mov	r2, r8
 800474e:	464b      	mov	r3, r9
 8004750:	1891      	adds	r1, r2, r2
 8004752:	63b9      	str	r1, [r7, #56]	; 0x38
 8004754:	415b      	adcs	r3, r3
 8004756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004758:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800475c:	4641      	mov	r1, r8
 800475e:	1851      	adds	r1, r2, r1
 8004760:	6339      	str	r1, [r7, #48]	; 0x30
 8004762:	4649      	mov	r1, r9
 8004764:	414b      	adcs	r3, r1
 8004766:	637b      	str	r3, [r7, #52]	; 0x34
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004774:	4659      	mov	r1, fp
 8004776:	00cb      	lsls	r3, r1, #3
 8004778:	4651      	mov	r1, sl
 800477a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800477e:	4651      	mov	r1, sl
 8004780:	00ca      	lsls	r2, r1, #3
 8004782:	4610      	mov	r0, r2
 8004784:	4619      	mov	r1, r3
 8004786:	4603      	mov	r3, r0
 8004788:	4642      	mov	r2, r8
 800478a:	189b      	adds	r3, r3, r2
 800478c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004790:	464b      	mov	r3, r9
 8004792:	460a      	mov	r2, r1
 8004794:	eb42 0303 	adc.w	r3, r2, r3
 8004798:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800479c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80047a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80047ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80047b0:	460b      	mov	r3, r1
 80047b2:	18db      	adds	r3, r3, r3
 80047b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80047b6:	4613      	mov	r3, r2
 80047b8:	eb42 0303 	adc.w	r3, r2, r3
 80047bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80047c6:	f7fb fd5b 	bl	8000280 <__aeabi_uldivmod>
 80047ca:	4602      	mov	r2, r0
 80047cc:	460b      	mov	r3, r1
 80047ce:	4b0d      	ldr	r3, [pc, #52]	; (8004804 <UART_SetConfig+0x2d4>)
 80047d0:	fba3 1302 	umull	r1, r3, r3, r2
 80047d4:	095b      	lsrs	r3, r3, #5
 80047d6:	2164      	movs	r1, #100	; 0x64
 80047d8:	fb01 f303 	mul.w	r3, r1, r3
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	3332      	adds	r3, #50	; 0x32
 80047e2:	4a08      	ldr	r2, [pc, #32]	; (8004804 <UART_SetConfig+0x2d4>)
 80047e4:	fba2 2303 	umull	r2, r3, r2, r3
 80047e8:	095b      	lsrs	r3, r3, #5
 80047ea:	f003 0207 	and.w	r2, r3, #7
 80047ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4422      	add	r2, r4
 80047f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047f8:	e105      	b.n	8004a06 <UART_SetConfig+0x4d6>
 80047fa:	bf00      	nop
 80047fc:	40011000 	.word	0x40011000
 8004800:	40011400 	.word	0x40011400
 8004804:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004808:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800480c:	2200      	movs	r2, #0
 800480e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004812:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004816:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800481a:	4642      	mov	r2, r8
 800481c:	464b      	mov	r3, r9
 800481e:	1891      	adds	r1, r2, r2
 8004820:	6239      	str	r1, [r7, #32]
 8004822:	415b      	adcs	r3, r3
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
 8004826:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800482a:	4641      	mov	r1, r8
 800482c:	1854      	adds	r4, r2, r1
 800482e:	4649      	mov	r1, r9
 8004830:	eb43 0501 	adc.w	r5, r3, r1
 8004834:	f04f 0200 	mov.w	r2, #0
 8004838:	f04f 0300 	mov.w	r3, #0
 800483c:	00eb      	lsls	r3, r5, #3
 800483e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004842:	00e2      	lsls	r2, r4, #3
 8004844:	4614      	mov	r4, r2
 8004846:	461d      	mov	r5, r3
 8004848:	4643      	mov	r3, r8
 800484a:	18e3      	adds	r3, r4, r3
 800484c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004850:	464b      	mov	r3, r9
 8004852:	eb45 0303 	adc.w	r3, r5, r3
 8004856:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800485a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004866:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	f04f 0300 	mov.w	r3, #0
 8004872:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004876:	4629      	mov	r1, r5
 8004878:	008b      	lsls	r3, r1, #2
 800487a:	4621      	mov	r1, r4
 800487c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004880:	4621      	mov	r1, r4
 8004882:	008a      	lsls	r2, r1, #2
 8004884:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004888:	f7fb fcfa 	bl	8000280 <__aeabi_uldivmod>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4b60      	ldr	r3, [pc, #384]	; (8004a14 <UART_SetConfig+0x4e4>)
 8004892:	fba3 2302 	umull	r2, r3, r3, r2
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	011c      	lsls	r4, r3, #4
 800489a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800489e:	2200      	movs	r2, #0
 80048a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80048ac:	4642      	mov	r2, r8
 80048ae:	464b      	mov	r3, r9
 80048b0:	1891      	adds	r1, r2, r2
 80048b2:	61b9      	str	r1, [r7, #24]
 80048b4:	415b      	adcs	r3, r3
 80048b6:	61fb      	str	r3, [r7, #28]
 80048b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048bc:	4641      	mov	r1, r8
 80048be:	1851      	adds	r1, r2, r1
 80048c0:	6139      	str	r1, [r7, #16]
 80048c2:	4649      	mov	r1, r9
 80048c4:	414b      	adcs	r3, r1
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	f04f 0300 	mov.w	r3, #0
 80048d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048d4:	4659      	mov	r1, fp
 80048d6:	00cb      	lsls	r3, r1, #3
 80048d8:	4651      	mov	r1, sl
 80048da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048de:	4651      	mov	r1, sl
 80048e0:	00ca      	lsls	r2, r1, #3
 80048e2:	4610      	mov	r0, r2
 80048e4:	4619      	mov	r1, r3
 80048e6:	4603      	mov	r3, r0
 80048e8:	4642      	mov	r2, r8
 80048ea:	189b      	adds	r3, r3, r2
 80048ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048f0:	464b      	mov	r3, r9
 80048f2:	460a      	mov	r2, r1
 80048f4:	eb42 0303 	adc.w	r3, r2, r3
 80048f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	67bb      	str	r3, [r7, #120]	; 0x78
 8004906:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004914:	4649      	mov	r1, r9
 8004916:	008b      	lsls	r3, r1, #2
 8004918:	4641      	mov	r1, r8
 800491a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800491e:	4641      	mov	r1, r8
 8004920:	008a      	lsls	r2, r1, #2
 8004922:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004926:	f7fb fcab 	bl	8000280 <__aeabi_uldivmod>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	4b39      	ldr	r3, [pc, #228]	; (8004a14 <UART_SetConfig+0x4e4>)
 8004930:	fba3 1302 	umull	r1, r3, r3, r2
 8004934:	095b      	lsrs	r3, r3, #5
 8004936:	2164      	movs	r1, #100	; 0x64
 8004938:	fb01 f303 	mul.w	r3, r1, r3
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	3332      	adds	r3, #50	; 0x32
 8004942:	4a34      	ldr	r2, [pc, #208]	; (8004a14 <UART_SetConfig+0x4e4>)
 8004944:	fba2 2303 	umull	r2, r3, r2, r3
 8004948:	095b      	lsrs	r3, r3, #5
 800494a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800494e:	441c      	add	r4, r3
 8004950:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004954:	2200      	movs	r2, #0
 8004956:	673b      	str	r3, [r7, #112]	; 0x70
 8004958:	677a      	str	r2, [r7, #116]	; 0x74
 800495a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800495e:	4642      	mov	r2, r8
 8004960:	464b      	mov	r3, r9
 8004962:	1891      	adds	r1, r2, r2
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	415b      	adcs	r3, r3
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800496e:	4641      	mov	r1, r8
 8004970:	1851      	adds	r1, r2, r1
 8004972:	6039      	str	r1, [r7, #0]
 8004974:	4649      	mov	r1, r9
 8004976:	414b      	adcs	r3, r1
 8004978:	607b      	str	r3, [r7, #4]
 800497a:	f04f 0200 	mov.w	r2, #0
 800497e:	f04f 0300 	mov.w	r3, #0
 8004982:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004986:	4659      	mov	r1, fp
 8004988:	00cb      	lsls	r3, r1, #3
 800498a:	4651      	mov	r1, sl
 800498c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004990:	4651      	mov	r1, sl
 8004992:	00ca      	lsls	r2, r1, #3
 8004994:	4610      	mov	r0, r2
 8004996:	4619      	mov	r1, r3
 8004998:	4603      	mov	r3, r0
 800499a:	4642      	mov	r2, r8
 800499c:	189b      	adds	r3, r3, r2
 800499e:	66bb      	str	r3, [r7, #104]	; 0x68
 80049a0:	464b      	mov	r3, r9
 80049a2:	460a      	mov	r2, r1
 80049a4:	eb42 0303 	adc.w	r3, r2, r3
 80049a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	663b      	str	r3, [r7, #96]	; 0x60
 80049b4:	667a      	str	r2, [r7, #100]	; 0x64
 80049b6:	f04f 0200 	mov.w	r2, #0
 80049ba:	f04f 0300 	mov.w	r3, #0
 80049be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80049c2:	4649      	mov	r1, r9
 80049c4:	008b      	lsls	r3, r1, #2
 80049c6:	4641      	mov	r1, r8
 80049c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049cc:	4641      	mov	r1, r8
 80049ce:	008a      	lsls	r2, r1, #2
 80049d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80049d4:	f7fb fc54 	bl	8000280 <__aeabi_uldivmod>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4b0d      	ldr	r3, [pc, #52]	; (8004a14 <UART_SetConfig+0x4e4>)
 80049de:	fba3 1302 	umull	r1, r3, r3, r2
 80049e2:	095b      	lsrs	r3, r3, #5
 80049e4:	2164      	movs	r1, #100	; 0x64
 80049e6:	fb01 f303 	mul.w	r3, r1, r3
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	3332      	adds	r3, #50	; 0x32
 80049f0:	4a08      	ldr	r2, [pc, #32]	; (8004a14 <UART_SetConfig+0x4e4>)
 80049f2:	fba2 2303 	umull	r2, r3, r2, r3
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	f003 020f 	and.w	r2, r3, #15
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4422      	add	r2, r4
 8004a04:	609a      	str	r2, [r3, #8]
}
 8004a06:	bf00      	nop
 8004a08:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a12:	bf00      	nop
 8004a14:	51eb851f 	.word	0x51eb851f

08004a18 <__errno>:
 8004a18:	4b01      	ldr	r3, [pc, #4]	; (8004a20 <__errno+0x8>)
 8004a1a:	6818      	ldr	r0, [r3, #0]
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	2000000c 	.word	0x2000000c

08004a24 <__libc_init_array>:
 8004a24:	b570      	push	{r4, r5, r6, lr}
 8004a26:	4d0d      	ldr	r5, [pc, #52]	; (8004a5c <__libc_init_array+0x38>)
 8004a28:	4c0d      	ldr	r4, [pc, #52]	; (8004a60 <__libc_init_array+0x3c>)
 8004a2a:	1b64      	subs	r4, r4, r5
 8004a2c:	10a4      	asrs	r4, r4, #2
 8004a2e:	2600      	movs	r6, #0
 8004a30:	42a6      	cmp	r6, r4
 8004a32:	d109      	bne.n	8004a48 <__libc_init_array+0x24>
 8004a34:	4d0b      	ldr	r5, [pc, #44]	; (8004a64 <__libc_init_array+0x40>)
 8004a36:	4c0c      	ldr	r4, [pc, #48]	; (8004a68 <__libc_init_array+0x44>)
 8004a38:	f000 fc8e 	bl	8005358 <_init>
 8004a3c:	1b64      	subs	r4, r4, r5
 8004a3e:	10a4      	asrs	r4, r4, #2
 8004a40:	2600      	movs	r6, #0
 8004a42:	42a6      	cmp	r6, r4
 8004a44:	d105      	bne.n	8004a52 <__libc_init_array+0x2e>
 8004a46:	bd70      	pop	{r4, r5, r6, pc}
 8004a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a4c:	4798      	blx	r3
 8004a4e:	3601      	adds	r6, #1
 8004a50:	e7ee      	b.n	8004a30 <__libc_init_array+0xc>
 8004a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a56:	4798      	blx	r3
 8004a58:	3601      	adds	r6, #1
 8004a5a:	e7f2      	b.n	8004a42 <__libc_init_array+0x1e>
 8004a5c:	080066ac 	.word	0x080066ac
 8004a60:	080066ac 	.word	0x080066ac
 8004a64:	080066ac 	.word	0x080066ac
 8004a68:	080066b0 	.word	0x080066b0

08004a6c <memset>:
 8004a6c:	4402      	add	r2, r0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d100      	bne.n	8004a76 <memset+0xa>
 8004a74:	4770      	bx	lr
 8004a76:	f803 1b01 	strb.w	r1, [r3], #1
 8004a7a:	e7f9      	b.n	8004a70 <memset+0x4>

08004a7c <siprintf>:
 8004a7c:	b40e      	push	{r1, r2, r3}
 8004a7e:	b500      	push	{lr}
 8004a80:	b09c      	sub	sp, #112	; 0x70
 8004a82:	ab1d      	add	r3, sp, #116	; 0x74
 8004a84:	9002      	str	r0, [sp, #8]
 8004a86:	9006      	str	r0, [sp, #24]
 8004a88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a8c:	4809      	ldr	r0, [pc, #36]	; (8004ab4 <siprintf+0x38>)
 8004a8e:	9107      	str	r1, [sp, #28]
 8004a90:	9104      	str	r1, [sp, #16]
 8004a92:	4909      	ldr	r1, [pc, #36]	; (8004ab8 <siprintf+0x3c>)
 8004a94:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a98:	9105      	str	r1, [sp, #20]
 8004a9a:	6800      	ldr	r0, [r0, #0]
 8004a9c:	9301      	str	r3, [sp, #4]
 8004a9e:	a902      	add	r1, sp, #8
 8004aa0:	f000 f868 	bl	8004b74 <_svfiprintf_r>
 8004aa4:	9b02      	ldr	r3, [sp, #8]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	701a      	strb	r2, [r3, #0]
 8004aaa:	b01c      	add	sp, #112	; 0x70
 8004aac:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ab0:	b003      	add	sp, #12
 8004ab2:	4770      	bx	lr
 8004ab4:	2000000c 	.word	0x2000000c
 8004ab8:	ffff0208 	.word	0xffff0208

08004abc <__ssputs_r>:
 8004abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac0:	688e      	ldr	r6, [r1, #8]
 8004ac2:	429e      	cmp	r6, r3
 8004ac4:	4682      	mov	sl, r0
 8004ac6:	460c      	mov	r4, r1
 8004ac8:	4690      	mov	r8, r2
 8004aca:	461f      	mov	r7, r3
 8004acc:	d838      	bhi.n	8004b40 <__ssputs_r+0x84>
 8004ace:	898a      	ldrh	r2, [r1, #12]
 8004ad0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ad4:	d032      	beq.n	8004b3c <__ssputs_r+0x80>
 8004ad6:	6825      	ldr	r5, [r4, #0]
 8004ad8:	6909      	ldr	r1, [r1, #16]
 8004ada:	eba5 0901 	sub.w	r9, r5, r1
 8004ade:	6965      	ldr	r5, [r4, #20]
 8004ae0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ae4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ae8:	3301      	adds	r3, #1
 8004aea:	444b      	add	r3, r9
 8004aec:	106d      	asrs	r5, r5, #1
 8004aee:	429d      	cmp	r5, r3
 8004af0:	bf38      	it	cc
 8004af2:	461d      	movcc	r5, r3
 8004af4:	0553      	lsls	r3, r2, #21
 8004af6:	d531      	bpl.n	8004b5c <__ssputs_r+0xa0>
 8004af8:	4629      	mov	r1, r5
 8004afa:	f000 fb63 	bl	80051c4 <_malloc_r>
 8004afe:	4606      	mov	r6, r0
 8004b00:	b950      	cbnz	r0, 8004b18 <__ssputs_r+0x5c>
 8004b02:	230c      	movs	r3, #12
 8004b04:	f8ca 3000 	str.w	r3, [sl]
 8004b08:	89a3      	ldrh	r3, [r4, #12]
 8004b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b0e:	81a3      	strh	r3, [r4, #12]
 8004b10:	f04f 30ff 	mov.w	r0, #4294967295
 8004b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b18:	6921      	ldr	r1, [r4, #16]
 8004b1a:	464a      	mov	r2, r9
 8004b1c:	f000 fabe 	bl	800509c <memcpy>
 8004b20:	89a3      	ldrh	r3, [r4, #12]
 8004b22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b2a:	81a3      	strh	r3, [r4, #12]
 8004b2c:	6126      	str	r6, [r4, #16]
 8004b2e:	6165      	str	r5, [r4, #20]
 8004b30:	444e      	add	r6, r9
 8004b32:	eba5 0509 	sub.w	r5, r5, r9
 8004b36:	6026      	str	r6, [r4, #0]
 8004b38:	60a5      	str	r5, [r4, #8]
 8004b3a:	463e      	mov	r6, r7
 8004b3c:	42be      	cmp	r6, r7
 8004b3e:	d900      	bls.n	8004b42 <__ssputs_r+0x86>
 8004b40:	463e      	mov	r6, r7
 8004b42:	6820      	ldr	r0, [r4, #0]
 8004b44:	4632      	mov	r2, r6
 8004b46:	4641      	mov	r1, r8
 8004b48:	f000 fab6 	bl	80050b8 <memmove>
 8004b4c:	68a3      	ldr	r3, [r4, #8]
 8004b4e:	1b9b      	subs	r3, r3, r6
 8004b50:	60a3      	str	r3, [r4, #8]
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	4433      	add	r3, r6
 8004b56:	6023      	str	r3, [r4, #0]
 8004b58:	2000      	movs	r0, #0
 8004b5a:	e7db      	b.n	8004b14 <__ssputs_r+0x58>
 8004b5c:	462a      	mov	r2, r5
 8004b5e:	f000 fba5 	bl	80052ac <_realloc_r>
 8004b62:	4606      	mov	r6, r0
 8004b64:	2800      	cmp	r0, #0
 8004b66:	d1e1      	bne.n	8004b2c <__ssputs_r+0x70>
 8004b68:	6921      	ldr	r1, [r4, #16]
 8004b6a:	4650      	mov	r0, sl
 8004b6c:	f000 fabe 	bl	80050ec <_free_r>
 8004b70:	e7c7      	b.n	8004b02 <__ssputs_r+0x46>
	...

08004b74 <_svfiprintf_r>:
 8004b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b78:	4698      	mov	r8, r3
 8004b7a:	898b      	ldrh	r3, [r1, #12]
 8004b7c:	061b      	lsls	r3, r3, #24
 8004b7e:	b09d      	sub	sp, #116	; 0x74
 8004b80:	4607      	mov	r7, r0
 8004b82:	460d      	mov	r5, r1
 8004b84:	4614      	mov	r4, r2
 8004b86:	d50e      	bpl.n	8004ba6 <_svfiprintf_r+0x32>
 8004b88:	690b      	ldr	r3, [r1, #16]
 8004b8a:	b963      	cbnz	r3, 8004ba6 <_svfiprintf_r+0x32>
 8004b8c:	2140      	movs	r1, #64	; 0x40
 8004b8e:	f000 fb19 	bl	80051c4 <_malloc_r>
 8004b92:	6028      	str	r0, [r5, #0]
 8004b94:	6128      	str	r0, [r5, #16]
 8004b96:	b920      	cbnz	r0, 8004ba2 <_svfiprintf_r+0x2e>
 8004b98:	230c      	movs	r3, #12
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba0:	e0d1      	b.n	8004d46 <_svfiprintf_r+0x1d2>
 8004ba2:	2340      	movs	r3, #64	; 0x40
 8004ba4:	616b      	str	r3, [r5, #20]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8004baa:	2320      	movs	r3, #32
 8004bac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004bb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bb4:	2330      	movs	r3, #48	; 0x30
 8004bb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004d60 <_svfiprintf_r+0x1ec>
 8004bba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004bbe:	f04f 0901 	mov.w	r9, #1
 8004bc2:	4623      	mov	r3, r4
 8004bc4:	469a      	mov	sl, r3
 8004bc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bca:	b10a      	cbz	r2, 8004bd0 <_svfiprintf_r+0x5c>
 8004bcc:	2a25      	cmp	r2, #37	; 0x25
 8004bce:	d1f9      	bne.n	8004bc4 <_svfiprintf_r+0x50>
 8004bd0:	ebba 0b04 	subs.w	fp, sl, r4
 8004bd4:	d00b      	beq.n	8004bee <_svfiprintf_r+0x7a>
 8004bd6:	465b      	mov	r3, fp
 8004bd8:	4622      	mov	r2, r4
 8004bda:	4629      	mov	r1, r5
 8004bdc:	4638      	mov	r0, r7
 8004bde:	f7ff ff6d 	bl	8004abc <__ssputs_r>
 8004be2:	3001      	adds	r0, #1
 8004be4:	f000 80aa 	beq.w	8004d3c <_svfiprintf_r+0x1c8>
 8004be8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bea:	445a      	add	r2, fp
 8004bec:	9209      	str	r2, [sp, #36]	; 0x24
 8004bee:	f89a 3000 	ldrb.w	r3, [sl]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 80a2 	beq.w	8004d3c <_svfiprintf_r+0x1c8>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8004bfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c02:	f10a 0a01 	add.w	sl, sl, #1
 8004c06:	9304      	str	r3, [sp, #16]
 8004c08:	9307      	str	r3, [sp, #28]
 8004c0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c0e:	931a      	str	r3, [sp, #104]	; 0x68
 8004c10:	4654      	mov	r4, sl
 8004c12:	2205      	movs	r2, #5
 8004c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c18:	4851      	ldr	r0, [pc, #324]	; (8004d60 <_svfiprintf_r+0x1ec>)
 8004c1a:	f7fb fae1 	bl	80001e0 <memchr>
 8004c1e:	9a04      	ldr	r2, [sp, #16]
 8004c20:	b9d8      	cbnz	r0, 8004c5a <_svfiprintf_r+0xe6>
 8004c22:	06d0      	lsls	r0, r2, #27
 8004c24:	bf44      	itt	mi
 8004c26:	2320      	movmi	r3, #32
 8004c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c2c:	0711      	lsls	r1, r2, #28
 8004c2e:	bf44      	itt	mi
 8004c30:	232b      	movmi	r3, #43	; 0x2b
 8004c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c36:	f89a 3000 	ldrb.w	r3, [sl]
 8004c3a:	2b2a      	cmp	r3, #42	; 0x2a
 8004c3c:	d015      	beq.n	8004c6a <_svfiprintf_r+0xf6>
 8004c3e:	9a07      	ldr	r2, [sp, #28]
 8004c40:	4654      	mov	r4, sl
 8004c42:	2000      	movs	r0, #0
 8004c44:	f04f 0c0a 	mov.w	ip, #10
 8004c48:	4621      	mov	r1, r4
 8004c4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c4e:	3b30      	subs	r3, #48	; 0x30
 8004c50:	2b09      	cmp	r3, #9
 8004c52:	d94e      	bls.n	8004cf2 <_svfiprintf_r+0x17e>
 8004c54:	b1b0      	cbz	r0, 8004c84 <_svfiprintf_r+0x110>
 8004c56:	9207      	str	r2, [sp, #28]
 8004c58:	e014      	b.n	8004c84 <_svfiprintf_r+0x110>
 8004c5a:	eba0 0308 	sub.w	r3, r0, r8
 8004c5e:	fa09 f303 	lsl.w	r3, r9, r3
 8004c62:	4313      	orrs	r3, r2
 8004c64:	9304      	str	r3, [sp, #16]
 8004c66:	46a2      	mov	sl, r4
 8004c68:	e7d2      	b.n	8004c10 <_svfiprintf_r+0x9c>
 8004c6a:	9b03      	ldr	r3, [sp, #12]
 8004c6c:	1d19      	adds	r1, r3, #4
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	9103      	str	r1, [sp, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	bfbb      	ittet	lt
 8004c76:	425b      	neglt	r3, r3
 8004c78:	f042 0202 	orrlt.w	r2, r2, #2
 8004c7c:	9307      	strge	r3, [sp, #28]
 8004c7e:	9307      	strlt	r3, [sp, #28]
 8004c80:	bfb8      	it	lt
 8004c82:	9204      	strlt	r2, [sp, #16]
 8004c84:	7823      	ldrb	r3, [r4, #0]
 8004c86:	2b2e      	cmp	r3, #46	; 0x2e
 8004c88:	d10c      	bne.n	8004ca4 <_svfiprintf_r+0x130>
 8004c8a:	7863      	ldrb	r3, [r4, #1]
 8004c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8004c8e:	d135      	bne.n	8004cfc <_svfiprintf_r+0x188>
 8004c90:	9b03      	ldr	r3, [sp, #12]
 8004c92:	1d1a      	adds	r2, r3, #4
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	9203      	str	r2, [sp, #12]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	bfb8      	it	lt
 8004c9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ca0:	3402      	adds	r4, #2
 8004ca2:	9305      	str	r3, [sp, #20]
 8004ca4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d70 <_svfiprintf_r+0x1fc>
 8004ca8:	7821      	ldrb	r1, [r4, #0]
 8004caa:	2203      	movs	r2, #3
 8004cac:	4650      	mov	r0, sl
 8004cae:	f7fb fa97 	bl	80001e0 <memchr>
 8004cb2:	b140      	cbz	r0, 8004cc6 <_svfiprintf_r+0x152>
 8004cb4:	2340      	movs	r3, #64	; 0x40
 8004cb6:	eba0 000a 	sub.w	r0, r0, sl
 8004cba:	fa03 f000 	lsl.w	r0, r3, r0
 8004cbe:	9b04      	ldr	r3, [sp, #16]
 8004cc0:	4303      	orrs	r3, r0
 8004cc2:	3401      	adds	r4, #1
 8004cc4:	9304      	str	r3, [sp, #16]
 8004cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cca:	4826      	ldr	r0, [pc, #152]	; (8004d64 <_svfiprintf_r+0x1f0>)
 8004ccc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cd0:	2206      	movs	r2, #6
 8004cd2:	f7fb fa85 	bl	80001e0 <memchr>
 8004cd6:	2800      	cmp	r0, #0
 8004cd8:	d038      	beq.n	8004d4c <_svfiprintf_r+0x1d8>
 8004cda:	4b23      	ldr	r3, [pc, #140]	; (8004d68 <_svfiprintf_r+0x1f4>)
 8004cdc:	bb1b      	cbnz	r3, 8004d26 <_svfiprintf_r+0x1b2>
 8004cde:	9b03      	ldr	r3, [sp, #12]
 8004ce0:	3307      	adds	r3, #7
 8004ce2:	f023 0307 	bic.w	r3, r3, #7
 8004ce6:	3308      	adds	r3, #8
 8004ce8:	9303      	str	r3, [sp, #12]
 8004cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cec:	4433      	add	r3, r6
 8004cee:	9309      	str	r3, [sp, #36]	; 0x24
 8004cf0:	e767      	b.n	8004bc2 <_svfiprintf_r+0x4e>
 8004cf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	2001      	movs	r0, #1
 8004cfa:	e7a5      	b.n	8004c48 <_svfiprintf_r+0xd4>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	3401      	adds	r4, #1
 8004d00:	9305      	str	r3, [sp, #20]
 8004d02:	4619      	mov	r1, r3
 8004d04:	f04f 0c0a 	mov.w	ip, #10
 8004d08:	4620      	mov	r0, r4
 8004d0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d0e:	3a30      	subs	r2, #48	; 0x30
 8004d10:	2a09      	cmp	r2, #9
 8004d12:	d903      	bls.n	8004d1c <_svfiprintf_r+0x1a8>
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0c5      	beq.n	8004ca4 <_svfiprintf_r+0x130>
 8004d18:	9105      	str	r1, [sp, #20]
 8004d1a:	e7c3      	b.n	8004ca4 <_svfiprintf_r+0x130>
 8004d1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d20:	4604      	mov	r4, r0
 8004d22:	2301      	movs	r3, #1
 8004d24:	e7f0      	b.n	8004d08 <_svfiprintf_r+0x194>
 8004d26:	ab03      	add	r3, sp, #12
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	462a      	mov	r2, r5
 8004d2c:	4b0f      	ldr	r3, [pc, #60]	; (8004d6c <_svfiprintf_r+0x1f8>)
 8004d2e:	a904      	add	r1, sp, #16
 8004d30:	4638      	mov	r0, r7
 8004d32:	f3af 8000 	nop.w
 8004d36:	1c42      	adds	r2, r0, #1
 8004d38:	4606      	mov	r6, r0
 8004d3a:	d1d6      	bne.n	8004cea <_svfiprintf_r+0x176>
 8004d3c:	89ab      	ldrh	r3, [r5, #12]
 8004d3e:	065b      	lsls	r3, r3, #25
 8004d40:	f53f af2c 	bmi.w	8004b9c <_svfiprintf_r+0x28>
 8004d44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d46:	b01d      	add	sp, #116	; 0x74
 8004d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d4c:	ab03      	add	r3, sp, #12
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	462a      	mov	r2, r5
 8004d52:	4b06      	ldr	r3, [pc, #24]	; (8004d6c <_svfiprintf_r+0x1f8>)
 8004d54:	a904      	add	r1, sp, #16
 8004d56:	4638      	mov	r0, r7
 8004d58:	f000 f87a 	bl	8004e50 <_printf_i>
 8004d5c:	e7eb      	b.n	8004d36 <_svfiprintf_r+0x1c2>
 8004d5e:	bf00      	nop
 8004d60:	08006670 	.word	0x08006670
 8004d64:	0800667a 	.word	0x0800667a
 8004d68:	00000000 	.word	0x00000000
 8004d6c:	08004abd 	.word	0x08004abd
 8004d70:	08006676 	.word	0x08006676

08004d74 <_printf_common>:
 8004d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d78:	4616      	mov	r6, r2
 8004d7a:	4699      	mov	r9, r3
 8004d7c:	688a      	ldr	r2, [r1, #8]
 8004d7e:	690b      	ldr	r3, [r1, #16]
 8004d80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d84:	4293      	cmp	r3, r2
 8004d86:	bfb8      	it	lt
 8004d88:	4613      	movlt	r3, r2
 8004d8a:	6033      	str	r3, [r6, #0]
 8004d8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d90:	4607      	mov	r7, r0
 8004d92:	460c      	mov	r4, r1
 8004d94:	b10a      	cbz	r2, 8004d9a <_printf_common+0x26>
 8004d96:	3301      	adds	r3, #1
 8004d98:	6033      	str	r3, [r6, #0]
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	0699      	lsls	r1, r3, #26
 8004d9e:	bf42      	ittt	mi
 8004da0:	6833      	ldrmi	r3, [r6, #0]
 8004da2:	3302      	addmi	r3, #2
 8004da4:	6033      	strmi	r3, [r6, #0]
 8004da6:	6825      	ldr	r5, [r4, #0]
 8004da8:	f015 0506 	ands.w	r5, r5, #6
 8004dac:	d106      	bne.n	8004dbc <_printf_common+0x48>
 8004dae:	f104 0a19 	add.w	sl, r4, #25
 8004db2:	68e3      	ldr	r3, [r4, #12]
 8004db4:	6832      	ldr	r2, [r6, #0]
 8004db6:	1a9b      	subs	r3, r3, r2
 8004db8:	42ab      	cmp	r3, r5
 8004dba:	dc26      	bgt.n	8004e0a <_printf_common+0x96>
 8004dbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004dc0:	1e13      	subs	r3, r2, #0
 8004dc2:	6822      	ldr	r2, [r4, #0]
 8004dc4:	bf18      	it	ne
 8004dc6:	2301      	movne	r3, #1
 8004dc8:	0692      	lsls	r2, r2, #26
 8004dca:	d42b      	bmi.n	8004e24 <_printf_common+0xb0>
 8004dcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dd0:	4649      	mov	r1, r9
 8004dd2:	4638      	mov	r0, r7
 8004dd4:	47c0      	blx	r8
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	d01e      	beq.n	8004e18 <_printf_common+0xa4>
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	68e5      	ldr	r5, [r4, #12]
 8004dde:	6832      	ldr	r2, [r6, #0]
 8004de0:	f003 0306 	and.w	r3, r3, #6
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	bf08      	it	eq
 8004de8:	1aad      	subeq	r5, r5, r2
 8004dea:	68a3      	ldr	r3, [r4, #8]
 8004dec:	6922      	ldr	r2, [r4, #16]
 8004dee:	bf0c      	ite	eq
 8004df0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004df4:	2500      	movne	r5, #0
 8004df6:	4293      	cmp	r3, r2
 8004df8:	bfc4      	itt	gt
 8004dfa:	1a9b      	subgt	r3, r3, r2
 8004dfc:	18ed      	addgt	r5, r5, r3
 8004dfe:	2600      	movs	r6, #0
 8004e00:	341a      	adds	r4, #26
 8004e02:	42b5      	cmp	r5, r6
 8004e04:	d11a      	bne.n	8004e3c <_printf_common+0xc8>
 8004e06:	2000      	movs	r0, #0
 8004e08:	e008      	b.n	8004e1c <_printf_common+0xa8>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	4652      	mov	r2, sl
 8004e0e:	4649      	mov	r1, r9
 8004e10:	4638      	mov	r0, r7
 8004e12:	47c0      	blx	r8
 8004e14:	3001      	adds	r0, #1
 8004e16:	d103      	bne.n	8004e20 <_printf_common+0xac>
 8004e18:	f04f 30ff 	mov.w	r0, #4294967295
 8004e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e20:	3501      	adds	r5, #1
 8004e22:	e7c6      	b.n	8004db2 <_printf_common+0x3e>
 8004e24:	18e1      	adds	r1, r4, r3
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	2030      	movs	r0, #48	; 0x30
 8004e2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e2e:	4422      	add	r2, r4
 8004e30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e38:	3302      	adds	r3, #2
 8004e3a:	e7c7      	b.n	8004dcc <_printf_common+0x58>
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	4622      	mov	r2, r4
 8004e40:	4649      	mov	r1, r9
 8004e42:	4638      	mov	r0, r7
 8004e44:	47c0      	blx	r8
 8004e46:	3001      	adds	r0, #1
 8004e48:	d0e6      	beq.n	8004e18 <_printf_common+0xa4>
 8004e4a:	3601      	adds	r6, #1
 8004e4c:	e7d9      	b.n	8004e02 <_printf_common+0x8e>
	...

08004e50 <_printf_i>:
 8004e50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e54:	7e0f      	ldrb	r7, [r1, #24]
 8004e56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e58:	2f78      	cmp	r7, #120	; 0x78
 8004e5a:	4691      	mov	r9, r2
 8004e5c:	4680      	mov	r8, r0
 8004e5e:	460c      	mov	r4, r1
 8004e60:	469a      	mov	sl, r3
 8004e62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e66:	d807      	bhi.n	8004e78 <_printf_i+0x28>
 8004e68:	2f62      	cmp	r7, #98	; 0x62
 8004e6a:	d80a      	bhi.n	8004e82 <_printf_i+0x32>
 8004e6c:	2f00      	cmp	r7, #0
 8004e6e:	f000 80d8 	beq.w	8005022 <_printf_i+0x1d2>
 8004e72:	2f58      	cmp	r7, #88	; 0x58
 8004e74:	f000 80a3 	beq.w	8004fbe <_printf_i+0x16e>
 8004e78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e80:	e03a      	b.n	8004ef8 <_printf_i+0xa8>
 8004e82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e86:	2b15      	cmp	r3, #21
 8004e88:	d8f6      	bhi.n	8004e78 <_printf_i+0x28>
 8004e8a:	a101      	add	r1, pc, #4	; (adr r1, 8004e90 <_printf_i+0x40>)
 8004e8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e90:	08004ee9 	.word	0x08004ee9
 8004e94:	08004efd 	.word	0x08004efd
 8004e98:	08004e79 	.word	0x08004e79
 8004e9c:	08004e79 	.word	0x08004e79
 8004ea0:	08004e79 	.word	0x08004e79
 8004ea4:	08004e79 	.word	0x08004e79
 8004ea8:	08004efd 	.word	0x08004efd
 8004eac:	08004e79 	.word	0x08004e79
 8004eb0:	08004e79 	.word	0x08004e79
 8004eb4:	08004e79 	.word	0x08004e79
 8004eb8:	08004e79 	.word	0x08004e79
 8004ebc:	08005009 	.word	0x08005009
 8004ec0:	08004f2d 	.word	0x08004f2d
 8004ec4:	08004feb 	.word	0x08004feb
 8004ec8:	08004e79 	.word	0x08004e79
 8004ecc:	08004e79 	.word	0x08004e79
 8004ed0:	0800502b 	.word	0x0800502b
 8004ed4:	08004e79 	.word	0x08004e79
 8004ed8:	08004f2d 	.word	0x08004f2d
 8004edc:	08004e79 	.word	0x08004e79
 8004ee0:	08004e79 	.word	0x08004e79
 8004ee4:	08004ff3 	.word	0x08004ff3
 8004ee8:	682b      	ldr	r3, [r5, #0]
 8004eea:	1d1a      	adds	r2, r3, #4
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	602a      	str	r2, [r5, #0]
 8004ef0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ef4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e0a3      	b.n	8005044 <_printf_i+0x1f4>
 8004efc:	6820      	ldr	r0, [r4, #0]
 8004efe:	6829      	ldr	r1, [r5, #0]
 8004f00:	0606      	lsls	r6, r0, #24
 8004f02:	f101 0304 	add.w	r3, r1, #4
 8004f06:	d50a      	bpl.n	8004f1e <_printf_i+0xce>
 8004f08:	680e      	ldr	r6, [r1, #0]
 8004f0a:	602b      	str	r3, [r5, #0]
 8004f0c:	2e00      	cmp	r6, #0
 8004f0e:	da03      	bge.n	8004f18 <_printf_i+0xc8>
 8004f10:	232d      	movs	r3, #45	; 0x2d
 8004f12:	4276      	negs	r6, r6
 8004f14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f18:	485e      	ldr	r0, [pc, #376]	; (8005094 <_printf_i+0x244>)
 8004f1a:	230a      	movs	r3, #10
 8004f1c:	e019      	b.n	8004f52 <_printf_i+0x102>
 8004f1e:	680e      	ldr	r6, [r1, #0]
 8004f20:	602b      	str	r3, [r5, #0]
 8004f22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f26:	bf18      	it	ne
 8004f28:	b236      	sxthne	r6, r6
 8004f2a:	e7ef      	b.n	8004f0c <_printf_i+0xbc>
 8004f2c:	682b      	ldr	r3, [r5, #0]
 8004f2e:	6820      	ldr	r0, [r4, #0]
 8004f30:	1d19      	adds	r1, r3, #4
 8004f32:	6029      	str	r1, [r5, #0]
 8004f34:	0601      	lsls	r1, r0, #24
 8004f36:	d501      	bpl.n	8004f3c <_printf_i+0xec>
 8004f38:	681e      	ldr	r6, [r3, #0]
 8004f3a:	e002      	b.n	8004f42 <_printf_i+0xf2>
 8004f3c:	0646      	lsls	r6, r0, #25
 8004f3e:	d5fb      	bpl.n	8004f38 <_printf_i+0xe8>
 8004f40:	881e      	ldrh	r6, [r3, #0]
 8004f42:	4854      	ldr	r0, [pc, #336]	; (8005094 <_printf_i+0x244>)
 8004f44:	2f6f      	cmp	r7, #111	; 0x6f
 8004f46:	bf0c      	ite	eq
 8004f48:	2308      	moveq	r3, #8
 8004f4a:	230a      	movne	r3, #10
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f52:	6865      	ldr	r5, [r4, #4]
 8004f54:	60a5      	str	r5, [r4, #8]
 8004f56:	2d00      	cmp	r5, #0
 8004f58:	bfa2      	ittt	ge
 8004f5a:	6821      	ldrge	r1, [r4, #0]
 8004f5c:	f021 0104 	bicge.w	r1, r1, #4
 8004f60:	6021      	strge	r1, [r4, #0]
 8004f62:	b90e      	cbnz	r6, 8004f68 <_printf_i+0x118>
 8004f64:	2d00      	cmp	r5, #0
 8004f66:	d04d      	beq.n	8005004 <_printf_i+0x1b4>
 8004f68:	4615      	mov	r5, r2
 8004f6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f6e:	fb03 6711 	mls	r7, r3, r1, r6
 8004f72:	5dc7      	ldrb	r7, [r0, r7]
 8004f74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f78:	4637      	mov	r7, r6
 8004f7a:	42bb      	cmp	r3, r7
 8004f7c:	460e      	mov	r6, r1
 8004f7e:	d9f4      	bls.n	8004f6a <_printf_i+0x11a>
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d10b      	bne.n	8004f9c <_printf_i+0x14c>
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	07de      	lsls	r6, r3, #31
 8004f88:	d508      	bpl.n	8004f9c <_printf_i+0x14c>
 8004f8a:	6923      	ldr	r3, [r4, #16]
 8004f8c:	6861      	ldr	r1, [r4, #4]
 8004f8e:	4299      	cmp	r1, r3
 8004f90:	bfde      	ittt	le
 8004f92:	2330      	movle	r3, #48	; 0x30
 8004f94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f9c:	1b52      	subs	r2, r2, r5
 8004f9e:	6122      	str	r2, [r4, #16]
 8004fa0:	f8cd a000 	str.w	sl, [sp]
 8004fa4:	464b      	mov	r3, r9
 8004fa6:	aa03      	add	r2, sp, #12
 8004fa8:	4621      	mov	r1, r4
 8004faa:	4640      	mov	r0, r8
 8004fac:	f7ff fee2 	bl	8004d74 <_printf_common>
 8004fb0:	3001      	adds	r0, #1
 8004fb2:	d14c      	bne.n	800504e <_printf_i+0x1fe>
 8004fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb8:	b004      	add	sp, #16
 8004fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fbe:	4835      	ldr	r0, [pc, #212]	; (8005094 <_printf_i+0x244>)
 8004fc0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004fc4:	6829      	ldr	r1, [r5, #0]
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004fcc:	6029      	str	r1, [r5, #0]
 8004fce:	061d      	lsls	r5, r3, #24
 8004fd0:	d514      	bpl.n	8004ffc <_printf_i+0x1ac>
 8004fd2:	07df      	lsls	r7, r3, #31
 8004fd4:	bf44      	itt	mi
 8004fd6:	f043 0320 	orrmi.w	r3, r3, #32
 8004fda:	6023      	strmi	r3, [r4, #0]
 8004fdc:	b91e      	cbnz	r6, 8004fe6 <_printf_i+0x196>
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	f023 0320 	bic.w	r3, r3, #32
 8004fe4:	6023      	str	r3, [r4, #0]
 8004fe6:	2310      	movs	r3, #16
 8004fe8:	e7b0      	b.n	8004f4c <_printf_i+0xfc>
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	f043 0320 	orr.w	r3, r3, #32
 8004ff0:	6023      	str	r3, [r4, #0]
 8004ff2:	2378      	movs	r3, #120	; 0x78
 8004ff4:	4828      	ldr	r0, [pc, #160]	; (8005098 <_printf_i+0x248>)
 8004ff6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ffa:	e7e3      	b.n	8004fc4 <_printf_i+0x174>
 8004ffc:	0659      	lsls	r1, r3, #25
 8004ffe:	bf48      	it	mi
 8005000:	b2b6      	uxthmi	r6, r6
 8005002:	e7e6      	b.n	8004fd2 <_printf_i+0x182>
 8005004:	4615      	mov	r5, r2
 8005006:	e7bb      	b.n	8004f80 <_printf_i+0x130>
 8005008:	682b      	ldr	r3, [r5, #0]
 800500a:	6826      	ldr	r6, [r4, #0]
 800500c:	6961      	ldr	r1, [r4, #20]
 800500e:	1d18      	adds	r0, r3, #4
 8005010:	6028      	str	r0, [r5, #0]
 8005012:	0635      	lsls	r5, r6, #24
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	d501      	bpl.n	800501c <_printf_i+0x1cc>
 8005018:	6019      	str	r1, [r3, #0]
 800501a:	e002      	b.n	8005022 <_printf_i+0x1d2>
 800501c:	0670      	lsls	r0, r6, #25
 800501e:	d5fb      	bpl.n	8005018 <_printf_i+0x1c8>
 8005020:	8019      	strh	r1, [r3, #0]
 8005022:	2300      	movs	r3, #0
 8005024:	6123      	str	r3, [r4, #16]
 8005026:	4615      	mov	r5, r2
 8005028:	e7ba      	b.n	8004fa0 <_printf_i+0x150>
 800502a:	682b      	ldr	r3, [r5, #0]
 800502c:	1d1a      	adds	r2, r3, #4
 800502e:	602a      	str	r2, [r5, #0]
 8005030:	681d      	ldr	r5, [r3, #0]
 8005032:	6862      	ldr	r2, [r4, #4]
 8005034:	2100      	movs	r1, #0
 8005036:	4628      	mov	r0, r5
 8005038:	f7fb f8d2 	bl	80001e0 <memchr>
 800503c:	b108      	cbz	r0, 8005042 <_printf_i+0x1f2>
 800503e:	1b40      	subs	r0, r0, r5
 8005040:	6060      	str	r0, [r4, #4]
 8005042:	6863      	ldr	r3, [r4, #4]
 8005044:	6123      	str	r3, [r4, #16]
 8005046:	2300      	movs	r3, #0
 8005048:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800504c:	e7a8      	b.n	8004fa0 <_printf_i+0x150>
 800504e:	6923      	ldr	r3, [r4, #16]
 8005050:	462a      	mov	r2, r5
 8005052:	4649      	mov	r1, r9
 8005054:	4640      	mov	r0, r8
 8005056:	47d0      	blx	sl
 8005058:	3001      	adds	r0, #1
 800505a:	d0ab      	beq.n	8004fb4 <_printf_i+0x164>
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	079b      	lsls	r3, r3, #30
 8005060:	d413      	bmi.n	800508a <_printf_i+0x23a>
 8005062:	68e0      	ldr	r0, [r4, #12]
 8005064:	9b03      	ldr	r3, [sp, #12]
 8005066:	4298      	cmp	r0, r3
 8005068:	bfb8      	it	lt
 800506a:	4618      	movlt	r0, r3
 800506c:	e7a4      	b.n	8004fb8 <_printf_i+0x168>
 800506e:	2301      	movs	r3, #1
 8005070:	4632      	mov	r2, r6
 8005072:	4649      	mov	r1, r9
 8005074:	4640      	mov	r0, r8
 8005076:	47d0      	blx	sl
 8005078:	3001      	adds	r0, #1
 800507a:	d09b      	beq.n	8004fb4 <_printf_i+0x164>
 800507c:	3501      	adds	r5, #1
 800507e:	68e3      	ldr	r3, [r4, #12]
 8005080:	9903      	ldr	r1, [sp, #12]
 8005082:	1a5b      	subs	r3, r3, r1
 8005084:	42ab      	cmp	r3, r5
 8005086:	dcf2      	bgt.n	800506e <_printf_i+0x21e>
 8005088:	e7eb      	b.n	8005062 <_printf_i+0x212>
 800508a:	2500      	movs	r5, #0
 800508c:	f104 0619 	add.w	r6, r4, #25
 8005090:	e7f5      	b.n	800507e <_printf_i+0x22e>
 8005092:	bf00      	nop
 8005094:	08006681 	.word	0x08006681
 8005098:	08006692 	.word	0x08006692

0800509c <memcpy>:
 800509c:	440a      	add	r2, r1
 800509e:	4291      	cmp	r1, r2
 80050a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80050a4:	d100      	bne.n	80050a8 <memcpy+0xc>
 80050a6:	4770      	bx	lr
 80050a8:	b510      	push	{r4, lr}
 80050aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050b2:	4291      	cmp	r1, r2
 80050b4:	d1f9      	bne.n	80050aa <memcpy+0xe>
 80050b6:	bd10      	pop	{r4, pc}

080050b8 <memmove>:
 80050b8:	4288      	cmp	r0, r1
 80050ba:	b510      	push	{r4, lr}
 80050bc:	eb01 0402 	add.w	r4, r1, r2
 80050c0:	d902      	bls.n	80050c8 <memmove+0x10>
 80050c2:	4284      	cmp	r4, r0
 80050c4:	4623      	mov	r3, r4
 80050c6:	d807      	bhi.n	80050d8 <memmove+0x20>
 80050c8:	1e43      	subs	r3, r0, #1
 80050ca:	42a1      	cmp	r1, r4
 80050cc:	d008      	beq.n	80050e0 <memmove+0x28>
 80050ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050d6:	e7f8      	b.n	80050ca <memmove+0x12>
 80050d8:	4402      	add	r2, r0
 80050da:	4601      	mov	r1, r0
 80050dc:	428a      	cmp	r2, r1
 80050de:	d100      	bne.n	80050e2 <memmove+0x2a>
 80050e0:	bd10      	pop	{r4, pc}
 80050e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050ea:	e7f7      	b.n	80050dc <memmove+0x24>

080050ec <_free_r>:
 80050ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050ee:	2900      	cmp	r1, #0
 80050f0:	d044      	beq.n	800517c <_free_r+0x90>
 80050f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050f6:	9001      	str	r0, [sp, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f1a1 0404 	sub.w	r4, r1, #4
 80050fe:	bfb8      	it	lt
 8005100:	18e4      	addlt	r4, r4, r3
 8005102:	f000 f913 	bl	800532c <__malloc_lock>
 8005106:	4a1e      	ldr	r2, [pc, #120]	; (8005180 <_free_r+0x94>)
 8005108:	9801      	ldr	r0, [sp, #4]
 800510a:	6813      	ldr	r3, [r2, #0]
 800510c:	b933      	cbnz	r3, 800511c <_free_r+0x30>
 800510e:	6063      	str	r3, [r4, #4]
 8005110:	6014      	str	r4, [r2, #0]
 8005112:	b003      	add	sp, #12
 8005114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005118:	f000 b90e 	b.w	8005338 <__malloc_unlock>
 800511c:	42a3      	cmp	r3, r4
 800511e:	d908      	bls.n	8005132 <_free_r+0x46>
 8005120:	6825      	ldr	r5, [r4, #0]
 8005122:	1961      	adds	r1, r4, r5
 8005124:	428b      	cmp	r3, r1
 8005126:	bf01      	itttt	eq
 8005128:	6819      	ldreq	r1, [r3, #0]
 800512a:	685b      	ldreq	r3, [r3, #4]
 800512c:	1949      	addeq	r1, r1, r5
 800512e:	6021      	streq	r1, [r4, #0]
 8005130:	e7ed      	b.n	800510e <_free_r+0x22>
 8005132:	461a      	mov	r2, r3
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	b10b      	cbz	r3, 800513c <_free_r+0x50>
 8005138:	42a3      	cmp	r3, r4
 800513a:	d9fa      	bls.n	8005132 <_free_r+0x46>
 800513c:	6811      	ldr	r1, [r2, #0]
 800513e:	1855      	adds	r5, r2, r1
 8005140:	42a5      	cmp	r5, r4
 8005142:	d10b      	bne.n	800515c <_free_r+0x70>
 8005144:	6824      	ldr	r4, [r4, #0]
 8005146:	4421      	add	r1, r4
 8005148:	1854      	adds	r4, r2, r1
 800514a:	42a3      	cmp	r3, r4
 800514c:	6011      	str	r1, [r2, #0]
 800514e:	d1e0      	bne.n	8005112 <_free_r+0x26>
 8005150:	681c      	ldr	r4, [r3, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	6053      	str	r3, [r2, #4]
 8005156:	4421      	add	r1, r4
 8005158:	6011      	str	r1, [r2, #0]
 800515a:	e7da      	b.n	8005112 <_free_r+0x26>
 800515c:	d902      	bls.n	8005164 <_free_r+0x78>
 800515e:	230c      	movs	r3, #12
 8005160:	6003      	str	r3, [r0, #0]
 8005162:	e7d6      	b.n	8005112 <_free_r+0x26>
 8005164:	6825      	ldr	r5, [r4, #0]
 8005166:	1961      	adds	r1, r4, r5
 8005168:	428b      	cmp	r3, r1
 800516a:	bf04      	itt	eq
 800516c:	6819      	ldreq	r1, [r3, #0]
 800516e:	685b      	ldreq	r3, [r3, #4]
 8005170:	6063      	str	r3, [r4, #4]
 8005172:	bf04      	itt	eq
 8005174:	1949      	addeq	r1, r1, r5
 8005176:	6021      	streq	r1, [r4, #0]
 8005178:	6054      	str	r4, [r2, #4]
 800517a:	e7ca      	b.n	8005112 <_free_r+0x26>
 800517c:	b003      	add	sp, #12
 800517e:	bd30      	pop	{r4, r5, pc}
 8005180:	2000ffc4 	.word	0x2000ffc4

08005184 <sbrk_aligned>:
 8005184:	b570      	push	{r4, r5, r6, lr}
 8005186:	4e0e      	ldr	r6, [pc, #56]	; (80051c0 <sbrk_aligned+0x3c>)
 8005188:	460c      	mov	r4, r1
 800518a:	6831      	ldr	r1, [r6, #0]
 800518c:	4605      	mov	r5, r0
 800518e:	b911      	cbnz	r1, 8005196 <sbrk_aligned+0x12>
 8005190:	f000 f8bc 	bl	800530c <_sbrk_r>
 8005194:	6030      	str	r0, [r6, #0]
 8005196:	4621      	mov	r1, r4
 8005198:	4628      	mov	r0, r5
 800519a:	f000 f8b7 	bl	800530c <_sbrk_r>
 800519e:	1c43      	adds	r3, r0, #1
 80051a0:	d00a      	beq.n	80051b8 <sbrk_aligned+0x34>
 80051a2:	1cc4      	adds	r4, r0, #3
 80051a4:	f024 0403 	bic.w	r4, r4, #3
 80051a8:	42a0      	cmp	r0, r4
 80051aa:	d007      	beq.n	80051bc <sbrk_aligned+0x38>
 80051ac:	1a21      	subs	r1, r4, r0
 80051ae:	4628      	mov	r0, r5
 80051b0:	f000 f8ac 	bl	800530c <_sbrk_r>
 80051b4:	3001      	adds	r0, #1
 80051b6:	d101      	bne.n	80051bc <sbrk_aligned+0x38>
 80051b8:	f04f 34ff 	mov.w	r4, #4294967295
 80051bc:	4620      	mov	r0, r4
 80051be:	bd70      	pop	{r4, r5, r6, pc}
 80051c0:	2000ffc8 	.word	0x2000ffc8

080051c4 <_malloc_r>:
 80051c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051c8:	1ccd      	adds	r5, r1, #3
 80051ca:	f025 0503 	bic.w	r5, r5, #3
 80051ce:	3508      	adds	r5, #8
 80051d0:	2d0c      	cmp	r5, #12
 80051d2:	bf38      	it	cc
 80051d4:	250c      	movcc	r5, #12
 80051d6:	2d00      	cmp	r5, #0
 80051d8:	4607      	mov	r7, r0
 80051da:	db01      	blt.n	80051e0 <_malloc_r+0x1c>
 80051dc:	42a9      	cmp	r1, r5
 80051de:	d905      	bls.n	80051ec <_malloc_r+0x28>
 80051e0:	230c      	movs	r3, #12
 80051e2:	603b      	str	r3, [r7, #0]
 80051e4:	2600      	movs	r6, #0
 80051e6:	4630      	mov	r0, r6
 80051e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051ec:	4e2e      	ldr	r6, [pc, #184]	; (80052a8 <_malloc_r+0xe4>)
 80051ee:	f000 f89d 	bl	800532c <__malloc_lock>
 80051f2:	6833      	ldr	r3, [r6, #0]
 80051f4:	461c      	mov	r4, r3
 80051f6:	bb34      	cbnz	r4, 8005246 <_malloc_r+0x82>
 80051f8:	4629      	mov	r1, r5
 80051fa:	4638      	mov	r0, r7
 80051fc:	f7ff ffc2 	bl	8005184 <sbrk_aligned>
 8005200:	1c43      	adds	r3, r0, #1
 8005202:	4604      	mov	r4, r0
 8005204:	d14d      	bne.n	80052a2 <_malloc_r+0xde>
 8005206:	6834      	ldr	r4, [r6, #0]
 8005208:	4626      	mov	r6, r4
 800520a:	2e00      	cmp	r6, #0
 800520c:	d140      	bne.n	8005290 <_malloc_r+0xcc>
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	4631      	mov	r1, r6
 8005212:	4638      	mov	r0, r7
 8005214:	eb04 0803 	add.w	r8, r4, r3
 8005218:	f000 f878 	bl	800530c <_sbrk_r>
 800521c:	4580      	cmp	r8, r0
 800521e:	d13a      	bne.n	8005296 <_malloc_r+0xd2>
 8005220:	6821      	ldr	r1, [r4, #0]
 8005222:	3503      	adds	r5, #3
 8005224:	1a6d      	subs	r5, r5, r1
 8005226:	f025 0503 	bic.w	r5, r5, #3
 800522a:	3508      	adds	r5, #8
 800522c:	2d0c      	cmp	r5, #12
 800522e:	bf38      	it	cc
 8005230:	250c      	movcc	r5, #12
 8005232:	4629      	mov	r1, r5
 8005234:	4638      	mov	r0, r7
 8005236:	f7ff ffa5 	bl	8005184 <sbrk_aligned>
 800523a:	3001      	adds	r0, #1
 800523c:	d02b      	beq.n	8005296 <_malloc_r+0xd2>
 800523e:	6823      	ldr	r3, [r4, #0]
 8005240:	442b      	add	r3, r5
 8005242:	6023      	str	r3, [r4, #0]
 8005244:	e00e      	b.n	8005264 <_malloc_r+0xa0>
 8005246:	6822      	ldr	r2, [r4, #0]
 8005248:	1b52      	subs	r2, r2, r5
 800524a:	d41e      	bmi.n	800528a <_malloc_r+0xc6>
 800524c:	2a0b      	cmp	r2, #11
 800524e:	d916      	bls.n	800527e <_malloc_r+0xba>
 8005250:	1961      	adds	r1, r4, r5
 8005252:	42a3      	cmp	r3, r4
 8005254:	6025      	str	r5, [r4, #0]
 8005256:	bf18      	it	ne
 8005258:	6059      	strne	r1, [r3, #4]
 800525a:	6863      	ldr	r3, [r4, #4]
 800525c:	bf08      	it	eq
 800525e:	6031      	streq	r1, [r6, #0]
 8005260:	5162      	str	r2, [r4, r5]
 8005262:	604b      	str	r3, [r1, #4]
 8005264:	4638      	mov	r0, r7
 8005266:	f104 060b 	add.w	r6, r4, #11
 800526a:	f000 f865 	bl	8005338 <__malloc_unlock>
 800526e:	f026 0607 	bic.w	r6, r6, #7
 8005272:	1d23      	adds	r3, r4, #4
 8005274:	1af2      	subs	r2, r6, r3
 8005276:	d0b6      	beq.n	80051e6 <_malloc_r+0x22>
 8005278:	1b9b      	subs	r3, r3, r6
 800527a:	50a3      	str	r3, [r4, r2]
 800527c:	e7b3      	b.n	80051e6 <_malloc_r+0x22>
 800527e:	6862      	ldr	r2, [r4, #4]
 8005280:	42a3      	cmp	r3, r4
 8005282:	bf0c      	ite	eq
 8005284:	6032      	streq	r2, [r6, #0]
 8005286:	605a      	strne	r2, [r3, #4]
 8005288:	e7ec      	b.n	8005264 <_malloc_r+0xa0>
 800528a:	4623      	mov	r3, r4
 800528c:	6864      	ldr	r4, [r4, #4]
 800528e:	e7b2      	b.n	80051f6 <_malloc_r+0x32>
 8005290:	4634      	mov	r4, r6
 8005292:	6876      	ldr	r6, [r6, #4]
 8005294:	e7b9      	b.n	800520a <_malloc_r+0x46>
 8005296:	230c      	movs	r3, #12
 8005298:	603b      	str	r3, [r7, #0]
 800529a:	4638      	mov	r0, r7
 800529c:	f000 f84c 	bl	8005338 <__malloc_unlock>
 80052a0:	e7a1      	b.n	80051e6 <_malloc_r+0x22>
 80052a2:	6025      	str	r5, [r4, #0]
 80052a4:	e7de      	b.n	8005264 <_malloc_r+0xa0>
 80052a6:	bf00      	nop
 80052a8:	2000ffc4 	.word	0x2000ffc4

080052ac <_realloc_r>:
 80052ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052b0:	4680      	mov	r8, r0
 80052b2:	4614      	mov	r4, r2
 80052b4:	460e      	mov	r6, r1
 80052b6:	b921      	cbnz	r1, 80052c2 <_realloc_r+0x16>
 80052b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052bc:	4611      	mov	r1, r2
 80052be:	f7ff bf81 	b.w	80051c4 <_malloc_r>
 80052c2:	b92a      	cbnz	r2, 80052d0 <_realloc_r+0x24>
 80052c4:	f7ff ff12 	bl	80050ec <_free_r>
 80052c8:	4625      	mov	r5, r4
 80052ca:	4628      	mov	r0, r5
 80052cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052d0:	f000 f838 	bl	8005344 <_malloc_usable_size_r>
 80052d4:	4284      	cmp	r4, r0
 80052d6:	4607      	mov	r7, r0
 80052d8:	d802      	bhi.n	80052e0 <_realloc_r+0x34>
 80052da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80052de:	d812      	bhi.n	8005306 <_realloc_r+0x5a>
 80052e0:	4621      	mov	r1, r4
 80052e2:	4640      	mov	r0, r8
 80052e4:	f7ff ff6e 	bl	80051c4 <_malloc_r>
 80052e8:	4605      	mov	r5, r0
 80052ea:	2800      	cmp	r0, #0
 80052ec:	d0ed      	beq.n	80052ca <_realloc_r+0x1e>
 80052ee:	42bc      	cmp	r4, r7
 80052f0:	4622      	mov	r2, r4
 80052f2:	4631      	mov	r1, r6
 80052f4:	bf28      	it	cs
 80052f6:	463a      	movcs	r2, r7
 80052f8:	f7ff fed0 	bl	800509c <memcpy>
 80052fc:	4631      	mov	r1, r6
 80052fe:	4640      	mov	r0, r8
 8005300:	f7ff fef4 	bl	80050ec <_free_r>
 8005304:	e7e1      	b.n	80052ca <_realloc_r+0x1e>
 8005306:	4635      	mov	r5, r6
 8005308:	e7df      	b.n	80052ca <_realloc_r+0x1e>
	...

0800530c <_sbrk_r>:
 800530c:	b538      	push	{r3, r4, r5, lr}
 800530e:	4d06      	ldr	r5, [pc, #24]	; (8005328 <_sbrk_r+0x1c>)
 8005310:	2300      	movs	r3, #0
 8005312:	4604      	mov	r4, r0
 8005314:	4608      	mov	r0, r1
 8005316:	602b      	str	r3, [r5, #0]
 8005318:	f7fc fa1c 	bl	8001754 <_sbrk>
 800531c:	1c43      	adds	r3, r0, #1
 800531e:	d102      	bne.n	8005326 <_sbrk_r+0x1a>
 8005320:	682b      	ldr	r3, [r5, #0]
 8005322:	b103      	cbz	r3, 8005326 <_sbrk_r+0x1a>
 8005324:	6023      	str	r3, [r4, #0]
 8005326:	bd38      	pop	{r3, r4, r5, pc}
 8005328:	2000ffcc 	.word	0x2000ffcc

0800532c <__malloc_lock>:
 800532c:	4801      	ldr	r0, [pc, #4]	; (8005334 <__malloc_lock+0x8>)
 800532e:	f000 b811 	b.w	8005354 <__retarget_lock_acquire_recursive>
 8005332:	bf00      	nop
 8005334:	2000ffd0 	.word	0x2000ffd0

08005338 <__malloc_unlock>:
 8005338:	4801      	ldr	r0, [pc, #4]	; (8005340 <__malloc_unlock+0x8>)
 800533a:	f000 b80c 	b.w	8005356 <__retarget_lock_release_recursive>
 800533e:	bf00      	nop
 8005340:	2000ffd0 	.word	0x2000ffd0

08005344 <_malloc_usable_size_r>:
 8005344:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005348:	1f18      	subs	r0, r3, #4
 800534a:	2b00      	cmp	r3, #0
 800534c:	bfbc      	itt	lt
 800534e:	580b      	ldrlt	r3, [r1, r0]
 8005350:	18c0      	addlt	r0, r0, r3
 8005352:	4770      	bx	lr

08005354 <__retarget_lock_acquire_recursive>:
 8005354:	4770      	bx	lr

08005356 <__retarget_lock_release_recursive>:
 8005356:	4770      	bx	lr

08005358 <_init>:
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535a:	bf00      	nop
 800535c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535e:	bc08      	pop	{r3}
 8005360:	469e      	mov	lr, r3
 8005362:	4770      	bx	lr

08005364 <_fini>:
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005366:	bf00      	nop
 8005368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536a:	bc08      	pop	{r3}
 800536c:	469e      	mov	lr, r3
 800536e:	4770      	bx	lr
