
LCDlabb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004468  08004468  00014468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044f4  080044f4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080044f4  080044f4  000144f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044fc  080044fc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044fc  080044fc  000144fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004500  08004500  00014500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000074  08004578  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08004578  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104a8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e9c  00000000  00000000  0003054c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  000323e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e40  00000000  00000000  000332c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bfc  00000000  00000000  00034108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001119a  00000000  00000000  0004ad04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fe45  00000000  00000000  0005be9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ebce3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043d8  00000000  00000000  000ebd34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004450 	.word	0x08004450

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08004450 	.word	0x08004450

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <My_Delay>:
 * Holds for an amount of microseconds.
 * delay = 84Mhz / 1-1 / 84-1 = 1 Mhz
 */
volatile uint32_t high_resolution_clock = 0; // high resolution clock
void My_Delay(uint32_t microsec)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2120      	movs	r1, #32
 8000590:	4810      	ldr	r0, [pc, #64]	; (80005d4 <My_Delay+0x50>)
 8000592:	f001 f9b7 	bl	8001904 <HAL_GPIO_WritePin>
	TIM5->CNT = 0;
 8000596:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <My_Delay+0x54>)
 8000598:	2200      	movs	r2, #0
 800059a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM5->CR1 |= 1;
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <My_Delay+0x54>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a0d      	ldr	r2, [pc, #52]	; (80005d8 <My_Delay+0x54>)
 80005a2:	f043 0301 	orr.w	r3, r3, #1
 80005a6:	6013      	str	r3, [r2, #0]
	while(TIM5->CNT < microsec) { }
 80005a8:	bf00      	nop
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <My_Delay+0x54>)
 80005ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d8fa      	bhi.n	80005aa <My_Delay+0x26>
	TIM5->CR1 &= ~1;
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <My_Delay+0x54>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <My_Delay+0x54>)
 80005ba:	f023 0301 	bic.w	r3, r3, #1
 80005be:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2120      	movs	r1, #32
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <My_Delay+0x50>)
 80005c6:	f001 f99d 	bl	8001904 <HAL_GPIO_WritePin>
	return;
 80005ca:	bf00      	nop
}
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40020000 	.word	0x40020000
 80005d8:	40000c00 	.word	0x40000c00

080005dc <TextLCD_SendNibbleWithPulseOnE>:
 *
 *  When sending a byte, use this twice, sending D7-D4 the first time
 *  and D3-D0 the second time.
 ****************************************************************************/
void TextLCD_SendNibbleWithPulseOnE(TextLCDType * hlcd, uint8_t data)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af02      	add	r7, sp, #8
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	460b      	mov	r3, r1
 80005e6:	70fb      	strb	r3, [r7, #3]
	/***** Put nibble when E is low *****/
	data = data & INV_E;
 80005e8:	78fb      	ldrb	r3, [r7, #3]
 80005ea:	f023 0304 	bic.w	r3, r3, #4
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(hlcd->hi2c, hlcd->device_address, &data, 1, 1000);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6818      	ldr	r0, [r3, #0]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	791b      	ldrb	r3, [r3, #4]
 80005fa:	b299      	uxth	r1, r3
 80005fc:	1cfa      	adds	r2, r7, #3
 80005fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2301      	movs	r3, #1
 8000606:	f001 fadb 	bl	8001bc0 <HAL_I2C_Master_Transmit>
	My_Delay(40);
 800060a:	2028      	movs	r0, #40	; 0x28
 800060c:	f7ff ffba 	bl	8000584 <My_Delay>

	/***** Now set E to high *****/
	data = data | BIT_E;
 8000610:	78fb      	ldrb	r3, [r7, #3]
 8000612:	f043 0304 	orr.w	r3, r3, #4
 8000616:	b2db      	uxtb	r3, r3
 8000618:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(hlcd->hi2c, hlcd->device_address, &data, 1, 1000);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6818      	ldr	r0, [r3, #0]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	791b      	ldrb	r3, [r3, #4]
 8000622:	b299      	uxth	r1, r3
 8000624:	1cfa      	adds	r2, r7, #3
 8000626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2301      	movs	r3, #1
 800062e:	f001 fac7 	bl	8001bc0 <HAL_I2C_Master_Transmit>
	My_Delay(40);
 8000632:	2028      	movs	r0, #40	; 0x28
 8000634:	f7ff ffa6 	bl	8000584 <My_Delay>

	/***** Then go low again *****/
	data = data & INV_E;
 8000638:	78fb      	ldrb	r3, [r7, #3]
 800063a:	f023 0304 	bic.w	r3, r3, #4
 800063e:	b2db      	uxtb	r3, r3
 8000640:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(hlcd->hi2c, hlcd->device_address, &data, 1, 1000);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6818      	ldr	r0, [r3, #0]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	791b      	ldrb	r3, [r3, #4]
 800064a:	b299      	uxth	r1, r3
 800064c:	1cfa      	adds	r2, r7, #3
 800064e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	2301      	movs	r3, #1
 8000656:	f001 fab3 	bl	8001bc0 <HAL_I2C_Master_Transmit>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <TextLCD_SendByte>:

void TextLCD_SendByte(
		TextLCDType   * hlcd,
		uint8_t         data,
		GPIO_PinState   RS)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	460b      	mov	r3, r1
 800066e:	70fb      	strb	r3, [r7, #3]
 8000670:	4613      	mov	r3, r2
 8000672:	70bb      	strb	r3, [r7, #2]
	// Place the data bits in the top four bits. The lowest four will
	// be for control.
	uint8_t d_lo = (data & 0x0F) << 4;
 8000674:	78fb      	ldrb	r3, [r7, #3]
 8000676:	011b      	lsls	r3, r3, #4
 8000678:	73fb      	strb	r3, [r7, #15]
	uint8_t d_hi = (data & 0xF0);
 800067a:	78fb      	ldrb	r3, [r7, #3]
 800067c:	f023 030f 	bic.w	r3, r3, #15
 8000680:	73bb      	strb	r3, [r7, #14]

	// Set the control bits for the message.
	uint8_t ctrl = 0x00;
 8000682:	2300      	movs	r3, #0
 8000684:	737b      	strb	r3, [r7, #13]
	ctrl = (BT == GPIO_PIN_SET) ? (ctrl | BIT_BT) : (ctrl & INV_BT);
 8000686:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <TextLCD_SendByte+0x9c>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d104      	bne.n	8000698 <TextLCD_SendByte+0x34>
 800068e:	7b7b      	ldrb	r3, [r7, #13]
 8000690:	f043 0308 	orr.w	r3, r3, #8
 8000694:	b2db      	uxtb	r3, r3
 8000696:	e003      	b.n	80006a0 <TextLCD_SendByte+0x3c>
 8000698:	7b7b      	ldrb	r3, [r7, #13]
 800069a:	f023 0308 	bic.w	r3, r3, #8
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	737b      	strb	r3, [r7, #13]
	ctrl = (RS == GPIO_PIN_SET) ? (ctrl | BIT_RS) : (ctrl & INV_RS);
 80006a2:	78bb      	ldrb	r3, [r7, #2]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d104      	bne.n	80006b2 <TextLCD_SendByte+0x4e>
 80006a8:	7b7b      	ldrb	r3, [r7, #13]
 80006aa:	f043 0301 	orr.w	r3, r3, #1
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	e003      	b.n	80006ba <TextLCD_SendByte+0x56>
 80006b2:	7b7b      	ldrb	r3, [r7, #13]
 80006b4:	f023 0301 	bic.w	r3, r3, #1
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	737b      	strb	r3, [r7, #13]
	ctrl = (RW == GPIO_PIN_SET) ? (ctrl | BIT_RW) : (ctrl & INV_RW);
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <TextLCD_SendByte+0xa0>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d104      	bne.n	80006ce <TextLCD_SendByte+0x6a>
 80006c4:	7b7b      	ldrb	r3, [r7, #13]
 80006c6:	f043 0302 	orr.w	r3, r3, #2
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	e003      	b.n	80006d6 <TextLCD_SendByte+0x72>
 80006ce:	7b7b      	ldrb	r3, [r7, #13]
 80006d0:	f023 0302 	bic.w	r3, r3, #2
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	737b      	strb	r3, [r7, #13]

	TextLCD_SendNibbleWithPulseOnE( hlcd, (d_hi | ctrl) );
 80006d8:	7bba      	ldrb	r2, [r7, #14]
 80006da:	7b7b      	ldrb	r3, [r7, #13]
 80006dc:	4313      	orrs	r3, r2
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	4619      	mov	r1, r3
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff ff7a 	bl	80005dc <TextLCD_SendNibbleWithPulseOnE>
	TextLCD_SendNibbleWithPulseOnE( hlcd, (d_lo | ctrl) );
 80006e8:	7bfa      	ldrb	r2, [r7, #15]
 80006ea:	7b7b      	ldrb	r3, [r7, #13]
 80006ec:	4313      	orrs	r3, r2
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	4619      	mov	r1, r3
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f7ff ff72 	bl	80005dc <TextLCD_SendNibbleWithPulseOnE>
}
 80006f8:	bf00      	nop
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000000 	.word	0x20000000
 8000704:	20000094 	.word	0x20000094

08000708 <TextLCD_Init>:

void TextLCD_Init(
		TextLCDType         *   hlcd,
		I2C_HandleTypeDef   *   hi2c,
		uint8_t                 device_address)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	4613      	mov	r3, r2
 8000714:	71fb      	strb	r3, [r7, #7]
	hlcd->hi2c           = hi2c;
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	68ba      	ldr	r2, [r7, #8]
 800071a:	601a      	str	r2, [r3, #0]
	hlcd->device_address = device_address;
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	79fa      	ldrb	r2, [r7, #7]
 8000720:	711a      	strb	r2, [r3, #4]

	uint8_t data = 0x30; // b# 0011 1000
 8000722:	2330      	movs	r3, #48	; 0x30
 8000724:	75fb      	strb	r3, [r7, #23]
	uint8_t ctrl = 0x08;
 8000726:	2308      	movs	r3, #8
 8000728:	75bb      	strb	r3, [r7, #22]

	My_Delay(70000);
 800072a:	4823      	ldr	r0, [pc, #140]	; (80007b8 <TextLCD_Init+0xb0>)
 800072c:	f7ff ff2a 	bl	8000584 <My_Delay>

	TextLCD_SendNibbleWithPulseOnE(hlcd, (data|ctrl) );
 8000730:	7dfa      	ldrb	r2, [r7, #23]
 8000732:	7dbb      	ldrb	r3, [r7, #22]
 8000734:	4313      	orrs	r3, r2
 8000736:	b2db      	uxtb	r3, r3
 8000738:	4619      	mov	r1, r3
 800073a:	68f8      	ldr	r0, [r7, #12]
 800073c:	f7ff ff4e 	bl	80005dc <TextLCD_SendNibbleWithPulseOnE>
	TextLCD_SendNibbleWithPulseOnE(hlcd, (data|ctrl) );
 8000740:	7dfa      	ldrb	r2, [r7, #23]
 8000742:	7dbb      	ldrb	r3, [r7, #22]
 8000744:	4313      	orrs	r3, r2
 8000746:	b2db      	uxtb	r3, r3
 8000748:	4619      	mov	r1, r3
 800074a:	68f8      	ldr	r0, [r7, #12]
 800074c:	f7ff ff46 	bl	80005dc <TextLCD_SendNibbleWithPulseOnE>
	TextLCD_SendNibbleWithPulseOnE(hlcd, (data|ctrl) );
 8000750:	7dfa      	ldrb	r2, [r7, #23]
 8000752:	7dbb      	ldrb	r3, [r7, #22]
 8000754:	4313      	orrs	r3, r2
 8000756:	b2db      	uxtb	r3, r3
 8000758:	4619      	mov	r1, r3
 800075a:	68f8      	ldr	r0, [r7, #12]
 800075c:	f7ff ff3e 	bl	80005dc <TextLCD_SendNibbleWithPulseOnE>

	data = 0x20;
 8000760:	2320      	movs	r3, #32
 8000762:	75fb      	strb	r3, [r7, #23]
	TextLCD_SendNibbleWithPulseOnE(hlcd, (data|ctrl) );
 8000764:	7dfa      	ldrb	r2, [r7, #23]
 8000766:	7dbb      	ldrb	r3, [r7, #22]
 8000768:	4313      	orrs	r3, r2
 800076a:	b2db      	uxtb	r3, r3
 800076c:	4619      	mov	r1, r3
 800076e:	68f8      	ldr	r0, [r7, #12]
 8000770:	f7ff ff34 	bl	80005dc <TextLCD_SendNibbleWithPulseOnE>

	// Finished setting up 4-bit mode. Let's configure display

	// hlcd, data, rs, rw
	TextLCD_SendByte(hlcd, 0x28, 0); //N=1 (2 line), F=0 (5x8)
 8000774:	2200      	movs	r2, #0
 8000776:	2128      	movs	r1, #40	; 0x28
 8000778:	68f8      	ldr	r0, [r7, #12]
 800077a:	f7ff ff73 	bl	8000664 <TextLCD_SendByte>

	TextLCD_SendByte(hlcd, 0x0F, 0); //Display off, Cursor Off, Blink off
 800077e:	2200      	movs	r2, #0
 8000780:	210f      	movs	r1, #15
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f7ff ff6e 	bl	8000664 <TextLCD_SendByte>
	TextLCD_SendByte(hlcd, 0x01, 0);
 8000788:	2200      	movs	r2, #0
 800078a:	2101      	movs	r1, #1
 800078c:	68f8      	ldr	r0, [r7, #12]
 800078e:	f7ff ff69 	bl	8000664 <TextLCD_SendByte>
	My_Delay(5000);
 8000792:	f241 3088 	movw	r0, #5000	; 0x1388
 8000796:	f7ff fef5 	bl	8000584 <My_Delay>

	TextLCD_SendByte(hlcd, 0x06, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2106      	movs	r1, #6
 800079e:	68f8      	ldr	r0, [r7, #12]
 80007a0:	f7ff ff60 	bl	8000664 <TextLCD_SendByte>
	TextLCD_SendByte(hlcd, 0x0C, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	210c      	movs	r1, #12
 80007a8:	68f8      	ldr	r0, [r7, #12]
 80007aa:	f7ff ff5b 	bl	8000664 <TextLCD_SendByte>
}
 80007ae:	bf00      	nop
 80007b0:	3718      	adds	r7, #24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	00011170 	.word	0x00011170

080007bc <TextLCD_SetBacklightFlag>:


void TextLCD_SetBacklightFlag(GPIO_PinState bt)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
	BT = bt;
 80007c6:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <TextLCD_SetBacklightFlag+0x1c>)
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	7013      	strb	r3, [r2, #0]
}
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	20000000 	.word	0x20000000

080007dc <TextLCD_Home>:



void TextLCD_Home		(TextLCDType * hlcd)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	TextLCD_SendByte(hlcd, 0b10, 0);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2102      	movs	r1, #2
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff ff3b 	bl	8000664 <TextLCD_SendByte>
	My_Delay(1520);
 80007ee:	f44f 60be 	mov.w	r0, #1520	; 0x5f0
 80007f2:	f7ff fec7 	bl	8000584 <My_Delay>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <TextLCD_Clear>:


void TextLCD_Clear		(TextLCDType * hlcd)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
	TextLCD_SendByte(hlcd, 0b1, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2101      	movs	r1, #1
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff ff2a 	bl	8000664 <TextLCD_SendByte>
	My_Delay(37);
 8000810:	2025      	movs	r0, #37	; 0x25
 8000812:	f7ff feb7 	bl	8000584 <My_Delay>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <TextLCD_SetDDRAMAdr>:

void TextLCD_SetDDRAMAdr(TextLCDType * hlcd, uint8_t adr)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
 8000826:	460b      	mov	r3, r1
 8000828:	70fb      	strb	r3, [r7, #3]
	TextLCD_SendByte(hlcd, 0x80|adr, 0);
 800082a:	78fb      	ldrb	r3, [r7, #3]
 800082c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000830:	b2db      	uxtb	r3, r3
 8000832:	2200      	movs	r2, #0
 8000834:	4619      	mov	r1, r3
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f7ff ff14 	bl	8000664 <TextLCD_SendByte>
	My_Delay(37);
 800083c:	2025      	movs	r0, #37	; 0x25
 800083e:	f7ff fea1 	bl	8000584 <My_Delay>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <TextLCD_Position>:


void TextLCD_Position	(TextLCDType * hlcd, int col, int row)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b084      	sub	sp, #16
 800084e:	af00      	add	r7, sp, #0
 8000850:	60f8      	str	r0, [r7, #12]
 8000852:	60b9      	str	r1, [r7, #8]
 8000854:	607a      	str	r2, [r7, #4]
	TextLCD_SetDDRAMAdr(hlcd, col + row*0x40);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	019b      	lsls	r3, r3, #6
 800085c:	b2da      	uxtb	r2, r3
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	4413      	add	r3, r2
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4619      	mov	r1, r3
 8000868:	68f8      	ldr	r0, [r7, #12]
 800086a:	f7ff ffd8 	bl	800081e <TextLCD_SetDDRAMAdr>
}
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <TextLCD_PutStr>:
	My_Delay(37);
}


void TextLCD_PutStr		(TextLCDType * hlcd, char * str)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b082      	sub	sp, #8
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
 800087e:	6039      	str	r1, [r7, #0]
	while(*str){
 8000880:	e00c      	b.n	800089c <TextLCD_PutStr+0x26>
		TextLCD_SendByte(hlcd, *str, 1);
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2201      	movs	r2, #1
 8000888:	4619      	mov	r1, r3
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff feea 	bl	8000664 <TextLCD_SendByte>
		My_Delay(37);
 8000890:	2025      	movs	r0, #37	; 0x25
 8000892:	f7ff fe77 	bl	8000584 <My_Delay>
		str++;
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	3301      	adds	r3, #1
 800089a:	603b      	str	r3, [r7, #0]
	while(*str){
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d1ee      	bne.n	8000882 <TextLCD_PutStr+0xc>
	}
}
 80008a4:	bf00      	nop
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <cd_set>:
	uint8_t sec;
	uint8_t half;
};


void cd_set(struct clock_data *pcd, uint8_t hrs, uint8_t min, uint8_t sec){
 80008ae:	b480      	push	{r7}
 80008b0:	b083      	sub	sp, #12
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
 80008b6:	4608      	mov	r0, r1
 80008b8:	4611      	mov	r1, r2
 80008ba:	461a      	mov	r2, r3
 80008bc:	4603      	mov	r3, r0
 80008be:	70fb      	strb	r3, [r7, #3]
 80008c0:	460b      	mov	r3, r1
 80008c2:	70bb      	strb	r3, [r7, #2]
 80008c4:	4613      	mov	r3, r2
 80008c6:	707b      	strb	r3, [r7, #1]
	pcd->hrs = hrs;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	78fa      	ldrb	r2, [r7, #3]
 80008cc:	701a      	strb	r2, [r3, #0]
	pcd->min = min;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	78ba      	ldrb	r2, [r7, #2]
 80008d2:	705a      	strb	r2, [r3, #1]
	pcd->sec = sec;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	787a      	ldrb	r2, [r7, #1]
 80008d8:	709a      	strb	r2, [r3, #2]
	pcd->half = 0;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2200      	movs	r2, #0
 80008de:	70da      	strb	r2, [r3, #3]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <cd_tick>:

void cd_tick(struct clock_data * pcd){
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	pcd->half++;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	78db      	ldrb	r3, [r3, #3]
 80008f8:	3301      	adds	r3, #1
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	70da      	strb	r2, [r3, #3]

	pcd->sec += pcd->half / 2;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	789a      	ldrb	r2, [r3, #2]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	78db      	ldrb	r3, [r3, #3]
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	b2db      	uxtb	r3, r3
 800090c:	4413      	add	r3, r2
 800090e:	b2da      	uxtb	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	709a      	strb	r2, [r3, #2]
	pcd->half %= 2;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	78db      	ldrb	r3, [r3, #3]
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	b2da      	uxtb	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	70da      	strb	r2, [r3, #3]

	pcd->min += pcd->sec / 60;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	785a      	ldrb	r2, [r3, #1]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	789b      	ldrb	r3, [r3, #2]
 800092a:	4923      	ldr	r1, [pc, #140]	; (80009b8 <cd_tick+0xcc>)
 800092c:	fba1 1303 	umull	r1, r3, r1, r3
 8000930:	095b      	lsrs	r3, r3, #5
 8000932:	b2db      	uxtb	r3, r3
 8000934:	4413      	add	r3, r2
 8000936:	b2da      	uxtb	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	705a      	strb	r2, [r3, #1]
	pcd->sec %= 60;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	789a      	ldrb	r2, [r3, #2]
 8000940:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <cd_tick+0xcc>)
 8000942:	fba3 1302 	umull	r1, r3, r3, r2
 8000946:	0959      	lsrs	r1, r3, #5
 8000948:	460b      	mov	r3, r1
 800094a:	011b      	lsls	r3, r3, #4
 800094c:	1a5b      	subs	r3, r3, r1
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	b2da      	uxtb	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	709a      	strb	r2, [r3, #2]

	pcd->hrs += pcd->min / 60;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	781a      	ldrb	r2, [r3, #0]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	785b      	ldrb	r3, [r3, #1]
 8000960:	4915      	ldr	r1, [pc, #84]	; (80009b8 <cd_tick+0xcc>)
 8000962:	fba1 1303 	umull	r1, r3, r1, r3
 8000966:	095b      	lsrs	r3, r3, #5
 8000968:	b2db      	uxtb	r3, r3
 800096a:	4413      	add	r3, r2
 800096c:	b2da      	uxtb	r2, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	701a      	strb	r2, [r3, #0]
	pcd->min %= 60;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	785a      	ldrb	r2, [r3, #1]
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <cd_tick+0xcc>)
 8000978:	fba3 1302 	umull	r1, r3, r3, r2
 800097c:	0959      	lsrs	r1, r3, #5
 800097e:	460b      	mov	r3, r1
 8000980:	011b      	lsls	r3, r3, #4
 8000982:	1a5b      	subs	r3, r3, r1
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	b2da      	uxtb	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	705a      	strb	r2, [r3, #1]

	pcd->hrs %= 24;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	781a      	ldrb	r2, [r3, #0]
 8000992:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <cd_tick+0xd0>)
 8000994:	fba3 1302 	umull	r1, r3, r3, r2
 8000998:	0919      	lsrs	r1, r3, #4
 800099a:	460b      	mov	r3, r1
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	440b      	add	r3, r1
 80009a0:	00db      	lsls	r3, r3, #3
 80009a2:	1ad3      	subs	r3, r2, r3
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	701a      	strb	r2, [r3, #0]
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	88888889 	.word	0x88888889
 80009bc:	aaaaaaab 	.word	0xaaaaaaab

080009c0 <cd_string>:

int cd_string(struct clock_data * pcd, char * str){
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b089      	sub	sp, #36	; 0x24
 80009c4:	af04      	add	r7, sp, #16
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
	  char delimiter = pcd->half ? ':' : ' ';
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	78db      	ldrb	r3, [r3, #3]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <cd_string+0x16>
 80009d2:	233a      	movs	r3, #58	; 0x3a
 80009d4:	e000      	b.n	80009d8 <cd_string+0x18>
 80009d6:	2320      	movs	r3, #32
 80009d8:	73fb      	strb	r3, [r7, #15]
	  return sprintf(str, "%02u%c%02u%c%02u", pcd->hrs, delimiter, pcd->min, delimiter, pcd->sec);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	461c      	mov	r4, r3
 80009e0:	7bf9      	ldrb	r1, [r7, #15]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	785b      	ldrb	r3, [r3, #1]
 80009e6:	4618      	mov	r0, r3
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	7892      	ldrb	r2, [r2, #2]
 80009ee:	9202      	str	r2, [sp, #8]
 80009f0:	9301      	str	r3, [sp, #4]
 80009f2:	9000      	str	r0, [sp, #0]
 80009f4:	460b      	mov	r3, r1
 80009f6:	4622      	mov	r2, r4
 80009f8:	4904      	ldr	r1, [pc, #16]	; (8000a0c <cd_string+0x4c>)
 80009fa:	6838      	ldr	r0, [r7, #0]
 80009fc:	f003 f8ba 	bl	8003b74 <siprintf>
 8000a00:	4603      	mov	r3, r0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd90      	pop	{r4, r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	08004468 	.word	0x08004468

08000a10 <uart_print_cd>:

void uart_print_cd(UART_HandleTypeDef * huart, struct clock_data * pcd){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b09c      	sub	sp, #112	; 0x70
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
	char cl_str[10] = {'\0'};
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	663b      	str	r3, [r7, #96]	; 0x60
 8000a1e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	809a      	strh	r2, [r3, #4]
	char str[81] = {'\0'};
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	f107 0310 	add.w	r3, r7, #16
 8000a30:	224d      	movs	r2, #77	; 0x4d
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f003 f895 	bl	8003b64 <memset>
	int str_len = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	66fb      	str	r3, [r7, #108]	; 0x6c
	str_len = cd_string(pcd, cl_str);
 8000a3e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000a42:	4619      	mov	r1, r3
 8000a44:	6838      	ldr	r0, [r7, #0]
 8000a46:	f7ff ffbb 	bl	80009c0 <cd_string>
 8000a4a:	66f8      	str	r0, [r7, #108]	; 0x6c
	str_len = sprintf(str, "%s\n\r", cl_str);
 8000a4c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	4908      	ldr	r1, [pc, #32]	; (8000a78 <uart_print_cd+0x68>)
 8000a56:	4618      	mov	r0, r3
 8000a58:	f003 f88c 	bl	8003b74 <siprintf>
 8000a5c:	66f8      	str	r0, [r7, #108]	; 0x6c
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8000a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	f107 010c 	add.w	r1, r7, #12
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6a:	4804      	ldr	r0, [pc, #16]	; (8000a7c <uart_print_cd+0x6c>)
 8000a6c:	f002 fcdb 	bl	8003426 <HAL_UART_Transmit>
}
 8000a70:	bf00      	nop
 8000a72:	3770      	adds	r7, #112	; 0x70
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	0800447c 	.word	0x0800447c
 8000a7c:	2000017c 	.word	0x2000017c

08000a80 <lcd_print_cd>:

void lcd_print_cd(TextLCDType *hlcd, struct clock_data * pcd){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
	char str[10] = {'\0'};
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	809a      	strh	r2, [r3, #4]
	cd_string(pcd, str);
 8000a98:	f107 030c 	add.w	r3, r7, #12
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	6838      	ldr	r0, [r7, #0]
 8000aa0:	f7ff ff8e 	bl	80009c0 <cd_string>
	TextLCD_Position(hlcd, 8, 1);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	2108      	movs	r1, #8
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff fece 	bl	800084a <TextLCD_Position>
	TextLCD_PutStr(hlcd, str);
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f7ff fede 	bl	8000876 <TextLCD_PutStr>
}
 8000aba:	bf00      	nop
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <HAL_TIM_PeriodElapsedCallback>:

uint32_t unhandled_clock = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	if(htim == &htim1){
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a07      	ldr	r2, [pc, #28]	; (8000aec <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d104      	bne.n	8000ade <HAL_TIM_PeriodElapsedCallback+0x1a>
		unhandled_clock++;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000adc:	6013      	str	r3, [r2, #0]
	}
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	200000ec 	.word	0x200000ec
 8000af0:	200001c0 	.word	0x200001c0

08000af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b09a      	sub	sp, #104	; 0x68
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afa:	f000 fbfb 	bl	80012f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000afe:	f000 f885 	bl	8000c0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b02:	f000 f9e7 	bl	8000ed4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b06:	f000 f9bb 	bl	8000e80 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000b0a:	f000 f8eb 	bl	8000ce4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000b0e:	f000 f917 	bl	8000d40 <MX_TIM1_Init>
  MX_TIM5_Init();
 8000b12:	f000 f967 	bl	8000de4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  struct clock_data my_clock;
  cd_set(&my_clock, 23, 59, 45);
 8000b16:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8000b1a:	232d      	movs	r3, #45	; 0x2d
 8000b1c:	223b      	movs	r2, #59	; 0x3b
 8000b1e:	2117      	movs	r1, #23
 8000b20:	f7ff fec5 	bl	80008ae <cd_set>

  HAL_TIM_Base_Start_IT(&htim1);
 8000b24:	4831      	ldr	r0, [pc, #196]	; (8000bec <main+0xf8>)
 8000b26:	f002 f83b 	bl	8002ba0 <HAL_TIM_Base_Start_IT>
  {
	  char str[81] = {'\0'};
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	f107 0308 	add.w	r3, r7, #8
 8000b32:	224d      	movs	r2, #77	; 0x4d
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f003 f814 	bl	8003b64 <memset>
	  int str_len = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	667b      	str	r3, [r7, #100]	; 0x64
	  str_len = sprintf(str, "Starting\n\r");
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	492b      	ldr	r1, [pc, #172]	; (8000bf0 <main+0xfc>)
 8000b44:	4618      	mov	r0, r3
 8000b46:	f003 f815 	bl	8003b74 <siprintf>
 8000b4a:	6678      	str	r0, [r7, #100]	; 0x64
	  HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8000b4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	1d39      	adds	r1, r7, #4
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
 8000b56:	4827      	ldr	r0, [pc, #156]	; (8000bf4 <main+0x100>)
 8000b58:	f002 fc65 	bl	8003426 <HAL_UART_Transmit>
	  str_len = sprintf(str, "took %lu\n\r", high_resolution_clock);
 8000b5c:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <main+0x104>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	4926      	ldr	r1, [pc, #152]	; (8000bfc <main+0x108>)
 8000b64:	4618      	mov	r0, r3
 8000b66:	f003 f805 	bl	8003b74 <siprintf>
 8000b6a:	6678      	str	r0, [r7, #100]	; 0x64
	  HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8000b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	1d39      	adds	r1, r7, #4
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
 8000b76:	481f      	ldr	r0, [pc, #124]	; (8000bf4 <main+0x100>)
 8000b78:	f002 fc55 	bl	8003426 <HAL_UART_Transmit>
  }
  uart_print_cd(&huart2, &my_clock);
 8000b7c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b80:	4619      	mov	r1, r3
 8000b82:	481c      	ldr	r0, [pc, #112]	; (8000bf4 <main+0x100>)
 8000b84:	f7ff ff44 	bl	8000a10 <uart_print_cd>

  TextLCDType hlcd;

  TextLCD_Init(&hlcd, &hi2c1, 0x4E);
 8000b88:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b8c:	224e      	movs	r2, #78	; 0x4e
 8000b8e:	491c      	ldr	r1, [pc, #112]	; (8000c00 <main+0x10c>)
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fdb9 	bl	8000708 <TextLCD_Init>
  TextLCD_SetBacklightFlag(GPIO_PIN_SET);
 8000b96:	2001      	movs	r0, #1
 8000b98:	f7ff fe10 	bl	80007bc <TextLCD_SetBacklightFlag>

  TextLCD_Clear(&hlcd);
 8000b9c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fe2c 	bl	80007fe <TextLCD_Clear>
  TextLCD_Home(&hlcd);
 8000ba6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fe16 	bl	80007dc <TextLCD_Home>
  TextLCD_PutStr(&hlcd, "Hello world");
 8000bb0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bb4:	4913      	ldr	r1, [pc, #76]	; (8000c04 <main+0x110>)
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fe5d 	bl	8000876 <TextLCD_PutStr>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if(unhandled_clock){
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <main+0x114>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d0fb      	beq.n	8000bbc <main+0xc8>
		  unhandled_clock--;
 8000bc4:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <main+0x114>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	3b01      	subs	r3, #1
 8000bca:	4a0f      	ldr	r2, [pc, #60]	; (8000c08 <main+0x114>)
 8000bcc:	6013      	str	r3, [r2, #0]
		  cd_tick(&my_clock);
 8000bce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fe8a 	bl	80008ec <cd_tick>
		  lcd_print_cd(&hlcd, &my_clock);
 8000bd8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000bdc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000be0:	4611      	mov	r1, r2
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ff4c 	bl	8000a80 <lcd_print_cd>
	  if(unhandled_clock){
 8000be8:	e7e8      	b.n	8000bbc <main+0xc8>
 8000bea:	bf00      	nop
 8000bec:	200000ec 	.word	0x200000ec
 8000bf0:	08004484 	.word	0x08004484
 8000bf4:	2000017c 	.word	0x2000017c
 8000bf8:	20000090 	.word	0x20000090
 8000bfc:	08004490 	.word	0x08004490
 8000c00:	20000098 	.word	0x20000098
 8000c04:	0800449c 	.word	0x0800449c
 8000c08:	200001c0 	.word	0x200001c0

08000c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b094      	sub	sp, #80	; 0x50
 8000c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c12:	f107 0320 	add.w	r3, r7, #32
 8000c16:	2230      	movs	r2, #48	; 0x30
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f002 ffa2 	bl	8003b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c30:	2300      	movs	r3, #0
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	4b29      	ldr	r3, [pc, #164]	; (8000cdc <SystemClock_Config+0xd0>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c38:	4a28      	ldr	r2, [pc, #160]	; (8000cdc <SystemClock_Config+0xd0>)
 8000c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c40:	4b26      	ldr	r3, [pc, #152]	; (8000cdc <SystemClock_Config+0xd0>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	4b23      	ldr	r3, [pc, #140]	; (8000ce0 <SystemClock_Config+0xd4>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c58:	4a21      	ldr	r2, [pc, #132]	; (8000ce0 <SystemClock_Config+0xd4>)
 8000c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c5e:	6013      	str	r3, [r2, #0]
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <SystemClock_Config+0xd4>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c70:	2301      	movs	r3, #1
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c74:	2310      	movs	r3, #16
 8000c76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c80:	2310      	movs	r3, #16
 8000c82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c84:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c88:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c8e:	2307      	movs	r3, #7
 8000c90:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c92:	f107 0320 	add.w	r3, r7, #32
 8000c96:	4618      	mov	r0, r3
 8000c98:	f001 fa9a 	bl	80021d0 <HAL_RCC_OscConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ca2:	f000 f985 	bl	8000fb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca6:	230f      	movs	r3, #15
 8000ca8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000caa:	2302      	movs	r3, #2
 8000cac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f001 fcfc 	bl	80026c0 <HAL_RCC_ClockConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000cce:	f000 f96f 	bl	8000fb0 <Error_Handler>
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	3750      	adds	r7, #80	; 0x50
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40007000 	.word	0x40007000

08000ce4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000cea:	4a13      	ldr	r2, [pc, #76]	; (8000d38 <MX_I2C1_Init+0x54>)
 8000cec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000cf0:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <MX_I2C1_Init+0x58>)
 8000cf2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000d02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d08:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d20:	4804      	ldr	r0, [pc, #16]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000d22:	f000 fe09 	bl	8001938 <HAL_I2C_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d2c:	f000 f940 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000098 	.word	0x20000098
 8000d38:	40005400 	.word	0x40005400
 8000d3c:	000186a0 	.word	0x000186a0

08000d40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d46:	f107 0308 	add.w	r3, r7, #8
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d54:	463b      	mov	r3, r7
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d5c:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <MX_TIM1_Init+0x9c>)
 8000d5e:	4a20      	ldr	r2, [pc, #128]	; (8000de0 <MX_TIM1_Init+0xa0>)
 8000d60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15999;
 8000d62:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <MX_TIM1_Init+0x9c>)
 8000d64:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000d68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <MX_TIM1_Init+0x9c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2624;
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <MX_TIM1_Init+0x9c>)
 8000d72:	f44f 6224 	mov.w	r2, #2624	; 0xa40
 8000d76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d78:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <MX_TIM1_Init+0x9c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d7e:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <MX_TIM1_Init+0x9c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d84:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <MX_TIM1_Init+0x9c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d8a:	4814      	ldr	r0, [pc, #80]	; (8000ddc <MX_TIM1_Init+0x9c>)
 8000d8c:	f001 feb8 	bl	8002b00 <HAL_TIM_Base_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000d96:	f000 f90b 	bl	8000fb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000da0:	f107 0308 	add.w	r3, r7, #8
 8000da4:	4619      	mov	r1, r3
 8000da6:	480d      	ldr	r0, [pc, #52]	; (8000ddc <MX_TIM1_Init+0x9c>)
 8000da8:	f002 f864 	bl	8002e74 <HAL_TIM_ConfigClockSource>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000db2:	f000 f8fd 	bl	8000fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db6:	2300      	movs	r3, #0
 8000db8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4806      	ldr	r0, [pc, #24]	; (8000ddc <MX_TIM1_Init+0x9c>)
 8000dc4:	f002 fa60 	bl	8003288 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000dce:	f000 f8ef 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200000ec 	.word	0x200000ec
 8000de0:	40010000 	.word	0x40010000

08000de4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dea:	f107 0308 	add.w	r3, r7, #8
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df8:	463b      	mov	r3, r7
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e00:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <MX_TIM5_Init+0x94>)
 8000e02:	4a1e      	ldr	r2, [pc, #120]	; (8000e7c <MX_TIM5_Init+0x98>)
 8000e04:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84;
 8000e06:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <MX_TIM5_Init+0x94>)
 8000e08:	2254      	movs	r2, #84	; 0x54
 8000e0a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <MX_TIM5_Init+0x94>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000e12:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <MX_TIM5_Init+0x94>)
 8000e14:	f04f 32ff 	mov.w	r2, #4294967295
 8000e18:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <MX_TIM5_Init+0x94>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <MX_TIM5_Init+0x94>)
 8000e22:	2280      	movs	r2, #128	; 0x80
 8000e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e26:	4814      	ldr	r0, [pc, #80]	; (8000e78 <MX_TIM5_Init+0x94>)
 8000e28:	f001 fe6a 	bl	8002b00 <HAL_TIM_Base_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000e32:	f000 f8bd 	bl	8000fb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000e3c:	f107 0308 	add.w	r3, r7, #8
 8000e40:	4619      	mov	r1, r3
 8000e42:	480d      	ldr	r0, [pc, #52]	; (8000e78 <MX_TIM5_Init+0x94>)
 8000e44:	f002 f816 	bl	8002e74 <HAL_TIM_ConfigClockSource>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000e4e:	f000 f8af 	bl	8000fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e52:	2300      	movs	r3, #0
 8000e54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4806      	ldr	r0, [pc, #24]	; (8000e78 <MX_TIM5_Init+0x94>)
 8000e60:	f002 fa12 	bl	8003288 <HAL_TIMEx_MasterConfigSynchronization>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000e6a:	f000 f8a1 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000134 	.word	0x20000134
 8000e7c:	40000c00 	.word	0x40000c00

08000e80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000e86:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <MX_USART2_UART_Init+0x50>)
 8000e88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000e8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ea4:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eaa:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eb6:	4805      	ldr	r0, [pc, #20]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000eb8:	f002 fa68 	bl	800338c <HAL_UART_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ec2:	f000 f875 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	2000017c 	.word	0x2000017c
 8000ed0:	40004400 	.word	0x40004400

08000ed4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <MX_GPIO_Init+0xd0>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a2c      	ldr	r2, [pc, #176]	; (8000fa4 <MX_GPIO_Init+0xd0>)
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <MX_GPIO_Init+0xd0>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <MX_GPIO_Init+0xd0>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a25      	ldr	r2, [pc, #148]	; (8000fa4 <MX_GPIO_Init+0xd0>)
 8000f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <MX_GPIO_Init+0xd0>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <MX_GPIO_Init+0xd0>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a1e      	ldr	r2, [pc, #120]	; (8000fa4 <MX_GPIO_Init+0xd0>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <MX_GPIO_Init+0xd0>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <MX_GPIO_Init+0xd0>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a17      	ldr	r2, [pc, #92]	; (8000fa4 <MX_GPIO_Init+0xd0>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <MX_GPIO_Init+0xd0>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2120      	movs	r1, #32
 8000f5e:	4812      	ldr	r0, [pc, #72]	; (8000fa8 <MX_GPIO_Init+0xd4>)
 8000f60:	f000 fcd0 	bl	8001904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f6a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480c      	ldr	r0, [pc, #48]	; (8000fac <MX_GPIO_Init+0xd8>)
 8000f7c:	f000 fb3e 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f80:	2320      	movs	r3, #32
 8000f82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4619      	mov	r1, r3
 8000f96:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <MX_GPIO_Init+0xd4>)
 8000f98:	f000 fb30 	bl	80015fc <HAL_GPIO_Init>

}
 8000f9c:	bf00      	nop
 8000f9e:	3728      	adds	r7, #40	; 0x28
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020000 	.word	0x40020000
 8000fac:	40020800 	.word	0x40020800

08000fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb4:	b672      	cpsid	i
}
 8000fb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <Error_Handler+0x8>
	...

08000fbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <HAL_MspInit+0x4c>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4a0f      	ldr	r2, [pc, #60]	; (8001008 <HAL_MspInit+0x4c>)
 8000fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <HAL_MspInit+0x4c>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	603b      	str	r3, [r7, #0]
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <HAL_MspInit+0x4c>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	4a08      	ldr	r2, [pc, #32]	; (8001008 <HAL_MspInit+0x4c>)
 8000fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fec:	6413      	str	r3, [r2, #64]	; 0x40
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_MspInit+0x4c>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ffa:	2007      	movs	r0, #7
 8000ffc:	f000 fabc 	bl	8001578 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40023800 	.word	0x40023800

0800100c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a19      	ldr	r2, [pc, #100]	; (8001090 <HAL_I2C_MspInit+0x84>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d12b      	bne.n	8001086 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <HAL_I2C_MspInit+0x88>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a17      	ldr	r2, [pc, #92]	; (8001094 <HAL_I2C_MspInit+0x88>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_I2C_MspInit+0x88>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800104a:	23c0      	movs	r3, #192	; 0xc0
 800104c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800104e:	2312      	movs	r3, #18
 8001050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001056:	2303      	movs	r3, #3
 8001058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800105a:	2304      	movs	r3, #4
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	480c      	ldr	r0, [pc, #48]	; (8001098 <HAL_I2C_MspInit+0x8c>)
 8001066:	f000 fac9 	bl	80015fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <HAL_I2C_MspInit+0x88>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	4a08      	ldr	r2, [pc, #32]	; (8001094 <HAL_I2C_MspInit+0x88>)
 8001074:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001078:	6413      	str	r3, [r2, #64]	; 0x40
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_I2C_MspInit+0x88>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	; 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40005400 	.word	0x40005400
 8001094:	40023800 	.word	0x40023800
 8001098:	40020400 	.word	0x40020400

0800109c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a18      	ldr	r2, [pc, #96]	; (800110c <HAL_TIM_Base_MspInit+0x70>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d116      	bne.n	80010dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	4b17      	ldr	r3, [pc, #92]	; (8001110 <HAL_TIM_Base_MspInit+0x74>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	4a16      	ldr	r2, [pc, #88]	; (8001110 <HAL_TIM_Base_MspInit+0x74>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6453      	str	r3, [r2, #68]	; 0x44
 80010be:	4b14      	ldr	r3, [pc, #80]	; (8001110 <HAL_TIM_Base_MspInit+0x74>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	2019      	movs	r0, #25
 80010d0:	f000 fa5d 	bl	800158e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80010d4:	2019      	movs	r0, #25
 80010d6:	f000 fa76 	bl	80015c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80010da:	e012      	b.n	8001102 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0c      	ldr	r2, [pc, #48]	; (8001114 <HAL_TIM_Base_MspInit+0x78>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d10d      	bne.n	8001102 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <HAL_TIM_Base_MspInit+0x74>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	4a08      	ldr	r2, [pc, #32]	; (8001110 <HAL_TIM_Base_MspInit+0x74>)
 80010f0:	f043 0308 	orr.w	r3, r3, #8
 80010f4:	6413      	str	r3, [r2, #64]	; 0x40
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_TIM_Base_MspInit+0x74>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40010000 	.word	0x40010000
 8001110:	40023800 	.word	0x40023800
 8001114:	40000c00 	.word	0x40000c00

08001118 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08a      	sub	sp, #40	; 0x28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a19      	ldr	r2, [pc, #100]	; (800119c <HAL_UART_MspInit+0x84>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d12b      	bne.n	8001192 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <HAL_UART_MspInit+0x88>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	4a17      	ldr	r2, [pc, #92]	; (80011a0 <HAL_UART_MspInit+0x88>)
 8001144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001148:	6413      	str	r3, [r2, #64]	; 0x40
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <HAL_UART_MspInit+0x88>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <HAL_UART_MspInit+0x88>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a10      	ldr	r2, [pc, #64]	; (80011a0 <HAL_UART_MspInit+0x88>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <HAL_UART_MspInit+0x88>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001172:	230c      	movs	r3, #12
 8001174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001182:	2307      	movs	r3, #7
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <HAL_UART_MspInit+0x8c>)
 800118e:	f000 fa35 	bl	80015fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	; 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40004400 	.word	0x40004400
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020000 	.word	0x40020000

080011a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <NMI_Handler+0x4>

080011ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b2:	e7fe      	b.n	80011b2 <HardFault_Handler+0x4>

080011b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <MemManage_Handler+0x4>

080011ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011be:	e7fe      	b.n	80011be <BusFault_Handler+0x4>

080011c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <UsageFault_Handler+0x4>

080011c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f4:	f000 f8d0 	bl	8001398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}

080011fc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001200:	4802      	ldr	r0, [pc, #8]	; (800120c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001202:	f001 fd2f 	bl	8002c64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200000ec 	.word	0x200000ec

08001210 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001218:	4a14      	ldr	r2, [pc, #80]	; (800126c <_sbrk+0x5c>)
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <_sbrk+0x60>)
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <_sbrk+0x64>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d102      	bne.n	8001232 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <_sbrk+0x64>)
 800122e:	4a12      	ldr	r2, [pc, #72]	; (8001278 <_sbrk+0x68>)
 8001230:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <_sbrk+0x64>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	429a      	cmp	r2, r3
 800123e:	d207      	bcs.n	8001250 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001240:	f002 fc66 	bl	8003b10 <__errno>
 8001244:	4603      	mov	r3, r0
 8001246:	220c      	movs	r2, #12
 8001248:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	e009      	b.n	8001264 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <_sbrk+0x64>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <_sbrk+0x64>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	4a05      	ldr	r2, [pc, #20]	; (8001274 <_sbrk+0x64>)
 8001260:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001262:	68fb      	ldr	r3, [r7, #12]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20018000 	.word	0x20018000
 8001270:	00000400 	.word	0x00000400
 8001274:	200001c4 	.word	0x200001c4
 8001278:	200001e0 	.word	0x200001e0

0800127c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <SystemInit+0x20>)
 8001282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001286:	4a05      	ldr	r2, [pc, #20]	; (800129c <SystemInit+0x20>)
 8001288:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800128c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012a4:	480d      	ldr	r0, [pc, #52]	; (80012dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012a6:	490e      	ldr	r1, [pc, #56]	; (80012e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012a8:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012ac:	e002      	b.n	80012b4 <LoopCopyDataInit>

080012ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b2:	3304      	adds	r3, #4

080012b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b8:	d3f9      	bcc.n	80012ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ba:	4a0b      	ldr	r2, [pc, #44]	; (80012e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012bc:	4c0b      	ldr	r4, [pc, #44]	; (80012ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c0:	e001      	b.n	80012c6 <LoopFillZerobss>

080012c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c4:	3204      	adds	r2, #4

080012c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c8:	d3fb      	bcc.n	80012c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012ca:	f7ff ffd7 	bl	800127c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ce:	f002 fc25 	bl	8003b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d2:	f7ff fc0f 	bl	8000af4 <main>
  bx  lr    
 80012d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80012e4:	08004504 	.word	0x08004504
  ldr r2, =_sbss
 80012e8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80012ec:	200001dc 	.word	0x200001dc

080012f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f0:	e7fe      	b.n	80012f0 <ADC_IRQHandler>
	...

080012f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_Init+0x40>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a0d      	ldr	r2, [pc, #52]	; (8001334 <HAL_Init+0x40>)
 80012fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001302:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <HAL_Init+0x40>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <HAL_Init+0x40>)
 800130a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800130e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_Init+0x40>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a07      	ldr	r2, [pc, #28]	; (8001334 <HAL_Init+0x40>)
 8001316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800131c:	2003      	movs	r0, #3
 800131e:	f000 f92b 	bl	8001578 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001322:	2000      	movs	r0, #0
 8001324:	f000 f808 	bl	8001338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001328:	f7ff fe48 	bl	8000fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40023c00 	.word	0x40023c00

08001338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_InitTick+0x54>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_InitTick+0x58>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001352:	fbb2 f3f3 	udiv	r3, r2, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f943 	bl	80015e2 <HAL_SYSTICK_Config>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e00e      	b.n	8001384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b0f      	cmp	r3, #15
 800136a:	d80a      	bhi.n	8001382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800136c:	2200      	movs	r2, #0
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	f000 f90b 	bl	800158e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001378:	4a06      	ldr	r2, [pc, #24]	; (8001394 <HAL_InitTick+0x5c>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	e000      	b.n	8001384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000004 	.word	0x20000004
 8001390:	2000000c 	.word	0x2000000c
 8001394:	20000008 	.word	0x20000008

08001398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_IncTick+0x20>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_IncTick+0x24>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4413      	add	r3, r2
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <HAL_IncTick+0x24>)
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	2000000c 	.word	0x2000000c
 80013bc:	200001c8 	.word	0x200001c8

080013c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return uwTick;
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <HAL_GetTick+0x14>)
 80013c6:	681b      	ldr	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	200001c8 	.word	0x200001c8

080013d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <__NVIC_SetPriorityGrouping+0x44>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f4:	4013      	ands	r3, r2
 80013f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140a:	4a04      	ldr	r2, [pc, #16]	; (800141c <__NVIC_SetPriorityGrouping+0x44>)
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	60d3      	str	r3, [r2, #12]
}
 8001410:	bf00      	nop
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <__NVIC_GetPriorityGrouping+0x18>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	0a1b      	lsrs	r3, r3, #8
 800142a:	f003 0307 	and.w	r3, r3, #7
}
 800142e:	4618      	mov	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	2b00      	cmp	r3, #0
 800144c:	db0b      	blt.n	8001466 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	f003 021f 	and.w	r2, r3, #31
 8001454:	4907      	ldr	r1, [pc, #28]	; (8001474 <__NVIC_EnableIRQ+0x38>)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	095b      	lsrs	r3, r3, #5
 800145c:	2001      	movs	r0, #1
 800145e:	fa00 f202 	lsl.w	r2, r0, r2
 8001462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000e100 	.word	0xe000e100

08001478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	6039      	str	r1, [r7, #0]
 8001482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	2b00      	cmp	r3, #0
 800148a:	db0a      	blt.n	80014a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	b2da      	uxtb	r2, r3
 8001490:	490c      	ldr	r1, [pc, #48]	; (80014c4 <__NVIC_SetPriority+0x4c>)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	0112      	lsls	r2, r2, #4
 8001498:	b2d2      	uxtb	r2, r2
 800149a:	440b      	add	r3, r1
 800149c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a0:	e00a      	b.n	80014b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4908      	ldr	r1, [pc, #32]	; (80014c8 <__NVIC_SetPriority+0x50>)
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	3b04      	subs	r3, #4
 80014b0:	0112      	lsls	r2, r2, #4
 80014b2:	b2d2      	uxtb	r2, r2
 80014b4:	440b      	add	r3, r1
 80014b6:	761a      	strb	r2, [r3, #24]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000e100 	.word	0xe000e100
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b089      	sub	sp, #36	; 0x24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f1c3 0307 	rsb	r3, r3, #7
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	bf28      	it	cs
 80014ea:	2304      	movcs	r3, #4
 80014ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3304      	adds	r3, #4
 80014f2:	2b06      	cmp	r3, #6
 80014f4:	d902      	bls.n	80014fc <NVIC_EncodePriority+0x30>
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3b03      	subs	r3, #3
 80014fa:	e000      	b.n	80014fe <NVIC_EncodePriority+0x32>
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001500:	f04f 32ff 	mov.w	r2, #4294967295
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43da      	mvns	r2, r3
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	401a      	ands	r2, r3
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001514:	f04f 31ff 	mov.w	r1, #4294967295
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	fa01 f303 	lsl.w	r3, r1, r3
 800151e:	43d9      	mvns	r1, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	4313      	orrs	r3, r2
         );
}
 8001526:	4618      	mov	r0, r3
 8001528:	3724      	adds	r7, #36	; 0x24
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001544:	d301      	bcc.n	800154a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001546:	2301      	movs	r3, #1
 8001548:	e00f      	b.n	800156a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <SysTick_Config+0x40>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001552:	210f      	movs	r1, #15
 8001554:	f04f 30ff 	mov.w	r0, #4294967295
 8001558:	f7ff ff8e 	bl	8001478 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <SysTick_Config+0x40>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001562:	4b04      	ldr	r3, [pc, #16]	; (8001574 <SysTick_Config+0x40>)
 8001564:	2207      	movs	r2, #7
 8001566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	e000e010 	.word	0xe000e010

08001578 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff ff29 	bl	80013d8 <__NVIC_SetPriorityGrouping>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800158e:	b580      	push	{r7, lr}
 8001590:	b086      	sub	sp, #24
 8001592:	af00      	add	r7, sp, #0
 8001594:	4603      	mov	r3, r0
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
 800159a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a0:	f7ff ff3e 	bl	8001420 <__NVIC_GetPriorityGrouping>
 80015a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	68b9      	ldr	r1, [r7, #8]
 80015aa:	6978      	ldr	r0, [r7, #20]
 80015ac:	f7ff ff8e 	bl	80014cc <NVIC_EncodePriority>
 80015b0:	4602      	mov	r2, r0
 80015b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff5d 	bl	8001478 <__NVIC_SetPriority>
}
 80015be:	bf00      	nop
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4603      	mov	r3, r0
 80015ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff31 	bl	800143c <__NVIC_EnableIRQ>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff ffa2 	bl	8001534 <SysTick_Config>
 80015f0:	4603      	mov	r3, r0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800160e:	2300      	movs	r3, #0
 8001610:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
 8001616:	e159      	b.n	80018cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001618:	2201      	movs	r2, #1
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	429a      	cmp	r2, r3
 8001632:	f040 8148 	bne.w	80018c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 0303 	and.w	r3, r3, #3
 800163e:	2b01      	cmp	r3, #1
 8001640:	d005      	beq.n	800164e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800164a:	2b02      	cmp	r3, #2
 800164c:	d130      	bne.n	80016b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	2203      	movs	r2, #3
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	68da      	ldr	r2, [r3, #12]
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001684:	2201      	movs	r2, #1
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	091b      	lsrs	r3, r3, #4
 800169a:	f003 0201 	and.w	r2, r3, #1
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d017      	beq.n	80016ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	2203      	movs	r2, #3
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d123      	bne.n	8001740 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	08da      	lsrs	r2, r3, #3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3208      	adds	r2, #8
 8001700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001704:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	220f      	movs	r2, #15
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	691a      	ldr	r2, [r3, #16]
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	08da      	lsrs	r2, r3, #3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3208      	adds	r2, #8
 800173a:	69b9      	ldr	r1, [r7, #24]
 800173c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	2203      	movs	r2, #3
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 0203 	and.w	r2, r3, #3
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 80a2 	beq.w	80018c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	4b57      	ldr	r3, [pc, #348]	; (80018e4 <HAL_GPIO_Init+0x2e8>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	4a56      	ldr	r2, [pc, #344]	; (80018e4 <HAL_GPIO_Init+0x2e8>)
 800178c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001790:	6453      	str	r3, [r2, #68]	; 0x44
 8001792:	4b54      	ldr	r3, [pc, #336]	; (80018e4 <HAL_GPIO_Init+0x2e8>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800179e:	4a52      	ldr	r2, [pc, #328]	; (80018e8 <HAL_GPIO_Init+0x2ec>)
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	089b      	lsrs	r3, r3, #2
 80017a4:	3302      	adds	r3, #2
 80017a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	220f      	movs	r2, #15
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a49      	ldr	r2, [pc, #292]	; (80018ec <HAL_GPIO_Init+0x2f0>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d019      	beq.n	80017fe <HAL_GPIO_Init+0x202>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a48      	ldr	r2, [pc, #288]	; (80018f0 <HAL_GPIO_Init+0x2f4>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d013      	beq.n	80017fa <HAL_GPIO_Init+0x1fe>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a47      	ldr	r2, [pc, #284]	; (80018f4 <HAL_GPIO_Init+0x2f8>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d00d      	beq.n	80017f6 <HAL_GPIO_Init+0x1fa>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a46      	ldr	r2, [pc, #280]	; (80018f8 <HAL_GPIO_Init+0x2fc>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d007      	beq.n	80017f2 <HAL_GPIO_Init+0x1f6>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a45      	ldr	r2, [pc, #276]	; (80018fc <HAL_GPIO_Init+0x300>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d101      	bne.n	80017ee <HAL_GPIO_Init+0x1f2>
 80017ea:	2304      	movs	r3, #4
 80017ec:	e008      	b.n	8001800 <HAL_GPIO_Init+0x204>
 80017ee:	2307      	movs	r3, #7
 80017f0:	e006      	b.n	8001800 <HAL_GPIO_Init+0x204>
 80017f2:	2303      	movs	r3, #3
 80017f4:	e004      	b.n	8001800 <HAL_GPIO_Init+0x204>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e002      	b.n	8001800 <HAL_GPIO_Init+0x204>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <HAL_GPIO_Init+0x204>
 80017fe:	2300      	movs	r3, #0
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	f002 0203 	and.w	r2, r2, #3
 8001806:	0092      	lsls	r2, r2, #2
 8001808:	4093      	lsls	r3, r2
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001810:	4935      	ldr	r1, [pc, #212]	; (80018e8 <HAL_GPIO_Init+0x2ec>)
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	3302      	adds	r3, #2
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800181e:	4b38      	ldr	r3, [pc, #224]	; (8001900 <HAL_GPIO_Init+0x304>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001842:	4a2f      	ldr	r2, [pc, #188]	; (8001900 <HAL_GPIO_Init+0x304>)
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001848:	4b2d      	ldr	r3, [pc, #180]	; (8001900 <HAL_GPIO_Init+0x304>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800186c:	4a24      	ldr	r2, [pc, #144]	; (8001900 <HAL_GPIO_Init+0x304>)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001872:	4b23      	ldr	r3, [pc, #140]	; (8001900 <HAL_GPIO_Init+0x304>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	43db      	mvns	r3, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4013      	ands	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001896:	4a1a      	ldr	r2, [pc, #104]	; (8001900 <HAL_GPIO_Init+0x304>)
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800189c:	4b18      	ldr	r3, [pc, #96]	; (8001900 <HAL_GPIO_Init+0x304>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018c0:	4a0f      	ldr	r2, [pc, #60]	; (8001900 <HAL_GPIO_Init+0x304>)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3301      	adds	r3, #1
 80018ca:	61fb      	str	r3, [r7, #28]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	2b0f      	cmp	r3, #15
 80018d0:	f67f aea2 	bls.w	8001618 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	3724      	adds	r7, #36	; 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40013800 	.word	0x40013800
 80018ec:	40020000 	.word	0x40020000
 80018f0:	40020400 	.word	0x40020400
 80018f4:	40020800 	.word	0x40020800
 80018f8:	40020c00 	.word	0x40020c00
 80018fc:	40021000 	.word	0x40021000
 8001900:	40013c00 	.word	0x40013c00

08001904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	807b      	strh	r3, [r7, #2]
 8001910:	4613      	mov	r3, r2
 8001912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001914:	787b      	ldrb	r3, [r7, #1]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800191a:	887a      	ldrh	r2, [r7, #2]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001920:	e003      	b.n	800192a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001922:	887b      	ldrh	r3, [r7, #2]
 8001924:	041a      	lsls	r2, r3, #16
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	619a      	str	r2, [r3, #24]
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e12b      	b.n	8001ba2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d106      	bne.n	8001964 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff fb54 	bl	800100c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2224      	movs	r2, #36	; 0x24
 8001968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 0201 	bic.w	r2, r2, #1
 800197a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800198a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800199a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800199c:	f001 f888 	bl	8002ab0 <HAL_RCC_GetPCLK1Freq>
 80019a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	4a81      	ldr	r2, [pc, #516]	; (8001bac <HAL_I2C_Init+0x274>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d807      	bhi.n	80019bc <HAL_I2C_Init+0x84>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4a80      	ldr	r2, [pc, #512]	; (8001bb0 <HAL_I2C_Init+0x278>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	bf94      	ite	ls
 80019b4:	2301      	movls	r3, #1
 80019b6:	2300      	movhi	r3, #0
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	e006      	b.n	80019ca <HAL_I2C_Init+0x92>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4a7d      	ldr	r2, [pc, #500]	; (8001bb4 <HAL_I2C_Init+0x27c>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	bf94      	ite	ls
 80019c4:	2301      	movls	r3, #1
 80019c6:	2300      	movhi	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e0e7      	b.n	8001ba2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4a78      	ldr	r2, [pc, #480]	; (8001bb8 <HAL_I2C_Init+0x280>)
 80019d6:	fba2 2303 	umull	r2, r3, r2, r3
 80019da:	0c9b      	lsrs	r3, r3, #18
 80019dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	4a6a      	ldr	r2, [pc, #424]	; (8001bac <HAL_I2C_Init+0x274>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d802      	bhi.n	8001a0c <HAL_I2C_Init+0xd4>
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	e009      	b.n	8001a20 <HAL_I2C_Init+0xe8>
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	4a69      	ldr	r2, [pc, #420]	; (8001bbc <HAL_I2C_Init+0x284>)
 8001a18:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1c:	099b      	lsrs	r3, r3, #6
 8001a1e:	3301      	adds	r3, #1
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	430b      	orrs	r3, r1
 8001a26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	495c      	ldr	r1, [pc, #368]	; (8001bac <HAL_I2C_Init+0x274>)
 8001a3c:	428b      	cmp	r3, r1
 8001a3e:	d819      	bhi.n	8001a74 <HAL_I2C_Init+0x13c>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	1e59      	subs	r1, r3, #1
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a4e:	1c59      	adds	r1, r3, #1
 8001a50:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a54:	400b      	ands	r3, r1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00a      	beq.n	8001a70 <HAL_I2C_Init+0x138>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	1e59      	subs	r1, r3, #1
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a68:	3301      	adds	r3, #1
 8001a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a6e:	e051      	b.n	8001b14 <HAL_I2C_Init+0x1dc>
 8001a70:	2304      	movs	r3, #4
 8001a72:	e04f      	b.n	8001b14 <HAL_I2C_Init+0x1dc>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d111      	bne.n	8001aa0 <HAL_I2C_Init+0x168>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	1e58      	subs	r0, r3, #1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6859      	ldr	r1, [r3, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	440b      	add	r3, r1
 8001a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf0c      	ite	eq
 8001a98:	2301      	moveq	r3, #1
 8001a9a:	2300      	movne	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	e012      	b.n	8001ac6 <HAL_I2C_Init+0x18e>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	1e58      	subs	r0, r3, #1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6859      	ldr	r1, [r3, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	0099      	lsls	r1, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	bf0c      	ite	eq
 8001ac0:	2301      	moveq	r3, #1
 8001ac2:	2300      	movne	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_I2C_Init+0x196>
 8001aca:	2301      	movs	r3, #1
 8001acc:	e022      	b.n	8001b14 <HAL_I2C_Init+0x1dc>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10e      	bne.n	8001af4 <HAL_I2C_Init+0x1bc>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	1e58      	subs	r0, r3, #1
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6859      	ldr	r1, [r3, #4]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	440b      	add	r3, r1
 8001ae4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ae8:	3301      	adds	r3, #1
 8001aea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001af2:	e00f      	b.n	8001b14 <HAL_I2C_Init+0x1dc>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	1e58      	subs	r0, r3, #1
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6859      	ldr	r1, [r3, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	0099      	lsls	r1, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	6809      	ldr	r1, [r1, #0]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69da      	ldr	r2, [r3, #28]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6911      	ldr	r1, [r2, #16]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68d2      	ldr	r2, [r2, #12]
 8001b4e:	4311      	orrs	r1, r2
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	430b      	orrs	r3, r1
 8001b56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	695a      	ldr	r2, [r3, #20]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	000186a0 	.word	0x000186a0
 8001bb0:	001e847f 	.word	0x001e847f
 8001bb4:	003d08ff 	.word	0x003d08ff
 8001bb8:	431bde83 	.word	0x431bde83
 8001bbc:	10624dd3 	.word	0x10624dd3

08001bc0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af02      	add	r7, sp, #8
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	607a      	str	r2, [r7, #4]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	460b      	mov	r3, r1
 8001bce:	817b      	strh	r3, [r7, #10]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bd4:	f7ff fbf4 	bl	80013c0 <HAL_GetTick>
 8001bd8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b20      	cmp	r3, #32
 8001be4:	f040 80e0 	bne.w	8001da8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	2319      	movs	r3, #25
 8001bee:	2201      	movs	r2, #1
 8001bf0:	4970      	ldr	r1, [pc, #448]	; (8001db4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f000 f964 	bl	8001ec0 <I2C_WaitOnFlagUntilTimeout>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e0d3      	b.n	8001daa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <HAL_I2C_Master_Transmit+0x50>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e0cc      	b.n	8001daa <HAL_I2C_Master_Transmit+0x1ea>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d007      	beq.n	8001c36 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f042 0201 	orr.w	r2, r2, #1
 8001c34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2221      	movs	r2, #33	; 0x21
 8001c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2210      	movs	r2, #16
 8001c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	893a      	ldrh	r2, [r7, #8]
 8001c66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4a50      	ldr	r2, [pc, #320]	; (8001db8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c78:	8979      	ldrh	r1, [r7, #10]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	6a3a      	ldr	r2, [r7, #32]
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 f89c 	bl	8001dbc <I2C_MasterRequestWrite>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e08d      	b.n	8001daa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ca4:	e066      	b.n	8001d74 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	6a39      	ldr	r1, [r7, #32]
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	f000 f9de 	bl	800206c <I2C_WaitOnTXEFlagUntilTimeout>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00d      	beq.n	8001cd2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d107      	bne.n	8001cce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ccc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e06b      	b.n	8001daa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	781a      	ldrb	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d11b      	bne.n	8001d48 <HAL_I2C_Master_Transmit+0x188>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d017      	beq.n	8001d48 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	781a      	ldrb	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	3b01      	subs	r3, #1
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	6a39      	ldr	r1, [r7, #32]
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 f9ce 	bl	80020ee <I2C_WaitOnBTFFlagUntilTimeout>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00d      	beq.n	8001d74 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d107      	bne.n	8001d70 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d6e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e01a      	b.n	8001daa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d194      	bne.n	8001ca6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2220      	movs	r2, #32
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	e000      	b.n	8001daa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001da8:	2302      	movs	r3, #2
  }
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	00100002 	.word	0x00100002
 8001db8:	ffff0000 	.word	0xffff0000

08001dbc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af02      	add	r7, sp, #8
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d006      	beq.n	8001de6 <I2C_MasterRequestWrite+0x2a>
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d003      	beq.n	8001de6 <I2C_MasterRequestWrite+0x2a>
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001de4:	d108      	bne.n	8001df8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	e00b      	b.n	8001e10 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	2b12      	cmp	r3, #18
 8001dfe:	d107      	bne.n	8001e10 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f000 f84f 	bl	8001ec0 <I2C_WaitOnFlagUntilTimeout>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00d      	beq.n	8001e44 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e36:	d103      	bne.n	8001e40 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e035      	b.n	8001eb0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e4c:	d108      	bne.n	8001e60 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e4e:	897b      	ldrh	r3, [r7, #10]
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	461a      	mov	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e5c:	611a      	str	r2, [r3, #16]
 8001e5e:	e01b      	b.n	8001e98 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e60:	897b      	ldrh	r3, [r7, #10]
 8001e62:	11db      	asrs	r3, r3, #7
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	f003 0306 	and.w	r3, r3, #6
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f063 030f 	orn	r3, r3, #15
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	490e      	ldr	r1, [pc, #56]	; (8001eb8 <I2C_MasterRequestWrite+0xfc>)
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 f875 	bl	8001f6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e010      	b.n	8001eb0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e8e:	897b      	ldrh	r3, [r7, #10]
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	4907      	ldr	r1, [pc, #28]	; (8001ebc <I2C_MasterRequestWrite+0x100>)
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f000 f865 	bl	8001f6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	00010008 	.word	0x00010008
 8001ebc:	00010002 	.word	0x00010002

08001ec0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ed0:	e025      	b.n	8001f1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed8:	d021      	beq.n	8001f1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eda:	f7ff fa71 	bl	80013c0 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d302      	bcc.n	8001ef0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d116      	bne.n	8001f1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2220      	movs	r2, #32
 8001efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f043 0220 	orr.w	r2, r3, #32
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e023      	b.n	8001f66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	0c1b      	lsrs	r3, r3, #16
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d10d      	bne.n	8001f44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	4013      	ands	r3, r2
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	bf0c      	ite	eq
 8001f3a:	2301      	moveq	r3, #1
 8001f3c:	2300      	movne	r3, #0
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	461a      	mov	r2, r3
 8001f42:	e00c      	b.n	8001f5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	bf0c      	ite	eq
 8001f56:	2301      	moveq	r3, #1
 8001f58:	2300      	movne	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d0b6      	beq.n	8001ed2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b084      	sub	sp, #16
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	60f8      	str	r0, [r7, #12]
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	607a      	str	r2, [r7, #4]
 8001f7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f7c:	e051      	b.n	8002022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f8c:	d123      	bne.n	8001fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fa6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	f043 0204 	orr.w	r2, r3, #4
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e046      	b.n	8002064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fdc:	d021      	beq.n	8002022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fde:	f7ff f9ef 	bl	80013c0 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d302      	bcc.n	8001ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d116      	bne.n	8002022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2220      	movs	r2, #32
 8001ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f043 0220 	orr.w	r2, r3, #32
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e020      	b.n	8002064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	0c1b      	lsrs	r3, r3, #16
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b01      	cmp	r3, #1
 800202a:	d10c      	bne.n	8002046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	43da      	mvns	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	4013      	ands	r3, r2
 8002038:	b29b      	uxth	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	bf14      	ite	ne
 800203e:	2301      	movne	r3, #1
 8002040:	2300      	moveq	r3, #0
 8002042:	b2db      	uxtb	r3, r3
 8002044:	e00b      	b.n	800205e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	43da      	mvns	r2, r3
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	4013      	ands	r3, r2
 8002052:	b29b      	uxth	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	bf14      	ite	ne
 8002058:	2301      	movne	r3, #1
 800205a:	2300      	moveq	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d18d      	bne.n	8001f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002078:	e02d      	b.n	80020d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 f878 	bl	8002170 <I2C_IsAcknowledgeFailed>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e02d      	b.n	80020e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002090:	d021      	beq.n	80020d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002092:	f7ff f995 	bl	80013c0 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	68ba      	ldr	r2, [r7, #8]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d302      	bcc.n	80020a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d116      	bne.n	80020d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2220      	movs	r2, #32
 80020b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f043 0220 	orr.w	r2, r3, #32
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e007      	b.n	80020e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e0:	2b80      	cmp	r3, #128	; 0x80
 80020e2:	d1ca      	bne.n	800207a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b084      	sub	sp, #16
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020fa:	e02d      	b.n	8002158 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 f837 	bl	8002170 <I2C_IsAcknowledgeFailed>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e02d      	b.n	8002168 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002112:	d021      	beq.n	8002158 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002114:	f7ff f954 	bl	80013c0 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	429a      	cmp	r2, r3
 8002122:	d302      	bcc.n	800212a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d116      	bne.n	8002158 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2220      	movs	r2, #32
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	f043 0220 	orr.w	r2, r3, #32
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e007      	b.n	8002168 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b04      	cmp	r3, #4
 8002164:	d1ca      	bne.n	80020fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002186:	d11b      	bne.n	80021c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002190:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2220      	movs	r2, #32
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	f043 0204 	orr.w	r2, r3, #4
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
	...

080021d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e267      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d075      	beq.n	80022da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021ee:	4b88      	ldr	r3, [pc, #544]	; (8002410 <HAL_RCC_OscConfig+0x240>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d00c      	beq.n	8002214 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021fa:	4b85      	ldr	r3, [pc, #532]	; (8002410 <HAL_RCC_OscConfig+0x240>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002202:	2b08      	cmp	r3, #8
 8002204:	d112      	bne.n	800222c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002206:	4b82      	ldr	r3, [pc, #520]	; (8002410 <HAL_RCC_OscConfig+0x240>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800220e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002212:	d10b      	bne.n	800222c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002214:	4b7e      	ldr	r3, [pc, #504]	; (8002410 <HAL_RCC_OscConfig+0x240>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d05b      	beq.n	80022d8 <HAL_RCC_OscConfig+0x108>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d157      	bne.n	80022d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e242      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002234:	d106      	bne.n	8002244 <HAL_RCC_OscConfig+0x74>
 8002236:	4b76      	ldr	r3, [pc, #472]	; (8002410 <HAL_RCC_OscConfig+0x240>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a75      	ldr	r2, [pc, #468]	; (8002410 <HAL_RCC_OscConfig+0x240>)
 800223c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	e01d      	b.n	8002280 <HAL_RCC_OscConfig+0xb0>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800224c:	d10c      	bne.n	8002268 <HAL_RCC_OscConfig+0x98>
 800224e:	4b70      	ldr	r3, [pc, #448]	; (8002410 <HAL_RCC_OscConfig+0x240>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a6f      	ldr	r2, [pc, #444]	; (8002410 <HAL_RCC_OscConfig+0x240>)
 8002254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	4b6d      	ldr	r3, [pc, #436]	; (8002410 <HAL_RCC_OscConfig+0x240>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a6c      	ldr	r2, [pc, #432]	; (8002410 <HAL_RCC_OscConfig+0x240>)
 8002260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	e00b      	b.n	8002280 <HAL_RCC_OscConfig+0xb0>
 8002268:	4b69      	ldr	r3, [pc, #420]	; (8002410 <HAL_RCC_OscConfig+0x240>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a68      	ldr	r2, [pc, #416]	; (8002410 <HAL_RCC_OscConfig+0x240>)
 800226e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	4b66      	ldr	r3, [pc, #408]	; (8002410 <HAL_RCC_OscConfig+0x240>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a65      	ldr	r2, [pc, #404]	; (8002410 <HAL_RCC_OscConfig+0x240>)
 800227a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800227e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d013      	beq.n	80022b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7ff f89a 	bl	80013c0 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002290:	f7ff f896 	bl	80013c0 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b64      	cmp	r3, #100	; 0x64
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e207      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a2:	4b5b      	ldr	r3, [pc, #364]	; (8002410 <HAL_RCC_OscConfig+0x240>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0xc0>
 80022ae:	e014      	b.n	80022da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7ff f886 	bl	80013c0 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022b8:	f7ff f882 	bl	80013c0 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b64      	cmp	r3, #100	; 0x64
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e1f3      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ca:	4b51      	ldr	r3, [pc, #324]	; (8002410 <HAL_RCC_OscConfig+0x240>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0xe8>
 80022d6:	e000      	b.n	80022da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d063      	beq.n	80023ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022e6:	4b4a      	ldr	r3, [pc, #296]	; (8002410 <HAL_RCC_OscConfig+0x240>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00b      	beq.n	800230a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022f2:	4b47      	ldr	r3, [pc, #284]	; (8002410 <HAL_RCC_OscConfig+0x240>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d11c      	bne.n	8002338 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022fe:	4b44      	ldr	r3, [pc, #272]	; (8002410 <HAL_RCC_OscConfig+0x240>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d116      	bne.n	8002338 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800230a:	4b41      	ldr	r3, [pc, #260]	; (8002410 <HAL_RCC_OscConfig+0x240>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d005      	beq.n	8002322 <HAL_RCC_OscConfig+0x152>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d001      	beq.n	8002322 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e1c7      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002322:	4b3b      	ldr	r3, [pc, #236]	; (8002410 <HAL_RCC_OscConfig+0x240>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4937      	ldr	r1, [pc, #220]	; (8002410 <HAL_RCC_OscConfig+0x240>)
 8002332:	4313      	orrs	r3, r2
 8002334:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002336:	e03a      	b.n	80023ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d020      	beq.n	8002382 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002340:	4b34      	ldr	r3, [pc, #208]	; (8002414 <HAL_RCC_OscConfig+0x244>)
 8002342:	2201      	movs	r2, #1
 8002344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002346:	f7ff f83b 	bl	80013c0 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800234e:	f7ff f837 	bl	80013c0 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e1a8      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002360:	4b2b      	ldr	r3, [pc, #172]	; (8002410 <HAL_RCC_OscConfig+0x240>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236c:	4b28      	ldr	r3, [pc, #160]	; (8002410 <HAL_RCC_OscConfig+0x240>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4925      	ldr	r1, [pc, #148]	; (8002410 <HAL_RCC_OscConfig+0x240>)
 800237c:	4313      	orrs	r3, r2
 800237e:	600b      	str	r3, [r1, #0]
 8002380:	e015      	b.n	80023ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002382:	4b24      	ldr	r3, [pc, #144]	; (8002414 <HAL_RCC_OscConfig+0x244>)
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002388:	f7ff f81a 	bl	80013c0 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002390:	f7ff f816 	bl	80013c0 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e187      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a2:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <HAL_RCC_OscConfig+0x240>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d036      	beq.n	8002428 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d016      	beq.n	80023f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023c2:	4b15      	ldr	r3, [pc, #84]	; (8002418 <HAL_RCC_OscConfig+0x248>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c8:	f7fe fffa 	bl	80013c0 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023d0:	f7fe fff6 	bl	80013c0 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e167      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e2:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_RCC_OscConfig+0x240>)
 80023e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0x200>
 80023ee:	e01b      	b.n	8002428 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <HAL_RCC_OscConfig+0x248>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f6:	f7fe ffe3 	bl	80013c0 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023fc:	e00e      	b.n	800241c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023fe:	f7fe ffdf 	bl	80013c0 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d907      	bls.n	800241c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e150      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
 8002410:	40023800 	.word	0x40023800
 8002414:	42470000 	.word	0x42470000
 8002418:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800241c:	4b88      	ldr	r3, [pc, #544]	; (8002640 <HAL_RCC_OscConfig+0x470>)
 800241e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1ea      	bne.n	80023fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 8097 	beq.w	8002564 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002436:	2300      	movs	r3, #0
 8002438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800243a:	4b81      	ldr	r3, [pc, #516]	; (8002640 <HAL_RCC_OscConfig+0x470>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10f      	bne.n	8002466 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	4b7d      	ldr	r3, [pc, #500]	; (8002640 <HAL_RCC_OscConfig+0x470>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	4a7c      	ldr	r2, [pc, #496]	; (8002640 <HAL_RCC_OscConfig+0x470>)
 8002450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002454:	6413      	str	r3, [r2, #64]	; 0x40
 8002456:	4b7a      	ldr	r3, [pc, #488]	; (8002640 <HAL_RCC_OscConfig+0x470>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002462:	2301      	movs	r3, #1
 8002464:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002466:	4b77      	ldr	r3, [pc, #476]	; (8002644 <HAL_RCC_OscConfig+0x474>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246e:	2b00      	cmp	r3, #0
 8002470:	d118      	bne.n	80024a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002472:	4b74      	ldr	r3, [pc, #464]	; (8002644 <HAL_RCC_OscConfig+0x474>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a73      	ldr	r2, [pc, #460]	; (8002644 <HAL_RCC_OscConfig+0x474>)
 8002478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800247c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800247e:	f7fe ff9f 	bl	80013c0 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002486:	f7fe ff9b 	bl	80013c0 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e10c      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002498:	4b6a      	ldr	r3, [pc, #424]	; (8002644 <HAL_RCC_OscConfig+0x474>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f0      	beq.n	8002486 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d106      	bne.n	80024ba <HAL_RCC_OscConfig+0x2ea>
 80024ac:	4b64      	ldr	r3, [pc, #400]	; (8002640 <HAL_RCC_OscConfig+0x470>)
 80024ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b0:	4a63      	ldr	r2, [pc, #396]	; (8002640 <HAL_RCC_OscConfig+0x470>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6713      	str	r3, [r2, #112]	; 0x70
 80024b8:	e01c      	b.n	80024f4 <HAL_RCC_OscConfig+0x324>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b05      	cmp	r3, #5
 80024c0:	d10c      	bne.n	80024dc <HAL_RCC_OscConfig+0x30c>
 80024c2:	4b5f      	ldr	r3, [pc, #380]	; (8002640 <HAL_RCC_OscConfig+0x470>)
 80024c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c6:	4a5e      	ldr	r2, [pc, #376]	; (8002640 <HAL_RCC_OscConfig+0x470>)
 80024c8:	f043 0304 	orr.w	r3, r3, #4
 80024cc:	6713      	str	r3, [r2, #112]	; 0x70
 80024ce:	4b5c      	ldr	r3, [pc, #368]	; (8002640 <HAL_RCC_OscConfig+0x470>)
 80024d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d2:	4a5b      	ldr	r2, [pc, #364]	; (8002640 <HAL_RCC_OscConfig+0x470>)
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	6713      	str	r3, [r2, #112]	; 0x70
 80024da:	e00b      	b.n	80024f4 <HAL_RCC_OscConfig+0x324>
 80024dc:	4b58      	ldr	r3, [pc, #352]	; (8002640 <HAL_RCC_OscConfig+0x470>)
 80024de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e0:	4a57      	ldr	r2, [pc, #348]	; (8002640 <HAL_RCC_OscConfig+0x470>)
 80024e2:	f023 0301 	bic.w	r3, r3, #1
 80024e6:	6713      	str	r3, [r2, #112]	; 0x70
 80024e8:	4b55      	ldr	r3, [pc, #340]	; (8002640 <HAL_RCC_OscConfig+0x470>)
 80024ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ec:	4a54      	ldr	r2, [pc, #336]	; (8002640 <HAL_RCC_OscConfig+0x470>)
 80024ee:	f023 0304 	bic.w	r3, r3, #4
 80024f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d015      	beq.n	8002528 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fc:	f7fe ff60 	bl	80013c0 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002502:	e00a      	b.n	800251a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002504:	f7fe ff5c 	bl	80013c0 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002512:	4293      	cmp	r3, r2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e0cb      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800251a:	4b49      	ldr	r3, [pc, #292]	; (8002640 <HAL_RCC_OscConfig+0x470>)
 800251c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0ee      	beq.n	8002504 <HAL_RCC_OscConfig+0x334>
 8002526:	e014      	b.n	8002552 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002528:	f7fe ff4a 	bl	80013c0 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800252e:	e00a      	b.n	8002546 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002530:	f7fe ff46 	bl	80013c0 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	f241 3288 	movw	r2, #5000	; 0x1388
 800253e:	4293      	cmp	r3, r2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e0b5      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002546:	4b3e      	ldr	r3, [pc, #248]	; (8002640 <HAL_RCC_OscConfig+0x470>)
 8002548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1ee      	bne.n	8002530 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002552:	7dfb      	ldrb	r3, [r7, #23]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d105      	bne.n	8002564 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002558:	4b39      	ldr	r3, [pc, #228]	; (8002640 <HAL_RCC_OscConfig+0x470>)
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	4a38      	ldr	r2, [pc, #224]	; (8002640 <HAL_RCC_OscConfig+0x470>)
 800255e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002562:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 80a1 	beq.w	80026b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800256e:	4b34      	ldr	r3, [pc, #208]	; (8002640 <HAL_RCC_OscConfig+0x470>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 030c 	and.w	r3, r3, #12
 8002576:	2b08      	cmp	r3, #8
 8002578:	d05c      	beq.n	8002634 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d141      	bne.n	8002606 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002582:	4b31      	ldr	r3, [pc, #196]	; (8002648 <HAL_RCC_OscConfig+0x478>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7fe ff1a 	bl	80013c0 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002590:	f7fe ff16 	bl	80013c0 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e087      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a2:	4b27      	ldr	r3, [pc, #156]	; (8002640 <HAL_RCC_OscConfig+0x470>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69da      	ldr	r2, [r3, #28]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	019b      	lsls	r3, r3, #6
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c4:	085b      	lsrs	r3, r3, #1
 80025c6:	3b01      	subs	r3, #1
 80025c8:	041b      	lsls	r3, r3, #16
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	061b      	lsls	r3, r3, #24
 80025d2:	491b      	ldr	r1, [pc, #108]	; (8002640 <HAL_RCC_OscConfig+0x470>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025d8:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <HAL_RCC_OscConfig+0x478>)
 80025da:	2201      	movs	r2, #1
 80025dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025de:	f7fe feef 	bl	80013c0 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e6:	f7fe feeb 	bl	80013c0 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e05c      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f8:	4b11      	ldr	r3, [pc, #68]	; (8002640 <HAL_RCC_OscConfig+0x470>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x416>
 8002604:	e054      	b.n	80026b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002606:	4b10      	ldr	r3, [pc, #64]	; (8002648 <HAL_RCC_OscConfig+0x478>)
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7fe fed8 	bl	80013c0 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002614:	f7fe fed4 	bl	80013c0 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e045      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002626:	4b06      	ldr	r3, [pc, #24]	; (8002640 <HAL_RCC_OscConfig+0x470>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x444>
 8002632:	e03d      	b.n	80026b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d107      	bne.n	800264c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e038      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
 8002640:	40023800 	.word	0x40023800
 8002644:	40007000 	.word	0x40007000
 8002648:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800264c:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <HAL_RCC_OscConfig+0x4ec>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d028      	beq.n	80026ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002664:	429a      	cmp	r2, r3
 8002666:	d121      	bne.n	80026ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002672:	429a      	cmp	r2, r3
 8002674:	d11a      	bne.n	80026ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800267c:	4013      	ands	r3, r2
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002682:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002684:	4293      	cmp	r3, r2
 8002686:	d111      	bne.n	80026ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002692:	085b      	lsrs	r3, r3, #1
 8002694:	3b01      	subs	r3, #1
 8002696:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002698:	429a      	cmp	r2, r3
 800269a:	d107      	bne.n	80026ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d001      	beq.n	80026b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e000      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800

080026c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0cc      	b.n	800286e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026d4:	4b68      	ldr	r3, [pc, #416]	; (8002878 <HAL_RCC_ClockConfig+0x1b8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d90c      	bls.n	80026fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e2:	4b65      	ldr	r3, [pc, #404]	; (8002878 <HAL_RCC_ClockConfig+0x1b8>)
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ea:	4b63      	ldr	r3, [pc, #396]	; (8002878 <HAL_RCC_ClockConfig+0x1b8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e0b8      	b.n	800286e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d020      	beq.n	800274a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002714:	4b59      	ldr	r3, [pc, #356]	; (800287c <HAL_RCC_ClockConfig+0x1bc>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	4a58      	ldr	r2, [pc, #352]	; (800287c <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800271e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800272c:	4b53      	ldr	r3, [pc, #332]	; (800287c <HAL_RCC_ClockConfig+0x1bc>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	4a52      	ldr	r2, [pc, #328]	; (800287c <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002736:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002738:	4b50      	ldr	r3, [pc, #320]	; (800287c <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	494d      	ldr	r1, [pc, #308]	; (800287c <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	4313      	orrs	r3, r2
 8002748:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d044      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d107      	bne.n	800276e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275e:	4b47      	ldr	r3, [pc, #284]	; (800287c <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d119      	bne.n	800279e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e07f      	b.n	800286e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b02      	cmp	r3, #2
 8002774:	d003      	beq.n	800277e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800277a:	2b03      	cmp	r3, #3
 800277c:	d107      	bne.n	800278e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277e:	4b3f      	ldr	r3, [pc, #252]	; (800287c <HAL_RCC_ClockConfig+0x1bc>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d109      	bne.n	800279e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e06f      	b.n	800286e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278e:	4b3b      	ldr	r3, [pc, #236]	; (800287c <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e067      	b.n	800286e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800279e:	4b37      	ldr	r3, [pc, #220]	; (800287c <HAL_RCC_ClockConfig+0x1bc>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f023 0203 	bic.w	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	4934      	ldr	r1, [pc, #208]	; (800287c <HAL_RCC_ClockConfig+0x1bc>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027b0:	f7fe fe06 	bl	80013c0 <HAL_GetTick>
 80027b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b6:	e00a      	b.n	80027ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b8:	f7fe fe02 	bl	80013c0 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e04f      	b.n	800286e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ce:	4b2b      	ldr	r3, [pc, #172]	; (800287c <HAL_RCC_ClockConfig+0x1bc>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 020c 	and.w	r2, r3, #12
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	429a      	cmp	r2, r3
 80027de:	d1eb      	bne.n	80027b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027e0:	4b25      	ldr	r3, [pc, #148]	; (8002878 <HAL_RCC_ClockConfig+0x1b8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d20c      	bcs.n	8002808 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ee:	4b22      	ldr	r3, [pc, #136]	; (8002878 <HAL_RCC_ClockConfig+0x1b8>)
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f6:	4b20      	ldr	r3, [pc, #128]	; (8002878 <HAL_RCC_ClockConfig+0x1b8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	429a      	cmp	r2, r3
 8002802:	d001      	beq.n	8002808 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e032      	b.n	800286e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d008      	beq.n	8002826 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002814:	4b19      	ldr	r3, [pc, #100]	; (800287c <HAL_RCC_ClockConfig+0x1bc>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	4916      	ldr	r1, [pc, #88]	; (800287c <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	4313      	orrs	r3, r2
 8002824:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d009      	beq.n	8002846 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002832:	4b12      	ldr	r3, [pc, #72]	; (800287c <HAL_RCC_ClockConfig+0x1bc>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	490e      	ldr	r1, [pc, #56]	; (800287c <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002846:	f000 f821 	bl	800288c <HAL_RCC_GetSysClockFreq>
 800284a:	4602      	mov	r2, r0
 800284c:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	091b      	lsrs	r3, r3, #4
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	490a      	ldr	r1, [pc, #40]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 8002858:	5ccb      	ldrb	r3, [r1, r3]
 800285a:	fa22 f303 	lsr.w	r3, r2, r3
 800285e:	4a09      	ldr	r2, [pc, #36]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002862:	4b09      	ldr	r3, [pc, #36]	; (8002888 <HAL_RCC_ClockConfig+0x1c8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe fd66 	bl	8001338 <HAL_InitTick>

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40023c00 	.word	0x40023c00
 800287c:	40023800 	.word	0x40023800
 8002880:	080044a8 	.word	0x080044a8
 8002884:	20000004 	.word	0x20000004
 8002888:	20000008 	.word	0x20000008

0800288c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800288c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002890:	b094      	sub	sp, #80	; 0x50
 8002892:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	647b      	str	r3, [r7, #68]	; 0x44
 8002898:	2300      	movs	r3, #0
 800289a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800289c:	2300      	movs	r3, #0
 800289e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028a4:	4b79      	ldr	r3, [pc, #484]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 030c 	and.w	r3, r3, #12
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d00d      	beq.n	80028cc <HAL_RCC_GetSysClockFreq+0x40>
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	f200 80e1 	bhi.w	8002a78 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d002      	beq.n	80028c0 <HAL_RCC_GetSysClockFreq+0x34>
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d003      	beq.n	80028c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80028be:	e0db      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028c0:	4b73      	ldr	r3, [pc, #460]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x204>)
 80028c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80028c4:	e0db      	b.n	8002a7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028c6:	4b73      	ldr	r3, [pc, #460]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x208>)
 80028c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028ca:	e0d8      	b.n	8002a7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028cc:	4b6f      	ldr	r3, [pc, #444]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028d6:	4b6d      	ldr	r3, [pc, #436]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d063      	beq.n	80029aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e2:	4b6a      	ldr	r3, [pc, #424]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	099b      	lsrs	r3, r3, #6
 80028e8:	2200      	movs	r2, #0
 80028ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80028ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028f4:	633b      	str	r3, [r7, #48]	; 0x30
 80028f6:	2300      	movs	r3, #0
 80028f8:	637b      	str	r3, [r7, #52]	; 0x34
 80028fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028fe:	4622      	mov	r2, r4
 8002900:	462b      	mov	r3, r5
 8002902:	f04f 0000 	mov.w	r0, #0
 8002906:	f04f 0100 	mov.w	r1, #0
 800290a:	0159      	lsls	r1, r3, #5
 800290c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002910:	0150      	lsls	r0, r2, #5
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	4621      	mov	r1, r4
 8002918:	1a51      	subs	r1, r2, r1
 800291a:	6139      	str	r1, [r7, #16]
 800291c:	4629      	mov	r1, r5
 800291e:	eb63 0301 	sbc.w	r3, r3, r1
 8002922:	617b      	str	r3, [r7, #20]
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002930:	4659      	mov	r1, fp
 8002932:	018b      	lsls	r3, r1, #6
 8002934:	4651      	mov	r1, sl
 8002936:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800293a:	4651      	mov	r1, sl
 800293c:	018a      	lsls	r2, r1, #6
 800293e:	4651      	mov	r1, sl
 8002940:	ebb2 0801 	subs.w	r8, r2, r1
 8002944:	4659      	mov	r1, fp
 8002946:	eb63 0901 	sbc.w	r9, r3, r1
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002956:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800295a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800295e:	4690      	mov	r8, r2
 8002960:	4699      	mov	r9, r3
 8002962:	4623      	mov	r3, r4
 8002964:	eb18 0303 	adds.w	r3, r8, r3
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	462b      	mov	r3, r5
 800296c:	eb49 0303 	adc.w	r3, r9, r3
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	f04f 0300 	mov.w	r3, #0
 800297a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800297e:	4629      	mov	r1, r5
 8002980:	024b      	lsls	r3, r1, #9
 8002982:	4621      	mov	r1, r4
 8002984:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002988:	4621      	mov	r1, r4
 800298a:	024a      	lsls	r2, r1, #9
 800298c:	4610      	mov	r0, r2
 800298e:	4619      	mov	r1, r3
 8002990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002992:	2200      	movs	r2, #0
 8002994:	62bb      	str	r3, [r7, #40]	; 0x28
 8002996:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002998:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800299c:	f7fd fc70 	bl	8000280 <__aeabi_uldivmod>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4613      	mov	r3, r2
 80029a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029a8:	e058      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029aa:	4b38      	ldr	r3, [pc, #224]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	099b      	lsrs	r3, r3, #6
 80029b0:	2200      	movs	r2, #0
 80029b2:	4618      	mov	r0, r3
 80029b4:	4611      	mov	r1, r2
 80029b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029ba:	623b      	str	r3, [r7, #32]
 80029bc:	2300      	movs	r3, #0
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
 80029c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029c4:	4642      	mov	r2, r8
 80029c6:	464b      	mov	r3, r9
 80029c8:	f04f 0000 	mov.w	r0, #0
 80029cc:	f04f 0100 	mov.w	r1, #0
 80029d0:	0159      	lsls	r1, r3, #5
 80029d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029d6:	0150      	lsls	r0, r2, #5
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	4641      	mov	r1, r8
 80029de:	ebb2 0a01 	subs.w	sl, r2, r1
 80029e2:	4649      	mov	r1, r9
 80029e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	f04f 0300 	mov.w	r3, #0
 80029f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029fc:	ebb2 040a 	subs.w	r4, r2, sl
 8002a00:	eb63 050b 	sbc.w	r5, r3, fp
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	00eb      	lsls	r3, r5, #3
 8002a0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a12:	00e2      	lsls	r2, r4, #3
 8002a14:	4614      	mov	r4, r2
 8002a16:	461d      	mov	r5, r3
 8002a18:	4643      	mov	r3, r8
 8002a1a:	18e3      	adds	r3, r4, r3
 8002a1c:	603b      	str	r3, [r7, #0]
 8002a1e:	464b      	mov	r3, r9
 8002a20:	eb45 0303 	adc.w	r3, r5, r3
 8002a24:	607b      	str	r3, [r7, #4]
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	f04f 0300 	mov.w	r3, #0
 8002a2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a32:	4629      	mov	r1, r5
 8002a34:	028b      	lsls	r3, r1, #10
 8002a36:	4621      	mov	r1, r4
 8002a38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a3c:	4621      	mov	r1, r4
 8002a3e:	028a      	lsls	r2, r1, #10
 8002a40:	4610      	mov	r0, r2
 8002a42:	4619      	mov	r1, r3
 8002a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a46:	2200      	movs	r2, #0
 8002a48:	61bb      	str	r3, [r7, #24]
 8002a4a:	61fa      	str	r2, [r7, #28]
 8002a4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a50:	f7fd fc16 	bl	8000280 <__aeabi_uldivmod>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4613      	mov	r3, r2
 8002a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	0c1b      	lsrs	r3, r3, #16
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	3301      	adds	r3, #1
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a76:	e002      	b.n	8002a7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a78:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3750      	adds	r7, #80	; 0x50
 8002a84:	46bd      	mov	sp, r7
 8002a86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	00f42400 	.word	0x00f42400
 8002a94:	007a1200 	.word	0x007a1200

08002a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a9c:	4b03      	ldr	r3, [pc, #12]	; (8002aac <HAL_RCC_GetHCLKFreq+0x14>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	20000004 	.word	0x20000004

08002ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ab4:	f7ff fff0 	bl	8002a98 <HAL_RCC_GetHCLKFreq>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	0a9b      	lsrs	r3, r3, #10
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	4903      	ldr	r1, [pc, #12]	; (8002ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ac6:	5ccb      	ldrb	r3, [r1, r3]
 8002ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	080044b8 	.word	0x080044b8

08002ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002adc:	f7ff ffdc 	bl	8002a98 <HAL_RCC_GetHCLKFreq>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	0b5b      	lsrs	r3, r3, #13
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	4903      	ldr	r1, [pc, #12]	; (8002afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aee:	5ccb      	ldrb	r3, [r1, r3]
 8002af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40023800 	.word	0x40023800
 8002afc:	080044b8 	.word	0x080044b8

08002b00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e041      	b.n	8002b96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d106      	bne.n	8002b2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7fe fab8 	bl	800109c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4610      	mov	r0, r2
 8002b40:	f000 fa88 	bl	8003054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d001      	beq.n	8002bb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e044      	b.n	8002c42 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0201 	orr.w	r2, r2, #1
 8002bce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a1e      	ldr	r2, [pc, #120]	; (8002c50 <HAL_TIM_Base_Start_IT+0xb0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d018      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0x6c>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be2:	d013      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0x6c>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a1a      	ldr	r2, [pc, #104]	; (8002c54 <HAL_TIM_Base_Start_IT+0xb4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00e      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0x6c>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a19      	ldr	r2, [pc, #100]	; (8002c58 <HAL_TIM_Base_Start_IT+0xb8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d009      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0x6c>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a17      	ldr	r2, [pc, #92]	; (8002c5c <HAL_TIM_Base_Start_IT+0xbc>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d004      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0x6c>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a16      	ldr	r2, [pc, #88]	; (8002c60 <HAL_TIM_Base_Start_IT+0xc0>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d111      	bne.n	8002c30 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2b06      	cmp	r3, #6
 8002c1c:	d010      	beq.n	8002c40 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0201 	orr.w	r2, r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c2e:	e007      	b.n	8002c40 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0201 	orr.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40010000 	.word	0x40010000
 8002c54:	40000400 	.word	0x40000400
 8002c58:	40000800 	.word	0x40000800
 8002c5c:	40000c00 	.word	0x40000c00
 8002c60:	40014000 	.word	0x40014000

08002c64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d122      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d11b      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 0202 	mvn.w	r2, #2
 8002c90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f9b5 	bl	8003016 <HAL_TIM_IC_CaptureCallback>
 8002cac:	e005      	b.n	8002cba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f9a7 	bl	8003002 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f9b8 	bl	800302a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d122      	bne.n	8002d14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d11b      	bne.n	8002d14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f06f 0204 	mvn.w	r2, #4
 8002ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2202      	movs	r2, #2
 8002cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f98b 	bl	8003016 <HAL_TIM_IC_CaptureCallback>
 8002d00:	e005      	b.n	8002d0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f97d 	bl	8003002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f98e 	bl	800302a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d122      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d11b      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f06f 0208 	mvn.w	r2, #8
 8002d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2204      	movs	r2, #4
 8002d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f961 	bl	8003016 <HAL_TIM_IC_CaptureCallback>
 8002d54:	e005      	b.n	8002d62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f953 	bl	8003002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f964 	bl	800302a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f003 0310 	and.w	r3, r3, #16
 8002d72:	2b10      	cmp	r3, #16
 8002d74:	d122      	bne.n	8002dbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2b10      	cmp	r3, #16
 8002d82:	d11b      	bne.n	8002dbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f06f 0210 	mvn.w	r2, #16
 8002d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2208      	movs	r2, #8
 8002d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f937 	bl	8003016 <HAL_TIM_IC_CaptureCallback>
 8002da8:	e005      	b.n	8002db6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f929 	bl	8003002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f93a 	bl	800302a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d10e      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d107      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0201 	mvn.w	r2, #1
 8002de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7fd fe6e 	bl	8000ac4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df2:	2b80      	cmp	r3, #128	; 0x80
 8002df4:	d10e      	bne.n	8002e14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e00:	2b80      	cmp	r3, #128	; 0x80
 8002e02:	d107      	bne.n	8002e14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fab2 	bl	8003378 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1e:	2b40      	cmp	r3, #64	; 0x40
 8002e20:	d10e      	bne.n	8002e40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2c:	2b40      	cmp	r3, #64	; 0x40
 8002e2e:	d107      	bne.n	8002e40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f8ff 	bl	800303e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f003 0320 	and.w	r3, r3, #32
 8002e4a:	2b20      	cmp	r3, #32
 8002e4c:	d10e      	bne.n	8002e6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f003 0320 	and.w	r3, r3, #32
 8002e58:	2b20      	cmp	r3, #32
 8002e5a:	d107      	bne.n	8002e6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f06f 0220 	mvn.w	r2, #32
 8002e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 fa7c 	bl	8003364 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e6c:	bf00      	nop
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_TIM_ConfigClockSource+0x1c>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e0b4      	b.n	8002ffa <HAL_TIM_ConfigClockSource+0x186>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002eae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ec8:	d03e      	beq.n	8002f48 <HAL_TIM_ConfigClockSource+0xd4>
 8002eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ece:	f200 8087 	bhi.w	8002fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed6:	f000 8086 	beq.w	8002fe6 <HAL_TIM_ConfigClockSource+0x172>
 8002eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ede:	d87f      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee0:	2b70      	cmp	r3, #112	; 0x70
 8002ee2:	d01a      	beq.n	8002f1a <HAL_TIM_ConfigClockSource+0xa6>
 8002ee4:	2b70      	cmp	r3, #112	; 0x70
 8002ee6:	d87b      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee8:	2b60      	cmp	r3, #96	; 0x60
 8002eea:	d050      	beq.n	8002f8e <HAL_TIM_ConfigClockSource+0x11a>
 8002eec:	2b60      	cmp	r3, #96	; 0x60
 8002eee:	d877      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef0:	2b50      	cmp	r3, #80	; 0x50
 8002ef2:	d03c      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0xfa>
 8002ef4:	2b50      	cmp	r3, #80	; 0x50
 8002ef6:	d873      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef8:	2b40      	cmp	r3, #64	; 0x40
 8002efa:	d058      	beq.n	8002fae <HAL_TIM_ConfigClockSource+0x13a>
 8002efc:	2b40      	cmp	r3, #64	; 0x40
 8002efe:	d86f      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8002f00:	2b30      	cmp	r3, #48	; 0x30
 8002f02:	d064      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0x15a>
 8002f04:	2b30      	cmp	r3, #48	; 0x30
 8002f06:	d86b      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8002f08:	2b20      	cmp	r3, #32
 8002f0a:	d060      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0x15a>
 8002f0c:	2b20      	cmp	r3, #32
 8002f0e:	d867      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d05c      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0x15a>
 8002f14:	2b10      	cmp	r3, #16
 8002f16:	d05a      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0x15a>
 8002f18:	e062      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6818      	ldr	r0, [r3, #0]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	6899      	ldr	r1, [r3, #8]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f000 f98d 	bl	8003248 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	609a      	str	r2, [r3, #8]
      break;
 8002f46:	e04f      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6818      	ldr	r0, [r3, #0]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	6899      	ldr	r1, [r3, #8]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f000 f976 	bl	8003248 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f6a:	609a      	str	r2, [r3, #8]
      break;
 8002f6c:	e03c      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	6859      	ldr	r1, [r3, #4]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	f000 f8ea 	bl	8003154 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2150      	movs	r1, #80	; 0x50
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 f943 	bl	8003212 <TIM_ITRx_SetConfig>
      break;
 8002f8c:	e02c      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	6859      	ldr	r1, [r3, #4]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f000 f909 	bl	80031b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2160      	movs	r1, #96	; 0x60
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 f933 	bl	8003212 <TIM_ITRx_SetConfig>
      break;
 8002fac:	e01c      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	6859      	ldr	r1, [r3, #4]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	f000 f8ca 	bl	8003154 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2140      	movs	r1, #64	; 0x40
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 f923 	bl	8003212 <TIM_ITRx_SetConfig>
      break;
 8002fcc:	e00c      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4610      	mov	r0, r2
 8002fda:	f000 f91a 	bl	8003212 <TIM_ITRx_SetConfig>
      break;
 8002fde:	e003      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe4:	e000      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fe6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
	...

08003054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a34      	ldr	r2, [pc, #208]	; (8003138 <TIM_Base_SetConfig+0xe4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d00f      	beq.n	800308c <TIM_Base_SetConfig+0x38>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003072:	d00b      	beq.n	800308c <TIM_Base_SetConfig+0x38>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a31      	ldr	r2, [pc, #196]	; (800313c <TIM_Base_SetConfig+0xe8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d007      	beq.n	800308c <TIM_Base_SetConfig+0x38>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a30      	ldr	r2, [pc, #192]	; (8003140 <TIM_Base_SetConfig+0xec>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d003      	beq.n	800308c <TIM_Base_SetConfig+0x38>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a2f      	ldr	r2, [pc, #188]	; (8003144 <TIM_Base_SetConfig+0xf0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d108      	bne.n	800309e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4313      	orrs	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a25      	ldr	r2, [pc, #148]	; (8003138 <TIM_Base_SetConfig+0xe4>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d01b      	beq.n	80030de <TIM_Base_SetConfig+0x8a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ac:	d017      	beq.n	80030de <TIM_Base_SetConfig+0x8a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a22      	ldr	r2, [pc, #136]	; (800313c <TIM_Base_SetConfig+0xe8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d013      	beq.n	80030de <TIM_Base_SetConfig+0x8a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a21      	ldr	r2, [pc, #132]	; (8003140 <TIM_Base_SetConfig+0xec>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00f      	beq.n	80030de <TIM_Base_SetConfig+0x8a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a20      	ldr	r2, [pc, #128]	; (8003144 <TIM_Base_SetConfig+0xf0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00b      	beq.n	80030de <TIM_Base_SetConfig+0x8a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a1f      	ldr	r2, [pc, #124]	; (8003148 <TIM_Base_SetConfig+0xf4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d007      	beq.n	80030de <TIM_Base_SetConfig+0x8a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a1e      	ldr	r2, [pc, #120]	; (800314c <TIM_Base_SetConfig+0xf8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d003      	beq.n	80030de <TIM_Base_SetConfig+0x8a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a1d      	ldr	r2, [pc, #116]	; (8003150 <TIM_Base_SetConfig+0xfc>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d108      	bne.n	80030f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a08      	ldr	r2, [pc, #32]	; (8003138 <TIM_Base_SetConfig+0xe4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d103      	bne.n	8003124 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	615a      	str	r2, [r3, #20]
}
 800312a:	bf00      	nop
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40010000 	.word	0x40010000
 800313c:	40000400 	.word	0x40000400
 8003140:	40000800 	.word	0x40000800
 8003144:	40000c00 	.word	0x40000c00
 8003148:	40014000 	.word	0x40014000
 800314c:	40014400 	.word	0x40014400
 8003150:	40014800 	.word	0x40014800

08003154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	f023 0201 	bic.w	r2, r3, #1
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800317e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f023 030a 	bic.w	r3, r3, #10
 8003190:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	4313      	orrs	r3, r2
 8003198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	621a      	str	r2, [r3, #32]
}
 80031a6:	bf00      	nop
 80031a8:	371c      	adds	r7, #28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b087      	sub	sp, #28
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	f023 0210 	bic.w	r2, r3, #16
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	031b      	lsls	r3, r3, #12
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	621a      	str	r2, [r3, #32]
}
 8003206:	bf00      	nop
 8003208:	371c      	adds	r7, #28
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003212:	b480      	push	{r7}
 8003214:	b085      	sub	sp, #20
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003228:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4313      	orrs	r3, r2
 8003230:	f043 0307 	orr.w	r3, r3, #7
 8003234:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	609a      	str	r2, [r3, #8]
}
 800323c:	bf00      	nop
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003262:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	021a      	lsls	r2, r3, #8
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	431a      	orrs	r2, r3
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	4313      	orrs	r3, r2
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	4313      	orrs	r3, r2
 8003274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	609a      	str	r2, [r3, #8]
}
 800327c:	bf00      	nop
 800327e:	371c      	adds	r7, #28
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003298:	2b01      	cmp	r3, #1
 800329a:	d101      	bne.n	80032a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800329c:	2302      	movs	r3, #2
 800329e:	e050      	b.n	8003342 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a1c      	ldr	r2, [pc, #112]	; (8003350 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d018      	beq.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ec:	d013      	beq.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a18      	ldr	r2, [pc, #96]	; (8003354 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d00e      	beq.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a16      	ldr	r2, [pc, #88]	; (8003358 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d009      	beq.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a15      	ldr	r2, [pc, #84]	; (800335c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d004      	beq.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a13      	ldr	r2, [pc, #76]	; (8003360 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d10c      	bne.n	8003330 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800331c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	4313      	orrs	r3, r2
 8003326:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40010000 	.word	0x40010000
 8003354:	40000400 	.word	0x40000400
 8003358:	40000800 	.word	0x40000800
 800335c:	40000c00 	.word	0x40000c00
 8003360:	40014000 	.word	0x40014000

08003364 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e03f      	b.n	800341e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d106      	bne.n	80033b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7fd feb0 	bl	8001118 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2224      	movs	r2, #36	; 0x24
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f929 	bl	8003628 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695a      	ldr	r2, [r3, #20]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003404:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b08a      	sub	sp, #40	; 0x28
 800342a:	af02      	add	r7, sp, #8
 800342c:	60f8      	str	r0, [r7, #12]
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	603b      	str	r3, [r7, #0]
 8003432:	4613      	mov	r3, r2
 8003434:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b20      	cmp	r3, #32
 8003444:	d17c      	bne.n	8003540 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <HAL_UART_Transmit+0x2c>
 800344c:	88fb      	ldrh	r3, [r7, #6]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e075      	b.n	8003542 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_UART_Transmit+0x3e>
 8003460:	2302      	movs	r3, #2
 8003462:	e06e      	b.n	8003542 <HAL_UART_Transmit+0x11c>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2221      	movs	r2, #33	; 0x21
 8003476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800347a:	f7fd ffa1 	bl	80013c0 <HAL_GetTick>
 800347e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	88fa      	ldrh	r2, [r7, #6]
 8003484:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	88fa      	ldrh	r2, [r7, #6]
 800348a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003494:	d108      	bne.n	80034a8 <HAL_UART_Transmit+0x82>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d104      	bne.n	80034a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800349e:	2300      	movs	r3, #0
 80034a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	61bb      	str	r3, [r7, #24]
 80034a6:	e003      	b.n	80034b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034b8:	e02a      	b.n	8003510 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2200      	movs	r2, #0
 80034c2:	2180      	movs	r1, #128	; 0x80
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 f840 	bl	800354a <UART_WaitOnFlagUntilTimeout>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e036      	b.n	8003542 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10b      	bne.n	80034f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	3302      	adds	r3, #2
 80034ee:	61bb      	str	r3, [r7, #24]
 80034f0:	e007      	b.n	8003502 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	781a      	ldrb	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	3301      	adds	r3, #1
 8003500:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003506:	b29b      	uxth	r3, r3
 8003508:	3b01      	subs	r3, #1
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1cf      	bne.n	80034ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2200      	movs	r2, #0
 8003522:	2140      	movs	r1, #64	; 0x40
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 f810 	bl	800354a <UART_WaitOnFlagUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e006      	b.n	8003542 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2220      	movs	r2, #32
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800353c:	2300      	movs	r3, #0
 800353e:	e000      	b.n	8003542 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003540:	2302      	movs	r3, #2
  }
}
 8003542:	4618      	mov	r0, r3
 8003544:	3720      	adds	r7, #32
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b090      	sub	sp, #64	; 0x40
 800354e:	af00      	add	r7, sp, #0
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	603b      	str	r3, [r7, #0]
 8003556:	4613      	mov	r3, r2
 8003558:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800355a:	e050      	b.n	80035fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800355e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003562:	d04c      	beq.n	80035fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003566:	2b00      	cmp	r3, #0
 8003568:	d007      	beq.n	800357a <UART_WaitOnFlagUntilTimeout+0x30>
 800356a:	f7fd ff29 	bl	80013c0 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003576:	429a      	cmp	r2, r3
 8003578:	d241      	bcs.n	80035fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	330c      	adds	r3, #12
 8003580:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003584:	e853 3f00 	ldrex	r3, [r3]
 8003588:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003590:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	330c      	adds	r3, #12
 8003598:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800359a:	637a      	str	r2, [r7, #52]	; 0x34
 800359c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800359e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035a2:	e841 2300 	strex	r3, r2, [r1]
 80035a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1e5      	bne.n	800357a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3314      	adds	r3, #20
 80035b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	e853 3f00 	ldrex	r3, [r3]
 80035bc:	613b      	str	r3, [r7, #16]
   return(result);
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f023 0301 	bic.w	r3, r3, #1
 80035c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3314      	adds	r3, #20
 80035cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035ce:	623a      	str	r2, [r7, #32]
 80035d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d2:	69f9      	ldr	r1, [r7, #28]
 80035d4:	6a3a      	ldr	r2, [r7, #32]
 80035d6:	e841 2300 	strex	r3, r2, [r1]
 80035da:	61bb      	str	r3, [r7, #24]
   return(result);
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1e5      	bne.n	80035ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2220      	movs	r2, #32
 80035e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e00f      	b.n	800361e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	4013      	ands	r3, r2
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	429a      	cmp	r2, r3
 800360c:	bf0c      	ite	eq
 800360e:	2301      	moveq	r3, #1
 8003610:	2300      	movne	r3, #0
 8003612:	b2db      	uxtb	r3, r3
 8003614:	461a      	mov	r2, r3
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	429a      	cmp	r2, r3
 800361a:	d09f      	beq.n	800355c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3740      	adds	r7, #64	; 0x40
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800362c:	b0c0      	sub	sp, #256	; 0x100
 800362e:	af00      	add	r7, sp, #0
 8003630:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003644:	68d9      	ldr	r1, [r3, #12]
 8003646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	ea40 0301 	orr.w	r3, r0, r1
 8003650:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	431a      	orrs	r2, r3
 8003660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	431a      	orrs	r2, r3
 8003668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	4313      	orrs	r3, r2
 8003670:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003680:	f021 010c 	bic.w	r1, r1, #12
 8003684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800368e:	430b      	orrs	r3, r1
 8003690:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800369e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a2:	6999      	ldr	r1, [r3, #24]
 80036a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	ea40 0301 	orr.w	r3, r0, r1
 80036ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	4b8f      	ldr	r3, [pc, #572]	; (80038f4 <UART_SetConfig+0x2cc>)
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d005      	beq.n	80036c8 <UART_SetConfig+0xa0>
 80036bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	4b8d      	ldr	r3, [pc, #564]	; (80038f8 <UART_SetConfig+0x2d0>)
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d104      	bne.n	80036d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036c8:	f7ff fa06 	bl	8002ad8 <HAL_RCC_GetPCLK2Freq>
 80036cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80036d0:	e003      	b.n	80036da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036d2:	f7ff f9ed 	bl	8002ab0 <HAL_RCC_GetPCLK1Freq>
 80036d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036e4:	f040 810c 	bne.w	8003900 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036ec:	2200      	movs	r2, #0
 80036ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80036f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80036f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80036fa:	4622      	mov	r2, r4
 80036fc:	462b      	mov	r3, r5
 80036fe:	1891      	adds	r1, r2, r2
 8003700:	65b9      	str	r1, [r7, #88]	; 0x58
 8003702:	415b      	adcs	r3, r3
 8003704:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003706:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800370a:	4621      	mov	r1, r4
 800370c:	eb12 0801 	adds.w	r8, r2, r1
 8003710:	4629      	mov	r1, r5
 8003712:	eb43 0901 	adc.w	r9, r3, r1
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003722:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003726:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800372a:	4690      	mov	r8, r2
 800372c:	4699      	mov	r9, r3
 800372e:	4623      	mov	r3, r4
 8003730:	eb18 0303 	adds.w	r3, r8, r3
 8003734:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003738:	462b      	mov	r3, r5
 800373a:	eb49 0303 	adc.w	r3, r9, r3
 800373e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800374e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003752:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003756:	460b      	mov	r3, r1
 8003758:	18db      	adds	r3, r3, r3
 800375a:	653b      	str	r3, [r7, #80]	; 0x50
 800375c:	4613      	mov	r3, r2
 800375e:	eb42 0303 	adc.w	r3, r2, r3
 8003762:	657b      	str	r3, [r7, #84]	; 0x54
 8003764:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003768:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800376c:	f7fc fd88 	bl	8000280 <__aeabi_uldivmod>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4b61      	ldr	r3, [pc, #388]	; (80038fc <UART_SetConfig+0x2d4>)
 8003776:	fba3 2302 	umull	r2, r3, r3, r2
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	011c      	lsls	r4, r3, #4
 800377e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003782:	2200      	movs	r2, #0
 8003784:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003788:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800378c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003790:	4642      	mov	r2, r8
 8003792:	464b      	mov	r3, r9
 8003794:	1891      	adds	r1, r2, r2
 8003796:	64b9      	str	r1, [r7, #72]	; 0x48
 8003798:	415b      	adcs	r3, r3
 800379a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800379c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80037a0:	4641      	mov	r1, r8
 80037a2:	eb12 0a01 	adds.w	sl, r2, r1
 80037a6:	4649      	mov	r1, r9
 80037a8:	eb43 0b01 	adc.w	fp, r3, r1
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037c0:	4692      	mov	sl, r2
 80037c2:	469b      	mov	fp, r3
 80037c4:	4643      	mov	r3, r8
 80037c6:	eb1a 0303 	adds.w	r3, sl, r3
 80037ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037ce:	464b      	mov	r3, r9
 80037d0:	eb4b 0303 	adc.w	r3, fp, r3
 80037d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80037d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80037e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80037ec:	460b      	mov	r3, r1
 80037ee:	18db      	adds	r3, r3, r3
 80037f0:	643b      	str	r3, [r7, #64]	; 0x40
 80037f2:	4613      	mov	r3, r2
 80037f4:	eb42 0303 	adc.w	r3, r2, r3
 80037f8:	647b      	str	r3, [r7, #68]	; 0x44
 80037fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003802:	f7fc fd3d 	bl	8000280 <__aeabi_uldivmod>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4611      	mov	r1, r2
 800380c:	4b3b      	ldr	r3, [pc, #236]	; (80038fc <UART_SetConfig+0x2d4>)
 800380e:	fba3 2301 	umull	r2, r3, r3, r1
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	2264      	movs	r2, #100	; 0x64
 8003816:	fb02 f303 	mul.w	r3, r2, r3
 800381a:	1acb      	subs	r3, r1, r3
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003822:	4b36      	ldr	r3, [pc, #216]	; (80038fc <UART_SetConfig+0x2d4>)
 8003824:	fba3 2302 	umull	r2, r3, r3, r2
 8003828:	095b      	lsrs	r3, r3, #5
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003830:	441c      	add	r4, r3
 8003832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003836:	2200      	movs	r2, #0
 8003838:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800383c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003840:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003844:	4642      	mov	r2, r8
 8003846:	464b      	mov	r3, r9
 8003848:	1891      	adds	r1, r2, r2
 800384a:	63b9      	str	r1, [r7, #56]	; 0x38
 800384c:	415b      	adcs	r3, r3
 800384e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003850:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003854:	4641      	mov	r1, r8
 8003856:	1851      	adds	r1, r2, r1
 8003858:	6339      	str	r1, [r7, #48]	; 0x30
 800385a:	4649      	mov	r1, r9
 800385c:	414b      	adcs	r3, r1
 800385e:	637b      	str	r3, [r7, #52]	; 0x34
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	f04f 0300 	mov.w	r3, #0
 8003868:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800386c:	4659      	mov	r1, fp
 800386e:	00cb      	lsls	r3, r1, #3
 8003870:	4651      	mov	r1, sl
 8003872:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003876:	4651      	mov	r1, sl
 8003878:	00ca      	lsls	r2, r1, #3
 800387a:	4610      	mov	r0, r2
 800387c:	4619      	mov	r1, r3
 800387e:	4603      	mov	r3, r0
 8003880:	4642      	mov	r2, r8
 8003882:	189b      	adds	r3, r3, r2
 8003884:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003888:	464b      	mov	r3, r9
 800388a:	460a      	mov	r2, r1
 800388c:	eb42 0303 	adc.w	r3, r2, r3
 8003890:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80038a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80038a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80038a8:	460b      	mov	r3, r1
 80038aa:	18db      	adds	r3, r3, r3
 80038ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ae:	4613      	mov	r3, r2
 80038b0:	eb42 0303 	adc.w	r3, r2, r3
 80038b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80038be:	f7fc fcdf 	bl	8000280 <__aeabi_uldivmod>
 80038c2:	4602      	mov	r2, r0
 80038c4:	460b      	mov	r3, r1
 80038c6:	4b0d      	ldr	r3, [pc, #52]	; (80038fc <UART_SetConfig+0x2d4>)
 80038c8:	fba3 1302 	umull	r1, r3, r3, r2
 80038cc:	095b      	lsrs	r3, r3, #5
 80038ce:	2164      	movs	r1, #100	; 0x64
 80038d0:	fb01 f303 	mul.w	r3, r1, r3
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	3332      	adds	r3, #50	; 0x32
 80038da:	4a08      	ldr	r2, [pc, #32]	; (80038fc <UART_SetConfig+0x2d4>)
 80038dc:	fba2 2303 	umull	r2, r3, r2, r3
 80038e0:	095b      	lsrs	r3, r3, #5
 80038e2:	f003 0207 	and.w	r2, r3, #7
 80038e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4422      	add	r2, r4
 80038ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038f0:	e105      	b.n	8003afe <UART_SetConfig+0x4d6>
 80038f2:	bf00      	nop
 80038f4:	40011000 	.word	0x40011000
 80038f8:	40011400 	.word	0x40011400
 80038fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003904:	2200      	movs	r2, #0
 8003906:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800390a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800390e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003912:	4642      	mov	r2, r8
 8003914:	464b      	mov	r3, r9
 8003916:	1891      	adds	r1, r2, r2
 8003918:	6239      	str	r1, [r7, #32]
 800391a:	415b      	adcs	r3, r3
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
 800391e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003922:	4641      	mov	r1, r8
 8003924:	1854      	adds	r4, r2, r1
 8003926:	4649      	mov	r1, r9
 8003928:	eb43 0501 	adc.w	r5, r3, r1
 800392c:	f04f 0200 	mov.w	r2, #0
 8003930:	f04f 0300 	mov.w	r3, #0
 8003934:	00eb      	lsls	r3, r5, #3
 8003936:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800393a:	00e2      	lsls	r2, r4, #3
 800393c:	4614      	mov	r4, r2
 800393e:	461d      	mov	r5, r3
 8003940:	4643      	mov	r3, r8
 8003942:	18e3      	adds	r3, r4, r3
 8003944:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003948:	464b      	mov	r3, r9
 800394a:	eb45 0303 	adc.w	r3, r5, r3
 800394e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800395e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	f04f 0300 	mov.w	r3, #0
 800396a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800396e:	4629      	mov	r1, r5
 8003970:	008b      	lsls	r3, r1, #2
 8003972:	4621      	mov	r1, r4
 8003974:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003978:	4621      	mov	r1, r4
 800397a:	008a      	lsls	r2, r1, #2
 800397c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003980:	f7fc fc7e 	bl	8000280 <__aeabi_uldivmod>
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	4b60      	ldr	r3, [pc, #384]	; (8003b0c <UART_SetConfig+0x4e4>)
 800398a:	fba3 2302 	umull	r2, r3, r3, r2
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	011c      	lsls	r4, r3, #4
 8003992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003996:	2200      	movs	r2, #0
 8003998:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800399c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80039a4:	4642      	mov	r2, r8
 80039a6:	464b      	mov	r3, r9
 80039a8:	1891      	adds	r1, r2, r2
 80039aa:	61b9      	str	r1, [r7, #24]
 80039ac:	415b      	adcs	r3, r3
 80039ae:	61fb      	str	r3, [r7, #28]
 80039b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039b4:	4641      	mov	r1, r8
 80039b6:	1851      	adds	r1, r2, r1
 80039b8:	6139      	str	r1, [r7, #16]
 80039ba:	4649      	mov	r1, r9
 80039bc:	414b      	adcs	r3, r1
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039cc:	4659      	mov	r1, fp
 80039ce:	00cb      	lsls	r3, r1, #3
 80039d0:	4651      	mov	r1, sl
 80039d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039d6:	4651      	mov	r1, sl
 80039d8:	00ca      	lsls	r2, r1, #3
 80039da:	4610      	mov	r0, r2
 80039dc:	4619      	mov	r1, r3
 80039de:	4603      	mov	r3, r0
 80039e0:	4642      	mov	r2, r8
 80039e2:	189b      	adds	r3, r3, r2
 80039e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039e8:	464b      	mov	r3, r9
 80039ea:	460a      	mov	r2, r1
 80039ec:	eb42 0303 	adc.w	r3, r2, r3
 80039f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80039fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a0c:	4649      	mov	r1, r9
 8003a0e:	008b      	lsls	r3, r1, #2
 8003a10:	4641      	mov	r1, r8
 8003a12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a16:	4641      	mov	r1, r8
 8003a18:	008a      	lsls	r2, r1, #2
 8003a1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a1e:	f7fc fc2f 	bl	8000280 <__aeabi_uldivmod>
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	4b39      	ldr	r3, [pc, #228]	; (8003b0c <UART_SetConfig+0x4e4>)
 8003a28:	fba3 1302 	umull	r1, r3, r3, r2
 8003a2c:	095b      	lsrs	r3, r3, #5
 8003a2e:	2164      	movs	r1, #100	; 0x64
 8003a30:	fb01 f303 	mul.w	r3, r1, r3
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	3332      	adds	r3, #50	; 0x32
 8003a3a:	4a34      	ldr	r2, [pc, #208]	; (8003b0c <UART_SetConfig+0x4e4>)
 8003a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a40:	095b      	lsrs	r3, r3, #5
 8003a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a46:	441c      	add	r4, r3
 8003a48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	673b      	str	r3, [r7, #112]	; 0x70
 8003a50:	677a      	str	r2, [r7, #116]	; 0x74
 8003a52:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a56:	4642      	mov	r2, r8
 8003a58:	464b      	mov	r3, r9
 8003a5a:	1891      	adds	r1, r2, r2
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	415b      	adcs	r3, r3
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a66:	4641      	mov	r1, r8
 8003a68:	1851      	adds	r1, r2, r1
 8003a6a:	6039      	str	r1, [r7, #0]
 8003a6c:	4649      	mov	r1, r9
 8003a6e:	414b      	adcs	r3, r1
 8003a70:	607b      	str	r3, [r7, #4]
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a7e:	4659      	mov	r1, fp
 8003a80:	00cb      	lsls	r3, r1, #3
 8003a82:	4651      	mov	r1, sl
 8003a84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a88:	4651      	mov	r1, sl
 8003a8a:	00ca      	lsls	r2, r1, #3
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4603      	mov	r3, r0
 8003a92:	4642      	mov	r2, r8
 8003a94:	189b      	adds	r3, r3, r2
 8003a96:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a98:	464b      	mov	r3, r9
 8003a9a:	460a      	mov	r2, r1
 8003a9c:	eb42 0303 	adc.w	r3, r2, r3
 8003aa0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	663b      	str	r3, [r7, #96]	; 0x60
 8003aac:	667a      	str	r2, [r7, #100]	; 0x64
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	f04f 0300 	mov.w	r3, #0
 8003ab6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003aba:	4649      	mov	r1, r9
 8003abc:	008b      	lsls	r3, r1, #2
 8003abe:	4641      	mov	r1, r8
 8003ac0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ac4:	4641      	mov	r1, r8
 8003ac6:	008a      	lsls	r2, r1, #2
 8003ac8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003acc:	f7fc fbd8 	bl	8000280 <__aeabi_uldivmod>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4b0d      	ldr	r3, [pc, #52]	; (8003b0c <UART_SetConfig+0x4e4>)
 8003ad6:	fba3 1302 	umull	r1, r3, r3, r2
 8003ada:	095b      	lsrs	r3, r3, #5
 8003adc:	2164      	movs	r1, #100	; 0x64
 8003ade:	fb01 f303 	mul.w	r3, r1, r3
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	3332      	adds	r3, #50	; 0x32
 8003ae8:	4a08      	ldr	r2, [pc, #32]	; (8003b0c <UART_SetConfig+0x4e4>)
 8003aea:	fba2 2303 	umull	r2, r3, r2, r3
 8003aee:	095b      	lsrs	r3, r3, #5
 8003af0:	f003 020f 	and.w	r2, r3, #15
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4422      	add	r2, r4
 8003afc:	609a      	str	r2, [r3, #8]
}
 8003afe:	bf00      	nop
 8003b00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b04:	46bd      	mov	sp, r7
 8003b06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b0a:	bf00      	nop
 8003b0c:	51eb851f 	.word	0x51eb851f

08003b10 <__errno>:
 8003b10:	4b01      	ldr	r3, [pc, #4]	; (8003b18 <__errno+0x8>)
 8003b12:	6818      	ldr	r0, [r3, #0]
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	20000010 	.word	0x20000010

08003b1c <__libc_init_array>:
 8003b1c:	b570      	push	{r4, r5, r6, lr}
 8003b1e:	4d0d      	ldr	r5, [pc, #52]	; (8003b54 <__libc_init_array+0x38>)
 8003b20:	4c0d      	ldr	r4, [pc, #52]	; (8003b58 <__libc_init_array+0x3c>)
 8003b22:	1b64      	subs	r4, r4, r5
 8003b24:	10a4      	asrs	r4, r4, #2
 8003b26:	2600      	movs	r6, #0
 8003b28:	42a6      	cmp	r6, r4
 8003b2a:	d109      	bne.n	8003b40 <__libc_init_array+0x24>
 8003b2c:	4d0b      	ldr	r5, [pc, #44]	; (8003b5c <__libc_init_array+0x40>)
 8003b2e:	4c0c      	ldr	r4, [pc, #48]	; (8003b60 <__libc_init_array+0x44>)
 8003b30:	f000 fc8e 	bl	8004450 <_init>
 8003b34:	1b64      	subs	r4, r4, r5
 8003b36:	10a4      	asrs	r4, r4, #2
 8003b38:	2600      	movs	r6, #0
 8003b3a:	42a6      	cmp	r6, r4
 8003b3c:	d105      	bne.n	8003b4a <__libc_init_array+0x2e>
 8003b3e:	bd70      	pop	{r4, r5, r6, pc}
 8003b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b44:	4798      	blx	r3
 8003b46:	3601      	adds	r6, #1
 8003b48:	e7ee      	b.n	8003b28 <__libc_init_array+0xc>
 8003b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b4e:	4798      	blx	r3
 8003b50:	3601      	adds	r6, #1
 8003b52:	e7f2      	b.n	8003b3a <__libc_init_array+0x1e>
 8003b54:	080044fc 	.word	0x080044fc
 8003b58:	080044fc 	.word	0x080044fc
 8003b5c:	080044fc 	.word	0x080044fc
 8003b60:	08004500 	.word	0x08004500

08003b64 <memset>:
 8003b64:	4402      	add	r2, r0
 8003b66:	4603      	mov	r3, r0
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d100      	bne.n	8003b6e <memset+0xa>
 8003b6c:	4770      	bx	lr
 8003b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b72:	e7f9      	b.n	8003b68 <memset+0x4>

08003b74 <siprintf>:
 8003b74:	b40e      	push	{r1, r2, r3}
 8003b76:	b500      	push	{lr}
 8003b78:	b09c      	sub	sp, #112	; 0x70
 8003b7a:	ab1d      	add	r3, sp, #116	; 0x74
 8003b7c:	9002      	str	r0, [sp, #8]
 8003b7e:	9006      	str	r0, [sp, #24]
 8003b80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b84:	4809      	ldr	r0, [pc, #36]	; (8003bac <siprintf+0x38>)
 8003b86:	9107      	str	r1, [sp, #28]
 8003b88:	9104      	str	r1, [sp, #16]
 8003b8a:	4909      	ldr	r1, [pc, #36]	; (8003bb0 <siprintf+0x3c>)
 8003b8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b90:	9105      	str	r1, [sp, #20]
 8003b92:	6800      	ldr	r0, [r0, #0]
 8003b94:	9301      	str	r3, [sp, #4]
 8003b96:	a902      	add	r1, sp, #8
 8003b98:	f000 f868 	bl	8003c6c <_svfiprintf_r>
 8003b9c:	9b02      	ldr	r3, [sp, #8]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	701a      	strb	r2, [r3, #0]
 8003ba2:	b01c      	add	sp, #112	; 0x70
 8003ba4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ba8:	b003      	add	sp, #12
 8003baa:	4770      	bx	lr
 8003bac:	20000010 	.word	0x20000010
 8003bb0:	ffff0208 	.word	0xffff0208

08003bb4 <__ssputs_r>:
 8003bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bb8:	688e      	ldr	r6, [r1, #8]
 8003bba:	429e      	cmp	r6, r3
 8003bbc:	4682      	mov	sl, r0
 8003bbe:	460c      	mov	r4, r1
 8003bc0:	4690      	mov	r8, r2
 8003bc2:	461f      	mov	r7, r3
 8003bc4:	d838      	bhi.n	8003c38 <__ssputs_r+0x84>
 8003bc6:	898a      	ldrh	r2, [r1, #12]
 8003bc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003bcc:	d032      	beq.n	8003c34 <__ssputs_r+0x80>
 8003bce:	6825      	ldr	r5, [r4, #0]
 8003bd0:	6909      	ldr	r1, [r1, #16]
 8003bd2:	eba5 0901 	sub.w	r9, r5, r1
 8003bd6:	6965      	ldr	r5, [r4, #20]
 8003bd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003be0:	3301      	adds	r3, #1
 8003be2:	444b      	add	r3, r9
 8003be4:	106d      	asrs	r5, r5, #1
 8003be6:	429d      	cmp	r5, r3
 8003be8:	bf38      	it	cc
 8003bea:	461d      	movcc	r5, r3
 8003bec:	0553      	lsls	r3, r2, #21
 8003bee:	d531      	bpl.n	8003c54 <__ssputs_r+0xa0>
 8003bf0:	4629      	mov	r1, r5
 8003bf2:	f000 fb63 	bl	80042bc <_malloc_r>
 8003bf6:	4606      	mov	r6, r0
 8003bf8:	b950      	cbnz	r0, 8003c10 <__ssputs_r+0x5c>
 8003bfa:	230c      	movs	r3, #12
 8003bfc:	f8ca 3000 	str.w	r3, [sl]
 8003c00:	89a3      	ldrh	r3, [r4, #12]
 8003c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c06:	81a3      	strh	r3, [r4, #12]
 8003c08:	f04f 30ff 	mov.w	r0, #4294967295
 8003c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c10:	6921      	ldr	r1, [r4, #16]
 8003c12:	464a      	mov	r2, r9
 8003c14:	f000 fabe 	bl	8004194 <memcpy>
 8003c18:	89a3      	ldrh	r3, [r4, #12]
 8003c1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c22:	81a3      	strh	r3, [r4, #12]
 8003c24:	6126      	str	r6, [r4, #16]
 8003c26:	6165      	str	r5, [r4, #20]
 8003c28:	444e      	add	r6, r9
 8003c2a:	eba5 0509 	sub.w	r5, r5, r9
 8003c2e:	6026      	str	r6, [r4, #0]
 8003c30:	60a5      	str	r5, [r4, #8]
 8003c32:	463e      	mov	r6, r7
 8003c34:	42be      	cmp	r6, r7
 8003c36:	d900      	bls.n	8003c3a <__ssputs_r+0x86>
 8003c38:	463e      	mov	r6, r7
 8003c3a:	6820      	ldr	r0, [r4, #0]
 8003c3c:	4632      	mov	r2, r6
 8003c3e:	4641      	mov	r1, r8
 8003c40:	f000 fab6 	bl	80041b0 <memmove>
 8003c44:	68a3      	ldr	r3, [r4, #8]
 8003c46:	1b9b      	subs	r3, r3, r6
 8003c48:	60a3      	str	r3, [r4, #8]
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	4433      	add	r3, r6
 8003c4e:	6023      	str	r3, [r4, #0]
 8003c50:	2000      	movs	r0, #0
 8003c52:	e7db      	b.n	8003c0c <__ssputs_r+0x58>
 8003c54:	462a      	mov	r2, r5
 8003c56:	f000 fba5 	bl	80043a4 <_realloc_r>
 8003c5a:	4606      	mov	r6, r0
 8003c5c:	2800      	cmp	r0, #0
 8003c5e:	d1e1      	bne.n	8003c24 <__ssputs_r+0x70>
 8003c60:	6921      	ldr	r1, [r4, #16]
 8003c62:	4650      	mov	r0, sl
 8003c64:	f000 fabe 	bl	80041e4 <_free_r>
 8003c68:	e7c7      	b.n	8003bfa <__ssputs_r+0x46>
	...

08003c6c <_svfiprintf_r>:
 8003c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c70:	4698      	mov	r8, r3
 8003c72:	898b      	ldrh	r3, [r1, #12]
 8003c74:	061b      	lsls	r3, r3, #24
 8003c76:	b09d      	sub	sp, #116	; 0x74
 8003c78:	4607      	mov	r7, r0
 8003c7a:	460d      	mov	r5, r1
 8003c7c:	4614      	mov	r4, r2
 8003c7e:	d50e      	bpl.n	8003c9e <_svfiprintf_r+0x32>
 8003c80:	690b      	ldr	r3, [r1, #16]
 8003c82:	b963      	cbnz	r3, 8003c9e <_svfiprintf_r+0x32>
 8003c84:	2140      	movs	r1, #64	; 0x40
 8003c86:	f000 fb19 	bl	80042bc <_malloc_r>
 8003c8a:	6028      	str	r0, [r5, #0]
 8003c8c:	6128      	str	r0, [r5, #16]
 8003c8e:	b920      	cbnz	r0, 8003c9a <_svfiprintf_r+0x2e>
 8003c90:	230c      	movs	r3, #12
 8003c92:	603b      	str	r3, [r7, #0]
 8003c94:	f04f 30ff 	mov.w	r0, #4294967295
 8003c98:	e0d1      	b.n	8003e3e <_svfiprintf_r+0x1d2>
 8003c9a:	2340      	movs	r3, #64	; 0x40
 8003c9c:	616b      	str	r3, [r5, #20]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ca2:	2320      	movs	r3, #32
 8003ca4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ca8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cac:	2330      	movs	r3, #48	; 0x30
 8003cae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003e58 <_svfiprintf_r+0x1ec>
 8003cb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003cb6:	f04f 0901 	mov.w	r9, #1
 8003cba:	4623      	mov	r3, r4
 8003cbc:	469a      	mov	sl, r3
 8003cbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cc2:	b10a      	cbz	r2, 8003cc8 <_svfiprintf_r+0x5c>
 8003cc4:	2a25      	cmp	r2, #37	; 0x25
 8003cc6:	d1f9      	bne.n	8003cbc <_svfiprintf_r+0x50>
 8003cc8:	ebba 0b04 	subs.w	fp, sl, r4
 8003ccc:	d00b      	beq.n	8003ce6 <_svfiprintf_r+0x7a>
 8003cce:	465b      	mov	r3, fp
 8003cd0:	4622      	mov	r2, r4
 8003cd2:	4629      	mov	r1, r5
 8003cd4:	4638      	mov	r0, r7
 8003cd6:	f7ff ff6d 	bl	8003bb4 <__ssputs_r>
 8003cda:	3001      	adds	r0, #1
 8003cdc:	f000 80aa 	beq.w	8003e34 <_svfiprintf_r+0x1c8>
 8003ce0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ce2:	445a      	add	r2, fp
 8003ce4:	9209      	str	r2, [sp, #36]	; 0x24
 8003ce6:	f89a 3000 	ldrb.w	r3, [sl]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 80a2 	beq.w	8003e34 <_svfiprintf_r+0x1c8>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cfa:	f10a 0a01 	add.w	sl, sl, #1
 8003cfe:	9304      	str	r3, [sp, #16]
 8003d00:	9307      	str	r3, [sp, #28]
 8003d02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d06:	931a      	str	r3, [sp, #104]	; 0x68
 8003d08:	4654      	mov	r4, sl
 8003d0a:	2205      	movs	r2, #5
 8003d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d10:	4851      	ldr	r0, [pc, #324]	; (8003e58 <_svfiprintf_r+0x1ec>)
 8003d12:	f7fc fa65 	bl	80001e0 <memchr>
 8003d16:	9a04      	ldr	r2, [sp, #16]
 8003d18:	b9d8      	cbnz	r0, 8003d52 <_svfiprintf_r+0xe6>
 8003d1a:	06d0      	lsls	r0, r2, #27
 8003d1c:	bf44      	itt	mi
 8003d1e:	2320      	movmi	r3, #32
 8003d20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d24:	0711      	lsls	r1, r2, #28
 8003d26:	bf44      	itt	mi
 8003d28:	232b      	movmi	r3, #43	; 0x2b
 8003d2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d2e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d32:	2b2a      	cmp	r3, #42	; 0x2a
 8003d34:	d015      	beq.n	8003d62 <_svfiprintf_r+0xf6>
 8003d36:	9a07      	ldr	r2, [sp, #28]
 8003d38:	4654      	mov	r4, sl
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	f04f 0c0a 	mov.w	ip, #10
 8003d40:	4621      	mov	r1, r4
 8003d42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d46:	3b30      	subs	r3, #48	; 0x30
 8003d48:	2b09      	cmp	r3, #9
 8003d4a:	d94e      	bls.n	8003dea <_svfiprintf_r+0x17e>
 8003d4c:	b1b0      	cbz	r0, 8003d7c <_svfiprintf_r+0x110>
 8003d4e:	9207      	str	r2, [sp, #28]
 8003d50:	e014      	b.n	8003d7c <_svfiprintf_r+0x110>
 8003d52:	eba0 0308 	sub.w	r3, r0, r8
 8003d56:	fa09 f303 	lsl.w	r3, r9, r3
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	9304      	str	r3, [sp, #16]
 8003d5e:	46a2      	mov	sl, r4
 8003d60:	e7d2      	b.n	8003d08 <_svfiprintf_r+0x9c>
 8003d62:	9b03      	ldr	r3, [sp, #12]
 8003d64:	1d19      	adds	r1, r3, #4
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	9103      	str	r1, [sp, #12]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	bfbb      	ittet	lt
 8003d6e:	425b      	neglt	r3, r3
 8003d70:	f042 0202 	orrlt.w	r2, r2, #2
 8003d74:	9307      	strge	r3, [sp, #28]
 8003d76:	9307      	strlt	r3, [sp, #28]
 8003d78:	bfb8      	it	lt
 8003d7a:	9204      	strlt	r2, [sp, #16]
 8003d7c:	7823      	ldrb	r3, [r4, #0]
 8003d7e:	2b2e      	cmp	r3, #46	; 0x2e
 8003d80:	d10c      	bne.n	8003d9c <_svfiprintf_r+0x130>
 8003d82:	7863      	ldrb	r3, [r4, #1]
 8003d84:	2b2a      	cmp	r3, #42	; 0x2a
 8003d86:	d135      	bne.n	8003df4 <_svfiprintf_r+0x188>
 8003d88:	9b03      	ldr	r3, [sp, #12]
 8003d8a:	1d1a      	adds	r2, r3, #4
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	9203      	str	r2, [sp, #12]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	bfb8      	it	lt
 8003d94:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d98:	3402      	adds	r4, #2
 8003d9a:	9305      	str	r3, [sp, #20]
 8003d9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003e68 <_svfiprintf_r+0x1fc>
 8003da0:	7821      	ldrb	r1, [r4, #0]
 8003da2:	2203      	movs	r2, #3
 8003da4:	4650      	mov	r0, sl
 8003da6:	f7fc fa1b 	bl	80001e0 <memchr>
 8003daa:	b140      	cbz	r0, 8003dbe <_svfiprintf_r+0x152>
 8003dac:	2340      	movs	r3, #64	; 0x40
 8003dae:	eba0 000a 	sub.w	r0, r0, sl
 8003db2:	fa03 f000 	lsl.w	r0, r3, r0
 8003db6:	9b04      	ldr	r3, [sp, #16]
 8003db8:	4303      	orrs	r3, r0
 8003dba:	3401      	adds	r4, #1
 8003dbc:	9304      	str	r3, [sp, #16]
 8003dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dc2:	4826      	ldr	r0, [pc, #152]	; (8003e5c <_svfiprintf_r+0x1f0>)
 8003dc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003dc8:	2206      	movs	r2, #6
 8003dca:	f7fc fa09 	bl	80001e0 <memchr>
 8003dce:	2800      	cmp	r0, #0
 8003dd0:	d038      	beq.n	8003e44 <_svfiprintf_r+0x1d8>
 8003dd2:	4b23      	ldr	r3, [pc, #140]	; (8003e60 <_svfiprintf_r+0x1f4>)
 8003dd4:	bb1b      	cbnz	r3, 8003e1e <_svfiprintf_r+0x1b2>
 8003dd6:	9b03      	ldr	r3, [sp, #12]
 8003dd8:	3307      	adds	r3, #7
 8003dda:	f023 0307 	bic.w	r3, r3, #7
 8003dde:	3308      	adds	r3, #8
 8003de0:	9303      	str	r3, [sp, #12]
 8003de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003de4:	4433      	add	r3, r6
 8003de6:	9309      	str	r3, [sp, #36]	; 0x24
 8003de8:	e767      	b.n	8003cba <_svfiprintf_r+0x4e>
 8003dea:	fb0c 3202 	mla	r2, ip, r2, r3
 8003dee:	460c      	mov	r4, r1
 8003df0:	2001      	movs	r0, #1
 8003df2:	e7a5      	b.n	8003d40 <_svfiprintf_r+0xd4>
 8003df4:	2300      	movs	r3, #0
 8003df6:	3401      	adds	r4, #1
 8003df8:	9305      	str	r3, [sp, #20]
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	f04f 0c0a 	mov.w	ip, #10
 8003e00:	4620      	mov	r0, r4
 8003e02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e06:	3a30      	subs	r2, #48	; 0x30
 8003e08:	2a09      	cmp	r2, #9
 8003e0a:	d903      	bls.n	8003e14 <_svfiprintf_r+0x1a8>
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0c5      	beq.n	8003d9c <_svfiprintf_r+0x130>
 8003e10:	9105      	str	r1, [sp, #20]
 8003e12:	e7c3      	b.n	8003d9c <_svfiprintf_r+0x130>
 8003e14:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e18:	4604      	mov	r4, r0
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e7f0      	b.n	8003e00 <_svfiprintf_r+0x194>
 8003e1e:	ab03      	add	r3, sp, #12
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	462a      	mov	r2, r5
 8003e24:	4b0f      	ldr	r3, [pc, #60]	; (8003e64 <_svfiprintf_r+0x1f8>)
 8003e26:	a904      	add	r1, sp, #16
 8003e28:	4638      	mov	r0, r7
 8003e2a:	f3af 8000 	nop.w
 8003e2e:	1c42      	adds	r2, r0, #1
 8003e30:	4606      	mov	r6, r0
 8003e32:	d1d6      	bne.n	8003de2 <_svfiprintf_r+0x176>
 8003e34:	89ab      	ldrh	r3, [r5, #12]
 8003e36:	065b      	lsls	r3, r3, #25
 8003e38:	f53f af2c 	bmi.w	8003c94 <_svfiprintf_r+0x28>
 8003e3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e3e:	b01d      	add	sp, #116	; 0x74
 8003e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e44:	ab03      	add	r3, sp, #12
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	462a      	mov	r2, r5
 8003e4a:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <_svfiprintf_r+0x1f8>)
 8003e4c:	a904      	add	r1, sp, #16
 8003e4e:	4638      	mov	r0, r7
 8003e50:	f000 f87a 	bl	8003f48 <_printf_i>
 8003e54:	e7eb      	b.n	8003e2e <_svfiprintf_r+0x1c2>
 8003e56:	bf00      	nop
 8003e58:	080044c0 	.word	0x080044c0
 8003e5c:	080044ca 	.word	0x080044ca
 8003e60:	00000000 	.word	0x00000000
 8003e64:	08003bb5 	.word	0x08003bb5
 8003e68:	080044c6 	.word	0x080044c6

08003e6c <_printf_common>:
 8003e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e70:	4616      	mov	r6, r2
 8003e72:	4699      	mov	r9, r3
 8003e74:	688a      	ldr	r2, [r1, #8]
 8003e76:	690b      	ldr	r3, [r1, #16]
 8003e78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	bfb8      	it	lt
 8003e80:	4613      	movlt	r3, r2
 8003e82:	6033      	str	r3, [r6, #0]
 8003e84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e88:	4607      	mov	r7, r0
 8003e8a:	460c      	mov	r4, r1
 8003e8c:	b10a      	cbz	r2, 8003e92 <_printf_common+0x26>
 8003e8e:	3301      	adds	r3, #1
 8003e90:	6033      	str	r3, [r6, #0]
 8003e92:	6823      	ldr	r3, [r4, #0]
 8003e94:	0699      	lsls	r1, r3, #26
 8003e96:	bf42      	ittt	mi
 8003e98:	6833      	ldrmi	r3, [r6, #0]
 8003e9a:	3302      	addmi	r3, #2
 8003e9c:	6033      	strmi	r3, [r6, #0]
 8003e9e:	6825      	ldr	r5, [r4, #0]
 8003ea0:	f015 0506 	ands.w	r5, r5, #6
 8003ea4:	d106      	bne.n	8003eb4 <_printf_common+0x48>
 8003ea6:	f104 0a19 	add.w	sl, r4, #25
 8003eaa:	68e3      	ldr	r3, [r4, #12]
 8003eac:	6832      	ldr	r2, [r6, #0]
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	42ab      	cmp	r3, r5
 8003eb2:	dc26      	bgt.n	8003f02 <_printf_common+0x96>
 8003eb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003eb8:	1e13      	subs	r3, r2, #0
 8003eba:	6822      	ldr	r2, [r4, #0]
 8003ebc:	bf18      	it	ne
 8003ebe:	2301      	movne	r3, #1
 8003ec0:	0692      	lsls	r2, r2, #26
 8003ec2:	d42b      	bmi.n	8003f1c <_printf_common+0xb0>
 8003ec4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ec8:	4649      	mov	r1, r9
 8003eca:	4638      	mov	r0, r7
 8003ecc:	47c0      	blx	r8
 8003ece:	3001      	adds	r0, #1
 8003ed0:	d01e      	beq.n	8003f10 <_printf_common+0xa4>
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	68e5      	ldr	r5, [r4, #12]
 8003ed6:	6832      	ldr	r2, [r6, #0]
 8003ed8:	f003 0306 	and.w	r3, r3, #6
 8003edc:	2b04      	cmp	r3, #4
 8003ede:	bf08      	it	eq
 8003ee0:	1aad      	subeq	r5, r5, r2
 8003ee2:	68a3      	ldr	r3, [r4, #8]
 8003ee4:	6922      	ldr	r2, [r4, #16]
 8003ee6:	bf0c      	ite	eq
 8003ee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003eec:	2500      	movne	r5, #0
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	bfc4      	itt	gt
 8003ef2:	1a9b      	subgt	r3, r3, r2
 8003ef4:	18ed      	addgt	r5, r5, r3
 8003ef6:	2600      	movs	r6, #0
 8003ef8:	341a      	adds	r4, #26
 8003efa:	42b5      	cmp	r5, r6
 8003efc:	d11a      	bne.n	8003f34 <_printf_common+0xc8>
 8003efe:	2000      	movs	r0, #0
 8003f00:	e008      	b.n	8003f14 <_printf_common+0xa8>
 8003f02:	2301      	movs	r3, #1
 8003f04:	4652      	mov	r2, sl
 8003f06:	4649      	mov	r1, r9
 8003f08:	4638      	mov	r0, r7
 8003f0a:	47c0      	blx	r8
 8003f0c:	3001      	adds	r0, #1
 8003f0e:	d103      	bne.n	8003f18 <_printf_common+0xac>
 8003f10:	f04f 30ff 	mov.w	r0, #4294967295
 8003f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f18:	3501      	adds	r5, #1
 8003f1a:	e7c6      	b.n	8003eaa <_printf_common+0x3e>
 8003f1c:	18e1      	adds	r1, r4, r3
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	2030      	movs	r0, #48	; 0x30
 8003f22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f26:	4422      	add	r2, r4
 8003f28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f30:	3302      	adds	r3, #2
 8003f32:	e7c7      	b.n	8003ec4 <_printf_common+0x58>
 8003f34:	2301      	movs	r3, #1
 8003f36:	4622      	mov	r2, r4
 8003f38:	4649      	mov	r1, r9
 8003f3a:	4638      	mov	r0, r7
 8003f3c:	47c0      	blx	r8
 8003f3e:	3001      	adds	r0, #1
 8003f40:	d0e6      	beq.n	8003f10 <_printf_common+0xa4>
 8003f42:	3601      	adds	r6, #1
 8003f44:	e7d9      	b.n	8003efa <_printf_common+0x8e>
	...

08003f48 <_printf_i>:
 8003f48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f4c:	7e0f      	ldrb	r7, [r1, #24]
 8003f4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f50:	2f78      	cmp	r7, #120	; 0x78
 8003f52:	4691      	mov	r9, r2
 8003f54:	4680      	mov	r8, r0
 8003f56:	460c      	mov	r4, r1
 8003f58:	469a      	mov	sl, r3
 8003f5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f5e:	d807      	bhi.n	8003f70 <_printf_i+0x28>
 8003f60:	2f62      	cmp	r7, #98	; 0x62
 8003f62:	d80a      	bhi.n	8003f7a <_printf_i+0x32>
 8003f64:	2f00      	cmp	r7, #0
 8003f66:	f000 80d8 	beq.w	800411a <_printf_i+0x1d2>
 8003f6a:	2f58      	cmp	r7, #88	; 0x58
 8003f6c:	f000 80a3 	beq.w	80040b6 <_printf_i+0x16e>
 8003f70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f78:	e03a      	b.n	8003ff0 <_printf_i+0xa8>
 8003f7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f7e:	2b15      	cmp	r3, #21
 8003f80:	d8f6      	bhi.n	8003f70 <_printf_i+0x28>
 8003f82:	a101      	add	r1, pc, #4	; (adr r1, 8003f88 <_printf_i+0x40>)
 8003f84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f88:	08003fe1 	.word	0x08003fe1
 8003f8c:	08003ff5 	.word	0x08003ff5
 8003f90:	08003f71 	.word	0x08003f71
 8003f94:	08003f71 	.word	0x08003f71
 8003f98:	08003f71 	.word	0x08003f71
 8003f9c:	08003f71 	.word	0x08003f71
 8003fa0:	08003ff5 	.word	0x08003ff5
 8003fa4:	08003f71 	.word	0x08003f71
 8003fa8:	08003f71 	.word	0x08003f71
 8003fac:	08003f71 	.word	0x08003f71
 8003fb0:	08003f71 	.word	0x08003f71
 8003fb4:	08004101 	.word	0x08004101
 8003fb8:	08004025 	.word	0x08004025
 8003fbc:	080040e3 	.word	0x080040e3
 8003fc0:	08003f71 	.word	0x08003f71
 8003fc4:	08003f71 	.word	0x08003f71
 8003fc8:	08004123 	.word	0x08004123
 8003fcc:	08003f71 	.word	0x08003f71
 8003fd0:	08004025 	.word	0x08004025
 8003fd4:	08003f71 	.word	0x08003f71
 8003fd8:	08003f71 	.word	0x08003f71
 8003fdc:	080040eb 	.word	0x080040eb
 8003fe0:	682b      	ldr	r3, [r5, #0]
 8003fe2:	1d1a      	adds	r2, r3, #4
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	602a      	str	r2, [r5, #0]
 8003fe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0a3      	b.n	800413c <_printf_i+0x1f4>
 8003ff4:	6820      	ldr	r0, [r4, #0]
 8003ff6:	6829      	ldr	r1, [r5, #0]
 8003ff8:	0606      	lsls	r6, r0, #24
 8003ffa:	f101 0304 	add.w	r3, r1, #4
 8003ffe:	d50a      	bpl.n	8004016 <_printf_i+0xce>
 8004000:	680e      	ldr	r6, [r1, #0]
 8004002:	602b      	str	r3, [r5, #0]
 8004004:	2e00      	cmp	r6, #0
 8004006:	da03      	bge.n	8004010 <_printf_i+0xc8>
 8004008:	232d      	movs	r3, #45	; 0x2d
 800400a:	4276      	negs	r6, r6
 800400c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004010:	485e      	ldr	r0, [pc, #376]	; (800418c <_printf_i+0x244>)
 8004012:	230a      	movs	r3, #10
 8004014:	e019      	b.n	800404a <_printf_i+0x102>
 8004016:	680e      	ldr	r6, [r1, #0]
 8004018:	602b      	str	r3, [r5, #0]
 800401a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800401e:	bf18      	it	ne
 8004020:	b236      	sxthne	r6, r6
 8004022:	e7ef      	b.n	8004004 <_printf_i+0xbc>
 8004024:	682b      	ldr	r3, [r5, #0]
 8004026:	6820      	ldr	r0, [r4, #0]
 8004028:	1d19      	adds	r1, r3, #4
 800402a:	6029      	str	r1, [r5, #0]
 800402c:	0601      	lsls	r1, r0, #24
 800402e:	d501      	bpl.n	8004034 <_printf_i+0xec>
 8004030:	681e      	ldr	r6, [r3, #0]
 8004032:	e002      	b.n	800403a <_printf_i+0xf2>
 8004034:	0646      	lsls	r6, r0, #25
 8004036:	d5fb      	bpl.n	8004030 <_printf_i+0xe8>
 8004038:	881e      	ldrh	r6, [r3, #0]
 800403a:	4854      	ldr	r0, [pc, #336]	; (800418c <_printf_i+0x244>)
 800403c:	2f6f      	cmp	r7, #111	; 0x6f
 800403e:	bf0c      	ite	eq
 8004040:	2308      	moveq	r3, #8
 8004042:	230a      	movne	r3, #10
 8004044:	2100      	movs	r1, #0
 8004046:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800404a:	6865      	ldr	r5, [r4, #4]
 800404c:	60a5      	str	r5, [r4, #8]
 800404e:	2d00      	cmp	r5, #0
 8004050:	bfa2      	ittt	ge
 8004052:	6821      	ldrge	r1, [r4, #0]
 8004054:	f021 0104 	bicge.w	r1, r1, #4
 8004058:	6021      	strge	r1, [r4, #0]
 800405a:	b90e      	cbnz	r6, 8004060 <_printf_i+0x118>
 800405c:	2d00      	cmp	r5, #0
 800405e:	d04d      	beq.n	80040fc <_printf_i+0x1b4>
 8004060:	4615      	mov	r5, r2
 8004062:	fbb6 f1f3 	udiv	r1, r6, r3
 8004066:	fb03 6711 	mls	r7, r3, r1, r6
 800406a:	5dc7      	ldrb	r7, [r0, r7]
 800406c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004070:	4637      	mov	r7, r6
 8004072:	42bb      	cmp	r3, r7
 8004074:	460e      	mov	r6, r1
 8004076:	d9f4      	bls.n	8004062 <_printf_i+0x11a>
 8004078:	2b08      	cmp	r3, #8
 800407a:	d10b      	bne.n	8004094 <_printf_i+0x14c>
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	07de      	lsls	r6, r3, #31
 8004080:	d508      	bpl.n	8004094 <_printf_i+0x14c>
 8004082:	6923      	ldr	r3, [r4, #16]
 8004084:	6861      	ldr	r1, [r4, #4]
 8004086:	4299      	cmp	r1, r3
 8004088:	bfde      	ittt	le
 800408a:	2330      	movle	r3, #48	; 0x30
 800408c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004090:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004094:	1b52      	subs	r2, r2, r5
 8004096:	6122      	str	r2, [r4, #16]
 8004098:	f8cd a000 	str.w	sl, [sp]
 800409c:	464b      	mov	r3, r9
 800409e:	aa03      	add	r2, sp, #12
 80040a0:	4621      	mov	r1, r4
 80040a2:	4640      	mov	r0, r8
 80040a4:	f7ff fee2 	bl	8003e6c <_printf_common>
 80040a8:	3001      	adds	r0, #1
 80040aa:	d14c      	bne.n	8004146 <_printf_i+0x1fe>
 80040ac:	f04f 30ff 	mov.w	r0, #4294967295
 80040b0:	b004      	add	sp, #16
 80040b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040b6:	4835      	ldr	r0, [pc, #212]	; (800418c <_printf_i+0x244>)
 80040b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80040bc:	6829      	ldr	r1, [r5, #0]
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80040c4:	6029      	str	r1, [r5, #0]
 80040c6:	061d      	lsls	r5, r3, #24
 80040c8:	d514      	bpl.n	80040f4 <_printf_i+0x1ac>
 80040ca:	07df      	lsls	r7, r3, #31
 80040cc:	bf44      	itt	mi
 80040ce:	f043 0320 	orrmi.w	r3, r3, #32
 80040d2:	6023      	strmi	r3, [r4, #0]
 80040d4:	b91e      	cbnz	r6, 80040de <_printf_i+0x196>
 80040d6:	6823      	ldr	r3, [r4, #0]
 80040d8:	f023 0320 	bic.w	r3, r3, #32
 80040dc:	6023      	str	r3, [r4, #0]
 80040de:	2310      	movs	r3, #16
 80040e0:	e7b0      	b.n	8004044 <_printf_i+0xfc>
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	f043 0320 	orr.w	r3, r3, #32
 80040e8:	6023      	str	r3, [r4, #0]
 80040ea:	2378      	movs	r3, #120	; 0x78
 80040ec:	4828      	ldr	r0, [pc, #160]	; (8004190 <_printf_i+0x248>)
 80040ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040f2:	e7e3      	b.n	80040bc <_printf_i+0x174>
 80040f4:	0659      	lsls	r1, r3, #25
 80040f6:	bf48      	it	mi
 80040f8:	b2b6      	uxthmi	r6, r6
 80040fa:	e7e6      	b.n	80040ca <_printf_i+0x182>
 80040fc:	4615      	mov	r5, r2
 80040fe:	e7bb      	b.n	8004078 <_printf_i+0x130>
 8004100:	682b      	ldr	r3, [r5, #0]
 8004102:	6826      	ldr	r6, [r4, #0]
 8004104:	6961      	ldr	r1, [r4, #20]
 8004106:	1d18      	adds	r0, r3, #4
 8004108:	6028      	str	r0, [r5, #0]
 800410a:	0635      	lsls	r5, r6, #24
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	d501      	bpl.n	8004114 <_printf_i+0x1cc>
 8004110:	6019      	str	r1, [r3, #0]
 8004112:	e002      	b.n	800411a <_printf_i+0x1d2>
 8004114:	0670      	lsls	r0, r6, #25
 8004116:	d5fb      	bpl.n	8004110 <_printf_i+0x1c8>
 8004118:	8019      	strh	r1, [r3, #0]
 800411a:	2300      	movs	r3, #0
 800411c:	6123      	str	r3, [r4, #16]
 800411e:	4615      	mov	r5, r2
 8004120:	e7ba      	b.n	8004098 <_printf_i+0x150>
 8004122:	682b      	ldr	r3, [r5, #0]
 8004124:	1d1a      	adds	r2, r3, #4
 8004126:	602a      	str	r2, [r5, #0]
 8004128:	681d      	ldr	r5, [r3, #0]
 800412a:	6862      	ldr	r2, [r4, #4]
 800412c:	2100      	movs	r1, #0
 800412e:	4628      	mov	r0, r5
 8004130:	f7fc f856 	bl	80001e0 <memchr>
 8004134:	b108      	cbz	r0, 800413a <_printf_i+0x1f2>
 8004136:	1b40      	subs	r0, r0, r5
 8004138:	6060      	str	r0, [r4, #4]
 800413a:	6863      	ldr	r3, [r4, #4]
 800413c:	6123      	str	r3, [r4, #16]
 800413e:	2300      	movs	r3, #0
 8004140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004144:	e7a8      	b.n	8004098 <_printf_i+0x150>
 8004146:	6923      	ldr	r3, [r4, #16]
 8004148:	462a      	mov	r2, r5
 800414a:	4649      	mov	r1, r9
 800414c:	4640      	mov	r0, r8
 800414e:	47d0      	blx	sl
 8004150:	3001      	adds	r0, #1
 8004152:	d0ab      	beq.n	80040ac <_printf_i+0x164>
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	079b      	lsls	r3, r3, #30
 8004158:	d413      	bmi.n	8004182 <_printf_i+0x23a>
 800415a:	68e0      	ldr	r0, [r4, #12]
 800415c:	9b03      	ldr	r3, [sp, #12]
 800415e:	4298      	cmp	r0, r3
 8004160:	bfb8      	it	lt
 8004162:	4618      	movlt	r0, r3
 8004164:	e7a4      	b.n	80040b0 <_printf_i+0x168>
 8004166:	2301      	movs	r3, #1
 8004168:	4632      	mov	r2, r6
 800416a:	4649      	mov	r1, r9
 800416c:	4640      	mov	r0, r8
 800416e:	47d0      	blx	sl
 8004170:	3001      	adds	r0, #1
 8004172:	d09b      	beq.n	80040ac <_printf_i+0x164>
 8004174:	3501      	adds	r5, #1
 8004176:	68e3      	ldr	r3, [r4, #12]
 8004178:	9903      	ldr	r1, [sp, #12]
 800417a:	1a5b      	subs	r3, r3, r1
 800417c:	42ab      	cmp	r3, r5
 800417e:	dcf2      	bgt.n	8004166 <_printf_i+0x21e>
 8004180:	e7eb      	b.n	800415a <_printf_i+0x212>
 8004182:	2500      	movs	r5, #0
 8004184:	f104 0619 	add.w	r6, r4, #25
 8004188:	e7f5      	b.n	8004176 <_printf_i+0x22e>
 800418a:	bf00      	nop
 800418c:	080044d1 	.word	0x080044d1
 8004190:	080044e2 	.word	0x080044e2

08004194 <memcpy>:
 8004194:	440a      	add	r2, r1
 8004196:	4291      	cmp	r1, r2
 8004198:	f100 33ff 	add.w	r3, r0, #4294967295
 800419c:	d100      	bne.n	80041a0 <memcpy+0xc>
 800419e:	4770      	bx	lr
 80041a0:	b510      	push	{r4, lr}
 80041a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041aa:	4291      	cmp	r1, r2
 80041ac:	d1f9      	bne.n	80041a2 <memcpy+0xe>
 80041ae:	bd10      	pop	{r4, pc}

080041b0 <memmove>:
 80041b0:	4288      	cmp	r0, r1
 80041b2:	b510      	push	{r4, lr}
 80041b4:	eb01 0402 	add.w	r4, r1, r2
 80041b8:	d902      	bls.n	80041c0 <memmove+0x10>
 80041ba:	4284      	cmp	r4, r0
 80041bc:	4623      	mov	r3, r4
 80041be:	d807      	bhi.n	80041d0 <memmove+0x20>
 80041c0:	1e43      	subs	r3, r0, #1
 80041c2:	42a1      	cmp	r1, r4
 80041c4:	d008      	beq.n	80041d8 <memmove+0x28>
 80041c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041ce:	e7f8      	b.n	80041c2 <memmove+0x12>
 80041d0:	4402      	add	r2, r0
 80041d2:	4601      	mov	r1, r0
 80041d4:	428a      	cmp	r2, r1
 80041d6:	d100      	bne.n	80041da <memmove+0x2a>
 80041d8:	bd10      	pop	{r4, pc}
 80041da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041e2:	e7f7      	b.n	80041d4 <memmove+0x24>

080041e4 <_free_r>:
 80041e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041e6:	2900      	cmp	r1, #0
 80041e8:	d044      	beq.n	8004274 <_free_r+0x90>
 80041ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041ee:	9001      	str	r0, [sp, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f1a1 0404 	sub.w	r4, r1, #4
 80041f6:	bfb8      	it	lt
 80041f8:	18e4      	addlt	r4, r4, r3
 80041fa:	f000 f913 	bl	8004424 <__malloc_lock>
 80041fe:	4a1e      	ldr	r2, [pc, #120]	; (8004278 <_free_r+0x94>)
 8004200:	9801      	ldr	r0, [sp, #4]
 8004202:	6813      	ldr	r3, [r2, #0]
 8004204:	b933      	cbnz	r3, 8004214 <_free_r+0x30>
 8004206:	6063      	str	r3, [r4, #4]
 8004208:	6014      	str	r4, [r2, #0]
 800420a:	b003      	add	sp, #12
 800420c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004210:	f000 b90e 	b.w	8004430 <__malloc_unlock>
 8004214:	42a3      	cmp	r3, r4
 8004216:	d908      	bls.n	800422a <_free_r+0x46>
 8004218:	6825      	ldr	r5, [r4, #0]
 800421a:	1961      	adds	r1, r4, r5
 800421c:	428b      	cmp	r3, r1
 800421e:	bf01      	itttt	eq
 8004220:	6819      	ldreq	r1, [r3, #0]
 8004222:	685b      	ldreq	r3, [r3, #4]
 8004224:	1949      	addeq	r1, r1, r5
 8004226:	6021      	streq	r1, [r4, #0]
 8004228:	e7ed      	b.n	8004206 <_free_r+0x22>
 800422a:	461a      	mov	r2, r3
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	b10b      	cbz	r3, 8004234 <_free_r+0x50>
 8004230:	42a3      	cmp	r3, r4
 8004232:	d9fa      	bls.n	800422a <_free_r+0x46>
 8004234:	6811      	ldr	r1, [r2, #0]
 8004236:	1855      	adds	r5, r2, r1
 8004238:	42a5      	cmp	r5, r4
 800423a:	d10b      	bne.n	8004254 <_free_r+0x70>
 800423c:	6824      	ldr	r4, [r4, #0]
 800423e:	4421      	add	r1, r4
 8004240:	1854      	adds	r4, r2, r1
 8004242:	42a3      	cmp	r3, r4
 8004244:	6011      	str	r1, [r2, #0]
 8004246:	d1e0      	bne.n	800420a <_free_r+0x26>
 8004248:	681c      	ldr	r4, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	6053      	str	r3, [r2, #4]
 800424e:	4421      	add	r1, r4
 8004250:	6011      	str	r1, [r2, #0]
 8004252:	e7da      	b.n	800420a <_free_r+0x26>
 8004254:	d902      	bls.n	800425c <_free_r+0x78>
 8004256:	230c      	movs	r3, #12
 8004258:	6003      	str	r3, [r0, #0]
 800425a:	e7d6      	b.n	800420a <_free_r+0x26>
 800425c:	6825      	ldr	r5, [r4, #0]
 800425e:	1961      	adds	r1, r4, r5
 8004260:	428b      	cmp	r3, r1
 8004262:	bf04      	itt	eq
 8004264:	6819      	ldreq	r1, [r3, #0]
 8004266:	685b      	ldreq	r3, [r3, #4]
 8004268:	6063      	str	r3, [r4, #4]
 800426a:	bf04      	itt	eq
 800426c:	1949      	addeq	r1, r1, r5
 800426e:	6021      	streq	r1, [r4, #0]
 8004270:	6054      	str	r4, [r2, #4]
 8004272:	e7ca      	b.n	800420a <_free_r+0x26>
 8004274:	b003      	add	sp, #12
 8004276:	bd30      	pop	{r4, r5, pc}
 8004278:	200001cc 	.word	0x200001cc

0800427c <sbrk_aligned>:
 800427c:	b570      	push	{r4, r5, r6, lr}
 800427e:	4e0e      	ldr	r6, [pc, #56]	; (80042b8 <sbrk_aligned+0x3c>)
 8004280:	460c      	mov	r4, r1
 8004282:	6831      	ldr	r1, [r6, #0]
 8004284:	4605      	mov	r5, r0
 8004286:	b911      	cbnz	r1, 800428e <sbrk_aligned+0x12>
 8004288:	f000 f8bc 	bl	8004404 <_sbrk_r>
 800428c:	6030      	str	r0, [r6, #0]
 800428e:	4621      	mov	r1, r4
 8004290:	4628      	mov	r0, r5
 8004292:	f000 f8b7 	bl	8004404 <_sbrk_r>
 8004296:	1c43      	adds	r3, r0, #1
 8004298:	d00a      	beq.n	80042b0 <sbrk_aligned+0x34>
 800429a:	1cc4      	adds	r4, r0, #3
 800429c:	f024 0403 	bic.w	r4, r4, #3
 80042a0:	42a0      	cmp	r0, r4
 80042a2:	d007      	beq.n	80042b4 <sbrk_aligned+0x38>
 80042a4:	1a21      	subs	r1, r4, r0
 80042a6:	4628      	mov	r0, r5
 80042a8:	f000 f8ac 	bl	8004404 <_sbrk_r>
 80042ac:	3001      	adds	r0, #1
 80042ae:	d101      	bne.n	80042b4 <sbrk_aligned+0x38>
 80042b0:	f04f 34ff 	mov.w	r4, #4294967295
 80042b4:	4620      	mov	r0, r4
 80042b6:	bd70      	pop	{r4, r5, r6, pc}
 80042b8:	200001d0 	.word	0x200001d0

080042bc <_malloc_r>:
 80042bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042c0:	1ccd      	adds	r5, r1, #3
 80042c2:	f025 0503 	bic.w	r5, r5, #3
 80042c6:	3508      	adds	r5, #8
 80042c8:	2d0c      	cmp	r5, #12
 80042ca:	bf38      	it	cc
 80042cc:	250c      	movcc	r5, #12
 80042ce:	2d00      	cmp	r5, #0
 80042d0:	4607      	mov	r7, r0
 80042d2:	db01      	blt.n	80042d8 <_malloc_r+0x1c>
 80042d4:	42a9      	cmp	r1, r5
 80042d6:	d905      	bls.n	80042e4 <_malloc_r+0x28>
 80042d8:	230c      	movs	r3, #12
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	2600      	movs	r6, #0
 80042de:	4630      	mov	r0, r6
 80042e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042e4:	4e2e      	ldr	r6, [pc, #184]	; (80043a0 <_malloc_r+0xe4>)
 80042e6:	f000 f89d 	bl	8004424 <__malloc_lock>
 80042ea:	6833      	ldr	r3, [r6, #0]
 80042ec:	461c      	mov	r4, r3
 80042ee:	bb34      	cbnz	r4, 800433e <_malloc_r+0x82>
 80042f0:	4629      	mov	r1, r5
 80042f2:	4638      	mov	r0, r7
 80042f4:	f7ff ffc2 	bl	800427c <sbrk_aligned>
 80042f8:	1c43      	adds	r3, r0, #1
 80042fa:	4604      	mov	r4, r0
 80042fc:	d14d      	bne.n	800439a <_malloc_r+0xde>
 80042fe:	6834      	ldr	r4, [r6, #0]
 8004300:	4626      	mov	r6, r4
 8004302:	2e00      	cmp	r6, #0
 8004304:	d140      	bne.n	8004388 <_malloc_r+0xcc>
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	4631      	mov	r1, r6
 800430a:	4638      	mov	r0, r7
 800430c:	eb04 0803 	add.w	r8, r4, r3
 8004310:	f000 f878 	bl	8004404 <_sbrk_r>
 8004314:	4580      	cmp	r8, r0
 8004316:	d13a      	bne.n	800438e <_malloc_r+0xd2>
 8004318:	6821      	ldr	r1, [r4, #0]
 800431a:	3503      	adds	r5, #3
 800431c:	1a6d      	subs	r5, r5, r1
 800431e:	f025 0503 	bic.w	r5, r5, #3
 8004322:	3508      	adds	r5, #8
 8004324:	2d0c      	cmp	r5, #12
 8004326:	bf38      	it	cc
 8004328:	250c      	movcc	r5, #12
 800432a:	4629      	mov	r1, r5
 800432c:	4638      	mov	r0, r7
 800432e:	f7ff ffa5 	bl	800427c <sbrk_aligned>
 8004332:	3001      	adds	r0, #1
 8004334:	d02b      	beq.n	800438e <_malloc_r+0xd2>
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	442b      	add	r3, r5
 800433a:	6023      	str	r3, [r4, #0]
 800433c:	e00e      	b.n	800435c <_malloc_r+0xa0>
 800433e:	6822      	ldr	r2, [r4, #0]
 8004340:	1b52      	subs	r2, r2, r5
 8004342:	d41e      	bmi.n	8004382 <_malloc_r+0xc6>
 8004344:	2a0b      	cmp	r2, #11
 8004346:	d916      	bls.n	8004376 <_malloc_r+0xba>
 8004348:	1961      	adds	r1, r4, r5
 800434a:	42a3      	cmp	r3, r4
 800434c:	6025      	str	r5, [r4, #0]
 800434e:	bf18      	it	ne
 8004350:	6059      	strne	r1, [r3, #4]
 8004352:	6863      	ldr	r3, [r4, #4]
 8004354:	bf08      	it	eq
 8004356:	6031      	streq	r1, [r6, #0]
 8004358:	5162      	str	r2, [r4, r5]
 800435a:	604b      	str	r3, [r1, #4]
 800435c:	4638      	mov	r0, r7
 800435e:	f104 060b 	add.w	r6, r4, #11
 8004362:	f000 f865 	bl	8004430 <__malloc_unlock>
 8004366:	f026 0607 	bic.w	r6, r6, #7
 800436a:	1d23      	adds	r3, r4, #4
 800436c:	1af2      	subs	r2, r6, r3
 800436e:	d0b6      	beq.n	80042de <_malloc_r+0x22>
 8004370:	1b9b      	subs	r3, r3, r6
 8004372:	50a3      	str	r3, [r4, r2]
 8004374:	e7b3      	b.n	80042de <_malloc_r+0x22>
 8004376:	6862      	ldr	r2, [r4, #4]
 8004378:	42a3      	cmp	r3, r4
 800437a:	bf0c      	ite	eq
 800437c:	6032      	streq	r2, [r6, #0]
 800437e:	605a      	strne	r2, [r3, #4]
 8004380:	e7ec      	b.n	800435c <_malloc_r+0xa0>
 8004382:	4623      	mov	r3, r4
 8004384:	6864      	ldr	r4, [r4, #4]
 8004386:	e7b2      	b.n	80042ee <_malloc_r+0x32>
 8004388:	4634      	mov	r4, r6
 800438a:	6876      	ldr	r6, [r6, #4]
 800438c:	e7b9      	b.n	8004302 <_malloc_r+0x46>
 800438e:	230c      	movs	r3, #12
 8004390:	603b      	str	r3, [r7, #0]
 8004392:	4638      	mov	r0, r7
 8004394:	f000 f84c 	bl	8004430 <__malloc_unlock>
 8004398:	e7a1      	b.n	80042de <_malloc_r+0x22>
 800439a:	6025      	str	r5, [r4, #0]
 800439c:	e7de      	b.n	800435c <_malloc_r+0xa0>
 800439e:	bf00      	nop
 80043a0:	200001cc 	.word	0x200001cc

080043a4 <_realloc_r>:
 80043a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043a8:	4680      	mov	r8, r0
 80043aa:	4614      	mov	r4, r2
 80043ac:	460e      	mov	r6, r1
 80043ae:	b921      	cbnz	r1, 80043ba <_realloc_r+0x16>
 80043b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043b4:	4611      	mov	r1, r2
 80043b6:	f7ff bf81 	b.w	80042bc <_malloc_r>
 80043ba:	b92a      	cbnz	r2, 80043c8 <_realloc_r+0x24>
 80043bc:	f7ff ff12 	bl	80041e4 <_free_r>
 80043c0:	4625      	mov	r5, r4
 80043c2:	4628      	mov	r0, r5
 80043c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043c8:	f000 f838 	bl	800443c <_malloc_usable_size_r>
 80043cc:	4284      	cmp	r4, r0
 80043ce:	4607      	mov	r7, r0
 80043d0:	d802      	bhi.n	80043d8 <_realloc_r+0x34>
 80043d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80043d6:	d812      	bhi.n	80043fe <_realloc_r+0x5a>
 80043d8:	4621      	mov	r1, r4
 80043da:	4640      	mov	r0, r8
 80043dc:	f7ff ff6e 	bl	80042bc <_malloc_r>
 80043e0:	4605      	mov	r5, r0
 80043e2:	2800      	cmp	r0, #0
 80043e4:	d0ed      	beq.n	80043c2 <_realloc_r+0x1e>
 80043e6:	42bc      	cmp	r4, r7
 80043e8:	4622      	mov	r2, r4
 80043ea:	4631      	mov	r1, r6
 80043ec:	bf28      	it	cs
 80043ee:	463a      	movcs	r2, r7
 80043f0:	f7ff fed0 	bl	8004194 <memcpy>
 80043f4:	4631      	mov	r1, r6
 80043f6:	4640      	mov	r0, r8
 80043f8:	f7ff fef4 	bl	80041e4 <_free_r>
 80043fc:	e7e1      	b.n	80043c2 <_realloc_r+0x1e>
 80043fe:	4635      	mov	r5, r6
 8004400:	e7df      	b.n	80043c2 <_realloc_r+0x1e>
	...

08004404 <_sbrk_r>:
 8004404:	b538      	push	{r3, r4, r5, lr}
 8004406:	4d06      	ldr	r5, [pc, #24]	; (8004420 <_sbrk_r+0x1c>)
 8004408:	2300      	movs	r3, #0
 800440a:	4604      	mov	r4, r0
 800440c:	4608      	mov	r0, r1
 800440e:	602b      	str	r3, [r5, #0]
 8004410:	f7fc fefe 	bl	8001210 <_sbrk>
 8004414:	1c43      	adds	r3, r0, #1
 8004416:	d102      	bne.n	800441e <_sbrk_r+0x1a>
 8004418:	682b      	ldr	r3, [r5, #0]
 800441a:	b103      	cbz	r3, 800441e <_sbrk_r+0x1a>
 800441c:	6023      	str	r3, [r4, #0]
 800441e:	bd38      	pop	{r3, r4, r5, pc}
 8004420:	200001d4 	.word	0x200001d4

08004424 <__malloc_lock>:
 8004424:	4801      	ldr	r0, [pc, #4]	; (800442c <__malloc_lock+0x8>)
 8004426:	f000 b811 	b.w	800444c <__retarget_lock_acquire_recursive>
 800442a:	bf00      	nop
 800442c:	200001d8 	.word	0x200001d8

08004430 <__malloc_unlock>:
 8004430:	4801      	ldr	r0, [pc, #4]	; (8004438 <__malloc_unlock+0x8>)
 8004432:	f000 b80c 	b.w	800444e <__retarget_lock_release_recursive>
 8004436:	bf00      	nop
 8004438:	200001d8 	.word	0x200001d8

0800443c <_malloc_usable_size_r>:
 800443c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004440:	1f18      	subs	r0, r3, #4
 8004442:	2b00      	cmp	r3, #0
 8004444:	bfbc      	itt	lt
 8004446:	580b      	ldrlt	r3, [r1, r0]
 8004448:	18c0      	addlt	r0, r0, r3
 800444a:	4770      	bx	lr

0800444c <__retarget_lock_acquire_recursive>:
 800444c:	4770      	bx	lr

0800444e <__retarget_lock_release_recursive>:
 800444e:	4770      	bx	lr

08004450 <_init>:
 8004450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004452:	bf00      	nop
 8004454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004456:	bc08      	pop	{r3}
 8004458:	469e      	mov	lr, r3
 800445a:	4770      	bx	lr

0800445c <_fini>:
 800445c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445e:	bf00      	nop
 8004460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004462:	bc08      	pop	{r3}
 8004464:	469e      	mov	lr, r3
 8004466:	4770      	bx	lr
