
SerialConsole.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ed0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  08004070  08004070  00014070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042cc  080042cc  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  080042cc  080042cc  000142cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042d4  080042d4  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042d4  080042d4  000142d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042d8  080042d8  000142d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080042dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  200000a8  08004384  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08004384  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2c5  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c27  00000000  00000000  0002d39d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  0002efc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  0002fc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165d1  00000000  00000000  000307d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d65e  00000000  00000000  00046da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d7fb  00000000  00000000  000543ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1bfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ab0  00000000  00000000  000e1c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a8 	.word	0x200000a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004058 	.word	0x08004058

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ac 	.word	0x200000ac
 80001dc:	08004058 	.word	0x08004058

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <uart_print_menu>:
/* USER CODE BEGIN 0 */
char uart_str[81] = {'\0'};
uint16_t uart_str_len = 1;

void uart_print_menu()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b098      	sub	sp, #96	; 0x60
 8000598:	af00      	add	r7, sp, #0
	char menu_str[] = "This is very nice menu, yes?\r\nChoose your destiny:\r\n\r\n\t1. Clock mode.\r\n\t2. Button mode.\r\n\0";
 800059a:	4a09      	ldr	r2, [pc, #36]	; (80005c0 <uart_print_menu+0x2c>)
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	4611      	mov	r1, r2
 80005a0:	225b      	movs	r2, #91	; 0x5b
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 ff50 	bl	8003448 <memcpy>
	HAL_UART_Transmit(&huart2, (uint8_t*) menu_str, sizeof(menu_str), HAL_MAX_DELAY);
 80005a8:	1d39      	adds	r1, r7, #4
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	225b      	movs	r2, #91	; 0x5b
 80005b0:	4804      	ldr	r0, [pc, #16]	; (80005c4 <uart_print_menu+0x30>)
 80005b2:	f002 fb08 	bl	8002bc6 <HAL_UART_Transmit>
}
 80005b6:	bf00      	nop
 80005b8:	3760      	adds	r7, #96	; 0x60
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	08004070 	.word	0x08004070
 80005c4:	2000010c 	.word	0x2000010c

080005c8 <uart_print_bad_choice>:

void uart_print_bad_choice()
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b096      	sub	sp, #88	; 0x58
 80005cc:	af00      	add	r7, sp, #0
	char menu_str[] = "Your choice went out for a long walk in the harbor and never came back\r\nTry again\r\n\0";
 80005ce:	4a09      	ldr	r2, [pc, #36]	; (80005f4 <uart_print_bad_choice+0x2c>)
 80005d0:	463b      	mov	r3, r7
 80005d2:	4611      	mov	r1, r2
 80005d4:	2255      	movs	r2, #85	; 0x55
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 ff36 	bl	8003448 <memcpy>
	HAL_UART_Transmit(&huart2, (uint8_t*) menu_str, sizeof(menu_str), HAL_MAX_DELAY);
 80005dc:	4639      	mov	r1, r7
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	2255      	movs	r2, #85	; 0x55
 80005e4:	4804      	ldr	r0, [pc, #16]	; (80005f8 <uart_print_bad_choice+0x30>)
 80005e6:	f002 faee 	bl	8002bc6 <HAL_UART_Transmit>
}
 80005ea:	bf00      	nop
 80005ec:	3758      	adds	r7, #88	; 0x58
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	080040cc 	.word	0x080040cc
 80005f8:	2000010c 	.word	0x2000010c

080005fc <uart_get_menu_choice>:

int uart_get_menu_choice()
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
	char str[1] = { '\0' };
 8000602:	2300      	movs	r3, #0
 8000604:	713b      	strb	r3, [r7, #4]
	uint16_t str_len = 1;
 8000606:	2301      	movs	r3, #1
 8000608:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Receive(&huart2, (uint8_t *) str, str_len, HAL_MAX_DELAY);
 800060a:	88fa      	ldrh	r2, [r7, #6]
 800060c:	1d39      	adds	r1, r7, #4
 800060e:	f04f 33ff 	mov.w	r3, #4294967295
 8000612:	4808      	ldr	r0, [pc, #32]	; (8000634 <uart_get_menu_choice+0x38>)
 8000614:	f002 fb69 	bl	8002cea <HAL_UART_Receive>
	int ret = -1;
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	603b      	str	r3, [r7, #0]
	sscanf(str, "%d", &ret);
 800061e:	463a      	mov	r2, r7
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	4905      	ldr	r1, [pc, #20]	; (8000638 <uart_get_menu_choice+0x3c>)
 8000624:	4618      	mov	r0, r3
 8000626:	f002 ff25 	bl	8003474 <siscanf>
	return ret;
 800062a:	683b      	ldr	r3, [r7, #0]
}
 800062c:	4618      	mov	r0, r3
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	2000010c 	.word	0x2000010c
 8000638:	08004124 	.word	0x08004124

0800063c <black_button_pressed>:

int black_button_pressed(){
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	return GPIO_PIN_RESET == HAL_GPIO_ReadPin(blackButton_GPIO_Port, blackButton_Pin);
 8000640:	2101      	movs	r1, #1
 8000642:	4805      	ldr	r0, [pc, #20]	; (8000658 <black_button_pressed+0x1c>)
 8000644:	f001 f94a 	bl	80018dc <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	bf0c      	ite	eq
 800064e:	2301      	moveq	r3, #1
 8000650:	2300      	movne	r3, #0
 8000652:	b2db      	uxtb	r3, r3
}
 8000654:	4618      	mov	r0, r3
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40020800 	.word	0x40020800

0800065c <button_mode>:

uint32_t unbounced = 0;
int unhandled_exti = 0;
uint32_t wait_untill = 0;
void button_mode(){
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
	uint16_t button_pressed_count = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	80fb      	strh	r3, [r7, #6]
	qs_put_big_num(button_pressed_count);
 8000666:	88fb      	ldrh	r3, [r7, #6]
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fc7b 	bl	8000f64 <qs_put_big_num>

	while (1) {
		if (unhandled_exti && wait_untill <= HAL_GetTick()) {
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <button_mode+0x68>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d015      	beq.n	80006a2 <button_mode+0x46>
 8000676:	f000 fe8f 	bl	8001398 <HAL_GetTick>
 800067a:	4602      	mov	r2, r0
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <button_mode+0x6c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	429a      	cmp	r2, r3
 8000682:	d30e      	bcc.n	80006a2 <button_mode+0x46>
			unhandled_exti = 0;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <button_mode+0x68>)
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
			if(black_button_pressed()){
 800068a:	f7ff ffd7 	bl	800063c <black_button_pressed>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d006      	beq.n	80006a2 <button_mode+0x46>
				button_pressed_count++;
 8000694:	88fb      	ldrh	r3, [r7, #6]
 8000696:	3301      	adds	r3, #1
 8000698:	80fb      	strh	r3, [r7, #6]
				qs_put_big_num(button_pressed_count);
 800069a:	88fb      	ldrh	r3, [r7, #6]
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fc61 	bl	8000f64 <qs_put_big_num>
			}
		}
		if(blueButtonPressed()){
 80006a2:	f000 f8eb 	bl	800087c <blueButtonPressed>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d006      	beq.n	80006ba <button_mode+0x5e>
			qs_put_big_num(unbounced);
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <button_mode+0x70>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 fc56 	bl	8000f64 <qs_put_big_num>
 80006b8:	e7d9      	b.n	800066e <button_mode+0x12>
		}else{
			qs_put_big_num(button_pressed_count);
 80006ba:	88fb      	ldrh	r3, [r7, #6]
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fc51 	bl	8000f64 <qs_put_big_num>
		if (unhandled_exti && wait_untill <= HAL_GetTick()) {
 80006c2:	e7d4      	b.n	800066e <button_mode+0x12>
 80006c4:	20000154 	.word	0x20000154
 80006c8:	20000158 	.word	0x20000158
 80006cc:	20000150 	.word	0x20000150

080006d0 <clock_advance>:

uint32_t clock_count[4] = {23, 59, 45, 0};
uint32_t clock_period[4] = {24, 60, 60, 2};


void clock_advance(uint32_t half_seconds){
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	clock_count[3] += half_seconds;
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <clock_advance+0xbc>)
 80006da:	68da      	ldr	r2, [r3, #12]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4413      	add	r3, r2
 80006e0:	4a2a      	ldr	r2, [pc, #168]	; (800078c <clock_advance+0xbc>)
 80006e2:	60d3      	str	r3, [r2, #12]

	clock_count[2] += clock_count[3] / clock_period[3];
 80006e4:	4b29      	ldr	r3, [pc, #164]	; (800078c <clock_advance+0xbc>)
 80006e6:	689a      	ldr	r2, [r3, #8]
 80006e8:	4b28      	ldr	r3, [pc, #160]	; (800078c <clock_advance+0xbc>)
 80006ea:	68d9      	ldr	r1, [r3, #12]
 80006ec:	4b28      	ldr	r3, [pc, #160]	; (8000790 <clock_advance+0xc0>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80006f4:	4413      	add	r3, r2
 80006f6:	4a25      	ldr	r2, [pc, #148]	; (800078c <clock_advance+0xbc>)
 80006f8:	6093      	str	r3, [r2, #8]
	clock_count[3] = clock_count[3] % clock_period[3];
 80006fa:	4b24      	ldr	r3, [pc, #144]	; (800078c <clock_advance+0xbc>)
 80006fc:	68db      	ldr	r3, [r3, #12]
 80006fe:	4a24      	ldr	r2, [pc, #144]	; (8000790 <clock_advance+0xc0>)
 8000700:	68d2      	ldr	r2, [r2, #12]
 8000702:	fbb3 f1f2 	udiv	r1, r3, r2
 8000706:	fb01 f202 	mul.w	r2, r1, r2
 800070a:	1a9b      	subs	r3, r3, r2
 800070c:	4a1f      	ldr	r2, [pc, #124]	; (800078c <clock_advance+0xbc>)
 800070e:	60d3      	str	r3, [r2, #12]

	clock_count[1] += clock_count[2] / clock_period[2];
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <clock_advance+0xbc>)
 8000712:	685a      	ldr	r2, [r3, #4]
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <clock_advance+0xbc>)
 8000716:	6899      	ldr	r1, [r3, #8]
 8000718:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <clock_advance+0xc0>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000720:	4413      	add	r3, r2
 8000722:	4a1a      	ldr	r2, [pc, #104]	; (800078c <clock_advance+0xbc>)
 8000724:	6053      	str	r3, [r2, #4]
	clock_count[2] = clock_count[2] % clock_period[2];
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <clock_advance+0xbc>)
 8000728:	689b      	ldr	r3, [r3, #8]
 800072a:	4a19      	ldr	r2, [pc, #100]	; (8000790 <clock_advance+0xc0>)
 800072c:	6892      	ldr	r2, [r2, #8]
 800072e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000732:	fb01 f202 	mul.w	r2, r1, r2
 8000736:	1a9b      	subs	r3, r3, r2
 8000738:	4a14      	ldr	r2, [pc, #80]	; (800078c <clock_advance+0xbc>)
 800073a:	6093      	str	r3, [r2, #8]

	clock_count[0] += clock_count[1] / clock_period[1];
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <clock_advance+0xbc>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <clock_advance+0xbc>)
 8000742:	6859      	ldr	r1, [r3, #4]
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <clock_advance+0xc0>)
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	fbb1 f3f3 	udiv	r3, r1, r3
 800074c:	4413      	add	r3, r2
 800074e:	4a0f      	ldr	r2, [pc, #60]	; (800078c <clock_advance+0xbc>)
 8000750:	6013      	str	r3, [r2, #0]
	clock_count[1] = clock_count[1] % clock_period[1];
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <clock_advance+0xbc>)
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <clock_advance+0xc0>)
 8000758:	6852      	ldr	r2, [r2, #4]
 800075a:	fbb3 f1f2 	udiv	r1, r3, r2
 800075e:	fb01 f202 	mul.w	r2, r1, r2
 8000762:	1a9b      	subs	r3, r3, r2
 8000764:	4a09      	ldr	r2, [pc, #36]	; (800078c <clock_advance+0xbc>)
 8000766:	6053      	str	r3, [r2, #4]

	clock_count[0] = clock_count[0] % clock_period[0];
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <clock_advance+0xbc>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a08      	ldr	r2, [pc, #32]	; (8000790 <clock_advance+0xc0>)
 800076e:	6812      	ldr	r2, [r2, #0]
 8000770:	fbb3 f1f2 	udiv	r1, r3, r2
 8000774:	fb01 f202 	mul.w	r2, r1, r2
 8000778:	1a9b      	subs	r3, r3, r2
 800077a:	4a04      	ldr	r2, [pc, #16]	; (800078c <clock_advance+0xbc>)
 800077c:	6013      	str	r3, [r2, #0]

}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	20000000 	.word	0x20000000
 8000790:	20000010 	.word	0x20000010

08000794 <clock_render_short>:

void clock_render_short(){
 8000794:	b5b0      	push	{r4, r5, r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af02      	add	r7, sp, #8
	qs_put_digits(clock_count[1]/10, clock_count[1]%10, clock_count[2]/10, clock_count[2]%10, clock_count[3]);
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <clock_render_short+0x6c>)
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	4a19      	ldr	r2, [pc, #100]	; (8000804 <clock_render_short+0x70>)
 80007a0:	fba2 2303 	umull	r2, r3, r2, r3
 80007a4:	08db      	lsrs	r3, r3, #3
 80007a6:	b2d8      	uxtb	r0, r3
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <clock_render_short+0x6c>)
 80007aa:	6859      	ldr	r1, [r3, #4]
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <clock_render_short+0x70>)
 80007ae:	fba3 2301 	umull	r2, r3, r3, r1
 80007b2:	08da      	lsrs	r2, r3, #3
 80007b4:	4613      	mov	r3, r2
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4413      	add	r3, r2
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	1aca      	subs	r2, r1, r3
 80007be:	b2d4      	uxtb	r4, r2
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <clock_render_short+0x6c>)
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	4a0f      	ldr	r2, [pc, #60]	; (8000804 <clock_render_short+0x70>)
 80007c6:	fba2 2303 	umull	r2, r3, r2, r3
 80007ca:	08db      	lsrs	r3, r3, #3
 80007cc:	b2dd      	uxtb	r5, r3
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <clock_render_short+0x6c>)
 80007d0:	6899      	ldr	r1, [r3, #8]
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <clock_render_short+0x70>)
 80007d4:	fba3 2301 	umull	r2, r3, r3, r1
 80007d8:	08da      	lsrs	r2, r3, #3
 80007da:	4613      	mov	r3, r2
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	4413      	add	r3, r2
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	1aca      	subs	r2, r1, r3
 80007e4:	b2d2      	uxtb	r2, r2
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <clock_render_short+0x6c>)
 80007e8:	68db      	ldr	r3, [r3, #12]
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	9300      	str	r3, [sp, #0]
 80007ee:	4613      	mov	r3, r2
 80007f0:	462a      	mov	r2, r5
 80007f2:	4621      	mov	r1, r4
 80007f4:	f000 fb88 	bl	8000f08 <qs_put_digits>
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bdb0      	pop	{r4, r5, r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000000 	.word	0x20000000
 8000804:	cccccccd 	.word	0xcccccccd

08000808 <clock_render_long>:

void clock_render_long(){
 8000808:	b5b0      	push	{r4, r5, r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af02      	add	r7, sp, #8
	qs_put_digits(clock_count[0]/10, clock_count[0]%10, clock_count[1]/10, clock_count[1]%10, clock_count[3]);
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <clock_render_long+0x6c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a19      	ldr	r2, [pc, #100]	; (8000878 <clock_render_long+0x70>)
 8000814:	fba2 2303 	umull	r2, r3, r2, r3
 8000818:	08db      	lsrs	r3, r3, #3
 800081a:	b2d8      	uxtb	r0, r3
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <clock_render_long+0x6c>)
 800081e:	6819      	ldr	r1, [r3, #0]
 8000820:	4b15      	ldr	r3, [pc, #84]	; (8000878 <clock_render_long+0x70>)
 8000822:	fba3 2301 	umull	r2, r3, r3, r1
 8000826:	08da      	lsrs	r2, r3, #3
 8000828:	4613      	mov	r3, r2
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	4413      	add	r3, r2
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	1aca      	subs	r2, r1, r3
 8000832:	b2d4      	uxtb	r4, r2
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <clock_render_long+0x6c>)
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	4a0f      	ldr	r2, [pc, #60]	; (8000878 <clock_render_long+0x70>)
 800083a:	fba2 2303 	umull	r2, r3, r2, r3
 800083e:	08db      	lsrs	r3, r3, #3
 8000840:	b2dd      	uxtb	r5, r3
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <clock_render_long+0x6c>)
 8000844:	6859      	ldr	r1, [r3, #4]
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <clock_render_long+0x70>)
 8000848:	fba3 2301 	umull	r2, r3, r3, r1
 800084c:	08da      	lsrs	r2, r3, #3
 800084e:	4613      	mov	r3, r2
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4413      	add	r3, r2
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	1aca      	subs	r2, r1, r3
 8000858:	b2d2      	uxtb	r2, r2
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <clock_render_long+0x6c>)
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	4613      	mov	r3, r2
 8000864:	462a      	mov	r2, r5
 8000866:	4621      	mov	r1, r4
 8000868:	f000 fb4e 	bl	8000f08 <qs_put_digits>
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	bdb0      	pop	{r4, r5, r7, pc}
 8000872:	bf00      	nop
 8000874:	20000000 	.word	0x20000000
 8000878:	cccccccd 	.word	0xcccccccd

0800087c <blueButtonPressed>:

int blueButtonPressed(){
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
	return 0 == (B1_GPIO_Port->IDR & B1_Pin);
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <blueButtonPressed+0x20>)
 8000882:	691b      	ldr	r3, [r3, #16]
 8000884:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000888:	2b00      	cmp	r3, #0
 800088a:	bf0c      	ite	eq
 800088c:	2301      	moveq	r3, #1
 800088e:	2300      	movne	r3, #0
 8000890:	b2db      	uxtb	r3, r3
}
 8000892:	4618      	mov	r0, r3
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	40020800 	.word	0x40020800

080008a0 <clock_mode>:

int unhandled_clock = 1;

void clock_mode(){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim1);
 80008a4:	480b      	ldr	r0, [pc, #44]	; (80008d4 <clock_mode+0x34>)
 80008a6:	f001 fd4b 	bl	8002340 <HAL_TIM_Base_Start_IT>
	while(1){
		if (unhandled_clock) {
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <clock_mode+0x38>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d0fb      	beq.n	80008aa <clock_mode+0xa>
			if(blueButtonPressed()){
 80008b2:	f7ff ffe3 	bl	800087c <blueButtonPressed>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d005      	beq.n	80008c8 <clock_mode+0x28>
				clock_render_long();
 80008bc:	f7ff ffa4 	bl	8000808 <clock_render_long>
				unhandled_clock = 0;
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <clock_mode+0x38>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	e7f0      	b.n	80008aa <clock_mode+0xa>
			}else{
				clock_render_short();
 80008c8:	f7ff ff64 	bl	8000794 <clock_render_short>
				unhandled_clock = 0;
 80008cc:	4b02      	ldr	r3, [pc, #8]	; (80008d8 <clock_mode+0x38>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
		if (unhandled_clock) {
 80008d2:	e7ea      	b.n	80008aa <clock_mode+0xa>
 80008d4:	200000c4 	.word	0x200000c4
 80008d8:	20000020 	.word	0x20000020

080008dc <HAL_GPIO_EXTI_Callback>:
		}
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	80fb      	strh	r3, [r7, #6]
	const uint32_t longest_bounce_MS = 16;
 80008e6:	2310      	movs	r3, #16
 80008e8:	60fb      	str	r3, [r7, #12]
	if(GPIO_Pin == blackButton_Pin){
 80008ea:	88fb      	ldrh	r3, [r7, #6]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d10e      	bne.n	800090e <HAL_GPIO_EXTI_Callback+0x32>
		unhandled_exti = 1;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <HAL_GPIO_EXTI_Callback+0x48>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	601a      	str	r2, [r3, #0]
		wait_untill = HAL_GetTick() + longest_bounce_MS;
 80008f6:	f000 fd4f 	bl	8001398 <HAL_GetTick>
 80008fa:	4602      	mov	r2, r0
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	4413      	add	r3, r2
 8000900:	4a09      	ldr	r2, [pc, #36]	; (8000928 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000902:	6013      	str	r3, [r2, #0]
		unbounced++;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <HAL_GPIO_EXTI_Callback+0x50>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	3301      	adds	r3, #1
 800090a:	4a08      	ldr	r2, [pc, #32]	; (800092c <HAL_GPIO_EXTI_Callback+0x50>)
 800090c:	6013      	str	r3, [r2, #0]
	}
	if(GPIO_Pin == B1_Pin){
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000914:	d102      	bne.n	800091c <HAL_GPIO_EXTI_Callback+0x40>
		unhandled_clock = 1;
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_GPIO_EXTI_Callback+0x54>)
 8000918:	2201      	movs	r2, #1
 800091a:	601a      	str	r2, [r3, #0]
	}
}
 800091c:	bf00      	nop
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000154 	.word	0x20000154
 8000928:	20000158 	.word	0x20000158
 800092c:	20000150 	.word	0x20000150
 8000930:	20000020 	.word	0x20000020

08000934 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	if(htim != &htim1)return;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4a07      	ldr	r2, [pc, #28]	; (800095c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d106      	bne.n	8000952 <HAL_TIM_PeriodElapsedCallback+0x1e>
	clock_advance(1);
 8000944:	2001      	movs	r0, #1
 8000946:	f7ff fec3 	bl	80006d0 <clock_advance>
	unhandled_clock = 1;
 800094a:	4b05      	ldr	r3, [pc, #20]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800094c:	2201      	movs	r2, #1
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	e000      	b.n	8000954 <HAL_TIM_PeriodElapsedCallback+0x20>
	if(htim != &htim1)return;
 8000952:	bf00      	nop
}
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200000c4 	.word	0x200000c4
 8000960:	20000020 	.word	0x20000020

08000964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096a:	f000 fcaf 	bl	80012cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096e:	f000 f825 	bl	80009bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000972:	f000 f90b 	bl	8000b8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000976:	f000 f8df 	bl	8000b38 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800097a:	f000 f88b 	bl	8000a94 <MX_TIM1_Init>
		  uint32_t dly = 69;
		  //qs_put_big_num(i); HAL_Delay(dly);
		  qs_put_digits(i, i, i, i, 0); HAL_Delay(dly);
		  qs_put_digits(i, i, i, i, 1); HAL_Delay(dly);
	  }//*/
	  qs_put_digits(18, 18, 18, 18, 1);
 800097e:	2301      	movs	r3, #1
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	2312      	movs	r3, #18
 8000984:	2212      	movs	r2, #18
 8000986:	2112      	movs	r1, #18
 8000988:	2012      	movs	r0, #18
 800098a:	f000 fabd 	bl	8000f08 <qs_put_digits>
	  uart_print_menu();
 800098e:	f7ff fe01 	bl	8000594 <uart_print_menu>
	  int menu_choice = uart_get_menu_choice();
 8000992:	f7ff fe33 	bl	80005fc <uart_get_menu_choice>
 8000996:	6078      	str	r0, [r7, #4]
	  {
		  switch (menu_choice)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d003      	beq.n	80009a6 <main+0x42>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	d003      	beq.n	80009ac <main+0x48>
 80009a4:	e005      	b.n	80009b2 <main+0x4e>
		  {
		  case 1: clock_mode(); break;
 80009a6:	f7ff ff7b 	bl	80008a0 <clock_mode>
 80009aa:	e005      	b.n	80009b8 <main+0x54>
		  case 2: button_mode(); break;
 80009ac:	f7ff fe56 	bl	800065c <button_mode>
 80009b0:	e002      	b.n	80009b8 <main+0x54>
		  default: uart_print_bad_choice(); break;
 80009b2:	f7ff fe09 	bl	80005c8 <uart_print_bad_choice>
 80009b6:	bf00      	nop
  {
 80009b8:	e7e1      	b.n	800097e <main+0x1a>
	...

080009bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b094      	sub	sp, #80	; 0x50
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	f107 0320 	add.w	r3, r7, #32
 80009c6:	2230      	movs	r2, #48	; 0x30
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f002 fd4a 	bl	8003464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	4b29      	ldr	r3, [pc, #164]	; (8000a8c <SystemClock_Config+0xd0>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	4a28      	ldr	r2, [pc, #160]	; (8000a8c <SystemClock_Config+0xd0>)
 80009ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ee:	6413      	str	r3, [r2, #64]	; 0x40
 80009f0:	4b26      	ldr	r3, [pc, #152]	; (8000a8c <SystemClock_Config+0xd0>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80009fc:	2300      	movs	r3, #0
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	4b23      	ldr	r3, [pc, #140]	; (8000a90 <SystemClock_Config+0xd4>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a08:	4a21      	ldr	r2, [pc, #132]	; (8000a90 <SystemClock_Config+0xd4>)
 8000a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <SystemClock_Config+0xd4>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a20:	2301      	movs	r3, #1
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a24:	2310      	movs	r3, #16
 8000a26:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a30:	2310      	movs	r3, #16
 8000a32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a34:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a3e:	2307      	movs	r3, #7
 8000a40:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a42:	f107 0320 	add.w	r3, r7, #32
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 ff92 	bl	8001970 <HAL_RCC_OscConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a52:	f000 f947 	bl	8000ce4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a56:	230f      	movs	r3, #15
 8000a58:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	2102      	movs	r1, #2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 f9f4 	bl	8001e60 <HAL_RCC_ClockConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a7e:	f000 f931 	bl	8000ce4 <Error_Handler>
  }
}
 8000a82:	bf00      	nop
 8000a84:	3750      	adds	r7, #80	; 0x50
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40007000 	.word	0x40007000

08000a94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <MX_TIM1_Init+0x9c>)
 8000ab2:	4a20      	ldr	r2, [pc, #128]	; (8000b34 <MX_TIM1_Init+0xa0>)
 8000ab4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15999;
 8000ab6:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <MX_TIM1_Init+0x9c>)
 8000ab8:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000abc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <MX_TIM1_Init+0x9c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2624;
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <MX_TIM1_Init+0x9c>)
 8000ac6:	f44f 6224 	mov.w	r2, #2624	; 0xa40
 8000aca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000acc:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <MX_TIM1_Init+0x9c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <MX_TIM1_Init+0x9c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <MX_TIM1_Init+0x9c>)
 8000ada:	2280      	movs	r2, #128	; 0x80
 8000adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ade:	4814      	ldr	r0, [pc, #80]	; (8000b30 <MX_TIM1_Init+0x9c>)
 8000ae0:	f001 fbde 	bl	80022a0 <HAL_TIM_Base_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000aea:	f000 f8fb 	bl	8000ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000af4:	f107 0308 	add.w	r3, r7, #8
 8000af8:	4619      	mov	r1, r3
 8000afa:	480d      	ldr	r0, [pc, #52]	; (8000b30 <MX_TIM1_Init+0x9c>)
 8000afc:	f001 fd8a 	bl	8002614 <HAL_TIM_ConfigClockSource>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000b06:	f000 f8ed 	bl	8000ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b12:	463b      	mov	r3, r7
 8000b14:	4619      	mov	r1, r3
 8000b16:	4806      	ldr	r0, [pc, #24]	; (8000b30 <MX_TIM1_Init+0x9c>)
 8000b18:	f001 ff86 	bl	8002a28 <HAL_TIMEx_MasterConfigSynchronization>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000b22:	f000 f8df 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200000c4 	.word	0x200000c4
 8000b34:	40010000 	.word	0x40010000

08000b38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <MX_USART2_UART_Init+0x50>)
 8000b40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b5e:	220c      	movs	r2, #12
 8000b60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b70:	f001 ffdc 	bl	8002b2c <HAL_UART_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b7a:	f000 f8b3 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	2000010c 	.word	0x2000010c
 8000b88:	40004400 	.word	0x40004400

08000b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
 8000ba0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	4b4c      	ldr	r3, [pc, #304]	; (8000cd8 <MX_GPIO_Init+0x14c>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a4b      	ldr	r2, [pc, #300]	; (8000cd8 <MX_GPIO_Init+0x14c>)
 8000bac:	f043 0304 	orr.w	r3, r3, #4
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b49      	ldr	r3, [pc, #292]	; (8000cd8 <MX_GPIO_Init+0x14c>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0304 	and.w	r3, r3, #4
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b45      	ldr	r3, [pc, #276]	; (8000cd8 <MX_GPIO_Init+0x14c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a44      	ldr	r2, [pc, #272]	; (8000cd8 <MX_GPIO_Init+0x14c>)
 8000bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b42      	ldr	r3, [pc, #264]	; (8000cd8 <MX_GPIO_Init+0x14c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	4b3e      	ldr	r3, [pc, #248]	; (8000cd8 <MX_GPIO_Init+0x14c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a3d      	ldr	r2, [pc, #244]	; (8000cd8 <MX_GPIO_Init+0x14c>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b3b      	ldr	r3, [pc, #236]	; (8000cd8 <MX_GPIO_Init+0x14c>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b37      	ldr	r3, [pc, #220]	; (8000cd8 <MX_GPIO_Init+0x14c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a36      	ldr	r2, [pc, #216]	; (8000cd8 <MX_GPIO_Init+0x14c>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <MX_GPIO_Init+0x14c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SEG_CLK_Pin|SEG_DIO_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	210c      	movs	r1, #12
 8000c16:	4831      	ldr	r0, [pc, #196]	; (8000cdc <MX_GPIO_Init+0x150>)
 8000c18:	f000 fe78 	bl	800190c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2120      	movs	r1, #32
 8000c20:	482f      	ldr	r0, [pc, #188]	; (8000ce0 <MX_GPIO_Init+0x154>)
 8000c22:	f000 fe73 	bl	800190c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c2c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4827      	ldr	r0, [pc, #156]	; (8000cdc <MX_GPIO_Init+0x150>)
 8000c3e:	f000 fcc9 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : blackButton_Pin */
  GPIO_InitStruct.Pin = blackButton_Pin;
 8000c42:	2301      	movs	r3, #1
 8000c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c46:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(blackButton_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	4821      	ldr	r0, [pc, #132]	; (8000cdc <MX_GPIO_Init+0x150>)
 8000c58:	f000 fcbc 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_CLK_Pin */
  GPIO_InitStruct.Pin = SEG_CLK_Pin;
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SEG_CLK_GPIO_Port, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	481a      	ldr	r0, [pc, #104]	; (8000cdc <MX_GPIO_Init+0x150>)
 8000c74:	f000 fcae 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_DIO_Pin */
  GPIO_InitStruct.Pin = SEG_DIO_Pin;
 8000c78:	2308      	movs	r3, #8
 8000c7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c7c:	2311      	movs	r3, #17
 8000c7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SEG_DIO_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4813      	ldr	r0, [pc, #76]	; (8000cdc <MX_GPIO_Init+0x150>)
 8000c90:	f000 fca0 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c94:	2320      	movs	r3, #32
 8000c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <MX_GPIO_Init+0x154>)
 8000cac:	f000 fc92 	bl	80015d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2006      	movs	r0, #6
 8000cb6:	f000 fc56 	bl	8001566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000cba:	2006      	movs	r0, #6
 8000cbc:	f000 fc6f 	bl	800159e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2028      	movs	r0, #40	; 0x28
 8000cc6:	f000 fc4e 	bl	8001566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cca:	2028      	movs	r0, #40	; 0x28
 8000ccc:	f000 fc67 	bl	800159e <HAL_NVIC_EnableIRQ>

}
 8000cd0:	bf00      	nop
 8000cd2:	3728      	adds	r7, #40	; 0x28
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020800 	.word	0x40020800
 8000ce0:	40020000 	.word	0x40020000

08000ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce8:	b672      	cpsid	i
}
 8000cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cec:	e7fe      	b.n	8000cec <Error_Handler+0x8>

08000cee <TM1637_Delay>:
 *
 */
#define DELAY_NOP_COUNTER 250

void TM1637_Delay()
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
	for (int i = 0; i < DELAY_NOP_COUNTER; i++)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	e003      	b.n	8000d02 <TM1637_Delay+0x14>
	{
		__NOP();
 8000cfa:	bf00      	nop
	for (int i = 0; i < DELAY_NOP_COUNTER; i++)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2bf9      	cmp	r3, #249	; 0xf9
 8000d06:	ddf8      	ble.n	8000cfa <TM1637_Delay+0xc>
	}
}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <TM1637_Strt>:


void TM1637_Strt()
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG_DIO_GPIO_Port, SEG_DIO_Pin, GPIO_PIN_SET);	TM1637_Delay();
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2108      	movs	r1, #8
 8000d20:	480a      	ldr	r0, [pc, #40]	; (8000d4c <TM1637_Strt+0x34>)
 8000d22:	f000 fdf3 	bl	800190c <HAL_GPIO_WritePin>
 8000d26:	f7ff ffe2 	bl	8000cee <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_SET);	TM1637_Delay();
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2104      	movs	r1, #4
 8000d2e:	4807      	ldr	r0, [pc, #28]	; (8000d4c <TM1637_Strt+0x34>)
 8000d30:	f000 fdec 	bl	800190c <HAL_GPIO_WritePin>
 8000d34:	f7ff ffdb 	bl	8000cee <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_DIO_GPIO_Port, SEG_DIO_Pin, GPIO_PIN_RESET);	TM1637_Delay();
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2108      	movs	r1, #8
 8000d3c:	4803      	ldr	r0, [pc, #12]	; (8000d4c <TM1637_Strt+0x34>)
 8000d3e:	f000 fde5 	bl	800190c <HAL_GPIO_WritePin>
 8000d42:	f7ff ffd4 	bl	8000cee <TM1637_Delay>
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40020800 	.word	0x40020800

08000d50 <TM1637_Stop>:

void TM1637_Stop()
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_RESET);	TM1637_Delay();
 8000d54:	2200      	movs	r2, #0
 8000d56:	2104      	movs	r1, #4
 8000d58:	4814      	ldr	r0, [pc, #80]	; (8000dac <TM1637_Stop+0x5c>)
 8000d5a:	f000 fdd7 	bl	800190c <HAL_GPIO_WritePin>
 8000d5e:	f7ff ffc6 	bl	8000cee <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_SET);	TM1637_Delay();
 8000d62:	2201      	movs	r2, #1
 8000d64:	2104      	movs	r1, #4
 8000d66:	4811      	ldr	r0, [pc, #68]	; (8000dac <TM1637_Stop+0x5c>)
 8000d68:	f000 fdd0 	bl	800190c <HAL_GPIO_WritePin>
 8000d6c:	f7ff ffbf 	bl	8000cee <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_RESET);	TM1637_Delay();
 8000d70:	2200      	movs	r2, #0
 8000d72:	2104      	movs	r1, #4
 8000d74:	480d      	ldr	r0, [pc, #52]	; (8000dac <TM1637_Stop+0x5c>)
 8000d76:	f000 fdc9 	bl	800190c <HAL_GPIO_WritePin>
 8000d7a:	f7ff ffb8 	bl	8000cee <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_DIO_GPIO_Port, SEG_DIO_Pin, GPIO_PIN_RESET);	TM1637_Delay();
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2108      	movs	r1, #8
 8000d82:	480a      	ldr	r0, [pc, #40]	; (8000dac <TM1637_Stop+0x5c>)
 8000d84:	f000 fdc2 	bl	800190c <HAL_GPIO_WritePin>
 8000d88:	f7ff ffb1 	bl	8000cee <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_SET);	TM1637_Delay();
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2104      	movs	r1, #4
 8000d90:	4806      	ldr	r0, [pc, #24]	; (8000dac <TM1637_Stop+0x5c>)
 8000d92:	f000 fdbb 	bl	800190c <HAL_GPIO_WritePin>
 8000d96:	f7ff ffaa 	bl	8000cee <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_DIO_GPIO_Port, SEG_DIO_Pin, GPIO_PIN_SET);	TM1637_Delay();
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	2108      	movs	r1, #8
 8000d9e:	4803      	ldr	r0, [pc, #12]	; (8000dac <TM1637_Stop+0x5c>)
 8000da0:	f000 fdb4 	bl	800190c <HAL_GPIO_WritePin>
 8000da4:	f7ff ffa3 	bl	8000cee <TM1637_Delay>
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40020800 	.word	0x40020800

08000db0 <TM1637_WriteByte>:

void TM1637_WriteByte(uint8_t byte)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t c = 0; c < 8; c++) {
 8000dba:	2300      	movs	r3, #0
 8000dbc:	73fb      	strb	r3, [r7, #15]
 8000dbe:	e023      	b.n	8000e08 <TM1637_WriteByte+0x58>
		HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2104      	movs	r1, #4
 8000dc4:	4824      	ldr	r0, [pc, #144]	; (8000e58 <TM1637_WriteByte+0xa8>)
 8000dc6:	f000 fda1 	bl	800190c <HAL_GPIO_WritePin>
		if ( (byte & 0x01) == 0 )
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d105      	bne.n	8000de0 <TM1637_WriteByte+0x30>
		{
			HAL_GPIO_WritePin(SEG_DIO_GPIO_Port, SEG_DIO_Pin, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2108      	movs	r1, #8
 8000dd8:	481f      	ldr	r0, [pc, #124]	; (8000e58 <TM1637_WriteByte+0xa8>)
 8000dda:	f000 fd97 	bl	800190c <HAL_GPIO_WritePin>
 8000dde:	e004      	b.n	8000dea <TM1637_WriteByte+0x3a>
		}
		else
		{
			HAL_GPIO_WritePin(SEG_DIO_GPIO_Port, SEG_DIO_Pin, GPIO_PIN_SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	2108      	movs	r1, #8
 8000de4:	481c      	ldr	r0, [pc, #112]	; (8000e58 <TM1637_WriteByte+0xa8>)
 8000de6:	f000 fd91 	bl	800190c <HAL_GPIO_WritePin>
		}
		byte = byte >> 1;
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	085b      	lsrs	r3, r3, #1
 8000dee:	71fb      	strb	r3, [r7, #7]
		TM1637_Delay();
 8000df0:	f7ff ff7d 	bl	8000cee <TM1637_Delay>
		HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	2104      	movs	r1, #4
 8000df8:	4817      	ldr	r0, [pc, #92]	; (8000e58 <TM1637_WriteByte+0xa8>)
 8000dfa:	f000 fd87 	bl	800190c <HAL_GPIO_WritePin>
		TM1637_Delay();
 8000dfe:	f7ff ff76 	bl	8000cee <TM1637_Delay>
	for (uint8_t c = 0; c < 8; c++) {
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	3301      	adds	r3, #1
 8000e06:	73fb      	strb	r3, [r7, #15]
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	2b07      	cmp	r3, #7
 8000e0c:	d9d8      	bls.n	8000dc0 <TM1637_WriteByte+0x10>
	}

	HAL_GPIO_WritePin(SEG_DIO_GPIO_Port, SEG_DIO_Pin, GPIO_PIN_SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2108      	movs	r1, #8
 8000e12:	4811      	ldr	r0, [pc, #68]	; (8000e58 <TM1637_WriteByte+0xa8>)
 8000e14:	f000 fd7a 	bl	800190c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2104      	movs	r1, #4
 8000e1c:	480e      	ldr	r0, [pc, #56]	; (8000e58 <TM1637_WriteByte+0xa8>)
 8000e1e:	f000 fd75 	bl	800190c <HAL_GPIO_WritePin>
	TM1637_Delay();
 8000e22:	f7ff ff64 	bl	8000cee <TM1637_Delay>
	while( HAL_GPIO_ReadPin(SEG_DIO_GPIO_Port, SEG_DIO_Pin) == GPIO_PIN_SET )
 8000e26:	bf00      	nop
 8000e28:	2108      	movs	r1, #8
 8000e2a:	480b      	ldr	r0, [pc, #44]	; (8000e58 <TM1637_WriteByte+0xa8>)
 8000e2c:	f000 fd56 	bl	80018dc <HAL_GPIO_ReadPin>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d0f8      	beq.n	8000e28 <TM1637_WriteByte+0x78>
	{
		// Wait here until it goes low
	}
	HAL_GPIO_WritePin(SEG_DIO_GPIO_Port, SEG_DIO_Pin, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2108      	movs	r1, #8
 8000e3a:	4807      	ldr	r0, [pc, #28]	; (8000e58 <TM1637_WriteByte+0xa8>)
 8000e3c:	f000 fd66 	bl	800190c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_SET);
 8000e40:	2201      	movs	r2, #1
 8000e42:	2104      	movs	r1, #4
 8000e44:	4804      	ldr	r0, [pc, #16]	; (8000e58 <TM1637_WriteByte+0xa8>)
 8000e46:	f000 fd61 	bl	800190c <HAL_GPIO_WritePin>
	TM1637_Delay();
 8000e4a:	f7ff ff50 	bl	8000cee <TM1637_Delay>
}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40020800 	.word	0x40020800

08000e5c <TM1637_WriteCmnd>:


void TM1637_WriteCmnd(uint8_t cmd)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
	TM1637_Strt();
 8000e66:	f7ff ff57 	bl	8000d18 <TM1637_Strt>
	TM1637_WriteByte(cmd);
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff9f 	bl	8000db0 <TM1637_WriteByte>
	TM1637_Stop();
 8000e72:	f7ff ff6d 	bl	8000d50 <TM1637_Stop>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <TM1637_WriteData>:

void TM1637_WriteData(uint8_t addr, uint8_t data)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4603      	mov	r3, r0
 8000e86:	460a      	mov	r2, r1
 8000e88:	71fb      	strb	r3, [r7, #7]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	71bb      	strb	r3, [r7, #6]
	TM1637_Strt();
 8000e8e:	f7ff ff43 	bl	8000d18 <TM1637_Strt>
	TM1637_WriteByte(addr);
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff8b 	bl	8000db0 <TM1637_WriteByte>
	TM1637_WriteByte(data);
 8000e9a:	79bb      	ldrb	r3, [r7, #6]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff87 	bl	8000db0 <TM1637_WriteByte>
	TM1637_Stop();
 8000ea2:	f7ff ff55 	bl	8000d50 <TM1637_Stop>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <qs_put_bitmasks>:

void qs_put_bitmasks(uint8_t bm0, uint8_t bm1, uint8_t bm2, uint8_t bm3)
{
 8000eae:	b590      	push	{r4, r7, lr}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4604      	mov	r4, r0
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	4611      	mov	r1, r2
 8000eba:	461a      	mov	r2, r3
 8000ebc:	4623      	mov	r3, r4
 8000ebe:	71fb      	strb	r3, [r7, #7]
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	71bb      	strb	r3, [r7, #6]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	717b      	strb	r3, [r7, #5]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	713b      	strb	r3, [r7, #4]
	TM1637_WriteCmnd(0x44);
 8000ecc:	2044      	movs	r0, #68	; 0x44
 8000ece:	f7ff ffc5 	bl	8000e5c <TM1637_WriteCmnd>
	TM1637_WriteData(0xC0, bm0);
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	20c0      	movs	r0, #192	; 0xc0
 8000ed8:	f7ff ffd1 	bl	8000e7e <TM1637_WriteData>
	TM1637_WriteData(0xC1, bm1);
 8000edc:	79bb      	ldrb	r3, [r7, #6]
 8000ede:	4619      	mov	r1, r3
 8000ee0:	20c1      	movs	r0, #193	; 0xc1
 8000ee2:	f7ff ffcc 	bl	8000e7e <TM1637_WriteData>
	TM1637_WriteData(0xC2, bm2);
 8000ee6:	797b      	ldrb	r3, [r7, #5]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	20c2      	movs	r0, #194	; 0xc2
 8000eec:	f7ff ffc7 	bl	8000e7e <TM1637_WriteData>
	TM1637_WriteData(0xC3, bm3);
 8000ef0:	793b      	ldrb	r3, [r7, #4]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	20c3      	movs	r0, #195	; 0xc3
 8000ef6:	f7ff ffc2 	bl	8000e7e <TM1637_WriteData>
	TM1637_WriteCmnd(0x8A);
 8000efa:	208a      	movs	r0, #138	; 0x8a
 8000efc:	f7ff ffae 	bl	8000e5c <TM1637_WriteCmnd>
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd90      	pop	{r4, r7, pc}

08000f08 <qs_put_digits>:
	}
}


void qs_put_digits(uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t colon)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4604      	mov	r4, r0
 8000f10:	4608      	mov	r0, r1
 8000f12:	4611      	mov	r1, r2
 8000f14:	461a      	mov	r2, r3
 8000f16:	4623      	mov	r3, r4
 8000f18:	71fb      	strb	r3, [r7, #7]
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71bb      	strb	r3, [r7, #6]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	717b      	strb	r3, [r7, #5]
 8000f22:	4613      	mov	r3, r2
 8000f24:	713b      	strb	r3, [r7, #4]
	qs_put_bitmasks(seg_array[d0],
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <qs_put_digits+0x58>)
 8000f2a:	5cd0      	ldrb	r0, [r2, r3]
					seg_array[d1] | (colon ? 0x80 : 0x00),
 8000f2c:	79bb      	ldrb	r3, [r7, #6]
 8000f2e:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <qs_put_digits+0x58>)
 8000f30:	5cd3      	ldrb	r3, [r2, r3]
 8000f32:	b25b      	sxtb	r3, r3
 8000f34:	7e3a      	ldrb	r2, [r7, #24]
 8000f36:	2a00      	cmp	r2, #0
 8000f38:	d002      	beq.n	8000f40 <qs_put_digits+0x38>
 8000f3a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8000f3e:	e000      	b.n	8000f42 <qs_put_digits+0x3a>
 8000f40:	2200      	movs	r2, #0
 8000f42:	4313      	orrs	r3, r2
 8000f44:	b25b      	sxtb	r3, r3
	qs_put_bitmasks(seg_array[d0],
 8000f46:	b2d9      	uxtb	r1, r3
 8000f48:	797b      	ldrb	r3, [r7, #5]
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <qs_put_digits+0x58>)
 8000f4c:	5cd2      	ldrb	r2, [r2, r3]
 8000f4e:	793b      	ldrb	r3, [r7, #4]
 8000f50:	4c03      	ldr	r4, [pc, #12]	; (8000f60 <qs_put_digits+0x58>)
 8000f52:	5ce3      	ldrb	r3, [r4, r3]
 8000f54:	f7ff ffab 	bl	8000eae <qs_put_bitmasks>
					seg_array[d2],
					seg_array[d3]);
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd90      	pop	{r4, r7, pc}
 8000f60:	20000024 	.word	0x20000024

08000f64 <qs_put_big_num>:



void qs_put_big_num(uint16_t big_num)
{
 8000f64:	b590      	push	{r4, r7, lr}
 8000f66:	b087      	sub	sp, #28
 8000f68:	af02      	add	r7, sp, #8
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	80fb      	strh	r3, [r7, #6]
	uint8_t ones = (big_num /    1) % 10;
 8000f6e:	88fa      	ldrh	r2, [r7, #6]
 8000f70:	4b2c      	ldr	r3, [pc, #176]	; (8001024 <qs_put_big_num+0xc0>)
 8000f72:	fba3 1302 	umull	r1, r3, r3, r2
 8000f76:	08d9      	lsrs	r1, r3, #3
 8000f78:	460b      	mov	r3, r1
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	733b      	strb	r3, [r7, #12]
	uint8_t tens = (big_num /   10) % 10;
 8000f86:	88fb      	ldrh	r3, [r7, #6]
 8000f88:	4a26      	ldr	r2, [pc, #152]	; (8001024 <qs_put_big_num+0xc0>)
 8000f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8e:	08db      	lsrs	r3, r3, #3
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	4b24      	ldr	r3, [pc, #144]	; (8001024 <qs_put_big_num+0xc0>)
 8000f94:	fba3 1302 	umull	r1, r3, r3, r2
 8000f98:	08d9      	lsrs	r1, r3, #3
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	73fb      	strb	r3, [r7, #15]
	uint8_t huns = (big_num /  100) % 10;
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	4a1f      	ldr	r2, [pc, #124]	; (8001028 <qs_put_big_num+0xc4>)
 8000fac:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb0:	095b      	lsrs	r3, r3, #5
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <qs_put_big_num+0xc0>)
 8000fb6:	fba3 1302 	umull	r1, r3, r3, r2
 8000fba:	08d9      	lsrs	r1, r3, #3
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	73bb      	strb	r3, [r7, #14]
	uint8_t thus = (big_num / 1000) % 10;
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	4a17      	ldr	r2, [pc, #92]	; (800102c <qs_put_big_num+0xc8>)
 8000fce:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd2:	099b      	lsrs	r3, r3, #6
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <qs_put_big_num+0xc0>)
 8000fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8000fdc:	08d9      	lsrs	r1, r3, #3
 8000fde:	460b      	mov	r3, r1
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	737b      	strb	r3, [r7, #13]

	if (thus == 0)
 8000fec:	7b7b      	ldrb	r3, [r7, #13]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10b      	bne.n	800100a <qs_put_big_num+0xa6>
	{
		thus = QS_BLANK;
 8000ff2:	2310      	movs	r3, #16
 8000ff4:	737b      	strb	r3, [r7, #13]
		if (huns == 0)
 8000ff6:	7bbb      	ldrb	r3, [r7, #14]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d106      	bne.n	800100a <qs_put_big_num+0xa6>
		{
			huns = QS_BLANK;
 8000ffc:	2310      	movs	r3, #16
 8000ffe:	73bb      	strb	r3, [r7, #14]
			if (tens == 0)
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <qs_put_big_num+0xa6>
			{
				tens = QS_BLANK;
 8001006:	2310      	movs	r3, #16
 8001008:	73fb      	strb	r3, [r7, #15]
			}
		}
	}
	qs_put_digits(thus, huns, tens, ones, 0);
 800100a:	7b3b      	ldrb	r3, [r7, #12]
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	7bb9      	ldrb	r1, [r7, #14]
 8001010:	7b78      	ldrb	r0, [r7, #13]
 8001012:	2400      	movs	r4, #0
 8001014:	9400      	str	r4, [sp, #0]
 8001016:	f7ff ff77 	bl	8000f08 <qs_put_digits>
}
 800101a:	bf00      	nop
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	bd90      	pop	{r4, r7, pc}
 8001022:	bf00      	nop
 8001024:	cccccccd 	.word	0xcccccccd
 8001028:	51eb851f 	.word	0x51eb851f
 800102c:	10624dd3 	.word	0x10624dd3

08001030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <HAL_MspInit+0x4c>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	4a0f      	ldr	r2, [pc, #60]	; (800107c <HAL_MspInit+0x4c>)
 8001040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001044:	6453      	str	r3, [r2, #68]	; 0x44
 8001046:	4b0d      	ldr	r3, [pc, #52]	; (800107c <HAL_MspInit+0x4c>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <HAL_MspInit+0x4c>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	4a08      	ldr	r2, [pc, #32]	; (800107c <HAL_MspInit+0x4c>)
 800105c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001060:	6413      	str	r3, [r2, #64]	; 0x40
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_MspInit+0x4c>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800106e:	2007      	movs	r0, #7
 8001070:	f000 fa6e 	bl	8001550 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40023800 	.word	0x40023800

08001080 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <HAL_TIM_Base_MspInit+0x48>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d115      	bne.n	80010be <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <HAL_TIM_Base_MspInit+0x4c>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <HAL_TIM_Base_MspInit+0x4c>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6453      	str	r3, [r2, #68]	; 0x44
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_TIM_Base_MspInit+0x4c>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	2019      	movs	r0, #25
 80010b4:	f000 fa57 	bl	8001566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80010b8:	2019      	movs	r0, #25
 80010ba:	f000 fa70 	bl	800159e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40010000 	.word	0x40010000
 80010cc:	40023800 	.word	0x40023800

080010d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a19      	ldr	r2, [pc, #100]	; (8001154 <HAL_UART_MspInit+0x84>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d12b      	bne.n	800114a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	4b18      	ldr	r3, [pc, #96]	; (8001158 <HAL_UART_MspInit+0x88>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	4a17      	ldr	r2, [pc, #92]	; (8001158 <HAL_UART_MspInit+0x88>)
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	6413      	str	r3, [r2, #64]	; 0x40
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <HAL_UART_MspInit+0x88>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <HAL_UART_MspInit+0x88>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a10      	ldr	r2, [pc, #64]	; (8001158 <HAL_UART_MspInit+0x88>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <HAL_UART_MspInit+0x88>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800112a:	230c      	movs	r3, #12
 800112c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800113a:	2307      	movs	r3, #7
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <HAL_UART_MspInit+0x8c>)
 8001146:	f000 fa45 	bl	80015d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800114a:	bf00      	nop
 800114c:	3728      	adds	r7, #40	; 0x28
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40004400 	.word	0x40004400
 8001158:	40023800 	.word	0x40023800
 800115c:	40020000 	.word	0x40020000

08001160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001164:	e7fe      	b.n	8001164 <NMI_Handler+0x4>

08001166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116a:	e7fe      	b.n	800116a <HardFault_Handler+0x4>

0800116c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <MemManage_Handler+0x4>

08001172 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001176:	e7fe      	b.n	8001176 <BusFault_Handler+0x4>

08001178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800117c:	e7fe      	b.n	800117c <UsageFault_Handler+0x4>

0800117e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ac:	f000 f8e0 	bl	8001370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(blackButton_Pin);
 80011b8:	2001      	movs	r0, #1
 80011ba:	f000 fbc1 	bl	8001940 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011c8:	4802      	ldr	r0, [pc, #8]	; (80011d4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80011ca:	f001 f91b 	bl	8002404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200000c4 	.word	0x200000c4

080011d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80011dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011e0:	f000 fbae 	bl	8001940 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f0:	4a14      	ldr	r2, [pc, #80]	; (8001244 <_sbrk+0x5c>)
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <_sbrk+0x60>)
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <_sbrk+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <_sbrk+0x64>)
 8001206:	4a12      	ldr	r2, [pc, #72]	; (8001250 <_sbrk+0x68>)
 8001208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	429a      	cmp	r2, r3
 8001216:	d207      	bcs.n	8001228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001218:	f002 f8ec 	bl	80033f4 <__errno>
 800121c:	4603      	mov	r3, r0
 800121e:	220c      	movs	r2, #12
 8001220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	e009      	b.n	800123c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <_sbrk+0x64>)
 8001238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800123a:	68fb      	ldr	r3, [r7, #12]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20018000 	.word	0x20018000
 8001248:	00000400 	.word	0x00000400
 800124c:	2000015c 	.word	0x2000015c
 8001250:	20000178 	.word	0x20000178

08001254 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <SystemInit+0x20>)
 800125a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800125e:	4a05      	ldr	r2, [pc, #20]	; (8001274 <SystemInit+0x20>)
 8001260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800127c:	480d      	ldr	r0, [pc, #52]	; (80012b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800127e:	490e      	ldr	r1, [pc, #56]	; (80012b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001280:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001284:	e002      	b.n	800128c <LoopCopyDataInit>

08001286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128a:	3304      	adds	r3, #4

0800128c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800128c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001290:	d3f9      	bcc.n	8001286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001292:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001294:	4c0b      	ldr	r4, [pc, #44]	; (80012c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001298:	e001      	b.n	800129e <LoopFillZerobss>

0800129a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800129c:	3204      	adds	r2, #4

0800129e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a0:	d3fb      	bcc.n	800129a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012a2:	f7ff ffd7 	bl	8001254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012a6:	f002 f8ab 	bl	8003400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012aa:	f7ff fb5b 	bl	8000964 <main>
  bx  lr    
 80012ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b8:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80012bc:	080042dc 	.word	0x080042dc
  ldr r2, =_sbss
 80012c0:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80012c4:	20000174 	.word	0x20000174

080012c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c8:	e7fe      	b.n	80012c8 <ADC_IRQHandler>
	...

080012cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <HAL_Init+0x40>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0d      	ldr	r2, [pc, #52]	; (800130c <HAL_Init+0x40>)
 80012d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_Init+0x40>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0a      	ldr	r2, [pc, #40]	; (800130c <HAL_Init+0x40>)
 80012e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_Init+0x40>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a07      	ldr	r2, [pc, #28]	; (800130c <HAL_Init+0x40>)
 80012ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f4:	2003      	movs	r0, #3
 80012f6:	f000 f92b 	bl	8001550 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fa:	2000      	movs	r0, #0
 80012fc:	f000 f808 	bl	8001310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001300:	f7ff fe96 	bl	8001030 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023c00 	.word	0x40023c00

08001310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_InitTick+0x54>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_InitTick+0x58>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	fbb3 f3f1 	udiv	r3, r3, r1
 800132a:	fbb2 f3f3 	udiv	r3, r2, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f000 f943 	bl	80015ba <HAL_SYSTICK_Config>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e00e      	b.n	800135c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b0f      	cmp	r3, #15
 8001342:	d80a      	bhi.n	800135a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001344:	2200      	movs	r2, #0
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f000 f90b 	bl	8001566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001350:	4a06      	ldr	r2, [pc, #24]	; (800136c <HAL_InitTick+0x5c>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	e000      	b.n	800135c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
}
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000038 	.word	0x20000038
 8001368:	20000040 	.word	0x20000040
 800136c:	2000003c 	.word	0x2000003c

08001370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_IncTick+0x20>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_IncTick+0x24>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4413      	add	r3, r2
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <HAL_IncTick+0x24>)
 8001382:	6013      	str	r3, [r2, #0]
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000040 	.word	0x20000040
 8001394:	20000160 	.word	0x20000160

08001398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return uwTick;
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <HAL_GetTick+0x14>)
 800139e:	681b      	ldr	r3, [r3, #0]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000160 	.word	0x20000160

080013b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <__NVIC_SetPriorityGrouping+0x44>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013cc:	4013      	ands	r3, r2
 80013ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e2:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <__NVIC_SetPriorityGrouping+0x44>)
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	60d3      	str	r3, [r2, #12]
}
 80013e8:	bf00      	nop
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <__NVIC_GetPriorityGrouping+0x18>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	f003 0307 	and.w	r3, r3, #7
}
 8001406:	4618      	mov	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	2b00      	cmp	r3, #0
 8001424:	db0b      	blt.n	800143e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	f003 021f 	and.w	r2, r3, #31
 800142c:	4907      	ldr	r1, [pc, #28]	; (800144c <__NVIC_EnableIRQ+0x38>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	095b      	lsrs	r3, r3, #5
 8001434:	2001      	movs	r0, #1
 8001436:	fa00 f202 	lsl.w	r2, r0, r2
 800143a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000e100 	.word	0xe000e100

08001450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	6039      	str	r1, [r7, #0]
 800145a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	2b00      	cmp	r3, #0
 8001462:	db0a      	blt.n	800147a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	490c      	ldr	r1, [pc, #48]	; (800149c <__NVIC_SetPriority+0x4c>)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	0112      	lsls	r2, r2, #4
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	440b      	add	r3, r1
 8001474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001478:	e00a      	b.n	8001490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4908      	ldr	r1, [pc, #32]	; (80014a0 <__NVIC_SetPriority+0x50>)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	3b04      	subs	r3, #4
 8001488:	0112      	lsls	r2, r2, #4
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	440b      	add	r3, r1
 800148e:	761a      	strb	r2, [r3, #24]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000e100 	.word	0xe000e100
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f1c3 0307 	rsb	r3, r3, #7
 80014be:	2b04      	cmp	r3, #4
 80014c0:	bf28      	it	cs
 80014c2:	2304      	movcs	r3, #4
 80014c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3304      	adds	r3, #4
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d902      	bls.n	80014d4 <NVIC_EncodePriority+0x30>
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3b03      	subs	r3, #3
 80014d2:	e000      	b.n	80014d6 <NVIC_EncodePriority+0x32>
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	f04f 32ff 	mov.w	r2, #4294967295
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43da      	mvns	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	401a      	ands	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ec:	f04f 31ff 	mov.w	r1, #4294967295
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	43d9      	mvns	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	4313      	orrs	r3, r2
         );
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3724      	adds	r7, #36	; 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800151c:	d301      	bcc.n	8001522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151e:	2301      	movs	r3, #1
 8001520:	e00f      	b.n	8001542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <SysTick_Config+0x40>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152a:	210f      	movs	r1, #15
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f7ff ff8e 	bl	8001450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <SysTick_Config+0x40>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <SysTick_Config+0x40>)
 800153c:	2207      	movs	r2, #7
 800153e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	e000e010 	.word	0xe000e010

08001550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ff29 	bl	80013b0 <__NVIC_SetPriorityGrouping>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001578:	f7ff ff3e 	bl	80013f8 <__NVIC_GetPriorityGrouping>
 800157c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	68b9      	ldr	r1, [r7, #8]
 8001582:	6978      	ldr	r0, [r7, #20]
 8001584:	f7ff ff8e 	bl	80014a4 <NVIC_EncodePriority>
 8001588:	4602      	mov	r2, r0
 800158a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff5d 	bl	8001450 <__NVIC_SetPriority>
}
 8001596:	bf00      	nop
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff31 	bl	8001414 <__NVIC_EnableIRQ>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ffa2 	bl	800150c <SysTick_Config>
 80015c8:	4603      	mov	r3, r0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	; 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
 80015ee:	e159      	b.n	80018a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015f0:	2201      	movs	r2, #1
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	429a      	cmp	r2, r3
 800160a:	f040 8148 	bne.w	800189e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	2b01      	cmp	r3, #1
 8001618:	d005      	beq.n	8001626 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001622:	2b02      	cmp	r3, #2
 8001624:	d130      	bne.n	8001688 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	2203      	movs	r2, #3
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4013      	ands	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	68da      	ldr	r2, [r3, #12]
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800165c:	2201      	movs	r2, #1
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	091b      	lsrs	r3, r3, #4
 8001672:	f003 0201 	and.w	r2, r3, #1
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	2b03      	cmp	r3, #3
 8001692:	d017      	beq.n	80016c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	2203      	movs	r2, #3
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d123      	bne.n	8001718 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	08da      	lsrs	r2, r3, #3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3208      	adds	r2, #8
 80016d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	220f      	movs	r2, #15
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	691a      	ldr	r2, [r3, #16]
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	08da      	lsrs	r2, r3, #3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3208      	adds	r2, #8
 8001712:	69b9      	ldr	r1, [r7, #24]
 8001714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	2203      	movs	r2, #3
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0203 	and.w	r2, r3, #3
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 80a2 	beq.w	800189e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	4b57      	ldr	r3, [pc, #348]	; (80018bc <HAL_GPIO_Init+0x2e8>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	4a56      	ldr	r2, [pc, #344]	; (80018bc <HAL_GPIO_Init+0x2e8>)
 8001764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001768:	6453      	str	r3, [r2, #68]	; 0x44
 800176a:	4b54      	ldr	r3, [pc, #336]	; (80018bc <HAL_GPIO_Init+0x2e8>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001776:	4a52      	ldr	r2, [pc, #328]	; (80018c0 <HAL_GPIO_Init+0x2ec>)
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	089b      	lsrs	r3, r3, #2
 800177c:	3302      	adds	r3, #2
 800177e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	220f      	movs	r2, #15
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a49      	ldr	r2, [pc, #292]	; (80018c4 <HAL_GPIO_Init+0x2f0>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d019      	beq.n	80017d6 <HAL_GPIO_Init+0x202>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a48      	ldr	r2, [pc, #288]	; (80018c8 <HAL_GPIO_Init+0x2f4>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d013      	beq.n	80017d2 <HAL_GPIO_Init+0x1fe>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a47      	ldr	r2, [pc, #284]	; (80018cc <HAL_GPIO_Init+0x2f8>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d00d      	beq.n	80017ce <HAL_GPIO_Init+0x1fa>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a46      	ldr	r2, [pc, #280]	; (80018d0 <HAL_GPIO_Init+0x2fc>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d007      	beq.n	80017ca <HAL_GPIO_Init+0x1f6>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a45      	ldr	r2, [pc, #276]	; (80018d4 <HAL_GPIO_Init+0x300>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d101      	bne.n	80017c6 <HAL_GPIO_Init+0x1f2>
 80017c2:	2304      	movs	r3, #4
 80017c4:	e008      	b.n	80017d8 <HAL_GPIO_Init+0x204>
 80017c6:	2307      	movs	r3, #7
 80017c8:	e006      	b.n	80017d8 <HAL_GPIO_Init+0x204>
 80017ca:	2303      	movs	r3, #3
 80017cc:	e004      	b.n	80017d8 <HAL_GPIO_Init+0x204>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e002      	b.n	80017d8 <HAL_GPIO_Init+0x204>
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <HAL_GPIO_Init+0x204>
 80017d6:	2300      	movs	r3, #0
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	f002 0203 	and.w	r2, r2, #3
 80017de:	0092      	lsls	r2, r2, #2
 80017e0:	4093      	lsls	r3, r2
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017e8:	4935      	ldr	r1, [pc, #212]	; (80018c0 <HAL_GPIO_Init+0x2ec>)
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	089b      	lsrs	r3, r3, #2
 80017ee:	3302      	adds	r3, #2
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017f6:	4b38      	ldr	r3, [pc, #224]	; (80018d8 <HAL_GPIO_Init+0x304>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	43db      	mvns	r3, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4013      	ands	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800181a:	4a2f      	ldr	r2, [pc, #188]	; (80018d8 <HAL_GPIO_Init+0x304>)
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001820:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <HAL_GPIO_Init+0x304>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001844:	4a24      	ldr	r2, [pc, #144]	; (80018d8 <HAL_GPIO_Init+0x304>)
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800184a:	4b23      	ldr	r3, [pc, #140]	; (80018d8 <HAL_GPIO_Init+0x304>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	43db      	mvns	r3, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4013      	ands	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800186e:	4a1a      	ldr	r2, [pc, #104]	; (80018d8 <HAL_GPIO_Init+0x304>)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001874:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <HAL_GPIO_Init+0x304>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001898:	4a0f      	ldr	r2, [pc, #60]	; (80018d8 <HAL_GPIO_Init+0x304>)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3301      	adds	r3, #1
 80018a2:	61fb      	str	r3, [r7, #28]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	2b0f      	cmp	r3, #15
 80018a8:	f67f aea2 	bls.w	80015f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018ac:	bf00      	nop
 80018ae:	bf00      	nop
 80018b0:	3724      	adds	r7, #36	; 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40013800 	.word	0x40013800
 80018c4:	40020000 	.word	0x40020000
 80018c8:	40020400 	.word	0x40020400
 80018cc:	40020800 	.word	0x40020800
 80018d0:	40020c00 	.word	0x40020c00
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40013c00 	.word	0x40013c00

080018dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691a      	ldr	r2, [r3, #16]
 80018ec:	887b      	ldrh	r3, [r7, #2]
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018f4:	2301      	movs	r3, #1
 80018f6:	73fb      	strb	r3, [r7, #15]
 80018f8:	e001      	b.n	80018fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018fa:	2300      	movs	r3, #0
 80018fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	807b      	strh	r3, [r7, #2]
 8001918:	4613      	mov	r3, r2
 800191a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800191c:	787b      	ldrb	r3, [r7, #1]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001922:	887a      	ldrh	r2, [r7, #2]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001928:	e003      	b.n	8001932 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800192a:	887b      	ldrh	r3, [r7, #2]
 800192c:	041a      	lsls	r2, r3, #16
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	619a      	str	r2, [r3, #24]
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800194c:	695a      	ldr	r2, [r3, #20]
 800194e:	88fb      	ldrh	r3, [r7, #6]
 8001950:	4013      	ands	r3, r2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d006      	beq.n	8001964 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe ffbc 	bl	80008dc <HAL_GPIO_EXTI_Callback>
  }
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40013c00 	.word	0x40013c00

08001970 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e267      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	d075      	beq.n	8001a7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800198e:	4b88      	ldr	r3, [pc, #544]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	2b04      	cmp	r3, #4
 8001998:	d00c      	beq.n	80019b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800199a:	4b85      	ldr	r3, [pc, #532]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d112      	bne.n	80019cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019a6:	4b82      	ldr	r3, [pc, #520]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019b2:	d10b      	bne.n	80019cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b4:	4b7e      	ldr	r3, [pc, #504]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d05b      	beq.n	8001a78 <HAL_RCC_OscConfig+0x108>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d157      	bne.n	8001a78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e242      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d4:	d106      	bne.n	80019e4 <HAL_RCC_OscConfig+0x74>
 80019d6:	4b76      	ldr	r3, [pc, #472]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a75      	ldr	r2, [pc, #468]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e01d      	b.n	8001a20 <HAL_RCC_OscConfig+0xb0>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019ec:	d10c      	bne.n	8001a08 <HAL_RCC_OscConfig+0x98>
 80019ee:	4b70      	ldr	r3, [pc, #448]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a6f      	ldr	r2, [pc, #444]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 80019f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	4b6d      	ldr	r3, [pc, #436]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a6c      	ldr	r2, [pc, #432]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	e00b      	b.n	8001a20 <HAL_RCC_OscConfig+0xb0>
 8001a08:	4b69      	ldr	r3, [pc, #420]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a68      	ldr	r2, [pc, #416]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	4b66      	ldr	r3, [pc, #408]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a65      	ldr	r2, [pc, #404]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d013      	beq.n	8001a50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a28:	f7ff fcb6 	bl	8001398 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a30:	f7ff fcb2 	bl	8001398 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b64      	cmp	r3, #100	; 0x64
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e207      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	4b5b      	ldr	r3, [pc, #364]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0f0      	beq.n	8001a30 <HAL_RCC_OscConfig+0xc0>
 8001a4e:	e014      	b.n	8001a7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a50:	f7ff fca2 	bl	8001398 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a58:	f7ff fc9e 	bl	8001398 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b64      	cmp	r3, #100	; 0x64
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e1f3      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6a:	4b51      	ldr	r3, [pc, #324]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0xe8>
 8001a76:	e000      	b.n	8001a7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d063      	beq.n	8001b4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a86:	4b4a      	ldr	r3, [pc, #296]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00b      	beq.n	8001aaa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a92:	4b47      	ldr	r3, [pc, #284]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a9a:	2b08      	cmp	r3, #8
 8001a9c:	d11c      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a9e:	4b44      	ldr	r3, [pc, #272]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d116      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aaa:	4b41      	ldr	r3, [pc, #260]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d005      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x152>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d001      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e1c7      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac2:	4b3b      	ldr	r3, [pc, #236]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	4937      	ldr	r1, [pc, #220]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad6:	e03a      	b.n	8001b4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d020      	beq.n	8001b22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae0:	4b34      	ldr	r3, [pc, #208]	; (8001bb4 <HAL_RCC_OscConfig+0x244>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae6:	f7ff fc57 	bl	8001398 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aee:	f7ff fc53 	bl	8001398 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e1a8      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b00:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0c:	4b28      	ldr	r3, [pc, #160]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4925      	ldr	r1, [pc, #148]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	600b      	str	r3, [r1, #0]
 8001b20:	e015      	b.n	8001b4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b22:	4b24      	ldr	r3, [pc, #144]	; (8001bb4 <HAL_RCC_OscConfig+0x244>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b28:	f7ff fc36 	bl	8001398 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b30:	f7ff fc32 	bl	8001398 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e187      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b42:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f0      	bne.n	8001b30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d036      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d016      	beq.n	8001b90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <HAL_RCC_OscConfig+0x248>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b68:	f7ff fc16 	bl	8001398 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b70:	f7ff fc12 	bl	8001398 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e167      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_RCC_OscConfig+0x240>)
 8001b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f0      	beq.n	8001b70 <HAL_RCC_OscConfig+0x200>
 8001b8e:	e01b      	b.n	8001bc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <HAL_RCC_OscConfig+0x248>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b96:	f7ff fbff 	bl	8001398 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b9c:	e00e      	b.n	8001bbc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b9e:	f7ff fbfb 	bl	8001398 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d907      	bls.n	8001bbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e150      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	42470000 	.word	0x42470000
 8001bb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bbc:	4b88      	ldr	r3, [pc, #544]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1ea      	bne.n	8001b9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 8097 	beq.w	8001d04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bda:	4b81      	ldr	r3, [pc, #516]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10f      	bne.n	8001c06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	4b7d      	ldr	r3, [pc, #500]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	4a7c      	ldr	r2, [pc, #496]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf6:	4b7a      	ldr	r3, [pc, #488]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c02:	2301      	movs	r3, #1
 8001c04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c06:	4b77      	ldr	r3, [pc, #476]	; (8001de4 <HAL_RCC_OscConfig+0x474>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d118      	bne.n	8001c44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c12:	4b74      	ldr	r3, [pc, #464]	; (8001de4 <HAL_RCC_OscConfig+0x474>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a73      	ldr	r2, [pc, #460]	; (8001de4 <HAL_RCC_OscConfig+0x474>)
 8001c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c1e:	f7ff fbbb 	bl	8001398 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c26:	f7ff fbb7 	bl	8001398 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e10c      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c38:	4b6a      	ldr	r3, [pc, #424]	; (8001de4 <HAL_RCC_OscConfig+0x474>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f0      	beq.n	8001c26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d106      	bne.n	8001c5a <HAL_RCC_OscConfig+0x2ea>
 8001c4c:	4b64      	ldr	r3, [pc, #400]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c50:	4a63      	ldr	r2, [pc, #396]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6713      	str	r3, [r2, #112]	; 0x70
 8001c58:	e01c      	b.n	8001c94 <HAL_RCC_OscConfig+0x324>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	2b05      	cmp	r3, #5
 8001c60:	d10c      	bne.n	8001c7c <HAL_RCC_OscConfig+0x30c>
 8001c62:	4b5f      	ldr	r3, [pc, #380]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c66:	4a5e      	ldr	r2, [pc, #376]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001c68:	f043 0304 	orr.w	r3, r3, #4
 8001c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6e:	4b5c      	ldr	r3, [pc, #368]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c72:	4a5b      	ldr	r2, [pc, #364]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6713      	str	r3, [r2, #112]	; 0x70
 8001c7a:	e00b      	b.n	8001c94 <HAL_RCC_OscConfig+0x324>
 8001c7c:	4b58      	ldr	r3, [pc, #352]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c80:	4a57      	ldr	r2, [pc, #348]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001c82:	f023 0301 	bic.w	r3, r3, #1
 8001c86:	6713      	str	r3, [r2, #112]	; 0x70
 8001c88:	4b55      	ldr	r3, [pc, #340]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8c:	4a54      	ldr	r2, [pc, #336]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001c8e:	f023 0304 	bic.w	r3, r3, #4
 8001c92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d015      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9c:	f7ff fb7c 	bl	8001398 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca2:	e00a      	b.n	8001cba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca4:	f7ff fb78 	bl	8001398 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e0cb      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cba:	4b49      	ldr	r3, [pc, #292]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0ee      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x334>
 8001cc6:	e014      	b.n	8001cf2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc8:	f7ff fb66 	bl	8001398 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cce:	e00a      	b.n	8001ce6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cd0:	f7ff fb62 	bl	8001398 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e0b5      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce6:	4b3e      	ldr	r3, [pc, #248]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1ee      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cf2:	7dfb      	ldrb	r3, [r7, #23]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d105      	bne.n	8001d04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf8:	4b39      	ldr	r3, [pc, #228]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	4a38      	ldr	r2, [pc, #224]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 80a1 	beq.w	8001e50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d0e:	4b34      	ldr	r3, [pc, #208]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d05c      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d141      	bne.n	8001da6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d22:	4b31      	ldr	r3, [pc, #196]	; (8001de8 <HAL_RCC_OscConfig+0x478>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d28:	f7ff fb36 	bl	8001398 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d30:	f7ff fb32 	bl	8001398 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e087      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d42:	4b27      	ldr	r3, [pc, #156]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69da      	ldr	r2, [r3, #28]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	019b      	lsls	r3, r3, #6
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d64:	085b      	lsrs	r3, r3, #1
 8001d66:	3b01      	subs	r3, #1
 8001d68:	041b      	lsls	r3, r3, #16
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d70:	061b      	lsls	r3, r3, #24
 8001d72:	491b      	ldr	r1, [pc, #108]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d78:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <HAL_RCC_OscConfig+0x478>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7e:	f7ff fb0b 	bl	8001398 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d86:	f7ff fb07 	bl	8001398 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e05c      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d98:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x416>
 8001da4:	e054      	b.n	8001e50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <HAL_RCC_OscConfig+0x478>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dac:	f7ff faf4 	bl	8001398 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db4:	f7ff faf0 	bl	8001398 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e045      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_RCC_OscConfig+0x470>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x444>
 8001dd2:	e03d      	b.n	8001e50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d107      	bne.n	8001dec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e038      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40007000 	.word	0x40007000
 8001de8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dec:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <HAL_RCC_OscConfig+0x4ec>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d028      	beq.n	8001e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d121      	bne.n	8001e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d11a      	bne.n	8001e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d111      	bne.n	8001e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	085b      	lsrs	r3, r3, #1
 8001e34:	3b01      	subs	r3, #1
 8001e36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d107      	bne.n	8001e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d001      	beq.n	8001e50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e000      	b.n	8001e52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800

08001e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0cc      	b.n	800200e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e74:	4b68      	ldr	r3, [pc, #416]	; (8002018 <HAL_RCC_ClockConfig+0x1b8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d90c      	bls.n	8001e9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e82:	4b65      	ldr	r3, [pc, #404]	; (8002018 <HAL_RCC_ClockConfig+0x1b8>)
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8a:	4b63      	ldr	r3, [pc, #396]	; (8002018 <HAL_RCC_ClockConfig+0x1b8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d001      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0b8      	b.n	800200e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d020      	beq.n	8001eea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d005      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eb4:	4b59      	ldr	r3, [pc, #356]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	4a58      	ldr	r2, [pc, #352]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001eba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ebe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0308 	and.w	r3, r3, #8
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d005      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ecc:	4b53      	ldr	r3, [pc, #332]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	4a52      	ldr	r2, [pc, #328]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ed6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed8:	4b50      	ldr	r3, [pc, #320]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	494d      	ldr	r1, [pc, #308]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d044      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d107      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efe:	4b47      	ldr	r3, [pc, #284]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d119      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e07f      	b.n	800200e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d003      	beq.n	8001f1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	d107      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1e:	4b3f      	ldr	r3, [pc, #252]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d109      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e06f      	b.n	800200e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2e:	4b3b      	ldr	r3, [pc, #236]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e067      	b.n	800200e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f3e:	4b37      	ldr	r3, [pc, #220]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f023 0203 	bic.w	r2, r3, #3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	4934      	ldr	r1, [pc, #208]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f50:	f7ff fa22 	bl	8001398 <HAL_GetTick>
 8001f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f56:	e00a      	b.n	8001f6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f58:	f7ff fa1e 	bl	8001398 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e04f      	b.n	800200e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6e:	4b2b      	ldr	r3, [pc, #172]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 020c 	and.w	r2, r3, #12
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d1eb      	bne.n	8001f58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f80:	4b25      	ldr	r3, [pc, #148]	; (8002018 <HAL_RCC_ClockConfig+0x1b8>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d20c      	bcs.n	8001fa8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8e:	4b22      	ldr	r3, [pc, #136]	; (8002018 <HAL_RCC_ClockConfig+0x1b8>)
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f96:	4b20      	ldr	r3, [pc, #128]	; (8002018 <HAL_RCC_ClockConfig+0x1b8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e032      	b.n	800200e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d008      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb4:	4b19      	ldr	r3, [pc, #100]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4916      	ldr	r1, [pc, #88]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d009      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fd2:	4b12      	ldr	r3, [pc, #72]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	490e      	ldr	r1, [pc, #56]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fe6:	f000 f821 	bl	800202c <HAL_RCC_GetSysClockFreq>
 8001fea:	4602      	mov	r2, r0
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	091b      	lsrs	r3, r3, #4
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	490a      	ldr	r1, [pc, #40]	; (8002020 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff8:	5ccb      	ldrb	r3, [r1, r3]
 8001ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffe:	4a09      	ldr	r2, [pc, #36]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <HAL_RCC_ClockConfig+0x1c8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff f982 	bl	8001310 <HAL_InitTick>

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40023c00 	.word	0x40023c00
 800201c:	40023800 	.word	0x40023800
 8002020:	08004134 	.word	0x08004134
 8002024:	20000038 	.word	0x20000038
 8002028:	2000003c 	.word	0x2000003c

0800202c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800202c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002030:	b094      	sub	sp, #80	; 0x50
 8002032:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002034:	2300      	movs	r3, #0
 8002036:	647b      	str	r3, [r7, #68]	; 0x44
 8002038:	2300      	movs	r3, #0
 800203a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800203c:	2300      	movs	r3, #0
 800203e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002044:	4b79      	ldr	r3, [pc, #484]	; (800222c <HAL_RCC_GetSysClockFreq+0x200>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 030c 	and.w	r3, r3, #12
 800204c:	2b08      	cmp	r3, #8
 800204e:	d00d      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0x40>
 8002050:	2b08      	cmp	r3, #8
 8002052:	f200 80e1 	bhi.w	8002218 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002056:	2b00      	cmp	r3, #0
 8002058:	d002      	beq.n	8002060 <HAL_RCC_GetSysClockFreq+0x34>
 800205a:	2b04      	cmp	r3, #4
 800205c:	d003      	beq.n	8002066 <HAL_RCC_GetSysClockFreq+0x3a>
 800205e:	e0db      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002060:	4b73      	ldr	r3, [pc, #460]	; (8002230 <HAL_RCC_GetSysClockFreq+0x204>)
 8002062:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002064:	e0db      	b.n	800221e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002066:	4b73      	ldr	r3, [pc, #460]	; (8002234 <HAL_RCC_GetSysClockFreq+0x208>)
 8002068:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800206a:	e0d8      	b.n	800221e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800206c:	4b6f      	ldr	r3, [pc, #444]	; (800222c <HAL_RCC_GetSysClockFreq+0x200>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002074:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002076:	4b6d      	ldr	r3, [pc, #436]	; (800222c <HAL_RCC_GetSysClockFreq+0x200>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d063      	beq.n	800214a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002082:	4b6a      	ldr	r3, [pc, #424]	; (800222c <HAL_RCC_GetSysClockFreq+0x200>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	099b      	lsrs	r3, r3, #6
 8002088:	2200      	movs	r2, #0
 800208a:	63bb      	str	r3, [r7, #56]	; 0x38
 800208c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800208e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002094:	633b      	str	r3, [r7, #48]	; 0x30
 8002096:	2300      	movs	r3, #0
 8002098:	637b      	str	r3, [r7, #52]	; 0x34
 800209a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800209e:	4622      	mov	r2, r4
 80020a0:	462b      	mov	r3, r5
 80020a2:	f04f 0000 	mov.w	r0, #0
 80020a6:	f04f 0100 	mov.w	r1, #0
 80020aa:	0159      	lsls	r1, r3, #5
 80020ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020b0:	0150      	lsls	r0, r2, #5
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4621      	mov	r1, r4
 80020b8:	1a51      	subs	r1, r2, r1
 80020ba:	6139      	str	r1, [r7, #16]
 80020bc:	4629      	mov	r1, r5
 80020be:	eb63 0301 	sbc.w	r3, r3, r1
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020d0:	4659      	mov	r1, fp
 80020d2:	018b      	lsls	r3, r1, #6
 80020d4:	4651      	mov	r1, sl
 80020d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020da:	4651      	mov	r1, sl
 80020dc:	018a      	lsls	r2, r1, #6
 80020de:	4651      	mov	r1, sl
 80020e0:	ebb2 0801 	subs.w	r8, r2, r1
 80020e4:	4659      	mov	r1, fp
 80020e6:	eb63 0901 	sbc.w	r9, r3, r1
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020fe:	4690      	mov	r8, r2
 8002100:	4699      	mov	r9, r3
 8002102:	4623      	mov	r3, r4
 8002104:	eb18 0303 	adds.w	r3, r8, r3
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	462b      	mov	r3, r5
 800210c:	eb49 0303 	adc.w	r3, r9, r3
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800211e:	4629      	mov	r1, r5
 8002120:	024b      	lsls	r3, r1, #9
 8002122:	4621      	mov	r1, r4
 8002124:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002128:	4621      	mov	r1, r4
 800212a:	024a      	lsls	r2, r1, #9
 800212c:	4610      	mov	r0, r2
 800212e:	4619      	mov	r1, r3
 8002130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002132:	2200      	movs	r2, #0
 8002134:	62bb      	str	r3, [r7, #40]	; 0x28
 8002136:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002138:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800213c:	f7fe f8a8 	bl	8000290 <__aeabi_uldivmod>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4613      	mov	r3, r2
 8002146:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002148:	e058      	b.n	80021fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800214a:	4b38      	ldr	r3, [pc, #224]	; (800222c <HAL_RCC_GetSysClockFreq+0x200>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	099b      	lsrs	r3, r3, #6
 8002150:	2200      	movs	r2, #0
 8002152:	4618      	mov	r0, r3
 8002154:	4611      	mov	r1, r2
 8002156:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800215a:	623b      	str	r3, [r7, #32]
 800215c:	2300      	movs	r3, #0
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
 8002160:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002164:	4642      	mov	r2, r8
 8002166:	464b      	mov	r3, r9
 8002168:	f04f 0000 	mov.w	r0, #0
 800216c:	f04f 0100 	mov.w	r1, #0
 8002170:	0159      	lsls	r1, r3, #5
 8002172:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002176:	0150      	lsls	r0, r2, #5
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4641      	mov	r1, r8
 800217e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002182:	4649      	mov	r1, r9
 8002184:	eb63 0b01 	sbc.w	fp, r3, r1
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002194:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002198:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800219c:	ebb2 040a 	subs.w	r4, r2, sl
 80021a0:	eb63 050b 	sbc.w	r5, r3, fp
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	00eb      	lsls	r3, r5, #3
 80021ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021b2:	00e2      	lsls	r2, r4, #3
 80021b4:	4614      	mov	r4, r2
 80021b6:	461d      	mov	r5, r3
 80021b8:	4643      	mov	r3, r8
 80021ba:	18e3      	adds	r3, r4, r3
 80021bc:	603b      	str	r3, [r7, #0]
 80021be:	464b      	mov	r3, r9
 80021c0:	eb45 0303 	adc.w	r3, r5, r3
 80021c4:	607b      	str	r3, [r7, #4]
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	f04f 0300 	mov.w	r3, #0
 80021ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021d2:	4629      	mov	r1, r5
 80021d4:	028b      	lsls	r3, r1, #10
 80021d6:	4621      	mov	r1, r4
 80021d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021dc:	4621      	mov	r1, r4
 80021de:	028a      	lsls	r2, r1, #10
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021e6:	2200      	movs	r2, #0
 80021e8:	61bb      	str	r3, [r7, #24]
 80021ea:	61fa      	str	r2, [r7, #28]
 80021ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021f0:	f7fe f84e 	bl	8000290 <__aeabi_uldivmod>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4613      	mov	r3, r2
 80021fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <HAL_RCC_GetSysClockFreq+0x200>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	0c1b      	lsrs	r3, r3, #16
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	3301      	adds	r3, #1
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800220c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800220e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002210:	fbb2 f3f3 	udiv	r3, r2, r3
 8002214:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002216:	e002      	b.n	800221e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_RCC_GetSysClockFreq+0x204>)
 800221a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800221c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800221e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002220:	4618      	mov	r0, r3
 8002222:	3750      	adds	r7, #80	; 0x50
 8002224:	46bd      	mov	sp, r7
 8002226:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800222a:	bf00      	nop
 800222c:	40023800 	.word	0x40023800
 8002230:	00f42400 	.word	0x00f42400
 8002234:	007a1200 	.word	0x007a1200

08002238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800223c:	4b03      	ldr	r3, [pc, #12]	; (800224c <HAL_RCC_GetHCLKFreq+0x14>)
 800223e:	681b      	ldr	r3, [r3, #0]
}
 8002240:	4618      	mov	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	20000038 	.word	0x20000038

08002250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002254:	f7ff fff0 	bl	8002238 <HAL_RCC_GetHCLKFreq>
 8002258:	4602      	mov	r2, r0
 800225a:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HAL_RCC_GetPCLK1Freq+0x20>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	0a9b      	lsrs	r3, r3, #10
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	4903      	ldr	r1, [pc, #12]	; (8002274 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002266:	5ccb      	ldrb	r3, [r1, r3]
 8002268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800226c:	4618      	mov	r0, r3
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40023800 	.word	0x40023800
 8002274:	08004144 	.word	0x08004144

08002278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800227c:	f7ff ffdc 	bl	8002238 <HAL_RCC_GetHCLKFreq>
 8002280:	4602      	mov	r2, r0
 8002282:	4b05      	ldr	r3, [pc, #20]	; (8002298 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	0b5b      	lsrs	r3, r3, #13
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	4903      	ldr	r1, [pc, #12]	; (800229c <HAL_RCC_GetPCLK2Freq+0x24>)
 800228e:	5ccb      	ldrb	r3, [r1, r3]
 8002290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002294:	4618      	mov	r0, r3
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40023800 	.word	0x40023800
 800229c:	08004144 	.word	0x08004144

080022a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e041      	b.n	8002336 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d106      	bne.n	80022cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7fe feda 	bl	8001080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2202      	movs	r2, #2
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3304      	adds	r3, #4
 80022dc:	4619      	mov	r1, r3
 80022de:	4610      	mov	r0, r2
 80022e0:	f000 fa88 	bl	80027f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b01      	cmp	r3, #1
 8002352:	d001      	beq.n	8002358 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e044      	b.n	80023e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2202      	movs	r2, #2
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0201 	orr.w	r2, r2, #1
 800236e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a1e      	ldr	r2, [pc, #120]	; (80023f0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d018      	beq.n	80023ac <HAL_TIM_Base_Start_IT+0x6c>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002382:	d013      	beq.n	80023ac <HAL_TIM_Base_Start_IT+0x6c>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a1a      	ldr	r2, [pc, #104]	; (80023f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d00e      	beq.n	80023ac <HAL_TIM_Base_Start_IT+0x6c>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a19      	ldr	r2, [pc, #100]	; (80023f8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d009      	beq.n	80023ac <HAL_TIM_Base_Start_IT+0x6c>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a17      	ldr	r2, [pc, #92]	; (80023fc <HAL_TIM_Base_Start_IT+0xbc>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d004      	beq.n	80023ac <HAL_TIM_Base_Start_IT+0x6c>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a16      	ldr	r2, [pc, #88]	; (8002400 <HAL_TIM_Base_Start_IT+0xc0>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d111      	bne.n	80023d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2b06      	cmp	r3, #6
 80023bc:	d010      	beq.n	80023e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f042 0201 	orr.w	r2, r2, #1
 80023cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ce:	e007      	b.n	80023e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	40010000 	.word	0x40010000
 80023f4:	40000400 	.word	0x40000400
 80023f8:	40000800 	.word	0x40000800
 80023fc:	40000c00 	.word	0x40000c00
 8002400:	40014000 	.word	0x40014000

08002404 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b02      	cmp	r3, #2
 8002418:	d122      	bne.n	8002460 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b02      	cmp	r3, #2
 8002426:	d11b      	bne.n	8002460 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f06f 0202 	mvn.w	r2, #2
 8002430:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f9b5 	bl	80027b6 <HAL_TIM_IC_CaptureCallback>
 800244c:	e005      	b.n	800245a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f9a7 	bl	80027a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 f9b8 	bl	80027ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	2b04      	cmp	r3, #4
 800246c:	d122      	bne.n	80024b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b04      	cmp	r3, #4
 800247a:	d11b      	bne.n	80024b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f06f 0204 	mvn.w	r2, #4
 8002484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2202      	movs	r2, #2
 800248a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f98b 	bl	80027b6 <HAL_TIM_IC_CaptureCallback>
 80024a0:	e005      	b.n	80024ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f97d 	bl	80027a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f98e 	bl	80027ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b08      	cmp	r3, #8
 80024c0:	d122      	bne.n	8002508 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f003 0308 	and.w	r3, r3, #8
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d11b      	bne.n	8002508 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0208 	mvn.w	r2, #8
 80024d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2204      	movs	r2, #4
 80024de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f961 	bl	80027b6 <HAL_TIM_IC_CaptureCallback>
 80024f4:	e005      	b.n	8002502 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f953 	bl	80027a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f964 	bl	80027ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f003 0310 	and.w	r3, r3, #16
 8002512:	2b10      	cmp	r3, #16
 8002514:	d122      	bne.n	800255c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	2b10      	cmp	r3, #16
 8002522:	d11b      	bne.n	800255c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0210 	mvn.w	r2, #16
 800252c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2208      	movs	r2, #8
 8002532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f937 	bl	80027b6 <HAL_TIM_IC_CaptureCallback>
 8002548:	e005      	b.n	8002556 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f929 	bl	80027a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f93a 	bl	80027ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b01      	cmp	r3, #1
 8002568:	d10e      	bne.n	8002588 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b01      	cmp	r3, #1
 8002576:	d107      	bne.n	8002588 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0201 	mvn.w	r2, #1
 8002580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7fe f9d6 	bl	8000934 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002592:	2b80      	cmp	r3, #128	; 0x80
 8002594:	d10e      	bne.n	80025b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a0:	2b80      	cmp	r3, #128	; 0x80
 80025a2:	d107      	bne.n	80025b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fab2 	bl	8002b18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025be:	2b40      	cmp	r3, #64	; 0x40
 80025c0:	d10e      	bne.n	80025e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025cc:	2b40      	cmp	r3, #64	; 0x40
 80025ce:	d107      	bne.n	80025e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f8ff 	bl	80027de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f003 0320 	and.w	r3, r3, #32
 80025ea:	2b20      	cmp	r3, #32
 80025ec:	d10e      	bne.n	800260c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f003 0320 	and.w	r3, r3, #32
 80025f8:	2b20      	cmp	r3, #32
 80025fa:	d107      	bne.n	800260c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 0220 	mvn.w	r2, #32
 8002604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 fa7c 	bl	8002b04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800261e:	2300      	movs	r3, #0
 8002620:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <HAL_TIM_ConfigClockSource+0x1c>
 800262c:	2302      	movs	r3, #2
 800262e:	e0b4      	b.n	800279a <HAL_TIM_ConfigClockSource+0x186>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800264e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002656:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002668:	d03e      	beq.n	80026e8 <HAL_TIM_ConfigClockSource+0xd4>
 800266a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800266e:	f200 8087 	bhi.w	8002780 <HAL_TIM_ConfigClockSource+0x16c>
 8002672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002676:	f000 8086 	beq.w	8002786 <HAL_TIM_ConfigClockSource+0x172>
 800267a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800267e:	d87f      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x16c>
 8002680:	2b70      	cmp	r3, #112	; 0x70
 8002682:	d01a      	beq.n	80026ba <HAL_TIM_ConfigClockSource+0xa6>
 8002684:	2b70      	cmp	r3, #112	; 0x70
 8002686:	d87b      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x16c>
 8002688:	2b60      	cmp	r3, #96	; 0x60
 800268a:	d050      	beq.n	800272e <HAL_TIM_ConfigClockSource+0x11a>
 800268c:	2b60      	cmp	r3, #96	; 0x60
 800268e:	d877      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x16c>
 8002690:	2b50      	cmp	r3, #80	; 0x50
 8002692:	d03c      	beq.n	800270e <HAL_TIM_ConfigClockSource+0xfa>
 8002694:	2b50      	cmp	r3, #80	; 0x50
 8002696:	d873      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x16c>
 8002698:	2b40      	cmp	r3, #64	; 0x40
 800269a:	d058      	beq.n	800274e <HAL_TIM_ConfigClockSource+0x13a>
 800269c:	2b40      	cmp	r3, #64	; 0x40
 800269e:	d86f      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x16c>
 80026a0:	2b30      	cmp	r3, #48	; 0x30
 80026a2:	d064      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x15a>
 80026a4:	2b30      	cmp	r3, #48	; 0x30
 80026a6:	d86b      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x16c>
 80026a8:	2b20      	cmp	r3, #32
 80026aa:	d060      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x15a>
 80026ac:	2b20      	cmp	r3, #32
 80026ae:	d867      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x16c>
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d05c      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x15a>
 80026b4:	2b10      	cmp	r3, #16
 80026b6:	d05a      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x15a>
 80026b8:	e062      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6818      	ldr	r0, [r3, #0]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	6899      	ldr	r1, [r3, #8]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f000 f98d 	bl	80029e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	609a      	str	r2, [r3, #8]
      break;
 80026e6:	e04f      	b.n	8002788 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	6899      	ldr	r1, [r3, #8]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f000 f976 	bl	80029e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800270a:	609a      	str	r2, [r3, #8]
      break;
 800270c:	e03c      	b.n	8002788 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	6859      	ldr	r1, [r3, #4]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	461a      	mov	r2, r3
 800271c:	f000 f8ea 	bl	80028f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2150      	movs	r1, #80	; 0x50
 8002726:	4618      	mov	r0, r3
 8002728:	f000 f943 	bl	80029b2 <TIM_ITRx_SetConfig>
      break;
 800272c:	e02c      	b.n	8002788 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6818      	ldr	r0, [r3, #0]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	6859      	ldr	r1, [r3, #4]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	461a      	mov	r2, r3
 800273c:	f000 f909 	bl	8002952 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2160      	movs	r1, #96	; 0x60
 8002746:	4618      	mov	r0, r3
 8002748:	f000 f933 	bl	80029b2 <TIM_ITRx_SetConfig>
      break;
 800274c:	e01c      	b.n	8002788 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	6859      	ldr	r1, [r3, #4]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	461a      	mov	r2, r3
 800275c:	f000 f8ca 	bl	80028f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2140      	movs	r1, #64	; 0x40
 8002766:	4618      	mov	r0, r3
 8002768:	f000 f923 	bl	80029b2 <TIM_ITRx_SetConfig>
      break;
 800276c:	e00c      	b.n	8002788 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4619      	mov	r1, r3
 8002778:	4610      	mov	r0, r2
 800277a:	f000 f91a 	bl	80029b2 <TIM_ITRx_SetConfig>
      break;
 800277e:	e003      	b.n	8002788 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
      break;
 8002784:	e000      	b.n	8002788 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002786:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002798:	7bfb      	ldrb	r3, [r7, #15]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
	...

080027f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a34      	ldr	r2, [pc, #208]	; (80028d8 <TIM_Base_SetConfig+0xe4>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d00f      	beq.n	800282c <TIM_Base_SetConfig+0x38>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002812:	d00b      	beq.n	800282c <TIM_Base_SetConfig+0x38>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a31      	ldr	r2, [pc, #196]	; (80028dc <TIM_Base_SetConfig+0xe8>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d007      	beq.n	800282c <TIM_Base_SetConfig+0x38>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a30      	ldr	r2, [pc, #192]	; (80028e0 <TIM_Base_SetConfig+0xec>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d003      	beq.n	800282c <TIM_Base_SetConfig+0x38>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a2f      	ldr	r2, [pc, #188]	; (80028e4 <TIM_Base_SetConfig+0xf0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d108      	bne.n	800283e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4313      	orrs	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a25      	ldr	r2, [pc, #148]	; (80028d8 <TIM_Base_SetConfig+0xe4>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d01b      	beq.n	800287e <TIM_Base_SetConfig+0x8a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284c:	d017      	beq.n	800287e <TIM_Base_SetConfig+0x8a>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a22      	ldr	r2, [pc, #136]	; (80028dc <TIM_Base_SetConfig+0xe8>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d013      	beq.n	800287e <TIM_Base_SetConfig+0x8a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a21      	ldr	r2, [pc, #132]	; (80028e0 <TIM_Base_SetConfig+0xec>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00f      	beq.n	800287e <TIM_Base_SetConfig+0x8a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a20      	ldr	r2, [pc, #128]	; (80028e4 <TIM_Base_SetConfig+0xf0>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00b      	beq.n	800287e <TIM_Base_SetConfig+0x8a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a1f      	ldr	r2, [pc, #124]	; (80028e8 <TIM_Base_SetConfig+0xf4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d007      	beq.n	800287e <TIM_Base_SetConfig+0x8a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a1e      	ldr	r2, [pc, #120]	; (80028ec <TIM_Base_SetConfig+0xf8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d003      	beq.n	800287e <TIM_Base_SetConfig+0x8a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a1d      	ldr	r2, [pc, #116]	; (80028f0 <TIM_Base_SetConfig+0xfc>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d108      	bne.n	8002890 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	4313      	orrs	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	4313      	orrs	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a08      	ldr	r2, [pc, #32]	; (80028d8 <TIM_Base_SetConfig+0xe4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d103      	bne.n	80028c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	615a      	str	r2, [r3, #20]
}
 80028ca:	bf00      	nop
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40010000 	.word	0x40010000
 80028dc:	40000400 	.word	0x40000400
 80028e0:	40000800 	.word	0x40000800
 80028e4:	40000c00 	.word	0x40000c00
 80028e8:	40014000 	.word	0x40014000
 80028ec:	40014400 	.word	0x40014400
 80028f0:	40014800 	.word	0x40014800

080028f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	f023 0201 	bic.w	r2, r3, #1
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800291e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f023 030a 	bic.w	r3, r3, #10
 8002930:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	4313      	orrs	r3, r2
 8002938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	621a      	str	r2, [r3, #32]
}
 8002946:	bf00      	nop
 8002948:	371c      	adds	r7, #28
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002952:	b480      	push	{r7}
 8002954:	b087      	sub	sp, #28
 8002956:	af00      	add	r7, sp, #0
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	f023 0210 	bic.w	r2, r3, #16
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800297c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	031b      	lsls	r3, r3, #12
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4313      	orrs	r3, r2
 8002986:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800298e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	621a      	str	r2, [r3, #32]
}
 80029a6:	bf00      	nop
 80029a8:	371c      	adds	r7, #28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b085      	sub	sp, #20
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	f043 0307 	orr.w	r3, r3, #7
 80029d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	609a      	str	r2, [r3, #8]
}
 80029dc:	bf00      	nop
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	021a      	lsls	r2, r3, #8
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	609a      	str	r2, [r3, #8]
}
 8002a1c:	bf00      	nop
 8002a1e:	371c      	adds	r7, #28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e050      	b.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a1c      	ldr	r2, [pc, #112]	; (8002af0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d018      	beq.n	8002ab6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a8c:	d013      	beq.n	8002ab6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a18      	ldr	r2, [pc, #96]	; (8002af4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d00e      	beq.n	8002ab6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a16      	ldr	r2, [pc, #88]	; (8002af8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d009      	beq.n	8002ab6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a15      	ldr	r2, [pc, #84]	; (8002afc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d004      	beq.n	8002ab6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a13      	ldr	r2, [pc, #76]	; (8002b00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002abc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40010000 	.word	0x40010000
 8002af4:	40000400 	.word	0x40000400
 8002af8:	40000800 	.word	0x40000800
 8002afc:	40000c00 	.word	0x40000c00
 8002b00:	40014000 	.word	0x40014000

08002b04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e03f      	b.n	8002bbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d106      	bne.n	8002b58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7fe fabc 	bl	80010d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2224      	movs	r2, #36	; 0x24
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f9cb 	bl	8002f0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695a      	ldr	r2, [r3, #20]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ba4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b08a      	sub	sp, #40	; 0x28
 8002bca:	af02      	add	r7, sp, #8
 8002bcc:	60f8      	str	r0, [r7, #12]
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	603b      	str	r3, [r7, #0]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b20      	cmp	r3, #32
 8002be4:	d17c      	bne.n	8002ce0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d002      	beq.n	8002bf2 <HAL_UART_Transmit+0x2c>
 8002bec:	88fb      	ldrh	r3, [r7, #6]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e075      	b.n	8002ce2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_UART_Transmit+0x3e>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e06e      	b.n	8002ce2 <HAL_UART_Transmit+0x11c>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2221      	movs	r2, #33	; 0x21
 8002c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c1a:	f7fe fbbd 	bl	8001398 <HAL_GetTick>
 8002c1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	88fa      	ldrh	r2, [r7, #6]
 8002c24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	88fa      	ldrh	r2, [r7, #6]
 8002c2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c34:	d108      	bne.n	8002c48 <HAL_UART_Transmit+0x82>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d104      	bne.n	8002c48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	61bb      	str	r3, [r7, #24]
 8002c46:	e003      	b.n	8002c50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c58:	e02a      	b.n	8002cb0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2200      	movs	r2, #0
 8002c62:	2180      	movs	r1, #128	; 0x80
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 f8e2 	bl	8002e2e <UART_WaitOnFlagUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e036      	b.n	8002ce2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10b      	bne.n	8002c92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	881b      	ldrh	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	3302      	adds	r3, #2
 8002c8e:	61bb      	str	r3, [r7, #24]
 8002c90:	e007      	b.n	8002ca2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	781a      	ldrb	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1cf      	bne.n	8002c5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2140      	movs	r1, #64	; 0x40
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 f8b2 	bl	8002e2e <UART_WaitOnFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e006      	b.n	8002ce2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	e000      	b.n	8002ce2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ce0:	2302      	movs	r3, #2
  }
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3720      	adds	r7, #32
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b08a      	sub	sp, #40	; 0x28
 8002cee:	af02      	add	r7, sp, #8
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	603b      	str	r3, [r7, #0]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b20      	cmp	r3, #32
 8002d08:	f040 808c 	bne.w	8002e24 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <HAL_UART_Receive+0x2e>
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e084      	b.n	8002e26 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <HAL_UART_Receive+0x40>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e07d      	b.n	8002e26 <HAL_UART_Receive+0x13c>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2222      	movs	r2, #34	; 0x22
 8002d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d46:	f7fe fb27 	bl	8001398 <HAL_GetTick>
 8002d4a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	88fa      	ldrh	r2, [r7, #6]
 8002d50:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	88fa      	ldrh	r2, [r7, #6]
 8002d56:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d60:	d108      	bne.n	8002d74 <HAL_UART_Receive+0x8a>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d104      	bne.n	8002d74 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	61bb      	str	r3, [r7, #24]
 8002d72:	e003      	b.n	8002d7c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002d84:	e043      	b.n	8002e0e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2120      	movs	r1, #32
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f84c 	bl	8002e2e <UART_WaitOnFlagUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e042      	b.n	8002e26 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10c      	bne.n	8002dc0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	3302      	adds	r3, #2
 8002dbc:	61bb      	str	r3, [r7, #24]
 8002dbe:	e01f      	b.n	8002e00 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc8:	d007      	beq.n	8002dda <HAL_UART_Receive+0xf0>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10a      	bne.n	8002de8 <HAL_UART_Receive+0xfe>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d106      	bne.n	8002de8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	701a      	strb	r2, [r3, #0]
 8002de6:	e008      	b.n	8002dfa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	3b01      	subs	r3, #1
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1b6      	bne.n	8002d86 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	e000      	b.n	8002e26 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002e24:	2302      	movs	r3, #2
  }
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3720      	adds	r7, #32
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b090      	sub	sp, #64	; 0x40
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	603b      	str	r3, [r7, #0]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e3e:	e050      	b.n	8002ee2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e46:	d04c      	beq.n	8002ee2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d007      	beq.n	8002e5e <UART_WaitOnFlagUntilTimeout+0x30>
 8002e4e:	f7fe faa3 	bl	8001398 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d241      	bcs.n	8002ee2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	330c      	adds	r3, #12
 8002e64:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e68:	e853 3f00 	ldrex	r3, [r3]
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	330c      	adds	r3, #12
 8002e7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e7e:	637a      	str	r2, [r7, #52]	; 0x34
 8002e80:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e86:	e841 2300 	strex	r3, r2, [r1]
 8002e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1e5      	bne.n	8002e5e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	3314      	adds	r3, #20
 8002e98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	e853 3f00 	ldrex	r3, [r3]
 8002ea0:	613b      	str	r3, [r7, #16]
   return(result);
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f023 0301 	bic.w	r3, r3, #1
 8002ea8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	3314      	adds	r3, #20
 8002eb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eb2:	623a      	str	r2, [r7, #32]
 8002eb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb6:	69f9      	ldr	r1, [r7, #28]
 8002eb8:	6a3a      	ldr	r2, [r7, #32]
 8002eba:	e841 2300 	strex	r3, r2, [r1]
 8002ebe:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1e5      	bne.n	8002e92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e00f      	b.n	8002f02 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	4013      	ands	r3, r2
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	bf0c      	ite	eq
 8002ef2:	2301      	moveq	r3, #1
 8002ef4:	2300      	movne	r3, #0
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	461a      	mov	r2, r3
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d09f      	beq.n	8002e40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3740      	adds	r7, #64	; 0x40
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f10:	b0c0      	sub	sp, #256	; 0x100
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f28:	68d9      	ldr	r1, [r3, #12]
 8002f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	ea40 0301 	orr.w	r3, r0, r1
 8002f34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f64:	f021 010c 	bic.w	r1, r1, #12
 8002f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f72:	430b      	orrs	r3, r1
 8002f74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f86:	6999      	ldr	r1, [r3, #24]
 8002f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	ea40 0301 	orr.w	r3, r0, r1
 8002f92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	4b8f      	ldr	r3, [pc, #572]	; (80031d8 <UART_SetConfig+0x2cc>)
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d005      	beq.n	8002fac <UART_SetConfig+0xa0>
 8002fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	4b8d      	ldr	r3, [pc, #564]	; (80031dc <UART_SetConfig+0x2d0>)
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d104      	bne.n	8002fb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fac:	f7ff f964 	bl	8002278 <HAL_RCC_GetPCLK2Freq>
 8002fb0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002fb4:	e003      	b.n	8002fbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fb6:	f7ff f94b 	bl	8002250 <HAL_RCC_GetPCLK1Freq>
 8002fba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fc8:	f040 810c 	bne.w	80031e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002fd6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002fda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002fde:	4622      	mov	r2, r4
 8002fe0:	462b      	mov	r3, r5
 8002fe2:	1891      	adds	r1, r2, r2
 8002fe4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002fe6:	415b      	adcs	r3, r3
 8002fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fee:	4621      	mov	r1, r4
 8002ff0:	eb12 0801 	adds.w	r8, r2, r1
 8002ff4:	4629      	mov	r1, r5
 8002ff6:	eb43 0901 	adc.w	r9, r3, r1
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	f04f 0300 	mov.w	r3, #0
 8003002:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003006:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800300a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800300e:	4690      	mov	r8, r2
 8003010:	4699      	mov	r9, r3
 8003012:	4623      	mov	r3, r4
 8003014:	eb18 0303 	adds.w	r3, r8, r3
 8003018:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800301c:	462b      	mov	r3, r5
 800301e:	eb49 0303 	adc.w	r3, r9, r3
 8003022:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003032:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003036:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800303a:	460b      	mov	r3, r1
 800303c:	18db      	adds	r3, r3, r3
 800303e:	653b      	str	r3, [r7, #80]	; 0x50
 8003040:	4613      	mov	r3, r2
 8003042:	eb42 0303 	adc.w	r3, r2, r3
 8003046:	657b      	str	r3, [r7, #84]	; 0x54
 8003048:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800304c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003050:	f7fd f91e 	bl	8000290 <__aeabi_uldivmod>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4b61      	ldr	r3, [pc, #388]	; (80031e0 <UART_SetConfig+0x2d4>)
 800305a:	fba3 2302 	umull	r2, r3, r3, r2
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	011c      	lsls	r4, r3, #4
 8003062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003066:	2200      	movs	r2, #0
 8003068:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800306c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003070:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003074:	4642      	mov	r2, r8
 8003076:	464b      	mov	r3, r9
 8003078:	1891      	adds	r1, r2, r2
 800307a:	64b9      	str	r1, [r7, #72]	; 0x48
 800307c:	415b      	adcs	r3, r3
 800307e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003080:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003084:	4641      	mov	r1, r8
 8003086:	eb12 0a01 	adds.w	sl, r2, r1
 800308a:	4649      	mov	r1, r9
 800308c:	eb43 0b01 	adc.w	fp, r3, r1
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800309c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030a4:	4692      	mov	sl, r2
 80030a6:	469b      	mov	fp, r3
 80030a8:	4643      	mov	r3, r8
 80030aa:	eb1a 0303 	adds.w	r3, sl, r3
 80030ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030b2:	464b      	mov	r3, r9
 80030b4:	eb4b 0303 	adc.w	r3, fp, r3
 80030b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80030bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80030cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80030d0:	460b      	mov	r3, r1
 80030d2:	18db      	adds	r3, r3, r3
 80030d4:	643b      	str	r3, [r7, #64]	; 0x40
 80030d6:	4613      	mov	r3, r2
 80030d8:	eb42 0303 	adc.w	r3, r2, r3
 80030dc:	647b      	str	r3, [r7, #68]	; 0x44
 80030de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80030e6:	f7fd f8d3 	bl	8000290 <__aeabi_uldivmod>
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	4611      	mov	r1, r2
 80030f0:	4b3b      	ldr	r3, [pc, #236]	; (80031e0 <UART_SetConfig+0x2d4>)
 80030f2:	fba3 2301 	umull	r2, r3, r3, r1
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	2264      	movs	r2, #100	; 0x64
 80030fa:	fb02 f303 	mul.w	r3, r2, r3
 80030fe:	1acb      	subs	r3, r1, r3
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003106:	4b36      	ldr	r3, [pc, #216]	; (80031e0 <UART_SetConfig+0x2d4>)
 8003108:	fba3 2302 	umull	r2, r3, r3, r2
 800310c:	095b      	lsrs	r3, r3, #5
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003114:	441c      	add	r4, r3
 8003116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800311a:	2200      	movs	r2, #0
 800311c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003120:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003124:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003128:	4642      	mov	r2, r8
 800312a:	464b      	mov	r3, r9
 800312c:	1891      	adds	r1, r2, r2
 800312e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003130:	415b      	adcs	r3, r3
 8003132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003134:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003138:	4641      	mov	r1, r8
 800313a:	1851      	adds	r1, r2, r1
 800313c:	6339      	str	r1, [r7, #48]	; 0x30
 800313e:	4649      	mov	r1, r9
 8003140:	414b      	adcs	r3, r1
 8003142:	637b      	str	r3, [r7, #52]	; 0x34
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003150:	4659      	mov	r1, fp
 8003152:	00cb      	lsls	r3, r1, #3
 8003154:	4651      	mov	r1, sl
 8003156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800315a:	4651      	mov	r1, sl
 800315c:	00ca      	lsls	r2, r1, #3
 800315e:	4610      	mov	r0, r2
 8003160:	4619      	mov	r1, r3
 8003162:	4603      	mov	r3, r0
 8003164:	4642      	mov	r2, r8
 8003166:	189b      	adds	r3, r3, r2
 8003168:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800316c:	464b      	mov	r3, r9
 800316e:	460a      	mov	r2, r1
 8003170:	eb42 0303 	adc.w	r3, r2, r3
 8003174:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003184:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003188:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800318c:	460b      	mov	r3, r1
 800318e:	18db      	adds	r3, r3, r3
 8003190:	62bb      	str	r3, [r7, #40]	; 0x28
 8003192:	4613      	mov	r3, r2
 8003194:	eb42 0303 	adc.w	r3, r2, r3
 8003198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800319a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800319e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80031a2:	f7fd f875 	bl	8000290 <__aeabi_uldivmod>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4b0d      	ldr	r3, [pc, #52]	; (80031e0 <UART_SetConfig+0x2d4>)
 80031ac:	fba3 1302 	umull	r1, r3, r3, r2
 80031b0:	095b      	lsrs	r3, r3, #5
 80031b2:	2164      	movs	r1, #100	; 0x64
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	3332      	adds	r3, #50	; 0x32
 80031be:	4a08      	ldr	r2, [pc, #32]	; (80031e0 <UART_SetConfig+0x2d4>)
 80031c0:	fba2 2303 	umull	r2, r3, r2, r3
 80031c4:	095b      	lsrs	r3, r3, #5
 80031c6:	f003 0207 	and.w	r2, r3, #7
 80031ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4422      	add	r2, r4
 80031d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031d4:	e105      	b.n	80033e2 <UART_SetConfig+0x4d6>
 80031d6:	bf00      	nop
 80031d8:	40011000 	.word	0x40011000
 80031dc:	40011400 	.word	0x40011400
 80031e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031e8:	2200      	movs	r2, #0
 80031ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80031f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80031f6:	4642      	mov	r2, r8
 80031f8:	464b      	mov	r3, r9
 80031fa:	1891      	adds	r1, r2, r2
 80031fc:	6239      	str	r1, [r7, #32]
 80031fe:	415b      	adcs	r3, r3
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
 8003202:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003206:	4641      	mov	r1, r8
 8003208:	1854      	adds	r4, r2, r1
 800320a:	4649      	mov	r1, r9
 800320c:	eb43 0501 	adc.w	r5, r3, r1
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	00eb      	lsls	r3, r5, #3
 800321a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800321e:	00e2      	lsls	r2, r4, #3
 8003220:	4614      	mov	r4, r2
 8003222:	461d      	mov	r5, r3
 8003224:	4643      	mov	r3, r8
 8003226:	18e3      	adds	r3, r4, r3
 8003228:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800322c:	464b      	mov	r3, r9
 800322e:	eb45 0303 	adc.w	r3, r5, r3
 8003232:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003242:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	f04f 0300 	mov.w	r3, #0
 800324e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003252:	4629      	mov	r1, r5
 8003254:	008b      	lsls	r3, r1, #2
 8003256:	4621      	mov	r1, r4
 8003258:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800325c:	4621      	mov	r1, r4
 800325e:	008a      	lsls	r2, r1, #2
 8003260:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003264:	f7fd f814 	bl	8000290 <__aeabi_uldivmod>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4b60      	ldr	r3, [pc, #384]	; (80033f0 <UART_SetConfig+0x4e4>)
 800326e:	fba3 2302 	umull	r2, r3, r3, r2
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	011c      	lsls	r4, r3, #4
 8003276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800327a:	2200      	movs	r2, #0
 800327c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003280:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003284:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003288:	4642      	mov	r2, r8
 800328a:	464b      	mov	r3, r9
 800328c:	1891      	adds	r1, r2, r2
 800328e:	61b9      	str	r1, [r7, #24]
 8003290:	415b      	adcs	r3, r3
 8003292:	61fb      	str	r3, [r7, #28]
 8003294:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003298:	4641      	mov	r1, r8
 800329a:	1851      	adds	r1, r2, r1
 800329c:	6139      	str	r1, [r7, #16]
 800329e:	4649      	mov	r1, r9
 80032a0:	414b      	adcs	r3, r1
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	f04f 0300 	mov.w	r3, #0
 80032ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032b0:	4659      	mov	r1, fp
 80032b2:	00cb      	lsls	r3, r1, #3
 80032b4:	4651      	mov	r1, sl
 80032b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032ba:	4651      	mov	r1, sl
 80032bc:	00ca      	lsls	r2, r1, #3
 80032be:	4610      	mov	r0, r2
 80032c0:	4619      	mov	r1, r3
 80032c2:	4603      	mov	r3, r0
 80032c4:	4642      	mov	r2, r8
 80032c6:	189b      	adds	r3, r3, r2
 80032c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032cc:	464b      	mov	r3, r9
 80032ce:	460a      	mov	r2, r1
 80032d0:	eb42 0303 	adc.w	r3, r2, r3
 80032d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80032e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80032f0:	4649      	mov	r1, r9
 80032f2:	008b      	lsls	r3, r1, #2
 80032f4:	4641      	mov	r1, r8
 80032f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032fa:	4641      	mov	r1, r8
 80032fc:	008a      	lsls	r2, r1, #2
 80032fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003302:	f7fc ffc5 	bl	8000290 <__aeabi_uldivmod>
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	4b39      	ldr	r3, [pc, #228]	; (80033f0 <UART_SetConfig+0x4e4>)
 800330c:	fba3 1302 	umull	r1, r3, r3, r2
 8003310:	095b      	lsrs	r3, r3, #5
 8003312:	2164      	movs	r1, #100	; 0x64
 8003314:	fb01 f303 	mul.w	r3, r1, r3
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	3332      	adds	r3, #50	; 0x32
 800331e:	4a34      	ldr	r2, [pc, #208]	; (80033f0 <UART_SetConfig+0x4e4>)
 8003320:	fba2 2303 	umull	r2, r3, r2, r3
 8003324:	095b      	lsrs	r3, r3, #5
 8003326:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800332a:	441c      	add	r4, r3
 800332c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003330:	2200      	movs	r2, #0
 8003332:	673b      	str	r3, [r7, #112]	; 0x70
 8003334:	677a      	str	r2, [r7, #116]	; 0x74
 8003336:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800333a:	4642      	mov	r2, r8
 800333c:	464b      	mov	r3, r9
 800333e:	1891      	adds	r1, r2, r2
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	415b      	adcs	r3, r3
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800334a:	4641      	mov	r1, r8
 800334c:	1851      	adds	r1, r2, r1
 800334e:	6039      	str	r1, [r7, #0]
 8003350:	4649      	mov	r1, r9
 8003352:	414b      	adcs	r3, r1
 8003354:	607b      	str	r3, [r7, #4]
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003362:	4659      	mov	r1, fp
 8003364:	00cb      	lsls	r3, r1, #3
 8003366:	4651      	mov	r1, sl
 8003368:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800336c:	4651      	mov	r1, sl
 800336e:	00ca      	lsls	r2, r1, #3
 8003370:	4610      	mov	r0, r2
 8003372:	4619      	mov	r1, r3
 8003374:	4603      	mov	r3, r0
 8003376:	4642      	mov	r2, r8
 8003378:	189b      	adds	r3, r3, r2
 800337a:	66bb      	str	r3, [r7, #104]	; 0x68
 800337c:	464b      	mov	r3, r9
 800337e:	460a      	mov	r2, r1
 8003380:	eb42 0303 	adc.w	r3, r2, r3
 8003384:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	663b      	str	r3, [r7, #96]	; 0x60
 8003390:	667a      	str	r2, [r7, #100]	; 0x64
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800339e:	4649      	mov	r1, r9
 80033a0:	008b      	lsls	r3, r1, #2
 80033a2:	4641      	mov	r1, r8
 80033a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033a8:	4641      	mov	r1, r8
 80033aa:	008a      	lsls	r2, r1, #2
 80033ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80033b0:	f7fc ff6e 	bl	8000290 <__aeabi_uldivmod>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4b0d      	ldr	r3, [pc, #52]	; (80033f0 <UART_SetConfig+0x4e4>)
 80033ba:	fba3 1302 	umull	r1, r3, r3, r2
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	2164      	movs	r1, #100	; 0x64
 80033c2:	fb01 f303 	mul.w	r3, r1, r3
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	3332      	adds	r3, #50	; 0x32
 80033cc:	4a08      	ldr	r2, [pc, #32]	; (80033f0 <UART_SetConfig+0x4e4>)
 80033ce:	fba2 2303 	umull	r2, r3, r2, r3
 80033d2:	095b      	lsrs	r3, r3, #5
 80033d4:	f003 020f 	and.w	r2, r3, #15
 80033d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4422      	add	r2, r4
 80033e0:	609a      	str	r2, [r3, #8]
}
 80033e2:	bf00      	nop
 80033e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80033e8:	46bd      	mov	sp, r7
 80033ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ee:	bf00      	nop
 80033f0:	51eb851f 	.word	0x51eb851f

080033f4 <__errno>:
 80033f4:	4b01      	ldr	r3, [pc, #4]	; (80033fc <__errno+0x8>)
 80033f6:	6818      	ldr	r0, [r3, #0]
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	20000044 	.word	0x20000044

08003400 <__libc_init_array>:
 8003400:	b570      	push	{r4, r5, r6, lr}
 8003402:	4d0d      	ldr	r5, [pc, #52]	; (8003438 <__libc_init_array+0x38>)
 8003404:	4c0d      	ldr	r4, [pc, #52]	; (800343c <__libc_init_array+0x3c>)
 8003406:	1b64      	subs	r4, r4, r5
 8003408:	10a4      	asrs	r4, r4, #2
 800340a:	2600      	movs	r6, #0
 800340c:	42a6      	cmp	r6, r4
 800340e:	d109      	bne.n	8003424 <__libc_init_array+0x24>
 8003410:	4d0b      	ldr	r5, [pc, #44]	; (8003440 <__libc_init_array+0x40>)
 8003412:	4c0c      	ldr	r4, [pc, #48]	; (8003444 <__libc_init_array+0x44>)
 8003414:	f000 fe20 	bl	8004058 <_init>
 8003418:	1b64      	subs	r4, r4, r5
 800341a:	10a4      	asrs	r4, r4, #2
 800341c:	2600      	movs	r6, #0
 800341e:	42a6      	cmp	r6, r4
 8003420:	d105      	bne.n	800342e <__libc_init_array+0x2e>
 8003422:	bd70      	pop	{r4, r5, r6, pc}
 8003424:	f855 3b04 	ldr.w	r3, [r5], #4
 8003428:	4798      	blx	r3
 800342a:	3601      	adds	r6, #1
 800342c:	e7ee      	b.n	800340c <__libc_init_array+0xc>
 800342e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003432:	4798      	blx	r3
 8003434:	3601      	adds	r6, #1
 8003436:	e7f2      	b.n	800341e <__libc_init_array+0x1e>
 8003438:	080042d4 	.word	0x080042d4
 800343c:	080042d4 	.word	0x080042d4
 8003440:	080042d4 	.word	0x080042d4
 8003444:	080042d8 	.word	0x080042d8

08003448 <memcpy>:
 8003448:	440a      	add	r2, r1
 800344a:	4291      	cmp	r1, r2
 800344c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003450:	d100      	bne.n	8003454 <memcpy+0xc>
 8003452:	4770      	bx	lr
 8003454:	b510      	push	{r4, lr}
 8003456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800345a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800345e:	4291      	cmp	r1, r2
 8003460:	d1f9      	bne.n	8003456 <memcpy+0xe>
 8003462:	bd10      	pop	{r4, pc}

08003464 <memset>:
 8003464:	4402      	add	r2, r0
 8003466:	4603      	mov	r3, r0
 8003468:	4293      	cmp	r3, r2
 800346a:	d100      	bne.n	800346e <memset+0xa>
 800346c:	4770      	bx	lr
 800346e:	f803 1b01 	strb.w	r1, [r3], #1
 8003472:	e7f9      	b.n	8003468 <memset+0x4>

08003474 <siscanf>:
 8003474:	b40e      	push	{r1, r2, r3}
 8003476:	b510      	push	{r4, lr}
 8003478:	b09f      	sub	sp, #124	; 0x7c
 800347a:	ac21      	add	r4, sp, #132	; 0x84
 800347c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8003480:	f854 2b04 	ldr.w	r2, [r4], #4
 8003484:	9201      	str	r2, [sp, #4]
 8003486:	f8ad 101c 	strh.w	r1, [sp, #28]
 800348a:	9004      	str	r0, [sp, #16]
 800348c:	9008      	str	r0, [sp, #32]
 800348e:	f7fc fea7 	bl	80001e0 <strlen>
 8003492:	4b0c      	ldr	r3, [pc, #48]	; (80034c4 <siscanf+0x50>)
 8003494:	9005      	str	r0, [sp, #20]
 8003496:	9009      	str	r0, [sp, #36]	; 0x24
 8003498:	930d      	str	r3, [sp, #52]	; 0x34
 800349a:	480b      	ldr	r0, [pc, #44]	; (80034c8 <siscanf+0x54>)
 800349c:	9a01      	ldr	r2, [sp, #4]
 800349e:	6800      	ldr	r0, [r0, #0]
 80034a0:	9403      	str	r4, [sp, #12]
 80034a2:	2300      	movs	r3, #0
 80034a4:	9311      	str	r3, [sp, #68]	; 0x44
 80034a6:	9316      	str	r3, [sp, #88]	; 0x58
 80034a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034ac:	f8ad 301e 	strh.w	r3, [sp, #30]
 80034b0:	a904      	add	r1, sp, #16
 80034b2:	4623      	mov	r3, r4
 80034b4:	f000 f866 	bl	8003584 <__ssvfiscanf_r>
 80034b8:	b01f      	add	sp, #124	; 0x7c
 80034ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034be:	b003      	add	sp, #12
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	080034cd 	.word	0x080034cd
 80034c8:	20000044 	.word	0x20000044

080034cc <__seofread>:
 80034cc:	2000      	movs	r0, #0
 80034ce:	4770      	bx	lr

080034d0 <_sungetc_r>:
 80034d0:	b538      	push	{r3, r4, r5, lr}
 80034d2:	1c4b      	adds	r3, r1, #1
 80034d4:	4614      	mov	r4, r2
 80034d6:	d103      	bne.n	80034e0 <_sungetc_r+0x10>
 80034d8:	f04f 35ff 	mov.w	r5, #4294967295
 80034dc:	4628      	mov	r0, r5
 80034de:	bd38      	pop	{r3, r4, r5, pc}
 80034e0:	8993      	ldrh	r3, [r2, #12]
 80034e2:	f023 0320 	bic.w	r3, r3, #32
 80034e6:	8193      	strh	r3, [r2, #12]
 80034e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034ea:	6852      	ldr	r2, [r2, #4]
 80034ec:	b2cd      	uxtb	r5, r1
 80034ee:	b18b      	cbz	r3, 8003514 <_sungetc_r+0x44>
 80034f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034f2:	4293      	cmp	r3, r2
 80034f4:	dd08      	ble.n	8003508 <_sungetc_r+0x38>
 80034f6:	6823      	ldr	r3, [r4, #0]
 80034f8:	1e5a      	subs	r2, r3, #1
 80034fa:	6022      	str	r2, [r4, #0]
 80034fc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003500:	6863      	ldr	r3, [r4, #4]
 8003502:	3301      	adds	r3, #1
 8003504:	6063      	str	r3, [r4, #4]
 8003506:	e7e9      	b.n	80034dc <_sungetc_r+0xc>
 8003508:	4621      	mov	r1, r4
 800350a:	f000 fc35 	bl	8003d78 <__submore>
 800350e:	2800      	cmp	r0, #0
 8003510:	d0f1      	beq.n	80034f6 <_sungetc_r+0x26>
 8003512:	e7e1      	b.n	80034d8 <_sungetc_r+0x8>
 8003514:	6921      	ldr	r1, [r4, #16]
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	b151      	cbz	r1, 8003530 <_sungetc_r+0x60>
 800351a:	4299      	cmp	r1, r3
 800351c:	d208      	bcs.n	8003530 <_sungetc_r+0x60>
 800351e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003522:	42a9      	cmp	r1, r5
 8003524:	d104      	bne.n	8003530 <_sungetc_r+0x60>
 8003526:	3b01      	subs	r3, #1
 8003528:	3201      	adds	r2, #1
 800352a:	6023      	str	r3, [r4, #0]
 800352c:	6062      	str	r2, [r4, #4]
 800352e:	e7d5      	b.n	80034dc <_sungetc_r+0xc>
 8003530:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003538:	6363      	str	r3, [r4, #52]	; 0x34
 800353a:	2303      	movs	r3, #3
 800353c:	63a3      	str	r3, [r4, #56]	; 0x38
 800353e:	4623      	mov	r3, r4
 8003540:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003544:	6023      	str	r3, [r4, #0]
 8003546:	2301      	movs	r3, #1
 8003548:	e7dc      	b.n	8003504 <_sungetc_r+0x34>

0800354a <__ssrefill_r>:
 800354a:	b510      	push	{r4, lr}
 800354c:	460c      	mov	r4, r1
 800354e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003550:	b169      	cbz	r1, 800356e <__ssrefill_r+0x24>
 8003552:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003556:	4299      	cmp	r1, r3
 8003558:	d001      	beq.n	800355e <__ssrefill_r+0x14>
 800355a:	f000 fc49 	bl	8003df0 <_free_r>
 800355e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003560:	6063      	str	r3, [r4, #4]
 8003562:	2000      	movs	r0, #0
 8003564:	6360      	str	r0, [r4, #52]	; 0x34
 8003566:	b113      	cbz	r3, 800356e <__ssrefill_r+0x24>
 8003568:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800356a:	6023      	str	r3, [r4, #0]
 800356c:	bd10      	pop	{r4, pc}
 800356e:	6923      	ldr	r3, [r4, #16]
 8003570:	6023      	str	r3, [r4, #0]
 8003572:	2300      	movs	r3, #0
 8003574:	6063      	str	r3, [r4, #4]
 8003576:	89a3      	ldrh	r3, [r4, #12]
 8003578:	f043 0320 	orr.w	r3, r3, #32
 800357c:	81a3      	strh	r3, [r4, #12]
 800357e:	f04f 30ff 	mov.w	r0, #4294967295
 8003582:	e7f3      	b.n	800356c <__ssrefill_r+0x22>

08003584 <__ssvfiscanf_r>:
 8003584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003588:	460c      	mov	r4, r1
 800358a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800358e:	2100      	movs	r1, #0
 8003590:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8003594:	49a6      	ldr	r1, [pc, #664]	; (8003830 <__ssvfiscanf_r+0x2ac>)
 8003596:	91a0      	str	r1, [sp, #640]	; 0x280
 8003598:	f10d 0804 	add.w	r8, sp, #4
 800359c:	49a5      	ldr	r1, [pc, #660]	; (8003834 <__ssvfiscanf_r+0x2b0>)
 800359e:	4fa6      	ldr	r7, [pc, #664]	; (8003838 <__ssvfiscanf_r+0x2b4>)
 80035a0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800383c <__ssvfiscanf_r+0x2b8>
 80035a4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80035a8:	4606      	mov	r6, r0
 80035aa:	91a1      	str	r1, [sp, #644]	; 0x284
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	7813      	ldrb	r3, [r2, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 815a 	beq.w	800386a <__ssvfiscanf_r+0x2e6>
 80035b6:	5dd9      	ldrb	r1, [r3, r7]
 80035b8:	f011 0108 	ands.w	r1, r1, #8
 80035bc:	f102 0501 	add.w	r5, r2, #1
 80035c0:	d019      	beq.n	80035f6 <__ssvfiscanf_r+0x72>
 80035c2:	6863      	ldr	r3, [r4, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	dd0f      	ble.n	80035e8 <__ssvfiscanf_r+0x64>
 80035c8:	6823      	ldr	r3, [r4, #0]
 80035ca:	781a      	ldrb	r2, [r3, #0]
 80035cc:	5cba      	ldrb	r2, [r7, r2]
 80035ce:	0712      	lsls	r2, r2, #28
 80035d0:	d401      	bmi.n	80035d6 <__ssvfiscanf_r+0x52>
 80035d2:	462a      	mov	r2, r5
 80035d4:	e7eb      	b.n	80035ae <__ssvfiscanf_r+0x2a>
 80035d6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80035d8:	3201      	adds	r2, #1
 80035da:	9245      	str	r2, [sp, #276]	; 0x114
 80035dc:	6862      	ldr	r2, [r4, #4]
 80035de:	3301      	adds	r3, #1
 80035e0:	3a01      	subs	r2, #1
 80035e2:	6062      	str	r2, [r4, #4]
 80035e4:	6023      	str	r3, [r4, #0]
 80035e6:	e7ec      	b.n	80035c2 <__ssvfiscanf_r+0x3e>
 80035e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80035ea:	4621      	mov	r1, r4
 80035ec:	4630      	mov	r0, r6
 80035ee:	4798      	blx	r3
 80035f0:	2800      	cmp	r0, #0
 80035f2:	d0e9      	beq.n	80035c8 <__ssvfiscanf_r+0x44>
 80035f4:	e7ed      	b.n	80035d2 <__ssvfiscanf_r+0x4e>
 80035f6:	2b25      	cmp	r3, #37	; 0x25
 80035f8:	d012      	beq.n	8003620 <__ssvfiscanf_r+0x9c>
 80035fa:	469a      	mov	sl, r3
 80035fc:	6863      	ldr	r3, [r4, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f340 8091 	ble.w	8003726 <__ssvfiscanf_r+0x1a2>
 8003604:	6822      	ldr	r2, [r4, #0]
 8003606:	7813      	ldrb	r3, [r2, #0]
 8003608:	4553      	cmp	r3, sl
 800360a:	f040 812e 	bne.w	800386a <__ssvfiscanf_r+0x2e6>
 800360e:	6863      	ldr	r3, [r4, #4]
 8003610:	3b01      	subs	r3, #1
 8003612:	6063      	str	r3, [r4, #4]
 8003614:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003616:	3201      	adds	r2, #1
 8003618:	3301      	adds	r3, #1
 800361a:	6022      	str	r2, [r4, #0]
 800361c:	9345      	str	r3, [sp, #276]	; 0x114
 800361e:	e7d8      	b.n	80035d2 <__ssvfiscanf_r+0x4e>
 8003620:	9141      	str	r1, [sp, #260]	; 0x104
 8003622:	9143      	str	r1, [sp, #268]	; 0x10c
 8003624:	7853      	ldrb	r3, [r2, #1]
 8003626:	2b2a      	cmp	r3, #42	; 0x2a
 8003628:	bf02      	ittt	eq
 800362a:	2310      	moveq	r3, #16
 800362c:	1c95      	addeq	r5, r2, #2
 800362e:	9341      	streq	r3, [sp, #260]	; 0x104
 8003630:	220a      	movs	r2, #10
 8003632:	46aa      	mov	sl, r5
 8003634:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003638:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800363c:	2b09      	cmp	r3, #9
 800363e:	d91d      	bls.n	800367c <__ssvfiscanf_r+0xf8>
 8003640:	487e      	ldr	r0, [pc, #504]	; (800383c <__ssvfiscanf_r+0x2b8>)
 8003642:	2203      	movs	r2, #3
 8003644:	f7fc fdd4 	bl	80001f0 <memchr>
 8003648:	b140      	cbz	r0, 800365c <__ssvfiscanf_r+0xd8>
 800364a:	2301      	movs	r3, #1
 800364c:	eba0 0009 	sub.w	r0, r0, r9
 8003650:	fa03 f000 	lsl.w	r0, r3, r0
 8003654:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003656:	4318      	orrs	r0, r3
 8003658:	9041      	str	r0, [sp, #260]	; 0x104
 800365a:	4655      	mov	r5, sl
 800365c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003660:	2b78      	cmp	r3, #120	; 0x78
 8003662:	d806      	bhi.n	8003672 <__ssvfiscanf_r+0xee>
 8003664:	2b57      	cmp	r3, #87	; 0x57
 8003666:	d810      	bhi.n	800368a <__ssvfiscanf_r+0x106>
 8003668:	2b25      	cmp	r3, #37	; 0x25
 800366a:	d0c6      	beq.n	80035fa <__ssvfiscanf_r+0x76>
 800366c:	d856      	bhi.n	800371c <__ssvfiscanf_r+0x198>
 800366e:	2b00      	cmp	r3, #0
 8003670:	d064      	beq.n	800373c <__ssvfiscanf_r+0x1b8>
 8003672:	2303      	movs	r3, #3
 8003674:	9347      	str	r3, [sp, #284]	; 0x11c
 8003676:	230a      	movs	r3, #10
 8003678:	9342      	str	r3, [sp, #264]	; 0x108
 800367a:	e071      	b.n	8003760 <__ssvfiscanf_r+0x1dc>
 800367c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800367e:	fb02 1103 	mla	r1, r2, r3, r1
 8003682:	3930      	subs	r1, #48	; 0x30
 8003684:	9143      	str	r1, [sp, #268]	; 0x10c
 8003686:	4655      	mov	r5, sl
 8003688:	e7d3      	b.n	8003632 <__ssvfiscanf_r+0xae>
 800368a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800368e:	2a20      	cmp	r2, #32
 8003690:	d8ef      	bhi.n	8003672 <__ssvfiscanf_r+0xee>
 8003692:	a101      	add	r1, pc, #4	; (adr r1, 8003698 <__ssvfiscanf_r+0x114>)
 8003694:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003698:	0800374b 	.word	0x0800374b
 800369c:	08003673 	.word	0x08003673
 80036a0:	08003673 	.word	0x08003673
 80036a4:	080037a9 	.word	0x080037a9
 80036a8:	08003673 	.word	0x08003673
 80036ac:	08003673 	.word	0x08003673
 80036b0:	08003673 	.word	0x08003673
 80036b4:	08003673 	.word	0x08003673
 80036b8:	08003673 	.word	0x08003673
 80036bc:	08003673 	.word	0x08003673
 80036c0:	08003673 	.word	0x08003673
 80036c4:	080037bf 	.word	0x080037bf
 80036c8:	08003795 	.word	0x08003795
 80036cc:	08003723 	.word	0x08003723
 80036d0:	08003723 	.word	0x08003723
 80036d4:	08003723 	.word	0x08003723
 80036d8:	08003673 	.word	0x08003673
 80036dc:	08003799 	.word	0x08003799
 80036e0:	08003673 	.word	0x08003673
 80036e4:	08003673 	.word	0x08003673
 80036e8:	08003673 	.word	0x08003673
 80036ec:	08003673 	.word	0x08003673
 80036f0:	080037cf 	.word	0x080037cf
 80036f4:	080037a1 	.word	0x080037a1
 80036f8:	08003743 	.word	0x08003743
 80036fc:	08003673 	.word	0x08003673
 8003700:	08003673 	.word	0x08003673
 8003704:	080037cb 	.word	0x080037cb
 8003708:	08003673 	.word	0x08003673
 800370c:	08003795 	.word	0x08003795
 8003710:	08003673 	.word	0x08003673
 8003714:	08003673 	.word	0x08003673
 8003718:	0800374b 	.word	0x0800374b
 800371c:	3b45      	subs	r3, #69	; 0x45
 800371e:	2b02      	cmp	r3, #2
 8003720:	d8a7      	bhi.n	8003672 <__ssvfiscanf_r+0xee>
 8003722:	2305      	movs	r3, #5
 8003724:	e01b      	b.n	800375e <__ssvfiscanf_r+0x1da>
 8003726:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003728:	4621      	mov	r1, r4
 800372a:	4630      	mov	r0, r6
 800372c:	4798      	blx	r3
 800372e:	2800      	cmp	r0, #0
 8003730:	f43f af68 	beq.w	8003604 <__ssvfiscanf_r+0x80>
 8003734:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003736:	2800      	cmp	r0, #0
 8003738:	f040 808d 	bne.w	8003856 <__ssvfiscanf_r+0x2d2>
 800373c:	f04f 30ff 	mov.w	r0, #4294967295
 8003740:	e08f      	b.n	8003862 <__ssvfiscanf_r+0x2de>
 8003742:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003744:	f042 0220 	orr.w	r2, r2, #32
 8003748:	9241      	str	r2, [sp, #260]	; 0x104
 800374a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800374c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003750:	9241      	str	r2, [sp, #260]	; 0x104
 8003752:	2210      	movs	r2, #16
 8003754:	2b6f      	cmp	r3, #111	; 0x6f
 8003756:	9242      	str	r2, [sp, #264]	; 0x108
 8003758:	bf34      	ite	cc
 800375a:	2303      	movcc	r3, #3
 800375c:	2304      	movcs	r3, #4
 800375e:	9347      	str	r3, [sp, #284]	; 0x11c
 8003760:	6863      	ldr	r3, [r4, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	dd42      	ble.n	80037ec <__ssvfiscanf_r+0x268>
 8003766:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003768:	0659      	lsls	r1, r3, #25
 800376a:	d404      	bmi.n	8003776 <__ssvfiscanf_r+0x1f2>
 800376c:	6823      	ldr	r3, [r4, #0]
 800376e:	781a      	ldrb	r2, [r3, #0]
 8003770:	5cba      	ldrb	r2, [r7, r2]
 8003772:	0712      	lsls	r2, r2, #28
 8003774:	d441      	bmi.n	80037fa <__ssvfiscanf_r+0x276>
 8003776:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003778:	2b02      	cmp	r3, #2
 800377a:	dc50      	bgt.n	800381e <__ssvfiscanf_r+0x29a>
 800377c:	466b      	mov	r3, sp
 800377e:	4622      	mov	r2, r4
 8003780:	a941      	add	r1, sp, #260	; 0x104
 8003782:	4630      	mov	r0, r6
 8003784:	f000 f876 	bl	8003874 <_scanf_chars>
 8003788:	2801      	cmp	r0, #1
 800378a:	d06e      	beq.n	800386a <__ssvfiscanf_r+0x2e6>
 800378c:	2802      	cmp	r0, #2
 800378e:	f47f af20 	bne.w	80035d2 <__ssvfiscanf_r+0x4e>
 8003792:	e7cf      	b.n	8003734 <__ssvfiscanf_r+0x1b0>
 8003794:	220a      	movs	r2, #10
 8003796:	e7dd      	b.n	8003754 <__ssvfiscanf_r+0x1d0>
 8003798:	2300      	movs	r3, #0
 800379a:	9342      	str	r3, [sp, #264]	; 0x108
 800379c:	2303      	movs	r3, #3
 800379e:	e7de      	b.n	800375e <__ssvfiscanf_r+0x1da>
 80037a0:	2308      	movs	r3, #8
 80037a2:	9342      	str	r3, [sp, #264]	; 0x108
 80037a4:	2304      	movs	r3, #4
 80037a6:	e7da      	b.n	800375e <__ssvfiscanf_r+0x1da>
 80037a8:	4629      	mov	r1, r5
 80037aa:	4640      	mov	r0, r8
 80037ac:	f000 f9b4 	bl	8003b18 <__sccl>
 80037b0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80037b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037b6:	9341      	str	r3, [sp, #260]	; 0x104
 80037b8:	4605      	mov	r5, r0
 80037ba:	2301      	movs	r3, #1
 80037bc:	e7cf      	b.n	800375e <__ssvfiscanf_r+0x1da>
 80037be:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80037c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037c4:	9341      	str	r3, [sp, #260]	; 0x104
 80037c6:	2300      	movs	r3, #0
 80037c8:	e7c9      	b.n	800375e <__ssvfiscanf_r+0x1da>
 80037ca:	2302      	movs	r3, #2
 80037cc:	e7c7      	b.n	800375e <__ssvfiscanf_r+0x1da>
 80037ce:	9841      	ldr	r0, [sp, #260]	; 0x104
 80037d0:	06c3      	lsls	r3, r0, #27
 80037d2:	f53f aefe 	bmi.w	80035d2 <__ssvfiscanf_r+0x4e>
 80037d6:	9b00      	ldr	r3, [sp, #0]
 80037d8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80037da:	1d19      	adds	r1, r3, #4
 80037dc:	9100      	str	r1, [sp, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f010 0f01 	tst.w	r0, #1
 80037e4:	bf14      	ite	ne
 80037e6:	801a      	strhne	r2, [r3, #0]
 80037e8:	601a      	streq	r2, [r3, #0]
 80037ea:	e6f2      	b.n	80035d2 <__ssvfiscanf_r+0x4e>
 80037ec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80037ee:	4621      	mov	r1, r4
 80037f0:	4630      	mov	r0, r6
 80037f2:	4798      	blx	r3
 80037f4:	2800      	cmp	r0, #0
 80037f6:	d0b6      	beq.n	8003766 <__ssvfiscanf_r+0x1e2>
 80037f8:	e79c      	b.n	8003734 <__ssvfiscanf_r+0x1b0>
 80037fa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80037fc:	3201      	adds	r2, #1
 80037fe:	9245      	str	r2, [sp, #276]	; 0x114
 8003800:	6862      	ldr	r2, [r4, #4]
 8003802:	3a01      	subs	r2, #1
 8003804:	2a00      	cmp	r2, #0
 8003806:	6062      	str	r2, [r4, #4]
 8003808:	dd02      	ble.n	8003810 <__ssvfiscanf_r+0x28c>
 800380a:	3301      	adds	r3, #1
 800380c:	6023      	str	r3, [r4, #0]
 800380e:	e7ad      	b.n	800376c <__ssvfiscanf_r+0x1e8>
 8003810:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003812:	4621      	mov	r1, r4
 8003814:	4630      	mov	r0, r6
 8003816:	4798      	blx	r3
 8003818:	2800      	cmp	r0, #0
 800381a:	d0a7      	beq.n	800376c <__ssvfiscanf_r+0x1e8>
 800381c:	e78a      	b.n	8003734 <__ssvfiscanf_r+0x1b0>
 800381e:	2b04      	cmp	r3, #4
 8003820:	dc0e      	bgt.n	8003840 <__ssvfiscanf_r+0x2bc>
 8003822:	466b      	mov	r3, sp
 8003824:	4622      	mov	r2, r4
 8003826:	a941      	add	r1, sp, #260	; 0x104
 8003828:	4630      	mov	r0, r6
 800382a:	f000 f87d 	bl	8003928 <_scanf_i>
 800382e:	e7ab      	b.n	8003788 <__ssvfiscanf_r+0x204>
 8003830:	080034d1 	.word	0x080034d1
 8003834:	0800354b 	.word	0x0800354b
 8003838:	0800416c 	.word	0x0800416c
 800383c:	0800414c 	.word	0x0800414c
 8003840:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <__ssvfiscanf_r+0x2ec>)
 8003842:	2b00      	cmp	r3, #0
 8003844:	f43f aec5 	beq.w	80035d2 <__ssvfiscanf_r+0x4e>
 8003848:	466b      	mov	r3, sp
 800384a:	4622      	mov	r2, r4
 800384c:	a941      	add	r1, sp, #260	; 0x104
 800384e:	4630      	mov	r0, r6
 8003850:	f3af 8000 	nop.w
 8003854:	e798      	b.n	8003788 <__ssvfiscanf_r+0x204>
 8003856:	89a3      	ldrh	r3, [r4, #12]
 8003858:	f013 0f40 	tst.w	r3, #64	; 0x40
 800385c:	bf18      	it	ne
 800385e:	f04f 30ff 	movne.w	r0, #4294967295
 8003862:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8003866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800386a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800386c:	e7f9      	b.n	8003862 <__ssvfiscanf_r+0x2de>
 800386e:	bf00      	nop
 8003870:	00000000 	.word	0x00000000

08003874 <_scanf_chars>:
 8003874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003878:	4615      	mov	r5, r2
 800387a:	688a      	ldr	r2, [r1, #8]
 800387c:	4680      	mov	r8, r0
 800387e:	460c      	mov	r4, r1
 8003880:	b932      	cbnz	r2, 8003890 <_scanf_chars+0x1c>
 8003882:	698a      	ldr	r2, [r1, #24]
 8003884:	2a00      	cmp	r2, #0
 8003886:	bf0c      	ite	eq
 8003888:	2201      	moveq	r2, #1
 800388a:	f04f 32ff 	movne.w	r2, #4294967295
 800388e:	608a      	str	r2, [r1, #8]
 8003890:	6822      	ldr	r2, [r4, #0]
 8003892:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8003924 <_scanf_chars+0xb0>
 8003896:	06d1      	lsls	r1, r2, #27
 8003898:	bf5f      	itttt	pl
 800389a:	681a      	ldrpl	r2, [r3, #0]
 800389c:	1d11      	addpl	r1, r2, #4
 800389e:	6019      	strpl	r1, [r3, #0]
 80038a0:	6816      	ldrpl	r6, [r2, #0]
 80038a2:	2700      	movs	r7, #0
 80038a4:	69a0      	ldr	r0, [r4, #24]
 80038a6:	b188      	cbz	r0, 80038cc <_scanf_chars+0x58>
 80038a8:	2801      	cmp	r0, #1
 80038aa:	d107      	bne.n	80038bc <_scanf_chars+0x48>
 80038ac:	682a      	ldr	r2, [r5, #0]
 80038ae:	7811      	ldrb	r1, [r2, #0]
 80038b0:	6962      	ldr	r2, [r4, #20]
 80038b2:	5c52      	ldrb	r2, [r2, r1]
 80038b4:	b952      	cbnz	r2, 80038cc <_scanf_chars+0x58>
 80038b6:	2f00      	cmp	r7, #0
 80038b8:	d031      	beq.n	800391e <_scanf_chars+0xaa>
 80038ba:	e022      	b.n	8003902 <_scanf_chars+0x8e>
 80038bc:	2802      	cmp	r0, #2
 80038be:	d120      	bne.n	8003902 <_scanf_chars+0x8e>
 80038c0:	682b      	ldr	r3, [r5, #0]
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	f813 3009 	ldrb.w	r3, [r3, r9]
 80038c8:	071b      	lsls	r3, r3, #28
 80038ca:	d41a      	bmi.n	8003902 <_scanf_chars+0x8e>
 80038cc:	6823      	ldr	r3, [r4, #0]
 80038ce:	06da      	lsls	r2, r3, #27
 80038d0:	bf5e      	ittt	pl
 80038d2:	682b      	ldrpl	r3, [r5, #0]
 80038d4:	781b      	ldrbpl	r3, [r3, #0]
 80038d6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80038da:	682a      	ldr	r2, [r5, #0]
 80038dc:	686b      	ldr	r3, [r5, #4]
 80038de:	3201      	adds	r2, #1
 80038e0:	602a      	str	r2, [r5, #0]
 80038e2:	68a2      	ldr	r2, [r4, #8]
 80038e4:	3b01      	subs	r3, #1
 80038e6:	3a01      	subs	r2, #1
 80038e8:	606b      	str	r3, [r5, #4]
 80038ea:	3701      	adds	r7, #1
 80038ec:	60a2      	str	r2, [r4, #8]
 80038ee:	b142      	cbz	r2, 8003902 <_scanf_chars+0x8e>
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	dcd7      	bgt.n	80038a4 <_scanf_chars+0x30>
 80038f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80038f8:	4629      	mov	r1, r5
 80038fa:	4640      	mov	r0, r8
 80038fc:	4798      	blx	r3
 80038fe:	2800      	cmp	r0, #0
 8003900:	d0d0      	beq.n	80038a4 <_scanf_chars+0x30>
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	f013 0310 	ands.w	r3, r3, #16
 8003908:	d105      	bne.n	8003916 <_scanf_chars+0xa2>
 800390a:	68e2      	ldr	r2, [r4, #12]
 800390c:	3201      	adds	r2, #1
 800390e:	60e2      	str	r2, [r4, #12]
 8003910:	69a2      	ldr	r2, [r4, #24]
 8003912:	b102      	cbz	r2, 8003916 <_scanf_chars+0xa2>
 8003914:	7033      	strb	r3, [r6, #0]
 8003916:	6923      	ldr	r3, [r4, #16]
 8003918:	443b      	add	r3, r7
 800391a:	6123      	str	r3, [r4, #16]
 800391c:	2000      	movs	r0, #0
 800391e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003922:	bf00      	nop
 8003924:	0800416c 	.word	0x0800416c

08003928 <_scanf_i>:
 8003928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800392c:	4698      	mov	r8, r3
 800392e:	4b76      	ldr	r3, [pc, #472]	; (8003b08 <_scanf_i+0x1e0>)
 8003930:	460c      	mov	r4, r1
 8003932:	4682      	mov	sl, r0
 8003934:	4616      	mov	r6, r2
 8003936:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800393a:	b087      	sub	sp, #28
 800393c:	ab03      	add	r3, sp, #12
 800393e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003942:	4b72      	ldr	r3, [pc, #456]	; (8003b0c <_scanf_i+0x1e4>)
 8003944:	69a1      	ldr	r1, [r4, #24]
 8003946:	4a72      	ldr	r2, [pc, #456]	; (8003b10 <_scanf_i+0x1e8>)
 8003948:	2903      	cmp	r1, #3
 800394a:	bf18      	it	ne
 800394c:	461a      	movne	r2, r3
 800394e:	68a3      	ldr	r3, [r4, #8]
 8003950:	9201      	str	r2, [sp, #4]
 8003952:	1e5a      	subs	r2, r3, #1
 8003954:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003958:	bf88      	it	hi
 800395a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800395e:	4627      	mov	r7, r4
 8003960:	bf82      	ittt	hi
 8003962:	eb03 0905 	addhi.w	r9, r3, r5
 8003966:	f240 135d 	movwhi	r3, #349	; 0x15d
 800396a:	60a3      	strhi	r3, [r4, #8]
 800396c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003970:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003974:	bf98      	it	ls
 8003976:	f04f 0900 	movls.w	r9, #0
 800397a:	6023      	str	r3, [r4, #0]
 800397c:	463d      	mov	r5, r7
 800397e:	f04f 0b00 	mov.w	fp, #0
 8003982:	6831      	ldr	r1, [r6, #0]
 8003984:	ab03      	add	r3, sp, #12
 8003986:	7809      	ldrb	r1, [r1, #0]
 8003988:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800398c:	2202      	movs	r2, #2
 800398e:	f7fc fc2f 	bl	80001f0 <memchr>
 8003992:	b328      	cbz	r0, 80039e0 <_scanf_i+0xb8>
 8003994:	f1bb 0f01 	cmp.w	fp, #1
 8003998:	d159      	bne.n	8003a4e <_scanf_i+0x126>
 800399a:	6862      	ldr	r2, [r4, #4]
 800399c:	b92a      	cbnz	r2, 80039aa <_scanf_i+0x82>
 800399e:	6822      	ldr	r2, [r4, #0]
 80039a0:	2308      	movs	r3, #8
 80039a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039a6:	6063      	str	r3, [r4, #4]
 80039a8:	6022      	str	r2, [r4, #0]
 80039aa:	6822      	ldr	r2, [r4, #0]
 80039ac:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80039b0:	6022      	str	r2, [r4, #0]
 80039b2:	68a2      	ldr	r2, [r4, #8]
 80039b4:	1e51      	subs	r1, r2, #1
 80039b6:	60a1      	str	r1, [r4, #8]
 80039b8:	b192      	cbz	r2, 80039e0 <_scanf_i+0xb8>
 80039ba:	6832      	ldr	r2, [r6, #0]
 80039bc:	1c51      	adds	r1, r2, #1
 80039be:	6031      	str	r1, [r6, #0]
 80039c0:	7812      	ldrb	r2, [r2, #0]
 80039c2:	f805 2b01 	strb.w	r2, [r5], #1
 80039c6:	6872      	ldr	r2, [r6, #4]
 80039c8:	3a01      	subs	r2, #1
 80039ca:	2a00      	cmp	r2, #0
 80039cc:	6072      	str	r2, [r6, #4]
 80039ce:	dc07      	bgt.n	80039e0 <_scanf_i+0xb8>
 80039d0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80039d4:	4631      	mov	r1, r6
 80039d6:	4650      	mov	r0, sl
 80039d8:	4790      	blx	r2
 80039da:	2800      	cmp	r0, #0
 80039dc:	f040 8085 	bne.w	8003aea <_scanf_i+0x1c2>
 80039e0:	f10b 0b01 	add.w	fp, fp, #1
 80039e4:	f1bb 0f03 	cmp.w	fp, #3
 80039e8:	d1cb      	bne.n	8003982 <_scanf_i+0x5a>
 80039ea:	6863      	ldr	r3, [r4, #4]
 80039ec:	b90b      	cbnz	r3, 80039f2 <_scanf_i+0xca>
 80039ee:	230a      	movs	r3, #10
 80039f0:	6063      	str	r3, [r4, #4]
 80039f2:	6863      	ldr	r3, [r4, #4]
 80039f4:	4947      	ldr	r1, [pc, #284]	; (8003b14 <_scanf_i+0x1ec>)
 80039f6:	6960      	ldr	r0, [r4, #20]
 80039f8:	1ac9      	subs	r1, r1, r3
 80039fa:	f000 f88d 	bl	8003b18 <__sccl>
 80039fe:	f04f 0b00 	mov.w	fp, #0
 8003a02:	68a3      	ldr	r3, [r4, #8]
 8003a04:	6822      	ldr	r2, [r4, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d03d      	beq.n	8003a86 <_scanf_i+0x15e>
 8003a0a:	6831      	ldr	r1, [r6, #0]
 8003a0c:	6960      	ldr	r0, [r4, #20]
 8003a0e:	f891 c000 	ldrb.w	ip, [r1]
 8003a12:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003a16:	2800      	cmp	r0, #0
 8003a18:	d035      	beq.n	8003a86 <_scanf_i+0x15e>
 8003a1a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8003a1e:	d124      	bne.n	8003a6a <_scanf_i+0x142>
 8003a20:	0510      	lsls	r0, r2, #20
 8003a22:	d522      	bpl.n	8003a6a <_scanf_i+0x142>
 8003a24:	f10b 0b01 	add.w	fp, fp, #1
 8003a28:	f1b9 0f00 	cmp.w	r9, #0
 8003a2c:	d003      	beq.n	8003a36 <_scanf_i+0x10e>
 8003a2e:	3301      	adds	r3, #1
 8003a30:	f109 39ff 	add.w	r9, r9, #4294967295
 8003a34:	60a3      	str	r3, [r4, #8]
 8003a36:	6873      	ldr	r3, [r6, #4]
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	6073      	str	r3, [r6, #4]
 8003a3e:	dd1b      	ble.n	8003a78 <_scanf_i+0x150>
 8003a40:	6833      	ldr	r3, [r6, #0]
 8003a42:	3301      	adds	r3, #1
 8003a44:	6033      	str	r3, [r6, #0]
 8003a46:	68a3      	ldr	r3, [r4, #8]
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	60a3      	str	r3, [r4, #8]
 8003a4c:	e7d9      	b.n	8003a02 <_scanf_i+0xda>
 8003a4e:	f1bb 0f02 	cmp.w	fp, #2
 8003a52:	d1ae      	bne.n	80039b2 <_scanf_i+0x8a>
 8003a54:	6822      	ldr	r2, [r4, #0]
 8003a56:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8003a5a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003a5e:	d1bf      	bne.n	80039e0 <_scanf_i+0xb8>
 8003a60:	2310      	movs	r3, #16
 8003a62:	6063      	str	r3, [r4, #4]
 8003a64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a68:	e7a2      	b.n	80039b0 <_scanf_i+0x88>
 8003a6a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8003a6e:	6022      	str	r2, [r4, #0]
 8003a70:	780b      	ldrb	r3, [r1, #0]
 8003a72:	f805 3b01 	strb.w	r3, [r5], #1
 8003a76:	e7de      	b.n	8003a36 <_scanf_i+0x10e>
 8003a78:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003a7c:	4631      	mov	r1, r6
 8003a7e:	4650      	mov	r0, sl
 8003a80:	4798      	blx	r3
 8003a82:	2800      	cmp	r0, #0
 8003a84:	d0df      	beq.n	8003a46 <_scanf_i+0x11e>
 8003a86:	6823      	ldr	r3, [r4, #0]
 8003a88:	05db      	lsls	r3, r3, #23
 8003a8a:	d50d      	bpl.n	8003aa8 <_scanf_i+0x180>
 8003a8c:	42bd      	cmp	r5, r7
 8003a8e:	d909      	bls.n	8003aa4 <_scanf_i+0x17c>
 8003a90:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003a94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003a98:	4632      	mov	r2, r6
 8003a9a:	4650      	mov	r0, sl
 8003a9c:	4798      	blx	r3
 8003a9e:	f105 39ff 	add.w	r9, r5, #4294967295
 8003aa2:	464d      	mov	r5, r9
 8003aa4:	42bd      	cmp	r5, r7
 8003aa6:	d02d      	beq.n	8003b04 <_scanf_i+0x1dc>
 8003aa8:	6822      	ldr	r2, [r4, #0]
 8003aaa:	f012 0210 	ands.w	r2, r2, #16
 8003aae:	d113      	bne.n	8003ad8 <_scanf_i+0x1b0>
 8003ab0:	702a      	strb	r2, [r5, #0]
 8003ab2:	6863      	ldr	r3, [r4, #4]
 8003ab4:	9e01      	ldr	r6, [sp, #4]
 8003ab6:	4639      	mov	r1, r7
 8003ab8:	4650      	mov	r0, sl
 8003aba:	47b0      	blx	r6
 8003abc:	6821      	ldr	r1, [r4, #0]
 8003abe:	f8d8 3000 	ldr.w	r3, [r8]
 8003ac2:	f011 0f20 	tst.w	r1, #32
 8003ac6:	d013      	beq.n	8003af0 <_scanf_i+0x1c8>
 8003ac8:	1d1a      	adds	r2, r3, #4
 8003aca:	f8c8 2000 	str.w	r2, [r8]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6018      	str	r0, [r3, #0]
 8003ad2:	68e3      	ldr	r3, [r4, #12]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	60e3      	str	r3, [r4, #12]
 8003ad8:	1bed      	subs	r5, r5, r7
 8003ada:	44ab      	add	fp, r5
 8003adc:	6925      	ldr	r5, [r4, #16]
 8003ade:	445d      	add	r5, fp
 8003ae0:	6125      	str	r5, [r4, #16]
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	b007      	add	sp, #28
 8003ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aea:	f04f 0b00 	mov.w	fp, #0
 8003aee:	e7ca      	b.n	8003a86 <_scanf_i+0x15e>
 8003af0:	1d1a      	adds	r2, r3, #4
 8003af2:	f8c8 2000 	str.w	r2, [r8]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f011 0f01 	tst.w	r1, #1
 8003afc:	bf14      	ite	ne
 8003afe:	8018      	strhne	r0, [r3, #0]
 8003b00:	6018      	streq	r0, [r3, #0]
 8003b02:	e7e6      	b.n	8003ad2 <_scanf_i+0x1aa>
 8003b04:	2001      	movs	r0, #1
 8003b06:	e7ed      	b.n	8003ae4 <_scanf_i+0x1bc>
 8003b08:	08004128 	.word	0x08004128
 8003b0c:	08003d75 	.word	0x08003d75
 8003b10:	08003c8d 	.word	0x08003c8d
 8003b14:	08004169 	.word	0x08004169

08003b18 <__sccl>:
 8003b18:	b570      	push	{r4, r5, r6, lr}
 8003b1a:	780b      	ldrb	r3, [r1, #0]
 8003b1c:	4604      	mov	r4, r0
 8003b1e:	2b5e      	cmp	r3, #94	; 0x5e
 8003b20:	bf0b      	itete	eq
 8003b22:	784b      	ldrbeq	r3, [r1, #1]
 8003b24:	1c48      	addne	r0, r1, #1
 8003b26:	1c88      	addeq	r0, r1, #2
 8003b28:	2200      	movne	r2, #0
 8003b2a:	bf08      	it	eq
 8003b2c:	2201      	moveq	r2, #1
 8003b2e:	1e61      	subs	r1, r4, #1
 8003b30:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8003b34:	f801 2f01 	strb.w	r2, [r1, #1]!
 8003b38:	42a9      	cmp	r1, r5
 8003b3a:	d1fb      	bne.n	8003b34 <__sccl+0x1c>
 8003b3c:	b90b      	cbnz	r3, 8003b42 <__sccl+0x2a>
 8003b3e:	3801      	subs	r0, #1
 8003b40:	bd70      	pop	{r4, r5, r6, pc}
 8003b42:	f082 0201 	eor.w	r2, r2, #1
 8003b46:	54e2      	strb	r2, [r4, r3]
 8003b48:	4605      	mov	r5, r0
 8003b4a:	4628      	mov	r0, r5
 8003b4c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8003b50:	292d      	cmp	r1, #45	; 0x2d
 8003b52:	d006      	beq.n	8003b62 <__sccl+0x4a>
 8003b54:	295d      	cmp	r1, #93	; 0x5d
 8003b56:	d0f3      	beq.n	8003b40 <__sccl+0x28>
 8003b58:	b909      	cbnz	r1, 8003b5e <__sccl+0x46>
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	e7f0      	b.n	8003b40 <__sccl+0x28>
 8003b5e:	460b      	mov	r3, r1
 8003b60:	e7f1      	b.n	8003b46 <__sccl+0x2e>
 8003b62:	786e      	ldrb	r6, [r5, #1]
 8003b64:	2e5d      	cmp	r6, #93	; 0x5d
 8003b66:	d0fa      	beq.n	8003b5e <__sccl+0x46>
 8003b68:	42b3      	cmp	r3, r6
 8003b6a:	dcf8      	bgt.n	8003b5e <__sccl+0x46>
 8003b6c:	3502      	adds	r5, #2
 8003b6e:	4619      	mov	r1, r3
 8003b70:	3101      	adds	r1, #1
 8003b72:	428e      	cmp	r6, r1
 8003b74:	5462      	strb	r2, [r4, r1]
 8003b76:	dcfb      	bgt.n	8003b70 <__sccl+0x58>
 8003b78:	1af1      	subs	r1, r6, r3
 8003b7a:	3901      	subs	r1, #1
 8003b7c:	1c58      	adds	r0, r3, #1
 8003b7e:	42b3      	cmp	r3, r6
 8003b80:	bfa8      	it	ge
 8003b82:	2100      	movge	r1, #0
 8003b84:	1843      	adds	r3, r0, r1
 8003b86:	e7e0      	b.n	8003b4a <__sccl+0x32>

08003b88 <_strtol_l.constprop.0>:
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b8e:	d001      	beq.n	8003b94 <_strtol_l.constprop.0+0xc>
 8003b90:	2b24      	cmp	r3, #36	; 0x24
 8003b92:	d906      	bls.n	8003ba2 <_strtol_l.constprop.0+0x1a>
 8003b94:	f7ff fc2e 	bl	80033f4 <__errno>
 8003b98:	2316      	movs	r3, #22
 8003b9a:	6003      	str	r3, [r0, #0]
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ba2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003c88 <_strtol_l.constprop.0+0x100>
 8003ba6:	460d      	mov	r5, r1
 8003ba8:	462e      	mov	r6, r5
 8003baa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003bae:	f814 700c 	ldrb.w	r7, [r4, ip]
 8003bb2:	f017 0708 	ands.w	r7, r7, #8
 8003bb6:	d1f7      	bne.n	8003ba8 <_strtol_l.constprop.0+0x20>
 8003bb8:	2c2d      	cmp	r4, #45	; 0x2d
 8003bba:	d132      	bne.n	8003c22 <_strtol_l.constprop.0+0x9a>
 8003bbc:	782c      	ldrb	r4, [r5, #0]
 8003bbe:	2701      	movs	r7, #1
 8003bc0:	1cb5      	adds	r5, r6, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d05b      	beq.n	8003c7e <_strtol_l.constprop.0+0xf6>
 8003bc6:	2b10      	cmp	r3, #16
 8003bc8:	d109      	bne.n	8003bde <_strtol_l.constprop.0+0x56>
 8003bca:	2c30      	cmp	r4, #48	; 0x30
 8003bcc:	d107      	bne.n	8003bde <_strtol_l.constprop.0+0x56>
 8003bce:	782c      	ldrb	r4, [r5, #0]
 8003bd0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003bd4:	2c58      	cmp	r4, #88	; 0x58
 8003bd6:	d14d      	bne.n	8003c74 <_strtol_l.constprop.0+0xec>
 8003bd8:	786c      	ldrb	r4, [r5, #1]
 8003bda:	2310      	movs	r3, #16
 8003bdc:	3502      	adds	r5, #2
 8003bde:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003be2:	f108 38ff 	add.w	r8, r8, #4294967295
 8003be6:	f04f 0c00 	mov.w	ip, #0
 8003bea:	fbb8 f9f3 	udiv	r9, r8, r3
 8003bee:	4666      	mov	r6, ip
 8003bf0:	fb03 8a19 	mls	sl, r3, r9, r8
 8003bf4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8003bf8:	f1be 0f09 	cmp.w	lr, #9
 8003bfc:	d816      	bhi.n	8003c2c <_strtol_l.constprop.0+0xa4>
 8003bfe:	4674      	mov	r4, lr
 8003c00:	42a3      	cmp	r3, r4
 8003c02:	dd24      	ble.n	8003c4e <_strtol_l.constprop.0+0xc6>
 8003c04:	f1bc 0f00 	cmp.w	ip, #0
 8003c08:	db1e      	blt.n	8003c48 <_strtol_l.constprop.0+0xc0>
 8003c0a:	45b1      	cmp	r9, r6
 8003c0c:	d31c      	bcc.n	8003c48 <_strtol_l.constprop.0+0xc0>
 8003c0e:	d101      	bne.n	8003c14 <_strtol_l.constprop.0+0x8c>
 8003c10:	45a2      	cmp	sl, r4
 8003c12:	db19      	blt.n	8003c48 <_strtol_l.constprop.0+0xc0>
 8003c14:	fb06 4603 	mla	r6, r6, r3, r4
 8003c18:	f04f 0c01 	mov.w	ip, #1
 8003c1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003c20:	e7e8      	b.n	8003bf4 <_strtol_l.constprop.0+0x6c>
 8003c22:	2c2b      	cmp	r4, #43	; 0x2b
 8003c24:	bf04      	itt	eq
 8003c26:	782c      	ldrbeq	r4, [r5, #0]
 8003c28:	1cb5      	addeq	r5, r6, #2
 8003c2a:	e7ca      	b.n	8003bc2 <_strtol_l.constprop.0+0x3a>
 8003c2c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8003c30:	f1be 0f19 	cmp.w	lr, #25
 8003c34:	d801      	bhi.n	8003c3a <_strtol_l.constprop.0+0xb2>
 8003c36:	3c37      	subs	r4, #55	; 0x37
 8003c38:	e7e2      	b.n	8003c00 <_strtol_l.constprop.0+0x78>
 8003c3a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8003c3e:	f1be 0f19 	cmp.w	lr, #25
 8003c42:	d804      	bhi.n	8003c4e <_strtol_l.constprop.0+0xc6>
 8003c44:	3c57      	subs	r4, #87	; 0x57
 8003c46:	e7db      	b.n	8003c00 <_strtol_l.constprop.0+0x78>
 8003c48:	f04f 3cff 	mov.w	ip, #4294967295
 8003c4c:	e7e6      	b.n	8003c1c <_strtol_l.constprop.0+0x94>
 8003c4e:	f1bc 0f00 	cmp.w	ip, #0
 8003c52:	da05      	bge.n	8003c60 <_strtol_l.constprop.0+0xd8>
 8003c54:	2322      	movs	r3, #34	; 0x22
 8003c56:	6003      	str	r3, [r0, #0]
 8003c58:	4646      	mov	r6, r8
 8003c5a:	b942      	cbnz	r2, 8003c6e <_strtol_l.constprop.0+0xe6>
 8003c5c:	4630      	mov	r0, r6
 8003c5e:	e79e      	b.n	8003b9e <_strtol_l.constprop.0+0x16>
 8003c60:	b107      	cbz	r7, 8003c64 <_strtol_l.constprop.0+0xdc>
 8003c62:	4276      	negs	r6, r6
 8003c64:	2a00      	cmp	r2, #0
 8003c66:	d0f9      	beq.n	8003c5c <_strtol_l.constprop.0+0xd4>
 8003c68:	f1bc 0f00 	cmp.w	ip, #0
 8003c6c:	d000      	beq.n	8003c70 <_strtol_l.constprop.0+0xe8>
 8003c6e:	1e69      	subs	r1, r5, #1
 8003c70:	6011      	str	r1, [r2, #0]
 8003c72:	e7f3      	b.n	8003c5c <_strtol_l.constprop.0+0xd4>
 8003c74:	2430      	movs	r4, #48	; 0x30
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1b1      	bne.n	8003bde <_strtol_l.constprop.0+0x56>
 8003c7a:	2308      	movs	r3, #8
 8003c7c:	e7af      	b.n	8003bde <_strtol_l.constprop.0+0x56>
 8003c7e:	2c30      	cmp	r4, #48	; 0x30
 8003c80:	d0a5      	beq.n	8003bce <_strtol_l.constprop.0+0x46>
 8003c82:	230a      	movs	r3, #10
 8003c84:	e7ab      	b.n	8003bde <_strtol_l.constprop.0+0x56>
 8003c86:	bf00      	nop
 8003c88:	0800416c 	.word	0x0800416c

08003c8c <_strtol_r>:
 8003c8c:	f7ff bf7c 	b.w	8003b88 <_strtol_l.constprop.0>

08003c90 <_strtoul_l.constprop.0>:
 8003c90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c94:	4f36      	ldr	r7, [pc, #216]	; (8003d70 <_strtoul_l.constprop.0+0xe0>)
 8003c96:	4686      	mov	lr, r0
 8003c98:	460d      	mov	r5, r1
 8003c9a:	4628      	mov	r0, r5
 8003c9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ca0:	5de6      	ldrb	r6, [r4, r7]
 8003ca2:	f016 0608 	ands.w	r6, r6, #8
 8003ca6:	d1f8      	bne.n	8003c9a <_strtoul_l.constprop.0+0xa>
 8003ca8:	2c2d      	cmp	r4, #45	; 0x2d
 8003caa:	d12f      	bne.n	8003d0c <_strtoul_l.constprop.0+0x7c>
 8003cac:	782c      	ldrb	r4, [r5, #0]
 8003cae:	2601      	movs	r6, #1
 8003cb0:	1c85      	adds	r5, r0, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d057      	beq.n	8003d66 <_strtoul_l.constprop.0+0xd6>
 8003cb6:	2b10      	cmp	r3, #16
 8003cb8:	d109      	bne.n	8003cce <_strtoul_l.constprop.0+0x3e>
 8003cba:	2c30      	cmp	r4, #48	; 0x30
 8003cbc:	d107      	bne.n	8003cce <_strtoul_l.constprop.0+0x3e>
 8003cbe:	7828      	ldrb	r0, [r5, #0]
 8003cc0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003cc4:	2858      	cmp	r0, #88	; 0x58
 8003cc6:	d149      	bne.n	8003d5c <_strtoul_l.constprop.0+0xcc>
 8003cc8:	786c      	ldrb	r4, [r5, #1]
 8003cca:	2310      	movs	r3, #16
 8003ccc:	3502      	adds	r5, #2
 8003cce:	f04f 38ff 	mov.w	r8, #4294967295
 8003cd2:	2700      	movs	r7, #0
 8003cd4:	fbb8 f8f3 	udiv	r8, r8, r3
 8003cd8:	fb03 f908 	mul.w	r9, r3, r8
 8003cdc:	ea6f 0909 	mvn.w	r9, r9
 8003ce0:	4638      	mov	r0, r7
 8003ce2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003ce6:	f1bc 0f09 	cmp.w	ip, #9
 8003cea:	d814      	bhi.n	8003d16 <_strtoul_l.constprop.0+0x86>
 8003cec:	4664      	mov	r4, ip
 8003cee:	42a3      	cmp	r3, r4
 8003cf0:	dd22      	ble.n	8003d38 <_strtoul_l.constprop.0+0xa8>
 8003cf2:	2f00      	cmp	r7, #0
 8003cf4:	db1d      	blt.n	8003d32 <_strtoul_l.constprop.0+0xa2>
 8003cf6:	4580      	cmp	r8, r0
 8003cf8:	d31b      	bcc.n	8003d32 <_strtoul_l.constprop.0+0xa2>
 8003cfa:	d101      	bne.n	8003d00 <_strtoul_l.constprop.0+0x70>
 8003cfc:	45a1      	cmp	r9, r4
 8003cfe:	db18      	blt.n	8003d32 <_strtoul_l.constprop.0+0xa2>
 8003d00:	fb00 4003 	mla	r0, r0, r3, r4
 8003d04:	2701      	movs	r7, #1
 8003d06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003d0a:	e7ea      	b.n	8003ce2 <_strtoul_l.constprop.0+0x52>
 8003d0c:	2c2b      	cmp	r4, #43	; 0x2b
 8003d0e:	bf04      	itt	eq
 8003d10:	782c      	ldrbeq	r4, [r5, #0]
 8003d12:	1c85      	addeq	r5, r0, #2
 8003d14:	e7cd      	b.n	8003cb2 <_strtoul_l.constprop.0+0x22>
 8003d16:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003d1a:	f1bc 0f19 	cmp.w	ip, #25
 8003d1e:	d801      	bhi.n	8003d24 <_strtoul_l.constprop.0+0x94>
 8003d20:	3c37      	subs	r4, #55	; 0x37
 8003d22:	e7e4      	b.n	8003cee <_strtoul_l.constprop.0+0x5e>
 8003d24:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003d28:	f1bc 0f19 	cmp.w	ip, #25
 8003d2c:	d804      	bhi.n	8003d38 <_strtoul_l.constprop.0+0xa8>
 8003d2e:	3c57      	subs	r4, #87	; 0x57
 8003d30:	e7dd      	b.n	8003cee <_strtoul_l.constprop.0+0x5e>
 8003d32:	f04f 37ff 	mov.w	r7, #4294967295
 8003d36:	e7e6      	b.n	8003d06 <_strtoul_l.constprop.0+0x76>
 8003d38:	2f00      	cmp	r7, #0
 8003d3a:	da07      	bge.n	8003d4c <_strtoul_l.constprop.0+0xbc>
 8003d3c:	2322      	movs	r3, #34	; 0x22
 8003d3e:	f8ce 3000 	str.w	r3, [lr]
 8003d42:	f04f 30ff 	mov.w	r0, #4294967295
 8003d46:	b932      	cbnz	r2, 8003d56 <_strtoul_l.constprop.0+0xc6>
 8003d48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d4c:	b106      	cbz	r6, 8003d50 <_strtoul_l.constprop.0+0xc0>
 8003d4e:	4240      	negs	r0, r0
 8003d50:	2a00      	cmp	r2, #0
 8003d52:	d0f9      	beq.n	8003d48 <_strtoul_l.constprop.0+0xb8>
 8003d54:	b107      	cbz	r7, 8003d58 <_strtoul_l.constprop.0+0xc8>
 8003d56:	1e69      	subs	r1, r5, #1
 8003d58:	6011      	str	r1, [r2, #0]
 8003d5a:	e7f5      	b.n	8003d48 <_strtoul_l.constprop.0+0xb8>
 8003d5c:	2430      	movs	r4, #48	; 0x30
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1b5      	bne.n	8003cce <_strtoul_l.constprop.0+0x3e>
 8003d62:	2308      	movs	r3, #8
 8003d64:	e7b3      	b.n	8003cce <_strtoul_l.constprop.0+0x3e>
 8003d66:	2c30      	cmp	r4, #48	; 0x30
 8003d68:	d0a9      	beq.n	8003cbe <_strtoul_l.constprop.0+0x2e>
 8003d6a:	230a      	movs	r3, #10
 8003d6c:	e7af      	b.n	8003cce <_strtoul_l.constprop.0+0x3e>
 8003d6e:	bf00      	nop
 8003d70:	0800416c 	.word	0x0800416c

08003d74 <_strtoul_r>:
 8003d74:	f7ff bf8c 	b.w	8003c90 <_strtoul_l.constprop.0>

08003d78 <__submore>:
 8003d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d7c:	460c      	mov	r4, r1
 8003d7e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003d80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d84:	4299      	cmp	r1, r3
 8003d86:	d11d      	bne.n	8003dc4 <__submore+0x4c>
 8003d88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d8c:	f000 f89c 	bl	8003ec8 <_malloc_r>
 8003d90:	b918      	cbnz	r0, 8003d9a <__submore+0x22>
 8003d92:	f04f 30ff 	mov.w	r0, #4294967295
 8003d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d9e:	63a3      	str	r3, [r4, #56]	; 0x38
 8003da0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003da4:	6360      	str	r0, [r4, #52]	; 0x34
 8003da6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8003daa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003dae:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8003db2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003db6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8003dba:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8003dbe:	6020      	str	r0, [r4, #0]
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	e7e8      	b.n	8003d96 <__submore+0x1e>
 8003dc4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003dc6:	0077      	lsls	r7, r6, #1
 8003dc8:	463a      	mov	r2, r7
 8003dca:	f000 f8f1 	bl	8003fb0 <_realloc_r>
 8003dce:	4605      	mov	r5, r0
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	d0de      	beq.n	8003d92 <__submore+0x1a>
 8003dd4:	eb00 0806 	add.w	r8, r0, r6
 8003dd8:	4601      	mov	r1, r0
 8003dda:	4632      	mov	r2, r6
 8003ddc:	4640      	mov	r0, r8
 8003dde:	f7ff fb33 	bl	8003448 <memcpy>
 8003de2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8003de6:	f8c4 8000 	str.w	r8, [r4]
 8003dea:	e7e9      	b.n	8003dc0 <__submore+0x48>

08003dec <__retarget_lock_acquire_recursive>:
 8003dec:	4770      	bx	lr

08003dee <__retarget_lock_release_recursive>:
 8003dee:	4770      	bx	lr

08003df0 <_free_r>:
 8003df0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003df2:	2900      	cmp	r1, #0
 8003df4:	d044      	beq.n	8003e80 <_free_r+0x90>
 8003df6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dfa:	9001      	str	r0, [sp, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f1a1 0404 	sub.w	r4, r1, #4
 8003e02:	bfb8      	it	lt
 8003e04:	18e4      	addlt	r4, r4, r3
 8003e06:	f000 f913 	bl	8004030 <__malloc_lock>
 8003e0a:	4a1e      	ldr	r2, [pc, #120]	; (8003e84 <_free_r+0x94>)
 8003e0c:	9801      	ldr	r0, [sp, #4]
 8003e0e:	6813      	ldr	r3, [r2, #0]
 8003e10:	b933      	cbnz	r3, 8003e20 <_free_r+0x30>
 8003e12:	6063      	str	r3, [r4, #4]
 8003e14:	6014      	str	r4, [r2, #0]
 8003e16:	b003      	add	sp, #12
 8003e18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e1c:	f000 b90e 	b.w	800403c <__malloc_unlock>
 8003e20:	42a3      	cmp	r3, r4
 8003e22:	d908      	bls.n	8003e36 <_free_r+0x46>
 8003e24:	6825      	ldr	r5, [r4, #0]
 8003e26:	1961      	adds	r1, r4, r5
 8003e28:	428b      	cmp	r3, r1
 8003e2a:	bf01      	itttt	eq
 8003e2c:	6819      	ldreq	r1, [r3, #0]
 8003e2e:	685b      	ldreq	r3, [r3, #4]
 8003e30:	1949      	addeq	r1, r1, r5
 8003e32:	6021      	streq	r1, [r4, #0]
 8003e34:	e7ed      	b.n	8003e12 <_free_r+0x22>
 8003e36:	461a      	mov	r2, r3
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	b10b      	cbz	r3, 8003e40 <_free_r+0x50>
 8003e3c:	42a3      	cmp	r3, r4
 8003e3e:	d9fa      	bls.n	8003e36 <_free_r+0x46>
 8003e40:	6811      	ldr	r1, [r2, #0]
 8003e42:	1855      	adds	r5, r2, r1
 8003e44:	42a5      	cmp	r5, r4
 8003e46:	d10b      	bne.n	8003e60 <_free_r+0x70>
 8003e48:	6824      	ldr	r4, [r4, #0]
 8003e4a:	4421      	add	r1, r4
 8003e4c:	1854      	adds	r4, r2, r1
 8003e4e:	42a3      	cmp	r3, r4
 8003e50:	6011      	str	r1, [r2, #0]
 8003e52:	d1e0      	bne.n	8003e16 <_free_r+0x26>
 8003e54:	681c      	ldr	r4, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	6053      	str	r3, [r2, #4]
 8003e5a:	4421      	add	r1, r4
 8003e5c:	6011      	str	r1, [r2, #0]
 8003e5e:	e7da      	b.n	8003e16 <_free_r+0x26>
 8003e60:	d902      	bls.n	8003e68 <_free_r+0x78>
 8003e62:	230c      	movs	r3, #12
 8003e64:	6003      	str	r3, [r0, #0]
 8003e66:	e7d6      	b.n	8003e16 <_free_r+0x26>
 8003e68:	6825      	ldr	r5, [r4, #0]
 8003e6a:	1961      	adds	r1, r4, r5
 8003e6c:	428b      	cmp	r3, r1
 8003e6e:	bf04      	itt	eq
 8003e70:	6819      	ldreq	r1, [r3, #0]
 8003e72:	685b      	ldreq	r3, [r3, #4]
 8003e74:	6063      	str	r3, [r4, #4]
 8003e76:	bf04      	itt	eq
 8003e78:	1949      	addeq	r1, r1, r5
 8003e7a:	6021      	streq	r1, [r4, #0]
 8003e7c:	6054      	str	r4, [r2, #4]
 8003e7e:	e7ca      	b.n	8003e16 <_free_r+0x26>
 8003e80:	b003      	add	sp, #12
 8003e82:	bd30      	pop	{r4, r5, pc}
 8003e84:	2000016c 	.word	0x2000016c

08003e88 <sbrk_aligned>:
 8003e88:	b570      	push	{r4, r5, r6, lr}
 8003e8a:	4e0e      	ldr	r6, [pc, #56]	; (8003ec4 <sbrk_aligned+0x3c>)
 8003e8c:	460c      	mov	r4, r1
 8003e8e:	6831      	ldr	r1, [r6, #0]
 8003e90:	4605      	mov	r5, r0
 8003e92:	b911      	cbnz	r1, 8003e9a <sbrk_aligned+0x12>
 8003e94:	f000 f8bc 	bl	8004010 <_sbrk_r>
 8003e98:	6030      	str	r0, [r6, #0]
 8003e9a:	4621      	mov	r1, r4
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	f000 f8b7 	bl	8004010 <_sbrk_r>
 8003ea2:	1c43      	adds	r3, r0, #1
 8003ea4:	d00a      	beq.n	8003ebc <sbrk_aligned+0x34>
 8003ea6:	1cc4      	adds	r4, r0, #3
 8003ea8:	f024 0403 	bic.w	r4, r4, #3
 8003eac:	42a0      	cmp	r0, r4
 8003eae:	d007      	beq.n	8003ec0 <sbrk_aligned+0x38>
 8003eb0:	1a21      	subs	r1, r4, r0
 8003eb2:	4628      	mov	r0, r5
 8003eb4:	f000 f8ac 	bl	8004010 <_sbrk_r>
 8003eb8:	3001      	adds	r0, #1
 8003eba:	d101      	bne.n	8003ec0 <sbrk_aligned+0x38>
 8003ebc:	f04f 34ff 	mov.w	r4, #4294967295
 8003ec0:	4620      	mov	r0, r4
 8003ec2:	bd70      	pop	{r4, r5, r6, pc}
 8003ec4:	20000170 	.word	0x20000170

08003ec8 <_malloc_r>:
 8003ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ecc:	1ccd      	adds	r5, r1, #3
 8003ece:	f025 0503 	bic.w	r5, r5, #3
 8003ed2:	3508      	adds	r5, #8
 8003ed4:	2d0c      	cmp	r5, #12
 8003ed6:	bf38      	it	cc
 8003ed8:	250c      	movcc	r5, #12
 8003eda:	2d00      	cmp	r5, #0
 8003edc:	4607      	mov	r7, r0
 8003ede:	db01      	blt.n	8003ee4 <_malloc_r+0x1c>
 8003ee0:	42a9      	cmp	r1, r5
 8003ee2:	d905      	bls.n	8003ef0 <_malloc_r+0x28>
 8003ee4:	230c      	movs	r3, #12
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	2600      	movs	r6, #0
 8003eea:	4630      	mov	r0, r6
 8003eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ef0:	4e2e      	ldr	r6, [pc, #184]	; (8003fac <_malloc_r+0xe4>)
 8003ef2:	f000 f89d 	bl	8004030 <__malloc_lock>
 8003ef6:	6833      	ldr	r3, [r6, #0]
 8003ef8:	461c      	mov	r4, r3
 8003efa:	bb34      	cbnz	r4, 8003f4a <_malloc_r+0x82>
 8003efc:	4629      	mov	r1, r5
 8003efe:	4638      	mov	r0, r7
 8003f00:	f7ff ffc2 	bl	8003e88 <sbrk_aligned>
 8003f04:	1c43      	adds	r3, r0, #1
 8003f06:	4604      	mov	r4, r0
 8003f08:	d14d      	bne.n	8003fa6 <_malloc_r+0xde>
 8003f0a:	6834      	ldr	r4, [r6, #0]
 8003f0c:	4626      	mov	r6, r4
 8003f0e:	2e00      	cmp	r6, #0
 8003f10:	d140      	bne.n	8003f94 <_malloc_r+0xcc>
 8003f12:	6823      	ldr	r3, [r4, #0]
 8003f14:	4631      	mov	r1, r6
 8003f16:	4638      	mov	r0, r7
 8003f18:	eb04 0803 	add.w	r8, r4, r3
 8003f1c:	f000 f878 	bl	8004010 <_sbrk_r>
 8003f20:	4580      	cmp	r8, r0
 8003f22:	d13a      	bne.n	8003f9a <_malloc_r+0xd2>
 8003f24:	6821      	ldr	r1, [r4, #0]
 8003f26:	3503      	adds	r5, #3
 8003f28:	1a6d      	subs	r5, r5, r1
 8003f2a:	f025 0503 	bic.w	r5, r5, #3
 8003f2e:	3508      	adds	r5, #8
 8003f30:	2d0c      	cmp	r5, #12
 8003f32:	bf38      	it	cc
 8003f34:	250c      	movcc	r5, #12
 8003f36:	4629      	mov	r1, r5
 8003f38:	4638      	mov	r0, r7
 8003f3a:	f7ff ffa5 	bl	8003e88 <sbrk_aligned>
 8003f3e:	3001      	adds	r0, #1
 8003f40:	d02b      	beq.n	8003f9a <_malloc_r+0xd2>
 8003f42:	6823      	ldr	r3, [r4, #0]
 8003f44:	442b      	add	r3, r5
 8003f46:	6023      	str	r3, [r4, #0]
 8003f48:	e00e      	b.n	8003f68 <_malloc_r+0xa0>
 8003f4a:	6822      	ldr	r2, [r4, #0]
 8003f4c:	1b52      	subs	r2, r2, r5
 8003f4e:	d41e      	bmi.n	8003f8e <_malloc_r+0xc6>
 8003f50:	2a0b      	cmp	r2, #11
 8003f52:	d916      	bls.n	8003f82 <_malloc_r+0xba>
 8003f54:	1961      	adds	r1, r4, r5
 8003f56:	42a3      	cmp	r3, r4
 8003f58:	6025      	str	r5, [r4, #0]
 8003f5a:	bf18      	it	ne
 8003f5c:	6059      	strne	r1, [r3, #4]
 8003f5e:	6863      	ldr	r3, [r4, #4]
 8003f60:	bf08      	it	eq
 8003f62:	6031      	streq	r1, [r6, #0]
 8003f64:	5162      	str	r2, [r4, r5]
 8003f66:	604b      	str	r3, [r1, #4]
 8003f68:	4638      	mov	r0, r7
 8003f6a:	f104 060b 	add.w	r6, r4, #11
 8003f6e:	f000 f865 	bl	800403c <__malloc_unlock>
 8003f72:	f026 0607 	bic.w	r6, r6, #7
 8003f76:	1d23      	adds	r3, r4, #4
 8003f78:	1af2      	subs	r2, r6, r3
 8003f7a:	d0b6      	beq.n	8003eea <_malloc_r+0x22>
 8003f7c:	1b9b      	subs	r3, r3, r6
 8003f7e:	50a3      	str	r3, [r4, r2]
 8003f80:	e7b3      	b.n	8003eea <_malloc_r+0x22>
 8003f82:	6862      	ldr	r2, [r4, #4]
 8003f84:	42a3      	cmp	r3, r4
 8003f86:	bf0c      	ite	eq
 8003f88:	6032      	streq	r2, [r6, #0]
 8003f8a:	605a      	strne	r2, [r3, #4]
 8003f8c:	e7ec      	b.n	8003f68 <_malloc_r+0xa0>
 8003f8e:	4623      	mov	r3, r4
 8003f90:	6864      	ldr	r4, [r4, #4]
 8003f92:	e7b2      	b.n	8003efa <_malloc_r+0x32>
 8003f94:	4634      	mov	r4, r6
 8003f96:	6876      	ldr	r6, [r6, #4]
 8003f98:	e7b9      	b.n	8003f0e <_malloc_r+0x46>
 8003f9a:	230c      	movs	r3, #12
 8003f9c:	603b      	str	r3, [r7, #0]
 8003f9e:	4638      	mov	r0, r7
 8003fa0:	f000 f84c 	bl	800403c <__malloc_unlock>
 8003fa4:	e7a1      	b.n	8003eea <_malloc_r+0x22>
 8003fa6:	6025      	str	r5, [r4, #0]
 8003fa8:	e7de      	b.n	8003f68 <_malloc_r+0xa0>
 8003faa:	bf00      	nop
 8003fac:	2000016c 	.word	0x2000016c

08003fb0 <_realloc_r>:
 8003fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fb4:	4680      	mov	r8, r0
 8003fb6:	4614      	mov	r4, r2
 8003fb8:	460e      	mov	r6, r1
 8003fba:	b921      	cbnz	r1, 8003fc6 <_realloc_r+0x16>
 8003fbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fc0:	4611      	mov	r1, r2
 8003fc2:	f7ff bf81 	b.w	8003ec8 <_malloc_r>
 8003fc6:	b92a      	cbnz	r2, 8003fd4 <_realloc_r+0x24>
 8003fc8:	f7ff ff12 	bl	8003df0 <_free_r>
 8003fcc:	4625      	mov	r5, r4
 8003fce:	4628      	mov	r0, r5
 8003fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fd4:	f000 f838 	bl	8004048 <_malloc_usable_size_r>
 8003fd8:	4284      	cmp	r4, r0
 8003fda:	4607      	mov	r7, r0
 8003fdc:	d802      	bhi.n	8003fe4 <_realloc_r+0x34>
 8003fde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003fe2:	d812      	bhi.n	800400a <_realloc_r+0x5a>
 8003fe4:	4621      	mov	r1, r4
 8003fe6:	4640      	mov	r0, r8
 8003fe8:	f7ff ff6e 	bl	8003ec8 <_malloc_r>
 8003fec:	4605      	mov	r5, r0
 8003fee:	2800      	cmp	r0, #0
 8003ff0:	d0ed      	beq.n	8003fce <_realloc_r+0x1e>
 8003ff2:	42bc      	cmp	r4, r7
 8003ff4:	4622      	mov	r2, r4
 8003ff6:	4631      	mov	r1, r6
 8003ff8:	bf28      	it	cs
 8003ffa:	463a      	movcs	r2, r7
 8003ffc:	f7ff fa24 	bl	8003448 <memcpy>
 8004000:	4631      	mov	r1, r6
 8004002:	4640      	mov	r0, r8
 8004004:	f7ff fef4 	bl	8003df0 <_free_r>
 8004008:	e7e1      	b.n	8003fce <_realloc_r+0x1e>
 800400a:	4635      	mov	r5, r6
 800400c:	e7df      	b.n	8003fce <_realloc_r+0x1e>
	...

08004010 <_sbrk_r>:
 8004010:	b538      	push	{r3, r4, r5, lr}
 8004012:	4d06      	ldr	r5, [pc, #24]	; (800402c <_sbrk_r+0x1c>)
 8004014:	2300      	movs	r3, #0
 8004016:	4604      	mov	r4, r0
 8004018:	4608      	mov	r0, r1
 800401a:	602b      	str	r3, [r5, #0]
 800401c:	f7fd f8e4 	bl	80011e8 <_sbrk>
 8004020:	1c43      	adds	r3, r0, #1
 8004022:	d102      	bne.n	800402a <_sbrk_r+0x1a>
 8004024:	682b      	ldr	r3, [r5, #0]
 8004026:	b103      	cbz	r3, 800402a <_sbrk_r+0x1a>
 8004028:	6023      	str	r3, [r4, #0]
 800402a:	bd38      	pop	{r3, r4, r5, pc}
 800402c:	20000164 	.word	0x20000164

08004030 <__malloc_lock>:
 8004030:	4801      	ldr	r0, [pc, #4]	; (8004038 <__malloc_lock+0x8>)
 8004032:	f7ff bedb 	b.w	8003dec <__retarget_lock_acquire_recursive>
 8004036:	bf00      	nop
 8004038:	20000168 	.word	0x20000168

0800403c <__malloc_unlock>:
 800403c:	4801      	ldr	r0, [pc, #4]	; (8004044 <__malloc_unlock+0x8>)
 800403e:	f7ff bed6 	b.w	8003dee <__retarget_lock_release_recursive>
 8004042:	bf00      	nop
 8004044:	20000168 	.word	0x20000168

08004048 <_malloc_usable_size_r>:
 8004048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800404c:	1f18      	subs	r0, r3, #4
 800404e:	2b00      	cmp	r3, #0
 8004050:	bfbc      	itt	lt
 8004052:	580b      	ldrlt	r3, [r1, r0]
 8004054:	18c0      	addlt	r0, r0, r3
 8004056:	4770      	bx	lr

08004058 <_init>:
 8004058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405a:	bf00      	nop
 800405c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800405e:	bc08      	pop	{r3}
 8004060:	469e      	mov	lr, r3
 8004062:	4770      	bx	lr

08004064 <_fini>:
 8004064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004066:	bf00      	nop
 8004068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800406a:	bc08      	pop	{r3}
 800406c:	469e      	mov	lr, r3
 800406e:	4770      	bx	lr
