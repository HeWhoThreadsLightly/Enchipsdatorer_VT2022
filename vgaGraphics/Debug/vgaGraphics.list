
vgaGraphics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e0c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08004fac  08004fac  00014fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005190  08005190  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08005190  08005190  00015190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005198  08005198  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005198  08005198  00015198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800519c  0800519c  0001519c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080051a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ffa8  20000080  08005220  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010028  08005220  00030028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed12  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f73  00000000  00000000  0002edc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00030d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  00031a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000291f  00000000  00000000  00032740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec23  00000000  00000000  0003505f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ddb5  00000000  00000000  00043c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1a37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c54  00000000  00000000  000d1a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004f94 	.word	0x08004f94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08004f94 	.word	0x08004f94

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <dumpLine>:
/* USER CODE BEGIN 0 */

char str[81] = { '\0' };
uint16_t str_len = 0;

void dumpLine(){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0

	for(int i = 0; i < 40; i++){
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	e018      	b.n	80005c2 <dumpLine+0x3e>
		int tmp = screenBuff[i].value;
 8000590:	4a17      	ldr	r2, [pc, #92]	; (80005f0 <dumpLine+0x6c>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4413      	add	r3, r2
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	603b      	str	r3, [r7, #0]
		str_len = sprintf(str, "%02x ", tmp);
 800059a:	683a      	ldr	r2, [r7, #0]
 800059c:	4915      	ldr	r1, [pc, #84]	; (80005f4 <dumpLine+0x70>)
 800059e:	4816      	ldr	r0, [pc, #88]	; (80005f8 <dumpLine+0x74>)
 80005a0:	f004 f88a 	bl	80046b8 <siprintf>
 80005a4:	4603      	mov	r3, r0
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	4b14      	ldr	r3, [pc, #80]	; (80005fc <dumpLine+0x78>)
 80005aa:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80005ac:	4b13      	ldr	r3, [pc, #76]	; (80005fc <dumpLine+0x78>)
 80005ae:	881a      	ldrh	r2, [r3, #0]
 80005b0:	f04f 33ff 	mov.w	r3, #4294967295
 80005b4:	4910      	ldr	r1, [pc, #64]	; (80005f8 <dumpLine+0x74>)
 80005b6:	4812      	ldr	r0, [pc, #72]	; (8000600 <dumpLine+0x7c>)
 80005b8:	f003 fcd7 	bl	8003f6a <HAL_UART_Transmit>
	for(int i = 0; i < 40; i++){
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3301      	adds	r3, #1
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b27      	cmp	r3, #39	; 0x27
 80005c6:	dde3      	ble.n	8000590 <dumpLine+0xc>
	}
	str_len = sprintf(str, "\r\n");
 80005c8:	490e      	ldr	r1, [pc, #56]	; (8000604 <dumpLine+0x80>)
 80005ca:	480b      	ldr	r0, [pc, #44]	; (80005f8 <dumpLine+0x74>)
 80005cc:	f004 f874 	bl	80046b8 <siprintf>
 80005d0:	4603      	mov	r3, r0
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <dumpLine+0x78>)
 80005d6:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <dumpLine+0x78>)
 80005da:	881a      	ldrh	r2, [r3, #0]
 80005dc:	f04f 33ff 	mov.w	r3, #4294967295
 80005e0:	4905      	ldr	r1, [pc, #20]	; (80005f8 <dumpLine+0x74>)
 80005e2:	4807      	ldr	r0, [pc, #28]	; (8000600 <dumpLine+0x7c>)
 80005e4:	f003 fcc1 	bl	8003f6a <HAL_UART_Transmit>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000500 	.word	0x20000500
 80005f4:	08004fac 	.word	0x08004fac
 80005f8:	20000188 	.word	0x20000188
 80005fc:	200001da 	.word	0x200001da
 8000600:	20000144 	.word	0x20000144
 8000604:	08004fb4 	.word	0x08004fb4

08000608 <printStatus>:

int printStatus(HAL_StatusTypeDef status){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	  HAL_OK       = 0x00U,
	  HAL_ERROR    = 0x01U,
	  HAL_BUSY     = 0x02U,
	  HAL_TIMEOUT  = 0x03U
	} HAL_StatusTypeDef;//*/
	switch(status){
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	2b03      	cmp	r3, #3
 8000616:	d82f      	bhi.n	8000678 <printStatus+0x70>
 8000618:	a201      	add	r2, pc, #4	; (adr r2, 8000620 <printStatus+0x18>)
 800061a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061e:	bf00      	nop
 8000620:	08000631 	.word	0x08000631
 8000624:	08000643 	.word	0x08000643
 8000628:	08000655 	.word	0x08000655
 800062c:	08000667 	.word	0x08000667
	case HAL_OK:str_len = sprintf(str, "HAL_OK\r\n");break;
 8000630:	491f      	ldr	r1, [pc, #124]	; (80006b0 <printStatus+0xa8>)
 8000632:	4820      	ldr	r0, [pc, #128]	; (80006b4 <printStatus+0xac>)
 8000634:	f004 f840 	bl	80046b8 <siprintf>
 8000638:	4603      	mov	r3, r0
 800063a:	b29a      	uxth	r2, r3
 800063c:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <printStatus+0xb0>)
 800063e:	801a      	strh	r2, [r3, #0]
 8000640:	e023      	b.n	800068a <printStatus+0x82>
	case HAL_ERROR:str_len = sprintf(str, "HAL_ERROR\r\n");break;
 8000642:	491e      	ldr	r1, [pc, #120]	; (80006bc <printStatus+0xb4>)
 8000644:	481b      	ldr	r0, [pc, #108]	; (80006b4 <printStatus+0xac>)
 8000646:	f004 f837 	bl	80046b8 <siprintf>
 800064a:	4603      	mov	r3, r0
 800064c:	b29a      	uxth	r2, r3
 800064e:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <printStatus+0xb0>)
 8000650:	801a      	strh	r2, [r3, #0]
 8000652:	e01a      	b.n	800068a <printStatus+0x82>
	case HAL_BUSY:str_len = sprintf(str, "HAL_BUSY\r\n");break;
 8000654:	491a      	ldr	r1, [pc, #104]	; (80006c0 <printStatus+0xb8>)
 8000656:	4817      	ldr	r0, [pc, #92]	; (80006b4 <printStatus+0xac>)
 8000658:	f004 f82e 	bl	80046b8 <siprintf>
 800065c:	4603      	mov	r3, r0
 800065e:	b29a      	uxth	r2, r3
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <printStatus+0xb0>)
 8000662:	801a      	strh	r2, [r3, #0]
 8000664:	e011      	b.n	800068a <printStatus+0x82>
	case HAL_TIMEOUT:str_len = sprintf(str, "HAL_TIMEOUT\r\n");break;
 8000666:	4917      	ldr	r1, [pc, #92]	; (80006c4 <printStatus+0xbc>)
 8000668:	4812      	ldr	r0, [pc, #72]	; (80006b4 <printStatus+0xac>)
 800066a:	f004 f825 	bl	80046b8 <siprintf>
 800066e:	4603      	mov	r3, r0
 8000670:	b29a      	uxth	r2, r3
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <printStatus+0xb0>)
 8000674:	801a      	strh	r2, [r3, #0]
 8000676:	e008      	b.n	800068a <printStatus+0x82>
	default:str_len = sprintf(str, "HAL_Unknown\r\n");break;
 8000678:	4913      	ldr	r1, [pc, #76]	; (80006c8 <printStatus+0xc0>)
 800067a:	480e      	ldr	r0, [pc, #56]	; (80006b4 <printStatus+0xac>)
 800067c:	f004 f81c 	bl	80046b8 <siprintf>
 8000680:	4603      	mov	r3, r0
 8000682:	b29a      	uxth	r2, r3
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <printStatus+0xb0>)
 8000686:	801a      	strh	r2, [r3, #0]
 8000688:	bf00      	nop
	}
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <printStatus+0xb0>)
 800068c:	881a      	ldrh	r2, [r3, #0]
 800068e:	f04f 33ff 	mov.w	r3, #4294967295
 8000692:	4908      	ldr	r1, [pc, #32]	; (80006b4 <printStatus+0xac>)
 8000694:	480d      	ldr	r0, [pc, #52]	; (80006cc <printStatus+0xc4>)
 8000696:	f003 fc68 	bl	8003f6a <HAL_UART_Transmit>
	return status != HAL_OK;
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b00      	cmp	r3, #0
 800069e:	bf14      	ite	ne
 80006a0:	2301      	movne	r3, #1
 80006a2:	2300      	moveq	r3, #0
 80006a4:	b2db      	uxtb	r3, r3

}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	08004fb8 	.word	0x08004fb8
 80006b4:	20000188 	.word	0x20000188
 80006b8:	200001da 	.word	0x200001da
 80006bc:	08004fc4 	.word	0x08004fc4
 80006c0:	08004fd0 	.word	0x08004fd0
 80006c4:	08004fdc 	.word	0x08004fdc
 80006c8:	08004fec 	.word	0x08004fec
 80006cc:	20000144 	.word	0x20000144

080006d0 <printState>:

int printState(HAL_DMA_StateTypeDef state){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
  //HAL_DMA_STATE_BUSY              = 0x02U,  /*!< DMA process is ongoing              */
  //HAL_DMA_STATE_TIMEOUT           = 0x03U,  /*!< DMA timeout state                   */
  //HAL_DMA_STATE_ERROR             = 0x04U,  /*!< DMA error state                     */
  //HAL_DMA_STATE_ABORT             = 0x05U,  /*!< DMA Abort state                     */
//}HAL_DMA_StateTypeDef;
	switch(state){
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b05      	cmp	r3, #5
 80006de:	d845      	bhi.n	800076c <printState+0x9c>
 80006e0:	a201      	add	r2, pc, #4	; (adr r2, 80006e8 <printState+0x18>)
 80006e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e6:	bf00      	nop
 80006e8:	08000701 	.word	0x08000701
 80006ec:	08000713 	.word	0x08000713
 80006f0:	08000725 	.word	0x08000725
 80006f4:	08000737 	.word	0x08000737
 80006f8:	08000749 	.word	0x08000749
 80006fc:	0800075b 	.word	0x0800075b
	case HAL_DMA_STATE_RESET:str_len = sprintf(str, "DMA not yet initialized or disabled\r\n");break;
 8000700:	4928      	ldr	r1, [pc, #160]	; (80007a4 <printState+0xd4>)
 8000702:	4829      	ldr	r0, [pc, #164]	; (80007a8 <printState+0xd8>)
 8000704:	f003 ffd8 	bl	80046b8 <siprintf>
 8000708:	4603      	mov	r3, r0
 800070a:	b29a      	uxth	r2, r3
 800070c:	4b27      	ldr	r3, [pc, #156]	; (80007ac <printState+0xdc>)
 800070e:	801a      	strh	r2, [r3, #0]
 8000710:	e035      	b.n	800077e <printState+0xae>
	case HAL_DMA_STATE_READY:str_len = sprintf(str, "DMA initialized and ready for use\r\n");break;
 8000712:	4927      	ldr	r1, [pc, #156]	; (80007b0 <printState+0xe0>)
 8000714:	4824      	ldr	r0, [pc, #144]	; (80007a8 <printState+0xd8>)
 8000716:	f003 ffcf 	bl	80046b8 <siprintf>
 800071a:	4603      	mov	r3, r0
 800071c:	b29a      	uxth	r2, r3
 800071e:	4b23      	ldr	r3, [pc, #140]	; (80007ac <printState+0xdc>)
 8000720:	801a      	strh	r2, [r3, #0]
 8000722:	e02c      	b.n	800077e <printState+0xae>
	case HAL_DMA_STATE_BUSY:str_len = sprintf(str, "DMA process is ongoing\r\n");break;
 8000724:	4923      	ldr	r1, [pc, #140]	; (80007b4 <printState+0xe4>)
 8000726:	4820      	ldr	r0, [pc, #128]	; (80007a8 <printState+0xd8>)
 8000728:	f003 ffc6 	bl	80046b8 <siprintf>
 800072c:	4603      	mov	r3, r0
 800072e:	b29a      	uxth	r2, r3
 8000730:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <printState+0xdc>)
 8000732:	801a      	strh	r2, [r3, #0]
 8000734:	e023      	b.n	800077e <printState+0xae>
	case HAL_DMA_STATE_TIMEOUT:str_len = sprintf(str, "DMA timeout state\r\n");break;
 8000736:	4920      	ldr	r1, [pc, #128]	; (80007b8 <printState+0xe8>)
 8000738:	481b      	ldr	r0, [pc, #108]	; (80007a8 <printState+0xd8>)
 800073a:	f003 ffbd 	bl	80046b8 <siprintf>
 800073e:	4603      	mov	r3, r0
 8000740:	b29a      	uxth	r2, r3
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <printState+0xdc>)
 8000744:	801a      	strh	r2, [r3, #0]
 8000746:	e01a      	b.n	800077e <printState+0xae>
	case HAL_DMA_STATE_ERROR:str_len = sprintf(str, "DMA error state\r\n");break;
 8000748:	491c      	ldr	r1, [pc, #112]	; (80007bc <printState+0xec>)
 800074a:	4817      	ldr	r0, [pc, #92]	; (80007a8 <printState+0xd8>)
 800074c:	f003 ffb4 	bl	80046b8 <siprintf>
 8000750:	4603      	mov	r3, r0
 8000752:	b29a      	uxth	r2, r3
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <printState+0xdc>)
 8000756:	801a      	strh	r2, [r3, #0]
 8000758:	e011      	b.n	800077e <printState+0xae>
	case HAL_DMA_STATE_ABORT:str_len = sprintf(str, "DMA Abort state\r\n");break;
 800075a:	4919      	ldr	r1, [pc, #100]	; (80007c0 <printState+0xf0>)
 800075c:	4812      	ldr	r0, [pc, #72]	; (80007a8 <printState+0xd8>)
 800075e:	f003 ffab 	bl	80046b8 <siprintf>
 8000762:	4603      	mov	r3, r0
 8000764:	b29a      	uxth	r2, r3
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <printState+0xdc>)
 8000768:	801a      	strh	r2, [r3, #0]
 800076a:	e008      	b.n	800077e <printState+0xae>
	default:str_len = sprintf(str, "DMA_Unknown\r\n");break;
 800076c:	4915      	ldr	r1, [pc, #84]	; (80007c4 <printState+0xf4>)
 800076e:	480e      	ldr	r0, [pc, #56]	; (80007a8 <printState+0xd8>)
 8000770:	f003 ffa2 	bl	80046b8 <siprintf>
 8000774:	4603      	mov	r3, r0
 8000776:	b29a      	uxth	r2, r3
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <printState+0xdc>)
 800077a:	801a      	strh	r2, [r3, #0]
 800077c:	bf00      	nop

	}
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <printState+0xdc>)
 8000780:	881a      	ldrh	r2, [r3, #0]
 8000782:	f04f 33ff 	mov.w	r3, #4294967295
 8000786:	4908      	ldr	r1, [pc, #32]	; (80007a8 <printState+0xd8>)
 8000788:	480f      	ldr	r0, [pc, #60]	; (80007c8 <printState+0xf8>)
 800078a:	f003 fbee 	bl	8003f6a <HAL_UART_Transmit>
	return state != HAL_DMA_STATE_READY;
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b01      	cmp	r3, #1
 8000792:	bf14      	ite	ne
 8000794:	2301      	movne	r3, #1
 8000796:	2300      	moveq	r3, #0
 8000798:	b2db      	uxtb	r3, r3
}
 800079a:	4618      	mov	r0, r3
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	08004ffc 	.word	0x08004ffc
 80007a8:	20000188 	.word	0x20000188
 80007ac:	200001da 	.word	0x200001da
 80007b0:	08005024 	.word	0x08005024
 80007b4:	08005048 	.word	0x08005048
 80007b8:	08005064 	.word	0x08005064
 80007bc:	08005078 	.word	0x08005078
 80007c0:	0800508c 	.word	0x0800508c
 80007c4:	080050a0 	.word	0x080050a0
 80007c8:	20000144 	.word	0x20000144

080007cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b098      	sub	sp, #96	; 0x60
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d2:	f001 f911 	bl	80019f8 <HAL_Init>

  /* USER CODE BEGIN Init */
  GPIOC->ODR; // first 8 bits are GPIOC 0-7
 80007d6:	4b89      	ldr	r3, [pc, #548]	; (80009fc <main+0x230>)
 80007d8:	695b      	ldr	r3, [r3, #20]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007da:	f000 f91d 	bl	8000a18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007de:	f000 fa71 	bl	8000cc4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007e2:	f000 fa25 	bl	8000c30 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80007e6:	f000 fa4d 	bl	8000c84 <MX_DMA_Init>
  MX_TIM1_Init();
 80007ea:	f000 f981 	bl	8000af0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  char str[81] = { '\0' };
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	f107 0308 	add.w	r3, r7, #8
 80007f6:	224d      	movs	r2, #77	; 0x4d
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f003 ff54 	bl	80046a8 <memset>
  uint16_t str_len = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  str_len = sprintf(str, "Starting up!\r\n");
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	497d      	ldr	r1, [pc, #500]	; (8000a00 <main+0x234>)
 800080a:	4618      	mov	r0, r3
 800080c:	f003 ff54 	bl	80046b8 <siprintf>
 8000810:	4603      	mov	r3, r0
 8000812:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8000816:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800081a:	1d39      	adds	r1, r7, #4
 800081c:	f04f 33ff 	mov.w	r3, #4294967295
 8000820:	4878      	ldr	r0, [pc, #480]	; (8000a04 <main+0x238>)
 8000822:	f003 fba2 	bl	8003f6a <HAL_UART_Transmit>

  vgaSetup();
 8000826:	f000 ffb9 	bl	800179c <vgaSetup>
  registerDebugInterupts(&huart2);
 800082a:	4876      	ldr	r0, [pc, #472]	; (8000a04 <main+0x238>)
 800082c:	f000 fd8e 	bl	800134c <registerDebugInterupts>

  for(int i = 0; i < vertRes; i++){
 8000830:	2300      	movs	r3, #0
 8000832:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000834:	e019      	b.n	800086a <main+0x9e>
	  for(int j = 0; j < horiRes; j++){
 8000836:	2300      	movs	r3, #0
 8000838:	65bb      	str	r3, [r7, #88]	; 0x58
 800083a:	e00f      	b.n	800085c <main+0x90>
		  screenBuff[i*vertRes + j].value = j & 0b111111;
 800083c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800083e:	b2da      	uxtb	r2, r3
 8000840:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000842:	21c8      	movs	r1, #200	; 0xc8
 8000844:	fb03 f101 	mul.w	r1, r3, r1
 8000848:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800084a:	440b      	add	r3, r1
 800084c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000850:	b2d1      	uxtb	r1, r2
 8000852:	4a6d      	ldr	r2, [pc, #436]	; (8000a08 <main+0x23c>)
 8000854:	54d1      	strb	r1, [r2, r3]
	  for(int j = 0; j < horiRes; j++){
 8000856:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000858:	3301      	adds	r3, #1
 800085a:	65bb      	str	r3, [r7, #88]	; 0x58
 800085c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800085e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000862:	dbeb      	blt.n	800083c <main+0x70>
  for(int i = 0; i < vertRes; i++){
 8000864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000866:	3301      	adds	r3, #1
 8000868:	65fb      	str	r3, [r7, #92]	; 0x5c
 800086a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800086c:	2bc7      	cmp	r3, #199	; 0xc7
 800086e:	dde2      	ble.n	8000836 <main+0x6a>
	  }
  }

  dumpLine();
 8000870:	f7ff fe88 	bl	8000584 <dumpLine>
  printState(HAL_DMA_GetState(&memcopyDMA));
 8000874:	4865      	ldr	r0, [pc, #404]	; (8000a0c <main+0x240>)
 8000876:	f001 fed5 	bl	8002624 <HAL_DMA_GetState>
 800087a:	4603      	mov	r3, r0
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff27 	bl	80006d0 <printState>

  str_len = sprintf(str, "\r\n\r\n");
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	4962      	ldr	r1, [pc, #392]	; (8000a10 <main+0x244>)
 8000886:	4618      	mov	r0, r3
 8000888:	f003 ff16 	bl	80046b8 <siprintf>
 800088c:	4603      	mov	r3, r0
 800088e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8000892:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8000896:	1d39      	adds	r1, r7, #4
 8000898:	f04f 33ff 	mov.w	r3, #4294967295
 800089c:	4859      	ldr	r0, [pc, #356]	; (8000a04 <main+0x238>)
 800089e:	f003 fb64 	bl	8003f6a <HAL_UART_Transmit>

  printStatus(memSet(0, &screenBuff[0], 2));//testingMemset
 80008a2:	2202      	movs	r2, #2
 80008a4:	4958      	ldr	r1, [pc, #352]	; (8000a08 <main+0x23c>)
 80008a6:	2000      	movs	r0, #0
 80008a8:	f000 fc36 	bl	8001118 <memSet>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff feaa 	bl	8000608 <printStatus>
  printState(HAL_DMA_GetState(&memcopyDMA));
 80008b4:	4855      	ldr	r0, [pc, #340]	; (8000a0c <main+0x240>)
 80008b6:	f001 feb5 	bl	8002624 <HAL_DMA_GetState>
 80008ba:	4603      	mov	r3, r0
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ff07 	bl	80006d0 <printState>
  dumpLine();
 80008c2:	f7ff fe5f 	bl	8000584 <dumpLine>
  while(printStatus(HAL_DMA_PollForTransfer(&memcopyDMA, HAL_DMA_FULL_TRANSFER, 100))){HAL_Delay(1000);};
 80008c6:	e003      	b.n	80008d0 <main+0x104>
 80008c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008cc:	f001 f906 	bl	8001adc <HAL_Delay>
 80008d0:	2264      	movs	r2, #100	; 0x64
 80008d2:	2100      	movs	r1, #0
 80008d4:	484d      	ldr	r0, [pc, #308]	; (8000a0c <main+0x240>)
 80008d6:	f001 fbe8 	bl	80020aa <HAL_DMA_PollForTransfer>
 80008da:	4603      	mov	r3, r0
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fe93 	bl	8000608 <printStatus>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d1ef      	bne.n	80008c8 <main+0xfc>

  str_len = sprintf(str, "\r\n\r\n");
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	4949      	ldr	r1, [pc, #292]	; (8000a10 <main+0x244>)
 80008ec:	4618      	mov	r0, r3
 80008ee:	f003 fee3 	bl	80046b8 <siprintf>
 80008f2:	4603      	mov	r3, r0
 80008f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80008f8:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80008fc:	1d39      	adds	r1, r7, #4
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000902:	4840      	ldr	r0, [pc, #256]	; (8000a04 <main+0x238>)
 8000904:	f003 fb31 	bl	8003f6a <HAL_UART_Transmit>

  if (HAL_DMA_Init(&memcopyDMA) != HAL_OK) {
 8000908:	4840      	ldr	r0, [pc, #256]	; (8000a0c <main+0x240>)
 800090a:	f001 fa1d 	bl	8001d48 <HAL_DMA_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <main+0x14c>
	  Error_Handler();
 8000914:	f000 fa58 	bl	8000dc8 <Error_Handler>
  }
  printStatus(memCopy(&screenBuff[8], &screenBuff[0], 2));//testingMemcopy
 8000918:	2202      	movs	r2, #2
 800091a:	493b      	ldr	r1, [pc, #236]	; (8000a08 <main+0x23c>)
 800091c:	483d      	ldr	r0, [pc, #244]	; (8000a14 <main+0x248>)
 800091e:	f000 fbdb 	bl	80010d8 <memCopy>
 8000922:	4603      	mov	r3, r0
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fe6f 	bl	8000608 <printStatus>
  printState(HAL_DMA_GetState(&memcopyDMA));
 800092a:	4838      	ldr	r0, [pc, #224]	; (8000a0c <main+0x240>)
 800092c:	f001 fe7a 	bl	8002624 <HAL_DMA_GetState>
 8000930:	4603      	mov	r3, r0
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fecc 	bl	80006d0 <printState>
  dumpLine();
 8000938:	f7ff fe24 	bl	8000584 <dumpLine>
  while(printStatus(HAL_DMA_PollForTransfer(&memcopyDMA, HAL_DMA_FULL_TRANSFER, 100))){HAL_Delay(1000);};
 800093c:	e003      	b.n	8000946 <main+0x17a>
 800093e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000942:	f001 f8cb 	bl	8001adc <HAL_Delay>
 8000946:	2264      	movs	r2, #100	; 0x64
 8000948:	2100      	movs	r1, #0
 800094a:	4830      	ldr	r0, [pc, #192]	; (8000a0c <main+0x240>)
 800094c:	f001 fbad 	bl	80020aa <HAL_DMA_PollForTransfer>
 8000950:	4603      	mov	r3, r0
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fe58 	bl	8000608 <printStatus>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1ef      	bne.n	800093e <main+0x172>

  str_len = sprintf(str, "\r\n\r\n");
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	492b      	ldr	r1, [pc, #172]	; (8000a10 <main+0x244>)
 8000962:	4618      	mov	r0, r3
 8000964:	f003 fea8 	bl	80046b8 <siprintf>
 8000968:	4603      	mov	r3, r0
 800096a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800096e:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8000972:	1d39      	adds	r1, r7, #4
 8000974:	f04f 33ff 	mov.w	r3, #4294967295
 8000978:	4822      	ldr	r0, [pc, #136]	; (8000a04 <main+0x238>)
 800097a:	f003 faf6 	bl	8003f6a <HAL_UART_Transmit>

  if (HAL_DMA_Init(&memcopyDMA) != HAL_OK) {
 800097e:	4823      	ldr	r0, [pc, #140]	; (8000a0c <main+0x240>)
 8000980:	f001 f9e2 	bl	8001d48 <HAL_DMA_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <main+0x1c2>
	  Error_Handler();
 800098a:	f000 fa1d 	bl	8000dc8 <Error_Handler>
  }
  printStatus(memSet(0xff, &screenBuff[0], 2));//testingMemset
 800098e:	2202      	movs	r2, #2
 8000990:	491d      	ldr	r1, [pc, #116]	; (8000a08 <main+0x23c>)
 8000992:	20ff      	movs	r0, #255	; 0xff
 8000994:	f000 fbc0 	bl	8001118 <memSet>
 8000998:	4603      	mov	r3, r0
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fe34 	bl	8000608 <printStatus>
  printState(HAL_DMA_GetState(&memcopyDMA));
 80009a0:	481a      	ldr	r0, [pc, #104]	; (8000a0c <main+0x240>)
 80009a2:	f001 fe3f 	bl	8002624 <HAL_DMA_GetState>
 80009a6:	4603      	mov	r3, r0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fe91 	bl	80006d0 <printState>
  dumpLine();
 80009ae:	f7ff fde9 	bl	8000584 <dumpLine>
  while(printStatus(HAL_DMA_PollForTransfer(&memcopyDMA, HAL_DMA_FULL_TRANSFER, 100))){HAL_Delay(1000);};
 80009b2:	e003      	b.n	80009bc <main+0x1f0>
 80009b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b8:	f001 f890 	bl	8001adc <HAL_Delay>
 80009bc:	2264      	movs	r2, #100	; 0x64
 80009be:	2100      	movs	r1, #0
 80009c0:	4812      	ldr	r0, [pc, #72]	; (8000a0c <main+0x240>)
 80009c2:	f001 fb72 	bl	80020aa <HAL_DMA_PollForTransfer>
 80009c6:	4603      	mov	r3, r0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fe1d 	bl	8000608 <printStatus>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d1ef      	bne.n	80009b4 <main+0x1e8>

  str_len = sprintf(str, "\r\n\r\n");
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	490e      	ldr	r1, [pc, #56]	; (8000a10 <main+0x244>)
 80009d8:	4618      	mov	r0, r3
 80009da:	f003 fe6d 	bl	80046b8 <siprintf>
 80009de:	4603      	mov	r3, r0
 80009e0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80009e4:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80009e8:	1d39      	adds	r1, r7, #4
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <main+0x238>)
 80009f0:	f003 fabb 	bl	8003f6a <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vgaStart();
 80009f4:	f000 ffa8 	bl	8001948 <vgaStart>
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <main+0x22c>
 80009fa:	bf00      	nop
 80009fc:	40020800 	.word	0x40020800
 8000a00:	080050b0 	.word	0x080050b0
 8000a04:	20000144 	.word	0x20000144
 8000a08:	20000500 	.word	0x20000500
 8000a0c:	2000ffa8 	.word	0x2000ffa8
 8000a10:	080050c0 	.word	0x080050c0
 8000a14:	20000508 	.word	0x20000508

08000a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b094      	sub	sp, #80	; 0x50
 8000a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1e:	f107 0320 	add.w	r3, r7, #32
 8000a22:	2230      	movs	r2, #48	; 0x30
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f003 fe3e 	bl	80046a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	4b29      	ldr	r3, [pc, #164]	; (8000ae8 <SystemClock_Config+0xd0>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	4a28      	ldr	r2, [pc, #160]	; (8000ae8 <SystemClock_Config+0xd0>)
 8000a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4c:	4b26      	ldr	r3, [pc, #152]	; (8000ae8 <SystemClock_Config+0xd0>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a58:	2300      	movs	r3, #0
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	4b23      	ldr	r3, [pc, #140]	; (8000aec <SystemClock_Config+0xd4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a64:	4a21      	ldr	r2, [pc, #132]	; (8000aec <SystemClock_Config+0xd4>)
 8000a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a6a:	6013      	str	r3, [r2, #0]
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <SystemClock_Config+0xd4>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a80:	2310      	movs	r3, #16
 8000a82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a84:	2302      	movs	r3, #2
 8000a86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a8c:	2310      	movs	r3, #16
 8000a8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a90:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a94:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a96:	2304      	movs	r3, #4
 8000a98:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a9a:	2307      	movs	r3, #7
 8000a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9e:	f107 0320 	add.w	r3, r7, #32
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f002 f84a 	bl	8002b3c <HAL_RCC_OscConfig>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000aae:	f000 f98b 	bl	8000dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab2:	230f      	movs	r3, #15
 8000ab4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	2102      	movs	r1, #2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f002 faac 	bl	800302c <HAL_RCC_ClockConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ada:	f000 f975 	bl	8000dc8 <Error_Handler>
  }
}
 8000ade:	bf00      	nop
 8000ae0:	3750      	adds	r7, #80	; 0x50
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40007000 	.word	0x40007000

08000af0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b096      	sub	sp, #88	; 0x58
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]
 8000b1e:	615a      	str	r2, [r3, #20]
 8000b20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2220      	movs	r2, #32
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f003 fdbd 	bl	80046a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b2e:	4b3e      	ldr	r3, [pc, #248]	; (8000c28 <MX_TIM1_Init+0x138>)
 8000b30:	4a3e      	ldr	r2, [pc, #248]	; (8000c2c <MX_TIM1_Init+0x13c>)
 8000b32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b34:	4b3c      	ldr	r3, [pc, #240]	; (8000c28 <MX_TIM1_Init+0x138>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3a:	4b3b      	ldr	r3, [pc, #236]	; (8000c28 <MX_TIM1_Init+0x138>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b40:	4b39      	ldr	r3, [pc, #228]	; (8000c28 <MX_TIM1_Init+0x138>)
 8000b42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b48:	4b37      	ldr	r3, [pc, #220]	; (8000c28 <MX_TIM1_Init+0x138>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b4e:	4b36      	ldr	r3, [pc, #216]	; (8000c28 <MX_TIM1_Init+0x138>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b54:	4b34      	ldr	r3, [pc, #208]	; (8000c28 <MX_TIM1_Init+0x138>)
 8000b56:	2280      	movs	r2, #128	; 0x80
 8000b58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b5a:	4833      	ldr	r0, [pc, #204]	; (8000c28 <MX_TIM1_Init+0x138>)
 8000b5c:	f002 fc86 	bl	800346c <HAL_TIM_Base_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b66:	f000 f92f 	bl	8000dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b74:	4619      	mov	r1, r3
 8000b76:	482c      	ldr	r0, [pc, #176]	; (8000c28 <MX_TIM1_Init+0x138>)
 8000b78:	f002 fd7c 	bl	8003674 <HAL_TIM_ConfigClockSource>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b82:	f000 f921 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000b86:	4828      	ldr	r0, [pc, #160]	; (8000c28 <MX_TIM1_Init+0x138>)
 8000b88:	f002 fcbf 	bl	800350a <HAL_TIM_OC_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b92:	f000 f919 	bl	8000dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b96:	2300      	movs	r3, #0
 8000b98:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4820      	ldr	r0, [pc, #128]	; (8000c28 <MX_TIM1_Init+0x138>)
 8000ba6:	f003 f8d3 	bl	8003d50 <HAL_TIMEx_MasterConfigSynchronization>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000bb0:	f000 f90a 	bl	8000dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8000bb4:	2350      	movs	r3, #80	; 0x50
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4813      	ldr	r0, [pc, #76]	; (8000c28 <MX_TIM1_Init+0x138>)
 8000bda:	f002 fcef 	bl	80035bc <HAL_TIM_OC_ConfigChannel>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000be4:	f000 f8f0 	bl	8000dc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4807      	ldr	r0, [pc, #28]	; (8000c28 <MX_TIM1_Init+0x138>)
 8000c0c:	f003 f90e 	bl	8003e2c <HAL_TIMEx_ConfigBreakDeadTime>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000c16:	f000 f8d7 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c1a:	4803      	ldr	r0, [pc, #12]	; (8000c28 <MX_TIM1_Init+0x138>)
 8000c1c:	f000 f95e 	bl	8000edc <HAL_TIM_MspPostInit>

}
 8000c20:	bf00      	nop
 8000c22:	3758      	adds	r7, #88	; 0x58
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	2000009c 	.word	0x2000009c
 8000c2c:	40010000 	.word	0x40010000

08000c30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <MX_USART2_UART_Init+0x50>)
 8000c38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c56:	220c      	movs	r2, #12
 8000c58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c68:	f003 f932 	bl	8003ed0 <HAL_UART_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c72:	f000 f8a9 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000144 	.word	0x20000144
 8000c80:	40004400 	.word	0x40004400

08000c84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_DMA_Init+0x3c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <MX_DMA_Init+0x3c>)
 8000c94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_DMA_Init+0x3c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2044      	movs	r0, #68	; 0x44
 8000cac:	f001 f815 	bl	8001cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000cb0:	2044      	movs	r0, #68	; 0x44
 8000cb2:	f001 f82e 	bl	8001d12 <HAL_NVIC_EnableIRQ>

}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40023800 	.word	0x40023800

08000cc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	; 0x28
 8000cc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
 8000cd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	4b37      	ldr	r3, [pc, #220]	; (8000dbc <MX_GPIO_Init+0xf8>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a36      	ldr	r2, [pc, #216]	; (8000dbc <MX_GPIO_Init+0xf8>)
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b34      	ldr	r3, [pc, #208]	; (8000dbc <MX_GPIO_Init+0xf8>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0304 	and.w	r3, r3, #4
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b30      	ldr	r3, [pc, #192]	; (8000dbc <MX_GPIO_Init+0xf8>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a2f      	ldr	r2, [pc, #188]	; (8000dbc <MX_GPIO_Init+0xf8>)
 8000d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <MX_GPIO_Init+0xf8>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	4b29      	ldr	r3, [pc, #164]	; (8000dbc <MX_GPIO_Init+0xf8>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a28      	ldr	r2, [pc, #160]	; (8000dbc <MX_GPIO_Init+0xf8>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <MX_GPIO_Init+0xf8>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	4b22      	ldr	r3, [pc, #136]	; (8000dbc <MX_GPIO_Init+0xf8>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a21      	ldr	r2, [pc, #132]	; (8000dbc <MX_GPIO_Init+0xf8>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <MX_GPIO_Init+0xf8>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VGAdac0_Pin|VGAdac1_Pin|VGAdac2_Pin|VGAdac3_Pin
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	21ff      	movs	r1, #255	; 0xff
 8000d4e:	481c      	ldr	r0, [pc, #112]	; (8000dc0 <MX_GPIO_Init+0xfc>)
 8000d50:	f001 feda 	bl	8002b08 <HAL_GPIO_WritePin>
                          |VGAdac4_Pin|VGAdac5_Pin|VGAdac6_Pin|VGAdac7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2120      	movs	r1, #32
 8000d58:	481a      	ldr	r0, [pc, #104]	; (8000dc4 <MX_GPIO_Init+0x100>)
 8000d5a:	f001 fed5 	bl	8002b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d64:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	4812      	ldr	r0, [pc, #72]	; (8000dc0 <MX_GPIO_Init+0xfc>)
 8000d76:	f001 fd43 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : VGAdac0_Pin VGAdac1_Pin VGAdac2_Pin VGAdac3_Pin
                           VGAdac4_Pin VGAdac5_Pin VGAdac6_Pin VGAdac7_Pin */
  GPIO_InitStruct.Pin = VGAdac0_Pin|VGAdac1_Pin|VGAdac2_Pin|VGAdac3_Pin
 8000d7a:	23ff      	movs	r3, #255	; 0xff
 8000d7c:	617b      	str	r3, [r7, #20]
                          |VGAdac4_Pin|VGAdac5_Pin|VGAdac6_Pin|VGAdac7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	480b      	ldr	r0, [pc, #44]	; (8000dc0 <MX_GPIO_Init+0xfc>)
 8000d92:	f001 fd35 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d96:	2320      	movs	r3, #32
 8000d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_GPIO_Init+0x100>)
 8000dae:	f001 fd27 	bl	8002800 <HAL_GPIO_Init>

}
 8000db2:	bf00      	nop
 8000db4:	3728      	adds	r7, #40	; 0x28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020800 	.word	0x40020800
 8000dc4:	40020000 	.word	0x40020000

08000dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i
}
 8000dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <Error_Handler+0x8>
	...

08000dd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <HAL_MspInit+0x4c>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	4a0f      	ldr	r2, [pc, #60]	; (8000e20 <HAL_MspInit+0x4c>)
 8000de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dea:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <HAL_MspInit+0x4c>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	603b      	str	r3, [r7, #0]
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <HAL_MspInit+0x4c>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a08      	ldr	r2, [pc, #32]	; (8000e20 <HAL_MspInit+0x4c>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_MspInit+0x4c>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e12:	2007      	movs	r0, #7
 8000e14:	f000 ff56 	bl	8001cc4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40023800 	.word	0x40023800

08000e24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a26      	ldr	r2, [pc, #152]	; (8000ecc <HAL_TIM_Base_MspInit+0xa8>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d146      	bne.n	8000ec4 <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <HAL_TIM_Base_MspInit+0xac>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	4a24      	ldr	r2, [pc, #144]	; (8000ed0 <HAL_TIM_Base_MspInit+0xac>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6453      	str	r3, [r2, #68]	; 0x44
 8000e46:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <HAL_TIM_Base_MspInit+0xac>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8000e52:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <HAL_TIM_Base_MspInit+0xb0>)
 8000e54:	4a20      	ldr	r2, [pc, #128]	; (8000ed8 <HAL_TIM_Base_MspInit+0xb4>)
 8000e56:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8000e58:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <HAL_TIM_Base_MspInit+0xb0>)
 8000e5a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000e5e:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e60:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <HAL_TIM_Base_MspInit+0xb0>)
 8000e62:	2240      	movs	r2, #64	; 0x40
 8000e64:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e66:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <HAL_TIM_Base_MspInit+0xb0>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000e6c:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <HAL_TIM_Base_MspInit+0xb0>)
 8000e6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e72:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e74:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <HAL_TIM_Base_MspInit+0xb0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e7a:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <HAL_TIM_Base_MspInit+0xb0>)
 8000e7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e80:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8000e82:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <HAL_TIM_Base_MspInit+0xb0>)
 8000e84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e88:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8000e8a:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_TIM_Base_MspInit+0xb0>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e90:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <HAL_TIM_Base_MspInit+0xb0>)
 8000e92:	2204      	movs	r2, #4
 8000e94:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim1_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <HAL_TIM_Base_MspInit+0xb0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim1_up.Init.MemBurst = DMA_MBURST_SINGLE;
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <HAL_TIM_Base_MspInit+0xb0>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim1_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <HAL_TIM_Base_MspInit+0xb0>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000ea8:	480a      	ldr	r0, [pc, #40]	; (8000ed4 <HAL_TIM_Base_MspInit+0xb0>)
 8000eaa:	f000 ff4d 	bl	8001d48 <HAL_DMA_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <HAL_TIM_Base_MspInit+0x94>
    {
      Error_Handler();
 8000eb4:	f7ff ff88 	bl	8000dc8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <HAL_TIM_Base_MspInit+0xb0>)
 8000ebc:	621a      	str	r2, [r3, #32]
 8000ebe:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <HAL_TIM_Base_MspInit+0xb0>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40010000 	.word	0x40010000
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	200000e4 	.word	0x200000e4
 8000ed8:	40026488 	.word	0x40026488

08000edc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <HAL_TIM_MspPostInit+0x68>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d11e      	bne.n	8000f3c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <HAL_TIM_MspPostInit+0x6c>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a10      	ldr	r2, [pc, #64]	; (8000f48 <HAL_TIM_MspPostInit+0x6c>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <HAL_TIM_MspPostInit+0x6c>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	4619      	mov	r1, r3
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <HAL_TIM_MspPostInit+0x70>)
 8000f38:	f001 fc62 	bl	8002800 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f3c:	bf00      	nop
 8000f3e:	3720      	adds	r7, #32
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40010000 	.word	0x40010000
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40020000 	.word	0x40020000

08000f50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a19      	ldr	r2, [pc, #100]	; (8000fd4 <HAL_UART_MspInit+0x84>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d12b      	bne.n	8000fca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_UART_MspInit+0x88>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	4a17      	ldr	r2, [pc, #92]	; (8000fd8 <HAL_UART_MspInit+0x88>)
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f80:	6413      	str	r3, [r2, #64]	; 0x40
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <HAL_UART_MspInit+0x88>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HAL_UART_MspInit+0x88>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <HAL_UART_MspInit+0x88>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_UART_MspInit+0x88>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000faa:	230c      	movs	r3, #12
 8000fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fba:	2307      	movs	r3, #7
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4805      	ldr	r0, [pc, #20]	; (8000fdc <HAL_UART_MspInit+0x8c>)
 8000fc6:	f001 fc1b 	bl	8002800 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fca:	bf00      	nop
 8000fcc:	3728      	adds	r7, #40	; 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40004400 	.word	0x40004400
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020000 	.word	0x40020000

08000fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <NMI_Handler+0x4>

08000fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <HardFault_Handler+0x4>

08000fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <MemManage_Handler+0x4>

08000ff2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <BusFault_Handler+0x4>

08000ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <UsageFault_Handler+0x4>

08000ffe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800102c:	f000 fd36 	bl	8001a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <DMA2_Stream5_IRQHandler+0x10>)
 800103a:	f001 f915 	bl	8002268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200000e4 	.word	0x200000e4

08001048 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001050:	4a14      	ldr	r2, [pc, #80]	; (80010a4 <_sbrk+0x5c>)
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <_sbrk+0x60>)
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800105c:	4b13      	ldr	r3, [pc, #76]	; (80010ac <_sbrk+0x64>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d102      	bne.n	800106a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <_sbrk+0x64>)
 8001066:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <_sbrk+0x68>)
 8001068:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <_sbrk+0x64>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	429a      	cmp	r2, r3
 8001076:	d207      	bcs.n	8001088 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001078:	f003 faec 	bl	8004654 <__errno>
 800107c:	4603      	mov	r3, r0
 800107e:	220c      	movs	r2, #12
 8001080:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
 8001086:	e009      	b.n	800109c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <_sbrk+0x64>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <_sbrk+0x64>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	4a05      	ldr	r2, [pc, #20]	; (80010ac <_sbrk+0x64>)
 8001098:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800109a:	68fb      	ldr	r3, [r7, #12]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20018000 	.word	0x20018000
 80010a8:	00000400 	.word	0x00000400
 80010ac:	200001dc 	.word	0x200001dc
 80010b0:	20010028 	.word	0x20010028

080010b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <SystemInit+0x20>)
 80010ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010be:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <SystemInit+0x20>)
 80010c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <memCopy>:
 *
 * @param DstAddress copies to destination address incrementing
 *
 * @param DataLength number of unit32_t to be copied
 */
HAL_StatusTypeDef memCopy(uint32_t * SrcAddress, uint32_t * DstAddress, uint32_t DataLength){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]

	memcopyDMA.Init.PeriphInc = DMA_PINC_ENABLE;
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <memCopy+0x3c>)
 80010e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ea:	60da      	str	r2, [r3, #12]
	if (HAL_DMA_Init(&memcopyDMA) != HAL_OK) {
 80010ec:	4809      	ldr	r0, [pc, #36]	; (8001114 <memCopy+0x3c>)
 80010ee:	f000 fe2b 	bl	8001d48 <HAL_DMA_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <memCopy+0x24>
		Error_Handler();
 80010f8:	f7ff fe66 	bl	8000dc8 <Error_Handler>
	}
	//SET_BIT(vgaCircularDMA.Instance->CR, DMA_MINC_ENABLE);
	return HAL_DMA_Start(&memcopyDMA, (uint32_t)SrcAddress, (uint32_t)DstAddress, DataLength);
 80010fc:	68f9      	ldr	r1, [r7, #12]
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4804      	ldr	r0, [pc, #16]	; (8001114 <memCopy+0x3c>)
 8001104:	f000 fece 	bl	8001ea4 <HAL_DMA_Start>
 8001108:	4603      	mov	r3, r0
	while(HAL_DMA_PollForTransfer(&memcopyDMA, HAL_DMA_FULL_TRANSFER, 100) != HAL_OK);
	//todo yield to other operations
	//return here from memCopyCompletCallBack callback
	return HAL_OK;
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	2000ffa8 	.word	0x2000ffa8

08001118 <memSet>:
 *
 * @param DstAddress destination address incrementing
 *
 * @param DataLength number of unit32_t to be written
 */
HAL_StatusTypeDef memSet(uint32_t value, uint32_t * DstAddress, uint32_t DataLength){
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
	static volatile uint32_t setVal = 0;
	setVal = value;
 8001124:	4a10      	ldr	r2, [pc, #64]	; (8001168 <memSet+0x50>)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6013      	str	r3, [r2, #0]
	memcopyDMA.Init.PeriphInc = DMA_PINC_DISABLE;
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <memSet+0x54>)
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
	if (HAL_DMA_Init(&memcopyDMA) != HAL_OK) {
 8001130:	480e      	ldr	r0, [pc, #56]	; (800116c <memSet+0x54>)
 8001132:	f000 fe09 	bl	8001d48 <HAL_DMA_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <memSet+0x28>
		Error_Handler();
 800113c:	f7ff fe44 	bl	8000dc8 <Error_Handler>
	}
	//CLEAR_BIT(vgaCircularDMA.Instance->CR, DMA_MINC_ENABLE);
	HAL_DMA_Start(&memcopyDMA, (uint32_t)&setVal, (uint32_t)DstAddress, DataLength);
 8001140:	4909      	ldr	r1, [pc, #36]	; (8001168 <memSet+0x50>)
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4809      	ldr	r0, [pc, #36]	; (800116c <memSet+0x54>)
 8001148:	f000 feac 	bl	8001ea4 <HAL_DMA_Start>
	while(HAL_DMA_PollForTransfer(&memcopyDMA, HAL_DMA_FULL_TRANSFER, 100) != HAL_OK);
 800114c:	bf00      	nop
 800114e:	2264      	movs	r2, #100	; 0x64
 8001150:	2100      	movs	r1, #0
 8001152:	4806      	ldr	r0, [pc, #24]	; (800116c <memSet+0x54>)
 8001154:	f000 ffa9 	bl	80020aa <HAL_DMA_PollForTransfer>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1f7      	bne.n	800114e <memSet+0x36>
	//todo yield to other operations
	//return here from memCopyCompletCallBack callback
	return HAL_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2001000c 	.word	0x2001000c
 800116c:	2000ffa8 	.word	0x2000ffa8

08001170 <vga_DMA_XFER_CPLT_CB_ID>:

UART_HandleTypeDef * huartE;
//HAL_DMA_XFER_CPLT_CB_ID         = 0x00U,  /*!< Full transfer     */
void vga_DMA_XFER_CPLT_CB_ID(){
 8001170:	b580      	push	{r7, lr}
 8001172:	b096      	sub	sp, #88	; 0x58
 8001174:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	224d      	movs	r2, #77	; 0x4d
 800117e:	2100      	movs	r1, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f003 fa91 	bl	80046a8 <memset>
	int str_len = sprintf(str, "Full transfer\r\n");
 8001186:	463b      	mov	r3, r7
 8001188:	4908      	ldr	r1, [pc, #32]	; (80011ac <vga_DMA_XFER_CPLT_CB_ID+0x3c>)
 800118a:	4618      	mov	r0, r3
 800118c:	f003 fa94 	bl	80046b8 <siprintf>
 8001190:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8001192:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <vga_DMA_XFER_CPLT_CB_ID+0x40>)
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001198:	b29a      	uxth	r2, r3
 800119a:	4639      	mov	r1, r7
 800119c:	f04f 33ff 	mov.w	r3, #4294967295
 80011a0:	f002 fee3 	bl	8003f6a <HAL_UART_Transmit>
}
 80011a4:	bf00      	nop
 80011a6:	3758      	adds	r7, #88	; 0x58
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	080050c8 	.word	0x080050c8
 80011b0:	20010008 	.word	0x20010008

080011b4 <vga_DMA_XFER_HALFCPLT_CB_ID>:
//HAL_DMA_XFER_HALFCPLT_CB_ID     = 0x01U,  /*!< Half Transfer     */
void vga_DMA_XFER_HALFCPLT_CB_ID(){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b096      	sub	sp, #88	; 0x58
 80011b8:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 80011ba:	2300      	movs	r3, #0
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	224d      	movs	r2, #77	; 0x4d
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f003 fa6f 	bl	80046a8 <memset>
	int str_len = sprintf(str, "Half Transfer\r\n");
 80011ca:	463b      	mov	r3, r7
 80011cc:	4908      	ldr	r1, [pc, #32]	; (80011f0 <vga_DMA_XFER_HALFCPLT_CB_ID+0x3c>)
 80011ce:	4618      	mov	r0, r3
 80011d0:	f003 fa72 	bl	80046b8 <siprintf>
 80011d4:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <vga_DMA_XFER_HALFCPLT_CB_ID+0x40>)
 80011d8:	6818      	ldr	r0, [r3, #0]
 80011da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4639      	mov	r1, r7
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295
 80011e4:	f002 fec1 	bl	8003f6a <HAL_UART_Transmit>
}
 80011e8:	bf00      	nop
 80011ea:	3758      	adds	r7, #88	; 0x58
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	080050d8 	.word	0x080050d8
 80011f4:	20010008 	.word	0x20010008

080011f8 <vga_DMA_XFER_M1CPLT_CB_ID>:
//HAL_DMA_XFER_M1CPLT_CB_ID       = 0x02U,  /*!< M1 Full Transfer  */
void vga_DMA_XFER_M1CPLT_CB_ID(){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b096      	sub	sp, #88	; 0x58
 80011fc:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 80011fe:	2300      	movs	r3, #0
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	224d      	movs	r2, #77	; 0x4d
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f003 fa4d 	bl	80046a8 <memset>
	int str_len = sprintf(str, "M1 Full Transfer\r\n");
 800120e:	463b      	mov	r3, r7
 8001210:	4908      	ldr	r1, [pc, #32]	; (8001234 <vga_DMA_XFER_M1CPLT_CB_ID+0x3c>)
 8001212:	4618      	mov	r0, r3
 8001214:	f003 fa50 	bl	80046b8 <siprintf>
 8001218:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800121a:	4b07      	ldr	r3, [pc, #28]	; (8001238 <vga_DMA_XFER_M1CPLT_CB_ID+0x40>)
 800121c:	6818      	ldr	r0, [r3, #0]
 800121e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001220:	b29a      	uxth	r2, r3
 8001222:	4639      	mov	r1, r7
 8001224:	f04f 33ff 	mov.w	r3, #4294967295
 8001228:	f002 fe9f 	bl	8003f6a <HAL_UART_Transmit>
}
 800122c:	bf00      	nop
 800122e:	3758      	adds	r7, #88	; 0x58
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	080050e8 	.word	0x080050e8
 8001238:	20010008 	.word	0x20010008

0800123c <vga_DMA_XFER_M1HALFCPLT_CB_ID>:
//HAL_DMA_XFER_M1HALFCPLT_CB_ID   = 0x03U,  /*!< M1 Half Transfer  */
void vga_DMA_XFER_M1HALFCPLT_CB_ID(){
 800123c:	b580      	push	{r7, lr}
 800123e:	b096      	sub	sp, #88	; 0x58
 8001240:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 8001242:	2300      	movs	r3, #0
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	224d      	movs	r2, #77	; 0x4d
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f003 fa2b 	bl	80046a8 <memset>
	int str_len = sprintf(str, "M1 Half Transfer\r\n");
 8001252:	463b      	mov	r3, r7
 8001254:	4908      	ldr	r1, [pc, #32]	; (8001278 <vga_DMA_XFER_M1HALFCPLT_CB_ID+0x3c>)
 8001256:	4618      	mov	r0, r3
 8001258:	f003 fa2e 	bl	80046b8 <siprintf>
 800125c:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800125e:	4b07      	ldr	r3, [pc, #28]	; (800127c <vga_DMA_XFER_M1HALFCPLT_CB_ID+0x40>)
 8001260:	6818      	ldr	r0, [r3, #0]
 8001262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001264:	b29a      	uxth	r2, r3
 8001266:	4639      	mov	r1, r7
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
 800126c:	f002 fe7d 	bl	8003f6a <HAL_UART_Transmit>
}
 8001270:	bf00      	nop
 8001272:	3758      	adds	r7, #88	; 0x58
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	080050fc 	.word	0x080050fc
 800127c:	20010008 	.word	0x20010008

08001280 <vga_DMA_XFER_ERROR_CB_ID>:
//HAL_DMA_XFER_ERROR_CB_ID        = 0x04U,  /*!< Error             */
void vga_DMA_XFER_ERROR_CB_ID(){
 8001280:	b580      	push	{r7, lr}
 8001282:	b096      	sub	sp, #88	; 0x58
 8001284:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	224d      	movs	r2, #77	; 0x4d
 800128e:	2100      	movs	r1, #0
 8001290:	4618      	mov	r0, r3
 8001292:	f003 fa09 	bl	80046a8 <memset>
	int str_len = sprintf(str, "DMA Error\r\n");
 8001296:	463b      	mov	r3, r7
 8001298:	4908      	ldr	r1, [pc, #32]	; (80012bc <vga_DMA_XFER_ERROR_CB_ID+0x3c>)
 800129a:	4618      	mov	r0, r3
 800129c:	f003 fa0c 	bl	80046b8 <siprintf>
 80012a0:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <vga_DMA_XFER_ERROR_CB_ID+0x40>)
 80012a4:	6818      	ldr	r0, [r3, #0]
 80012a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	4639      	mov	r1, r7
 80012ac:	f04f 33ff 	mov.w	r3, #4294967295
 80012b0:	f002 fe5b 	bl	8003f6a <HAL_UART_Transmit>
}
 80012b4:	bf00      	nop
 80012b6:	3758      	adds	r7, #88	; 0x58
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	08005110 	.word	0x08005110
 80012c0:	20010008 	.word	0x20010008

080012c4 <vga_DMA_XFER_ABORT_CB_ID>:
//HAL_DMA_XFER_ABORT_CB_ID        = 0x05U,  /*!< Abort             */
void vga_DMA_XFER_ABORT_CB_ID(){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b096      	sub	sp, #88	; 0x58
 80012c8:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 80012ca:	2300      	movs	r3, #0
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	224d      	movs	r2, #77	; 0x4d
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f003 f9e7 	bl	80046a8 <memset>
	int str_len = sprintf(str, "DMA Abort\r\n");
 80012da:	463b      	mov	r3, r7
 80012dc:	4908      	ldr	r1, [pc, #32]	; (8001300 <vga_DMA_XFER_ABORT_CB_ID+0x3c>)
 80012de:	4618      	mov	r0, r3
 80012e0:	f003 f9ea 	bl	80046b8 <siprintf>
 80012e4:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80012e6:	4b07      	ldr	r3, [pc, #28]	; (8001304 <vga_DMA_XFER_ABORT_CB_ID+0x40>)
 80012e8:	6818      	ldr	r0, [r3, #0]
 80012ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	4639      	mov	r1, r7
 80012f0:	f04f 33ff 	mov.w	r3, #4294967295
 80012f4:	f002 fe39 	bl	8003f6a <HAL_UART_Transmit>
}
 80012f8:	bf00      	nop
 80012fa:	3758      	adds	r7, #88	; 0x58
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	0800511c 	.word	0x0800511c
 8001304:	20010008 	.word	0x20010008

08001308 <vga_DMA_XFER_ALL_CB_ID>:
//HAL_DMA_XFER_ALL_CB_ID          = 0x06U   /*!< All               */
void vga_DMA_XFER_ALL_CB_ID(){
 8001308:	b580      	push	{r7, lr}
 800130a:	b096      	sub	sp, #88	; 0x58
 800130c:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 800130e:	2300      	movs	r3, #0
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	224d      	movs	r2, #77	; 0x4d
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f003 f9c5 	bl	80046a8 <memset>
	int str_len = sprintf(str, "Full transfer\r\n");
 800131e:	463b      	mov	r3, r7
 8001320:	4908      	ldr	r1, [pc, #32]	; (8001344 <vga_DMA_XFER_ALL_CB_ID+0x3c>)
 8001322:	4618      	mov	r0, r3
 8001324:	f003 f9c8 	bl	80046b8 <siprintf>
 8001328:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800132a:	4b07      	ldr	r3, [pc, #28]	; (8001348 <vga_DMA_XFER_ALL_CB_ID+0x40>)
 800132c:	6818      	ldr	r0, [r3, #0]
 800132e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001330:	b29a      	uxth	r2, r3
 8001332:	4639      	mov	r1, r7
 8001334:	f04f 33ff 	mov.w	r3, #4294967295
 8001338:	f002 fe17 	bl	8003f6a <HAL_UART_Transmit>
}
 800133c:	bf00      	nop
 800133e:	3758      	adds	r7, #88	; 0x58
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	080050c8 	.word	0x080050c8
 8001348:	20010008 	.word	0x20010008

0800134c <registerDebugInterupts>:



void registerDebugInterupts(UART_HandleTypeDef * t_huartE){
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	huartE = t_huartE;
 8001354:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <registerDebugInterupts+0x5c>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
	HAL_DMA_RegisterCallback(&memcopyDMA, HAL_DMA_XFER_ABORT_CB_ID, vga_DMA_XFER_CPLT_CB_ID);
 800135a:	4a14      	ldr	r2, [pc, #80]	; (80013ac <registerDebugInterupts+0x60>)
 800135c:	2105      	movs	r1, #5
 800135e:	4814      	ldr	r0, [pc, #80]	; (80013b0 <registerDebugInterupts+0x64>)
 8001360:	f001 f90c 	bl	800257c <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(&memcopyDMA, HAL_DMA_XFER_HALFCPLT_CB_ID, vga_DMA_XFER_HALFCPLT_CB_ID);
 8001364:	4a13      	ldr	r2, [pc, #76]	; (80013b4 <registerDebugInterupts+0x68>)
 8001366:	2101      	movs	r1, #1
 8001368:	4811      	ldr	r0, [pc, #68]	; (80013b0 <registerDebugInterupts+0x64>)
 800136a:	f001 f907 	bl	800257c <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(&memcopyDMA, HAL_DMA_XFER_M1CPLT_CB_ID, vga_DMA_XFER_M1CPLT_CB_ID);
 800136e:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <registerDebugInterupts+0x6c>)
 8001370:	2102      	movs	r1, #2
 8001372:	480f      	ldr	r0, [pc, #60]	; (80013b0 <registerDebugInterupts+0x64>)
 8001374:	f001 f902 	bl	800257c <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(&memcopyDMA, HAL_DMA_XFER_M1HALFCPLT_CB_ID, vga_DMA_XFER_M1HALFCPLT_CB_ID);
 8001378:	4a10      	ldr	r2, [pc, #64]	; (80013bc <registerDebugInterupts+0x70>)
 800137a:	2103      	movs	r1, #3
 800137c:	480c      	ldr	r0, [pc, #48]	; (80013b0 <registerDebugInterupts+0x64>)
 800137e:	f001 f8fd 	bl	800257c <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(&memcopyDMA, HAL_DMA_XFER_ERROR_CB_ID, vga_DMA_XFER_ERROR_CB_ID);
 8001382:	4a0f      	ldr	r2, [pc, #60]	; (80013c0 <registerDebugInterupts+0x74>)
 8001384:	2104      	movs	r1, #4
 8001386:	480a      	ldr	r0, [pc, #40]	; (80013b0 <registerDebugInterupts+0x64>)
 8001388:	f001 f8f8 	bl	800257c <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(&memcopyDMA, HAL_DMA_XFER_ABORT_CB_ID, vga_DMA_XFER_ABORT_CB_ID);
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <registerDebugInterupts+0x78>)
 800138e:	2105      	movs	r1, #5
 8001390:	4807      	ldr	r0, [pc, #28]	; (80013b0 <registerDebugInterupts+0x64>)
 8001392:	f001 f8f3 	bl	800257c <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(&memcopyDMA, HAL_DMA_XFER_ALL_CB_ID, vga_DMA_XFER_ALL_CB_ID);
 8001396:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <registerDebugInterupts+0x7c>)
 8001398:	2106      	movs	r1, #6
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <registerDebugInterupts+0x64>)
 800139c:	f001 f8ee 	bl	800257c <HAL_DMA_RegisterCallback>
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20010008 	.word	0x20010008
 80013ac:	08001171 	.word	0x08001171
 80013b0:	2000ffa8 	.word	0x2000ffa8
 80013b4:	080011b5 	.word	0x080011b5
 80013b8:	080011f9 	.word	0x080011f9
 80013bc:	0800123d 	.word	0x0800123d
 80013c0:	08001281 	.word	0x08001281
 80013c4:	080012c5 	.word	0x080012c5
 80013c8:	08001309 	.word	0x08001309

080013cc <clearVisibleArea>:

void clearVisibleArea(Color * lineBuffPart){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	//uses 32 bit mode to clear faster
	memSet(0, (uint32_t*)&lineBuffPart[horiFront+horiSync+horiBack], horiRes/4);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3350      	adds	r3, #80	; 0x50
 80013d8:	2250      	movs	r2, #80	; 0x50
 80013da:	4619      	mov	r1, r3
 80013dc:	2000      	movs	r0, #0
 80013de:	f7ff fe9b 	bl	8001118 <memSet>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <setVerticalSyncP1>:
	memSet(0x80808080, (uint32_t*)lineBuffPart, horiWhole/4);
	//set vertical and Horizontal sync in overlap
	memSet(0xC0C0C0C0, (uint32_t*)&lineBuffPart[horiFront], horiSync/4);
}

void setVerticalSyncP1(Color * lineBuffPart){
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
	//uses 32 bit accesses to clear faster

	//set VerticalSync everywhere
	memSet(0x80808080, (uint32_t*)lineBuffPart, horiWhole/4);
 80013f2:	2264      	movs	r2, #100	; 0x64
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	f04f 3080 	mov.w	r0, #2155905152	; 0x80808080
 80013fa:	f7ff fe8d 	bl	8001118 <memSet>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <setVerticalSyncP2>:

void setVerticalSyncP2(Color * lineBuffPart){
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
	//uses 32 bit accesses to clear faster

	//set vertical and Horizontal sync in overlap
	memSet(0xC0C0C0C0, (uint32_t*)&lineBuffPart[horiFront], horiSync/4);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3308      	adds	r3, #8
 8001412:	220c      	movs	r2, #12
 8001414:	4619      	mov	r1, r3
 8001416:	f04f 30c0 	mov.w	r0, #3233857728	; 0xc0c0c0c0
 800141a:	f7ff fe7d 	bl	8001118 <memSet>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <setHorizontalSyncP1>:
	memSet(0, (uint32_t*)lineBuffPart, horiWhole);
	//set Horizontal sync
	memSet(0x40404040, (uint32_t*)&lineBuffPart[horiFront], horiSync);
}

void setHorizontalSyncP1(Color * lineBuffPart){
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
	//uses 32 bit accesses to clear faster

	//clear VerticalSync everywhere / clear entire buffer
	memSet(0, (uint32_t*)lineBuffPart, horiWhole);
 800142e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	2000      	movs	r0, #0
 8001436:	f7ff fe6f 	bl	8001118 <memSet>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <setHorizontalSyncP2>:

void setHorizontalSyncP2(Color * lineBuffPart){
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
	//uses 32 bit accesses to clear faster

	//set Horizontal sync
	memSet(0x40404040, (uint32_t*)&lineBuffPart[horiFront], horiSync);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3308      	adds	r3, #8
 800144e:	2230      	movs	r2, #48	; 0x30
 8001450:	4619      	mov	r1, r3
 8001452:	f04f 3040 	mov.w	r0, #1077952576	; 0x40404040
 8001456:	f7ff fe5f 	bl	8001118 <memSet>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <renderLine>:

void __weak renderLine(Color * lineBuffPart, const int lineCount){
 8001464:	b580      	push	{r7, lr}
 8001466:	b098      	sub	sp, #96	; 0x60
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
	//both buffers are 32 bit aligned

	char str[81] = { '\0' };
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	224d      	movs	r2, #77	; 0x4d
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f003 f914 	bl	80046a8 <memset>
	int str_len = sprintf(str, "Rendering line %i\r\n", lineCount);
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	4910      	ldr	r1, [pc, #64]	; (80014c8 <renderLine+0x64>)
 8001488:	4618      	mov	r0, r3
 800148a:	f003 f915 	bl	80046b8 <siprintf>
 800148e:	65f8      	str	r0, [r7, #92]	; 0x5c
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <renderLine+0x68>)
 8001492:	6818      	ldr	r0, [r3, #0]
 8001494:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001496:	b29a      	uxth	r2, r3
 8001498:	f107 0108 	add.w	r1, r7, #8
 800149c:	f04f 33ff 	mov.w	r3, #4294967295
 80014a0:	f002 fd63 	bl	8003f6a <HAL_UART_Transmit>
	//copy the current line of the screen buffer in to the line buffer
	memCopy((uint32_t*)&screenBuff[horiRes*lineCount], (uint32_t *)&lineBuffPart[horiFront+horiSync+horiBack], horiRes/4);
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	019b      	lsls	r3, r3, #6
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <renderLine+0x6c>)
 80014b2:	18d0      	adds	r0, r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3350      	adds	r3, #80	; 0x50
 80014b8:	2250      	movs	r2, #80	; 0x50
 80014ba:	4619      	mov	r1, r3
 80014bc:	f7ff fe0c 	bl	80010d8 <memCopy>
}
 80014c0:	bf00      	nop
 80014c2:	3760      	adds	r7, #96	; 0x60
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	08005128 	.word	0x08005128
 80014cc:	20010008 	.word	0x20010008
 80014d0:	20000500 	.word	0x20000500

080014d4 <copyLastLine>:

void copyLastLine(Color * activeBuffer, const Color * oldBuffer){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
	//both buffers are 32 bit aligned
	memCopy((uint32_t*)&oldBuffer[horiFront+horiSync+horiBack], (uint32_t *)&activeBuffer[horiFront+horiSync+horiBack], horiRes/4);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	f103 0050 	add.w	r0, r3, #80	; 0x50
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3350      	adds	r3, #80	; 0x50
 80014e8:	2250      	movs	r2, #80	; 0x50
 80014ea:	4619      	mov	r1, r3
 80014ec:	f7ff fdf4 	bl	80010d8 <memCopy>
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <vgaStateMachine>:
	sDoneSetHsync2,

	sEndBuffer,
} vgaState;

void vgaStateMachine(int activatedFromCircularBuffer){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	static int lineCount = vertArea + vertFront + vertSync - 1;//start right after a vertical sync
	static int lineUpscale = 0;//copy old buffer if non zero
	static vgaState state = sSetVsync1P1;
	static Color * activeBuffer = lineBuff;
	static Color * oldBuffer = &lineBuff[horiWhole];
	while(HAL_DMA_PollForTransfer(&memcopyDMA, HAL_DMA_FULL_TRANSFER, 100) != HAL_OK){
 8001500:	bf00      	nop
 8001502:	2264      	movs	r2, #100	; 0x64
 8001504:	2100      	movs	r1, #0
 8001506:	488e      	ldr	r0, [pc, #568]	; (8001740 <vgaStateMachine+0x248>)
 8001508:	f000 fdcf 	bl	80020aa <HAL_DMA_PollForTransfer>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f7      	bne.n	8001502 <vgaStateMachine+0xa>
		//error triggered early should still be in user code

	}

	if(activatedFromCircularBuffer){
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00e      	beq.n	8001536 <vgaStateMachine+0x3e>
		lineCount++;
 8001518:	4b8a      	ldr	r3, [pc, #552]	; (8001744 <vgaStateMachine+0x24c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	3301      	adds	r3, #1
 800151e:	4a89      	ldr	r2, [pc, #548]	; (8001744 <vgaStateMachine+0x24c>)
 8001520:	6013      	str	r3, [r2, #0]
		Color * tmp = activeBuffer;
 8001522:	4b89      	ldr	r3, [pc, #548]	; (8001748 <vgaStateMachine+0x250>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	60fb      	str	r3, [r7, #12]
		activeBuffer = oldBuffer;
 8001528:	4b88      	ldr	r3, [pc, #544]	; (800174c <vgaStateMachine+0x254>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a86      	ldr	r2, [pc, #536]	; (8001748 <vgaStateMachine+0x250>)
 800152e:	6013      	str	r3, [r2, #0]
		oldBuffer = tmp;
 8001530:	4a86      	ldr	r2, [pc, #536]	; (800174c <vgaStateMachine+0x254>)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6013      	str	r3, [r2, #0]
	}

	while(1){
		switch(state){
 8001536:	4b86      	ldr	r3, [pc, #536]	; (8001750 <vgaStateMachine+0x258>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b15      	cmp	r3, #21
 800153c:	d8fb      	bhi.n	8001536 <vgaStateMachine+0x3e>
 800153e:	a201      	add	r2, pc, #4	; (adr r2, 8001544 <vgaStateMachine+0x4c>)
 8001540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001544:	0800159d 	.word	0x0800159d
 8001548:	080015b7 	.word	0x080015b7
 800154c:	080015d5 	.word	0x080015d5
 8001550:	080015dd 	.word	0x080015dd
 8001554:	080015f5 	.word	0x080015f5
 8001558:	08001617 	.word	0x08001617
 800155c:	08001629 	.word	0x08001629
 8001560:	08001631 	.word	0x08001631
 8001564:	08001643 	.word	0x08001643
 8001568:	0800164b 	.word	0x0800164b
 800156c:	08001667 	.word	0x08001667
 8001570:	08001679 	.word	0x08001679
 8001574:	08001681 	.word	0x08001681
 8001578:	08001693 	.word	0x08001693
 800157c:	080016a5 	.word	0x080016a5
 8001580:	080016ad 	.word	0x080016ad
 8001584:	080016c9 	.word	0x080016c9
 8001588:	080016db 	.word	0x080016db
 800158c:	080016e3 	.word	0x080016e3
 8001590:	080016f5 	.word	0x080016f5
 8001594:	08001707 	.word	0x08001707
 8001598:	0800170f 	.word	0x0800170f
		//Render screen
		case sDecideNext:{
			if(lineCount < vertArea){
 800159c:	4b69      	ldr	r3, [pc, #420]	; (8001744 <vgaStateMachine+0x24c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80015a4:	da03      	bge.n	80015ae <vgaStateMachine+0xb6>
				state = sRenderLine;
 80015a6:	4b6a      	ldr	r3, [pc, #424]	; (8001750 <vgaStateMachine+0x258>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	701a      	strb	r2, [r3, #0]
			}else{
				state = sExitVisible1;
			}
			break;
 80015ac:	e0bd      	b.n	800172a <vgaStateMachine+0x232>
				state = sExitVisible1;
 80015ae:	4b68      	ldr	r3, [pc, #416]	; (8001750 <vgaStateMachine+0x258>)
 80015b0:	2205      	movs	r2, #5
 80015b2:	701a      	strb	r2, [r3, #0]
			break;
 80015b4:	e0b9      	b.n	800172a <vgaStateMachine+0x232>
		}
		case sRenderLine:{
			renderLine(activeBuffer, lineCount);//render line by copying from screenBuff
 80015b6:	4b64      	ldr	r3, [pc, #400]	; (8001748 <vgaStateMachine+0x250>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a62      	ldr	r2, [pc, #392]	; (8001744 <vgaStateMachine+0x24c>)
 80015bc:	6812      	ldr	r2, [r2, #0]
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff4f 	bl	8001464 <renderLine>
			lineUpscale = 1;
 80015c6:	4b63      	ldr	r3, [pc, #396]	; (8001754 <vgaStateMachine+0x25c>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	601a      	str	r2, [r3, #0]
			state = sDoneRenderLine;
 80015cc:	4b60      	ldr	r3, [pc, #384]	; (8001750 <vgaStateMachine+0x258>)
 80015ce:	2202      	movs	r2, #2
 80015d0:	701a      	strb	r2, [r3, #0]
			return;
 80015d2:	e0b2      	b.n	800173a <vgaStateMachine+0x242>
		}
		case sDoneRenderLine:{
			state = vgaUpscale==1?sDecideNext:sCopyLastLine;
 80015d4:	4b5e      	ldr	r3, [pc, #376]	; (8001750 <vgaStateMachine+0x258>)
 80015d6:	2203      	movs	r2, #3
 80015d8:	701a      	strb	r2, [r3, #0]
			return;
 80015da:	e0ae      	b.n	800173a <vgaStateMachine+0x242>
		}
		case sCopyLastLine:{
			//we are upscaling and can save recourses by copying last buffer
			//would be faster if we could use a fifo queue of dma transfers instead of a circular buffer
			copyLastLine(activeBuffer, oldBuffer);
 80015dc:	4b5a      	ldr	r3, [pc, #360]	; (8001748 <vgaStateMachine+0x250>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a5a      	ldr	r2, [pc, #360]	; (800174c <vgaStateMachine+0x254>)
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	4611      	mov	r1, r2
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff ff74 	bl	80014d4 <copyLastLine>
			state = sDoneCopylastLine;
 80015ec:	4b58      	ldr	r3, [pc, #352]	; (8001750 <vgaStateMachine+0x258>)
 80015ee:	2204      	movs	r2, #4
 80015f0:	701a      	strb	r2, [r3, #0]
			return;
 80015f2:	e0a2      	b.n	800173a <vgaStateMachine+0x242>
		}
		case sDoneCopylastLine:{
			lineUpscale++;
 80015f4:	4b57      	ldr	r3, [pc, #348]	; (8001754 <vgaStateMachine+0x25c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	4a56      	ldr	r2, [pc, #344]	; (8001754 <vgaStateMachine+0x25c>)
 80015fc:	6013      	str	r3, [r2, #0]
			if(lineUpscale == vgaUpscale){//waits in current state until we need to render a new line and can't reuse old buffers
 80015fe:	4b55      	ldr	r3, [pc, #340]	; (8001754 <vgaStateMachine+0x25c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2b02      	cmp	r3, #2
 8001604:	f040 8092 	bne.w	800172c <vgaStateMachine+0x234>
				lineUpscale = 0;
 8001608:	4b52      	ldr	r3, [pc, #328]	; (8001754 <vgaStateMachine+0x25c>)
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
				state = sDecideNext;
 800160e:	4b50      	ldr	r3, [pc, #320]	; (8001750 <vgaStateMachine+0x258>)
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
			}
			return;
 8001614:	e08a      	b.n	800172c <vgaStateMachine+0x234>
		}
		//Exit visible area
		case sExitVisible1:{
			clearVisibleArea(activeBuffer);//clear leftover data in buffer 1
 8001616:	4b4c      	ldr	r3, [pc, #304]	; (8001748 <vgaStateMachine+0x250>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fed6 	bl	80013cc <clearVisibleArea>
			state = sDoneExitVisible1;
 8001620:	4b4b      	ldr	r3, [pc, #300]	; (8001750 <vgaStateMachine+0x258>)
 8001622:	2206      	movs	r2, #6
 8001624:	701a      	strb	r2, [r3, #0]
			return;
 8001626:	e088      	b.n	800173a <vgaStateMachine+0x242>
		}
		case sDoneExitVisible1:{
			state = sExitVisible2;
 8001628:	4b49      	ldr	r3, [pc, #292]	; (8001750 <vgaStateMachine+0x258>)
 800162a:	2207      	movs	r2, #7
 800162c:	701a      	strb	r2, [r3, #0]
			return;
 800162e:	e084      	b.n	800173a <vgaStateMachine+0x242>
		}
		case sExitVisible2:{
			clearVisibleArea(activeBuffer);//clear leftover data in buffer 2
 8001630:	4b45      	ldr	r3, [pc, #276]	; (8001748 <vgaStateMachine+0x250>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fec9 	bl	80013cc <clearVisibleArea>
			state = sDoneExitVisible2;
 800163a:	4b45      	ldr	r3, [pc, #276]	; (8001750 <vgaStateMachine+0x258>)
 800163c:	2208      	movs	r2, #8
 800163e:	701a      	strb	r2, [r3, #0]
			return;
 8001640:	e07b      	b.n	800173a <vgaStateMachine+0x242>
		}
		case sDoneExitVisible2:{
			state = sSetVsync1P1;
 8001642:	4b43      	ldr	r3, [pc, #268]	; (8001750 <vgaStateMachine+0x258>)
 8001644:	2209      	movs	r2, #9
 8001646:	701a      	strb	r2, [r3, #0]
			return;
 8001648:	e077      	b.n	800173a <vgaStateMachine+0x242>
		}
		//Vertical sync
		case sSetVsync1P1:{
			if(lineCount == vertArea + vertFront){//wait until vertical sync starts
 800164a:	4b3e      	ldr	r3, [pc, #248]	; (8001744 <vgaStateMachine+0x24c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f5b3 7fce 	cmp.w	r3, #412	; 0x19c
 8001652:	d16d      	bne.n	8001730 <vgaStateMachine+0x238>
				setVerticalSyncP1(activeBuffer);//set vertical sync in buffer 1
 8001654:	4b3c      	ldr	r3, [pc, #240]	; (8001748 <vgaStateMachine+0x250>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fec6 	bl	80013ea <setVerticalSyncP1>
				state = sSetVsync1P2;
 800165e:	4b3c      	ldr	r3, [pc, #240]	; (8001750 <vgaStateMachine+0x258>)
 8001660:	220a      	movs	r2, #10
 8001662:	701a      	strb	r2, [r3, #0]
			}
			return;
 8001664:	e064      	b.n	8001730 <vgaStateMachine+0x238>
		}
		case sSetVsync1P2:{
			setVerticalSyncP2(activeBuffer);
 8001666:	4b38      	ldr	r3, [pc, #224]	; (8001748 <vgaStateMachine+0x250>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fecb 	bl	8001406 <setVerticalSyncP2>
			state = sDoneSetVsync1;
 8001670:	4b37      	ldr	r3, [pc, #220]	; (8001750 <vgaStateMachine+0x258>)
 8001672:	220b      	movs	r2, #11
 8001674:	701a      	strb	r2, [r3, #0]
			return;
 8001676:	e060      	b.n	800173a <vgaStateMachine+0x242>
		}
		case sDoneSetVsync1:{
			state = sSetVsync2P1;
 8001678:	4b35      	ldr	r3, [pc, #212]	; (8001750 <vgaStateMachine+0x258>)
 800167a:	220c      	movs	r2, #12
 800167c:	701a      	strb	r2, [r3, #0]
			return;
 800167e:	e05c      	b.n	800173a <vgaStateMachine+0x242>
		}
		case sSetVsync2P1:{
			setVerticalSyncP1(activeBuffer);//set Vertical Sync in buffer 2
 8001680:	4b31      	ldr	r3, [pc, #196]	; (8001748 <vgaStateMachine+0x250>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff feb0 	bl	80013ea <setVerticalSyncP1>
			state = sSetVsync2P2;
 800168a:	4b31      	ldr	r3, [pc, #196]	; (8001750 <vgaStateMachine+0x258>)
 800168c:	220d      	movs	r2, #13
 800168e:	701a      	strb	r2, [r3, #0]
			return;
 8001690:	e053      	b.n	800173a <vgaStateMachine+0x242>
		}
		case sSetVsync2P2:{
			setVerticalSyncP2(activeBuffer);
 8001692:	4b2d      	ldr	r3, [pc, #180]	; (8001748 <vgaStateMachine+0x250>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff feb5 	bl	8001406 <setVerticalSyncP2>
			state = sDoneSetVsync2;
 800169c:	4b2c      	ldr	r3, [pc, #176]	; (8001750 <vgaStateMachine+0x258>)
 800169e:	220e      	movs	r2, #14
 80016a0:	701a      	strb	r2, [r3, #0]
			return;
 80016a2:	e04a      	b.n	800173a <vgaStateMachine+0x242>
		}
		case sDoneSetVsync2:{
			state = sSetHsync1P1;
 80016a4:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <vgaStateMachine+0x258>)
 80016a6:	220f      	movs	r2, #15
 80016a8:	701a      	strb	r2, [r3, #0]
			return;
 80016aa:	e046      	b.n	800173a <vgaStateMachine+0x242>
		}
		//Horizontal sync
		case sSetHsync1P1:{
			if(lineCount == vertArea + vertFront + vertSync){//wait until vertical sync ends
 80016ac:	4b25      	ldr	r3, [pc, #148]	; (8001744 <vgaStateMachine+0x24c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 80016b4:	d13e      	bne.n	8001734 <vgaStateMachine+0x23c>
				setHorizontalSyncP1(activeBuffer);//set horizontal sync in buffer 2
 80016b6:	4b24      	ldr	r3, [pc, #144]	; (8001748 <vgaStateMachine+0x250>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff feb3 	bl	8001426 <setHorizontalSyncP1>
				state = sSetHsync1P2;
 80016c0:	4b23      	ldr	r3, [pc, #140]	; (8001750 <vgaStateMachine+0x258>)
 80016c2:	2210      	movs	r2, #16
 80016c4:	701a      	strb	r2, [r3, #0]
			}
			return;
 80016c6:	e035      	b.n	8001734 <vgaStateMachine+0x23c>
		}
		case sSetHsync1P2:{
			setHorizontalSyncP2(activeBuffer);
 80016c8:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <vgaStateMachine+0x250>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff feb8 	bl	8001442 <setHorizontalSyncP2>
			state = sDoneSetHsync1;
 80016d2:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <vgaStateMachine+0x258>)
 80016d4:	2211      	movs	r2, #17
 80016d6:	701a      	strb	r2, [r3, #0]
			return;
 80016d8:	e02f      	b.n	800173a <vgaStateMachine+0x242>
		}
		case sDoneSetHsync1:{
			state = sSetHsync2P1;
 80016da:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <vgaStateMachine+0x258>)
 80016dc:	2212      	movs	r2, #18
 80016de:	701a      	strb	r2, [r3, #0]
			return;
 80016e0:	e02b      	b.n	800173a <vgaStateMachine+0x242>
		}
		case sSetHsync2P1:{
			setVerticalSyncP1(activeBuffer);//set Horizontal Sync in buffer 2
 80016e2:	4b19      	ldr	r3, [pc, #100]	; (8001748 <vgaStateMachine+0x250>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fe7f 	bl	80013ea <setVerticalSyncP1>
			state = sSetHsync2P2;
 80016ec:	4b18      	ldr	r3, [pc, #96]	; (8001750 <vgaStateMachine+0x258>)
 80016ee:	2213      	movs	r2, #19
 80016f0:	701a      	strb	r2, [r3, #0]
			return;
 80016f2:	e022      	b.n	800173a <vgaStateMachine+0x242>
		}
		case sSetHsync2P2:{
			setVerticalSyncP2(activeBuffer);
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <vgaStateMachine+0x250>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fe84 	bl	8001406 <setVerticalSyncP2>
			state = sDoneSetHsync2;
 80016fe:	4b14      	ldr	r3, [pc, #80]	; (8001750 <vgaStateMachine+0x258>)
 8001700:	2214      	movs	r2, #20
 8001702:	701a      	strb	r2, [r3, #0]
			return;
 8001704:	e019      	b.n	800173a <vgaStateMachine+0x242>
		}
		case sDoneSetHsync2:{
			state = sEndBuffer;
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <vgaStateMachine+0x258>)
 8001708:	2215      	movs	r2, #21
 800170a:	701a      	strb	r2, [r3, #0]
			return;
 800170c:	e015      	b.n	800173a <vgaStateMachine+0x242>
		}
		case sEndBuffer:{
			if(lineCount == vertWhole){//wait until end of the screen
 800170e:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <vgaStateMachine+0x24c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f240 12c1 	movw	r2, #449	; 0x1c1
 8001716:	4293      	cmp	r3, r2
 8001718:	d10e      	bne.n	8001738 <vgaStateMachine+0x240>
				state = sDecideNext;
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <vgaStateMachine+0x258>)
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
				lineCount = -1;// set line count back to the start
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <vgaStateMachine+0x24c>)
 8001722:	f04f 32ff 	mov.w	r2, #4294967295
 8001726:	601a      	str	r2, [r3, #0]
			}
			return;
 8001728:	e006      	b.n	8001738 <vgaStateMachine+0x240>
		switch(state){
 800172a:	e704      	b.n	8001536 <vgaStateMachine+0x3e>
			return;
 800172c:	bf00      	nop
 800172e:	e004      	b.n	800173a <vgaStateMachine+0x242>
			return;
 8001730:	bf00      	nop
 8001732:	e002      	b.n	800173a <vgaStateMachine+0x242>
			return;
 8001734:	bf00      	nop
 8001736:	e000      	b.n	800173a <vgaStateMachine+0x242>
			return;
 8001738:	bf00      	nop
		}
	}


	}
}
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	2000ffa8 	.word	0x2000ffa8
 8001744:	20000004 	.word	0x20000004
 8001748:	20000008 	.word	0x20000008
 800174c:	2000000c 	.word	0x2000000c
 8001750:	20000010 	.word	0x20000010
 8001754:	20010010 	.word	0x20010010

08001758 <vgaHalfCallBack>:
		lineUpscale = 0;
	}
	++lineCount;
}

void vgaHalfCallBack(DMA_HandleTypeDef *_hdma){
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	//prepareLine(lineBuff, &lineBuff[horiWhole]);
	vgaStateMachine(1);
 8001760:	2001      	movs	r0, #1
 8001762:	f7ff fec9 	bl	80014f8 <vgaStateMachine>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <vgaFullCallBack>:

void vgaFullCallBack(DMA_HandleTypeDef *_hdma){
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
	//prepareLine(&lineBuff[horiWhole], lineBuff);
	vgaStateMachine(1);
 8001776:	2001      	movs	r0, #1
 8001778:	f7ff febe 	bl	80014f8 <vgaStateMachine>
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <vgaCopyAndSetCallBack>:

void vgaCopyAndSetCallBack(DMA_HandleTypeDef *_hdma){
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	vgaStateMachine(0);
 800178c:	2000      	movs	r0, #0
 800178e:	f7ff feb3 	bl	80014f8 <vgaStateMachine>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <vgaSetup>:


void vgaSetup(){
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b61      	ldr	r3, [pc, #388]	; (800192c <vgaSetup+0x190>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a60      	ldr	r2, [pc, #384]	; (800192c <vgaSetup+0x190>)
 80017ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b5e      	ldr	r3, [pc, #376]	; (800192c <vgaSetup+0x190>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	4b5a      	ldr	r3, [pc, #360]	; (800192c <vgaSetup+0x190>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a59      	ldr	r2, [pc, #356]	; (800192c <vgaSetup+0x190>)
 80017c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b57      	ldr	r3, [pc, #348]	; (800192c <vgaSetup+0x190>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	2010      	movs	r0, #16
 80017e0:	f000 fa7b 	bl	8001cda <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80017e4:	2010      	movs	r0, #16
 80017e6:	f000 fa94 	bl	8001d12 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2100      	movs	r1, #0
 80017ee:	2044      	movs	r0, #68	; 0x44
 80017f0:	f000 fa73 	bl	8001cda <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80017f4:	2044      	movs	r0, #68	; 0x44
 80017f6:	f000 fa8c 	bl	8001d12 <HAL_NVIC_EnableIRQ>

	vgaPixelTimer.Instance = TIM1;
 80017fa:	4b4d      	ldr	r3, [pc, #308]	; (8001930 <vgaSetup+0x194>)
 80017fc:	4a4d      	ldr	r2, [pc, #308]	; (8001934 <vgaSetup+0x198>)
 80017fe:	601a      	str	r2, [r3, #0]
	vgaPixelTimer.Init.Prescaler = 0;
 8001800:	4b4b      	ldr	r3, [pc, #300]	; (8001930 <vgaSetup+0x194>)
 8001802:	2200      	movs	r2, #0
 8001804:	605a      	str	r2, [r3, #4]
	vgaPixelTimer.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001806:	4b4a      	ldr	r3, [pc, #296]	; (8001930 <vgaSetup+0x194>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
	vgaPixelTimer.Init.Period = 65535;
 800180c:	4b48      	ldr	r3, [pc, #288]	; (8001930 <vgaSetup+0x194>)
 800180e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001812:	60da      	str	r2, [r3, #12]
	vgaPixelTimer.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001814:	4b46      	ldr	r3, [pc, #280]	; (8001930 <vgaSetup+0x194>)
 8001816:	2200      	movs	r2, #0
 8001818:	611a      	str	r2, [r3, #16]
	vgaPixelTimer.Init.RepetitionCounter = 0;
 800181a:	4b45      	ldr	r3, [pc, #276]	; (8001930 <vgaSetup+0x194>)
 800181c:	2200      	movs	r2, #0
 800181e:	615a      	str	r2, [r3, #20]
	vgaPixelTimer.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001820:	4b43      	ldr	r3, [pc, #268]	; (8001930 <vgaSetup+0x194>)
 8001822:	2280      	movs	r2, #128	; 0x80
 8001824:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&vgaPixelTimer) != HAL_OK)
 8001826:	4842      	ldr	r0, [pc, #264]	; (8001930 <vgaSetup+0x194>)
 8001828:	f001 fe20 	bl	800346c <HAL_TIM_Base_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <vgaSetup+0x9a>
	{
		Error_Handler();
 8001832:	f7ff fac9 	bl	8000dc8 <Error_Handler>
	}


	/* USART2 DMA Init */
	/* USART2_RX Init */
	memcopyDMA.Instance = DMA2_Stream5;
 8001836:	4b40      	ldr	r3, [pc, #256]	; (8001938 <vgaSetup+0x19c>)
 8001838:	4a40      	ldr	r2, [pc, #256]	; (800193c <vgaSetup+0x1a0>)
 800183a:	601a      	str	r2, [r3, #0]
	memcopyDMA.Init.Channel = DMA_CHANNEL_4;
 800183c:	4b3e      	ldr	r3, [pc, #248]	; (8001938 <vgaSetup+0x19c>)
 800183e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001842:	605a      	str	r2, [r3, #4]
	memcopyDMA.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001844:	4b3c      	ldr	r3, [pc, #240]	; (8001938 <vgaSetup+0x19c>)
 8001846:	2280      	movs	r2, #128	; 0x80
 8001848:	609a      	str	r2, [r3, #8]
	memcopyDMA.Init.PeriphInc = DMA_PINC_DISABLE;
 800184a:	4b3b      	ldr	r3, [pc, #236]	; (8001938 <vgaSetup+0x19c>)
 800184c:	2200      	movs	r2, #0
 800184e:	60da      	str	r2, [r3, #12]
	memcopyDMA.Init.MemInc = DMA_MINC_ENABLE;
 8001850:	4b39      	ldr	r3, [pc, #228]	; (8001938 <vgaSetup+0x19c>)
 8001852:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001856:	611a      	str	r2, [r3, #16]
	memcopyDMA.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001858:	4b37      	ldr	r3, [pc, #220]	; (8001938 <vgaSetup+0x19c>)
 800185a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800185e:	615a      	str	r2, [r3, #20]
	memcopyDMA.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001860:	4b35      	ldr	r3, [pc, #212]	; (8001938 <vgaSetup+0x19c>)
 8001862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001866:	619a      	str	r2, [r3, #24]
	memcopyDMA.Init.Mode = DMA_NORMAL;
 8001868:	4b33      	ldr	r3, [pc, #204]	; (8001938 <vgaSetup+0x19c>)
 800186a:	2200      	movs	r2, #0
 800186c:	61da      	str	r2, [r3, #28]
	memcopyDMA.Init.Priority = DMA_PRIORITY_LOW;
 800186e:	4b32      	ldr	r3, [pc, #200]	; (8001938 <vgaSetup+0x19c>)
 8001870:	2200      	movs	r2, #0
 8001872:	621a      	str	r2, [r3, #32]
	memcopyDMA.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001874:	4b30      	ldr	r3, [pc, #192]	; (8001938 <vgaSetup+0x19c>)
 8001876:	2200      	movs	r2, #0
 8001878:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DMA_Init(&memcopyDMA) != HAL_OK)
 800187a:	482f      	ldr	r0, [pc, #188]	; (8001938 <vgaSetup+0x19c>)
 800187c:	f000 fa64 	bl	8001d48 <HAL_DMA_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <vgaSetup+0xee>
	{
		Error_Handler();
 8001886:	f7ff fa9f 	bl	8000dc8 <Error_Handler>
	}

	if(vgaPixelTimer.Instance==TIM1)
 800188a:	4b29      	ldr	r3, [pc, #164]	; (8001930 <vgaSetup+0x194>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a29      	ldr	r2, [pc, #164]	; (8001934 <vgaSetup+0x198>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d147      	bne.n	8001924 <vgaSetup+0x188>
	{
		/* USER CODE BEGIN TIM1_MspInit 0 */

		/* USER CODE END TIM1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 8001894:	2300      	movs	r3, #0
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	4b24      	ldr	r3, [pc, #144]	; (800192c <vgaSetup+0x190>)
 800189a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189c:	4a23      	ldr	r2, [pc, #140]	; (800192c <vgaSetup+0x190>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6453      	str	r3, [r2, #68]	; 0x44
 80018a4:	4b21      	ldr	r3, [pc, #132]	; (800192c <vgaSetup+0x190>)
 80018a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]

		/* TIM1 DMA Init */
		/* TIM1_UP Init */
		vgaCircularDMA.Instance = DMA1_Stream5;
 80018b0:	4b23      	ldr	r3, [pc, #140]	; (8001940 <vgaSetup+0x1a4>)
 80018b2:	4a24      	ldr	r2, [pc, #144]	; (8001944 <vgaSetup+0x1a8>)
 80018b4:	601a      	str	r2, [r3, #0]
		vgaCircularDMA.Init.Channel = DMA_CHANNEL_6;
 80018b6:	4b22      	ldr	r3, [pc, #136]	; (8001940 <vgaSetup+0x1a4>)
 80018b8:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80018bc:	605a      	str	r2, [r3, #4]
		vgaCircularDMA.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018be:	4b20      	ldr	r3, [pc, #128]	; (8001940 <vgaSetup+0x1a4>)
 80018c0:	2240      	movs	r2, #64	; 0x40
 80018c2:	609a      	str	r2, [r3, #8]
		vgaCircularDMA.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c4:	4b1e      	ldr	r3, [pc, #120]	; (8001940 <vgaSetup+0x1a4>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
		vgaCircularDMA.Init.MemInc = DMA_MINC_ENABLE;
 80018ca:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <vgaSetup+0x1a4>)
 80018cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018d0:	611a      	str	r2, [r3, #16]
		vgaCircularDMA.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018d2:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <vgaSetup+0x1a4>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	615a      	str	r2, [r3, #20]
		vgaCircularDMA.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018d8:	4b19      	ldr	r3, [pc, #100]	; (8001940 <vgaSetup+0x1a4>)
 80018da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018de:	619a      	str	r2, [r3, #24]
		vgaCircularDMA.Init.Mode = DMA_CIRCULAR;
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <vgaSetup+0x1a4>)
 80018e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018e6:	61da      	str	r2, [r3, #28]
		vgaCircularDMA.Init.Priority = DMA_PRIORITY_HIGH;
 80018e8:	4b15      	ldr	r3, [pc, #84]	; (8001940 <vgaSetup+0x1a4>)
 80018ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018ee:	621a      	str	r2, [r3, #32]
		vgaCircularDMA.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018f0:	4b13      	ldr	r3, [pc, #76]	; (8001940 <vgaSetup+0x1a4>)
 80018f2:	2204      	movs	r2, #4
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24
		vgaCircularDMA.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80018f6:	4b12      	ldr	r3, [pc, #72]	; (8001940 <vgaSetup+0x1a4>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	629a      	str	r2, [r3, #40]	; 0x28
		vgaCircularDMA.Init.MemBurst = DMA_MBURST_SINGLE;
 80018fc:	4b10      	ldr	r3, [pc, #64]	; (8001940 <vgaSetup+0x1a4>)
 80018fe:	2200      	movs	r2, #0
 8001900:	62da      	str	r2, [r3, #44]	; 0x2c
		vgaCircularDMA.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <vgaSetup+0x1a4>)
 8001904:	2200      	movs	r2, #0
 8001906:	631a      	str	r2, [r3, #48]	; 0x30
		if (HAL_DMA_Init(&vgaCircularDMA) != HAL_OK)
 8001908:	480d      	ldr	r0, [pc, #52]	; (8001940 <vgaSetup+0x1a4>)
 800190a:	f000 fa1d 	bl	8001d48 <HAL_DMA_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <vgaSetup+0x17c>
		{
			Error_Handler();
 8001914:	f7ff fa58 	bl	8000dc8 <Error_Handler>
		}

		__HAL_LINKDMA(&vgaPixelTimer,hdma[TIM_DMA_ID_UPDATE],vgaCircularDMA);
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <vgaSetup+0x194>)
 800191a:	4a09      	ldr	r2, [pc, #36]	; (8001940 <vgaSetup+0x1a4>)
 800191c:	621a      	str	r2, [r3, #32]
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <vgaSetup+0x1a4>)
 8001920:	4a03      	ldr	r2, [pc, #12]	; (8001930 <vgaSetup+0x194>)
 8001922:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_Encoder_Start(htim, Channel);
	HAL_TIM_DMABurst_WriteStart(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength);
	HAL_TIM_OC_Start_DMA(htim, Channel, pData, Length);
	HAL_TIM_DMABurst_MultiWriteStart(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength, DataLength);
	//*/
}
 8001924:	bf00      	nop
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40023800 	.word	0x40023800
 8001930:	2000ff00 	.word	0x2000ff00
 8001934:	40010000 	.word	0x40010000
 8001938:	2000ffa8 	.word	0x2000ffa8
 800193c:	40026488 	.word	0x40026488
 8001940:	2000ff48 	.word	0x2000ff48
 8001944:	40026088 	.word	0x40026088

08001948 <vgaStart>:

void vgaStart(){
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	HAL_DMA_RegisterCallback(&vgaCircularDMA, HAL_DMA_XFER_HALFCPLT_CB_ID, vgaHalfCallBack);
 800194c:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <vgaStart+0x40>)
 800194e:	2101      	movs	r1, #1
 8001950:	480e      	ldr	r0, [pc, #56]	; (800198c <vgaStart+0x44>)
 8001952:	f000 fe13 	bl	800257c <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(&vgaCircularDMA, HAL_DMA_XFER_CPLT_CB_ID, vgaFullCallBack);
 8001956:	4a0e      	ldr	r2, [pc, #56]	; (8001990 <vgaStart+0x48>)
 8001958:	2100      	movs	r1, #0
 800195a:	480c      	ldr	r0, [pc, #48]	; (800198c <vgaStart+0x44>)
 800195c:	f000 fe0e 	bl	800257c <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(&memcopyDMA, HAL_DMA_XFER_CPLT_CB_ID, vgaCopyAndSetCallBack);
 8001960:	4a0c      	ldr	r2, [pc, #48]	; (8001994 <vgaStart+0x4c>)
 8001962:	2100      	movs	r1, #0
 8001964:	480c      	ldr	r0, [pc, #48]	; (8001998 <vgaStart+0x50>)
 8001966:	f000 fe09 	bl	800257c <HAL_DMA_RegisterCallback>

	//HAL_DMA_Start_IT(memcopyDMA, SrcAddress, DstAddress, DataLength);

	//prepare the buffer with the first two lines
	vgaStateMachine(1);
 800196a:	2001      	movs	r0, #1
 800196c:	f7ff fdc4 	bl	80014f8 <vgaStateMachine>
	vgaStateMachine(1);
 8001970:	2001      	movs	r0, #1
 8001972:	f7ff fdc1 	bl	80014f8 <vgaStateMachine>
	//start the circular buffer dma transfer aka vga main loop
	HAL_DMA_Start_IT(&vgaCircularDMA, (uint32_t)&lineBuff[0], (uint32_t)&(GPIOC->ODR), horiWhole*2);
 8001976:	4909      	ldr	r1, [pc, #36]	; (800199c <vgaStart+0x54>)
 8001978:	f44f 7348 	mov.w	r3, #800	; 0x320
 800197c:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <vgaStart+0x58>)
 800197e:	4803      	ldr	r0, [pc, #12]	; (800198c <vgaStart+0x44>)
 8001980:	f000 facb 	bl	8001f1a <HAL_DMA_Start_IT>
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	08001759 	.word	0x08001759
 800198c:	2000ff48 	.word	0x2000ff48
 8001990:	0800176f 	.word	0x0800176f
 8001994:	08001785 	.word	0x08001785
 8001998:	2000ffa8 	.word	0x2000ffa8
 800199c:	200001e0 	.word	0x200001e0
 80019a0:	40020814 	.word	0x40020814

080019a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019a8:	480d      	ldr	r0, [pc, #52]	; (80019e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019aa:	490e      	ldr	r1, [pc, #56]	; (80019e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019ac:	4a0e      	ldr	r2, [pc, #56]	; (80019e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b0:	e002      	b.n	80019b8 <LoopCopyDataInit>

080019b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b6:	3304      	adds	r3, #4

080019b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019bc:	d3f9      	bcc.n	80019b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019be:	4a0b      	ldr	r2, [pc, #44]	; (80019ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019c0:	4c0b      	ldr	r4, [pc, #44]	; (80019f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c4:	e001      	b.n	80019ca <LoopFillZerobss>

080019c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c8:	3204      	adds	r2, #4

080019ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019cc:	d3fb      	bcc.n	80019c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019ce:	f7ff fb71 	bl	80010b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019d2:	f002 fe45 	bl	8004660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019d6:	f7fe fef9 	bl	80007cc <main>
  bx  lr    
 80019da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80019e8:	080051a0 	.word	0x080051a0
  ldr r2, =_sbss
 80019ec:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80019f0:	20010028 	.word	0x20010028

080019f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f4:	e7fe      	b.n	80019f4 <ADC_IRQHandler>
	...

080019f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019fc:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <HAL_Init+0x40>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0d      	ldr	r2, [pc, #52]	; (8001a38 <HAL_Init+0x40>)
 8001a02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_Init+0x40>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <HAL_Init+0x40>)
 8001a0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <HAL_Init+0x40>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a07      	ldr	r2, [pc, #28]	; (8001a38 <HAL_Init+0x40>)
 8001a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a20:	2003      	movs	r0, #3
 8001a22:	f000 f94f 	bl	8001cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a26:	2000      	movs	r0, #0
 8001a28:	f000 f808 	bl	8001a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a2c:	f7ff f9d2 	bl	8000dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40023c00 	.word	0x40023c00

08001a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a44:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_InitTick+0x54>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <HAL_InitTick+0x58>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 f967 	bl	8001d2e <HAL_SYSTICK_Config>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00e      	b.n	8001a88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b0f      	cmp	r3, #15
 8001a6e:	d80a      	bhi.n	8001a86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a70:	2200      	movs	r2, #0
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295
 8001a78:	f000 f92f 	bl	8001cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a7c:	4a06      	ldr	r2, [pc, #24]	; (8001a98 <HAL_InitTick+0x5c>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e000      	b.n	8001a88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000000 	.word	0x20000000
 8001a94:	20000018 	.word	0x20000018
 8001a98:	20000014 	.word	0x20000014

08001a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_IncTick+0x20>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_IncTick+0x24>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	4a04      	ldr	r2, [pc, #16]	; (8001ac0 <HAL_IncTick+0x24>)
 8001aae:	6013      	str	r3, [r2, #0]
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20000018 	.word	0x20000018
 8001ac0:	20010014 	.word	0x20010014

08001ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <HAL_GetTick+0x14>)
 8001aca:	681b      	ldr	r3, [r3, #0]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	20010014 	.word	0x20010014

08001adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae4:	f7ff ffee 	bl	8001ac4 <HAL_GetTick>
 8001ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af4:	d005      	beq.n	8001b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <HAL_Delay+0x44>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4413      	add	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b02:	bf00      	nop
 8001b04:	f7ff ffde 	bl	8001ac4 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d8f7      	bhi.n	8001b04 <HAL_Delay+0x28>
  {
  }
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000018 	.word	0x20000018

08001b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <__NVIC_SetPriorityGrouping+0x44>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b40:	4013      	ands	r3, r2
 8001b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b56:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <__NVIC_SetPriorityGrouping+0x44>)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	60d3      	str	r3, [r2, #12]
}
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <__NVIC_GetPriorityGrouping+0x18>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	f003 0307 	and.w	r3, r3, #7
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	db0b      	blt.n	8001bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	f003 021f 	and.w	r2, r3, #31
 8001ba0:	4907      	ldr	r1, [pc, #28]	; (8001bc0 <__NVIC_EnableIRQ+0x38>)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	095b      	lsrs	r3, r3, #5
 8001ba8:	2001      	movs	r0, #1
 8001baa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000e100 	.word	0xe000e100

08001bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	db0a      	blt.n	8001bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	490c      	ldr	r1, [pc, #48]	; (8001c10 <__NVIC_SetPriority+0x4c>)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	0112      	lsls	r2, r2, #4
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	440b      	add	r3, r1
 8001be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bec:	e00a      	b.n	8001c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4908      	ldr	r1, [pc, #32]	; (8001c14 <__NVIC_SetPriority+0x50>)
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	3b04      	subs	r3, #4
 8001bfc:	0112      	lsls	r2, r2, #4
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	440b      	add	r3, r1
 8001c02:	761a      	strb	r2, [r3, #24]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000e100 	.word	0xe000e100
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f1c3 0307 	rsb	r3, r3, #7
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	bf28      	it	cs
 8001c36:	2304      	movcs	r3, #4
 8001c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d902      	bls.n	8001c48 <NVIC_EncodePriority+0x30>
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3b03      	subs	r3, #3
 8001c46:	e000      	b.n	8001c4a <NVIC_EncodePriority+0x32>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43da      	mvns	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c60:	f04f 31ff 	mov.w	r1, #4294967295
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	43d9      	mvns	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	4313      	orrs	r3, r2
         );
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3724      	adds	r7, #36	; 0x24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c90:	d301      	bcc.n	8001c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c92:	2301      	movs	r3, #1
 8001c94:	e00f      	b.n	8001cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c96:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <SysTick_Config+0x40>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9e:	210f      	movs	r1, #15
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca4:	f7ff ff8e 	bl	8001bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <SysTick_Config+0x40>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cae:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <SysTick_Config+0x40>)
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	e000e010 	.word	0xe000e010

08001cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff ff29 	bl	8001b24 <__NVIC_SetPriorityGrouping>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b086      	sub	sp, #24
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cec:	f7ff ff3e 	bl	8001b6c <__NVIC_GetPriorityGrouping>
 8001cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	6978      	ldr	r0, [r7, #20]
 8001cf8:	f7ff ff8e 	bl	8001c18 <NVIC_EncodePriority>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff5d 	bl	8001bc4 <__NVIC_SetPriority>
}
 8001d0a:	bf00      	nop
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	4603      	mov	r3, r0
 8001d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff31 	bl	8001b88 <__NVIC_EnableIRQ>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff ffa2 	bl	8001c80 <SysTick_Config>
 8001d3c:	4603      	mov	r3, r0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d54:	f7ff feb6 	bl	8001ac4 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e099      	b.n	8001e98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0201 	bic.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d84:	e00f      	b.n	8001da6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d86:	f7ff fe9d 	bl	8001ac4 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b05      	cmp	r3, #5
 8001d92:	d908      	bls.n	8001da6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2220      	movs	r2, #32
 8001d98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e078      	b.n	8001e98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1e8      	bne.n	8001d86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	4b38      	ldr	r3, [pc, #224]	; (8001ea0 <HAL_DMA_Init+0x158>)
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	d107      	bne.n	8001e10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f023 0307 	bic.w	r3, r3, #7
 8001e26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d117      	bne.n	8001e6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00e      	beq.n	8001e6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 fc5b 	bl	8002708 <DMA_CheckFifoParam>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d008      	beq.n	8001e6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2240      	movs	r2, #64	; 0x40
 8001e5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e66:	2301      	movs	r3, #1
 8001e68:	e016      	b.n	8001e98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 fc12 	bl	800269c <DMA_CalcBaseAndBitshift>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e80:	223f      	movs	r2, #63	; 0x3f
 8001e82:	409a      	lsls	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	f010803f 	.word	0xf010803f

08001ea4 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d101      	bne.n	8001ec4 <HAL_DMA_Start+0x20>
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e026      	b.n	8001f12 <HAL_DMA_Start+0x6e>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d115      	bne.n	8001f04 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2202      	movs	r2, #2
 8001edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	68b9      	ldr	r1, [r7, #8]
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 fba7 	bl	8002640 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f042 0201 	orr.w	r2, r2, #1
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	e005      	b.n	8001f10 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8001f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b086      	sub	sp, #24
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f30:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_DMA_Start_IT+0x26>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e040      	b.n	8001fc2 <HAL_DMA_Start_IT+0xa8>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d12f      	bne.n	8001fb4 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2202      	movs	r2, #2
 8001f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	68b9      	ldr	r1, [r7, #8]
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 fb69 	bl	8002640 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f72:	223f      	movs	r2, #63	; 0x3f
 8001f74:	409a      	lsls	r2, r3
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f042 0216 	orr.w	r2, r2, #22
 8001f88:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d007      	beq.n	8001fa2 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f042 0208 	orr.w	r2, r2, #8
 8001fa0:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f042 0201 	orr.w	r2, r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	e005      	b.n	8001fc0 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b084      	sub	sp, #16
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fd8:	f7ff fd74 	bl	8001ac4 <HAL_GetTick>
 8001fdc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d008      	beq.n	8001ffc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2280      	movs	r2, #128	; 0x80
 8001fee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e052      	b.n	80020a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0216 	bic.w	r2, r2, #22
 800200a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	695a      	ldr	r2, [r3, #20]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800201a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	2b00      	cmp	r3, #0
 8002022:	d103      	bne.n	800202c <HAL_DMA_Abort+0x62>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002028:	2b00      	cmp	r3, #0
 800202a:	d007      	beq.n	800203c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0208 	bic.w	r2, r2, #8
 800203a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0201 	bic.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800204c:	e013      	b.n	8002076 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800204e:	f7ff fd39 	bl	8001ac4 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b05      	cmp	r3, #5
 800205a:	d90c      	bls.n	8002076 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2220      	movs	r2, #32
 8002060:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2203      	movs	r2, #3
 8002066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e015      	b.n	80020a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1e4      	bne.n	800204e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002088:	223f      	movs	r2, #63	; 0x3f
 800208a:	409a      	lsls	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b08a      	sub	sp, #40	; 0x28
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	460b      	mov	r3, r1
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 80020b8:	2300      	movs	r3, #0
 80020ba:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 80020bc:	f7ff fd02 	bl	8001ac4 <HAL_GetTick>
 80020c0:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d008      	beq.n	80020e0 <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2280      	movs	r2, #128	; 0x80
 80020d2:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e0bf      	b.n	8002260 <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d005      	beq.n	80020fa <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e0b2      	b.n	8002260 <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80020fa:	7afb      	ldrb	r3, [r7, #11]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d106      	bne.n	800210e <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002104:	2220      	movs	r2, #32
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
 800210c:	e005      	b.n	800211a <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002112:	2210      	movs	r2, #16
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211e:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8002126:	e05a      	b.n	80021de <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212e:	d017      	beq.n	8002160 <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d007      	beq.n	8002146 <HAL_DMA_PollForTransfer+0x9c>
 8002136:	f7ff fcc5 	bl	8001ac4 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	429a      	cmp	r2, r3
 8002144:	d20c      	bcs.n	8002160 <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2220      	movs	r2, #32
 800214a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e07f      	b.n	8002260 <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216a:	2208      	movs	r2, #8
 800216c:	409a      	lsls	r2, r3
 800216e:	6a3b      	ldr	r3, [r7, #32]
 8002170:	4013      	ands	r3, r2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00b      	beq.n	800218e <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217a:	f043 0201 	orr.w	r2, r3, #1
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002186:	2208      	movs	r2, #8
 8002188:	409a      	lsls	r2, r3
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002192:	2201      	movs	r2, #1
 8002194:	409a      	lsls	r2, r3
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	4013      	ands	r3, r2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00b      	beq.n	80021b6 <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a2:	f043 0202 	orr.w	r2, r3, #2
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ae:	2201      	movs	r2, #1
 80021b0:	409a      	lsls	r2, r3
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ba:	2204      	movs	r2, #4
 80021bc:	409a      	lsls	r2, r3
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00b      	beq.n	80021de <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ca:	f043 0204 	orr.w	r2, r3, #4
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d6:	2204      	movs	r2, #4
 80021d8:	409a      	lsls	r2, r3
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 80021de:	6a3a      	ldr	r2, [r7, #32]
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d105      	bne.n	80021f4 <HAL_DMA_PollForTransfer+0x14a>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d099      	beq.n	8002128 <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d018      	beq.n	800222e <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d012      	beq.n	800222e <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f7ff fede 	bl	8001fca <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002212:	2230      	movs	r2, #48	; 0x30
 8002214:	409a      	lsls	r2, r3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	609a      	str	r2, [r3, #8]
    
      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e018      	b.n	8002260 <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800222e:	7afb      	ldrb	r3, [r7, #11]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10e      	bne.n	8002252 <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002238:	2230      	movs	r2, #48	; 0x30
 800223a:	409a      	lsls	r2, r3
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	609a      	str	r2, [r3, #8]
    
    hdma->State = HAL_DMA_STATE_READY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002250:	e005      	b.n	800225e <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002256:	2210      	movs	r2, #16
 8002258:	409a      	lsls	r2, r3
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 800225e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3728      	adds	r7, #40	; 0x28
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002274:	4b8e      	ldr	r3, [pc, #568]	; (80024b0 <HAL_DMA_IRQHandler+0x248>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a8e      	ldr	r2, [pc, #568]	; (80024b4 <HAL_DMA_IRQHandler+0x24c>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	0a9b      	lsrs	r3, r3, #10
 8002280:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002286:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002292:	2208      	movs	r2, #8
 8002294:	409a      	lsls	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4013      	ands	r3, r2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d01a      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d013      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0204 	bic.w	r2, r2, #4
 80022ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c0:	2208      	movs	r2, #8
 80022c2:	409a      	lsls	r2, r3
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022cc:	f043 0201 	orr.w	r2, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d8:	2201      	movs	r2, #1
 80022da:	409a      	lsls	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4013      	ands	r3, r2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d012      	beq.n	800230a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00b      	beq.n	800230a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f6:	2201      	movs	r2, #1
 80022f8:	409a      	lsls	r2, r3
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002302:	f043 0202 	orr.w	r2, r3, #2
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230e:	2204      	movs	r2, #4
 8002310:	409a      	lsls	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4013      	ands	r3, r2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d012      	beq.n	8002340 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00b      	beq.n	8002340 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232c:	2204      	movs	r2, #4
 800232e:	409a      	lsls	r2, r3
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002338:	f043 0204 	orr.w	r2, r3, #4
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002344:	2210      	movs	r2, #16
 8002346:	409a      	lsls	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d043      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d03c      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002362:	2210      	movs	r2, #16
 8002364:	409a      	lsls	r2, r3
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d018      	beq.n	80023aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d108      	bne.n	8002398 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	2b00      	cmp	r3, #0
 800238c:	d024      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	4798      	blx	r3
 8002396:	e01f      	b.n	80023d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800239c:	2b00      	cmp	r3, #0
 800239e:	d01b      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	4798      	blx	r3
 80023a8:	e016      	b.n	80023d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d107      	bne.n	80023c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0208 	bic.w	r2, r2, #8
 80023c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023dc:	2220      	movs	r2, #32
 80023de:	409a      	lsls	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 808f 	beq.w	8002508 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 8087 	beq.w	8002508 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fe:	2220      	movs	r2, #32
 8002400:	409a      	lsls	r2, r3
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b05      	cmp	r3, #5
 8002410:	d136      	bne.n	8002480 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0216 	bic.w	r2, r2, #22
 8002420:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695a      	ldr	r2, [r3, #20]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002430:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	2b00      	cmp	r3, #0
 8002438:	d103      	bne.n	8002442 <HAL_DMA_IRQHandler+0x1da>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800243e:	2b00      	cmp	r3, #0
 8002440:	d007      	beq.n	8002452 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 0208 	bic.w	r2, r2, #8
 8002450:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002456:	223f      	movs	r2, #63	; 0x3f
 8002458:	409a      	lsls	r2, r3
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002472:	2b00      	cmp	r3, #0
 8002474:	d07e      	beq.n	8002574 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	4798      	blx	r3
        }
        return;
 800247e:	e079      	b.n	8002574 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d01d      	beq.n	80024ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10d      	bne.n	80024b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d031      	beq.n	8002508 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	4798      	blx	r3
 80024ac:	e02c      	b.n	8002508 <HAL_DMA_IRQHandler+0x2a0>
 80024ae:	bf00      	nop
 80024b0:	20000000 	.word	0x20000000
 80024b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d023      	beq.n	8002508 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	4798      	blx	r3
 80024c8:	e01e      	b.n	8002508 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10f      	bne.n	80024f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0210 	bic.w	r2, r2, #16
 80024e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250c:	2b00      	cmp	r3, #0
 800250e:	d032      	beq.n	8002576 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b00      	cmp	r3, #0
 800251a:	d022      	beq.n	8002562 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2205      	movs	r2, #5
 8002520:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0201 	bic.w	r2, r2, #1
 8002532:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	3301      	adds	r3, #1
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	429a      	cmp	r2, r3
 800253e:	d307      	bcc.n	8002550 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f2      	bne.n	8002534 <HAL_DMA_IRQHandler+0x2cc>
 800254e:	e000      	b.n	8002552 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002550:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002566:	2b00      	cmp	r3, #0
 8002568:	d005      	beq.n	8002576 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	4798      	blx	r3
 8002572:	e000      	b.n	8002576 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002574:	bf00      	nop
    }
  }
}
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	460b      	mov	r3, r1
 8002586:	607a      	str	r2, [r7, #4]
 8002588:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002594:	2b01      	cmp	r3, #1
 8002596:	d101      	bne.n	800259c <HAL_DMA_RegisterCallback+0x20>
 8002598:	2302      	movs	r3, #2
 800259a:	e03d      	b.n	8002618 <HAL_DMA_RegisterCallback+0x9c>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d12c      	bne.n	800260a <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 80025b0:	7afb      	ldrb	r3, [r7, #11]
 80025b2:	2b05      	cmp	r3, #5
 80025b4:	d826      	bhi.n	8002604 <HAL_DMA_RegisterCallback+0x88>
 80025b6:	a201      	add	r2, pc, #4	; (adr r2, 80025bc <HAL_DMA_RegisterCallback+0x40>)
 80025b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025bc:	080025d5 	.word	0x080025d5
 80025c0:	080025dd 	.word	0x080025dd
 80025c4:	080025e5 	.word	0x080025e5
 80025c8:	080025ed 	.word	0x080025ed
 80025cc:	080025f5 	.word	0x080025f5
 80025d0:	080025fd 	.word	0x080025fd
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 80025da:	e018      	b.n	800260e <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80025e2:	e014      	b.n	800260e <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80025ea:	e010      	b.n	800260e <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80025f2:	e00c      	b.n	800260e <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80025fa:	e008      	b.n	800260e <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002602:	e004      	b.n	800260e <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	75fb      	strb	r3, [r7, #23]
      break;
 8002608:	e001      	b.n	800260e <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8002616:	7dfb      	ldrb	r3, [r7, #23]
}
 8002618:	4618      	mov	r0, r3
 800261a:	371c      	adds	r7, #28
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002632:	b2db      	uxtb	r3, r3
}
 8002634:	4618      	mov	r0, r3
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800265c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b40      	cmp	r3, #64	; 0x40
 800266c:	d108      	bne.n	8002680 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800267e:	e007      	b.n	8002690 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	60da      	str	r2, [r3, #12]
}
 8002690:	bf00      	nop
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	3b10      	subs	r3, #16
 80026ac:	4a14      	ldr	r2, [pc, #80]	; (8002700 <DMA_CalcBaseAndBitshift+0x64>)
 80026ae:	fba2 2303 	umull	r2, r3, r2, r3
 80026b2:	091b      	lsrs	r3, r3, #4
 80026b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026b6:	4a13      	ldr	r2, [pc, #76]	; (8002704 <DMA_CalcBaseAndBitshift+0x68>)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4413      	add	r3, r2
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d909      	bls.n	80026de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026d2:	f023 0303 	bic.w	r3, r3, #3
 80026d6:	1d1a      	adds	r2, r3, #4
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	659a      	str	r2, [r3, #88]	; 0x58
 80026dc:	e007      	b.n	80026ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026e6:	f023 0303 	bic.w	r3, r3, #3
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	aaaaaaab 	.word	0xaaaaaaab
 8002704:	08005154 	.word	0x08005154

08002708 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002718:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d11f      	bne.n	8002762 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b03      	cmp	r3, #3
 8002726:	d856      	bhi.n	80027d6 <DMA_CheckFifoParam+0xce>
 8002728:	a201      	add	r2, pc, #4	; (adr r2, 8002730 <DMA_CheckFifoParam+0x28>)
 800272a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272e:	bf00      	nop
 8002730:	08002741 	.word	0x08002741
 8002734:	08002753 	.word	0x08002753
 8002738:	08002741 	.word	0x08002741
 800273c:	080027d7 	.word	0x080027d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d046      	beq.n	80027da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002750:	e043      	b.n	80027da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002756:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800275a:	d140      	bne.n	80027de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002760:	e03d      	b.n	80027de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800276a:	d121      	bne.n	80027b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b03      	cmp	r3, #3
 8002770:	d837      	bhi.n	80027e2 <DMA_CheckFifoParam+0xda>
 8002772:	a201      	add	r2, pc, #4	; (adr r2, 8002778 <DMA_CheckFifoParam+0x70>)
 8002774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002778:	08002789 	.word	0x08002789
 800277c:	0800278f 	.word	0x0800278f
 8002780:	08002789 	.word	0x08002789
 8002784:	080027a1 	.word	0x080027a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	73fb      	strb	r3, [r7, #15]
      break;
 800278c:	e030      	b.n	80027f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d025      	beq.n	80027e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800279e:	e022      	b.n	80027e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027a8:	d11f      	bne.n	80027ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027ae:	e01c      	b.n	80027ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d903      	bls.n	80027be <DMA_CheckFifoParam+0xb6>
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d003      	beq.n	80027c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027bc:	e018      	b.n	80027f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	73fb      	strb	r3, [r7, #15]
      break;
 80027c2:	e015      	b.n	80027f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00e      	beq.n	80027ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	73fb      	strb	r3, [r7, #15]
      break;
 80027d4:	e00b      	b.n	80027ee <DMA_CheckFifoParam+0xe6>
      break;
 80027d6:	bf00      	nop
 80027d8:	e00a      	b.n	80027f0 <DMA_CheckFifoParam+0xe8>
      break;
 80027da:	bf00      	nop
 80027dc:	e008      	b.n	80027f0 <DMA_CheckFifoParam+0xe8>
      break;
 80027de:	bf00      	nop
 80027e0:	e006      	b.n	80027f0 <DMA_CheckFifoParam+0xe8>
      break;
 80027e2:	bf00      	nop
 80027e4:	e004      	b.n	80027f0 <DMA_CheckFifoParam+0xe8>
      break;
 80027e6:	bf00      	nop
 80027e8:	e002      	b.n	80027f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80027ea:	bf00      	nop
 80027ec:	e000      	b.n	80027f0 <DMA_CheckFifoParam+0xe8>
      break;
 80027ee:	bf00      	nop
    }
  } 
  
  return status; 
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop

08002800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002800:	b480      	push	{r7}
 8002802:	b089      	sub	sp, #36	; 0x24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800280e:	2300      	movs	r3, #0
 8002810:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002812:	2300      	movs	r3, #0
 8002814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
 800281a:	e159      	b.n	8002ad0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800281c:	2201      	movs	r2, #1
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	4013      	ands	r3, r2
 800282e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	429a      	cmp	r2, r3
 8002836:	f040 8148 	bne.w	8002aca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	2b01      	cmp	r3, #1
 8002844:	d005      	beq.n	8002852 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800284e:	2b02      	cmp	r3, #2
 8002850:	d130      	bne.n	80028b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	2203      	movs	r2, #3
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4313      	orrs	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002888:	2201      	movs	r2, #1
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	091b      	lsrs	r3, r3, #4
 800289e:	f003 0201 	and.w	r2, r3, #1
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d017      	beq.n	80028f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	2203      	movs	r2, #3
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d123      	bne.n	8002944 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	08da      	lsrs	r2, r3, #3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3208      	adds	r2, #8
 8002904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002908:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	220f      	movs	r2, #15
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	08da      	lsrs	r2, r3, #3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3208      	adds	r2, #8
 800293e:	69b9      	ldr	r1, [r7, #24]
 8002940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	2203      	movs	r2, #3
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 0203 	and.w	r2, r3, #3
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80a2 	beq.w	8002aca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	4b57      	ldr	r3, [pc, #348]	; (8002ae8 <HAL_GPIO_Init+0x2e8>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	4a56      	ldr	r2, [pc, #344]	; (8002ae8 <HAL_GPIO_Init+0x2e8>)
 8002990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002994:	6453      	str	r3, [r2, #68]	; 0x44
 8002996:	4b54      	ldr	r3, [pc, #336]	; (8002ae8 <HAL_GPIO_Init+0x2e8>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029a2:	4a52      	ldr	r2, [pc, #328]	; (8002aec <HAL_GPIO_Init+0x2ec>)
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	089b      	lsrs	r3, r3, #2
 80029a8:	3302      	adds	r3, #2
 80029aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	220f      	movs	r2, #15
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4013      	ands	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a49      	ldr	r2, [pc, #292]	; (8002af0 <HAL_GPIO_Init+0x2f0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d019      	beq.n	8002a02 <HAL_GPIO_Init+0x202>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a48      	ldr	r2, [pc, #288]	; (8002af4 <HAL_GPIO_Init+0x2f4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d013      	beq.n	80029fe <HAL_GPIO_Init+0x1fe>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a47      	ldr	r2, [pc, #284]	; (8002af8 <HAL_GPIO_Init+0x2f8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d00d      	beq.n	80029fa <HAL_GPIO_Init+0x1fa>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a46      	ldr	r2, [pc, #280]	; (8002afc <HAL_GPIO_Init+0x2fc>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d007      	beq.n	80029f6 <HAL_GPIO_Init+0x1f6>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a45      	ldr	r2, [pc, #276]	; (8002b00 <HAL_GPIO_Init+0x300>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d101      	bne.n	80029f2 <HAL_GPIO_Init+0x1f2>
 80029ee:	2304      	movs	r3, #4
 80029f0:	e008      	b.n	8002a04 <HAL_GPIO_Init+0x204>
 80029f2:	2307      	movs	r3, #7
 80029f4:	e006      	b.n	8002a04 <HAL_GPIO_Init+0x204>
 80029f6:	2303      	movs	r3, #3
 80029f8:	e004      	b.n	8002a04 <HAL_GPIO_Init+0x204>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e002      	b.n	8002a04 <HAL_GPIO_Init+0x204>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <HAL_GPIO_Init+0x204>
 8002a02:	2300      	movs	r3, #0
 8002a04:	69fa      	ldr	r2, [r7, #28]
 8002a06:	f002 0203 	and.w	r2, r2, #3
 8002a0a:	0092      	lsls	r2, r2, #2
 8002a0c:	4093      	lsls	r3, r2
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a14:	4935      	ldr	r1, [pc, #212]	; (8002aec <HAL_GPIO_Init+0x2ec>)
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	089b      	lsrs	r3, r3, #2
 8002a1a:	3302      	adds	r3, #2
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a22:	4b38      	ldr	r3, [pc, #224]	; (8002b04 <HAL_GPIO_Init+0x304>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a46:	4a2f      	ldr	r2, [pc, #188]	; (8002b04 <HAL_GPIO_Init+0x304>)
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a4c:	4b2d      	ldr	r3, [pc, #180]	; (8002b04 <HAL_GPIO_Init+0x304>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a70:	4a24      	ldr	r2, [pc, #144]	; (8002b04 <HAL_GPIO_Init+0x304>)
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a76:	4b23      	ldr	r3, [pc, #140]	; (8002b04 <HAL_GPIO_Init+0x304>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4013      	ands	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a9a:	4a1a      	ldr	r2, [pc, #104]	; (8002b04 <HAL_GPIO_Init+0x304>)
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aa0:	4b18      	ldr	r3, [pc, #96]	; (8002b04 <HAL_GPIO_Init+0x304>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ac4:	4a0f      	ldr	r2, [pc, #60]	; (8002b04 <HAL_GPIO_Init+0x304>)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	3301      	adds	r3, #1
 8002ace:	61fb      	str	r3, [r7, #28]
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	2b0f      	cmp	r3, #15
 8002ad4:	f67f aea2 	bls.w	800281c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ad8:	bf00      	nop
 8002ada:	bf00      	nop
 8002adc:	3724      	adds	r7, #36	; 0x24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	40013800 	.word	0x40013800
 8002af0:	40020000 	.word	0x40020000
 8002af4:	40020400 	.word	0x40020400
 8002af8:	40020800 	.word	0x40020800
 8002afc:	40020c00 	.word	0x40020c00
 8002b00:	40021000 	.word	0x40021000
 8002b04:	40013c00 	.word	0x40013c00

08002b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	807b      	strh	r3, [r7, #2]
 8002b14:	4613      	mov	r3, r2
 8002b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b18:	787b      	ldrb	r3, [r7, #1]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b1e:	887a      	ldrh	r2, [r7, #2]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b24:	e003      	b.n	8002b2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b26:	887b      	ldrh	r3, [r7, #2]
 8002b28:	041a      	lsls	r2, r3, #16
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	619a      	str	r2, [r3, #24]
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
	...

08002b3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e267      	b.n	800301e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d075      	beq.n	8002c46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b5a:	4b88      	ldr	r3, [pc, #544]	; (8002d7c <HAL_RCC_OscConfig+0x240>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d00c      	beq.n	8002b80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b66:	4b85      	ldr	r3, [pc, #532]	; (8002d7c <HAL_RCC_OscConfig+0x240>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d112      	bne.n	8002b98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b72:	4b82      	ldr	r3, [pc, #520]	; (8002d7c <HAL_RCC_OscConfig+0x240>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b7e:	d10b      	bne.n	8002b98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b80:	4b7e      	ldr	r3, [pc, #504]	; (8002d7c <HAL_RCC_OscConfig+0x240>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d05b      	beq.n	8002c44 <HAL_RCC_OscConfig+0x108>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d157      	bne.n	8002c44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e242      	b.n	800301e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba0:	d106      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x74>
 8002ba2:	4b76      	ldr	r3, [pc, #472]	; (8002d7c <HAL_RCC_OscConfig+0x240>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a75      	ldr	r2, [pc, #468]	; (8002d7c <HAL_RCC_OscConfig+0x240>)
 8002ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	e01d      	b.n	8002bec <HAL_RCC_OscConfig+0xb0>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x98>
 8002bba:	4b70      	ldr	r3, [pc, #448]	; (8002d7c <HAL_RCC_OscConfig+0x240>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a6f      	ldr	r2, [pc, #444]	; (8002d7c <HAL_RCC_OscConfig+0x240>)
 8002bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	4b6d      	ldr	r3, [pc, #436]	; (8002d7c <HAL_RCC_OscConfig+0x240>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a6c      	ldr	r2, [pc, #432]	; (8002d7c <HAL_RCC_OscConfig+0x240>)
 8002bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	e00b      	b.n	8002bec <HAL_RCC_OscConfig+0xb0>
 8002bd4:	4b69      	ldr	r3, [pc, #420]	; (8002d7c <HAL_RCC_OscConfig+0x240>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a68      	ldr	r2, [pc, #416]	; (8002d7c <HAL_RCC_OscConfig+0x240>)
 8002bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	4b66      	ldr	r3, [pc, #408]	; (8002d7c <HAL_RCC_OscConfig+0x240>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a65      	ldr	r2, [pc, #404]	; (8002d7c <HAL_RCC_OscConfig+0x240>)
 8002be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d013      	beq.n	8002c1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fe ff66 	bl	8001ac4 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bfc:	f7fe ff62 	bl	8001ac4 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b64      	cmp	r3, #100	; 0x64
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e207      	b.n	800301e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0e:	4b5b      	ldr	r3, [pc, #364]	; (8002d7c <HAL_RCC_OscConfig+0x240>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0xc0>
 8002c1a:	e014      	b.n	8002c46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1c:	f7fe ff52 	bl	8001ac4 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c24:	f7fe ff4e 	bl	8001ac4 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	; 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e1f3      	b.n	800301e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c36:	4b51      	ldr	r3, [pc, #324]	; (8002d7c <HAL_RCC_OscConfig+0x240>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0xe8>
 8002c42:	e000      	b.n	8002c46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d063      	beq.n	8002d1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c52:	4b4a      	ldr	r3, [pc, #296]	; (8002d7c <HAL_RCC_OscConfig+0x240>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00b      	beq.n	8002c76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c5e:	4b47      	ldr	r3, [pc, #284]	; (8002d7c <HAL_RCC_OscConfig+0x240>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d11c      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c6a:	4b44      	ldr	r3, [pc, #272]	; (8002d7c <HAL_RCC_OscConfig+0x240>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d116      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c76:	4b41      	ldr	r3, [pc, #260]	; (8002d7c <HAL_RCC_OscConfig+0x240>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d005      	beq.n	8002c8e <HAL_RCC_OscConfig+0x152>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d001      	beq.n	8002c8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e1c7      	b.n	800301e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8e:	4b3b      	ldr	r3, [pc, #236]	; (8002d7c <HAL_RCC_OscConfig+0x240>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4937      	ldr	r1, [pc, #220]	; (8002d7c <HAL_RCC_OscConfig+0x240>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca2:	e03a      	b.n	8002d1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d020      	beq.n	8002cee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cac:	4b34      	ldr	r3, [pc, #208]	; (8002d80 <HAL_RCC_OscConfig+0x244>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb2:	f7fe ff07 	bl	8001ac4 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cba:	f7fe ff03 	bl	8001ac4 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e1a8      	b.n	800301e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ccc:	4b2b      	ldr	r3, [pc, #172]	; (8002d7c <HAL_RCC_OscConfig+0x240>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0f0      	beq.n	8002cba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd8:	4b28      	ldr	r3, [pc, #160]	; (8002d7c <HAL_RCC_OscConfig+0x240>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	4925      	ldr	r1, [pc, #148]	; (8002d7c <HAL_RCC_OscConfig+0x240>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	600b      	str	r3, [r1, #0]
 8002cec:	e015      	b.n	8002d1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cee:	4b24      	ldr	r3, [pc, #144]	; (8002d80 <HAL_RCC_OscConfig+0x244>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf4:	f7fe fee6 	bl	8001ac4 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cfc:	f7fe fee2 	bl	8001ac4 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e187      	b.n	800301e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d0e:	4b1b      	ldr	r3, [pc, #108]	; (8002d7c <HAL_RCC_OscConfig+0x240>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d036      	beq.n	8002d94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d016      	beq.n	8002d5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d2e:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <HAL_RCC_OscConfig+0x248>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d34:	f7fe fec6 	bl	8001ac4 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d3c:	f7fe fec2 	bl	8001ac4 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e167      	b.n	800301e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d4e:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <HAL_RCC_OscConfig+0x240>)
 8002d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0f0      	beq.n	8002d3c <HAL_RCC_OscConfig+0x200>
 8002d5a:	e01b      	b.n	8002d94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d5c:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <HAL_RCC_OscConfig+0x248>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d62:	f7fe feaf 	bl	8001ac4 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d68:	e00e      	b.n	8002d88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d6a:	f7fe feab 	bl	8001ac4 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d907      	bls.n	8002d88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e150      	b.n	800301e <HAL_RCC_OscConfig+0x4e2>
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	42470000 	.word	0x42470000
 8002d84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d88:	4b88      	ldr	r3, [pc, #544]	; (8002fac <HAL_RCC_OscConfig+0x470>)
 8002d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1ea      	bne.n	8002d6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 8097 	beq.w	8002ed0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002da2:	2300      	movs	r3, #0
 8002da4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002da6:	4b81      	ldr	r3, [pc, #516]	; (8002fac <HAL_RCC_OscConfig+0x470>)
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10f      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	4b7d      	ldr	r3, [pc, #500]	; (8002fac <HAL_RCC_OscConfig+0x470>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	4a7c      	ldr	r2, [pc, #496]	; (8002fac <HAL_RCC_OscConfig+0x470>)
 8002dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc2:	4b7a      	ldr	r3, [pc, #488]	; (8002fac <HAL_RCC_OscConfig+0x470>)
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd2:	4b77      	ldr	r3, [pc, #476]	; (8002fb0 <HAL_RCC_OscConfig+0x474>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d118      	bne.n	8002e10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dde:	4b74      	ldr	r3, [pc, #464]	; (8002fb0 <HAL_RCC_OscConfig+0x474>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a73      	ldr	r2, [pc, #460]	; (8002fb0 <HAL_RCC_OscConfig+0x474>)
 8002de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dea:	f7fe fe6b 	bl	8001ac4 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df2:	f7fe fe67 	bl	8001ac4 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e10c      	b.n	800301e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e04:	4b6a      	ldr	r3, [pc, #424]	; (8002fb0 <HAL_RCC_OscConfig+0x474>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0f0      	beq.n	8002df2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d106      	bne.n	8002e26 <HAL_RCC_OscConfig+0x2ea>
 8002e18:	4b64      	ldr	r3, [pc, #400]	; (8002fac <HAL_RCC_OscConfig+0x470>)
 8002e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1c:	4a63      	ldr	r2, [pc, #396]	; (8002fac <HAL_RCC_OscConfig+0x470>)
 8002e1e:	f043 0301 	orr.w	r3, r3, #1
 8002e22:	6713      	str	r3, [r2, #112]	; 0x70
 8002e24:	e01c      	b.n	8002e60 <HAL_RCC_OscConfig+0x324>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	2b05      	cmp	r3, #5
 8002e2c:	d10c      	bne.n	8002e48 <HAL_RCC_OscConfig+0x30c>
 8002e2e:	4b5f      	ldr	r3, [pc, #380]	; (8002fac <HAL_RCC_OscConfig+0x470>)
 8002e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e32:	4a5e      	ldr	r2, [pc, #376]	; (8002fac <HAL_RCC_OscConfig+0x470>)
 8002e34:	f043 0304 	orr.w	r3, r3, #4
 8002e38:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3a:	4b5c      	ldr	r3, [pc, #368]	; (8002fac <HAL_RCC_OscConfig+0x470>)
 8002e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3e:	4a5b      	ldr	r2, [pc, #364]	; (8002fac <HAL_RCC_OscConfig+0x470>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	6713      	str	r3, [r2, #112]	; 0x70
 8002e46:	e00b      	b.n	8002e60 <HAL_RCC_OscConfig+0x324>
 8002e48:	4b58      	ldr	r3, [pc, #352]	; (8002fac <HAL_RCC_OscConfig+0x470>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4c:	4a57      	ldr	r2, [pc, #348]	; (8002fac <HAL_RCC_OscConfig+0x470>)
 8002e4e:	f023 0301 	bic.w	r3, r3, #1
 8002e52:	6713      	str	r3, [r2, #112]	; 0x70
 8002e54:	4b55      	ldr	r3, [pc, #340]	; (8002fac <HAL_RCC_OscConfig+0x470>)
 8002e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e58:	4a54      	ldr	r2, [pc, #336]	; (8002fac <HAL_RCC_OscConfig+0x470>)
 8002e5a:	f023 0304 	bic.w	r3, r3, #4
 8002e5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d015      	beq.n	8002e94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e68:	f7fe fe2c 	bl	8001ac4 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e6e:	e00a      	b.n	8002e86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e70:	f7fe fe28 	bl	8001ac4 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e0cb      	b.n	800301e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e86:	4b49      	ldr	r3, [pc, #292]	; (8002fac <HAL_RCC_OscConfig+0x470>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d0ee      	beq.n	8002e70 <HAL_RCC_OscConfig+0x334>
 8002e92:	e014      	b.n	8002ebe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e94:	f7fe fe16 	bl	8001ac4 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e9a:	e00a      	b.n	8002eb2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e9c:	f7fe fe12 	bl	8001ac4 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e0b5      	b.n	800301e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb2:	4b3e      	ldr	r3, [pc, #248]	; (8002fac <HAL_RCC_OscConfig+0x470>)
 8002eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1ee      	bne.n	8002e9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ebe:	7dfb      	ldrb	r3, [r7, #23]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d105      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec4:	4b39      	ldr	r3, [pc, #228]	; (8002fac <HAL_RCC_OscConfig+0x470>)
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	4a38      	ldr	r2, [pc, #224]	; (8002fac <HAL_RCC_OscConfig+0x470>)
 8002eca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ece:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 80a1 	beq.w	800301c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002eda:	4b34      	ldr	r3, [pc, #208]	; (8002fac <HAL_RCC_OscConfig+0x470>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 030c 	and.w	r3, r3, #12
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d05c      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d141      	bne.n	8002f72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eee:	4b31      	ldr	r3, [pc, #196]	; (8002fb4 <HAL_RCC_OscConfig+0x478>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef4:	f7fe fde6 	bl	8001ac4 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002efc:	f7fe fde2 	bl	8001ac4 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e087      	b.n	800301e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f0e:	4b27      	ldr	r3, [pc, #156]	; (8002fac <HAL_RCC_OscConfig+0x470>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f0      	bne.n	8002efc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69da      	ldr	r2, [r3, #28]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	019b      	lsls	r3, r3, #6
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f30:	085b      	lsrs	r3, r3, #1
 8002f32:	3b01      	subs	r3, #1
 8002f34:	041b      	lsls	r3, r3, #16
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	061b      	lsls	r3, r3, #24
 8002f3e:	491b      	ldr	r1, [pc, #108]	; (8002fac <HAL_RCC_OscConfig+0x470>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f44:	4b1b      	ldr	r3, [pc, #108]	; (8002fb4 <HAL_RCC_OscConfig+0x478>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4a:	f7fe fdbb 	bl	8001ac4 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f52:	f7fe fdb7 	bl	8001ac4 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e05c      	b.n	800301e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f64:	4b11      	ldr	r3, [pc, #68]	; (8002fac <HAL_RCC_OscConfig+0x470>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCC_OscConfig+0x416>
 8002f70:	e054      	b.n	800301c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f72:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <HAL_RCC_OscConfig+0x478>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f78:	f7fe fda4 	bl	8001ac4 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f80:	f7fe fda0 	bl	8001ac4 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e045      	b.n	800301e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <HAL_RCC_OscConfig+0x470>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCC_OscConfig+0x444>
 8002f9e:	e03d      	b.n	800301c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d107      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e038      	b.n	800301e <HAL_RCC_OscConfig+0x4e2>
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	40007000 	.word	0x40007000
 8002fb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fb8:	4b1b      	ldr	r3, [pc, #108]	; (8003028 <HAL_RCC_OscConfig+0x4ec>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d028      	beq.n	8003018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d121      	bne.n	8003018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d11a      	bne.n	8003018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fe8:	4013      	ands	r3, r2
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d111      	bne.n	8003018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	085b      	lsrs	r3, r3, #1
 8003000:	3b01      	subs	r3, #1
 8003002:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003004:	429a      	cmp	r2, r3
 8003006:	d107      	bne.n	8003018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003012:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003014:	429a      	cmp	r2, r3
 8003016:	d001      	beq.n	800301c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e000      	b.n	800301e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40023800 	.word	0x40023800

0800302c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e0cc      	b.n	80031da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003040:	4b68      	ldr	r3, [pc, #416]	; (80031e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d90c      	bls.n	8003068 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304e:	4b65      	ldr	r3, [pc, #404]	; (80031e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003056:	4b63      	ldr	r3, [pc, #396]	; (80031e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	429a      	cmp	r2, r3
 8003062:	d001      	beq.n	8003068 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0b8      	b.n	80031da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d020      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003080:	4b59      	ldr	r3, [pc, #356]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	4a58      	ldr	r2, [pc, #352]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800308a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003098:	4b53      	ldr	r3, [pc, #332]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	4a52      	ldr	r2, [pc, #328]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a4:	4b50      	ldr	r3, [pc, #320]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	494d      	ldr	r1, [pc, #308]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d044      	beq.n	800314c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d107      	bne.n	80030da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ca:	4b47      	ldr	r3, [pc, #284]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d119      	bne.n	800310a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e07f      	b.n	80031da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d003      	beq.n	80030ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	d107      	bne.n	80030fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ea:	4b3f      	ldr	r3, [pc, #252]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d109      	bne.n	800310a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e06f      	b.n	80031da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fa:	4b3b      	ldr	r3, [pc, #236]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e067      	b.n	80031da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800310a:	4b37      	ldr	r3, [pc, #220]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f023 0203 	bic.w	r2, r3, #3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	4934      	ldr	r1, [pc, #208]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	4313      	orrs	r3, r2
 800311a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800311c:	f7fe fcd2 	bl	8001ac4 <HAL_GetTick>
 8003120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003122:	e00a      	b.n	800313a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003124:	f7fe fcce 	bl	8001ac4 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003132:	4293      	cmp	r3, r2
 8003134:	d901      	bls.n	800313a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e04f      	b.n	80031da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313a:	4b2b      	ldr	r3, [pc, #172]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 020c 	and.w	r2, r3, #12
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	429a      	cmp	r2, r3
 800314a:	d1eb      	bne.n	8003124 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800314c:	4b25      	ldr	r3, [pc, #148]	; (80031e4 <HAL_RCC_ClockConfig+0x1b8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d20c      	bcs.n	8003174 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315a:	4b22      	ldr	r3, [pc, #136]	; (80031e4 <HAL_RCC_ClockConfig+0x1b8>)
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003162:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d001      	beq.n	8003174 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e032      	b.n	80031da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003180:	4b19      	ldr	r3, [pc, #100]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	4916      	ldr	r1, [pc, #88]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	4313      	orrs	r3, r2
 8003190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d009      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800319e:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	490e      	ldr	r1, [pc, #56]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031b2:	f000 f821 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 80031b6:	4602      	mov	r2, r0
 80031b8:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	091b      	lsrs	r3, r3, #4
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	490a      	ldr	r1, [pc, #40]	; (80031ec <HAL_RCC_ClockConfig+0x1c0>)
 80031c4:	5ccb      	ldrb	r3, [r1, r3]
 80031c6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ca:	4a09      	ldr	r2, [pc, #36]	; (80031f0 <HAL_RCC_ClockConfig+0x1c4>)
 80031cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_RCC_ClockConfig+0x1c8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fe fc32 	bl	8001a3c <HAL_InitTick>

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40023c00 	.word	0x40023c00
 80031e8:	40023800 	.word	0x40023800
 80031ec:	0800513c 	.word	0x0800513c
 80031f0:	20000000 	.word	0x20000000
 80031f4:	20000014 	.word	0x20000014

080031f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031fc:	b094      	sub	sp, #80	; 0x50
 80031fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	647b      	str	r3, [r7, #68]	; 0x44
 8003204:	2300      	movs	r3, #0
 8003206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003208:	2300      	movs	r3, #0
 800320a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003210:	4b79      	ldr	r3, [pc, #484]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 030c 	and.w	r3, r3, #12
 8003218:	2b08      	cmp	r3, #8
 800321a:	d00d      	beq.n	8003238 <HAL_RCC_GetSysClockFreq+0x40>
 800321c:	2b08      	cmp	r3, #8
 800321e:	f200 80e1 	bhi.w	80033e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003222:	2b00      	cmp	r3, #0
 8003224:	d002      	beq.n	800322c <HAL_RCC_GetSysClockFreq+0x34>
 8003226:	2b04      	cmp	r3, #4
 8003228:	d003      	beq.n	8003232 <HAL_RCC_GetSysClockFreq+0x3a>
 800322a:	e0db      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800322c:	4b73      	ldr	r3, [pc, #460]	; (80033fc <HAL_RCC_GetSysClockFreq+0x204>)
 800322e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003230:	e0db      	b.n	80033ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003232:	4b73      	ldr	r3, [pc, #460]	; (8003400 <HAL_RCC_GetSysClockFreq+0x208>)
 8003234:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003236:	e0d8      	b.n	80033ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003238:	4b6f      	ldr	r3, [pc, #444]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003240:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003242:	4b6d      	ldr	r3, [pc, #436]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d063      	beq.n	8003316 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800324e:	4b6a      	ldr	r3, [pc, #424]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	099b      	lsrs	r3, r3, #6
 8003254:	2200      	movs	r2, #0
 8003256:	63bb      	str	r3, [r7, #56]	; 0x38
 8003258:	63fa      	str	r2, [r7, #60]	; 0x3c
 800325a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003260:	633b      	str	r3, [r7, #48]	; 0x30
 8003262:	2300      	movs	r3, #0
 8003264:	637b      	str	r3, [r7, #52]	; 0x34
 8003266:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800326a:	4622      	mov	r2, r4
 800326c:	462b      	mov	r3, r5
 800326e:	f04f 0000 	mov.w	r0, #0
 8003272:	f04f 0100 	mov.w	r1, #0
 8003276:	0159      	lsls	r1, r3, #5
 8003278:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800327c:	0150      	lsls	r0, r2, #5
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	4621      	mov	r1, r4
 8003284:	1a51      	subs	r1, r2, r1
 8003286:	6139      	str	r1, [r7, #16]
 8003288:	4629      	mov	r1, r5
 800328a:	eb63 0301 	sbc.w	r3, r3, r1
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	f04f 0300 	mov.w	r3, #0
 8003298:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800329c:	4659      	mov	r1, fp
 800329e:	018b      	lsls	r3, r1, #6
 80032a0:	4651      	mov	r1, sl
 80032a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032a6:	4651      	mov	r1, sl
 80032a8:	018a      	lsls	r2, r1, #6
 80032aa:	4651      	mov	r1, sl
 80032ac:	ebb2 0801 	subs.w	r8, r2, r1
 80032b0:	4659      	mov	r1, fp
 80032b2:	eb63 0901 	sbc.w	r9, r3, r1
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032ca:	4690      	mov	r8, r2
 80032cc:	4699      	mov	r9, r3
 80032ce:	4623      	mov	r3, r4
 80032d0:	eb18 0303 	adds.w	r3, r8, r3
 80032d4:	60bb      	str	r3, [r7, #8]
 80032d6:	462b      	mov	r3, r5
 80032d8:	eb49 0303 	adc.w	r3, r9, r3
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	f04f 0200 	mov.w	r2, #0
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032ea:	4629      	mov	r1, r5
 80032ec:	024b      	lsls	r3, r1, #9
 80032ee:	4621      	mov	r1, r4
 80032f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032f4:	4621      	mov	r1, r4
 80032f6:	024a      	lsls	r2, r1, #9
 80032f8:	4610      	mov	r0, r2
 80032fa:	4619      	mov	r1, r3
 80032fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032fe:	2200      	movs	r2, #0
 8003300:	62bb      	str	r3, [r7, #40]	; 0x28
 8003302:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003304:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003308:	f7fc ffba 	bl	8000280 <__aeabi_uldivmod>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4613      	mov	r3, r2
 8003312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003314:	e058      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003316:	4b38      	ldr	r3, [pc, #224]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	099b      	lsrs	r3, r3, #6
 800331c:	2200      	movs	r2, #0
 800331e:	4618      	mov	r0, r3
 8003320:	4611      	mov	r1, r2
 8003322:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003326:	623b      	str	r3, [r7, #32]
 8003328:	2300      	movs	r3, #0
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
 800332c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003330:	4642      	mov	r2, r8
 8003332:	464b      	mov	r3, r9
 8003334:	f04f 0000 	mov.w	r0, #0
 8003338:	f04f 0100 	mov.w	r1, #0
 800333c:	0159      	lsls	r1, r3, #5
 800333e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003342:	0150      	lsls	r0, r2, #5
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4641      	mov	r1, r8
 800334a:	ebb2 0a01 	subs.w	sl, r2, r1
 800334e:	4649      	mov	r1, r9
 8003350:	eb63 0b01 	sbc.w	fp, r3, r1
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003360:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003364:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003368:	ebb2 040a 	subs.w	r4, r2, sl
 800336c:	eb63 050b 	sbc.w	r5, r3, fp
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	00eb      	lsls	r3, r5, #3
 800337a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800337e:	00e2      	lsls	r2, r4, #3
 8003380:	4614      	mov	r4, r2
 8003382:	461d      	mov	r5, r3
 8003384:	4643      	mov	r3, r8
 8003386:	18e3      	adds	r3, r4, r3
 8003388:	603b      	str	r3, [r7, #0]
 800338a:	464b      	mov	r3, r9
 800338c:	eb45 0303 	adc.w	r3, r5, r3
 8003390:	607b      	str	r3, [r7, #4]
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800339e:	4629      	mov	r1, r5
 80033a0:	028b      	lsls	r3, r1, #10
 80033a2:	4621      	mov	r1, r4
 80033a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033a8:	4621      	mov	r1, r4
 80033aa:	028a      	lsls	r2, r1, #10
 80033ac:	4610      	mov	r0, r2
 80033ae:	4619      	mov	r1, r3
 80033b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033b2:	2200      	movs	r2, #0
 80033b4:	61bb      	str	r3, [r7, #24]
 80033b6:	61fa      	str	r2, [r7, #28]
 80033b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033bc:	f7fc ff60 	bl	8000280 <__aeabi_uldivmod>
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4613      	mov	r3, r2
 80033c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033c8:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	0c1b      	lsrs	r3, r3, #16
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	3301      	adds	r3, #1
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80033d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033e2:	e002      	b.n	80033ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <HAL_RCC_GetSysClockFreq+0x204>)
 80033e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3750      	adds	r7, #80	; 0x50
 80033f0:	46bd      	mov	sp, r7
 80033f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033f6:	bf00      	nop
 80033f8:	40023800 	.word	0x40023800
 80033fc:	00f42400 	.word	0x00f42400
 8003400:	007a1200 	.word	0x007a1200

08003404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003408:	4b03      	ldr	r3, [pc, #12]	; (8003418 <HAL_RCC_GetHCLKFreq+0x14>)
 800340a:	681b      	ldr	r3, [r3, #0]
}
 800340c:	4618      	mov	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	20000000 	.word	0x20000000

0800341c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003420:	f7ff fff0 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 8003424:	4602      	mov	r2, r0
 8003426:	4b05      	ldr	r3, [pc, #20]	; (800343c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	0a9b      	lsrs	r3, r3, #10
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	4903      	ldr	r1, [pc, #12]	; (8003440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003432:	5ccb      	ldrb	r3, [r1, r3]
 8003434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003438:	4618      	mov	r0, r3
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40023800 	.word	0x40023800
 8003440:	0800514c 	.word	0x0800514c

08003444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003448:	f7ff ffdc 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 800344c:	4602      	mov	r2, r0
 800344e:	4b05      	ldr	r3, [pc, #20]	; (8003464 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	0b5b      	lsrs	r3, r3, #13
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	4903      	ldr	r1, [pc, #12]	; (8003468 <HAL_RCC_GetPCLK2Freq+0x24>)
 800345a:	5ccb      	ldrb	r3, [r1, r3]
 800345c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003460:	4618      	mov	r0, r3
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40023800 	.word	0x40023800
 8003468:	0800514c 	.word	0x0800514c

0800346c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e041      	b.n	8003502 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d106      	bne.n	8003498 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7fd fcc6 	bl	8000e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3304      	adds	r3, #4
 80034a8:	4619      	mov	r1, r3
 80034aa:	4610      	mov	r0, r2
 80034ac:	f000 f9aa 	bl	8003804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e041      	b.n	80035a0 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d106      	bne.n	8003536 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f839 	bl	80035a8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2202      	movs	r2, #2
 800353a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	3304      	adds	r3, #4
 8003546:	4619      	mov	r1, r3
 8003548:	4610      	mov	r0, r2
 800354a:	f000 f95b 	bl	8003804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035c8:	2300      	movs	r3, #0
 80035ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <HAL_TIM_OC_ConfigChannel+0x1e>
 80035d6:	2302      	movs	r3, #2
 80035d8:	e048      	b.n	800366c <HAL_TIM_OC_ConfigChannel+0xb0>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b0c      	cmp	r3, #12
 80035e6:	d839      	bhi.n	800365c <HAL_TIM_OC_ConfigChannel+0xa0>
 80035e8:	a201      	add	r2, pc, #4	; (adr r2, 80035f0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80035ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ee:	bf00      	nop
 80035f0:	08003625 	.word	0x08003625
 80035f4:	0800365d 	.word	0x0800365d
 80035f8:	0800365d 	.word	0x0800365d
 80035fc:	0800365d 	.word	0x0800365d
 8003600:	08003633 	.word	0x08003633
 8003604:	0800365d 	.word	0x0800365d
 8003608:	0800365d 	.word	0x0800365d
 800360c:	0800365d 	.word	0x0800365d
 8003610:	08003641 	.word	0x08003641
 8003614:	0800365d 	.word	0x0800365d
 8003618:	0800365d 	.word	0x0800365d
 800361c:	0800365d 	.word	0x0800365d
 8003620:	0800364f 	.word	0x0800364f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	4618      	mov	r0, r3
 800362c:	f000 f96a 	bl	8003904 <TIM_OC1_SetConfig>
      break;
 8003630:	e017      	b.n	8003662 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68b9      	ldr	r1, [r7, #8]
 8003638:	4618      	mov	r0, r3
 800363a:	f000 f9c9 	bl	80039d0 <TIM_OC2_SetConfig>
      break;
 800363e:	e010      	b.n	8003662 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68b9      	ldr	r1, [r7, #8]
 8003646:	4618      	mov	r0, r3
 8003648:	f000 fa2e 	bl	8003aa8 <TIM_OC3_SetConfig>
      break;
 800364c:	e009      	b.n	8003662 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68b9      	ldr	r1, [r7, #8]
 8003654:	4618      	mov	r0, r3
 8003656:	f000 fa91 	bl	8003b7c <TIM_OC4_SetConfig>
      break;
 800365a:	e002      	b.n	8003662 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	75fb      	strb	r3, [r7, #23]
      break;
 8003660:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800366a:	7dfb      	ldrb	r3, [r7, #23]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_TIM_ConfigClockSource+0x1c>
 800368c:	2302      	movs	r3, #2
 800368e:	e0b4      	b.n	80037fa <HAL_TIM_ConfigClockSource+0x186>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036c8:	d03e      	beq.n	8003748 <HAL_TIM_ConfigClockSource+0xd4>
 80036ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ce:	f200 8087 	bhi.w	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d6:	f000 8086 	beq.w	80037e6 <HAL_TIM_ConfigClockSource+0x172>
 80036da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036de:	d87f      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036e0:	2b70      	cmp	r3, #112	; 0x70
 80036e2:	d01a      	beq.n	800371a <HAL_TIM_ConfigClockSource+0xa6>
 80036e4:	2b70      	cmp	r3, #112	; 0x70
 80036e6:	d87b      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036e8:	2b60      	cmp	r3, #96	; 0x60
 80036ea:	d050      	beq.n	800378e <HAL_TIM_ConfigClockSource+0x11a>
 80036ec:	2b60      	cmp	r3, #96	; 0x60
 80036ee:	d877      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036f0:	2b50      	cmp	r3, #80	; 0x50
 80036f2:	d03c      	beq.n	800376e <HAL_TIM_ConfigClockSource+0xfa>
 80036f4:	2b50      	cmp	r3, #80	; 0x50
 80036f6:	d873      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036f8:	2b40      	cmp	r3, #64	; 0x40
 80036fa:	d058      	beq.n	80037ae <HAL_TIM_ConfigClockSource+0x13a>
 80036fc:	2b40      	cmp	r3, #64	; 0x40
 80036fe:	d86f      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003700:	2b30      	cmp	r3, #48	; 0x30
 8003702:	d064      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15a>
 8003704:	2b30      	cmp	r3, #48	; 0x30
 8003706:	d86b      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003708:	2b20      	cmp	r3, #32
 800370a:	d060      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15a>
 800370c:	2b20      	cmp	r3, #32
 800370e:	d867      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003710:	2b00      	cmp	r3, #0
 8003712:	d05c      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15a>
 8003714:	2b10      	cmp	r3, #16
 8003716:	d05a      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15a>
 8003718:	e062      	b.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	6899      	ldr	r1, [r3, #8]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f000 faf1 	bl	8003d10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800373c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	609a      	str	r2, [r3, #8]
      break;
 8003746:	e04f      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	6899      	ldr	r1, [r3, #8]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f000 fada 	bl	8003d10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800376a:	609a      	str	r2, [r3, #8]
      break;
 800376c:	e03c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	6859      	ldr	r1, [r3, #4]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	461a      	mov	r2, r3
 800377c:	f000 fa4e 	bl	8003c1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2150      	movs	r1, #80	; 0x50
 8003786:	4618      	mov	r0, r3
 8003788:	f000 faa7 	bl	8003cda <TIM_ITRx_SetConfig>
      break;
 800378c:	e02c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	6859      	ldr	r1, [r3, #4]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	461a      	mov	r2, r3
 800379c:	f000 fa6d 	bl	8003c7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2160      	movs	r1, #96	; 0x60
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fa97 	bl	8003cda <TIM_ITRx_SetConfig>
      break;
 80037ac:	e01c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6859      	ldr	r1, [r3, #4]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	461a      	mov	r2, r3
 80037bc:	f000 fa2e 	bl	8003c1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2140      	movs	r1, #64	; 0x40
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fa87 	bl	8003cda <TIM_ITRx_SetConfig>
      break;
 80037cc:	e00c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4619      	mov	r1, r3
 80037d8:	4610      	mov	r0, r2
 80037da:	f000 fa7e 	bl	8003cda <TIM_ITRx_SetConfig>
      break;
 80037de:	e003      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
      break;
 80037e4:	e000      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a34      	ldr	r2, [pc, #208]	; (80038e8 <TIM_Base_SetConfig+0xe4>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d00f      	beq.n	800383c <TIM_Base_SetConfig+0x38>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003822:	d00b      	beq.n	800383c <TIM_Base_SetConfig+0x38>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a31      	ldr	r2, [pc, #196]	; (80038ec <TIM_Base_SetConfig+0xe8>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d007      	beq.n	800383c <TIM_Base_SetConfig+0x38>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a30      	ldr	r2, [pc, #192]	; (80038f0 <TIM_Base_SetConfig+0xec>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d003      	beq.n	800383c <TIM_Base_SetConfig+0x38>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a2f      	ldr	r2, [pc, #188]	; (80038f4 <TIM_Base_SetConfig+0xf0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d108      	bne.n	800384e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	4313      	orrs	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a25      	ldr	r2, [pc, #148]	; (80038e8 <TIM_Base_SetConfig+0xe4>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d01b      	beq.n	800388e <TIM_Base_SetConfig+0x8a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800385c:	d017      	beq.n	800388e <TIM_Base_SetConfig+0x8a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a22      	ldr	r2, [pc, #136]	; (80038ec <TIM_Base_SetConfig+0xe8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d013      	beq.n	800388e <TIM_Base_SetConfig+0x8a>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a21      	ldr	r2, [pc, #132]	; (80038f0 <TIM_Base_SetConfig+0xec>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d00f      	beq.n	800388e <TIM_Base_SetConfig+0x8a>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a20      	ldr	r2, [pc, #128]	; (80038f4 <TIM_Base_SetConfig+0xf0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d00b      	beq.n	800388e <TIM_Base_SetConfig+0x8a>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a1f      	ldr	r2, [pc, #124]	; (80038f8 <TIM_Base_SetConfig+0xf4>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d007      	beq.n	800388e <TIM_Base_SetConfig+0x8a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a1e      	ldr	r2, [pc, #120]	; (80038fc <TIM_Base_SetConfig+0xf8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d003      	beq.n	800388e <TIM_Base_SetConfig+0x8a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a1d      	ldr	r2, [pc, #116]	; (8003900 <TIM_Base_SetConfig+0xfc>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d108      	bne.n	80038a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a08      	ldr	r2, [pc, #32]	; (80038e8 <TIM_Base_SetConfig+0xe4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d103      	bne.n	80038d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	691a      	ldr	r2, [r3, #16]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	615a      	str	r2, [r3, #20]
}
 80038da:	bf00      	nop
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40010000 	.word	0x40010000
 80038ec:	40000400 	.word	0x40000400
 80038f0:	40000800 	.word	0x40000800
 80038f4:	40000c00 	.word	0x40000c00
 80038f8:	40014000 	.word	0x40014000
 80038fc:	40014400 	.word	0x40014400
 8003900:	40014800 	.word	0x40014800

08003904 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003904:	b480      	push	{r7}
 8003906:	b087      	sub	sp, #28
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	f023 0201 	bic.w	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0303 	bic.w	r3, r3, #3
 800393a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f023 0302 	bic.w	r3, r3, #2
 800394c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	4313      	orrs	r3, r2
 8003956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a1c      	ldr	r2, [pc, #112]	; (80039cc <TIM_OC1_SetConfig+0xc8>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d10c      	bne.n	800397a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f023 0308 	bic.w	r3, r3, #8
 8003966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	4313      	orrs	r3, r2
 8003970:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f023 0304 	bic.w	r3, r3, #4
 8003978:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a13      	ldr	r2, [pc, #76]	; (80039cc <TIM_OC1_SetConfig+0xc8>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d111      	bne.n	80039a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	621a      	str	r2, [r3, #32]
}
 80039c0:	bf00      	nop
 80039c2:	371c      	adds	r7, #28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	40010000 	.word	0x40010000

080039d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	f023 0210 	bic.w	r2, r3, #16
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	021b      	lsls	r3, r3, #8
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f023 0320 	bic.w	r3, r3, #32
 8003a1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a1e      	ldr	r2, [pc, #120]	; (8003aa4 <TIM_OC2_SetConfig+0xd4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d10d      	bne.n	8003a4c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a15      	ldr	r2, [pc, #84]	; (8003aa4 <TIM_OC2_SetConfig+0xd4>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d113      	bne.n	8003a7c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	621a      	str	r2, [r3, #32]
}
 8003a96:	bf00      	nop
 8003a98:	371c      	adds	r7, #28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	40010000 	.word	0x40010000

08003aa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 0303 	bic.w	r3, r3, #3
 8003ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003af0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	021b      	lsls	r3, r3, #8
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a1d      	ldr	r2, [pc, #116]	; (8003b78 <TIM_OC3_SetConfig+0xd0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d10d      	bne.n	8003b22 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	021b      	lsls	r3, r3, #8
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a14      	ldr	r2, [pc, #80]	; (8003b78 <TIM_OC3_SetConfig+0xd0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d113      	bne.n	8003b52 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	011b      	lsls	r3, r3, #4
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	621a      	str	r2, [r3, #32]
}
 8003b6c:	bf00      	nop
 8003b6e:	371c      	adds	r7, #28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	40010000 	.word	0x40010000

08003b7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	021b      	lsls	r3, r3, #8
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	031b      	lsls	r3, r3, #12
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a10      	ldr	r2, [pc, #64]	; (8003c18 <TIM_OC4_SetConfig+0x9c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d109      	bne.n	8003bf0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003be2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	019b      	lsls	r3, r3, #6
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	621a      	str	r2, [r3, #32]
}
 8003c0a:	bf00      	nop
 8003c0c:	371c      	adds	r7, #28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40010000 	.word	0x40010000

08003c1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b087      	sub	sp, #28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	f023 0201 	bic.w	r2, r3, #1
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f023 030a 	bic.w	r3, r3, #10
 8003c58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	621a      	str	r2, [r3, #32]
}
 8003c6e:	bf00      	nop
 8003c70:	371c      	adds	r7, #28
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b087      	sub	sp, #28
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	60f8      	str	r0, [r7, #12]
 8003c82:	60b9      	str	r1, [r7, #8]
 8003c84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	f023 0210 	bic.w	r2, r3, #16
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ca4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	031b      	lsls	r3, r3, #12
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	621a      	str	r2, [r3, #32]
}
 8003cce:	bf00      	nop
 8003cd0:	371c      	adds	r7, #28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b085      	sub	sp, #20
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f043 0307 	orr.w	r3, r3, #7
 8003cfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	609a      	str	r2, [r3, #8]
}
 8003d04:	bf00      	nop
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
 8003d1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	021a      	lsls	r2, r3, #8
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	431a      	orrs	r2, r3
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	609a      	str	r2, [r3, #8]
}
 8003d44:	bf00      	nop
 8003d46:	371c      	adds	r7, #28
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e050      	b.n	8003e0a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a1c      	ldr	r2, [pc, #112]	; (8003e18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d018      	beq.n	8003dde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db4:	d013      	beq.n	8003dde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a18      	ldr	r2, [pc, #96]	; (8003e1c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d00e      	beq.n	8003dde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a16      	ldr	r2, [pc, #88]	; (8003e20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d009      	beq.n	8003dde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a15      	ldr	r2, [pc, #84]	; (8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d004      	beq.n	8003dde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a13      	ldr	r2, [pc, #76]	; (8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d10c      	bne.n	8003df8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003de4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40010000 	.word	0x40010000
 8003e1c:	40000400 	.word	0x40000400
 8003e20:	40000800 	.word	0x40000800
 8003e24:	40000c00 	.word	0x40000c00
 8003e28:	40014000 	.word	0x40014000

08003e2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d101      	bne.n	8003e48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e44:	2302      	movs	r3, #2
 8003e46:	e03d      	b.n	8003ec4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e03f      	b.n	8003f62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d106      	bne.n	8003efc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7fd f82a 	bl	8000f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2224      	movs	r2, #36	; 0x24
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f929 	bl	800416c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695a      	ldr	r2, [r3, #20]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b08a      	sub	sp, #40	; 0x28
 8003f6e:	af02      	add	r7, sp, #8
 8003f70:	60f8      	str	r0, [r7, #12]
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	603b      	str	r3, [r7, #0]
 8003f76:	4613      	mov	r3, r2
 8003f78:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b20      	cmp	r3, #32
 8003f88:	d17c      	bne.n	8004084 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d002      	beq.n	8003f96 <HAL_UART_Transmit+0x2c>
 8003f90:	88fb      	ldrh	r3, [r7, #6]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e075      	b.n	8004086 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_UART_Transmit+0x3e>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e06e      	b.n	8004086 <HAL_UART_Transmit+0x11c>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2221      	movs	r2, #33	; 0x21
 8003fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fbe:	f7fd fd81 	bl	8001ac4 <HAL_GetTick>
 8003fc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	88fa      	ldrh	r2, [r7, #6]
 8003fc8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	88fa      	ldrh	r2, [r7, #6]
 8003fce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd8:	d108      	bne.n	8003fec <HAL_UART_Transmit+0x82>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d104      	bne.n	8003fec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	61bb      	str	r3, [r7, #24]
 8003fea:	e003      	b.n	8003ff4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ffc:	e02a      	b.n	8004054 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2200      	movs	r2, #0
 8004006:	2180      	movs	r1, #128	; 0x80
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 f840 	bl	800408e <UART_WaitOnFlagUntilTimeout>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e036      	b.n	8004086 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10b      	bne.n	8004036 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800402c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	3302      	adds	r3, #2
 8004032:	61bb      	str	r3, [r7, #24]
 8004034:	e007      	b.n	8004046 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	781a      	ldrb	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	3301      	adds	r3, #1
 8004044:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800404a:	b29b      	uxth	r3, r3
 800404c:	3b01      	subs	r3, #1
 800404e:	b29a      	uxth	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004058:	b29b      	uxth	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1cf      	bne.n	8003ffe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2200      	movs	r2, #0
 8004066:	2140      	movs	r1, #64	; 0x40
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 f810 	bl	800408e <UART_WaitOnFlagUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e006      	b.n	8004086 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004080:	2300      	movs	r3, #0
 8004082:	e000      	b.n	8004086 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004084:	2302      	movs	r3, #2
  }
}
 8004086:	4618      	mov	r0, r3
 8004088:	3720      	adds	r7, #32
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b090      	sub	sp, #64	; 0x40
 8004092:	af00      	add	r7, sp, #0
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	603b      	str	r3, [r7, #0]
 800409a:	4613      	mov	r3, r2
 800409c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800409e:	e050      	b.n	8004142 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a6:	d04c      	beq.n	8004142 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d007      	beq.n	80040be <UART_WaitOnFlagUntilTimeout+0x30>
 80040ae:	f7fd fd09 	bl	8001ac4 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d241      	bcs.n	8004142 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	330c      	adds	r3, #12
 80040c4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c8:	e853 3f00 	ldrex	r3, [r3]
 80040cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	330c      	adds	r3, #12
 80040dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040de:	637a      	str	r2, [r7, #52]	; 0x34
 80040e0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040e6:	e841 2300 	strex	r3, r2, [r1]
 80040ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1e5      	bne.n	80040be <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3314      	adds	r3, #20
 80040f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	e853 3f00 	ldrex	r3, [r3]
 8004100:	613b      	str	r3, [r7, #16]
   return(result);
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f023 0301 	bic.w	r3, r3, #1
 8004108:	63bb      	str	r3, [r7, #56]	; 0x38
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3314      	adds	r3, #20
 8004110:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004112:	623a      	str	r2, [r7, #32]
 8004114:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004116:	69f9      	ldr	r1, [r7, #28]
 8004118:	6a3a      	ldr	r2, [r7, #32]
 800411a:	e841 2300 	strex	r3, r2, [r1]
 800411e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1e5      	bne.n	80040f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2220      	movs	r2, #32
 800412a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2220      	movs	r2, #32
 8004132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e00f      	b.n	8004162 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4013      	ands	r3, r2
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	429a      	cmp	r2, r3
 8004150:	bf0c      	ite	eq
 8004152:	2301      	moveq	r3, #1
 8004154:	2300      	movne	r3, #0
 8004156:	b2db      	uxtb	r3, r3
 8004158:	461a      	mov	r2, r3
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	429a      	cmp	r2, r3
 800415e:	d09f      	beq.n	80040a0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3740      	adds	r7, #64	; 0x40
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800416c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004170:	b0c0      	sub	sp, #256	; 0x100
 8004172:	af00      	add	r7, sp, #0
 8004174:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004188:	68d9      	ldr	r1, [r3, #12]
 800418a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	ea40 0301 	orr.w	r3, r0, r1
 8004194:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	431a      	orrs	r2, r3
 80041a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	431a      	orrs	r2, r3
 80041ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80041c4:	f021 010c 	bic.w	r1, r1, #12
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80041d2:	430b      	orrs	r3, r1
 80041d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e6:	6999      	ldr	r1, [r3, #24]
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	ea40 0301 	orr.w	r3, r0, r1
 80041f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	4b8f      	ldr	r3, [pc, #572]	; (8004438 <UART_SetConfig+0x2cc>)
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d005      	beq.n	800420c <UART_SetConfig+0xa0>
 8004200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	4b8d      	ldr	r3, [pc, #564]	; (800443c <UART_SetConfig+0x2d0>)
 8004208:	429a      	cmp	r2, r3
 800420a:	d104      	bne.n	8004216 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800420c:	f7ff f91a 	bl	8003444 <HAL_RCC_GetPCLK2Freq>
 8004210:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004214:	e003      	b.n	800421e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004216:	f7ff f901 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 800421a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800421e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004228:	f040 810c 	bne.w	8004444 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800422c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004230:	2200      	movs	r2, #0
 8004232:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004236:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800423a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800423e:	4622      	mov	r2, r4
 8004240:	462b      	mov	r3, r5
 8004242:	1891      	adds	r1, r2, r2
 8004244:	65b9      	str	r1, [r7, #88]	; 0x58
 8004246:	415b      	adcs	r3, r3
 8004248:	65fb      	str	r3, [r7, #92]	; 0x5c
 800424a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800424e:	4621      	mov	r1, r4
 8004250:	eb12 0801 	adds.w	r8, r2, r1
 8004254:	4629      	mov	r1, r5
 8004256:	eb43 0901 	adc.w	r9, r3, r1
 800425a:	f04f 0200 	mov.w	r2, #0
 800425e:	f04f 0300 	mov.w	r3, #0
 8004262:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004266:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800426a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800426e:	4690      	mov	r8, r2
 8004270:	4699      	mov	r9, r3
 8004272:	4623      	mov	r3, r4
 8004274:	eb18 0303 	adds.w	r3, r8, r3
 8004278:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800427c:	462b      	mov	r3, r5
 800427e:	eb49 0303 	adc.w	r3, r9, r3
 8004282:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004292:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004296:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800429a:	460b      	mov	r3, r1
 800429c:	18db      	adds	r3, r3, r3
 800429e:	653b      	str	r3, [r7, #80]	; 0x50
 80042a0:	4613      	mov	r3, r2
 80042a2:	eb42 0303 	adc.w	r3, r2, r3
 80042a6:	657b      	str	r3, [r7, #84]	; 0x54
 80042a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80042ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80042b0:	f7fb ffe6 	bl	8000280 <__aeabi_uldivmod>
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4b61      	ldr	r3, [pc, #388]	; (8004440 <UART_SetConfig+0x2d4>)
 80042ba:	fba3 2302 	umull	r2, r3, r3, r2
 80042be:	095b      	lsrs	r3, r3, #5
 80042c0:	011c      	lsls	r4, r3, #4
 80042c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042c6:	2200      	movs	r2, #0
 80042c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80042d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80042d4:	4642      	mov	r2, r8
 80042d6:	464b      	mov	r3, r9
 80042d8:	1891      	adds	r1, r2, r2
 80042da:	64b9      	str	r1, [r7, #72]	; 0x48
 80042dc:	415b      	adcs	r3, r3
 80042de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042e4:	4641      	mov	r1, r8
 80042e6:	eb12 0a01 	adds.w	sl, r2, r1
 80042ea:	4649      	mov	r1, r9
 80042ec:	eb43 0b01 	adc.w	fp, r3, r1
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004300:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004304:	4692      	mov	sl, r2
 8004306:	469b      	mov	fp, r3
 8004308:	4643      	mov	r3, r8
 800430a:	eb1a 0303 	adds.w	r3, sl, r3
 800430e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004312:	464b      	mov	r3, r9
 8004314:	eb4b 0303 	adc.w	r3, fp, r3
 8004318:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800431c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004328:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800432c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004330:	460b      	mov	r3, r1
 8004332:	18db      	adds	r3, r3, r3
 8004334:	643b      	str	r3, [r7, #64]	; 0x40
 8004336:	4613      	mov	r3, r2
 8004338:	eb42 0303 	adc.w	r3, r2, r3
 800433c:	647b      	str	r3, [r7, #68]	; 0x44
 800433e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004342:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004346:	f7fb ff9b 	bl	8000280 <__aeabi_uldivmod>
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	4611      	mov	r1, r2
 8004350:	4b3b      	ldr	r3, [pc, #236]	; (8004440 <UART_SetConfig+0x2d4>)
 8004352:	fba3 2301 	umull	r2, r3, r3, r1
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	2264      	movs	r2, #100	; 0x64
 800435a:	fb02 f303 	mul.w	r3, r2, r3
 800435e:	1acb      	subs	r3, r1, r3
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004366:	4b36      	ldr	r3, [pc, #216]	; (8004440 <UART_SetConfig+0x2d4>)
 8004368:	fba3 2302 	umull	r2, r3, r3, r2
 800436c:	095b      	lsrs	r3, r3, #5
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004374:	441c      	add	r4, r3
 8004376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800437a:	2200      	movs	r2, #0
 800437c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004380:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004384:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004388:	4642      	mov	r2, r8
 800438a:	464b      	mov	r3, r9
 800438c:	1891      	adds	r1, r2, r2
 800438e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004390:	415b      	adcs	r3, r3
 8004392:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004394:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004398:	4641      	mov	r1, r8
 800439a:	1851      	adds	r1, r2, r1
 800439c:	6339      	str	r1, [r7, #48]	; 0x30
 800439e:	4649      	mov	r1, r9
 80043a0:	414b      	adcs	r3, r1
 80043a2:	637b      	str	r3, [r7, #52]	; 0x34
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80043b0:	4659      	mov	r1, fp
 80043b2:	00cb      	lsls	r3, r1, #3
 80043b4:	4651      	mov	r1, sl
 80043b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ba:	4651      	mov	r1, sl
 80043bc:	00ca      	lsls	r2, r1, #3
 80043be:	4610      	mov	r0, r2
 80043c0:	4619      	mov	r1, r3
 80043c2:	4603      	mov	r3, r0
 80043c4:	4642      	mov	r2, r8
 80043c6:	189b      	adds	r3, r3, r2
 80043c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043cc:	464b      	mov	r3, r9
 80043ce:	460a      	mov	r2, r1
 80043d0:	eb42 0303 	adc.w	r3, r2, r3
 80043d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043ec:	460b      	mov	r3, r1
 80043ee:	18db      	adds	r3, r3, r3
 80043f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80043f2:	4613      	mov	r3, r2
 80043f4:	eb42 0303 	adc.w	r3, r2, r3
 80043f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004402:	f7fb ff3d 	bl	8000280 <__aeabi_uldivmod>
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	4b0d      	ldr	r3, [pc, #52]	; (8004440 <UART_SetConfig+0x2d4>)
 800440c:	fba3 1302 	umull	r1, r3, r3, r2
 8004410:	095b      	lsrs	r3, r3, #5
 8004412:	2164      	movs	r1, #100	; 0x64
 8004414:	fb01 f303 	mul.w	r3, r1, r3
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	3332      	adds	r3, #50	; 0x32
 800441e:	4a08      	ldr	r2, [pc, #32]	; (8004440 <UART_SetConfig+0x2d4>)
 8004420:	fba2 2303 	umull	r2, r3, r2, r3
 8004424:	095b      	lsrs	r3, r3, #5
 8004426:	f003 0207 	and.w	r2, r3, #7
 800442a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4422      	add	r2, r4
 8004432:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004434:	e105      	b.n	8004642 <UART_SetConfig+0x4d6>
 8004436:	bf00      	nop
 8004438:	40011000 	.word	0x40011000
 800443c:	40011400 	.word	0x40011400
 8004440:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004448:	2200      	movs	r2, #0
 800444a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800444e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004452:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004456:	4642      	mov	r2, r8
 8004458:	464b      	mov	r3, r9
 800445a:	1891      	adds	r1, r2, r2
 800445c:	6239      	str	r1, [r7, #32]
 800445e:	415b      	adcs	r3, r3
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
 8004462:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004466:	4641      	mov	r1, r8
 8004468:	1854      	adds	r4, r2, r1
 800446a:	4649      	mov	r1, r9
 800446c:	eb43 0501 	adc.w	r5, r3, r1
 8004470:	f04f 0200 	mov.w	r2, #0
 8004474:	f04f 0300 	mov.w	r3, #0
 8004478:	00eb      	lsls	r3, r5, #3
 800447a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800447e:	00e2      	lsls	r2, r4, #3
 8004480:	4614      	mov	r4, r2
 8004482:	461d      	mov	r5, r3
 8004484:	4643      	mov	r3, r8
 8004486:	18e3      	adds	r3, r4, r3
 8004488:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800448c:	464b      	mov	r3, r9
 800448e:	eb45 0303 	adc.w	r3, r5, r3
 8004492:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	f04f 0300 	mov.w	r3, #0
 80044ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80044b2:	4629      	mov	r1, r5
 80044b4:	008b      	lsls	r3, r1, #2
 80044b6:	4621      	mov	r1, r4
 80044b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044bc:	4621      	mov	r1, r4
 80044be:	008a      	lsls	r2, r1, #2
 80044c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80044c4:	f7fb fedc 	bl	8000280 <__aeabi_uldivmod>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4b60      	ldr	r3, [pc, #384]	; (8004650 <UART_SetConfig+0x4e4>)
 80044ce:	fba3 2302 	umull	r2, r3, r3, r2
 80044d2:	095b      	lsrs	r3, r3, #5
 80044d4:	011c      	lsls	r4, r3, #4
 80044d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044da:	2200      	movs	r2, #0
 80044dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044e8:	4642      	mov	r2, r8
 80044ea:	464b      	mov	r3, r9
 80044ec:	1891      	adds	r1, r2, r2
 80044ee:	61b9      	str	r1, [r7, #24]
 80044f0:	415b      	adcs	r3, r3
 80044f2:	61fb      	str	r3, [r7, #28]
 80044f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044f8:	4641      	mov	r1, r8
 80044fa:	1851      	adds	r1, r2, r1
 80044fc:	6139      	str	r1, [r7, #16]
 80044fe:	4649      	mov	r1, r9
 8004500:	414b      	adcs	r3, r1
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004510:	4659      	mov	r1, fp
 8004512:	00cb      	lsls	r3, r1, #3
 8004514:	4651      	mov	r1, sl
 8004516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800451a:	4651      	mov	r1, sl
 800451c:	00ca      	lsls	r2, r1, #3
 800451e:	4610      	mov	r0, r2
 8004520:	4619      	mov	r1, r3
 8004522:	4603      	mov	r3, r0
 8004524:	4642      	mov	r2, r8
 8004526:	189b      	adds	r3, r3, r2
 8004528:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800452c:	464b      	mov	r3, r9
 800452e:	460a      	mov	r2, r1
 8004530:	eb42 0303 	adc.w	r3, r2, r3
 8004534:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	67bb      	str	r3, [r7, #120]	; 0x78
 8004542:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004550:	4649      	mov	r1, r9
 8004552:	008b      	lsls	r3, r1, #2
 8004554:	4641      	mov	r1, r8
 8004556:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800455a:	4641      	mov	r1, r8
 800455c:	008a      	lsls	r2, r1, #2
 800455e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004562:	f7fb fe8d 	bl	8000280 <__aeabi_uldivmod>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4b39      	ldr	r3, [pc, #228]	; (8004650 <UART_SetConfig+0x4e4>)
 800456c:	fba3 1302 	umull	r1, r3, r3, r2
 8004570:	095b      	lsrs	r3, r3, #5
 8004572:	2164      	movs	r1, #100	; 0x64
 8004574:	fb01 f303 	mul.w	r3, r1, r3
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	3332      	adds	r3, #50	; 0x32
 800457e:	4a34      	ldr	r2, [pc, #208]	; (8004650 <UART_SetConfig+0x4e4>)
 8004580:	fba2 2303 	umull	r2, r3, r2, r3
 8004584:	095b      	lsrs	r3, r3, #5
 8004586:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800458a:	441c      	add	r4, r3
 800458c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004590:	2200      	movs	r2, #0
 8004592:	673b      	str	r3, [r7, #112]	; 0x70
 8004594:	677a      	str	r2, [r7, #116]	; 0x74
 8004596:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800459a:	4642      	mov	r2, r8
 800459c:	464b      	mov	r3, r9
 800459e:	1891      	adds	r1, r2, r2
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	415b      	adcs	r3, r3
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045aa:	4641      	mov	r1, r8
 80045ac:	1851      	adds	r1, r2, r1
 80045ae:	6039      	str	r1, [r7, #0]
 80045b0:	4649      	mov	r1, r9
 80045b2:	414b      	adcs	r3, r1
 80045b4:	607b      	str	r3, [r7, #4]
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	f04f 0300 	mov.w	r3, #0
 80045be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045c2:	4659      	mov	r1, fp
 80045c4:	00cb      	lsls	r3, r1, #3
 80045c6:	4651      	mov	r1, sl
 80045c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045cc:	4651      	mov	r1, sl
 80045ce:	00ca      	lsls	r2, r1, #3
 80045d0:	4610      	mov	r0, r2
 80045d2:	4619      	mov	r1, r3
 80045d4:	4603      	mov	r3, r0
 80045d6:	4642      	mov	r2, r8
 80045d8:	189b      	adds	r3, r3, r2
 80045da:	66bb      	str	r3, [r7, #104]	; 0x68
 80045dc:	464b      	mov	r3, r9
 80045de:	460a      	mov	r2, r1
 80045e0:	eb42 0303 	adc.w	r3, r2, r3
 80045e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	663b      	str	r3, [r7, #96]	; 0x60
 80045f0:	667a      	str	r2, [r7, #100]	; 0x64
 80045f2:	f04f 0200 	mov.w	r2, #0
 80045f6:	f04f 0300 	mov.w	r3, #0
 80045fa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045fe:	4649      	mov	r1, r9
 8004600:	008b      	lsls	r3, r1, #2
 8004602:	4641      	mov	r1, r8
 8004604:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004608:	4641      	mov	r1, r8
 800460a:	008a      	lsls	r2, r1, #2
 800460c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004610:	f7fb fe36 	bl	8000280 <__aeabi_uldivmod>
 8004614:	4602      	mov	r2, r0
 8004616:	460b      	mov	r3, r1
 8004618:	4b0d      	ldr	r3, [pc, #52]	; (8004650 <UART_SetConfig+0x4e4>)
 800461a:	fba3 1302 	umull	r1, r3, r3, r2
 800461e:	095b      	lsrs	r3, r3, #5
 8004620:	2164      	movs	r1, #100	; 0x64
 8004622:	fb01 f303 	mul.w	r3, r1, r3
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	3332      	adds	r3, #50	; 0x32
 800462c:	4a08      	ldr	r2, [pc, #32]	; (8004650 <UART_SetConfig+0x4e4>)
 800462e:	fba2 2303 	umull	r2, r3, r2, r3
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	f003 020f 	and.w	r2, r3, #15
 8004638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4422      	add	r2, r4
 8004640:	609a      	str	r2, [r3, #8]
}
 8004642:	bf00      	nop
 8004644:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004648:	46bd      	mov	sp, r7
 800464a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800464e:	bf00      	nop
 8004650:	51eb851f 	.word	0x51eb851f

08004654 <__errno>:
 8004654:	4b01      	ldr	r3, [pc, #4]	; (800465c <__errno+0x8>)
 8004656:	6818      	ldr	r0, [r3, #0]
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	2000001c 	.word	0x2000001c

08004660 <__libc_init_array>:
 8004660:	b570      	push	{r4, r5, r6, lr}
 8004662:	4d0d      	ldr	r5, [pc, #52]	; (8004698 <__libc_init_array+0x38>)
 8004664:	4c0d      	ldr	r4, [pc, #52]	; (800469c <__libc_init_array+0x3c>)
 8004666:	1b64      	subs	r4, r4, r5
 8004668:	10a4      	asrs	r4, r4, #2
 800466a:	2600      	movs	r6, #0
 800466c:	42a6      	cmp	r6, r4
 800466e:	d109      	bne.n	8004684 <__libc_init_array+0x24>
 8004670:	4d0b      	ldr	r5, [pc, #44]	; (80046a0 <__libc_init_array+0x40>)
 8004672:	4c0c      	ldr	r4, [pc, #48]	; (80046a4 <__libc_init_array+0x44>)
 8004674:	f000 fc8e 	bl	8004f94 <_init>
 8004678:	1b64      	subs	r4, r4, r5
 800467a:	10a4      	asrs	r4, r4, #2
 800467c:	2600      	movs	r6, #0
 800467e:	42a6      	cmp	r6, r4
 8004680:	d105      	bne.n	800468e <__libc_init_array+0x2e>
 8004682:	bd70      	pop	{r4, r5, r6, pc}
 8004684:	f855 3b04 	ldr.w	r3, [r5], #4
 8004688:	4798      	blx	r3
 800468a:	3601      	adds	r6, #1
 800468c:	e7ee      	b.n	800466c <__libc_init_array+0xc>
 800468e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004692:	4798      	blx	r3
 8004694:	3601      	adds	r6, #1
 8004696:	e7f2      	b.n	800467e <__libc_init_array+0x1e>
 8004698:	08005198 	.word	0x08005198
 800469c:	08005198 	.word	0x08005198
 80046a0:	08005198 	.word	0x08005198
 80046a4:	0800519c 	.word	0x0800519c

080046a8 <memset>:
 80046a8:	4402      	add	r2, r0
 80046aa:	4603      	mov	r3, r0
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d100      	bne.n	80046b2 <memset+0xa>
 80046b0:	4770      	bx	lr
 80046b2:	f803 1b01 	strb.w	r1, [r3], #1
 80046b6:	e7f9      	b.n	80046ac <memset+0x4>

080046b8 <siprintf>:
 80046b8:	b40e      	push	{r1, r2, r3}
 80046ba:	b500      	push	{lr}
 80046bc:	b09c      	sub	sp, #112	; 0x70
 80046be:	ab1d      	add	r3, sp, #116	; 0x74
 80046c0:	9002      	str	r0, [sp, #8]
 80046c2:	9006      	str	r0, [sp, #24]
 80046c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80046c8:	4809      	ldr	r0, [pc, #36]	; (80046f0 <siprintf+0x38>)
 80046ca:	9107      	str	r1, [sp, #28]
 80046cc:	9104      	str	r1, [sp, #16]
 80046ce:	4909      	ldr	r1, [pc, #36]	; (80046f4 <siprintf+0x3c>)
 80046d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80046d4:	9105      	str	r1, [sp, #20]
 80046d6:	6800      	ldr	r0, [r0, #0]
 80046d8:	9301      	str	r3, [sp, #4]
 80046da:	a902      	add	r1, sp, #8
 80046dc:	f000 f868 	bl	80047b0 <_svfiprintf_r>
 80046e0:	9b02      	ldr	r3, [sp, #8]
 80046e2:	2200      	movs	r2, #0
 80046e4:	701a      	strb	r2, [r3, #0]
 80046e6:	b01c      	add	sp, #112	; 0x70
 80046e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80046ec:	b003      	add	sp, #12
 80046ee:	4770      	bx	lr
 80046f0:	2000001c 	.word	0x2000001c
 80046f4:	ffff0208 	.word	0xffff0208

080046f8 <__ssputs_r>:
 80046f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046fc:	688e      	ldr	r6, [r1, #8]
 80046fe:	429e      	cmp	r6, r3
 8004700:	4682      	mov	sl, r0
 8004702:	460c      	mov	r4, r1
 8004704:	4690      	mov	r8, r2
 8004706:	461f      	mov	r7, r3
 8004708:	d838      	bhi.n	800477c <__ssputs_r+0x84>
 800470a:	898a      	ldrh	r2, [r1, #12]
 800470c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004710:	d032      	beq.n	8004778 <__ssputs_r+0x80>
 8004712:	6825      	ldr	r5, [r4, #0]
 8004714:	6909      	ldr	r1, [r1, #16]
 8004716:	eba5 0901 	sub.w	r9, r5, r1
 800471a:	6965      	ldr	r5, [r4, #20]
 800471c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004720:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004724:	3301      	adds	r3, #1
 8004726:	444b      	add	r3, r9
 8004728:	106d      	asrs	r5, r5, #1
 800472a:	429d      	cmp	r5, r3
 800472c:	bf38      	it	cc
 800472e:	461d      	movcc	r5, r3
 8004730:	0553      	lsls	r3, r2, #21
 8004732:	d531      	bpl.n	8004798 <__ssputs_r+0xa0>
 8004734:	4629      	mov	r1, r5
 8004736:	f000 fb63 	bl	8004e00 <_malloc_r>
 800473a:	4606      	mov	r6, r0
 800473c:	b950      	cbnz	r0, 8004754 <__ssputs_r+0x5c>
 800473e:	230c      	movs	r3, #12
 8004740:	f8ca 3000 	str.w	r3, [sl]
 8004744:	89a3      	ldrh	r3, [r4, #12]
 8004746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800474a:	81a3      	strh	r3, [r4, #12]
 800474c:	f04f 30ff 	mov.w	r0, #4294967295
 8004750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004754:	6921      	ldr	r1, [r4, #16]
 8004756:	464a      	mov	r2, r9
 8004758:	f000 fabe 	bl	8004cd8 <memcpy>
 800475c:	89a3      	ldrh	r3, [r4, #12]
 800475e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004766:	81a3      	strh	r3, [r4, #12]
 8004768:	6126      	str	r6, [r4, #16]
 800476a:	6165      	str	r5, [r4, #20]
 800476c:	444e      	add	r6, r9
 800476e:	eba5 0509 	sub.w	r5, r5, r9
 8004772:	6026      	str	r6, [r4, #0]
 8004774:	60a5      	str	r5, [r4, #8]
 8004776:	463e      	mov	r6, r7
 8004778:	42be      	cmp	r6, r7
 800477a:	d900      	bls.n	800477e <__ssputs_r+0x86>
 800477c:	463e      	mov	r6, r7
 800477e:	6820      	ldr	r0, [r4, #0]
 8004780:	4632      	mov	r2, r6
 8004782:	4641      	mov	r1, r8
 8004784:	f000 fab6 	bl	8004cf4 <memmove>
 8004788:	68a3      	ldr	r3, [r4, #8]
 800478a:	1b9b      	subs	r3, r3, r6
 800478c:	60a3      	str	r3, [r4, #8]
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	4433      	add	r3, r6
 8004792:	6023      	str	r3, [r4, #0]
 8004794:	2000      	movs	r0, #0
 8004796:	e7db      	b.n	8004750 <__ssputs_r+0x58>
 8004798:	462a      	mov	r2, r5
 800479a:	f000 fba5 	bl	8004ee8 <_realloc_r>
 800479e:	4606      	mov	r6, r0
 80047a0:	2800      	cmp	r0, #0
 80047a2:	d1e1      	bne.n	8004768 <__ssputs_r+0x70>
 80047a4:	6921      	ldr	r1, [r4, #16]
 80047a6:	4650      	mov	r0, sl
 80047a8:	f000 fabe 	bl	8004d28 <_free_r>
 80047ac:	e7c7      	b.n	800473e <__ssputs_r+0x46>
	...

080047b0 <_svfiprintf_r>:
 80047b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047b4:	4698      	mov	r8, r3
 80047b6:	898b      	ldrh	r3, [r1, #12]
 80047b8:	061b      	lsls	r3, r3, #24
 80047ba:	b09d      	sub	sp, #116	; 0x74
 80047bc:	4607      	mov	r7, r0
 80047be:	460d      	mov	r5, r1
 80047c0:	4614      	mov	r4, r2
 80047c2:	d50e      	bpl.n	80047e2 <_svfiprintf_r+0x32>
 80047c4:	690b      	ldr	r3, [r1, #16]
 80047c6:	b963      	cbnz	r3, 80047e2 <_svfiprintf_r+0x32>
 80047c8:	2140      	movs	r1, #64	; 0x40
 80047ca:	f000 fb19 	bl	8004e00 <_malloc_r>
 80047ce:	6028      	str	r0, [r5, #0]
 80047d0:	6128      	str	r0, [r5, #16]
 80047d2:	b920      	cbnz	r0, 80047de <_svfiprintf_r+0x2e>
 80047d4:	230c      	movs	r3, #12
 80047d6:	603b      	str	r3, [r7, #0]
 80047d8:	f04f 30ff 	mov.w	r0, #4294967295
 80047dc:	e0d1      	b.n	8004982 <_svfiprintf_r+0x1d2>
 80047de:	2340      	movs	r3, #64	; 0x40
 80047e0:	616b      	str	r3, [r5, #20]
 80047e2:	2300      	movs	r3, #0
 80047e4:	9309      	str	r3, [sp, #36]	; 0x24
 80047e6:	2320      	movs	r3, #32
 80047e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80047f0:	2330      	movs	r3, #48	; 0x30
 80047f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800499c <_svfiprintf_r+0x1ec>
 80047f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047fa:	f04f 0901 	mov.w	r9, #1
 80047fe:	4623      	mov	r3, r4
 8004800:	469a      	mov	sl, r3
 8004802:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004806:	b10a      	cbz	r2, 800480c <_svfiprintf_r+0x5c>
 8004808:	2a25      	cmp	r2, #37	; 0x25
 800480a:	d1f9      	bne.n	8004800 <_svfiprintf_r+0x50>
 800480c:	ebba 0b04 	subs.w	fp, sl, r4
 8004810:	d00b      	beq.n	800482a <_svfiprintf_r+0x7a>
 8004812:	465b      	mov	r3, fp
 8004814:	4622      	mov	r2, r4
 8004816:	4629      	mov	r1, r5
 8004818:	4638      	mov	r0, r7
 800481a:	f7ff ff6d 	bl	80046f8 <__ssputs_r>
 800481e:	3001      	adds	r0, #1
 8004820:	f000 80aa 	beq.w	8004978 <_svfiprintf_r+0x1c8>
 8004824:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004826:	445a      	add	r2, fp
 8004828:	9209      	str	r2, [sp, #36]	; 0x24
 800482a:	f89a 3000 	ldrb.w	r3, [sl]
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 80a2 	beq.w	8004978 <_svfiprintf_r+0x1c8>
 8004834:	2300      	movs	r3, #0
 8004836:	f04f 32ff 	mov.w	r2, #4294967295
 800483a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800483e:	f10a 0a01 	add.w	sl, sl, #1
 8004842:	9304      	str	r3, [sp, #16]
 8004844:	9307      	str	r3, [sp, #28]
 8004846:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800484a:	931a      	str	r3, [sp, #104]	; 0x68
 800484c:	4654      	mov	r4, sl
 800484e:	2205      	movs	r2, #5
 8004850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004854:	4851      	ldr	r0, [pc, #324]	; (800499c <_svfiprintf_r+0x1ec>)
 8004856:	f7fb fcc3 	bl	80001e0 <memchr>
 800485a:	9a04      	ldr	r2, [sp, #16]
 800485c:	b9d8      	cbnz	r0, 8004896 <_svfiprintf_r+0xe6>
 800485e:	06d0      	lsls	r0, r2, #27
 8004860:	bf44      	itt	mi
 8004862:	2320      	movmi	r3, #32
 8004864:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004868:	0711      	lsls	r1, r2, #28
 800486a:	bf44      	itt	mi
 800486c:	232b      	movmi	r3, #43	; 0x2b
 800486e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004872:	f89a 3000 	ldrb.w	r3, [sl]
 8004876:	2b2a      	cmp	r3, #42	; 0x2a
 8004878:	d015      	beq.n	80048a6 <_svfiprintf_r+0xf6>
 800487a:	9a07      	ldr	r2, [sp, #28]
 800487c:	4654      	mov	r4, sl
 800487e:	2000      	movs	r0, #0
 8004880:	f04f 0c0a 	mov.w	ip, #10
 8004884:	4621      	mov	r1, r4
 8004886:	f811 3b01 	ldrb.w	r3, [r1], #1
 800488a:	3b30      	subs	r3, #48	; 0x30
 800488c:	2b09      	cmp	r3, #9
 800488e:	d94e      	bls.n	800492e <_svfiprintf_r+0x17e>
 8004890:	b1b0      	cbz	r0, 80048c0 <_svfiprintf_r+0x110>
 8004892:	9207      	str	r2, [sp, #28]
 8004894:	e014      	b.n	80048c0 <_svfiprintf_r+0x110>
 8004896:	eba0 0308 	sub.w	r3, r0, r8
 800489a:	fa09 f303 	lsl.w	r3, r9, r3
 800489e:	4313      	orrs	r3, r2
 80048a0:	9304      	str	r3, [sp, #16]
 80048a2:	46a2      	mov	sl, r4
 80048a4:	e7d2      	b.n	800484c <_svfiprintf_r+0x9c>
 80048a6:	9b03      	ldr	r3, [sp, #12]
 80048a8:	1d19      	adds	r1, r3, #4
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	9103      	str	r1, [sp, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	bfbb      	ittet	lt
 80048b2:	425b      	neglt	r3, r3
 80048b4:	f042 0202 	orrlt.w	r2, r2, #2
 80048b8:	9307      	strge	r3, [sp, #28]
 80048ba:	9307      	strlt	r3, [sp, #28]
 80048bc:	bfb8      	it	lt
 80048be:	9204      	strlt	r2, [sp, #16]
 80048c0:	7823      	ldrb	r3, [r4, #0]
 80048c2:	2b2e      	cmp	r3, #46	; 0x2e
 80048c4:	d10c      	bne.n	80048e0 <_svfiprintf_r+0x130>
 80048c6:	7863      	ldrb	r3, [r4, #1]
 80048c8:	2b2a      	cmp	r3, #42	; 0x2a
 80048ca:	d135      	bne.n	8004938 <_svfiprintf_r+0x188>
 80048cc:	9b03      	ldr	r3, [sp, #12]
 80048ce:	1d1a      	adds	r2, r3, #4
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	9203      	str	r2, [sp, #12]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	bfb8      	it	lt
 80048d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80048dc:	3402      	adds	r4, #2
 80048de:	9305      	str	r3, [sp, #20]
 80048e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80049ac <_svfiprintf_r+0x1fc>
 80048e4:	7821      	ldrb	r1, [r4, #0]
 80048e6:	2203      	movs	r2, #3
 80048e8:	4650      	mov	r0, sl
 80048ea:	f7fb fc79 	bl	80001e0 <memchr>
 80048ee:	b140      	cbz	r0, 8004902 <_svfiprintf_r+0x152>
 80048f0:	2340      	movs	r3, #64	; 0x40
 80048f2:	eba0 000a 	sub.w	r0, r0, sl
 80048f6:	fa03 f000 	lsl.w	r0, r3, r0
 80048fa:	9b04      	ldr	r3, [sp, #16]
 80048fc:	4303      	orrs	r3, r0
 80048fe:	3401      	adds	r4, #1
 8004900:	9304      	str	r3, [sp, #16]
 8004902:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004906:	4826      	ldr	r0, [pc, #152]	; (80049a0 <_svfiprintf_r+0x1f0>)
 8004908:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800490c:	2206      	movs	r2, #6
 800490e:	f7fb fc67 	bl	80001e0 <memchr>
 8004912:	2800      	cmp	r0, #0
 8004914:	d038      	beq.n	8004988 <_svfiprintf_r+0x1d8>
 8004916:	4b23      	ldr	r3, [pc, #140]	; (80049a4 <_svfiprintf_r+0x1f4>)
 8004918:	bb1b      	cbnz	r3, 8004962 <_svfiprintf_r+0x1b2>
 800491a:	9b03      	ldr	r3, [sp, #12]
 800491c:	3307      	adds	r3, #7
 800491e:	f023 0307 	bic.w	r3, r3, #7
 8004922:	3308      	adds	r3, #8
 8004924:	9303      	str	r3, [sp, #12]
 8004926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004928:	4433      	add	r3, r6
 800492a:	9309      	str	r3, [sp, #36]	; 0x24
 800492c:	e767      	b.n	80047fe <_svfiprintf_r+0x4e>
 800492e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004932:	460c      	mov	r4, r1
 8004934:	2001      	movs	r0, #1
 8004936:	e7a5      	b.n	8004884 <_svfiprintf_r+0xd4>
 8004938:	2300      	movs	r3, #0
 800493a:	3401      	adds	r4, #1
 800493c:	9305      	str	r3, [sp, #20]
 800493e:	4619      	mov	r1, r3
 8004940:	f04f 0c0a 	mov.w	ip, #10
 8004944:	4620      	mov	r0, r4
 8004946:	f810 2b01 	ldrb.w	r2, [r0], #1
 800494a:	3a30      	subs	r2, #48	; 0x30
 800494c:	2a09      	cmp	r2, #9
 800494e:	d903      	bls.n	8004958 <_svfiprintf_r+0x1a8>
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0c5      	beq.n	80048e0 <_svfiprintf_r+0x130>
 8004954:	9105      	str	r1, [sp, #20]
 8004956:	e7c3      	b.n	80048e0 <_svfiprintf_r+0x130>
 8004958:	fb0c 2101 	mla	r1, ip, r1, r2
 800495c:	4604      	mov	r4, r0
 800495e:	2301      	movs	r3, #1
 8004960:	e7f0      	b.n	8004944 <_svfiprintf_r+0x194>
 8004962:	ab03      	add	r3, sp, #12
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	462a      	mov	r2, r5
 8004968:	4b0f      	ldr	r3, [pc, #60]	; (80049a8 <_svfiprintf_r+0x1f8>)
 800496a:	a904      	add	r1, sp, #16
 800496c:	4638      	mov	r0, r7
 800496e:	f3af 8000 	nop.w
 8004972:	1c42      	adds	r2, r0, #1
 8004974:	4606      	mov	r6, r0
 8004976:	d1d6      	bne.n	8004926 <_svfiprintf_r+0x176>
 8004978:	89ab      	ldrh	r3, [r5, #12]
 800497a:	065b      	lsls	r3, r3, #25
 800497c:	f53f af2c 	bmi.w	80047d8 <_svfiprintf_r+0x28>
 8004980:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004982:	b01d      	add	sp, #116	; 0x74
 8004984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004988:	ab03      	add	r3, sp, #12
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	462a      	mov	r2, r5
 800498e:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <_svfiprintf_r+0x1f8>)
 8004990:	a904      	add	r1, sp, #16
 8004992:	4638      	mov	r0, r7
 8004994:	f000 f87a 	bl	8004a8c <_printf_i>
 8004998:	e7eb      	b.n	8004972 <_svfiprintf_r+0x1c2>
 800499a:	bf00      	nop
 800499c:	0800515c 	.word	0x0800515c
 80049a0:	08005166 	.word	0x08005166
 80049a4:	00000000 	.word	0x00000000
 80049a8:	080046f9 	.word	0x080046f9
 80049ac:	08005162 	.word	0x08005162

080049b0 <_printf_common>:
 80049b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049b4:	4616      	mov	r6, r2
 80049b6:	4699      	mov	r9, r3
 80049b8:	688a      	ldr	r2, [r1, #8]
 80049ba:	690b      	ldr	r3, [r1, #16]
 80049bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049c0:	4293      	cmp	r3, r2
 80049c2:	bfb8      	it	lt
 80049c4:	4613      	movlt	r3, r2
 80049c6:	6033      	str	r3, [r6, #0]
 80049c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049cc:	4607      	mov	r7, r0
 80049ce:	460c      	mov	r4, r1
 80049d0:	b10a      	cbz	r2, 80049d6 <_printf_common+0x26>
 80049d2:	3301      	adds	r3, #1
 80049d4:	6033      	str	r3, [r6, #0]
 80049d6:	6823      	ldr	r3, [r4, #0]
 80049d8:	0699      	lsls	r1, r3, #26
 80049da:	bf42      	ittt	mi
 80049dc:	6833      	ldrmi	r3, [r6, #0]
 80049de:	3302      	addmi	r3, #2
 80049e0:	6033      	strmi	r3, [r6, #0]
 80049e2:	6825      	ldr	r5, [r4, #0]
 80049e4:	f015 0506 	ands.w	r5, r5, #6
 80049e8:	d106      	bne.n	80049f8 <_printf_common+0x48>
 80049ea:	f104 0a19 	add.w	sl, r4, #25
 80049ee:	68e3      	ldr	r3, [r4, #12]
 80049f0:	6832      	ldr	r2, [r6, #0]
 80049f2:	1a9b      	subs	r3, r3, r2
 80049f4:	42ab      	cmp	r3, r5
 80049f6:	dc26      	bgt.n	8004a46 <_printf_common+0x96>
 80049f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049fc:	1e13      	subs	r3, r2, #0
 80049fe:	6822      	ldr	r2, [r4, #0]
 8004a00:	bf18      	it	ne
 8004a02:	2301      	movne	r3, #1
 8004a04:	0692      	lsls	r2, r2, #26
 8004a06:	d42b      	bmi.n	8004a60 <_printf_common+0xb0>
 8004a08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a0c:	4649      	mov	r1, r9
 8004a0e:	4638      	mov	r0, r7
 8004a10:	47c0      	blx	r8
 8004a12:	3001      	adds	r0, #1
 8004a14:	d01e      	beq.n	8004a54 <_printf_common+0xa4>
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	68e5      	ldr	r5, [r4, #12]
 8004a1a:	6832      	ldr	r2, [r6, #0]
 8004a1c:	f003 0306 	and.w	r3, r3, #6
 8004a20:	2b04      	cmp	r3, #4
 8004a22:	bf08      	it	eq
 8004a24:	1aad      	subeq	r5, r5, r2
 8004a26:	68a3      	ldr	r3, [r4, #8]
 8004a28:	6922      	ldr	r2, [r4, #16]
 8004a2a:	bf0c      	ite	eq
 8004a2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a30:	2500      	movne	r5, #0
 8004a32:	4293      	cmp	r3, r2
 8004a34:	bfc4      	itt	gt
 8004a36:	1a9b      	subgt	r3, r3, r2
 8004a38:	18ed      	addgt	r5, r5, r3
 8004a3a:	2600      	movs	r6, #0
 8004a3c:	341a      	adds	r4, #26
 8004a3e:	42b5      	cmp	r5, r6
 8004a40:	d11a      	bne.n	8004a78 <_printf_common+0xc8>
 8004a42:	2000      	movs	r0, #0
 8004a44:	e008      	b.n	8004a58 <_printf_common+0xa8>
 8004a46:	2301      	movs	r3, #1
 8004a48:	4652      	mov	r2, sl
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	4638      	mov	r0, r7
 8004a4e:	47c0      	blx	r8
 8004a50:	3001      	adds	r0, #1
 8004a52:	d103      	bne.n	8004a5c <_printf_common+0xac>
 8004a54:	f04f 30ff 	mov.w	r0, #4294967295
 8004a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a5c:	3501      	adds	r5, #1
 8004a5e:	e7c6      	b.n	80049ee <_printf_common+0x3e>
 8004a60:	18e1      	adds	r1, r4, r3
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	2030      	movs	r0, #48	; 0x30
 8004a66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a6a:	4422      	add	r2, r4
 8004a6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a74:	3302      	adds	r3, #2
 8004a76:	e7c7      	b.n	8004a08 <_printf_common+0x58>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	4622      	mov	r2, r4
 8004a7c:	4649      	mov	r1, r9
 8004a7e:	4638      	mov	r0, r7
 8004a80:	47c0      	blx	r8
 8004a82:	3001      	adds	r0, #1
 8004a84:	d0e6      	beq.n	8004a54 <_printf_common+0xa4>
 8004a86:	3601      	adds	r6, #1
 8004a88:	e7d9      	b.n	8004a3e <_printf_common+0x8e>
	...

08004a8c <_printf_i>:
 8004a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a90:	7e0f      	ldrb	r7, [r1, #24]
 8004a92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a94:	2f78      	cmp	r7, #120	; 0x78
 8004a96:	4691      	mov	r9, r2
 8004a98:	4680      	mov	r8, r0
 8004a9a:	460c      	mov	r4, r1
 8004a9c:	469a      	mov	sl, r3
 8004a9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004aa2:	d807      	bhi.n	8004ab4 <_printf_i+0x28>
 8004aa4:	2f62      	cmp	r7, #98	; 0x62
 8004aa6:	d80a      	bhi.n	8004abe <_printf_i+0x32>
 8004aa8:	2f00      	cmp	r7, #0
 8004aaa:	f000 80d8 	beq.w	8004c5e <_printf_i+0x1d2>
 8004aae:	2f58      	cmp	r7, #88	; 0x58
 8004ab0:	f000 80a3 	beq.w	8004bfa <_printf_i+0x16e>
 8004ab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ab8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004abc:	e03a      	b.n	8004b34 <_printf_i+0xa8>
 8004abe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ac2:	2b15      	cmp	r3, #21
 8004ac4:	d8f6      	bhi.n	8004ab4 <_printf_i+0x28>
 8004ac6:	a101      	add	r1, pc, #4	; (adr r1, 8004acc <_printf_i+0x40>)
 8004ac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004acc:	08004b25 	.word	0x08004b25
 8004ad0:	08004b39 	.word	0x08004b39
 8004ad4:	08004ab5 	.word	0x08004ab5
 8004ad8:	08004ab5 	.word	0x08004ab5
 8004adc:	08004ab5 	.word	0x08004ab5
 8004ae0:	08004ab5 	.word	0x08004ab5
 8004ae4:	08004b39 	.word	0x08004b39
 8004ae8:	08004ab5 	.word	0x08004ab5
 8004aec:	08004ab5 	.word	0x08004ab5
 8004af0:	08004ab5 	.word	0x08004ab5
 8004af4:	08004ab5 	.word	0x08004ab5
 8004af8:	08004c45 	.word	0x08004c45
 8004afc:	08004b69 	.word	0x08004b69
 8004b00:	08004c27 	.word	0x08004c27
 8004b04:	08004ab5 	.word	0x08004ab5
 8004b08:	08004ab5 	.word	0x08004ab5
 8004b0c:	08004c67 	.word	0x08004c67
 8004b10:	08004ab5 	.word	0x08004ab5
 8004b14:	08004b69 	.word	0x08004b69
 8004b18:	08004ab5 	.word	0x08004ab5
 8004b1c:	08004ab5 	.word	0x08004ab5
 8004b20:	08004c2f 	.word	0x08004c2f
 8004b24:	682b      	ldr	r3, [r5, #0]
 8004b26:	1d1a      	adds	r2, r3, #4
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	602a      	str	r2, [r5, #0]
 8004b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b34:	2301      	movs	r3, #1
 8004b36:	e0a3      	b.n	8004c80 <_printf_i+0x1f4>
 8004b38:	6820      	ldr	r0, [r4, #0]
 8004b3a:	6829      	ldr	r1, [r5, #0]
 8004b3c:	0606      	lsls	r6, r0, #24
 8004b3e:	f101 0304 	add.w	r3, r1, #4
 8004b42:	d50a      	bpl.n	8004b5a <_printf_i+0xce>
 8004b44:	680e      	ldr	r6, [r1, #0]
 8004b46:	602b      	str	r3, [r5, #0]
 8004b48:	2e00      	cmp	r6, #0
 8004b4a:	da03      	bge.n	8004b54 <_printf_i+0xc8>
 8004b4c:	232d      	movs	r3, #45	; 0x2d
 8004b4e:	4276      	negs	r6, r6
 8004b50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b54:	485e      	ldr	r0, [pc, #376]	; (8004cd0 <_printf_i+0x244>)
 8004b56:	230a      	movs	r3, #10
 8004b58:	e019      	b.n	8004b8e <_printf_i+0x102>
 8004b5a:	680e      	ldr	r6, [r1, #0]
 8004b5c:	602b      	str	r3, [r5, #0]
 8004b5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b62:	bf18      	it	ne
 8004b64:	b236      	sxthne	r6, r6
 8004b66:	e7ef      	b.n	8004b48 <_printf_i+0xbc>
 8004b68:	682b      	ldr	r3, [r5, #0]
 8004b6a:	6820      	ldr	r0, [r4, #0]
 8004b6c:	1d19      	adds	r1, r3, #4
 8004b6e:	6029      	str	r1, [r5, #0]
 8004b70:	0601      	lsls	r1, r0, #24
 8004b72:	d501      	bpl.n	8004b78 <_printf_i+0xec>
 8004b74:	681e      	ldr	r6, [r3, #0]
 8004b76:	e002      	b.n	8004b7e <_printf_i+0xf2>
 8004b78:	0646      	lsls	r6, r0, #25
 8004b7a:	d5fb      	bpl.n	8004b74 <_printf_i+0xe8>
 8004b7c:	881e      	ldrh	r6, [r3, #0]
 8004b7e:	4854      	ldr	r0, [pc, #336]	; (8004cd0 <_printf_i+0x244>)
 8004b80:	2f6f      	cmp	r7, #111	; 0x6f
 8004b82:	bf0c      	ite	eq
 8004b84:	2308      	moveq	r3, #8
 8004b86:	230a      	movne	r3, #10
 8004b88:	2100      	movs	r1, #0
 8004b8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b8e:	6865      	ldr	r5, [r4, #4]
 8004b90:	60a5      	str	r5, [r4, #8]
 8004b92:	2d00      	cmp	r5, #0
 8004b94:	bfa2      	ittt	ge
 8004b96:	6821      	ldrge	r1, [r4, #0]
 8004b98:	f021 0104 	bicge.w	r1, r1, #4
 8004b9c:	6021      	strge	r1, [r4, #0]
 8004b9e:	b90e      	cbnz	r6, 8004ba4 <_printf_i+0x118>
 8004ba0:	2d00      	cmp	r5, #0
 8004ba2:	d04d      	beq.n	8004c40 <_printf_i+0x1b4>
 8004ba4:	4615      	mov	r5, r2
 8004ba6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004baa:	fb03 6711 	mls	r7, r3, r1, r6
 8004bae:	5dc7      	ldrb	r7, [r0, r7]
 8004bb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004bb4:	4637      	mov	r7, r6
 8004bb6:	42bb      	cmp	r3, r7
 8004bb8:	460e      	mov	r6, r1
 8004bba:	d9f4      	bls.n	8004ba6 <_printf_i+0x11a>
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d10b      	bne.n	8004bd8 <_printf_i+0x14c>
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	07de      	lsls	r6, r3, #31
 8004bc4:	d508      	bpl.n	8004bd8 <_printf_i+0x14c>
 8004bc6:	6923      	ldr	r3, [r4, #16]
 8004bc8:	6861      	ldr	r1, [r4, #4]
 8004bca:	4299      	cmp	r1, r3
 8004bcc:	bfde      	ittt	le
 8004bce:	2330      	movle	r3, #48	; 0x30
 8004bd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004bd4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004bd8:	1b52      	subs	r2, r2, r5
 8004bda:	6122      	str	r2, [r4, #16]
 8004bdc:	f8cd a000 	str.w	sl, [sp]
 8004be0:	464b      	mov	r3, r9
 8004be2:	aa03      	add	r2, sp, #12
 8004be4:	4621      	mov	r1, r4
 8004be6:	4640      	mov	r0, r8
 8004be8:	f7ff fee2 	bl	80049b0 <_printf_common>
 8004bec:	3001      	adds	r0, #1
 8004bee:	d14c      	bne.n	8004c8a <_printf_i+0x1fe>
 8004bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf4:	b004      	add	sp, #16
 8004bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bfa:	4835      	ldr	r0, [pc, #212]	; (8004cd0 <_printf_i+0x244>)
 8004bfc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c00:	6829      	ldr	r1, [r5, #0]
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c08:	6029      	str	r1, [r5, #0]
 8004c0a:	061d      	lsls	r5, r3, #24
 8004c0c:	d514      	bpl.n	8004c38 <_printf_i+0x1ac>
 8004c0e:	07df      	lsls	r7, r3, #31
 8004c10:	bf44      	itt	mi
 8004c12:	f043 0320 	orrmi.w	r3, r3, #32
 8004c16:	6023      	strmi	r3, [r4, #0]
 8004c18:	b91e      	cbnz	r6, 8004c22 <_printf_i+0x196>
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	f023 0320 	bic.w	r3, r3, #32
 8004c20:	6023      	str	r3, [r4, #0]
 8004c22:	2310      	movs	r3, #16
 8004c24:	e7b0      	b.n	8004b88 <_printf_i+0xfc>
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	f043 0320 	orr.w	r3, r3, #32
 8004c2c:	6023      	str	r3, [r4, #0]
 8004c2e:	2378      	movs	r3, #120	; 0x78
 8004c30:	4828      	ldr	r0, [pc, #160]	; (8004cd4 <_printf_i+0x248>)
 8004c32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c36:	e7e3      	b.n	8004c00 <_printf_i+0x174>
 8004c38:	0659      	lsls	r1, r3, #25
 8004c3a:	bf48      	it	mi
 8004c3c:	b2b6      	uxthmi	r6, r6
 8004c3e:	e7e6      	b.n	8004c0e <_printf_i+0x182>
 8004c40:	4615      	mov	r5, r2
 8004c42:	e7bb      	b.n	8004bbc <_printf_i+0x130>
 8004c44:	682b      	ldr	r3, [r5, #0]
 8004c46:	6826      	ldr	r6, [r4, #0]
 8004c48:	6961      	ldr	r1, [r4, #20]
 8004c4a:	1d18      	adds	r0, r3, #4
 8004c4c:	6028      	str	r0, [r5, #0]
 8004c4e:	0635      	lsls	r5, r6, #24
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	d501      	bpl.n	8004c58 <_printf_i+0x1cc>
 8004c54:	6019      	str	r1, [r3, #0]
 8004c56:	e002      	b.n	8004c5e <_printf_i+0x1d2>
 8004c58:	0670      	lsls	r0, r6, #25
 8004c5a:	d5fb      	bpl.n	8004c54 <_printf_i+0x1c8>
 8004c5c:	8019      	strh	r1, [r3, #0]
 8004c5e:	2300      	movs	r3, #0
 8004c60:	6123      	str	r3, [r4, #16]
 8004c62:	4615      	mov	r5, r2
 8004c64:	e7ba      	b.n	8004bdc <_printf_i+0x150>
 8004c66:	682b      	ldr	r3, [r5, #0]
 8004c68:	1d1a      	adds	r2, r3, #4
 8004c6a:	602a      	str	r2, [r5, #0]
 8004c6c:	681d      	ldr	r5, [r3, #0]
 8004c6e:	6862      	ldr	r2, [r4, #4]
 8004c70:	2100      	movs	r1, #0
 8004c72:	4628      	mov	r0, r5
 8004c74:	f7fb fab4 	bl	80001e0 <memchr>
 8004c78:	b108      	cbz	r0, 8004c7e <_printf_i+0x1f2>
 8004c7a:	1b40      	subs	r0, r0, r5
 8004c7c:	6060      	str	r0, [r4, #4]
 8004c7e:	6863      	ldr	r3, [r4, #4]
 8004c80:	6123      	str	r3, [r4, #16]
 8004c82:	2300      	movs	r3, #0
 8004c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c88:	e7a8      	b.n	8004bdc <_printf_i+0x150>
 8004c8a:	6923      	ldr	r3, [r4, #16]
 8004c8c:	462a      	mov	r2, r5
 8004c8e:	4649      	mov	r1, r9
 8004c90:	4640      	mov	r0, r8
 8004c92:	47d0      	blx	sl
 8004c94:	3001      	adds	r0, #1
 8004c96:	d0ab      	beq.n	8004bf0 <_printf_i+0x164>
 8004c98:	6823      	ldr	r3, [r4, #0]
 8004c9a:	079b      	lsls	r3, r3, #30
 8004c9c:	d413      	bmi.n	8004cc6 <_printf_i+0x23a>
 8004c9e:	68e0      	ldr	r0, [r4, #12]
 8004ca0:	9b03      	ldr	r3, [sp, #12]
 8004ca2:	4298      	cmp	r0, r3
 8004ca4:	bfb8      	it	lt
 8004ca6:	4618      	movlt	r0, r3
 8004ca8:	e7a4      	b.n	8004bf4 <_printf_i+0x168>
 8004caa:	2301      	movs	r3, #1
 8004cac:	4632      	mov	r2, r6
 8004cae:	4649      	mov	r1, r9
 8004cb0:	4640      	mov	r0, r8
 8004cb2:	47d0      	blx	sl
 8004cb4:	3001      	adds	r0, #1
 8004cb6:	d09b      	beq.n	8004bf0 <_printf_i+0x164>
 8004cb8:	3501      	adds	r5, #1
 8004cba:	68e3      	ldr	r3, [r4, #12]
 8004cbc:	9903      	ldr	r1, [sp, #12]
 8004cbe:	1a5b      	subs	r3, r3, r1
 8004cc0:	42ab      	cmp	r3, r5
 8004cc2:	dcf2      	bgt.n	8004caa <_printf_i+0x21e>
 8004cc4:	e7eb      	b.n	8004c9e <_printf_i+0x212>
 8004cc6:	2500      	movs	r5, #0
 8004cc8:	f104 0619 	add.w	r6, r4, #25
 8004ccc:	e7f5      	b.n	8004cba <_printf_i+0x22e>
 8004cce:	bf00      	nop
 8004cd0:	0800516d 	.word	0x0800516d
 8004cd4:	0800517e 	.word	0x0800517e

08004cd8 <memcpy>:
 8004cd8:	440a      	add	r2, r1
 8004cda:	4291      	cmp	r1, r2
 8004cdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ce0:	d100      	bne.n	8004ce4 <memcpy+0xc>
 8004ce2:	4770      	bx	lr
 8004ce4:	b510      	push	{r4, lr}
 8004ce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cee:	4291      	cmp	r1, r2
 8004cf0:	d1f9      	bne.n	8004ce6 <memcpy+0xe>
 8004cf2:	bd10      	pop	{r4, pc}

08004cf4 <memmove>:
 8004cf4:	4288      	cmp	r0, r1
 8004cf6:	b510      	push	{r4, lr}
 8004cf8:	eb01 0402 	add.w	r4, r1, r2
 8004cfc:	d902      	bls.n	8004d04 <memmove+0x10>
 8004cfe:	4284      	cmp	r4, r0
 8004d00:	4623      	mov	r3, r4
 8004d02:	d807      	bhi.n	8004d14 <memmove+0x20>
 8004d04:	1e43      	subs	r3, r0, #1
 8004d06:	42a1      	cmp	r1, r4
 8004d08:	d008      	beq.n	8004d1c <memmove+0x28>
 8004d0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d12:	e7f8      	b.n	8004d06 <memmove+0x12>
 8004d14:	4402      	add	r2, r0
 8004d16:	4601      	mov	r1, r0
 8004d18:	428a      	cmp	r2, r1
 8004d1a:	d100      	bne.n	8004d1e <memmove+0x2a>
 8004d1c:	bd10      	pop	{r4, pc}
 8004d1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d26:	e7f7      	b.n	8004d18 <memmove+0x24>

08004d28 <_free_r>:
 8004d28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d2a:	2900      	cmp	r1, #0
 8004d2c:	d044      	beq.n	8004db8 <_free_r+0x90>
 8004d2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d32:	9001      	str	r0, [sp, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f1a1 0404 	sub.w	r4, r1, #4
 8004d3a:	bfb8      	it	lt
 8004d3c:	18e4      	addlt	r4, r4, r3
 8004d3e:	f000 f913 	bl	8004f68 <__malloc_lock>
 8004d42:	4a1e      	ldr	r2, [pc, #120]	; (8004dbc <_free_r+0x94>)
 8004d44:	9801      	ldr	r0, [sp, #4]
 8004d46:	6813      	ldr	r3, [r2, #0]
 8004d48:	b933      	cbnz	r3, 8004d58 <_free_r+0x30>
 8004d4a:	6063      	str	r3, [r4, #4]
 8004d4c:	6014      	str	r4, [r2, #0]
 8004d4e:	b003      	add	sp, #12
 8004d50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d54:	f000 b90e 	b.w	8004f74 <__malloc_unlock>
 8004d58:	42a3      	cmp	r3, r4
 8004d5a:	d908      	bls.n	8004d6e <_free_r+0x46>
 8004d5c:	6825      	ldr	r5, [r4, #0]
 8004d5e:	1961      	adds	r1, r4, r5
 8004d60:	428b      	cmp	r3, r1
 8004d62:	bf01      	itttt	eq
 8004d64:	6819      	ldreq	r1, [r3, #0]
 8004d66:	685b      	ldreq	r3, [r3, #4]
 8004d68:	1949      	addeq	r1, r1, r5
 8004d6a:	6021      	streq	r1, [r4, #0]
 8004d6c:	e7ed      	b.n	8004d4a <_free_r+0x22>
 8004d6e:	461a      	mov	r2, r3
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	b10b      	cbz	r3, 8004d78 <_free_r+0x50>
 8004d74:	42a3      	cmp	r3, r4
 8004d76:	d9fa      	bls.n	8004d6e <_free_r+0x46>
 8004d78:	6811      	ldr	r1, [r2, #0]
 8004d7a:	1855      	adds	r5, r2, r1
 8004d7c:	42a5      	cmp	r5, r4
 8004d7e:	d10b      	bne.n	8004d98 <_free_r+0x70>
 8004d80:	6824      	ldr	r4, [r4, #0]
 8004d82:	4421      	add	r1, r4
 8004d84:	1854      	adds	r4, r2, r1
 8004d86:	42a3      	cmp	r3, r4
 8004d88:	6011      	str	r1, [r2, #0]
 8004d8a:	d1e0      	bne.n	8004d4e <_free_r+0x26>
 8004d8c:	681c      	ldr	r4, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	6053      	str	r3, [r2, #4]
 8004d92:	4421      	add	r1, r4
 8004d94:	6011      	str	r1, [r2, #0]
 8004d96:	e7da      	b.n	8004d4e <_free_r+0x26>
 8004d98:	d902      	bls.n	8004da0 <_free_r+0x78>
 8004d9a:	230c      	movs	r3, #12
 8004d9c:	6003      	str	r3, [r0, #0]
 8004d9e:	e7d6      	b.n	8004d4e <_free_r+0x26>
 8004da0:	6825      	ldr	r5, [r4, #0]
 8004da2:	1961      	adds	r1, r4, r5
 8004da4:	428b      	cmp	r3, r1
 8004da6:	bf04      	itt	eq
 8004da8:	6819      	ldreq	r1, [r3, #0]
 8004daa:	685b      	ldreq	r3, [r3, #4]
 8004dac:	6063      	str	r3, [r4, #4]
 8004dae:	bf04      	itt	eq
 8004db0:	1949      	addeq	r1, r1, r5
 8004db2:	6021      	streq	r1, [r4, #0]
 8004db4:	6054      	str	r4, [r2, #4]
 8004db6:	e7ca      	b.n	8004d4e <_free_r+0x26>
 8004db8:	b003      	add	sp, #12
 8004dba:	bd30      	pop	{r4, r5, pc}
 8004dbc:	20010018 	.word	0x20010018

08004dc0 <sbrk_aligned>:
 8004dc0:	b570      	push	{r4, r5, r6, lr}
 8004dc2:	4e0e      	ldr	r6, [pc, #56]	; (8004dfc <sbrk_aligned+0x3c>)
 8004dc4:	460c      	mov	r4, r1
 8004dc6:	6831      	ldr	r1, [r6, #0]
 8004dc8:	4605      	mov	r5, r0
 8004dca:	b911      	cbnz	r1, 8004dd2 <sbrk_aligned+0x12>
 8004dcc:	f000 f8bc 	bl	8004f48 <_sbrk_r>
 8004dd0:	6030      	str	r0, [r6, #0]
 8004dd2:	4621      	mov	r1, r4
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	f000 f8b7 	bl	8004f48 <_sbrk_r>
 8004dda:	1c43      	adds	r3, r0, #1
 8004ddc:	d00a      	beq.n	8004df4 <sbrk_aligned+0x34>
 8004dde:	1cc4      	adds	r4, r0, #3
 8004de0:	f024 0403 	bic.w	r4, r4, #3
 8004de4:	42a0      	cmp	r0, r4
 8004de6:	d007      	beq.n	8004df8 <sbrk_aligned+0x38>
 8004de8:	1a21      	subs	r1, r4, r0
 8004dea:	4628      	mov	r0, r5
 8004dec:	f000 f8ac 	bl	8004f48 <_sbrk_r>
 8004df0:	3001      	adds	r0, #1
 8004df2:	d101      	bne.n	8004df8 <sbrk_aligned+0x38>
 8004df4:	f04f 34ff 	mov.w	r4, #4294967295
 8004df8:	4620      	mov	r0, r4
 8004dfa:	bd70      	pop	{r4, r5, r6, pc}
 8004dfc:	2001001c 	.word	0x2001001c

08004e00 <_malloc_r>:
 8004e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e04:	1ccd      	adds	r5, r1, #3
 8004e06:	f025 0503 	bic.w	r5, r5, #3
 8004e0a:	3508      	adds	r5, #8
 8004e0c:	2d0c      	cmp	r5, #12
 8004e0e:	bf38      	it	cc
 8004e10:	250c      	movcc	r5, #12
 8004e12:	2d00      	cmp	r5, #0
 8004e14:	4607      	mov	r7, r0
 8004e16:	db01      	blt.n	8004e1c <_malloc_r+0x1c>
 8004e18:	42a9      	cmp	r1, r5
 8004e1a:	d905      	bls.n	8004e28 <_malloc_r+0x28>
 8004e1c:	230c      	movs	r3, #12
 8004e1e:	603b      	str	r3, [r7, #0]
 8004e20:	2600      	movs	r6, #0
 8004e22:	4630      	mov	r0, r6
 8004e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e28:	4e2e      	ldr	r6, [pc, #184]	; (8004ee4 <_malloc_r+0xe4>)
 8004e2a:	f000 f89d 	bl	8004f68 <__malloc_lock>
 8004e2e:	6833      	ldr	r3, [r6, #0]
 8004e30:	461c      	mov	r4, r3
 8004e32:	bb34      	cbnz	r4, 8004e82 <_malloc_r+0x82>
 8004e34:	4629      	mov	r1, r5
 8004e36:	4638      	mov	r0, r7
 8004e38:	f7ff ffc2 	bl	8004dc0 <sbrk_aligned>
 8004e3c:	1c43      	adds	r3, r0, #1
 8004e3e:	4604      	mov	r4, r0
 8004e40:	d14d      	bne.n	8004ede <_malloc_r+0xde>
 8004e42:	6834      	ldr	r4, [r6, #0]
 8004e44:	4626      	mov	r6, r4
 8004e46:	2e00      	cmp	r6, #0
 8004e48:	d140      	bne.n	8004ecc <_malloc_r+0xcc>
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	4631      	mov	r1, r6
 8004e4e:	4638      	mov	r0, r7
 8004e50:	eb04 0803 	add.w	r8, r4, r3
 8004e54:	f000 f878 	bl	8004f48 <_sbrk_r>
 8004e58:	4580      	cmp	r8, r0
 8004e5a:	d13a      	bne.n	8004ed2 <_malloc_r+0xd2>
 8004e5c:	6821      	ldr	r1, [r4, #0]
 8004e5e:	3503      	adds	r5, #3
 8004e60:	1a6d      	subs	r5, r5, r1
 8004e62:	f025 0503 	bic.w	r5, r5, #3
 8004e66:	3508      	adds	r5, #8
 8004e68:	2d0c      	cmp	r5, #12
 8004e6a:	bf38      	it	cc
 8004e6c:	250c      	movcc	r5, #12
 8004e6e:	4629      	mov	r1, r5
 8004e70:	4638      	mov	r0, r7
 8004e72:	f7ff ffa5 	bl	8004dc0 <sbrk_aligned>
 8004e76:	3001      	adds	r0, #1
 8004e78:	d02b      	beq.n	8004ed2 <_malloc_r+0xd2>
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	442b      	add	r3, r5
 8004e7e:	6023      	str	r3, [r4, #0]
 8004e80:	e00e      	b.n	8004ea0 <_malloc_r+0xa0>
 8004e82:	6822      	ldr	r2, [r4, #0]
 8004e84:	1b52      	subs	r2, r2, r5
 8004e86:	d41e      	bmi.n	8004ec6 <_malloc_r+0xc6>
 8004e88:	2a0b      	cmp	r2, #11
 8004e8a:	d916      	bls.n	8004eba <_malloc_r+0xba>
 8004e8c:	1961      	adds	r1, r4, r5
 8004e8e:	42a3      	cmp	r3, r4
 8004e90:	6025      	str	r5, [r4, #0]
 8004e92:	bf18      	it	ne
 8004e94:	6059      	strne	r1, [r3, #4]
 8004e96:	6863      	ldr	r3, [r4, #4]
 8004e98:	bf08      	it	eq
 8004e9a:	6031      	streq	r1, [r6, #0]
 8004e9c:	5162      	str	r2, [r4, r5]
 8004e9e:	604b      	str	r3, [r1, #4]
 8004ea0:	4638      	mov	r0, r7
 8004ea2:	f104 060b 	add.w	r6, r4, #11
 8004ea6:	f000 f865 	bl	8004f74 <__malloc_unlock>
 8004eaa:	f026 0607 	bic.w	r6, r6, #7
 8004eae:	1d23      	adds	r3, r4, #4
 8004eb0:	1af2      	subs	r2, r6, r3
 8004eb2:	d0b6      	beq.n	8004e22 <_malloc_r+0x22>
 8004eb4:	1b9b      	subs	r3, r3, r6
 8004eb6:	50a3      	str	r3, [r4, r2]
 8004eb8:	e7b3      	b.n	8004e22 <_malloc_r+0x22>
 8004eba:	6862      	ldr	r2, [r4, #4]
 8004ebc:	42a3      	cmp	r3, r4
 8004ebe:	bf0c      	ite	eq
 8004ec0:	6032      	streq	r2, [r6, #0]
 8004ec2:	605a      	strne	r2, [r3, #4]
 8004ec4:	e7ec      	b.n	8004ea0 <_malloc_r+0xa0>
 8004ec6:	4623      	mov	r3, r4
 8004ec8:	6864      	ldr	r4, [r4, #4]
 8004eca:	e7b2      	b.n	8004e32 <_malloc_r+0x32>
 8004ecc:	4634      	mov	r4, r6
 8004ece:	6876      	ldr	r6, [r6, #4]
 8004ed0:	e7b9      	b.n	8004e46 <_malloc_r+0x46>
 8004ed2:	230c      	movs	r3, #12
 8004ed4:	603b      	str	r3, [r7, #0]
 8004ed6:	4638      	mov	r0, r7
 8004ed8:	f000 f84c 	bl	8004f74 <__malloc_unlock>
 8004edc:	e7a1      	b.n	8004e22 <_malloc_r+0x22>
 8004ede:	6025      	str	r5, [r4, #0]
 8004ee0:	e7de      	b.n	8004ea0 <_malloc_r+0xa0>
 8004ee2:	bf00      	nop
 8004ee4:	20010018 	.word	0x20010018

08004ee8 <_realloc_r>:
 8004ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eec:	4680      	mov	r8, r0
 8004eee:	4614      	mov	r4, r2
 8004ef0:	460e      	mov	r6, r1
 8004ef2:	b921      	cbnz	r1, 8004efe <_realloc_r+0x16>
 8004ef4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ef8:	4611      	mov	r1, r2
 8004efa:	f7ff bf81 	b.w	8004e00 <_malloc_r>
 8004efe:	b92a      	cbnz	r2, 8004f0c <_realloc_r+0x24>
 8004f00:	f7ff ff12 	bl	8004d28 <_free_r>
 8004f04:	4625      	mov	r5, r4
 8004f06:	4628      	mov	r0, r5
 8004f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f0c:	f000 f838 	bl	8004f80 <_malloc_usable_size_r>
 8004f10:	4284      	cmp	r4, r0
 8004f12:	4607      	mov	r7, r0
 8004f14:	d802      	bhi.n	8004f1c <_realloc_r+0x34>
 8004f16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f1a:	d812      	bhi.n	8004f42 <_realloc_r+0x5a>
 8004f1c:	4621      	mov	r1, r4
 8004f1e:	4640      	mov	r0, r8
 8004f20:	f7ff ff6e 	bl	8004e00 <_malloc_r>
 8004f24:	4605      	mov	r5, r0
 8004f26:	2800      	cmp	r0, #0
 8004f28:	d0ed      	beq.n	8004f06 <_realloc_r+0x1e>
 8004f2a:	42bc      	cmp	r4, r7
 8004f2c:	4622      	mov	r2, r4
 8004f2e:	4631      	mov	r1, r6
 8004f30:	bf28      	it	cs
 8004f32:	463a      	movcs	r2, r7
 8004f34:	f7ff fed0 	bl	8004cd8 <memcpy>
 8004f38:	4631      	mov	r1, r6
 8004f3a:	4640      	mov	r0, r8
 8004f3c:	f7ff fef4 	bl	8004d28 <_free_r>
 8004f40:	e7e1      	b.n	8004f06 <_realloc_r+0x1e>
 8004f42:	4635      	mov	r5, r6
 8004f44:	e7df      	b.n	8004f06 <_realloc_r+0x1e>
	...

08004f48 <_sbrk_r>:
 8004f48:	b538      	push	{r3, r4, r5, lr}
 8004f4a:	4d06      	ldr	r5, [pc, #24]	; (8004f64 <_sbrk_r+0x1c>)
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	4604      	mov	r4, r0
 8004f50:	4608      	mov	r0, r1
 8004f52:	602b      	str	r3, [r5, #0]
 8004f54:	f7fc f878 	bl	8001048 <_sbrk>
 8004f58:	1c43      	adds	r3, r0, #1
 8004f5a:	d102      	bne.n	8004f62 <_sbrk_r+0x1a>
 8004f5c:	682b      	ldr	r3, [r5, #0]
 8004f5e:	b103      	cbz	r3, 8004f62 <_sbrk_r+0x1a>
 8004f60:	6023      	str	r3, [r4, #0]
 8004f62:	bd38      	pop	{r3, r4, r5, pc}
 8004f64:	20010020 	.word	0x20010020

08004f68 <__malloc_lock>:
 8004f68:	4801      	ldr	r0, [pc, #4]	; (8004f70 <__malloc_lock+0x8>)
 8004f6a:	f000 b811 	b.w	8004f90 <__retarget_lock_acquire_recursive>
 8004f6e:	bf00      	nop
 8004f70:	20010024 	.word	0x20010024

08004f74 <__malloc_unlock>:
 8004f74:	4801      	ldr	r0, [pc, #4]	; (8004f7c <__malloc_unlock+0x8>)
 8004f76:	f000 b80c 	b.w	8004f92 <__retarget_lock_release_recursive>
 8004f7a:	bf00      	nop
 8004f7c:	20010024 	.word	0x20010024

08004f80 <_malloc_usable_size_r>:
 8004f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f84:	1f18      	subs	r0, r3, #4
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	bfbc      	itt	lt
 8004f8a:	580b      	ldrlt	r3, [r1, r0]
 8004f8c:	18c0      	addlt	r0, r0, r3
 8004f8e:	4770      	bx	lr

08004f90 <__retarget_lock_acquire_recursive>:
 8004f90:	4770      	bx	lr

08004f92 <__retarget_lock_release_recursive>:
 8004f92:	4770      	bx	lr

08004f94 <_init>:
 8004f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f96:	bf00      	nop
 8004f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f9a:	bc08      	pop	{r3}
 8004f9c:	469e      	mov	lr, r3
 8004f9e:	4770      	bx	lr

08004fa0 <_fini>:
 8004fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa2:	bf00      	nop
 8004fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa6:	bc08      	pop	{r3}
 8004fa8:	469e      	mov	lr, r3
 8004faa:	4770      	bx	lr
