
vgaGraphics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cb8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08004e58  08004e58  00014e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800503c  0800503c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800503c  0800503c  0001503c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005044  08005044  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005044  08005044  00015044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005048  08005048  00015048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800504c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ffa8  20000074  080050c0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001001c  080050c0  0003001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb50  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f6b  00000000  00000000  0002ebf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  00030b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  00031898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016914  00000000  00000000  00032518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e9c0  00000000  00000000  00048e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dc68  00000000  00000000  000577ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5454  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ba0  00000000  00000000  000e54a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004e40 	.word	0x08004e40

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08004e40 	.word	0x08004e40

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <dumpLine>:
/* USER CODE BEGIN 0 */

char str[81] = { '\0' };
uint16_t str_len = 0;

void dumpLine(){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0

	for(int i = 0; i < 40; i++){
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	e018      	b.n	80005c2 <dumpLine+0x3e>
		int tmp = screenBuff[i].value;
 8000590:	4a17      	ldr	r2, [pc, #92]	; (80005f0 <dumpLine+0x6c>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4413      	add	r3, r2
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	603b      	str	r3, [r7, #0]
		str_len = sprintf(str, "%02x ", tmp);
 800059a:	683a      	ldr	r2, [r7, #0]
 800059c:	4915      	ldr	r1, [pc, #84]	; (80005f4 <dumpLine+0x70>)
 800059e:	4816      	ldr	r0, [pc, #88]	; (80005f8 <dumpLine+0x74>)
 80005a0:	f003 ffe0 	bl	8004564 <siprintf>
 80005a4:	4603      	mov	r3, r0
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	4b14      	ldr	r3, [pc, #80]	; (80005fc <dumpLine+0x78>)
 80005aa:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80005ac:	4b13      	ldr	r3, [pc, #76]	; (80005fc <dumpLine+0x78>)
 80005ae:	881a      	ldrh	r2, [r3, #0]
 80005b0:	f04f 33ff 	mov.w	r3, #4294967295
 80005b4:	4910      	ldr	r1, [pc, #64]	; (80005f8 <dumpLine+0x74>)
 80005b6:	4812      	ldr	r0, [pc, #72]	; (8000600 <dumpLine+0x7c>)
 80005b8:	f003 fc2d 	bl	8003e16 <HAL_UART_Transmit>
	for(int i = 0; i < 40; i++){
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3301      	adds	r3, #1
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b27      	cmp	r3, #39	; 0x27
 80005c6:	dde3      	ble.n	8000590 <dumpLine+0xc>
	}
	str_len = sprintf(str, "\r\n");
 80005c8:	490e      	ldr	r1, [pc, #56]	; (8000604 <dumpLine+0x80>)
 80005ca:	480b      	ldr	r0, [pc, #44]	; (80005f8 <dumpLine+0x74>)
 80005cc:	f003 ffca 	bl	8004564 <siprintf>
 80005d0:	4603      	mov	r3, r0
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <dumpLine+0x78>)
 80005d6:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <dumpLine+0x78>)
 80005da:	881a      	ldrh	r2, [r3, #0]
 80005dc:	f04f 33ff 	mov.w	r3, #4294967295
 80005e0:	4905      	ldr	r1, [pc, #20]	; (80005f8 <dumpLine+0x74>)
 80005e2:	4807      	ldr	r0, [pc, #28]	; (8000600 <dumpLine+0x7c>)
 80005e4:	f003 fc17 	bl	8003e16 <HAL_UART_Transmit>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200004f4 	.word	0x200004f4
 80005f4:	08004e58 	.word	0x08004e58
 80005f8:	2000017c 	.word	0x2000017c
 80005fc:	200001ce 	.word	0x200001ce
 8000600:	20000138 	.word	0x20000138
 8000604:	08004e60 	.word	0x08004e60

08000608 <printStatus>:

void printStatus(HAL_StatusTypeDef status){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	  HAL_OK       = 0x00U,
	  HAL_ERROR    = 0x01U,
	  HAL_BUSY     = 0x02U,
	  HAL_TIMEOUT  = 0x03U
	} HAL_StatusTypeDef;//*/
	switch(status){
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	2b03      	cmp	r3, #3
 8000616:	d82f      	bhi.n	8000678 <printStatus+0x70>
 8000618:	a201      	add	r2, pc, #4	; (adr r2, 8000620 <printStatus+0x18>)
 800061a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061e:	bf00      	nop
 8000620:	08000631 	.word	0x08000631
 8000624:	08000643 	.word	0x08000643
 8000628:	08000655 	.word	0x08000655
 800062c:	08000667 	.word	0x08000667
	case HAL_OK:str_len = sprintf(str, "HAL_OK\r\n");break;
 8000630:	491c      	ldr	r1, [pc, #112]	; (80006a4 <printStatus+0x9c>)
 8000632:	481d      	ldr	r0, [pc, #116]	; (80006a8 <printStatus+0xa0>)
 8000634:	f003 ff96 	bl	8004564 <siprintf>
 8000638:	4603      	mov	r3, r0
 800063a:	b29a      	uxth	r2, r3
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <printStatus+0xa4>)
 800063e:	801a      	strh	r2, [r3, #0]
 8000640:	e023      	b.n	800068a <printStatus+0x82>
	case HAL_ERROR:str_len = sprintf(str, "HAL_ERROR\r\n");break;
 8000642:	491b      	ldr	r1, [pc, #108]	; (80006b0 <printStatus+0xa8>)
 8000644:	4818      	ldr	r0, [pc, #96]	; (80006a8 <printStatus+0xa0>)
 8000646:	f003 ff8d 	bl	8004564 <siprintf>
 800064a:	4603      	mov	r3, r0
 800064c:	b29a      	uxth	r2, r3
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <printStatus+0xa4>)
 8000650:	801a      	strh	r2, [r3, #0]
 8000652:	e01a      	b.n	800068a <printStatus+0x82>
	case HAL_BUSY:str_len = sprintf(str, "HAL_BUSY\r\n");break;
 8000654:	4917      	ldr	r1, [pc, #92]	; (80006b4 <printStatus+0xac>)
 8000656:	4814      	ldr	r0, [pc, #80]	; (80006a8 <printStatus+0xa0>)
 8000658:	f003 ff84 	bl	8004564 <siprintf>
 800065c:	4603      	mov	r3, r0
 800065e:	b29a      	uxth	r2, r3
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <printStatus+0xa4>)
 8000662:	801a      	strh	r2, [r3, #0]
 8000664:	e011      	b.n	800068a <printStatus+0x82>
	case HAL_TIMEOUT:str_len = sprintf(str, "HAL_TIMEOUT\r\n");break;
 8000666:	4914      	ldr	r1, [pc, #80]	; (80006b8 <printStatus+0xb0>)
 8000668:	480f      	ldr	r0, [pc, #60]	; (80006a8 <printStatus+0xa0>)
 800066a:	f003 ff7b 	bl	8004564 <siprintf>
 800066e:	4603      	mov	r3, r0
 8000670:	b29a      	uxth	r2, r3
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <printStatus+0xa4>)
 8000674:	801a      	strh	r2, [r3, #0]
 8000676:	e008      	b.n	800068a <printStatus+0x82>
	default:str_len = sprintf(str, "HAL_Unknown\r\n");break;
 8000678:	4910      	ldr	r1, [pc, #64]	; (80006bc <printStatus+0xb4>)
 800067a:	480b      	ldr	r0, [pc, #44]	; (80006a8 <printStatus+0xa0>)
 800067c:	f003 ff72 	bl	8004564 <siprintf>
 8000680:	4603      	mov	r3, r0
 8000682:	b29a      	uxth	r2, r3
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <printStatus+0xa4>)
 8000686:	801a      	strh	r2, [r3, #0]
 8000688:	bf00      	nop
	}
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <printStatus+0xa4>)
 800068c:	881a      	ldrh	r2, [r3, #0]
 800068e:	f04f 33ff 	mov.w	r3, #4294967295
 8000692:	4905      	ldr	r1, [pc, #20]	; (80006a8 <printStatus+0xa0>)
 8000694:	480a      	ldr	r0, [pc, #40]	; (80006c0 <printStatus+0xb8>)
 8000696:	f003 fbbe 	bl	8003e16 <HAL_UART_Transmit>

}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	08004e64 	.word	0x08004e64
 80006a8:	2000017c 	.word	0x2000017c
 80006ac:	200001ce 	.word	0x200001ce
 80006b0:	08004e70 	.word	0x08004e70
 80006b4:	08004e7c 	.word	0x08004e7c
 80006b8:	08004e88 	.word	0x08004e88
 80006bc:	08004e98 	.word	0x08004e98
 80006c0:	20000138 	.word	0x20000138

080006c4 <printState>:

int printState(HAL_DMA_StateTypeDef state){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
  //HAL_DMA_STATE_BUSY              = 0x02U,  /*!< DMA process is ongoing              */
  //HAL_DMA_STATE_TIMEOUT           = 0x03U,  /*!< DMA timeout state                   */
  //HAL_DMA_STATE_ERROR             = 0x04U,  /*!< DMA error state                     */
  //HAL_DMA_STATE_ABORT             = 0x05U,  /*!< DMA Abort state                     */
//}HAL_DMA_StateTypeDef;
	switch(state){
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	2b05      	cmp	r3, #5
 80006d2:	d845      	bhi.n	8000760 <printState+0x9c>
 80006d4:	a201      	add	r2, pc, #4	; (adr r2, 80006dc <printState+0x18>)
 80006d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006da:	bf00      	nop
 80006dc:	080006f5 	.word	0x080006f5
 80006e0:	08000707 	.word	0x08000707
 80006e4:	08000719 	.word	0x08000719
 80006e8:	0800072b 	.word	0x0800072b
 80006ec:	0800073d 	.word	0x0800073d
 80006f0:	0800074f 	.word	0x0800074f
	case HAL_DMA_STATE_RESET:str_len = sprintf(str, "DMA not yet initialized or disabled\r\n");break;
 80006f4:	4928      	ldr	r1, [pc, #160]	; (8000798 <printState+0xd4>)
 80006f6:	4829      	ldr	r0, [pc, #164]	; (800079c <printState+0xd8>)
 80006f8:	f003 ff34 	bl	8004564 <siprintf>
 80006fc:	4603      	mov	r3, r0
 80006fe:	b29a      	uxth	r2, r3
 8000700:	4b27      	ldr	r3, [pc, #156]	; (80007a0 <printState+0xdc>)
 8000702:	801a      	strh	r2, [r3, #0]
 8000704:	e035      	b.n	8000772 <printState+0xae>
	case HAL_DMA_STATE_READY:str_len = sprintf(str, "DMA initialized and ready for use\r\n");break;
 8000706:	4927      	ldr	r1, [pc, #156]	; (80007a4 <printState+0xe0>)
 8000708:	4824      	ldr	r0, [pc, #144]	; (800079c <printState+0xd8>)
 800070a:	f003 ff2b 	bl	8004564 <siprintf>
 800070e:	4603      	mov	r3, r0
 8000710:	b29a      	uxth	r2, r3
 8000712:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <printState+0xdc>)
 8000714:	801a      	strh	r2, [r3, #0]
 8000716:	e02c      	b.n	8000772 <printState+0xae>
	case HAL_DMA_STATE_BUSY:str_len = sprintf(str, "DMA process is ongoing\r\n");break;
 8000718:	4923      	ldr	r1, [pc, #140]	; (80007a8 <printState+0xe4>)
 800071a:	4820      	ldr	r0, [pc, #128]	; (800079c <printState+0xd8>)
 800071c:	f003 ff22 	bl	8004564 <siprintf>
 8000720:	4603      	mov	r3, r0
 8000722:	b29a      	uxth	r2, r3
 8000724:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <printState+0xdc>)
 8000726:	801a      	strh	r2, [r3, #0]
 8000728:	e023      	b.n	8000772 <printState+0xae>
	case HAL_DMA_STATE_TIMEOUT:str_len = sprintf(str, "DMA timeout state\r\n");break;
 800072a:	4920      	ldr	r1, [pc, #128]	; (80007ac <printState+0xe8>)
 800072c:	481b      	ldr	r0, [pc, #108]	; (800079c <printState+0xd8>)
 800072e:	f003 ff19 	bl	8004564 <siprintf>
 8000732:	4603      	mov	r3, r0
 8000734:	b29a      	uxth	r2, r3
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <printState+0xdc>)
 8000738:	801a      	strh	r2, [r3, #0]
 800073a:	e01a      	b.n	8000772 <printState+0xae>
	case HAL_DMA_STATE_ERROR:str_len = sprintf(str, "DMA error state\r\n");break;
 800073c:	491c      	ldr	r1, [pc, #112]	; (80007b0 <printState+0xec>)
 800073e:	4817      	ldr	r0, [pc, #92]	; (800079c <printState+0xd8>)
 8000740:	f003 ff10 	bl	8004564 <siprintf>
 8000744:	4603      	mov	r3, r0
 8000746:	b29a      	uxth	r2, r3
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <printState+0xdc>)
 800074a:	801a      	strh	r2, [r3, #0]
 800074c:	e011      	b.n	8000772 <printState+0xae>
	case HAL_DMA_STATE_ABORT:str_len = sprintf(str, "DMA Abort state\r\n");break;
 800074e:	4919      	ldr	r1, [pc, #100]	; (80007b4 <printState+0xf0>)
 8000750:	4812      	ldr	r0, [pc, #72]	; (800079c <printState+0xd8>)
 8000752:	f003 ff07 	bl	8004564 <siprintf>
 8000756:	4603      	mov	r3, r0
 8000758:	b29a      	uxth	r2, r3
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <printState+0xdc>)
 800075c:	801a      	strh	r2, [r3, #0]
 800075e:	e008      	b.n	8000772 <printState+0xae>
	default:str_len = sprintf(str, "DMA_Unknown\r\n");break;
 8000760:	4915      	ldr	r1, [pc, #84]	; (80007b8 <printState+0xf4>)
 8000762:	480e      	ldr	r0, [pc, #56]	; (800079c <printState+0xd8>)
 8000764:	f003 fefe 	bl	8004564 <siprintf>
 8000768:	4603      	mov	r3, r0
 800076a:	b29a      	uxth	r2, r3
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <printState+0xdc>)
 800076e:	801a      	strh	r2, [r3, #0]
 8000770:	bf00      	nop

	}
	HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <printState+0xdc>)
 8000774:	881a      	ldrh	r2, [r3, #0]
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
 800077a:	4908      	ldr	r1, [pc, #32]	; (800079c <printState+0xd8>)
 800077c:	480f      	ldr	r0, [pc, #60]	; (80007bc <printState+0xf8>)
 800077e:	f003 fb4a 	bl	8003e16 <HAL_UART_Transmit>
	return state != HAL_DMA_STATE_READY;
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2b01      	cmp	r3, #1
 8000786:	bf14      	ite	ne
 8000788:	2301      	movne	r3, #1
 800078a:	2300      	moveq	r3, #0
 800078c:	b2db      	uxtb	r3, r3
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	08004ea8 	.word	0x08004ea8
 800079c:	2000017c 	.word	0x2000017c
 80007a0:	200001ce 	.word	0x200001ce
 80007a4:	08004ed0 	.word	0x08004ed0
 80007a8:	08004ef4 	.word	0x08004ef4
 80007ac:	08004f10 	.word	0x08004f10
 80007b0:	08004f24 	.word	0x08004f24
 80007b4:	08004f38 	.word	0x08004f38
 80007b8:	08004f4c 	.word	0x08004f4c
 80007bc:	20000138 	.word	0x20000138

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b098      	sub	sp, #96	; 0x60
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c6:	f001 f86d 	bl	80018a4 <HAL_Init>

  /* USER CODE BEGIN Init */
  GPIOC->ODR; // first 8 bits are GPIOC 0-7
 80007ca:	4b89      	ldr	r3, [pc, #548]	; (80009f0 <main+0x230>)
 80007cc:	695b      	ldr	r3, [r3, #20]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ce:	f000 f91d 	bl	8000a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d2:	f000 fa71 	bl	8000cb8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007d6:	f000 fa25 	bl	8000c24 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80007da:	f000 fa4d 	bl	8000c78 <MX_DMA_Init>
  MX_TIM1_Init();
 80007de:	f000 f981 	bl	8000ae4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  char str[81] = { '\0' };
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	f107 0308 	add.w	r3, r7, #8
 80007ea:	224d      	movs	r2, #77	; 0x4d
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f003 feb0 	bl	8004554 <memset>
  uint16_t str_len = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  str_len = sprintf(str, "Starting up!\r\n");
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	497d      	ldr	r1, [pc, #500]	; (80009f4 <main+0x234>)
 80007fe:	4618      	mov	r0, r3
 8000800:	f003 feb0 	bl	8004564 <siprintf>
 8000804:	4603      	mov	r3, r0
 8000806:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800080a:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800080e:	1d39      	adds	r1, r7, #4
 8000810:	f04f 33ff 	mov.w	r3, #4294967295
 8000814:	4878      	ldr	r0, [pc, #480]	; (80009f8 <main+0x238>)
 8000816:	f003 fafe 	bl	8003e16 <HAL_UART_Transmit>

  vgaSetup();
 800081a:	f000 ff11 	bl	8001640 <vgaSetup>
  registerDebugInterupts(&huart2);
 800081e:	4876      	ldr	r0, [pc, #472]	; (80009f8 <main+0x238>)
 8000820:	f000 fda6 	bl	8001370 <registerDebugInterupts>

  for(int i = 0; i < vertRes; i++){
 8000824:	2300      	movs	r3, #0
 8000826:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000828:	e019      	b.n	800085e <main+0x9e>
	  for(int j = 0; j < horiRes; j++){
 800082a:	2300      	movs	r3, #0
 800082c:	65bb      	str	r3, [r7, #88]	; 0x58
 800082e:	e00f      	b.n	8000850 <main+0x90>
		  screenBuff[i*vertRes + j].value = j & 0b111111;
 8000830:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000832:	b2da      	uxtb	r2, r3
 8000834:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000836:	21c8      	movs	r1, #200	; 0xc8
 8000838:	fb03 f101 	mul.w	r1, r3, r1
 800083c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800083e:	440b      	add	r3, r1
 8000840:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000844:	b2d1      	uxtb	r1, r2
 8000846:	4a6d      	ldr	r2, [pc, #436]	; (80009fc <main+0x23c>)
 8000848:	54d1      	strb	r1, [r2, r3]
	  for(int j = 0; j < horiRes; j++){
 800084a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800084c:	3301      	adds	r3, #1
 800084e:	65bb      	str	r3, [r7, #88]	; 0x58
 8000850:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000852:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000856:	dbeb      	blt.n	8000830 <main+0x70>
  for(int i = 0; i < vertRes; i++){
 8000858:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800085a:	3301      	adds	r3, #1
 800085c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800085e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000860:	2bc7      	cmp	r3, #199	; 0xc7
 8000862:	dde2      	ble.n	800082a <main+0x6a>
	  }
  }

  dumpLine();
 8000864:	f7ff fe8e 	bl	8000584 <dumpLine>
  printState(HAL_DMA_GetState(&memcopyDMA));
 8000868:	4865      	ldr	r0, [pc, #404]	; (8000a00 <main+0x240>)
 800086a:	f001 fe31 	bl	80024d0 <HAL_DMA_GetState>
 800086e:	4603      	mov	r3, r0
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ff27 	bl	80006c4 <printState>

  str_len = sprintf(str, "\r\n\r\n");
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	4962      	ldr	r1, [pc, #392]	; (8000a04 <main+0x244>)
 800087a:	4618      	mov	r0, r3
 800087c:	f003 fe72 	bl	8004564 <siprintf>
 8000880:	4603      	mov	r3, r0
 8000882:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8000886:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800088a:	1d39      	adds	r1, r7, #4
 800088c:	f04f 33ff 	mov.w	r3, #4294967295
 8000890:	4859      	ldr	r0, [pc, #356]	; (80009f8 <main+0x238>)
 8000892:	f003 fac0 	bl	8003e16 <HAL_UART_Transmit>

  printStatus(memSet(0, &screenBuff[0], 2));//testingMemset
 8000896:	2202      	movs	r2, #2
 8000898:	4958      	ldr	r1, [pc, #352]	; (80009fc <main+0x23c>)
 800089a:	2000      	movs	r0, #0
 800089c:	f000 fc3c 	bl	8001118 <memSet>
 80008a0:	4603      	mov	r3, r0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff feb0 	bl	8000608 <printStatus>
  printState(HAL_DMA_GetState(&memcopyDMA));
 80008a8:	4855      	ldr	r0, [pc, #340]	; (8000a00 <main+0x240>)
 80008aa:	f001 fe11 	bl	80024d0 <HAL_DMA_GetState>
 80008ae:	4603      	mov	r3, r0
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff07 	bl	80006c4 <printState>
  dumpLine();
 80008b6:	f7ff fe65 	bl	8000584 <dumpLine>
  while(printState(HAL_DMA_PollForTransfer(&memcopyDMA, HAL_DMA_FULL_TRANSFER, 100))){HAL_Delay(1000);};
 80008ba:	e003      	b.n	80008c4 <main+0x104>
 80008bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c0:	f001 f862 	bl	8001988 <HAL_Delay>
 80008c4:	2264      	movs	r2, #100	; 0x64
 80008c6:	2100      	movs	r1, #0
 80008c8:	484d      	ldr	r0, [pc, #308]	; (8000a00 <main+0x240>)
 80008ca:	f001 fb44 	bl	8001f56 <HAL_DMA_PollForTransfer>
 80008ce:	4603      	mov	r3, r0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff fef7 	bl	80006c4 <printState>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d1ef      	bne.n	80008bc <main+0xfc>

  str_len = sprintf(str, "\r\n\r\n");
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	4949      	ldr	r1, [pc, #292]	; (8000a04 <main+0x244>)
 80008e0:	4618      	mov	r0, r3
 80008e2:	f003 fe3f 	bl	8004564 <siprintf>
 80008e6:	4603      	mov	r3, r0
 80008e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80008ec:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80008f0:	1d39      	adds	r1, r7, #4
 80008f2:	f04f 33ff 	mov.w	r3, #4294967295
 80008f6:	4840      	ldr	r0, [pc, #256]	; (80009f8 <main+0x238>)
 80008f8:	f003 fa8d 	bl	8003e16 <HAL_UART_Transmit>

  if (HAL_DMA_Init(&memcopyDMA) != HAL_OK) {
 80008fc:	4840      	ldr	r0, [pc, #256]	; (8000a00 <main+0x240>)
 80008fe:	f001 f979 	bl	8001bf4 <HAL_DMA_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <main+0x14c>
	  Error_Handler();
 8000908:	f000 fa58 	bl	8000dbc <Error_Handler>
  }
  printStatus(memCopy(&screenBuff[8], &screenBuff[0], 2));//testingMemcopy
 800090c:	2202      	movs	r2, #2
 800090e:	493b      	ldr	r1, [pc, #236]	; (80009fc <main+0x23c>)
 8000910:	483d      	ldr	r0, [pc, #244]	; (8000a08 <main+0x248>)
 8000912:	f000 fbdb 	bl	80010cc <memCopy>
 8000916:	4603      	mov	r3, r0
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fe75 	bl	8000608 <printStatus>
  printState(HAL_DMA_GetState(&memcopyDMA));
 800091e:	4838      	ldr	r0, [pc, #224]	; (8000a00 <main+0x240>)
 8000920:	f001 fdd6 	bl	80024d0 <HAL_DMA_GetState>
 8000924:	4603      	mov	r3, r0
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fecc 	bl	80006c4 <printState>
  dumpLine();
 800092c:	f7ff fe2a 	bl	8000584 <dumpLine>
  while(printState(HAL_DMA_PollForTransfer(&memcopyDMA, HAL_DMA_FULL_TRANSFER, 100))){HAL_Delay(1000);};
 8000930:	e003      	b.n	800093a <main+0x17a>
 8000932:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000936:	f001 f827 	bl	8001988 <HAL_Delay>
 800093a:	2264      	movs	r2, #100	; 0x64
 800093c:	2100      	movs	r1, #0
 800093e:	4830      	ldr	r0, [pc, #192]	; (8000a00 <main+0x240>)
 8000940:	f001 fb09 	bl	8001f56 <HAL_DMA_PollForTransfer>
 8000944:	4603      	mov	r3, r0
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff febc 	bl	80006c4 <printState>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d1ef      	bne.n	8000932 <main+0x172>

  str_len = sprintf(str, "\r\n\r\n");
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	492b      	ldr	r1, [pc, #172]	; (8000a04 <main+0x244>)
 8000956:	4618      	mov	r0, r3
 8000958:	f003 fe04 	bl	8004564 <siprintf>
 800095c:	4603      	mov	r3, r0
 800095e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8000962:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8000966:	1d39      	adds	r1, r7, #4
 8000968:	f04f 33ff 	mov.w	r3, #4294967295
 800096c:	4822      	ldr	r0, [pc, #136]	; (80009f8 <main+0x238>)
 800096e:	f003 fa52 	bl	8003e16 <HAL_UART_Transmit>

  if (HAL_DMA_Init(&memcopyDMA) != HAL_OK) {
 8000972:	4823      	ldr	r0, [pc, #140]	; (8000a00 <main+0x240>)
 8000974:	f001 f93e 	bl	8001bf4 <HAL_DMA_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <main+0x1c2>
	  Error_Handler();
 800097e:	f000 fa1d 	bl	8000dbc <Error_Handler>
  }
  printStatus(memSet(0xff, &screenBuff[0], 2));//testingMemset
 8000982:	2202      	movs	r2, #2
 8000984:	491d      	ldr	r1, [pc, #116]	; (80009fc <main+0x23c>)
 8000986:	20ff      	movs	r0, #255	; 0xff
 8000988:	f000 fbc6 	bl	8001118 <memSet>
 800098c:	4603      	mov	r3, r0
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fe3a 	bl	8000608 <printStatus>
  printState(HAL_DMA_GetState(&memcopyDMA));
 8000994:	481a      	ldr	r0, [pc, #104]	; (8000a00 <main+0x240>)
 8000996:	f001 fd9b 	bl	80024d0 <HAL_DMA_GetState>
 800099a:	4603      	mov	r3, r0
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fe91 	bl	80006c4 <printState>
  dumpLine();
 80009a2:	f7ff fdef 	bl	8000584 <dumpLine>
  while(printState(HAL_DMA_PollForTransfer(&memcopyDMA, HAL_DMA_FULL_TRANSFER, 100))){HAL_Delay(1000);};
 80009a6:	e003      	b.n	80009b0 <main+0x1f0>
 80009a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ac:	f000 ffec 	bl	8001988 <HAL_Delay>
 80009b0:	2264      	movs	r2, #100	; 0x64
 80009b2:	2100      	movs	r1, #0
 80009b4:	4812      	ldr	r0, [pc, #72]	; (8000a00 <main+0x240>)
 80009b6:	f001 face 	bl	8001f56 <HAL_DMA_PollForTransfer>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fe81 	bl	80006c4 <printState>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d1ef      	bne.n	80009a8 <main+0x1e8>

  str_len = sprintf(str, "\r\n\r\n");
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	490e      	ldr	r1, [pc, #56]	; (8000a04 <main+0x244>)
 80009cc:	4618      	mov	r0, r3
 80009ce:	f003 fdc9 	bl	8004564 <siprintf>
 80009d2:	4603      	mov	r3, r0
 80009d4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  HAL_UART_Transmit(&huart2, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80009d8:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80009dc:	1d39      	adds	r1, r7, #4
 80009de:	f04f 33ff 	mov.w	r3, #4294967295
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <main+0x238>)
 80009e4:	f003 fa17 	bl	8003e16 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vgaStart();
 80009e8:	f000 ff08 	bl	80017fc <vgaStart>
  while (1)
 80009ec:	e7fe      	b.n	80009ec <main+0x22c>
 80009ee:	bf00      	nop
 80009f0:	40020800 	.word	0x40020800
 80009f4:	08004f5c 	.word	0x08004f5c
 80009f8:	20000138 	.word	0x20000138
 80009fc:	200004f4 	.word	0x200004f4
 8000a00:	2000ff9c 	.word	0x2000ff9c
 8000a04:	08004f6c 	.word	0x08004f6c
 8000a08:	200004fc 	.word	0x200004fc

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b094      	sub	sp, #80	; 0x50
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 0320 	add.w	r3, r7, #32
 8000a16:	2230      	movs	r2, #48	; 0x30
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f003 fd9a 	bl	8004554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	4b29      	ldr	r3, [pc, #164]	; (8000adc <SystemClock_Config+0xd0>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	4a28      	ldr	r2, [pc, #160]	; (8000adc <SystemClock_Config+0xd0>)
 8000a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a40:	4b26      	ldr	r3, [pc, #152]	; (8000adc <SystemClock_Config+0xd0>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <SystemClock_Config+0xd4>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a58:	4a21      	ldr	r2, [pc, #132]	; (8000ae0 <SystemClock_Config+0xd4>)
 8000a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a5e:	6013      	str	r3, [r2, #0]
 8000a60:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <SystemClock_Config+0xd4>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a70:	2301      	movs	r3, #1
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a74:	2310      	movs	r3, #16
 8000a76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a80:	2310      	movs	r3, #16
 8000a82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a84:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a88:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a8a:	2304      	movs	r3, #4
 8000a8c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a8e:	2307      	movs	r3, #7
 8000a90:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a92:	f107 0320 	add.w	r3, r7, #32
 8000a96:	4618      	mov	r0, r3
 8000a98:	f001 ffa6 	bl	80029e8 <HAL_RCC_OscConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000aa2:	f000 f98b 	bl	8000dbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa6:	230f      	movs	r3, #15
 8000aa8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	2102      	movs	r1, #2
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f002 fa08 	bl	8002ed8 <HAL_RCC_ClockConfig>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ace:	f000 f975 	bl	8000dbc <Error_Handler>
  }
}
 8000ad2:	bf00      	nop
 8000ad4:	3750      	adds	r7, #80	; 0x50
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40007000 	.word	0x40007000

08000ae4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b096      	sub	sp, #88	; 0x58
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]
 8000b12:	615a      	str	r2, [r3, #20]
 8000b14:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	2220      	movs	r2, #32
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f003 fd19 	bl	8004554 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b22:	4b3e      	ldr	r3, [pc, #248]	; (8000c1c <MX_TIM1_Init+0x138>)
 8000b24:	4a3e      	ldr	r2, [pc, #248]	; (8000c20 <MX_TIM1_Init+0x13c>)
 8000b26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b28:	4b3c      	ldr	r3, [pc, #240]	; (8000c1c <MX_TIM1_Init+0x138>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2e:	4b3b      	ldr	r3, [pc, #236]	; (8000c1c <MX_TIM1_Init+0x138>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b34:	4b39      	ldr	r3, [pc, #228]	; (8000c1c <MX_TIM1_Init+0x138>)
 8000b36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3c:	4b37      	ldr	r3, [pc, #220]	; (8000c1c <MX_TIM1_Init+0x138>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b42:	4b36      	ldr	r3, [pc, #216]	; (8000c1c <MX_TIM1_Init+0x138>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b48:	4b34      	ldr	r3, [pc, #208]	; (8000c1c <MX_TIM1_Init+0x138>)
 8000b4a:	2280      	movs	r2, #128	; 0x80
 8000b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b4e:	4833      	ldr	r0, [pc, #204]	; (8000c1c <MX_TIM1_Init+0x138>)
 8000b50:	f002 fbe2 	bl	8003318 <HAL_TIM_Base_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b5a:	f000 f92f 	bl	8000dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b62:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b68:	4619      	mov	r1, r3
 8000b6a:	482c      	ldr	r0, [pc, #176]	; (8000c1c <MX_TIM1_Init+0x138>)
 8000b6c:	f002 fcd8 	bl	8003520 <HAL_TIM_ConfigClockSource>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b76:	f000 f921 	bl	8000dbc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000b7a:	4828      	ldr	r0, [pc, #160]	; (8000c1c <MX_TIM1_Init+0x138>)
 8000b7c:	f002 fc1b 	bl	80033b6 <HAL_TIM_OC_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b86:	f000 f919 	bl	8000dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b96:	4619      	mov	r1, r3
 8000b98:	4820      	ldr	r0, [pc, #128]	; (8000c1c <MX_TIM1_Init+0x138>)
 8000b9a:	f003 f82f 	bl	8003bfc <HAL_TIMEx_MasterConfigSynchronization>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000ba4:	f000 f90a 	bl	8000dbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8000ba8:	2350      	movs	r3, #80	; 0x50
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4813      	ldr	r0, [pc, #76]	; (8000c1c <MX_TIM1_Init+0x138>)
 8000bce:	f002 fc4b 	bl	8003468 <HAL_TIM_OC_ConfigChannel>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000bd8:	f000 f8f0 	bl	8000dbc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4807      	ldr	r0, [pc, #28]	; (8000c1c <MX_TIM1_Init+0x138>)
 8000c00:	f003 f86a 	bl	8003cd8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000c0a:	f000 f8d7 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c0e:	4803      	ldr	r0, [pc, #12]	; (8000c1c <MX_TIM1_Init+0x138>)
 8000c10:	f000 f95e 	bl	8000ed0 <HAL_TIM_MspPostInit>

}
 8000c14:	bf00      	nop
 8000c16:	3758      	adds	r7, #88	; 0x58
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000090 	.word	0x20000090
 8000c20:	40010000 	.word	0x40010000

08000c24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <MX_USART2_UART_Init+0x4c>)
 8000c2a:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <MX_USART2_UART_Init+0x50>)
 8000c2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <MX_USART2_UART_Init+0x4c>)
 8000c30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <MX_USART2_UART_Init+0x4c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <MX_USART2_UART_Init+0x4c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <MX_USART2_UART_Init+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_USART2_UART_Init+0x4c>)
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <MX_USART2_UART_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_USART2_UART_Init+0x4c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_USART2_UART_Init+0x4c>)
 8000c5c:	f003 f88e 	bl	8003d7c <HAL_UART_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c66:	f000 f8a9 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000138 	.word	0x20000138
 8000c74:	40004400 	.word	0x40004400

08000c78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_DMA_Init+0x3c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <MX_DMA_Init+0x3c>)
 8000c88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_DMA_Init+0x3c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2044      	movs	r0, #68	; 0x44
 8000ca0:	f000 ff71 	bl	8001b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000ca4:	2044      	movs	r0, #68	; 0x44
 8000ca6:	f000 ff8a 	bl	8001bbe <HAL_NVIC_EnableIRQ>

}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800

08000cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	4b37      	ldr	r3, [pc, #220]	; (8000db0 <MX_GPIO_Init+0xf8>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a36      	ldr	r2, [pc, #216]	; (8000db0 <MX_GPIO_Init+0xf8>)
 8000cd8:	f043 0304 	orr.w	r3, r3, #4
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b34      	ldr	r3, [pc, #208]	; (8000db0 <MX_GPIO_Init+0xf8>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b30      	ldr	r3, [pc, #192]	; (8000db0 <MX_GPIO_Init+0xf8>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a2f      	ldr	r2, [pc, #188]	; (8000db0 <MX_GPIO_Init+0xf8>)
 8000cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b2d      	ldr	r3, [pc, #180]	; (8000db0 <MX_GPIO_Init+0xf8>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	4b29      	ldr	r3, [pc, #164]	; (8000db0 <MX_GPIO_Init+0xf8>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a28      	ldr	r2, [pc, #160]	; (8000db0 <MX_GPIO_Init+0xf8>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b26      	ldr	r3, [pc, #152]	; (8000db0 <MX_GPIO_Init+0xf8>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <MX_GPIO_Init+0xf8>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a21      	ldr	r2, [pc, #132]	; (8000db0 <MX_GPIO_Init+0xf8>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <MX_GPIO_Init+0xf8>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VGAdac0_Pin|VGAdac1_Pin|VGAdac2_Pin|VGAdac3_Pin
 8000d3e:	2200      	movs	r2, #0
 8000d40:	21ff      	movs	r1, #255	; 0xff
 8000d42:	481c      	ldr	r0, [pc, #112]	; (8000db4 <MX_GPIO_Init+0xfc>)
 8000d44:	f001 fe36 	bl	80029b4 <HAL_GPIO_WritePin>
                          |VGAdac4_Pin|VGAdac5_Pin|VGAdac6_Pin|VGAdac7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2120      	movs	r1, #32
 8000d4c:	481a      	ldr	r0, [pc, #104]	; (8000db8 <MX_GPIO_Init+0x100>)
 8000d4e:	f001 fe31 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d58:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	4812      	ldr	r0, [pc, #72]	; (8000db4 <MX_GPIO_Init+0xfc>)
 8000d6a:	f001 fc9f 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pins : VGAdac0_Pin VGAdac1_Pin VGAdac2_Pin VGAdac3_Pin
                           VGAdac4_Pin VGAdac5_Pin VGAdac6_Pin VGAdac7_Pin */
  GPIO_InitStruct.Pin = VGAdac0_Pin|VGAdac1_Pin|VGAdac2_Pin|VGAdac3_Pin
 8000d6e:	23ff      	movs	r3, #255	; 0xff
 8000d70:	617b      	str	r3, [r7, #20]
                          |VGAdac4_Pin|VGAdac5_Pin|VGAdac6_Pin|VGAdac7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	480b      	ldr	r0, [pc, #44]	; (8000db4 <MX_GPIO_Init+0xfc>)
 8000d86:	f001 fc91 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d8a:	2320      	movs	r3, #32
 8000d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_GPIO_Init+0x100>)
 8000da2:	f001 fc83 	bl	80026ac <HAL_GPIO_Init>

}
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	; 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020800 	.word	0x40020800
 8000db8:	40020000 	.word	0x40020000

08000dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc0:	b672      	cpsid	i
}
 8000dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <Error_Handler+0x8>
	...

08000dc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	4a0f      	ldr	r2, [pc, #60]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <HAL_MspInit+0x4c>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	603b      	str	r3, [r7, #0]
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <HAL_MspInit+0x4c>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <HAL_MspInit+0x4c>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e06:	2007      	movs	r0, #7
 8000e08:	f000 feb2 	bl	8001b70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40023800 	.word	0x40023800

08000e18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a26      	ldr	r2, [pc, #152]	; (8000ec0 <HAL_TIM_Base_MspInit+0xa8>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d146      	bne.n	8000eb8 <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <HAL_TIM_Base_MspInit+0xac>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	4a24      	ldr	r2, [pc, #144]	; (8000ec4 <HAL_TIM_Base_MspInit+0xac>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3a:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <HAL_TIM_Base_MspInit+0xac>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8000e46:	4b20      	ldr	r3, [pc, #128]	; (8000ec8 <HAL_TIM_Base_MspInit+0xb0>)
 8000e48:	4a20      	ldr	r2, [pc, #128]	; (8000ecc <HAL_TIM_Base_MspInit+0xb4>)
 8000e4a:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8000e4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <HAL_TIM_Base_MspInit+0xb0>)
 8000e4e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000e52:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e54:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <HAL_TIM_Base_MspInit+0xb0>)
 8000e56:	2240      	movs	r2, #64	; 0x40
 8000e58:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <HAL_TIM_Base_MspInit+0xb0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000e60:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <HAL_TIM_Base_MspInit+0xb0>)
 8000e62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e66:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e68:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <HAL_TIM_Base_MspInit+0xb0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e6e:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <HAL_TIM_Base_MspInit+0xb0>)
 8000e70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e74:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <HAL_TIM_Base_MspInit+0xb0>)
 8000e78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e7c:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_TIM_Base_MspInit+0xb0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e84:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <HAL_TIM_Base_MspInit+0xb0>)
 8000e86:	2204      	movs	r2, #4
 8000e88:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim1_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <HAL_TIM_Base_MspInit+0xb0>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim1_up.Init.MemBurst = DMA_MBURST_SINGLE;
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <HAL_TIM_Base_MspInit+0xb0>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim1_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <HAL_TIM_Base_MspInit+0xb0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000e9c:	480a      	ldr	r0, [pc, #40]	; (8000ec8 <HAL_TIM_Base_MspInit+0xb0>)
 8000e9e:	f000 fea9 	bl	8001bf4 <HAL_DMA_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <HAL_TIM_Base_MspInit+0x94>
    {
      Error_Handler();
 8000ea8:	f7ff ff88 	bl	8000dbc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <HAL_TIM_Base_MspInit+0xb0>)
 8000eb0:	621a      	str	r2, [r3, #32]
 8000eb2:	4a05      	ldr	r2, [pc, #20]	; (8000ec8 <HAL_TIM_Base_MspInit+0xb0>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40010000 	.word	0x40010000
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	200000d8 	.word	0x200000d8
 8000ecc:	40026488 	.word	0x40026488

08000ed0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <HAL_TIM_MspPostInit+0x68>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d11e      	bne.n	8000f30 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_TIM_MspPostInit+0x6c>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a10      	ldr	r2, [pc, #64]	; (8000f3c <HAL_TIM_MspPostInit+0x6c>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_TIM_MspPostInit+0x6c>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f12:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f20:	2301      	movs	r3, #1
 8000f22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <HAL_TIM_MspPostInit+0x70>)
 8000f2c:	f001 fbbe 	bl	80026ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f30:	bf00      	nop
 8000f32:	3720      	adds	r7, #32
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40010000 	.word	0x40010000
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020000 	.word	0x40020000

08000f44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a19      	ldr	r2, [pc, #100]	; (8000fc8 <HAL_UART_MspInit+0x84>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d12b      	bne.n	8000fbe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <HAL_UART_MspInit+0x88>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	4a17      	ldr	r2, [pc, #92]	; (8000fcc <HAL_UART_MspInit+0x88>)
 8000f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <HAL_UART_MspInit+0x88>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <HAL_UART_MspInit+0x88>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a10      	ldr	r2, [pc, #64]	; (8000fcc <HAL_UART_MspInit+0x88>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <HAL_UART_MspInit+0x88>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f9e:	230c      	movs	r3, #12
 8000fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000faa:	2303      	movs	r3, #3
 8000fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fae:	2307      	movs	r3, #7
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <HAL_UART_MspInit+0x8c>)
 8000fba:	f001 fb77 	bl	80026ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fbe:	bf00      	nop
 8000fc0:	3728      	adds	r7, #40	; 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40004400 	.word	0x40004400
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020000 	.word	0x40020000

08000fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <NMI_Handler+0x4>

08000fda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <HardFault_Handler+0x4>

08000fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <MemManage_Handler+0x4>

08000fe6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <BusFault_Handler+0x4>

08000fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <UsageFault_Handler+0x4>

08000ff2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001020:	f000 fc92 	bl	8001948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <DMA2_Stream5_IRQHandler+0x10>)
 800102e:	f001 f871 	bl	8002114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200000d8 	.word	0x200000d8

0800103c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001044:	4a14      	ldr	r2, [pc, #80]	; (8001098 <_sbrk+0x5c>)
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <_sbrk+0x60>)
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <_sbrk+0x64>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d102      	bne.n	800105e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <_sbrk+0x64>)
 800105a:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <_sbrk+0x68>)
 800105c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <_sbrk+0x64>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	429a      	cmp	r2, r3
 800106a:	d207      	bcs.n	800107c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800106c:	f003 fa48 	bl	8004500 <__errno>
 8001070:	4603      	mov	r3, r0
 8001072:	220c      	movs	r2, #12
 8001074:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	e009      	b.n	8001090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <_sbrk+0x64>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001082:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <_sbrk+0x64>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <_sbrk+0x64>)
 800108c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800108e:	68fb      	ldr	r3, [r7, #12]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20018000 	.word	0x20018000
 800109c:	00000400 	.word	0x00000400
 80010a0:	200001d0 	.word	0x200001d0
 80010a4:	20010020 	.word	0x20010020

080010a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <SystemInit+0x20>)
 80010ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b2:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <SystemInit+0x20>)
 80010b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <memCopy>:
 *
 * @param DstAddress copies to destination address incrementing
 *
 * @param DataLength number of unit32_t to be copied
 */
HAL_StatusTypeDef memCopy(uint32_t * SrcAddress, uint32_t * DstAddress, uint32_t DataLength){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
	if (HAL_DMA_Init(&memcopyDMA) != HAL_OK) {
 80010d8:	480d      	ldr	r0, [pc, #52]	; (8001110 <memCopy+0x44>)
 80010da:	f000 fd8b 	bl	8001bf4 <HAL_DMA_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <memCopy+0x1c>
		Error_Handler();
 80010e4:	f7ff fe6a 	bl	8000dbc <Error_Handler>
	}
	SET_BIT(vgaCircularDMA.Instance->CR, DMA_MINC_ENABLE);
 80010e8:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <memCopy+0x48>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <memCopy+0x48>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80010f6:	601a      	str	r2, [r3, #0]
	return HAL_DMA_Start(&memcopyDMA, (uint32_t)SrcAddress, (uint32_t)DstAddress, DataLength);
 80010f8:	68f9      	ldr	r1, [r7, #12]
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4804      	ldr	r0, [pc, #16]	; (8001110 <memCopy+0x44>)
 8001100:	f000 fe26 	bl	8001d50 <HAL_DMA_Start>
 8001104:	4603      	mov	r3, r0
	while(HAL_DMA_PollForTransfer(&memcopyDMA, HAL_DMA_FULL_TRANSFER, 100) != HAL_OK);
	//todo yield to other operations
	//return here from memCopyCompletCallBack callback
	return HAL_OK;
}
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	2000ff9c 	.word	0x2000ff9c
 8001114:	2000ff3c 	.word	0x2000ff3c

08001118 <memSet>:
 *
 * @param DstAddress destination address incrementing
 *
 * @param DataLength number of unit32_t to be written
 */
HAL_StatusTypeDef memSet(uint32_t value, uint32_t * DstAddress, uint32_t DataLength){
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
	volatile static uint32_t setVal = 0;
	setVal = value;
 8001124:	4a13      	ldr	r2, [pc, #76]	; (8001174 <memSet+0x5c>)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6013      	str	r3, [r2, #0]
	if (HAL_DMA_Init(&memcopyDMA) != HAL_OK) {
 800112a:	4813      	ldr	r0, [pc, #76]	; (8001178 <memSet+0x60>)
 800112c:	f000 fd62 	bl	8001bf4 <HAL_DMA_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <memSet+0x22>
		Error_Handler();
 8001136:	f7ff fe41 	bl	8000dbc <Error_Handler>
	}
	CLEAR_BIT(vgaCircularDMA.Instance->CR, DMA_MINC_ENABLE);
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <memSet+0x64>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <memSet+0x64>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001148:	601a      	str	r2, [r3, #0]
	HAL_DMA_Start(&memcopyDMA, (uint32_t)&setVal, (uint32_t)DstAddress, DataLength);
 800114a:	490a      	ldr	r1, [pc, #40]	; (8001174 <memSet+0x5c>)
 800114c:	68ba      	ldr	r2, [r7, #8]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4809      	ldr	r0, [pc, #36]	; (8001178 <memSet+0x60>)
 8001152:	f000 fdfd 	bl	8001d50 <HAL_DMA_Start>
	while(HAL_DMA_PollForTransfer(&memcopyDMA, HAL_DMA_FULL_TRANSFER, 100) != HAL_OK);
 8001156:	bf00      	nop
 8001158:	2264      	movs	r2, #100	; 0x64
 800115a:	2100      	movs	r1, #0
 800115c:	4806      	ldr	r0, [pc, #24]	; (8001178 <memSet+0x60>)
 800115e:	f000 fefa 	bl	8001f56 <HAL_DMA_PollForTransfer>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1f7      	bne.n	8001158 <memSet+0x40>
	//todo yield to other operations
	//return here from memCopyCompletCallBack callback
	return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20010000 	.word	0x20010000
 8001178:	2000ff9c 	.word	0x2000ff9c
 800117c:	2000ff3c 	.word	0x2000ff3c

08001180 <memCopyCompletCallBack>:

void memCopyCompletCallBack(DMA_HandleTypeDef *_hdma){
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <vga_DMA_XFER_CPLT_CB_ID>:

UART_HandleTypeDef * huartE;
//HAL_DMA_XFER_CPLT_CB_ID         = 0x00U,  /*!< Full transfer     */
void vga_DMA_XFER_CPLT_CB_ID(){
 8001194:	b580      	push	{r7, lr}
 8001196:	b096      	sub	sp, #88	; 0x58
 8001198:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 800119a:	2300      	movs	r3, #0
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	224d      	movs	r2, #77	; 0x4d
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f003 f9d5 	bl	8004554 <memset>
	int str_len = sprintf(str, "Full transfer\r\n");
 80011aa:	463b      	mov	r3, r7
 80011ac:	4908      	ldr	r1, [pc, #32]	; (80011d0 <vga_DMA_XFER_CPLT_CB_ID+0x3c>)
 80011ae:	4618      	mov	r0, r3
 80011b0:	f003 f9d8 	bl	8004564 <siprintf>
 80011b4:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80011b6:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <vga_DMA_XFER_CPLT_CB_ID+0x40>)
 80011b8:	6818      	ldr	r0, [r3, #0]
 80011ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011bc:	b29a      	uxth	r2, r3
 80011be:	4639      	mov	r1, r7
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295
 80011c4:	f002 fe27 	bl	8003e16 <HAL_UART_Transmit>
}
 80011c8:	bf00      	nop
 80011ca:	3758      	adds	r7, #88	; 0x58
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	08004f74 	.word	0x08004f74
 80011d4:	2000fffc 	.word	0x2000fffc

080011d8 <vga_DMA_XFER_HALFCPLT_CB_ID>:
//HAL_DMA_XFER_HALFCPLT_CB_ID     = 0x01U,  /*!< Half Transfer     */
void vga_DMA_XFER_HALFCPLT_CB_ID(){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b096      	sub	sp, #88	; 0x58
 80011dc:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 80011de:	2300      	movs	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	224d      	movs	r2, #77	; 0x4d
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f003 f9b3 	bl	8004554 <memset>
	int str_len = sprintf(str, "Half Transfer\r\n");
 80011ee:	463b      	mov	r3, r7
 80011f0:	4908      	ldr	r1, [pc, #32]	; (8001214 <vga_DMA_XFER_HALFCPLT_CB_ID+0x3c>)
 80011f2:	4618      	mov	r0, r3
 80011f4:	f003 f9b6 	bl	8004564 <siprintf>
 80011f8:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80011fa:	4b07      	ldr	r3, [pc, #28]	; (8001218 <vga_DMA_XFER_HALFCPLT_CB_ID+0x40>)
 80011fc:	6818      	ldr	r0, [r3, #0]
 80011fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001200:	b29a      	uxth	r2, r3
 8001202:	4639      	mov	r1, r7
 8001204:	f04f 33ff 	mov.w	r3, #4294967295
 8001208:	f002 fe05 	bl	8003e16 <HAL_UART_Transmit>
}
 800120c:	bf00      	nop
 800120e:	3758      	adds	r7, #88	; 0x58
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	08004f84 	.word	0x08004f84
 8001218:	2000fffc 	.word	0x2000fffc

0800121c <vga_DMA_XFER_M1CPLT_CB_ID>:
//HAL_DMA_XFER_M1CPLT_CB_ID       = 0x02U,  /*!< M1 Full Transfer  */
void vga_DMA_XFER_M1CPLT_CB_ID(){
 800121c:	b580      	push	{r7, lr}
 800121e:	b096      	sub	sp, #88	; 0x58
 8001220:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 8001222:	2300      	movs	r3, #0
 8001224:	603b      	str	r3, [r7, #0]
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	224d      	movs	r2, #77	; 0x4d
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f003 f991 	bl	8004554 <memset>
	int str_len = sprintf(str, "M1 Full Transfer\r\n");
 8001232:	463b      	mov	r3, r7
 8001234:	4908      	ldr	r1, [pc, #32]	; (8001258 <vga_DMA_XFER_M1CPLT_CB_ID+0x3c>)
 8001236:	4618      	mov	r0, r3
 8001238:	f003 f994 	bl	8004564 <siprintf>
 800123c:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800123e:	4b07      	ldr	r3, [pc, #28]	; (800125c <vga_DMA_XFER_M1CPLT_CB_ID+0x40>)
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001244:	b29a      	uxth	r2, r3
 8001246:	4639      	mov	r1, r7
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
 800124c:	f002 fde3 	bl	8003e16 <HAL_UART_Transmit>
}
 8001250:	bf00      	nop
 8001252:	3758      	adds	r7, #88	; 0x58
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	08004f94 	.word	0x08004f94
 800125c:	2000fffc 	.word	0x2000fffc

08001260 <vga_DMA_XFER_M1HALFCPLT_CB_ID>:
//HAL_DMA_XFER_M1HALFCPLT_CB_ID   = 0x03U,  /*!< M1 Half Transfer  */
void vga_DMA_XFER_M1HALFCPLT_CB_ID(){
 8001260:	b580      	push	{r7, lr}
 8001262:	b096      	sub	sp, #88	; 0x58
 8001264:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 8001266:	2300      	movs	r3, #0
 8001268:	603b      	str	r3, [r7, #0]
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	224d      	movs	r2, #77	; 0x4d
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f003 f96f 	bl	8004554 <memset>
	int str_len = sprintf(str, "M1 Half Transfer\r\n");
 8001276:	463b      	mov	r3, r7
 8001278:	4908      	ldr	r1, [pc, #32]	; (800129c <vga_DMA_XFER_M1HALFCPLT_CB_ID+0x3c>)
 800127a:	4618      	mov	r0, r3
 800127c:	f003 f972 	bl	8004564 <siprintf>
 8001280:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8001282:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <vga_DMA_XFER_M1HALFCPLT_CB_ID+0x40>)
 8001284:	6818      	ldr	r0, [r3, #0]
 8001286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001288:	b29a      	uxth	r2, r3
 800128a:	4639      	mov	r1, r7
 800128c:	f04f 33ff 	mov.w	r3, #4294967295
 8001290:	f002 fdc1 	bl	8003e16 <HAL_UART_Transmit>
}
 8001294:	bf00      	nop
 8001296:	3758      	adds	r7, #88	; 0x58
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	08004fa8 	.word	0x08004fa8
 80012a0:	2000fffc 	.word	0x2000fffc

080012a4 <vga_DMA_XFER_ERROR_CB_ID>:
//HAL_DMA_XFER_ERROR_CB_ID        = 0x04U,  /*!< Error             */
void vga_DMA_XFER_ERROR_CB_ID(){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b096      	sub	sp, #88	; 0x58
 80012a8:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 80012aa:	2300      	movs	r3, #0
 80012ac:	603b      	str	r3, [r7, #0]
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	224d      	movs	r2, #77	; 0x4d
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f003 f94d 	bl	8004554 <memset>
	int str_len = sprintf(str, "DMA Error\r\n");
 80012ba:	463b      	mov	r3, r7
 80012bc:	4908      	ldr	r1, [pc, #32]	; (80012e0 <vga_DMA_XFER_ERROR_CB_ID+0x3c>)
 80012be:	4618      	mov	r0, r3
 80012c0:	f003 f950 	bl	8004564 <siprintf>
 80012c4:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 80012c6:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <vga_DMA_XFER_ERROR_CB_ID+0x40>)
 80012c8:	6818      	ldr	r0, [r3, #0]
 80012ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	4639      	mov	r1, r7
 80012d0:	f04f 33ff 	mov.w	r3, #4294967295
 80012d4:	f002 fd9f 	bl	8003e16 <HAL_UART_Transmit>
}
 80012d8:	bf00      	nop
 80012da:	3758      	adds	r7, #88	; 0x58
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	08004fbc 	.word	0x08004fbc
 80012e4:	2000fffc 	.word	0x2000fffc

080012e8 <vga_DMA_XFER_ABORT_CB_ID>:
//HAL_DMA_XFER_ABORT_CB_ID        = 0x05U,  /*!< Abort             */
void vga_DMA_XFER_ABORT_CB_ID(){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b096      	sub	sp, #88	; 0x58
 80012ec:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 80012ee:	2300      	movs	r3, #0
 80012f0:	603b      	str	r3, [r7, #0]
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	224d      	movs	r2, #77	; 0x4d
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f003 f92b 	bl	8004554 <memset>
	int str_len = sprintf(str, "DMA Abort\r\n");
 80012fe:	463b      	mov	r3, r7
 8001300:	4908      	ldr	r1, [pc, #32]	; (8001324 <vga_DMA_XFER_ABORT_CB_ID+0x3c>)
 8001302:	4618      	mov	r0, r3
 8001304:	f003 f92e 	bl	8004564 <siprintf>
 8001308:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800130a:	4b07      	ldr	r3, [pc, #28]	; (8001328 <vga_DMA_XFER_ABORT_CB_ID+0x40>)
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001310:	b29a      	uxth	r2, r3
 8001312:	4639      	mov	r1, r7
 8001314:	f04f 33ff 	mov.w	r3, #4294967295
 8001318:	f002 fd7d 	bl	8003e16 <HAL_UART_Transmit>
}
 800131c:	bf00      	nop
 800131e:	3758      	adds	r7, #88	; 0x58
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	08004fc8 	.word	0x08004fc8
 8001328:	2000fffc 	.word	0x2000fffc

0800132c <vga_DMA_XFER_ALL_CB_ID>:
//HAL_DMA_XFER_ALL_CB_ID          = 0x06U   /*!< All               */
void vga_DMA_XFER_ALL_CB_ID(){
 800132c:	b580      	push	{r7, lr}
 800132e:	b096      	sub	sp, #88	; 0x58
 8001330:	af00      	add	r7, sp, #0
	char str[81] = { '\0' };
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	224d      	movs	r2, #77	; 0x4d
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f003 f909 	bl	8004554 <memset>
	int str_len = sprintf(str, "Full transfer\r\n");
 8001342:	463b      	mov	r3, r7
 8001344:	4908      	ldr	r1, [pc, #32]	; (8001368 <vga_DMA_XFER_ALL_CB_ID+0x3c>)
 8001346:	4618      	mov	r0, r3
 8001348:	f003 f90c 	bl	8004564 <siprintf>
 800134c:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <vga_DMA_XFER_ALL_CB_ID+0x40>)
 8001350:	6818      	ldr	r0, [r3, #0]
 8001352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001354:	b29a      	uxth	r2, r3
 8001356:	4639      	mov	r1, r7
 8001358:	f04f 33ff 	mov.w	r3, #4294967295
 800135c:	f002 fd5b 	bl	8003e16 <HAL_UART_Transmit>
}
 8001360:	bf00      	nop
 8001362:	3758      	adds	r7, #88	; 0x58
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	08004f74 	.word	0x08004f74
 800136c:	2000fffc 	.word	0x2000fffc

08001370 <registerDebugInterupts>:



void registerDebugInterupts(UART_HandleTypeDef * t_huartE){
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	huartE = t_huartE;
 8001378:	4a14      	ldr	r2, [pc, #80]	; (80013cc <registerDebugInterupts+0x5c>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
	HAL_DMA_RegisterCallback(&memcopyDMA, HAL_DMA_XFER_ABORT_CB_ID, vga_DMA_XFER_CPLT_CB_ID);
 800137e:	4a14      	ldr	r2, [pc, #80]	; (80013d0 <registerDebugInterupts+0x60>)
 8001380:	2105      	movs	r1, #5
 8001382:	4814      	ldr	r0, [pc, #80]	; (80013d4 <registerDebugInterupts+0x64>)
 8001384:	f001 f850 	bl	8002428 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(&memcopyDMA, HAL_DMA_XFER_HALFCPLT_CB_ID, vga_DMA_XFER_HALFCPLT_CB_ID);
 8001388:	4a13      	ldr	r2, [pc, #76]	; (80013d8 <registerDebugInterupts+0x68>)
 800138a:	2101      	movs	r1, #1
 800138c:	4811      	ldr	r0, [pc, #68]	; (80013d4 <registerDebugInterupts+0x64>)
 800138e:	f001 f84b 	bl	8002428 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(&memcopyDMA, HAL_DMA_XFER_M1CPLT_CB_ID, vga_DMA_XFER_M1CPLT_CB_ID);
 8001392:	4a12      	ldr	r2, [pc, #72]	; (80013dc <registerDebugInterupts+0x6c>)
 8001394:	2102      	movs	r1, #2
 8001396:	480f      	ldr	r0, [pc, #60]	; (80013d4 <registerDebugInterupts+0x64>)
 8001398:	f001 f846 	bl	8002428 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(&memcopyDMA, HAL_DMA_XFER_M1HALFCPLT_CB_ID, vga_DMA_XFER_M1HALFCPLT_CB_ID);
 800139c:	4a10      	ldr	r2, [pc, #64]	; (80013e0 <registerDebugInterupts+0x70>)
 800139e:	2103      	movs	r1, #3
 80013a0:	480c      	ldr	r0, [pc, #48]	; (80013d4 <registerDebugInterupts+0x64>)
 80013a2:	f001 f841 	bl	8002428 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(&memcopyDMA, HAL_DMA_XFER_ERROR_CB_ID, vga_DMA_XFER_ERROR_CB_ID);
 80013a6:	4a0f      	ldr	r2, [pc, #60]	; (80013e4 <registerDebugInterupts+0x74>)
 80013a8:	2104      	movs	r1, #4
 80013aa:	480a      	ldr	r0, [pc, #40]	; (80013d4 <registerDebugInterupts+0x64>)
 80013ac:	f001 f83c 	bl	8002428 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(&memcopyDMA, HAL_DMA_XFER_ABORT_CB_ID, vga_DMA_XFER_ABORT_CB_ID);
 80013b0:	4a0d      	ldr	r2, [pc, #52]	; (80013e8 <registerDebugInterupts+0x78>)
 80013b2:	2105      	movs	r1, #5
 80013b4:	4807      	ldr	r0, [pc, #28]	; (80013d4 <registerDebugInterupts+0x64>)
 80013b6:	f001 f837 	bl	8002428 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(&memcopyDMA, HAL_DMA_XFER_ALL_CB_ID, vga_DMA_XFER_ALL_CB_ID);
 80013ba:	4a0c      	ldr	r2, [pc, #48]	; (80013ec <registerDebugInterupts+0x7c>)
 80013bc:	2106      	movs	r1, #6
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <registerDebugInterupts+0x64>)
 80013c0:	f001 f832 	bl	8002428 <HAL_DMA_RegisterCallback>
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	2000fffc 	.word	0x2000fffc
 80013d0:	08001195 	.word	0x08001195
 80013d4:	2000ff9c 	.word	0x2000ff9c
 80013d8:	080011d9 	.word	0x080011d9
 80013dc:	0800121d 	.word	0x0800121d
 80013e0:	08001261 	.word	0x08001261
 80013e4:	080012a5 	.word	0x080012a5
 80013e8:	080012e9 	.word	0x080012e9
 80013ec:	0800132d 	.word	0x0800132d

080013f0 <clearVisibleArea>:

void clearVisibleArea(Color * lineBuffPart){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	//uses 32 bit mode to clear faster
	memSet(0, (uint32_t*)lineBuffPart, horiRes/4);
 80013f8:	2250      	movs	r2, #80	; 0x50
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	2000      	movs	r0, #0
 80013fe:	f7ff fe8b 	bl	8001118 <memSet>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <setVerticalSync>:

void setVerticalSync(Color * lineBuffPart){
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
	//uses 32 bit accesses to clear faster

	//set VerticalSync everywhere
	memSet(0x80808080, (uint32_t*)lineBuffPart, horiWhole/4);
 8001412:	2264      	movs	r2, #100	; 0x64
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	f04f 3080 	mov.w	r0, #2155905152	; 0x80808080
 800141a:	f7ff fe7d 	bl	8001118 <memSet>
	//set vertical and Horizontal sync in overlap
	memSet(0xC0C0C0C0, (uint32_t*)&lineBuffPart[horiRes+horiFront], horiSync/4);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8001424:	220c      	movs	r2, #12
 8001426:	4619      	mov	r1, r3
 8001428:	f04f 30c0 	mov.w	r0, #3233857728	; 0xc0c0c0c0
 800142c:	f7ff fe74 	bl	8001118 <memSet>
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <setHorizontalSync>:

void setHorizontalSync(Color * lineBuffPart){
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	//uses 32 bit accesses to clear faster

	//clear VerticalSync everywhere / clear entire buffer
	memSet(0, (uint32_t*)lineBuffPart, horiWhole/4);
 8001440:	2264      	movs	r2, #100	; 0x64
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	2000      	movs	r0, #0
 8001446:	f7ff fe67 	bl	8001118 <memSet>
	//set Horizontal sync
	memSet(0x40404040, (uint32_t*)&lineBuffPart[horiRes+horiFront], horiSync/4);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8001450:	220c      	movs	r2, #12
 8001452:	4619      	mov	r1, r3
 8001454:	f04f 3040 	mov.w	r0, #1077952576	; 0x40404040
 8001458:	f7ff fe5e 	bl	8001118 <memSet>
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <renderLine>:

void __weak renderLine(Color * lineBuffPart, const int lineCount){
 8001464:	b580      	push	{r7, lr}
 8001466:	b098      	sub	sp, #96	; 0x60
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
	//both buffers are 32 bit aligned

	char str[81] = { '\0' };
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	224d      	movs	r2, #77	; 0x4d
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f003 f86a 	bl	8004554 <memset>
	int str_len = sprintf(str, "Rendering line %i\r\n", lineCount);
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	4910      	ldr	r1, [pc, #64]	; (80014c8 <renderLine+0x64>)
 8001488:	4618      	mov	r0, r3
 800148a:	f003 f86b 	bl	8004564 <siprintf>
 800148e:	65f8      	str	r0, [r7, #92]	; 0x5c
	HAL_UART_Transmit(huartE, (uint8_t*) str, str_len, HAL_MAX_DELAY);
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <renderLine+0x68>)
 8001492:	6818      	ldr	r0, [r3, #0]
 8001494:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001496:	b29a      	uxth	r2, r3
 8001498:	f107 0108 	add.w	r1, r7, #8
 800149c:	f04f 33ff 	mov.w	r3, #4294967295
 80014a0:	f002 fcb9 	bl	8003e16 <HAL_UART_Transmit>
	//copy the current line of the screen buffer in to the line buffer
	memCopy((uint32_t*)&screenBuff[horiRes*lineCount], (uint32_t *)lineBuffPart, horiRes/4);
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	019b      	lsls	r3, r3, #6
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <renderLine+0x6c>)
 80014b2:	4413      	add	r3, r2
 80014b4:	2250      	movs	r2, #80	; 0x50
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fe07 	bl	80010cc <memCopy>
}
 80014be:	bf00      	nop
 80014c0:	3760      	adds	r7, #96	; 0x60
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	08004fd4 	.word	0x08004fd4
 80014cc:	2000fffc 	.word	0x2000fffc
 80014d0:	200004f4 	.word	0x200004f4

080014d4 <copyLastLine>:

void copyLastLine(Color * activeBuffer, const Color * oldBuffer){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
	//both buffers are 32 bit aligned
	memCopy((uint32_t*)oldBuffer, (uint32_t *)activeBuffer, horiRes/4);
 80014de:	2250      	movs	r2, #80	; 0x50
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	6838      	ldr	r0, [r7, #0]
 80014e4:	f7ff fdf2 	bl	80010cc <memCopy>
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <prepareLine>:

void prepareLine(Color * activeBuffer, const Color * oldBuffer){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
	static int lineCount = vertArea + vertFront + vertSync;//start right after a vertical sync
	static int lineUpscale = 0;//copy old buffer if non zero

		if((lineCount&0b1) == 0){//todo there is a odd number of lines in a frame get active buffer from DMA status or boolean toggle
 80014fa:	4b3f      	ldr	r3, [pc, #252]	; (80015f8 <prepareLine+0x108>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b00      	cmp	r3, #0
 8001504:	d103      	bne.n	800150e <prepareLine+0x1e>
		activeBuffer += horiWhole;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800150c:	607b      	str	r3, [r7, #4]
	}
	if(lineCount < vertArea){//render line by copying from screenBuff
 800150e:	4b3a      	ldr	r3, [pc, #232]	; (80015f8 <prepareLine+0x108>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001516:	da1f      	bge.n	8001558 <prepareLine+0x68>
		if(vgaUpscale == 1){//we are not upscaling and can't reuse old buffers
			renderLine(activeBuffer, lineCount);
		}else{//we are upscaling and can save recourses by copying last buffer
			if(lineUpscale == 0){//first pass render line
 8001518:	4b38      	ldr	r3, [pc, #224]	; (80015fc <prepareLine+0x10c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d106      	bne.n	800152e <prepareLine+0x3e>
				renderLine(activeBuffer, lineCount);
 8001520:	4b35      	ldr	r3, [pc, #212]	; (80015f8 <prepareLine+0x108>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4619      	mov	r1, r3
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff ff9c 	bl	8001464 <renderLine>
 800152c:	e007      	b.n	800153e <prepareLine+0x4e>
			}else if(lineUpscale == 1){
 800152e:	4b33      	ldr	r3, [pc, #204]	; (80015fc <prepareLine+0x10c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d103      	bne.n	800153e <prepareLine+0x4e>
				//would be faster if we could use a fifo queue of dma transfers instead of a circular buffer
				copyLastLine(activeBuffer, oldBuffer);
 8001536:	6839      	ldr	r1, [r7, #0]
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ffcb 	bl	80014d4 <copyLastLine>
			}
			if(++lineUpscale == vgaUpscale){
 800153e:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <prepareLine+0x10c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	3301      	adds	r3, #1
 8001544:	4a2d      	ldr	r2, [pc, #180]	; (80015fc <prepareLine+0x10c>)
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	4b2c      	ldr	r3, [pc, #176]	; (80015fc <prepareLine+0x10c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b02      	cmp	r3, #2
 800154e:	d149      	bne.n	80015e4 <prepareLine+0xf4>
				lineUpscale = 0;
 8001550:	4b2a      	ldr	r3, [pc, #168]	; (80015fc <prepareLine+0x10c>)
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	e045      	b.n	80015e4 <prepareLine+0xf4>
			}
		}
	}

	else if(lineCount == vertArea){//clear leftover data in buffer 1
 8001558:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <prepareLine+0x108>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001560:	d103      	bne.n	800156a <prepareLine+0x7a>
		clearVisibleArea(activeBuffer);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff ff44 	bl	80013f0 <clearVisibleArea>
 8001568:	e03c      	b.n	80015e4 <prepareLine+0xf4>
	}else if(lineCount == vertArea + 1){//clear leftover data in buffer 2
 800156a:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <prepareLine+0x108>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f240 1291 	movw	r2, #401	; 0x191
 8001572:	4293      	cmp	r3, r2
 8001574:	d103      	bne.n	800157e <prepareLine+0x8e>
		clearVisibleArea(activeBuffer);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ff3a 	bl	80013f0 <clearVisibleArea>
 800157c:	e032      	b.n	80015e4 <prepareLine+0xf4>
	}

	else if(lineCount == vertArea + vertFront){//set Vertical Sync in buffer 1
 800157e:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <prepareLine+0x108>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f5b3 7fce 	cmp.w	r3, #412	; 0x19c
 8001586:	d103      	bne.n	8001590 <prepareLine+0xa0>
		setVerticalSync(activeBuffer);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff3e 	bl	800140a <setVerticalSync>
 800158e:	e029      	b.n	80015e4 <prepareLine+0xf4>
	}else if(lineCount == vertArea + vertFront + 1){//set Vertical Sync in buffer 2
 8001590:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <prepareLine+0x108>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f240 129d 	movw	r2, #413	; 0x19d
 8001598:	4293      	cmp	r3, r2
 800159a:	d103      	bne.n	80015a4 <prepareLine+0xb4>
		setVerticalSync(activeBuffer);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ff34 	bl	800140a <setVerticalSync>
 80015a2:	e01f      	b.n	80015e4 <prepareLine+0xf4>
	}

	else if(lineCount == vertArea + vertFront + vertSync){//set Horizontal Sync in buffer 1
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <prepareLine+0x108>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 80015ac:	d103      	bne.n	80015b6 <prepareLine+0xc6>
		setHorizontalSync(activeBuffer);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ff42 	bl	8001438 <setHorizontalSync>
 80015b4:	e016      	b.n	80015e4 <prepareLine+0xf4>
	}else if(lineCount == vertArea + vertFront + vertSync + 1){//set Horizontal Sync in buffer 2
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <prepareLine+0x108>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f240 129f 	movw	r2, #415	; 0x19f
 80015be:	4293      	cmp	r3, r2
 80015c0:	d103      	bne.n	80015ca <prepareLine+0xda>
		setHorizontalSync(activeBuffer);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ff38 	bl	8001438 <setHorizontalSync>
 80015c8:	e00c      	b.n	80015e4 <prepareLine+0xf4>
	}

	else if(lineCount == vertWhole){// set line count back to the start
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <prepareLine+0x108>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f240 12c1 	movw	r2, #449	; 0x1c1
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d106      	bne.n	80015e4 <prepareLine+0xf4>
		lineCount = -1;
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <prepareLine+0x108>)
 80015d8:	f04f 32ff 	mov.w	r2, #4294967295
 80015dc:	601a      	str	r2, [r3, #0]
		lineUpscale = 0;
 80015de:	4b07      	ldr	r3, [pc, #28]	; (80015fc <prepareLine+0x10c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
	}
	++lineCount;
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <prepareLine+0x108>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	3301      	adds	r3, #1
 80015ea:	4a03      	ldr	r2, [pc, #12]	; (80015f8 <prepareLine+0x108>)
 80015ec:	6013      	str	r3, [r2, #0]
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000004 	.word	0x20000004
 80015fc:	20010004 	.word	0x20010004

08001600 <vgaHalfCallBack>:

void vgaHalfCallBack(DMA_HandleTypeDef *_hdma){
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	prepareLine(lineBuff, &lineBuff[horiWhole]);
 8001608:	4903      	ldr	r1, [pc, #12]	; (8001618 <vgaHalfCallBack+0x18>)
 800160a:	4804      	ldr	r0, [pc, #16]	; (800161c <vgaHalfCallBack+0x1c>)
 800160c:	f7ff ff70 	bl	80014f0 <prepareLine>
}
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000364 	.word	0x20000364
 800161c:	200001d4 	.word	0x200001d4

08001620 <vgaFullCallBack>:

void vgaFullCallBack(DMA_HandleTypeDef *_hdma){
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	prepareLine(&lineBuff[horiWhole], lineBuff);
 8001628:	4903      	ldr	r1, [pc, #12]	; (8001638 <vgaFullCallBack+0x18>)
 800162a:	4804      	ldr	r0, [pc, #16]	; (800163c <vgaFullCallBack+0x1c>)
 800162c:	f7ff ff60 	bl	80014f0 <prepareLine>
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	200001d4 	.word	0x200001d4
 800163c:	20000364 	.word	0x20000364

08001640 <vgaSetup>:



void vgaSetup(){
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b64      	ldr	r3, [pc, #400]	; (80017dc <vgaSetup+0x19c>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a63      	ldr	r2, [pc, #396]	; (80017dc <vgaSetup+0x19c>)
 8001650:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b61      	ldr	r3, [pc, #388]	; (80017dc <vgaSetup+0x19c>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	4b5d      	ldr	r3, [pc, #372]	; (80017dc <vgaSetup+0x19c>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a5c      	ldr	r2, [pc, #368]	; (80017dc <vgaSetup+0x19c>)
 800166c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b5a      	ldr	r3, [pc, #360]	; (80017dc <vgaSetup+0x19c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2100      	movs	r1, #0
 8001682:	2010      	movs	r0, #16
 8001684:	f000 fa7f 	bl	8001b86 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001688:	2010      	movs	r0, #16
 800168a:	f000 fa98 	bl	8001bbe <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	2044      	movs	r0, #68	; 0x44
 8001694:	f000 fa77 	bl	8001b86 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001698:	2044      	movs	r0, #68	; 0x44
 800169a:	f000 fa90 	bl	8001bbe <HAL_NVIC_EnableIRQ>

	vgaPixelTimer.Instance = TIM1;
 800169e:	4b50      	ldr	r3, [pc, #320]	; (80017e0 <vgaSetup+0x1a0>)
 80016a0:	4a50      	ldr	r2, [pc, #320]	; (80017e4 <vgaSetup+0x1a4>)
 80016a2:	601a      	str	r2, [r3, #0]
	vgaPixelTimer.Init.Prescaler = 0;
 80016a4:	4b4e      	ldr	r3, [pc, #312]	; (80017e0 <vgaSetup+0x1a0>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	605a      	str	r2, [r3, #4]
	vgaPixelTimer.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016aa:	4b4d      	ldr	r3, [pc, #308]	; (80017e0 <vgaSetup+0x1a0>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
	vgaPixelTimer.Init.Period = 65535;
 80016b0:	4b4b      	ldr	r3, [pc, #300]	; (80017e0 <vgaSetup+0x1a0>)
 80016b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016b6:	60da      	str	r2, [r3, #12]
	vgaPixelTimer.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b8:	4b49      	ldr	r3, [pc, #292]	; (80017e0 <vgaSetup+0x1a0>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	611a      	str	r2, [r3, #16]
	vgaPixelTimer.Init.RepetitionCounter = 0;
 80016be:	4b48      	ldr	r3, [pc, #288]	; (80017e0 <vgaSetup+0x1a0>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	615a      	str	r2, [r3, #20]
	vgaPixelTimer.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016c4:	4b46      	ldr	r3, [pc, #280]	; (80017e0 <vgaSetup+0x1a0>)
 80016c6:	2280      	movs	r2, #128	; 0x80
 80016c8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&vgaPixelTimer) != HAL_OK)
 80016ca:	4845      	ldr	r0, [pc, #276]	; (80017e0 <vgaSetup+0x1a0>)
 80016cc:	f001 fe24 	bl	8003318 <HAL_TIM_Base_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <vgaSetup+0x9a>
	{
		Error_Handler();
 80016d6:	f7ff fb71 	bl	8000dbc <Error_Handler>
	}


	/* USART2 DMA Init */
	/* USART2_RX Init */
	memcopyDMA.Instance = DMA2_Stream5;
 80016da:	4b43      	ldr	r3, [pc, #268]	; (80017e8 <vgaSetup+0x1a8>)
 80016dc:	4a43      	ldr	r2, [pc, #268]	; (80017ec <vgaSetup+0x1ac>)
 80016de:	601a      	str	r2, [r3, #0]
	memcopyDMA.Init.Channel = DMA_CHANNEL_4;
 80016e0:	4b41      	ldr	r3, [pc, #260]	; (80017e8 <vgaSetup+0x1a8>)
 80016e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016e6:	605a      	str	r2, [r3, #4]
	memcopyDMA.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80016e8:	4b3f      	ldr	r3, [pc, #252]	; (80017e8 <vgaSetup+0x1a8>)
 80016ea:	2280      	movs	r2, #128	; 0x80
 80016ec:	609a      	str	r2, [r3, #8]
	memcopyDMA.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ee:	4b3e      	ldr	r3, [pc, #248]	; (80017e8 <vgaSetup+0x1a8>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	60da      	str	r2, [r3, #12]
	memcopyDMA.Init.MemInc = DMA_MINC_ENABLE;
 80016f4:	4b3c      	ldr	r3, [pc, #240]	; (80017e8 <vgaSetup+0x1a8>)
 80016f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016fa:	611a      	str	r2, [r3, #16]
	memcopyDMA.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016fc:	4b3a      	ldr	r3, [pc, #232]	; (80017e8 <vgaSetup+0x1a8>)
 80016fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001702:	615a      	str	r2, [r3, #20]
	memcopyDMA.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001704:	4b38      	ldr	r3, [pc, #224]	; (80017e8 <vgaSetup+0x1a8>)
 8001706:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800170a:	619a      	str	r2, [r3, #24]
	memcopyDMA.Init.Mode = DMA_NORMAL;
 800170c:	4b36      	ldr	r3, [pc, #216]	; (80017e8 <vgaSetup+0x1a8>)
 800170e:	2200      	movs	r2, #0
 8001710:	61da      	str	r2, [r3, #28]
	memcopyDMA.Init.Priority = DMA_PRIORITY_LOW;
 8001712:	4b35      	ldr	r3, [pc, #212]	; (80017e8 <vgaSetup+0x1a8>)
 8001714:	2200      	movs	r2, #0
 8001716:	621a      	str	r2, [r3, #32]
	memcopyDMA.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001718:	4b33      	ldr	r3, [pc, #204]	; (80017e8 <vgaSetup+0x1a8>)
 800171a:	2200      	movs	r2, #0
 800171c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DMA_Init(&memcopyDMA) != HAL_OK)
 800171e:	4832      	ldr	r0, [pc, #200]	; (80017e8 <vgaSetup+0x1a8>)
 8001720:	f000 fa68 	bl	8001bf4 <HAL_DMA_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <vgaSetup+0xee>
	{
		Error_Handler();
 800172a:	f7ff fb47 	bl	8000dbc <Error_Handler>
	}

	if(vgaPixelTimer.Instance==TIM1)
 800172e:	4b2c      	ldr	r3, [pc, #176]	; (80017e0 <vgaSetup+0x1a0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a2c      	ldr	r2, [pc, #176]	; (80017e4 <vgaSetup+0x1a4>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d147      	bne.n	80017c8 <vgaSetup+0x188>
	{
		/* USER CODE BEGIN TIM1_MspInit 0 */

		/* USER CODE END TIM1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 8001738:	2300      	movs	r3, #0
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	4b27      	ldr	r3, [pc, #156]	; (80017dc <vgaSetup+0x19c>)
 800173e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001740:	4a26      	ldr	r2, [pc, #152]	; (80017dc <vgaSetup+0x19c>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	6453      	str	r3, [r2, #68]	; 0x44
 8001748:	4b24      	ldr	r3, [pc, #144]	; (80017dc <vgaSetup+0x19c>)
 800174a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	687b      	ldr	r3, [r7, #4]

		/* TIM1 DMA Init */
		/* TIM1_UP Init */
		vgaCircularDMA.Instance = DMA1_Stream5;
 8001754:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <vgaSetup+0x1b0>)
 8001756:	4a27      	ldr	r2, [pc, #156]	; (80017f4 <vgaSetup+0x1b4>)
 8001758:	601a      	str	r2, [r3, #0]
		vgaCircularDMA.Init.Channel = DMA_CHANNEL_6;
 800175a:	4b25      	ldr	r3, [pc, #148]	; (80017f0 <vgaSetup+0x1b0>)
 800175c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001760:	605a      	str	r2, [r3, #4]
		vgaCircularDMA.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001762:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <vgaSetup+0x1b0>)
 8001764:	2240      	movs	r2, #64	; 0x40
 8001766:	609a      	str	r2, [r3, #8]
		vgaCircularDMA.Init.PeriphInc = DMA_PINC_DISABLE;
 8001768:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <vgaSetup+0x1b0>)
 800176a:	2200      	movs	r2, #0
 800176c:	60da      	str	r2, [r3, #12]
		vgaCircularDMA.Init.MemInc = DMA_MINC_ENABLE;
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <vgaSetup+0x1b0>)
 8001770:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001774:	611a      	str	r2, [r3, #16]
		vgaCircularDMA.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001776:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <vgaSetup+0x1b0>)
 8001778:	2200      	movs	r2, #0
 800177a:	615a      	str	r2, [r3, #20]
		vgaCircularDMA.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <vgaSetup+0x1b0>)
 800177e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001782:	619a      	str	r2, [r3, #24]
		vgaCircularDMA.Init.Mode = DMA_CIRCULAR;
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <vgaSetup+0x1b0>)
 8001786:	f44f 7280 	mov.w	r2, #256	; 0x100
 800178a:	61da      	str	r2, [r3, #28]
		vgaCircularDMA.Init.Priority = DMA_PRIORITY_HIGH;
 800178c:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <vgaSetup+0x1b0>)
 800178e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001792:	621a      	str	r2, [r3, #32]
		vgaCircularDMA.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001794:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <vgaSetup+0x1b0>)
 8001796:	2204      	movs	r2, #4
 8001798:	625a      	str	r2, [r3, #36]	; 0x24
		vgaCircularDMA.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <vgaSetup+0x1b0>)
 800179c:	2200      	movs	r2, #0
 800179e:	629a      	str	r2, [r3, #40]	; 0x28
		vgaCircularDMA.Init.MemBurst = DMA_MBURST_SINGLE;
 80017a0:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <vgaSetup+0x1b0>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	62da      	str	r2, [r3, #44]	; 0x2c
		vgaCircularDMA.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <vgaSetup+0x1b0>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	631a      	str	r2, [r3, #48]	; 0x30
		if (HAL_DMA_Init(&vgaCircularDMA) != HAL_OK)
 80017ac:	4810      	ldr	r0, [pc, #64]	; (80017f0 <vgaSetup+0x1b0>)
 80017ae:	f000 fa21 	bl	8001bf4 <HAL_DMA_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <vgaSetup+0x17c>
		{
			Error_Handler();
 80017b8:	f7ff fb00 	bl	8000dbc <Error_Handler>
		}

		__HAL_LINKDMA(&vgaPixelTimer,hdma[TIM_DMA_ID_UPDATE],vgaCircularDMA);
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <vgaSetup+0x1a0>)
 80017be:	4a0c      	ldr	r2, [pc, #48]	; (80017f0 <vgaSetup+0x1b0>)
 80017c0:	621a      	str	r2, [r3, #32]
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <vgaSetup+0x1b0>)
 80017c4:	4a06      	ldr	r2, [pc, #24]	; (80017e0 <vgaSetup+0x1a0>)
 80017c6:	639a      	str	r2, [r3, #56]	; 0x38

		/* USER CODE BEGIN TIM1_MspInit 1 */

		/* USER CODE END TIM1_MspInit 1 */
	}
	HAL_DMA_RegisterCallback(&memcopyDMA, HAL_DMA_XFER_CPLT_CB_ID, memCopyCompletCallBack);
 80017c8:	4a0b      	ldr	r2, [pc, #44]	; (80017f8 <vgaSetup+0x1b8>)
 80017ca:	2100      	movs	r1, #0
 80017cc:	4806      	ldr	r0, [pc, #24]	; (80017e8 <vgaSetup+0x1a8>)
 80017ce:	f000 fe2b 	bl	8002428 <HAL_DMA_RegisterCallback>
}
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800
 80017e0:	2000fef4 	.word	0x2000fef4
 80017e4:	40010000 	.word	0x40010000
 80017e8:	2000ff9c 	.word	0x2000ff9c
 80017ec:	40026488 	.word	0x40026488
 80017f0:	2000ff3c 	.word	0x2000ff3c
 80017f4:	40026088 	.word	0x40026088
 80017f8:	08001181 	.word	0x08001181

080017fc <vgaStart>:

void vgaStart(){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
	HAL_DMA_RegisterCallback(&vgaCircularDMA, HAL_DMA_XFER_HALFCPLT_CB_ID, vgaHalfCallBack);
 8001800:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <vgaStart+0x3c>)
 8001802:	2101      	movs	r1, #1
 8001804:	480d      	ldr	r0, [pc, #52]	; (800183c <vgaStart+0x40>)
 8001806:	f000 fe0f 	bl	8002428 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(&vgaCircularDMA, HAL_DMA_XFER_CPLT_CB_ID, vgaFullCallBack);
 800180a:	4a0d      	ldr	r2, [pc, #52]	; (8001840 <vgaStart+0x44>)
 800180c:	2100      	movs	r1, #0
 800180e:	480b      	ldr	r0, [pc, #44]	; (800183c <vgaStart+0x40>)
 8001810:	f000 fe0a 	bl	8002428 <HAL_DMA_RegisterCallback>

	//HAL_DMA_Start_IT(memcopyDMA, SrcAddress, DstAddress, DataLength);

	//prepare the buffer with the first two lines
	prepareLine(lineBuff, &lineBuff[horiWhole]);
 8001814:	490b      	ldr	r1, [pc, #44]	; (8001844 <vgaStart+0x48>)
 8001816:	480c      	ldr	r0, [pc, #48]	; (8001848 <vgaStart+0x4c>)
 8001818:	f7ff fe6a 	bl	80014f0 <prepareLine>
	prepareLine(&lineBuff[horiWhole], lineBuff);
 800181c:	490a      	ldr	r1, [pc, #40]	; (8001848 <vgaStart+0x4c>)
 800181e:	4809      	ldr	r0, [pc, #36]	; (8001844 <vgaStart+0x48>)
 8001820:	f7ff fe66 	bl	80014f0 <prepareLine>
	//start the circular buffer dma transfer aka vga main loop
	HAL_DMA_Start_IT(&vgaCircularDMA, (uint32_t)&lineBuff[0], (uint32_t)&(GPIOC->ODR), horiWhole*2);
 8001824:	4908      	ldr	r1, [pc, #32]	; (8001848 <vgaStart+0x4c>)
 8001826:	f44f 7348 	mov.w	r3, #800	; 0x320
 800182a:	4a08      	ldr	r2, [pc, #32]	; (800184c <vgaStart+0x50>)
 800182c:	4803      	ldr	r0, [pc, #12]	; (800183c <vgaStart+0x40>)
 800182e:	f000 faca 	bl	8001dc6 <HAL_DMA_Start_IT>
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	08001601 	.word	0x08001601
 800183c:	2000ff3c 	.word	0x2000ff3c
 8001840:	08001621 	.word	0x08001621
 8001844:	20000364 	.word	0x20000364
 8001848:	200001d4 	.word	0x200001d4
 800184c:	40020814 	.word	0x40020814

08001850 <Reset_Handler>:
 8001850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001888 <LoopFillZerobss+0x12>
 8001854:	480d      	ldr	r0, [pc, #52]	; (800188c <LoopFillZerobss+0x16>)
 8001856:	490e      	ldr	r1, [pc, #56]	; (8001890 <LoopFillZerobss+0x1a>)
 8001858:	4a0e      	ldr	r2, [pc, #56]	; (8001894 <LoopFillZerobss+0x1e>)
 800185a:	2300      	movs	r3, #0
 800185c:	e002      	b.n	8001864 <LoopCopyDataInit>

0800185e <CopyDataInit>:
 800185e:	58d4      	ldr	r4, [r2, r3]
 8001860:	50c4      	str	r4, [r0, r3]
 8001862:	3304      	adds	r3, #4

08001864 <LoopCopyDataInit>:
 8001864:	18c4      	adds	r4, r0, r3
 8001866:	428c      	cmp	r4, r1
 8001868:	d3f9      	bcc.n	800185e <CopyDataInit>
 800186a:	4a0b      	ldr	r2, [pc, #44]	; (8001898 <LoopFillZerobss+0x22>)
 800186c:	4c0b      	ldr	r4, [pc, #44]	; (800189c <LoopFillZerobss+0x26>)
 800186e:	2300      	movs	r3, #0
 8001870:	e001      	b.n	8001876 <LoopFillZerobss>

08001872 <FillZerobss>:
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	3204      	adds	r2, #4

08001876 <LoopFillZerobss>:
 8001876:	42a2      	cmp	r2, r4
 8001878:	d3fb      	bcc.n	8001872 <FillZerobss>
 800187a:	f7ff fc15 	bl	80010a8 <SystemInit>
 800187e:	f002 fe45 	bl	800450c <__libc_init_array>
 8001882:	f7fe ff9d 	bl	80007c0 <main>
 8001886:	4770      	bx	lr
 8001888:	20018000 	.word	0x20018000
 800188c:	20000000 	.word	0x20000000
 8001890:	20000074 	.word	0x20000074
 8001894:	0800504c 	.word	0x0800504c
 8001898:	20000074 	.word	0x20000074
 800189c:	2001001c 	.word	0x2001001c

080018a0 <ADC_IRQHandler>:
 80018a0:	e7fe      	b.n	80018a0 <ADC_IRQHandler>
	...

080018a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018a8:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <HAL_Init+0x40>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0d      	ldr	r2, [pc, #52]	; (80018e4 <HAL_Init+0x40>)
 80018ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <HAL_Init+0x40>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <HAL_Init+0x40>)
 80018ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <HAL_Init+0x40>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a07      	ldr	r2, [pc, #28]	; (80018e4 <HAL_Init+0x40>)
 80018c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018cc:	2003      	movs	r0, #3
 80018ce:	f000 f94f 	bl	8001b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018d2:	2000      	movs	r0, #0
 80018d4:	f000 f808 	bl	80018e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d8:	f7ff fa76 	bl	8000dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023c00 	.word	0x40023c00

080018e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_InitTick+0x54>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_InitTick+0x58>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f967 	bl	8001bda <HAL_SYSTICK_Config>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e00e      	b.n	8001934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b0f      	cmp	r3, #15
 800191a:	d80a      	bhi.n	8001932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800191c:	2200      	movs	r2, #0
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f000 f92f 	bl	8001b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001928:	4a06      	ldr	r2, [pc, #24]	; (8001944 <HAL_InitTick+0x5c>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	e000      	b.n	8001934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000000 	.word	0x20000000
 8001940:	2000000c 	.word	0x2000000c
 8001944:	20000008 	.word	0x20000008

08001948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_IncTick+0x20>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_IncTick+0x24>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4a04      	ldr	r2, [pc, #16]	; (800196c <HAL_IncTick+0x24>)
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	2000000c 	.word	0x2000000c
 800196c:	20010008 	.word	0x20010008

08001970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return uwTick;
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <HAL_GetTick+0x14>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20010008 	.word	0x20010008

08001988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001990:	f7ff ffee 	bl	8001970 <HAL_GetTick>
 8001994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a0:	d005      	beq.n	80019ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <HAL_Delay+0x44>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4413      	add	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ae:	bf00      	nop
 80019b0:	f7ff ffde 	bl	8001970 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d8f7      	bhi.n	80019b0 <HAL_Delay+0x28>
  {
  }
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	2000000c 	.word	0x2000000c

080019d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019ec:	4013      	ands	r3, r2
 80019ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a02:	4a04      	ldr	r2, [pc, #16]	; (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	60d3      	str	r3, [r2, #12]
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <__NVIC_GetPriorityGrouping+0x18>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	f003 0307 	and.w	r3, r3, #7
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	db0b      	blt.n	8001a5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	f003 021f 	and.w	r2, r3, #31
 8001a4c:	4907      	ldr	r1, [pc, #28]	; (8001a6c <__NVIC_EnableIRQ+0x38>)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	095b      	lsrs	r3, r3, #5
 8001a54:	2001      	movs	r0, #1
 8001a56:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000e100 	.word	0xe000e100

08001a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	6039      	str	r1, [r7, #0]
 8001a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	db0a      	blt.n	8001a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	490c      	ldr	r1, [pc, #48]	; (8001abc <__NVIC_SetPriority+0x4c>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	0112      	lsls	r2, r2, #4
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	440b      	add	r3, r1
 8001a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a98:	e00a      	b.n	8001ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4908      	ldr	r1, [pc, #32]	; (8001ac0 <__NVIC_SetPriority+0x50>)
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	3b04      	subs	r3, #4
 8001aa8:	0112      	lsls	r2, r2, #4
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	440b      	add	r3, r1
 8001aae:	761a      	strb	r2, [r3, #24]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000e100 	.word	0xe000e100
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	; 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f1c3 0307 	rsb	r3, r3, #7
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	bf28      	it	cs
 8001ae2:	2304      	movcs	r3, #4
 8001ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d902      	bls.n	8001af4 <NVIC_EncodePriority+0x30>
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3b03      	subs	r3, #3
 8001af2:	e000      	b.n	8001af6 <NVIC_EncodePriority+0x32>
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	f04f 32ff 	mov.w	r2, #4294967295
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43da      	mvns	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	401a      	ands	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	43d9      	mvns	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	4313      	orrs	r3, r2
         );
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3724      	adds	r7, #36	; 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b3c:	d301      	bcc.n	8001b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e00f      	b.n	8001b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <SysTick_Config+0x40>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b4a:	210f      	movs	r1, #15
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b50:	f7ff ff8e 	bl	8001a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <SysTick_Config+0x40>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b5a:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <SysTick_Config+0x40>)
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	e000e010 	.word	0xe000e010

08001b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ff29 	bl	80019d0 <__NVIC_SetPriorityGrouping>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
 8001b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b98:	f7ff ff3e 	bl	8001a18 <__NVIC_GetPriorityGrouping>
 8001b9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	6978      	ldr	r0, [r7, #20]
 8001ba4:	f7ff ff8e 	bl	8001ac4 <NVIC_EncodePriority>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bae:	4611      	mov	r1, r2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff5d 	bl	8001a70 <__NVIC_SetPriority>
}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff31 	bl	8001a34 <__NVIC_EnableIRQ>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff ffa2 	bl	8001b2c <SysTick_Config>
 8001be8:	4603      	mov	r3, r0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c00:	f7ff feb6 	bl	8001970 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e099      	b.n	8001d44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2202      	movs	r2, #2
 8001c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0201 	bic.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c30:	e00f      	b.n	8001c52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c32:	f7ff fe9d 	bl	8001970 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b05      	cmp	r3, #5
 8001c3e:	d908      	bls.n	8001c52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2220      	movs	r2, #32
 8001c44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2203      	movs	r2, #3
 8001c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e078      	b.n	8001d44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1e8      	bne.n	8001c32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	4b38      	ldr	r3, [pc, #224]	; (8001d4c <HAL_DMA_Init+0x158>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d107      	bne.n	8001cbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f023 0307 	bic.w	r3, r3, #7
 8001cd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d117      	bne.n	8001d16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00e      	beq.n	8001d16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 fc5b 	bl	80025b4 <DMA_CheckFifoParam>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2240      	movs	r2, #64	; 0x40
 8001d08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d12:	2301      	movs	r3, #1
 8001d14:	e016      	b.n	8001d44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 fc12 	bl	8002548 <DMA_CalcBaseAndBitshift>
 8001d24:	4603      	mov	r3, r0
 8001d26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2c:	223f      	movs	r2, #63	; 0x3f
 8001d2e:	409a      	lsls	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	f010803f 	.word	0xf010803f

08001d50 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d101      	bne.n	8001d70 <HAL_DMA_Start+0x20>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	e026      	b.n	8001dbe <HAL_DMA_Start+0x6e>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d115      	bne.n	8001db0 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2202      	movs	r2, #2
 8001d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	68b9      	ldr	r1, [r7, #8]
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f000 fba7 	bl	80024ec <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f042 0201 	orr.w	r2, r2, #1
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	e005      	b.n	8001dbc <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001db8:	2302      	movs	r3, #2
 8001dba:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8001dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
 8001dd2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ddc:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_DMA_Start_IT+0x26>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e040      	b.n	8001e6e <HAL_DMA_Start_IT+0xa8>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d12f      	bne.n	8001e60 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2202      	movs	r2, #2
 8001e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	68b9      	ldr	r1, [r7, #8]
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 fb69 	bl	80024ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1e:	223f      	movs	r2, #63	; 0x3f
 8001e20:	409a      	lsls	r2, r3
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f042 0216 	orr.w	r2, r2, #22
 8001e34:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d007      	beq.n	8001e4e <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f042 0208 	orr.w	r2, r2, #8
 8001e4c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f042 0201 	orr.w	r2, r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	e005      	b.n	8001e6c <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b084      	sub	sp, #16
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e84:	f7ff fd74 	bl	8001970 <HAL_GetTick>
 8001e88:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d008      	beq.n	8001ea8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2280      	movs	r2, #128	; 0x80
 8001e9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e052      	b.n	8001f4e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0216 	bic.w	r2, r2, #22
 8001eb6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	695a      	ldr	r2, [r3, #20]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ec6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d103      	bne.n	8001ed8 <HAL_DMA_Abort+0x62>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d007      	beq.n	8001ee8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0208 	bic.w	r2, r2, #8
 8001ee6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0201 	bic.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ef8:	e013      	b.n	8001f22 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001efa:	f7ff fd39 	bl	8001970 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b05      	cmp	r3, #5
 8001f06:	d90c      	bls.n	8001f22 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2203      	movs	r2, #3
 8001f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e015      	b.n	8001f4e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1e4      	bne.n	8001efa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f34:	223f      	movs	r2, #63	; 0x3f
 8001f36:	409a      	lsls	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b08a      	sub	sp, #40	; 0x28
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	60f8      	str	r0, [r7, #12]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	607a      	str	r2, [r7, #4]
 8001f62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 8001f64:	2300      	movs	r3, #0
 8001f66:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 8001f68:	f7ff fd02 	bl	8001970 <HAL_GetTick>
 8001f6c:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d008      	beq.n	8001f8c <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2280      	movs	r2, #128	; 0x80
 8001f7e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0bf      	b.n	800210c <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d005      	beq.n	8001fa6 <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fa0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e0b2      	b.n	800210c <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8001fa6:	7afb      	ldrb	r3, [r7, #11]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d106      	bne.n	8001fba <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb8:	e005      	b.n	8001fc6 <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fbe:	2210      	movs	r2, #16
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8001fd2:	e05a      	b.n	800208a <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fda:	d017      	beq.n	800200c <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d007      	beq.n	8001ff2 <HAL_DMA_PollForTransfer+0x9c>
 8001fe2:	f7ff fcc5 	bl	8001970 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d20c      	bcs.n	800200c <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2220      	movs	r2, #32
 8001ff6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e07f      	b.n	800210c <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002016:	2208      	movs	r2, #8
 8002018:	409a      	lsls	r2, r3
 800201a:	6a3b      	ldr	r3, [r7, #32]
 800201c:	4013      	ands	r3, r2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00b      	beq.n	800203a <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002026:	f043 0201 	orr.w	r2, r3, #1
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002032:	2208      	movs	r2, #8
 8002034:	409a      	lsls	r2, r3
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203e:	2201      	movs	r2, #1
 8002040:	409a      	lsls	r2, r3
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	4013      	ands	r3, r2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00b      	beq.n	8002062 <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204e:	f043 0202 	orr.w	r2, r3, #2
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205a:	2201      	movs	r2, #1
 800205c:	409a      	lsls	r2, r3
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002066:	2204      	movs	r2, #4
 8002068:	409a      	lsls	r2, r3
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	4013      	ands	r3, r2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00b      	beq.n	800208a <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002076:	f043 0204 	orr.w	r2, r3, #4
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002082:	2204      	movs	r2, #4
 8002084:	409a      	lsls	r2, r3
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 800208a:	6a3a      	ldr	r2, [r7, #32]
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d105      	bne.n	80020a0 <HAL_DMA_PollForTransfer+0x14a>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d099      	beq.n	8001fd4 <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d018      	beq.n	80020da <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d012      	beq.n	80020da <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f7ff fede 	bl	8001e76 <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020be:	2230      	movs	r2, #48	; 0x30
 80020c0:	409a      	lsls	r2, r3
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	609a      	str	r2, [r3, #8]
    
      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e018      	b.n	800210c <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80020da:	7afb      	ldrb	r3, [r7, #11]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d10e      	bne.n	80020fe <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e4:	2230      	movs	r2, #48	; 0x30
 80020e6:	409a      	lsls	r2, r3
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	609a      	str	r2, [r3, #8]
    
    hdma->State = HAL_DMA_STATE_READY;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80020fc:	e005      	b.n	800210a <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002102:	2210      	movs	r2, #16
 8002104:	409a      	lsls	r2, r3
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 800210a:	7ffb      	ldrb	r3, [r7, #31]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3728      	adds	r7, #40	; 0x28
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002120:	4b8e      	ldr	r3, [pc, #568]	; (800235c <HAL_DMA_IRQHandler+0x248>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a8e      	ldr	r2, [pc, #568]	; (8002360 <HAL_DMA_IRQHandler+0x24c>)
 8002126:	fba2 2303 	umull	r2, r3, r2, r3
 800212a:	0a9b      	lsrs	r3, r3, #10
 800212c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002132:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213e:	2208      	movs	r2, #8
 8002140:	409a      	lsls	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4013      	ands	r3, r2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d01a      	beq.n	8002180 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	d013      	beq.n	8002180 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0204 	bic.w	r2, r2, #4
 8002166:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216c:	2208      	movs	r2, #8
 800216e:	409a      	lsls	r2, r3
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002178:	f043 0201 	orr.w	r2, r3, #1
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002184:	2201      	movs	r2, #1
 8002186:	409a      	lsls	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4013      	ands	r3, r2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d012      	beq.n	80021b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00b      	beq.n	80021b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a2:	2201      	movs	r2, #1
 80021a4:	409a      	lsls	r2, r3
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ae:	f043 0202 	orr.w	r2, r3, #2
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ba:	2204      	movs	r2, #4
 80021bc:	409a      	lsls	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d012      	beq.n	80021ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00b      	beq.n	80021ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d8:	2204      	movs	r2, #4
 80021da:	409a      	lsls	r2, r3
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e4:	f043 0204 	orr.w	r2, r3, #4
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f0:	2210      	movs	r2, #16
 80021f2:	409a      	lsls	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4013      	ands	r3, r2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d043      	beq.n	8002284 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d03c      	beq.n	8002284 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220e:	2210      	movs	r2, #16
 8002210:	409a      	lsls	r2, r3
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d018      	beq.n	8002256 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d108      	bne.n	8002244 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	2b00      	cmp	r3, #0
 8002238:	d024      	beq.n	8002284 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	4798      	blx	r3
 8002242:	e01f      	b.n	8002284 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002248:	2b00      	cmp	r3, #0
 800224a:	d01b      	beq.n	8002284 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	4798      	blx	r3
 8002254:	e016      	b.n	8002284 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002260:	2b00      	cmp	r3, #0
 8002262:	d107      	bne.n	8002274 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0208 	bic.w	r2, r2, #8
 8002272:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002288:	2220      	movs	r2, #32
 800228a:	409a      	lsls	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4013      	ands	r3, r2
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 808f 	beq.w	80023b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0310 	and.w	r3, r3, #16
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 8087 	beq.w	80023b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022aa:	2220      	movs	r2, #32
 80022ac:	409a      	lsls	r2, r3
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b05      	cmp	r3, #5
 80022bc:	d136      	bne.n	800232c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0216 	bic.w	r2, r2, #22
 80022cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	695a      	ldr	r2, [r3, #20]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d103      	bne.n	80022ee <HAL_DMA_IRQHandler+0x1da>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d007      	beq.n	80022fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0208 	bic.w	r2, r2, #8
 80022fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002302:	223f      	movs	r2, #63	; 0x3f
 8002304:	409a      	lsls	r2, r3
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800231e:	2b00      	cmp	r3, #0
 8002320:	d07e      	beq.n	8002420 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	4798      	blx	r3
        }
        return;
 800232a:	e079      	b.n	8002420 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d01d      	beq.n	8002376 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10d      	bne.n	8002364 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234c:	2b00      	cmp	r3, #0
 800234e:	d031      	beq.n	80023b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	4798      	blx	r3
 8002358:	e02c      	b.n	80023b4 <HAL_DMA_IRQHandler+0x2a0>
 800235a:	bf00      	nop
 800235c:	20000000 	.word	0x20000000
 8002360:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002368:	2b00      	cmp	r3, #0
 800236a:	d023      	beq.n	80023b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	4798      	blx	r3
 8002374:	e01e      	b.n	80023b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10f      	bne.n	80023a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0210 	bic.w	r2, r2, #16
 8002392:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d032      	beq.n	8002422 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d022      	beq.n	800240e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2205      	movs	r2, #5
 80023cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0201 	bic.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	3301      	adds	r3, #1
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d307      	bcc.n	80023fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f2      	bne.n	80023e0 <HAL_DMA_IRQHandler+0x2cc>
 80023fa:	e000      	b.n	80023fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002412:	2b00      	cmp	r3, #0
 8002414:	d005      	beq.n	8002422 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	4798      	blx	r3
 800241e:	e000      	b.n	8002422 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002420:	bf00      	nop
    }
  }
}
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	460b      	mov	r3, r1
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <HAL_DMA_RegisterCallback+0x20>
 8002444:	2302      	movs	r3, #2
 8002446:	e03d      	b.n	80024c4 <HAL_DMA_RegisterCallback+0x9c>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b01      	cmp	r3, #1
 800245a:	d12c      	bne.n	80024b6 <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 800245c:	7afb      	ldrb	r3, [r7, #11]
 800245e:	2b05      	cmp	r3, #5
 8002460:	d826      	bhi.n	80024b0 <HAL_DMA_RegisterCallback+0x88>
 8002462:	a201      	add	r2, pc, #4	; (adr r2, 8002468 <HAL_DMA_RegisterCallback+0x40>)
 8002464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002468:	08002481 	.word	0x08002481
 800246c:	08002489 	.word	0x08002489
 8002470:	08002491 	.word	0x08002491
 8002474:	08002499 	.word	0x08002499
 8002478:	080024a1 	.word	0x080024a1
 800247c:	080024a9 	.word	0x080024a9
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8002486:	e018      	b.n	80024ba <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800248e:	e014      	b.n	80024ba <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8002496:	e010      	b.n	80024ba <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 800249e:	e00c      	b.n	80024ba <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80024a6:	e008      	b.n	80024ba <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80024ae:	e004      	b.n	80024ba <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	75fb      	strb	r3, [r7, #23]
      break;
 80024b4:	e001      	b.n	80024ba <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 80024c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	371c      	adds	r7, #28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024de:	b2db      	uxtb	r3, r3
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002508:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2b40      	cmp	r3, #64	; 0x40
 8002518:	d108      	bne.n	800252c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800252a:	e007      	b.n	800253c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	60da      	str	r2, [r3, #12]
}
 800253c:	bf00      	nop
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	b2db      	uxtb	r3, r3
 8002556:	3b10      	subs	r3, #16
 8002558:	4a14      	ldr	r2, [pc, #80]	; (80025ac <DMA_CalcBaseAndBitshift+0x64>)
 800255a:	fba2 2303 	umull	r2, r3, r2, r3
 800255e:	091b      	lsrs	r3, r3, #4
 8002560:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002562:	4a13      	ldr	r2, [pc, #76]	; (80025b0 <DMA_CalcBaseAndBitshift+0x68>)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4413      	add	r3, r2
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2b03      	cmp	r3, #3
 8002574:	d909      	bls.n	800258a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800257e:	f023 0303 	bic.w	r3, r3, #3
 8002582:	1d1a      	adds	r2, r3, #4
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	659a      	str	r2, [r3, #88]	; 0x58
 8002588:	e007      	b.n	800259a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002592:	f023 0303 	bic.w	r3, r3, #3
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	aaaaaaab 	.word	0xaaaaaaab
 80025b0:	08005000 	.word	0x08005000

080025b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d11f      	bne.n	800260e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d856      	bhi.n	8002682 <DMA_CheckFifoParam+0xce>
 80025d4:	a201      	add	r2, pc, #4	; (adr r2, 80025dc <DMA_CheckFifoParam+0x28>)
 80025d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025da:	bf00      	nop
 80025dc:	080025ed 	.word	0x080025ed
 80025e0:	080025ff 	.word	0x080025ff
 80025e4:	080025ed 	.word	0x080025ed
 80025e8:	08002683 	.word	0x08002683
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d046      	beq.n	8002686 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025fc:	e043      	b.n	8002686 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002602:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002606:	d140      	bne.n	800268a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800260c:	e03d      	b.n	800268a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002616:	d121      	bne.n	800265c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2b03      	cmp	r3, #3
 800261c:	d837      	bhi.n	800268e <DMA_CheckFifoParam+0xda>
 800261e:	a201      	add	r2, pc, #4	; (adr r2, 8002624 <DMA_CheckFifoParam+0x70>)
 8002620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002624:	08002635 	.word	0x08002635
 8002628:	0800263b 	.word	0x0800263b
 800262c:	08002635 	.word	0x08002635
 8002630:	0800264d 	.word	0x0800264d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
      break;
 8002638:	e030      	b.n	800269c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d025      	beq.n	8002692 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800264a:	e022      	b.n	8002692 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002650:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002654:	d11f      	bne.n	8002696 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800265a:	e01c      	b.n	8002696 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d903      	bls.n	800266a <DMA_CheckFifoParam+0xb6>
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b03      	cmp	r3, #3
 8002666:	d003      	beq.n	8002670 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002668:	e018      	b.n	800269c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	73fb      	strb	r3, [r7, #15]
      break;
 800266e:	e015      	b.n	800269c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002674:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00e      	beq.n	800269a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
      break;
 8002680:	e00b      	b.n	800269a <DMA_CheckFifoParam+0xe6>
      break;
 8002682:	bf00      	nop
 8002684:	e00a      	b.n	800269c <DMA_CheckFifoParam+0xe8>
      break;
 8002686:	bf00      	nop
 8002688:	e008      	b.n	800269c <DMA_CheckFifoParam+0xe8>
      break;
 800268a:	bf00      	nop
 800268c:	e006      	b.n	800269c <DMA_CheckFifoParam+0xe8>
      break;
 800268e:	bf00      	nop
 8002690:	e004      	b.n	800269c <DMA_CheckFifoParam+0xe8>
      break;
 8002692:	bf00      	nop
 8002694:	e002      	b.n	800269c <DMA_CheckFifoParam+0xe8>
      break;   
 8002696:	bf00      	nop
 8002698:	e000      	b.n	800269c <DMA_CheckFifoParam+0xe8>
      break;
 800269a:	bf00      	nop
    }
  } 
  
  return status; 
 800269c:	7bfb      	ldrb	r3, [r7, #15]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop

080026ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b089      	sub	sp, #36	; 0x24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026be:	2300      	movs	r3, #0
 80026c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
 80026c6:	e159      	b.n	800297c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026c8:	2201      	movs	r2, #1
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	4013      	ands	r3, r2
 80026da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	f040 8148 	bne.w	8002976 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d005      	beq.n	80026fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d130      	bne.n	8002760 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	2203      	movs	r2, #3
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002734:	2201      	movs	r2, #1
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	091b      	lsrs	r3, r3, #4
 800274a:	f003 0201 	and.w	r2, r3, #1
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	2b03      	cmp	r3, #3
 800276a:	d017      	beq.n	800279c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	2203      	movs	r2, #3
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d123      	bne.n	80027f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	08da      	lsrs	r2, r3, #3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3208      	adds	r2, #8
 80027b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	220f      	movs	r2, #15
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	08da      	lsrs	r2, r3, #3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3208      	adds	r2, #8
 80027ea:	69b9      	ldr	r1, [r7, #24]
 80027ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	2203      	movs	r2, #3
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0203 	and.w	r2, r3, #3
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80a2 	beq.w	8002976 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	4b57      	ldr	r3, [pc, #348]	; (8002994 <HAL_GPIO_Init+0x2e8>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	4a56      	ldr	r2, [pc, #344]	; (8002994 <HAL_GPIO_Init+0x2e8>)
 800283c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002840:	6453      	str	r3, [r2, #68]	; 0x44
 8002842:	4b54      	ldr	r3, [pc, #336]	; (8002994 <HAL_GPIO_Init+0x2e8>)
 8002844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800284e:	4a52      	ldr	r2, [pc, #328]	; (8002998 <HAL_GPIO_Init+0x2ec>)
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	089b      	lsrs	r3, r3, #2
 8002854:	3302      	adds	r3, #2
 8002856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	220f      	movs	r2, #15
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4013      	ands	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a49      	ldr	r2, [pc, #292]	; (800299c <HAL_GPIO_Init+0x2f0>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d019      	beq.n	80028ae <HAL_GPIO_Init+0x202>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a48      	ldr	r2, [pc, #288]	; (80029a0 <HAL_GPIO_Init+0x2f4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d013      	beq.n	80028aa <HAL_GPIO_Init+0x1fe>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a47      	ldr	r2, [pc, #284]	; (80029a4 <HAL_GPIO_Init+0x2f8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d00d      	beq.n	80028a6 <HAL_GPIO_Init+0x1fa>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a46      	ldr	r2, [pc, #280]	; (80029a8 <HAL_GPIO_Init+0x2fc>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d007      	beq.n	80028a2 <HAL_GPIO_Init+0x1f6>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a45      	ldr	r2, [pc, #276]	; (80029ac <HAL_GPIO_Init+0x300>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d101      	bne.n	800289e <HAL_GPIO_Init+0x1f2>
 800289a:	2304      	movs	r3, #4
 800289c:	e008      	b.n	80028b0 <HAL_GPIO_Init+0x204>
 800289e:	2307      	movs	r3, #7
 80028a0:	e006      	b.n	80028b0 <HAL_GPIO_Init+0x204>
 80028a2:	2303      	movs	r3, #3
 80028a4:	e004      	b.n	80028b0 <HAL_GPIO_Init+0x204>
 80028a6:	2302      	movs	r3, #2
 80028a8:	e002      	b.n	80028b0 <HAL_GPIO_Init+0x204>
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <HAL_GPIO_Init+0x204>
 80028ae:	2300      	movs	r3, #0
 80028b0:	69fa      	ldr	r2, [r7, #28]
 80028b2:	f002 0203 	and.w	r2, r2, #3
 80028b6:	0092      	lsls	r2, r2, #2
 80028b8:	4093      	lsls	r3, r2
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4313      	orrs	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028c0:	4935      	ldr	r1, [pc, #212]	; (8002998 <HAL_GPIO_Init+0x2ec>)
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	089b      	lsrs	r3, r3, #2
 80028c6:	3302      	adds	r3, #2
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ce:	4b38      	ldr	r3, [pc, #224]	; (80029b0 <HAL_GPIO_Init+0x304>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	43db      	mvns	r3, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4013      	ands	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028f2:	4a2f      	ldr	r2, [pc, #188]	; (80029b0 <HAL_GPIO_Init+0x304>)
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028f8:	4b2d      	ldr	r3, [pc, #180]	; (80029b0 <HAL_GPIO_Init+0x304>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800291c:	4a24      	ldr	r2, [pc, #144]	; (80029b0 <HAL_GPIO_Init+0x304>)
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002922:	4b23      	ldr	r3, [pc, #140]	; (80029b0 <HAL_GPIO_Init+0x304>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	43db      	mvns	r3, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4013      	ands	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002946:	4a1a      	ldr	r2, [pc, #104]	; (80029b0 <HAL_GPIO_Init+0x304>)
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800294c:	4b18      	ldr	r3, [pc, #96]	; (80029b0 <HAL_GPIO_Init+0x304>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d003      	beq.n	8002970 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002970:	4a0f      	ldr	r2, [pc, #60]	; (80029b0 <HAL_GPIO_Init+0x304>)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	3301      	adds	r3, #1
 800297a:	61fb      	str	r3, [r7, #28]
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	2b0f      	cmp	r3, #15
 8002980:	f67f aea2 	bls.w	80026c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002984:	bf00      	nop
 8002986:	bf00      	nop
 8002988:	3724      	adds	r7, #36	; 0x24
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40023800 	.word	0x40023800
 8002998:	40013800 	.word	0x40013800
 800299c:	40020000 	.word	0x40020000
 80029a0:	40020400 	.word	0x40020400
 80029a4:	40020800 	.word	0x40020800
 80029a8:	40020c00 	.word	0x40020c00
 80029ac:	40021000 	.word	0x40021000
 80029b0:	40013c00 	.word	0x40013c00

080029b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	807b      	strh	r3, [r7, #2]
 80029c0:	4613      	mov	r3, r2
 80029c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029c4:	787b      	ldrb	r3, [r7, #1]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ca:	887a      	ldrh	r2, [r7, #2]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029d0:	e003      	b.n	80029da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029d2:	887b      	ldrh	r3, [r7, #2]
 80029d4:	041a      	lsls	r2, r3, #16
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	619a      	str	r2, [r3, #24]
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e267      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d075      	beq.n	8002af2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a06:	4b88      	ldr	r3, [pc, #544]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d00c      	beq.n	8002a2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a12:	4b85      	ldr	r3, [pc, #532]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a1a:	2b08      	cmp	r3, #8
 8002a1c:	d112      	bne.n	8002a44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a1e:	4b82      	ldr	r3, [pc, #520]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a2a:	d10b      	bne.n	8002a44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a2c:	4b7e      	ldr	r3, [pc, #504]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d05b      	beq.n	8002af0 <HAL_RCC_OscConfig+0x108>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d157      	bne.n	8002af0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e242      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a4c:	d106      	bne.n	8002a5c <HAL_RCC_OscConfig+0x74>
 8002a4e:	4b76      	ldr	r3, [pc, #472]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a75      	ldr	r2, [pc, #468]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	e01d      	b.n	8002a98 <HAL_RCC_OscConfig+0xb0>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a64:	d10c      	bne.n	8002a80 <HAL_RCC_OscConfig+0x98>
 8002a66:	4b70      	ldr	r3, [pc, #448]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a6f      	ldr	r2, [pc, #444]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	4b6d      	ldr	r3, [pc, #436]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a6c      	ldr	r2, [pc, #432]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	e00b      	b.n	8002a98 <HAL_RCC_OscConfig+0xb0>
 8002a80:	4b69      	ldr	r3, [pc, #420]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a68      	ldr	r2, [pc, #416]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	4b66      	ldr	r3, [pc, #408]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a65      	ldr	r2, [pc, #404]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d013      	beq.n	8002ac8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa0:	f7fe ff66 	bl	8001970 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aa8:	f7fe ff62 	bl	8001970 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b64      	cmp	r3, #100	; 0x64
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e207      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aba:	4b5b      	ldr	r3, [pc, #364]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0xc0>
 8002ac6:	e014      	b.n	8002af2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac8:	f7fe ff52 	bl	8001970 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ad0:	f7fe ff4e 	bl	8001970 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b64      	cmp	r3, #100	; 0x64
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e1f3      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae2:	4b51      	ldr	r3, [pc, #324]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0xe8>
 8002aee:	e000      	b.n	8002af2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d063      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002afe:	4b4a      	ldr	r3, [pc, #296]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 030c 	and.w	r3, r3, #12
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00b      	beq.n	8002b22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b0a:	4b47      	ldr	r3, [pc, #284]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d11c      	bne.n	8002b50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b16:	4b44      	ldr	r3, [pc, #272]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d116      	bne.n	8002b50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b22:	4b41      	ldr	r3, [pc, #260]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <HAL_RCC_OscConfig+0x152>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d001      	beq.n	8002b3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e1c7      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3a:	4b3b      	ldr	r3, [pc, #236]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	4937      	ldr	r1, [pc, #220]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b4e:	e03a      	b.n	8002bc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d020      	beq.n	8002b9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b58:	4b34      	ldr	r3, [pc, #208]	; (8002c2c <HAL_RCC_OscConfig+0x244>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5e:	f7fe ff07 	bl	8001970 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b66:	f7fe ff03 	bl	8001970 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e1a8      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b78:	4b2b      	ldr	r3, [pc, #172]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0f0      	beq.n	8002b66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b84:	4b28      	ldr	r3, [pc, #160]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4925      	ldr	r1, [pc, #148]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	600b      	str	r3, [r1, #0]
 8002b98:	e015      	b.n	8002bc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b9a:	4b24      	ldr	r3, [pc, #144]	; (8002c2c <HAL_RCC_OscConfig+0x244>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7fe fee6 	bl	8001970 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ba8:	f7fe fee2 	bl	8001970 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e187      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bba:	4b1b      	ldr	r3, [pc, #108]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d036      	beq.n	8002c40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d016      	beq.n	8002c08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bda:	4b15      	ldr	r3, [pc, #84]	; (8002c30 <HAL_RCC_OscConfig+0x248>)
 8002bdc:	2201      	movs	r2, #1
 8002bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be0:	f7fe fec6 	bl	8001970 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002be8:	f7fe fec2 	bl	8001970 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e167      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfa:	4b0b      	ldr	r3, [pc, #44]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0x200>
 8002c06:	e01b      	b.n	8002c40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c08:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <HAL_RCC_OscConfig+0x248>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0e:	f7fe feaf 	bl	8001970 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c14:	e00e      	b.n	8002c34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c16:	f7fe feab 	bl	8001970 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d907      	bls.n	8002c34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e150      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	42470000 	.word	0x42470000
 8002c30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c34:	4b88      	ldr	r3, [pc, #544]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1ea      	bne.n	8002c16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 8097 	beq.w	8002d7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c52:	4b81      	ldr	r3, [pc, #516]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10f      	bne.n	8002c7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	4b7d      	ldr	r3, [pc, #500]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	4a7c      	ldr	r2, [pc, #496]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6e:	4b7a      	ldr	r3, [pc, #488]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7e:	4b77      	ldr	r3, [pc, #476]	; (8002e5c <HAL_RCC_OscConfig+0x474>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d118      	bne.n	8002cbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c8a:	4b74      	ldr	r3, [pc, #464]	; (8002e5c <HAL_RCC_OscConfig+0x474>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a73      	ldr	r2, [pc, #460]	; (8002e5c <HAL_RCC_OscConfig+0x474>)
 8002c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c96:	f7fe fe6b 	bl	8001970 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c9e:	f7fe fe67 	bl	8001970 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e10c      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb0:	4b6a      	ldr	r3, [pc, #424]	; (8002e5c <HAL_RCC_OscConfig+0x474>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0f0      	beq.n	8002c9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d106      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x2ea>
 8002cc4:	4b64      	ldr	r3, [pc, #400]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc8:	4a63      	ldr	r2, [pc, #396]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002cca:	f043 0301 	orr.w	r3, r3, #1
 8002cce:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd0:	e01c      	b.n	8002d0c <HAL_RCC_OscConfig+0x324>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2b05      	cmp	r3, #5
 8002cd8:	d10c      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x30c>
 8002cda:	4b5f      	ldr	r3, [pc, #380]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cde:	4a5e      	ldr	r2, [pc, #376]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002ce0:	f043 0304 	orr.w	r3, r3, #4
 8002ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce6:	4b5c      	ldr	r3, [pc, #368]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cea:	4a5b      	ldr	r2, [pc, #364]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf2:	e00b      	b.n	8002d0c <HAL_RCC_OscConfig+0x324>
 8002cf4:	4b58      	ldr	r3, [pc, #352]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf8:	4a57      	ldr	r2, [pc, #348]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002cfa:	f023 0301 	bic.w	r3, r3, #1
 8002cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002d00:	4b55      	ldr	r3, [pc, #340]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d04:	4a54      	ldr	r2, [pc, #336]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002d06:	f023 0304 	bic.w	r3, r3, #4
 8002d0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d015      	beq.n	8002d40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d14:	f7fe fe2c 	bl	8001970 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1a:	e00a      	b.n	8002d32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d1c:	f7fe fe28 	bl	8001970 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e0cb      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d32:	4b49      	ldr	r3, [pc, #292]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0ee      	beq.n	8002d1c <HAL_RCC_OscConfig+0x334>
 8002d3e:	e014      	b.n	8002d6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d40:	f7fe fe16 	bl	8001970 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d46:	e00a      	b.n	8002d5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d48:	f7fe fe12 	bl	8001970 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e0b5      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d5e:	4b3e      	ldr	r3, [pc, #248]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1ee      	bne.n	8002d48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d6a:	7dfb      	ldrb	r3, [r7, #23]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d105      	bne.n	8002d7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d70:	4b39      	ldr	r3, [pc, #228]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	4a38      	ldr	r2, [pc, #224]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 80a1 	beq.w	8002ec8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d86:	4b34      	ldr	r3, [pc, #208]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d05c      	beq.n	8002e4c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d141      	bne.n	8002e1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d9a:	4b31      	ldr	r3, [pc, #196]	; (8002e60 <HAL_RCC_OscConfig+0x478>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da0:	f7fe fde6 	bl	8001970 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da8:	f7fe fde2 	bl	8001970 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e087      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dba:	4b27      	ldr	r3, [pc, #156]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69da      	ldr	r2, [r3, #28]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	019b      	lsls	r3, r3, #6
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ddc:	085b      	lsrs	r3, r3, #1
 8002dde:	3b01      	subs	r3, #1
 8002de0:	041b      	lsls	r3, r3, #16
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	061b      	lsls	r3, r3, #24
 8002dea:	491b      	ldr	r1, [pc, #108]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df0:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <HAL_RCC_OscConfig+0x478>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df6:	f7fe fdbb 	bl	8001970 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dfe:	f7fe fdb7 	bl	8001970 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e05c      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e10:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCC_OscConfig+0x416>
 8002e1c:	e054      	b.n	8002ec8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1e:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <HAL_RCC_OscConfig+0x478>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7fe fda4 	bl	8001970 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e2c:	f7fe fda0 	bl	8001970 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e045      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3e:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x444>
 8002e4a:	e03d      	b.n	8002ec8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d107      	bne.n	8002e64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e038      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	40007000 	.word	0x40007000
 8002e60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e64:	4b1b      	ldr	r3, [pc, #108]	; (8002ed4 <HAL_RCC_OscConfig+0x4ec>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d028      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d121      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d11a      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e94:	4013      	ands	r3, r2
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d111      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eaa:	085b      	lsrs	r3, r3, #1
 8002eac:	3b01      	subs	r3, #1
 8002eae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d107      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d001      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e000      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40023800 	.word	0x40023800

08002ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0cc      	b.n	8003086 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002eec:	4b68      	ldr	r3, [pc, #416]	; (8003090 <HAL_RCC_ClockConfig+0x1b8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d90c      	bls.n	8002f14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efa:	4b65      	ldr	r3, [pc, #404]	; (8003090 <HAL_RCC_ClockConfig+0x1b8>)
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f02:	4b63      	ldr	r3, [pc, #396]	; (8003090 <HAL_RCC_ClockConfig+0x1b8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e0b8      	b.n	8003086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d020      	beq.n	8002f62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f2c:	4b59      	ldr	r3, [pc, #356]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	4a58      	ldr	r2, [pc, #352]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f44:	4b53      	ldr	r3, [pc, #332]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	4a52      	ldr	r2, [pc, #328]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f50:	4b50      	ldr	r3, [pc, #320]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	494d      	ldr	r1, [pc, #308]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d044      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d107      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f76:	4b47      	ldr	r3, [pc, #284]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d119      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e07f      	b.n	8003086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d003      	beq.n	8002f96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	d107      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f96:	4b3f      	ldr	r3, [pc, #252]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d109      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e06f      	b.n	8003086 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa6:	4b3b      	ldr	r3, [pc, #236]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e067      	b.n	8003086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fb6:	4b37      	ldr	r3, [pc, #220]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f023 0203 	bic.w	r2, r3, #3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	4934      	ldr	r1, [pc, #208]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc8:	f7fe fcd2 	bl	8001970 <HAL_GetTick>
 8002fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fce:	e00a      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd0:	f7fe fcce 	bl	8001970 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e04f      	b.n	8003086 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe6:	4b2b      	ldr	r3, [pc, #172]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 020c 	and.w	r2, r3, #12
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d1eb      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff8:	4b25      	ldr	r3, [pc, #148]	; (8003090 <HAL_RCC_ClockConfig+0x1b8>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	429a      	cmp	r2, r3
 8003004:	d20c      	bcs.n	8003020 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003006:	4b22      	ldr	r3, [pc, #136]	; (8003090 <HAL_RCC_ClockConfig+0x1b8>)
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800300e:	4b20      	ldr	r3, [pc, #128]	; (8003090 <HAL_RCC_ClockConfig+0x1b8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d001      	beq.n	8003020 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e032      	b.n	8003086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800302c:	4b19      	ldr	r3, [pc, #100]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	4916      	ldr	r1, [pc, #88]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	4313      	orrs	r3, r2
 800303c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	d009      	beq.n	800305e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800304a:	4b12      	ldr	r3, [pc, #72]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	490e      	ldr	r1, [pc, #56]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	4313      	orrs	r3, r2
 800305c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800305e:	f000 f821 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
 8003062:	4602      	mov	r2, r0
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	091b      	lsrs	r3, r3, #4
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	490a      	ldr	r1, [pc, #40]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8003070:	5ccb      	ldrb	r3, [r1, r3]
 8003072:	fa22 f303 	lsr.w	r3, r2, r3
 8003076:	4a09      	ldr	r2, [pc, #36]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8003078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800307a:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <HAL_RCC_ClockConfig+0x1c8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f7fe fc32 	bl	80018e8 <HAL_InitTick>

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40023c00 	.word	0x40023c00
 8003094:	40023800 	.word	0x40023800
 8003098:	08004fe8 	.word	0x08004fe8
 800309c:	20000000 	.word	0x20000000
 80030a0:	20000008 	.word	0x20000008

080030a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030a8:	b094      	sub	sp, #80	; 0x50
 80030aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	647b      	str	r3, [r7, #68]	; 0x44
 80030b0:	2300      	movs	r3, #0
 80030b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030b4:	2300      	movs	r3, #0
 80030b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030bc:	4b79      	ldr	r3, [pc, #484]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 030c 	and.w	r3, r3, #12
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	d00d      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0x40>
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	f200 80e1 	bhi.w	8003290 <HAL_RCC_GetSysClockFreq+0x1ec>
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_RCC_GetSysClockFreq+0x34>
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d003      	beq.n	80030de <HAL_RCC_GetSysClockFreq+0x3a>
 80030d6:	e0db      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030d8:	4b73      	ldr	r3, [pc, #460]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80030da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80030dc:	e0db      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030de:	4b73      	ldr	r3, [pc, #460]	; (80032ac <HAL_RCC_GetSysClockFreq+0x208>)
 80030e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030e2:	e0d8      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030e4:	4b6f      	ldr	r3, [pc, #444]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030ee:	4b6d      	ldr	r3, [pc, #436]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d063      	beq.n	80031c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030fa:	4b6a      	ldr	r3, [pc, #424]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	099b      	lsrs	r3, r3, #6
 8003100:	2200      	movs	r2, #0
 8003102:	63bb      	str	r3, [r7, #56]	; 0x38
 8003104:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800310c:	633b      	str	r3, [r7, #48]	; 0x30
 800310e:	2300      	movs	r3, #0
 8003110:	637b      	str	r3, [r7, #52]	; 0x34
 8003112:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003116:	4622      	mov	r2, r4
 8003118:	462b      	mov	r3, r5
 800311a:	f04f 0000 	mov.w	r0, #0
 800311e:	f04f 0100 	mov.w	r1, #0
 8003122:	0159      	lsls	r1, r3, #5
 8003124:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003128:	0150      	lsls	r0, r2, #5
 800312a:	4602      	mov	r2, r0
 800312c:	460b      	mov	r3, r1
 800312e:	4621      	mov	r1, r4
 8003130:	1a51      	subs	r1, r2, r1
 8003132:	6139      	str	r1, [r7, #16]
 8003134:	4629      	mov	r1, r5
 8003136:	eb63 0301 	sbc.w	r3, r3, r1
 800313a:	617b      	str	r3, [r7, #20]
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003148:	4659      	mov	r1, fp
 800314a:	018b      	lsls	r3, r1, #6
 800314c:	4651      	mov	r1, sl
 800314e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003152:	4651      	mov	r1, sl
 8003154:	018a      	lsls	r2, r1, #6
 8003156:	4651      	mov	r1, sl
 8003158:	ebb2 0801 	subs.w	r8, r2, r1
 800315c:	4659      	mov	r1, fp
 800315e:	eb63 0901 	sbc.w	r9, r3, r1
 8003162:	f04f 0200 	mov.w	r2, #0
 8003166:	f04f 0300 	mov.w	r3, #0
 800316a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800316e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003172:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003176:	4690      	mov	r8, r2
 8003178:	4699      	mov	r9, r3
 800317a:	4623      	mov	r3, r4
 800317c:	eb18 0303 	adds.w	r3, r8, r3
 8003180:	60bb      	str	r3, [r7, #8]
 8003182:	462b      	mov	r3, r5
 8003184:	eb49 0303 	adc.w	r3, r9, r3
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	f04f 0300 	mov.w	r3, #0
 8003192:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003196:	4629      	mov	r1, r5
 8003198:	024b      	lsls	r3, r1, #9
 800319a:	4621      	mov	r1, r4
 800319c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031a0:	4621      	mov	r1, r4
 80031a2:	024a      	lsls	r2, r1, #9
 80031a4:	4610      	mov	r0, r2
 80031a6:	4619      	mov	r1, r3
 80031a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031aa:	2200      	movs	r2, #0
 80031ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031b4:	f7fd f864 	bl	8000280 <__aeabi_uldivmod>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4613      	mov	r3, r2
 80031be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031c0:	e058      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c2:	4b38      	ldr	r3, [pc, #224]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	099b      	lsrs	r3, r3, #6
 80031c8:	2200      	movs	r2, #0
 80031ca:	4618      	mov	r0, r3
 80031cc:	4611      	mov	r1, r2
 80031ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031d2:	623b      	str	r3, [r7, #32]
 80031d4:	2300      	movs	r3, #0
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
 80031d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031dc:	4642      	mov	r2, r8
 80031de:	464b      	mov	r3, r9
 80031e0:	f04f 0000 	mov.w	r0, #0
 80031e4:	f04f 0100 	mov.w	r1, #0
 80031e8:	0159      	lsls	r1, r3, #5
 80031ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031ee:	0150      	lsls	r0, r2, #5
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4641      	mov	r1, r8
 80031f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80031fa:	4649      	mov	r1, r9
 80031fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800320c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003210:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003214:	ebb2 040a 	subs.w	r4, r2, sl
 8003218:	eb63 050b 	sbc.w	r5, r3, fp
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	f04f 0300 	mov.w	r3, #0
 8003224:	00eb      	lsls	r3, r5, #3
 8003226:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800322a:	00e2      	lsls	r2, r4, #3
 800322c:	4614      	mov	r4, r2
 800322e:	461d      	mov	r5, r3
 8003230:	4643      	mov	r3, r8
 8003232:	18e3      	adds	r3, r4, r3
 8003234:	603b      	str	r3, [r7, #0]
 8003236:	464b      	mov	r3, r9
 8003238:	eb45 0303 	adc.w	r3, r5, r3
 800323c:	607b      	str	r3, [r7, #4]
 800323e:	f04f 0200 	mov.w	r2, #0
 8003242:	f04f 0300 	mov.w	r3, #0
 8003246:	e9d7 4500 	ldrd	r4, r5, [r7]
 800324a:	4629      	mov	r1, r5
 800324c:	028b      	lsls	r3, r1, #10
 800324e:	4621      	mov	r1, r4
 8003250:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003254:	4621      	mov	r1, r4
 8003256:	028a      	lsls	r2, r1, #10
 8003258:	4610      	mov	r0, r2
 800325a:	4619      	mov	r1, r3
 800325c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800325e:	2200      	movs	r2, #0
 8003260:	61bb      	str	r3, [r7, #24]
 8003262:	61fa      	str	r2, [r7, #28]
 8003264:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003268:	f7fd f80a 	bl	8000280 <__aeabi_uldivmod>
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	4613      	mov	r3, r2
 8003272:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003274:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	0c1b      	lsrs	r3, r3, #16
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	3301      	adds	r3, #1
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003284:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003288:	fbb2 f3f3 	udiv	r3, r2, r3
 800328c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800328e:	e002      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003292:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003298:	4618      	mov	r0, r3
 800329a:	3750      	adds	r7, #80	; 0x50
 800329c:	46bd      	mov	sp, r7
 800329e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032a2:	bf00      	nop
 80032a4:	40023800 	.word	0x40023800
 80032a8:	00f42400 	.word	0x00f42400
 80032ac:	007a1200 	.word	0x007a1200

080032b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032b4:	4b03      	ldr	r3, [pc, #12]	; (80032c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80032b6:	681b      	ldr	r3, [r3, #0]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	20000000 	.word	0x20000000

080032c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032cc:	f7ff fff0 	bl	80032b0 <HAL_RCC_GetHCLKFreq>
 80032d0:	4602      	mov	r2, r0
 80032d2:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	0a9b      	lsrs	r3, r3, #10
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	4903      	ldr	r1, [pc, #12]	; (80032ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80032de:	5ccb      	ldrb	r3, [r1, r3]
 80032e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40023800 	.word	0x40023800
 80032ec:	08004ff8 	.word	0x08004ff8

080032f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032f4:	f7ff ffdc 	bl	80032b0 <HAL_RCC_GetHCLKFreq>
 80032f8:	4602      	mov	r2, r0
 80032fa:	4b05      	ldr	r3, [pc, #20]	; (8003310 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	0b5b      	lsrs	r3, r3, #13
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	4903      	ldr	r1, [pc, #12]	; (8003314 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003306:	5ccb      	ldrb	r3, [r1, r3]
 8003308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800330c:	4618      	mov	r0, r3
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40023800 	.word	0x40023800
 8003314:	08004ff8 	.word	0x08004ff8

08003318 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e041      	b.n	80033ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7fd fd6a 	bl	8000e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3304      	adds	r3, #4
 8003354:	4619      	mov	r1, r3
 8003356:	4610      	mov	r0, r2
 8003358:	f000 f9aa 	bl	80036b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e041      	b.n	800344c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d106      	bne.n	80033e2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f839 	bl	8003454 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2202      	movs	r2, #2
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	3304      	adds	r3, #4
 80033f2:	4619      	mov	r1, r3
 80033f4:	4610      	mov	r0, r2
 80033f6:	f000 f95b 	bl	80036b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003482:	2302      	movs	r3, #2
 8003484:	e048      	b.n	8003518 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b0c      	cmp	r3, #12
 8003492:	d839      	bhi.n	8003508 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003494:	a201      	add	r2, pc, #4	; (adr r2, 800349c <HAL_TIM_OC_ConfigChannel+0x34>)
 8003496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349a:	bf00      	nop
 800349c:	080034d1 	.word	0x080034d1
 80034a0:	08003509 	.word	0x08003509
 80034a4:	08003509 	.word	0x08003509
 80034a8:	08003509 	.word	0x08003509
 80034ac:	080034df 	.word	0x080034df
 80034b0:	08003509 	.word	0x08003509
 80034b4:	08003509 	.word	0x08003509
 80034b8:	08003509 	.word	0x08003509
 80034bc:	080034ed 	.word	0x080034ed
 80034c0:	08003509 	.word	0x08003509
 80034c4:	08003509 	.word	0x08003509
 80034c8:	08003509 	.word	0x08003509
 80034cc:	080034fb 	.word	0x080034fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68b9      	ldr	r1, [r7, #8]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 f96a 	bl	80037b0 <TIM_OC1_SetConfig>
      break;
 80034dc:	e017      	b.n	800350e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68b9      	ldr	r1, [r7, #8]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 f9c9 	bl	800387c <TIM_OC2_SetConfig>
      break;
 80034ea:	e010      	b.n	800350e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fa2e 	bl	8003954 <TIM_OC3_SetConfig>
      break;
 80034f8:	e009      	b.n	800350e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68b9      	ldr	r1, [r7, #8]
 8003500:	4618      	mov	r0, r3
 8003502:	f000 fa91 	bl	8003a28 <TIM_OC4_SetConfig>
      break;
 8003506:	e002      	b.n	800350e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	75fb      	strb	r3, [r7, #23]
      break;
 800350c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003516:	7dfb      	ldrb	r3, [r7, #23]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800352a:	2300      	movs	r3, #0
 800352c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <HAL_TIM_ConfigClockSource+0x1c>
 8003538:	2302      	movs	r3, #2
 800353a:	e0b4      	b.n	80036a6 <HAL_TIM_ConfigClockSource+0x186>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800355a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003562:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003574:	d03e      	beq.n	80035f4 <HAL_TIM_ConfigClockSource+0xd4>
 8003576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800357a:	f200 8087 	bhi.w	800368c <HAL_TIM_ConfigClockSource+0x16c>
 800357e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003582:	f000 8086 	beq.w	8003692 <HAL_TIM_ConfigClockSource+0x172>
 8003586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800358a:	d87f      	bhi.n	800368c <HAL_TIM_ConfigClockSource+0x16c>
 800358c:	2b70      	cmp	r3, #112	; 0x70
 800358e:	d01a      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0xa6>
 8003590:	2b70      	cmp	r3, #112	; 0x70
 8003592:	d87b      	bhi.n	800368c <HAL_TIM_ConfigClockSource+0x16c>
 8003594:	2b60      	cmp	r3, #96	; 0x60
 8003596:	d050      	beq.n	800363a <HAL_TIM_ConfigClockSource+0x11a>
 8003598:	2b60      	cmp	r3, #96	; 0x60
 800359a:	d877      	bhi.n	800368c <HAL_TIM_ConfigClockSource+0x16c>
 800359c:	2b50      	cmp	r3, #80	; 0x50
 800359e:	d03c      	beq.n	800361a <HAL_TIM_ConfigClockSource+0xfa>
 80035a0:	2b50      	cmp	r3, #80	; 0x50
 80035a2:	d873      	bhi.n	800368c <HAL_TIM_ConfigClockSource+0x16c>
 80035a4:	2b40      	cmp	r3, #64	; 0x40
 80035a6:	d058      	beq.n	800365a <HAL_TIM_ConfigClockSource+0x13a>
 80035a8:	2b40      	cmp	r3, #64	; 0x40
 80035aa:	d86f      	bhi.n	800368c <HAL_TIM_ConfigClockSource+0x16c>
 80035ac:	2b30      	cmp	r3, #48	; 0x30
 80035ae:	d064      	beq.n	800367a <HAL_TIM_ConfigClockSource+0x15a>
 80035b0:	2b30      	cmp	r3, #48	; 0x30
 80035b2:	d86b      	bhi.n	800368c <HAL_TIM_ConfigClockSource+0x16c>
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d060      	beq.n	800367a <HAL_TIM_ConfigClockSource+0x15a>
 80035b8:	2b20      	cmp	r3, #32
 80035ba:	d867      	bhi.n	800368c <HAL_TIM_ConfigClockSource+0x16c>
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d05c      	beq.n	800367a <HAL_TIM_ConfigClockSource+0x15a>
 80035c0:	2b10      	cmp	r3, #16
 80035c2:	d05a      	beq.n	800367a <HAL_TIM_ConfigClockSource+0x15a>
 80035c4:	e062      	b.n	800368c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	6899      	ldr	r1, [r3, #8]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f000 faf1 	bl	8003bbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	609a      	str	r2, [r3, #8]
      break;
 80035f2:	e04f      	b.n	8003694 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6818      	ldr	r0, [r3, #0]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	6899      	ldr	r1, [r3, #8]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f000 fada 	bl	8003bbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003616:	609a      	str	r2, [r3, #8]
      break;
 8003618:	e03c      	b.n	8003694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	6859      	ldr	r1, [r3, #4]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	461a      	mov	r2, r3
 8003628:	f000 fa4e 	bl	8003ac8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2150      	movs	r1, #80	; 0x50
 8003632:	4618      	mov	r0, r3
 8003634:	f000 faa7 	bl	8003b86 <TIM_ITRx_SetConfig>
      break;
 8003638:	e02c      	b.n	8003694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6818      	ldr	r0, [r3, #0]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	6859      	ldr	r1, [r3, #4]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	461a      	mov	r2, r3
 8003648:	f000 fa6d 	bl	8003b26 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2160      	movs	r1, #96	; 0x60
 8003652:	4618      	mov	r0, r3
 8003654:	f000 fa97 	bl	8003b86 <TIM_ITRx_SetConfig>
      break;
 8003658:	e01c      	b.n	8003694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	6859      	ldr	r1, [r3, #4]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	461a      	mov	r2, r3
 8003668:	f000 fa2e 	bl	8003ac8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2140      	movs	r1, #64	; 0x40
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fa87 	bl	8003b86 <TIM_ITRx_SetConfig>
      break;
 8003678:	e00c      	b.n	8003694 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4619      	mov	r1, r3
 8003684:	4610      	mov	r0, r2
 8003686:	f000 fa7e 	bl	8003b86 <TIM_ITRx_SetConfig>
      break;
 800368a:	e003      	b.n	8003694 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	73fb      	strb	r3, [r7, #15]
      break;
 8003690:	e000      	b.n	8003694 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003692:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a34      	ldr	r2, [pc, #208]	; (8003794 <TIM_Base_SetConfig+0xe4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d00f      	beq.n	80036e8 <TIM_Base_SetConfig+0x38>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ce:	d00b      	beq.n	80036e8 <TIM_Base_SetConfig+0x38>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a31      	ldr	r2, [pc, #196]	; (8003798 <TIM_Base_SetConfig+0xe8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d007      	beq.n	80036e8 <TIM_Base_SetConfig+0x38>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a30      	ldr	r2, [pc, #192]	; (800379c <TIM_Base_SetConfig+0xec>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d003      	beq.n	80036e8 <TIM_Base_SetConfig+0x38>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a2f      	ldr	r2, [pc, #188]	; (80037a0 <TIM_Base_SetConfig+0xf0>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d108      	bne.n	80036fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a25      	ldr	r2, [pc, #148]	; (8003794 <TIM_Base_SetConfig+0xe4>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d01b      	beq.n	800373a <TIM_Base_SetConfig+0x8a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003708:	d017      	beq.n	800373a <TIM_Base_SetConfig+0x8a>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a22      	ldr	r2, [pc, #136]	; (8003798 <TIM_Base_SetConfig+0xe8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d013      	beq.n	800373a <TIM_Base_SetConfig+0x8a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a21      	ldr	r2, [pc, #132]	; (800379c <TIM_Base_SetConfig+0xec>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00f      	beq.n	800373a <TIM_Base_SetConfig+0x8a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a20      	ldr	r2, [pc, #128]	; (80037a0 <TIM_Base_SetConfig+0xf0>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00b      	beq.n	800373a <TIM_Base_SetConfig+0x8a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a1f      	ldr	r2, [pc, #124]	; (80037a4 <TIM_Base_SetConfig+0xf4>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d007      	beq.n	800373a <TIM_Base_SetConfig+0x8a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a1e      	ldr	r2, [pc, #120]	; (80037a8 <TIM_Base_SetConfig+0xf8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d003      	beq.n	800373a <TIM_Base_SetConfig+0x8a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a1d      	ldr	r2, [pc, #116]	; (80037ac <TIM_Base_SetConfig+0xfc>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d108      	bne.n	800374c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4313      	orrs	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a08      	ldr	r2, [pc, #32]	; (8003794 <TIM_Base_SetConfig+0xe4>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d103      	bne.n	8003780 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	615a      	str	r2, [r3, #20]
}
 8003786:	bf00      	nop
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40010000 	.word	0x40010000
 8003798:	40000400 	.word	0x40000400
 800379c:	40000800 	.word	0x40000800
 80037a0:	40000c00 	.word	0x40000c00
 80037a4:	40014000 	.word	0x40014000
 80037a8:	40014400 	.word	0x40014400
 80037ac:	40014800 	.word	0x40014800

080037b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	f023 0201 	bic.w	r2, r3, #1
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 0303 	bic.w	r3, r3, #3
 80037e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f023 0302 	bic.w	r3, r3, #2
 80037f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a1c      	ldr	r2, [pc, #112]	; (8003878 <TIM_OC1_SetConfig+0xc8>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d10c      	bne.n	8003826 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f023 0308 	bic.w	r3, r3, #8
 8003812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	4313      	orrs	r3, r2
 800381c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f023 0304 	bic.w	r3, r3, #4
 8003824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a13      	ldr	r2, [pc, #76]	; (8003878 <TIM_OC1_SetConfig+0xc8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d111      	bne.n	8003852 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800383c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	4313      	orrs	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	621a      	str	r2, [r3, #32]
}
 800386c:	bf00      	nop
 800386e:	371c      	adds	r7, #28
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	40010000 	.word	0x40010000

0800387c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	f023 0210 	bic.w	r2, r3, #16
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	021b      	lsls	r3, r3, #8
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4313      	orrs	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f023 0320 	bic.w	r3, r3, #32
 80038c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a1e      	ldr	r2, [pc, #120]	; (8003950 <TIM_OC2_SetConfig+0xd4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d10d      	bne.n	80038f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a15      	ldr	r2, [pc, #84]	; (8003950 <TIM_OC2_SetConfig+0xd4>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d113      	bne.n	8003928 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003906:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800390e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	4313      	orrs	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	621a      	str	r2, [r3, #32]
}
 8003942:	bf00      	nop
 8003944:	371c      	adds	r7, #28
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40010000 	.word	0x40010000

08003954 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f023 0303 	bic.w	r3, r3, #3
 800398a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4313      	orrs	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800399c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	021b      	lsls	r3, r3, #8
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a1d      	ldr	r2, [pc, #116]	; (8003a24 <TIM_OC3_SetConfig+0xd0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d10d      	bne.n	80039ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	021b      	lsls	r3, r3, #8
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a14      	ldr	r2, [pc, #80]	; (8003a24 <TIM_OC3_SetConfig+0xd0>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d113      	bne.n	80039fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	621a      	str	r2, [r3, #32]
}
 8003a18:	bf00      	nop
 8003a1a:	371c      	adds	r7, #28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	40010000 	.word	0x40010000

08003a28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	021b      	lsls	r3, r3, #8
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	031b      	lsls	r3, r3, #12
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a10      	ldr	r2, [pc, #64]	; (8003ac4 <TIM_OC4_SetConfig+0x9c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d109      	bne.n	8003a9c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	019b      	lsls	r3, r3, #6
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	621a      	str	r2, [r3, #32]
}
 8003ab6:	bf00      	nop
 8003ab8:	371c      	adds	r7, #28
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40010000 	.word	0x40010000

08003ac8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	f023 0201 	bic.w	r2, r3, #1
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f023 030a 	bic.w	r3, r3, #10
 8003b04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	621a      	str	r2, [r3, #32]
}
 8003b1a:	bf00      	nop
 8003b1c:	371c      	adds	r7, #28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b087      	sub	sp, #28
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	60f8      	str	r0, [r7, #12]
 8003b2e:	60b9      	str	r1, [r7, #8]
 8003b30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	f023 0210 	bic.w	r2, r3, #16
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	031b      	lsls	r3, r3, #12
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	621a      	str	r2, [r3, #32]
}
 8003b7a:	bf00      	nop
 8003b7c:	371c      	adds	r7, #28
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b085      	sub	sp, #20
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f043 0307 	orr.w	r3, r3, #7
 8003ba8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	609a      	str	r2, [r3, #8]
}
 8003bb0:	bf00      	nop
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
 8003bc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	021a      	lsls	r2, r3, #8
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	431a      	orrs	r2, r3
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	609a      	str	r2, [r3, #8]
}
 8003bf0:	bf00      	nop
 8003bf2:	371c      	adds	r7, #28
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d101      	bne.n	8003c14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e050      	b.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a1c      	ldr	r2, [pc, #112]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d018      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c60:	d013      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a18      	ldr	r2, [pc, #96]	; (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d00e      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a16      	ldr	r2, [pc, #88]	; (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d009      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a15      	ldr	r2, [pc, #84]	; (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d004      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a13      	ldr	r2, [pc, #76]	; (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d10c      	bne.n	8003ca4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40010000 	.word	0x40010000
 8003cc8:	40000400 	.word	0x40000400
 8003ccc:	40000800 	.word	0x40000800
 8003cd0:	40000c00 	.word	0x40000c00
 8003cd4:	40014000 	.word	0x40014000

08003cd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e03d      	b.n	8003d70 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e03f      	b.n	8003e0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7fd f8ce 	bl	8000f44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2224      	movs	r2, #36	; 0x24
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f929 	bl	8004018 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	691a      	ldr	r2, [r3, #16]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695a      	ldr	r2, [r3, #20]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003de4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68da      	ldr	r2, [r3, #12]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003df4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b08a      	sub	sp, #40	; 0x28
 8003e1a:	af02      	add	r7, sp, #8
 8003e1c:	60f8      	str	r0, [r7, #12]
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	603b      	str	r3, [r7, #0]
 8003e22:	4613      	mov	r3, r2
 8003e24:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b20      	cmp	r3, #32
 8003e34:	d17c      	bne.n	8003f30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d002      	beq.n	8003e42 <HAL_UART_Transmit+0x2c>
 8003e3c:	88fb      	ldrh	r3, [r7, #6]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e075      	b.n	8003f32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <HAL_UART_Transmit+0x3e>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e06e      	b.n	8003f32 <HAL_UART_Transmit+0x11c>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2221      	movs	r2, #33	; 0x21
 8003e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e6a:	f7fd fd81 	bl	8001970 <HAL_GetTick>
 8003e6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	88fa      	ldrh	r2, [r7, #6]
 8003e74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	88fa      	ldrh	r2, [r7, #6]
 8003e7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e84:	d108      	bne.n	8003e98 <HAL_UART_Transmit+0x82>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d104      	bne.n	8003e98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	61bb      	str	r3, [r7, #24]
 8003e96:	e003      	b.n	8003ea0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ea8:	e02a      	b.n	8003f00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	2180      	movs	r1, #128	; 0x80
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 f840 	bl	8003f3a <UART_WaitOnFlagUntilTimeout>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e036      	b.n	8003f32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10b      	bne.n	8003ee2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ed8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	3302      	adds	r3, #2
 8003ede:	61bb      	str	r3, [r7, #24]
 8003ee0:	e007      	b.n	8003ef2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	781a      	ldrb	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1cf      	bne.n	8003eaa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2200      	movs	r2, #0
 8003f12:	2140      	movs	r1, #64	; 0x40
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 f810 	bl	8003f3a <UART_WaitOnFlagUntilTimeout>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e006      	b.n	8003f32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	e000      	b.n	8003f32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f30:	2302      	movs	r3, #2
  }
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3720      	adds	r7, #32
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b090      	sub	sp, #64	; 0x40
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	60f8      	str	r0, [r7, #12]
 8003f42:	60b9      	str	r1, [r7, #8]
 8003f44:	603b      	str	r3, [r7, #0]
 8003f46:	4613      	mov	r3, r2
 8003f48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f4a:	e050      	b.n	8003fee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f52:	d04c      	beq.n	8003fee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d007      	beq.n	8003f6a <UART_WaitOnFlagUntilTimeout+0x30>
 8003f5a:	f7fd fd09 	bl	8001970 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d241      	bcs.n	8003fee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	330c      	adds	r3, #12
 8003f70:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f74:	e853 3f00 	ldrex	r3, [r3]
 8003f78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	330c      	adds	r3, #12
 8003f88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f8a:	637a      	str	r2, [r7, #52]	; 0x34
 8003f8c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f92:	e841 2300 	strex	r3, r2, [r1]
 8003f96:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1e5      	bne.n	8003f6a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	3314      	adds	r3, #20
 8003fa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	e853 3f00 	ldrex	r3, [r3]
 8003fac:	613b      	str	r3, [r7, #16]
   return(result);
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f023 0301 	bic.w	r3, r3, #1
 8003fb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	3314      	adds	r3, #20
 8003fbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fbe:	623a      	str	r2, [r7, #32]
 8003fc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc2:	69f9      	ldr	r1, [r7, #28]
 8003fc4:	6a3a      	ldr	r2, [r7, #32]
 8003fc6:	e841 2300 	strex	r3, r2, [r1]
 8003fca:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1e5      	bne.n	8003f9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e00f      	b.n	800400e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	bf0c      	ite	eq
 8003ffe:	2301      	moveq	r3, #1
 8004000:	2300      	movne	r3, #0
 8004002:	b2db      	uxtb	r3, r3
 8004004:	461a      	mov	r2, r3
 8004006:	79fb      	ldrb	r3, [r7, #7]
 8004008:	429a      	cmp	r2, r3
 800400a:	d09f      	beq.n	8003f4c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3740      	adds	r7, #64	; 0x40
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800401c:	b0c0      	sub	sp, #256	; 0x100
 800401e:	af00      	add	r7, sp, #0
 8004020:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004034:	68d9      	ldr	r1, [r3, #12]
 8004036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	ea40 0301 	orr.w	r3, r0, r1
 8004040:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	431a      	orrs	r2, r3
 8004050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	431a      	orrs	r2, r3
 8004058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004070:	f021 010c 	bic.w	r1, r1, #12
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800407e:	430b      	orrs	r3, r1
 8004080:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800408e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004092:	6999      	ldr	r1, [r3, #24]
 8004094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	ea40 0301 	orr.w	r3, r0, r1
 800409e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	4b8f      	ldr	r3, [pc, #572]	; (80042e4 <UART_SetConfig+0x2cc>)
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d005      	beq.n	80040b8 <UART_SetConfig+0xa0>
 80040ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	4b8d      	ldr	r3, [pc, #564]	; (80042e8 <UART_SetConfig+0x2d0>)
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d104      	bne.n	80040c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040b8:	f7ff f91a 	bl	80032f0 <HAL_RCC_GetPCLK2Freq>
 80040bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80040c0:	e003      	b.n	80040ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040c2:	f7ff f901 	bl	80032c8 <HAL_RCC_GetPCLK1Freq>
 80040c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d4:	f040 810c 	bne.w	80042f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040dc:	2200      	movs	r2, #0
 80040de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80040e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80040e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80040ea:	4622      	mov	r2, r4
 80040ec:	462b      	mov	r3, r5
 80040ee:	1891      	adds	r1, r2, r2
 80040f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80040f2:	415b      	adcs	r3, r3
 80040f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040fa:	4621      	mov	r1, r4
 80040fc:	eb12 0801 	adds.w	r8, r2, r1
 8004100:	4629      	mov	r1, r5
 8004102:	eb43 0901 	adc.w	r9, r3, r1
 8004106:	f04f 0200 	mov.w	r2, #0
 800410a:	f04f 0300 	mov.w	r3, #0
 800410e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004112:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004116:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800411a:	4690      	mov	r8, r2
 800411c:	4699      	mov	r9, r3
 800411e:	4623      	mov	r3, r4
 8004120:	eb18 0303 	adds.w	r3, r8, r3
 8004124:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004128:	462b      	mov	r3, r5
 800412a:	eb49 0303 	adc.w	r3, r9, r3
 800412e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800413e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004142:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004146:	460b      	mov	r3, r1
 8004148:	18db      	adds	r3, r3, r3
 800414a:	653b      	str	r3, [r7, #80]	; 0x50
 800414c:	4613      	mov	r3, r2
 800414e:	eb42 0303 	adc.w	r3, r2, r3
 8004152:	657b      	str	r3, [r7, #84]	; 0x54
 8004154:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004158:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800415c:	f7fc f890 	bl	8000280 <__aeabi_uldivmod>
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	4b61      	ldr	r3, [pc, #388]	; (80042ec <UART_SetConfig+0x2d4>)
 8004166:	fba3 2302 	umull	r2, r3, r3, r2
 800416a:	095b      	lsrs	r3, r3, #5
 800416c:	011c      	lsls	r4, r3, #4
 800416e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004172:	2200      	movs	r2, #0
 8004174:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004178:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800417c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004180:	4642      	mov	r2, r8
 8004182:	464b      	mov	r3, r9
 8004184:	1891      	adds	r1, r2, r2
 8004186:	64b9      	str	r1, [r7, #72]	; 0x48
 8004188:	415b      	adcs	r3, r3
 800418a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800418c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004190:	4641      	mov	r1, r8
 8004192:	eb12 0a01 	adds.w	sl, r2, r1
 8004196:	4649      	mov	r1, r9
 8004198:	eb43 0b01 	adc.w	fp, r3, r1
 800419c:	f04f 0200 	mov.w	r2, #0
 80041a0:	f04f 0300 	mov.w	r3, #0
 80041a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041b0:	4692      	mov	sl, r2
 80041b2:	469b      	mov	fp, r3
 80041b4:	4643      	mov	r3, r8
 80041b6:	eb1a 0303 	adds.w	r3, sl, r3
 80041ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041be:	464b      	mov	r3, r9
 80041c0:	eb4b 0303 	adc.w	r3, fp, r3
 80041c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80041d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80041dc:	460b      	mov	r3, r1
 80041de:	18db      	adds	r3, r3, r3
 80041e0:	643b      	str	r3, [r7, #64]	; 0x40
 80041e2:	4613      	mov	r3, r2
 80041e4:	eb42 0303 	adc.w	r3, r2, r3
 80041e8:	647b      	str	r3, [r7, #68]	; 0x44
 80041ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80041f2:	f7fc f845 	bl	8000280 <__aeabi_uldivmod>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4611      	mov	r1, r2
 80041fc:	4b3b      	ldr	r3, [pc, #236]	; (80042ec <UART_SetConfig+0x2d4>)
 80041fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	2264      	movs	r2, #100	; 0x64
 8004206:	fb02 f303 	mul.w	r3, r2, r3
 800420a:	1acb      	subs	r3, r1, r3
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004212:	4b36      	ldr	r3, [pc, #216]	; (80042ec <UART_SetConfig+0x2d4>)
 8004214:	fba3 2302 	umull	r2, r3, r3, r2
 8004218:	095b      	lsrs	r3, r3, #5
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004220:	441c      	add	r4, r3
 8004222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004226:	2200      	movs	r2, #0
 8004228:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800422c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004230:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004234:	4642      	mov	r2, r8
 8004236:	464b      	mov	r3, r9
 8004238:	1891      	adds	r1, r2, r2
 800423a:	63b9      	str	r1, [r7, #56]	; 0x38
 800423c:	415b      	adcs	r3, r3
 800423e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004240:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004244:	4641      	mov	r1, r8
 8004246:	1851      	adds	r1, r2, r1
 8004248:	6339      	str	r1, [r7, #48]	; 0x30
 800424a:	4649      	mov	r1, r9
 800424c:	414b      	adcs	r3, r1
 800424e:	637b      	str	r3, [r7, #52]	; 0x34
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	f04f 0300 	mov.w	r3, #0
 8004258:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800425c:	4659      	mov	r1, fp
 800425e:	00cb      	lsls	r3, r1, #3
 8004260:	4651      	mov	r1, sl
 8004262:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004266:	4651      	mov	r1, sl
 8004268:	00ca      	lsls	r2, r1, #3
 800426a:	4610      	mov	r0, r2
 800426c:	4619      	mov	r1, r3
 800426e:	4603      	mov	r3, r0
 8004270:	4642      	mov	r2, r8
 8004272:	189b      	adds	r3, r3, r2
 8004274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004278:	464b      	mov	r3, r9
 800427a:	460a      	mov	r2, r1
 800427c:	eb42 0303 	adc.w	r3, r2, r3
 8004280:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004290:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004294:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004298:	460b      	mov	r3, r1
 800429a:	18db      	adds	r3, r3, r3
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28
 800429e:	4613      	mov	r3, r2
 80042a0:	eb42 0303 	adc.w	r3, r2, r3
 80042a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80042ae:	f7fb ffe7 	bl	8000280 <__aeabi_uldivmod>
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	4b0d      	ldr	r3, [pc, #52]	; (80042ec <UART_SetConfig+0x2d4>)
 80042b8:	fba3 1302 	umull	r1, r3, r3, r2
 80042bc:	095b      	lsrs	r3, r3, #5
 80042be:	2164      	movs	r1, #100	; 0x64
 80042c0:	fb01 f303 	mul.w	r3, r1, r3
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	3332      	adds	r3, #50	; 0x32
 80042ca:	4a08      	ldr	r2, [pc, #32]	; (80042ec <UART_SetConfig+0x2d4>)
 80042cc:	fba2 2303 	umull	r2, r3, r2, r3
 80042d0:	095b      	lsrs	r3, r3, #5
 80042d2:	f003 0207 	and.w	r2, r3, #7
 80042d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4422      	add	r2, r4
 80042de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042e0:	e105      	b.n	80044ee <UART_SetConfig+0x4d6>
 80042e2:	bf00      	nop
 80042e4:	40011000 	.word	0x40011000
 80042e8:	40011400 	.word	0x40011400
 80042ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042f4:	2200      	movs	r2, #0
 80042f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80042fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004302:	4642      	mov	r2, r8
 8004304:	464b      	mov	r3, r9
 8004306:	1891      	adds	r1, r2, r2
 8004308:	6239      	str	r1, [r7, #32]
 800430a:	415b      	adcs	r3, r3
 800430c:	627b      	str	r3, [r7, #36]	; 0x24
 800430e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004312:	4641      	mov	r1, r8
 8004314:	1854      	adds	r4, r2, r1
 8004316:	4649      	mov	r1, r9
 8004318:	eb43 0501 	adc.w	r5, r3, r1
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	00eb      	lsls	r3, r5, #3
 8004326:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800432a:	00e2      	lsls	r2, r4, #3
 800432c:	4614      	mov	r4, r2
 800432e:	461d      	mov	r5, r3
 8004330:	4643      	mov	r3, r8
 8004332:	18e3      	adds	r3, r4, r3
 8004334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004338:	464b      	mov	r3, r9
 800433a:	eb45 0303 	adc.w	r3, r5, r3
 800433e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800434e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800435e:	4629      	mov	r1, r5
 8004360:	008b      	lsls	r3, r1, #2
 8004362:	4621      	mov	r1, r4
 8004364:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004368:	4621      	mov	r1, r4
 800436a:	008a      	lsls	r2, r1, #2
 800436c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004370:	f7fb ff86 	bl	8000280 <__aeabi_uldivmod>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	4b60      	ldr	r3, [pc, #384]	; (80044fc <UART_SetConfig+0x4e4>)
 800437a:	fba3 2302 	umull	r2, r3, r3, r2
 800437e:	095b      	lsrs	r3, r3, #5
 8004380:	011c      	lsls	r4, r3, #4
 8004382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004386:	2200      	movs	r2, #0
 8004388:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800438c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004390:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004394:	4642      	mov	r2, r8
 8004396:	464b      	mov	r3, r9
 8004398:	1891      	adds	r1, r2, r2
 800439a:	61b9      	str	r1, [r7, #24]
 800439c:	415b      	adcs	r3, r3
 800439e:	61fb      	str	r3, [r7, #28]
 80043a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043a4:	4641      	mov	r1, r8
 80043a6:	1851      	adds	r1, r2, r1
 80043a8:	6139      	str	r1, [r7, #16]
 80043aa:	4649      	mov	r1, r9
 80043ac:	414b      	adcs	r3, r1
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043bc:	4659      	mov	r1, fp
 80043be:	00cb      	lsls	r3, r1, #3
 80043c0:	4651      	mov	r1, sl
 80043c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043c6:	4651      	mov	r1, sl
 80043c8:	00ca      	lsls	r2, r1, #3
 80043ca:	4610      	mov	r0, r2
 80043cc:	4619      	mov	r1, r3
 80043ce:	4603      	mov	r3, r0
 80043d0:	4642      	mov	r2, r8
 80043d2:	189b      	adds	r3, r3, r2
 80043d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043d8:	464b      	mov	r3, r9
 80043da:	460a      	mov	r2, r1
 80043dc:	eb42 0303 	adc.w	r3, r2, r3
 80043e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80043ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	f04f 0300 	mov.w	r3, #0
 80043f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80043fc:	4649      	mov	r1, r9
 80043fe:	008b      	lsls	r3, r1, #2
 8004400:	4641      	mov	r1, r8
 8004402:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004406:	4641      	mov	r1, r8
 8004408:	008a      	lsls	r2, r1, #2
 800440a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800440e:	f7fb ff37 	bl	8000280 <__aeabi_uldivmod>
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	4b39      	ldr	r3, [pc, #228]	; (80044fc <UART_SetConfig+0x4e4>)
 8004418:	fba3 1302 	umull	r1, r3, r3, r2
 800441c:	095b      	lsrs	r3, r3, #5
 800441e:	2164      	movs	r1, #100	; 0x64
 8004420:	fb01 f303 	mul.w	r3, r1, r3
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	3332      	adds	r3, #50	; 0x32
 800442a:	4a34      	ldr	r2, [pc, #208]	; (80044fc <UART_SetConfig+0x4e4>)
 800442c:	fba2 2303 	umull	r2, r3, r2, r3
 8004430:	095b      	lsrs	r3, r3, #5
 8004432:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004436:	441c      	add	r4, r3
 8004438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800443c:	2200      	movs	r2, #0
 800443e:	673b      	str	r3, [r7, #112]	; 0x70
 8004440:	677a      	str	r2, [r7, #116]	; 0x74
 8004442:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004446:	4642      	mov	r2, r8
 8004448:	464b      	mov	r3, r9
 800444a:	1891      	adds	r1, r2, r2
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	415b      	adcs	r3, r3
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004456:	4641      	mov	r1, r8
 8004458:	1851      	adds	r1, r2, r1
 800445a:	6039      	str	r1, [r7, #0]
 800445c:	4649      	mov	r1, r9
 800445e:	414b      	adcs	r3, r1
 8004460:	607b      	str	r3, [r7, #4]
 8004462:	f04f 0200 	mov.w	r2, #0
 8004466:	f04f 0300 	mov.w	r3, #0
 800446a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800446e:	4659      	mov	r1, fp
 8004470:	00cb      	lsls	r3, r1, #3
 8004472:	4651      	mov	r1, sl
 8004474:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004478:	4651      	mov	r1, sl
 800447a:	00ca      	lsls	r2, r1, #3
 800447c:	4610      	mov	r0, r2
 800447e:	4619      	mov	r1, r3
 8004480:	4603      	mov	r3, r0
 8004482:	4642      	mov	r2, r8
 8004484:	189b      	adds	r3, r3, r2
 8004486:	66bb      	str	r3, [r7, #104]	; 0x68
 8004488:	464b      	mov	r3, r9
 800448a:	460a      	mov	r2, r1
 800448c:	eb42 0303 	adc.w	r3, r2, r3
 8004490:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	663b      	str	r3, [r7, #96]	; 0x60
 800449c:	667a      	str	r2, [r7, #100]	; 0x64
 800449e:	f04f 0200 	mov.w	r2, #0
 80044a2:	f04f 0300 	mov.w	r3, #0
 80044a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80044aa:	4649      	mov	r1, r9
 80044ac:	008b      	lsls	r3, r1, #2
 80044ae:	4641      	mov	r1, r8
 80044b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044b4:	4641      	mov	r1, r8
 80044b6:	008a      	lsls	r2, r1, #2
 80044b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044bc:	f7fb fee0 	bl	8000280 <__aeabi_uldivmod>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4b0d      	ldr	r3, [pc, #52]	; (80044fc <UART_SetConfig+0x4e4>)
 80044c6:	fba3 1302 	umull	r1, r3, r3, r2
 80044ca:	095b      	lsrs	r3, r3, #5
 80044cc:	2164      	movs	r1, #100	; 0x64
 80044ce:	fb01 f303 	mul.w	r3, r1, r3
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	011b      	lsls	r3, r3, #4
 80044d6:	3332      	adds	r3, #50	; 0x32
 80044d8:	4a08      	ldr	r2, [pc, #32]	; (80044fc <UART_SetConfig+0x4e4>)
 80044da:	fba2 2303 	umull	r2, r3, r2, r3
 80044de:	095b      	lsrs	r3, r3, #5
 80044e0:	f003 020f 	and.w	r2, r3, #15
 80044e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4422      	add	r2, r4
 80044ec:	609a      	str	r2, [r3, #8]
}
 80044ee:	bf00      	nop
 80044f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80044f4:	46bd      	mov	sp, r7
 80044f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044fa:	bf00      	nop
 80044fc:	51eb851f 	.word	0x51eb851f

08004500 <__errno>:
 8004500:	4b01      	ldr	r3, [pc, #4]	; (8004508 <__errno+0x8>)
 8004502:	6818      	ldr	r0, [r3, #0]
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	20000010 	.word	0x20000010

0800450c <__libc_init_array>:
 800450c:	b570      	push	{r4, r5, r6, lr}
 800450e:	4d0d      	ldr	r5, [pc, #52]	; (8004544 <__libc_init_array+0x38>)
 8004510:	4c0d      	ldr	r4, [pc, #52]	; (8004548 <__libc_init_array+0x3c>)
 8004512:	1b64      	subs	r4, r4, r5
 8004514:	10a4      	asrs	r4, r4, #2
 8004516:	2600      	movs	r6, #0
 8004518:	42a6      	cmp	r6, r4
 800451a:	d109      	bne.n	8004530 <__libc_init_array+0x24>
 800451c:	4d0b      	ldr	r5, [pc, #44]	; (800454c <__libc_init_array+0x40>)
 800451e:	4c0c      	ldr	r4, [pc, #48]	; (8004550 <__libc_init_array+0x44>)
 8004520:	f000 fc8e 	bl	8004e40 <_init>
 8004524:	1b64      	subs	r4, r4, r5
 8004526:	10a4      	asrs	r4, r4, #2
 8004528:	2600      	movs	r6, #0
 800452a:	42a6      	cmp	r6, r4
 800452c:	d105      	bne.n	800453a <__libc_init_array+0x2e>
 800452e:	bd70      	pop	{r4, r5, r6, pc}
 8004530:	f855 3b04 	ldr.w	r3, [r5], #4
 8004534:	4798      	blx	r3
 8004536:	3601      	adds	r6, #1
 8004538:	e7ee      	b.n	8004518 <__libc_init_array+0xc>
 800453a:	f855 3b04 	ldr.w	r3, [r5], #4
 800453e:	4798      	blx	r3
 8004540:	3601      	adds	r6, #1
 8004542:	e7f2      	b.n	800452a <__libc_init_array+0x1e>
 8004544:	08005044 	.word	0x08005044
 8004548:	08005044 	.word	0x08005044
 800454c:	08005044 	.word	0x08005044
 8004550:	08005048 	.word	0x08005048

08004554 <memset>:
 8004554:	4402      	add	r2, r0
 8004556:	4603      	mov	r3, r0
 8004558:	4293      	cmp	r3, r2
 800455a:	d100      	bne.n	800455e <memset+0xa>
 800455c:	4770      	bx	lr
 800455e:	f803 1b01 	strb.w	r1, [r3], #1
 8004562:	e7f9      	b.n	8004558 <memset+0x4>

08004564 <siprintf>:
 8004564:	b40e      	push	{r1, r2, r3}
 8004566:	b500      	push	{lr}
 8004568:	b09c      	sub	sp, #112	; 0x70
 800456a:	ab1d      	add	r3, sp, #116	; 0x74
 800456c:	9002      	str	r0, [sp, #8]
 800456e:	9006      	str	r0, [sp, #24]
 8004570:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004574:	4809      	ldr	r0, [pc, #36]	; (800459c <siprintf+0x38>)
 8004576:	9107      	str	r1, [sp, #28]
 8004578:	9104      	str	r1, [sp, #16]
 800457a:	4909      	ldr	r1, [pc, #36]	; (80045a0 <siprintf+0x3c>)
 800457c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004580:	9105      	str	r1, [sp, #20]
 8004582:	6800      	ldr	r0, [r0, #0]
 8004584:	9301      	str	r3, [sp, #4]
 8004586:	a902      	add	r1, sp, #8
 8004588:	f000 f868 	bl	800465c <_svfiprintf_r>
 800458c:	9b02      	ldr	r3, [sp, #8]
 800458e:	2200      	movs	r2, #0
 8004590:	701a      	strb	r2, [r3, #0]
 8004592:	b01c      	add	sp, #112	; 0x70
 8004594:	f85d eb04 	ldr.w	lr, [sp], #4
 8004598:	b003      	add	sp, #12
 800459a:	4770      	bx	lr
 800459c:	20000010 	.word	0x20000010
 80045a0:	ffff0208 	.word	0xffff0208

080045a4 <__ssputs_r>:
 80045a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045a8:	688e      	ldr	r6, [r1, #8]
 80045aa:	429e      	cmp	r6, r3
 80045ac:	4682      	mov	sl, r0
 80045ae:	460c      	mov	r4, r1
 80045b0:	4690      	mov	r8, r2
 80045b2:	461f      	mov	r7, r3
 80045b4:	d838      	bhi.n	8004628 <__ssputs_r+0x84>
 80045b6:	898a      	ldrh	r2, [r1, #12]
 80045b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045bc:	d032      	beq.n	8004624 <__ssputs_r+0x80>
 80045be:	6825      	ldr	r5, [r4, #0]
 80045c0:	6909      	ldr	r1, [r1, #16]
 80045c2:	eba5 0901 	sub.w	r9, r5, r1
 80045c6:	6965      	ldr	r5, [r4, #20]
 80045c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045d0:	3301      	adds	r3, #1
 80045d2:	444b      	add	r3, r9
 80045d4:	106d      	asrs	r5, r5, #1
 80045d6:	429d      	cmp	r5, r3
 80045d8:	bf38      	it	cc
 80045da:	461d      	movcc	r5, r3
 80045dc:	0553      	lsls	r3, r2, #21
 80045de:	d531      	bpl.n	8004644 <__ssputs_r+0xa0>
 80045e0:	4629      	mov	r1, r5
 80045e2:	f000 fb63 	bl	8004cac <_malloc_r>
 80045e6:	4606      	mov	r6, r0
 80045e8:	b950      	cbnz	r0, 8004600 <__ssputs_r+0x5c>
 80045ea:	230c      	movs	r3, #12
 80045ec:	f8ca 3000 	str.w	r3, [sl]
 80045f0:	89a3      	ldrh	r3, [r4, #12]
 80045f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045f6:	81a3      	strh	r3, [r4, #12]
 80045f8:	f04f 30ff 	mov.w	r0, #4294967295
 80045fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004600:	6921      	ldr	r1, [r4, #16]
 8004602:	464a      	mov	r2, r9
 8004604:	f000 fabe 	bl	8004b84 <memcpy>
 8004608:	89a3      	ldrh	r3, [r4, #12]
 800460a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800460e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004612:	81a3      	strh	r3, [r4, #12]
 8004614:	6126      	str	r6, [r4, #16]
 8004616:	6165      	str	r5, [r4, #20]
 8004618:	444e      	add	r6, r9
 800461a:	eba5 0509 	sub.w	r5, r5, r9
 800461e:	6026      	str	r6, [r4, #0]
 8004620:	60a5      	str	r5, [r4, #8]
 8004622:	463e      	mov	r6, r7
 8004624:	42be      	cmp	r6, r7
 8004626:	d900      	bls.n	800462a <__ssputs_r+0x86>
 8004628:	463e      	mov	r6, r7
 800462a:	6820      	ldr	r0, [r4, #0]
 800462c:	4632      	mov	r2, r6
 800462e:	4641      	mov	r1, r8
 8004630:	f000 fab6 	bl	8004ba0 <memmove>
 8004634:	68a3      	ldr	r3, [r4, #8]
 8004636:	1b9b      	subs	r3, r3, r6
 8004638:	60a3      	str	r3, [r4, #8]
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	4433      	add	r3, r6
 800463e:	6023      	str	r3, [r4, #0]
 8004640:	2000      	movs	r0, #0
 8004642:	e7db      	b.n	80045fc <__ssputs_r+0x58>
 8004644:	462a      	mov	r2, r5
 8004646:	f000 fba5 	bl	8004d94 <_realloc_r>
 800464a:	4606      	mov	r6, r0
 800464c:	2800      	cmp	r0, #0
 800464e:	d1e1      	bne.n	8004614 <__ssputs_r+0x70>
 8004650:	6921      	ldr	r1, [r4, #16]
 8004652:	4650      	mov	r0, sl
 8004654:	f000 fabe 	bl	8004bd4 <_free_r>
 8004658:	e7c7      	b.n	80045ea <__ssputs_r+0x46>
	...

0800465c <_svfiprintf_r>:
 800465c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004660:	4698      	mov	r8, r3
 8004662:	898b      	ldrh	r3, [r1, #12]
 8004664:	061b      	lsls	r3, r3, #24
 8004666:	b09d      	sub	sp, #116	; 0x74
 8004668:	4607      	mov	r7, r0
 800466a:	460d      	mov	r5, r1
 800466c:	4614      	mov	r4, r2
 800466e:	d50e      	bpl.n	800468e <_svfiprintf_r+0x32>
 8004670:	690b      	ldr	r3, [r1, #16]
 8004672:	b963      	cbnz	r3, 800468e <_svfiprintf_r+0x32>
 8004674:	2140      	movs	r1, #64	; 0x40
 8004676:	f000 fb19 	bl	8004cac <_malloc_r>
 800467a:	6028      	str	r0, [r5, #0]
 800467c:	6128      	str	r0, [r5, #16]
 800467e:	b920      	cbnz	r0, 800468a <_svfiprintf_r+0x2e>
 8004680:	230c      	movs	r3, #12
 8004682:	603b      	str	r3, [r7, #0]
 8004684:	f04f 30ff 	mov.w	r0, #4294967295
 8004688:	e0d1      	b.n	800482e <_svfiprintf_r+0x1d2>
 800468a:	2340      	movs	r3, #64	; 0x40
 800468c:	616b      	str	r3, [r5, #20]
 800468e:	2300      	movs	r3, #0
 8004690:	9309      	str	r3, [sp, #36]	; 0x24
 8004692:	2320      	movs	r3, #32
 8004694:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004698:	f8cd 800c 	str.w	r8, [sp, #12]
 800469c:	2330      	movs	r3, #48	; 0x30
 800469e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004848 <_svfiprintf_r+0x1ec>
 80046a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046a6:	f04f 0901 	mov.w	r9, #1
 80046aa:	4623      	mov	r3, r4
 80046ac:	469a      	mov	sl, r3
 80046ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046b2:	b10a      	cbz	r2, 80046b8 <_svfiprintf_r+0x5c>
 80046b4:	2a25      	cmp	r2, #37	; 0x25
 80046b6:	d1f9      	bne.n	80046ac <_svfiprintf_r+0x50>
 80046b8:	ebba 0b04 	subs.w	fp, sl, r4
 80046bc:	d00b      	beq.n	80046d6 <_svfiprintf_r+0x7a>
 80046be:	465b      	mov	r3, fp
 80046c0:	4622      	mov	r2, r4
 80046c2:	4629      	mov	r1, r5
 80046c4:	4638      	mov	r0, r7
 80046c6:	f7ff ff6d 	bl	80045a4 <__ssputs_r>
 80046ca:	3001      	adds	r0, #1
 80046cc:	f000 80aa 	beq.w	8004824 <_svfiprintf_r+0x1c8>
 80046d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046d2:	445a      	add	r2, fp
 80046d4:	9209      	str	r2, [sp, #36]	; 0x24
 80046d6:	f89a 3000 	ldrb.w	r3, [sl]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 80a2 	beq.w	8004824 <_svfiprintf_r+0x1c8>
 80046e0:	2300      	movs	r3, #0
 80046e2:	f04f 32ff 	mov.w	r2, #4294967295
 80046e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046ea:	f10a 0a01 	add.w	sl, sl, #1
 80046ee:	9304      	str	r3, [sp, #16]
 80046f0:	9307      	str	r3, [sp, #28]
 80046f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046f6:	931a      	str	r3, [sp, #104]	; 0x68
 80046f8:	4654      	mov	r4, sl
 80046fa:	2205      	movs	r2, #5
 80046fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004700:	4851      	ldr	r0, [pc, #324]	; (8004848 <_svfiprintf_r+0x1ec>)
 8004702:	f7fb fd6d 	bl	80001e0 <memchr>
 8004706:	9a04      	ldr	r2, [sp, #16]
 8004708:	b9d8      	cbnz	r0, 8004742 <_svfiprintf_r+0xe6>
 800470a:	06d0      	lsls	r0, r2, #27
 800470c:	bf44      	itt	mi
 800470e:	2320      	movmi	r3, #32
 8004710:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004714:	0711      	lsls	r1, r2, #28
 8004716:	bf44      	itt	mi
 8004718:	232b      	movmi	r3, #43	; 0x2b
 800471a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800471e:	f89a 3000 	ldrb.w	r3, [sl]
 8004722:	2b2a      	cmp	r3, #42	; 0x2a
 8004724:	d015      	beq.n	8004752 <_svfiprintf_r+0xf6>
 8004726:	9a07      	ldr	r2, [sp, #28]
 8004728:	4654      	mov	r4, sl
 800472a:	2000      	movs	r0, #0
 800472c:	f04f 0c0a 	mov.w	ip, #10
 8004730:	4621      	mov	r1, r4
 8004732:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004736:	3b30      	subs	r3, #48	; 0x30
 8004738:	2b09      	cmp	r3, #9
 800473a:	d94e      	bls.n	80047da <_svfiprintf_r+0x17e>
 800473c:	b1b0      	cbz	r0, 800476c <_svfiprintf_r+0x110>
 800473e:	9207      	str	r2, [sp, #28]
 8004740:	e014      	b.n	800476c <_svfiprintf_r+0x110>
 8004742:	eba0 0308 	sub.w	r3, r0, r8
 8004746:	fa09 f303 	lsl.w	r3, r9, r3
 800474a:	4313      	orrs	r3, r2
 800474c:	9304      	str	r3, [sp, #16]
 800474e:	46a2      	mov	sl, r4
 8004750:	e7d2      	b.n	80046f8 <_svfiprintf_r+0x9c>
 8004752:	9b03      	ldr	r3, [sp, #12]
 8004754:	1d19      	adds	r1, r3, #4
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	9103      	str	r1, [sp, #12]
 800475a:	2b00      	cmp	r3, #0
 800475c:	bfbb      	ittet	lt
 800475e:	425b      	neglt	r3, r3
 8004760:	f042 0202 	orrlt.w	r2, r2, #2
 8004764:	9307      	strge	r3, [sp, #28]
 8004766:	9307      	strlt	r3, [sp, #28]
 8004768:	bfb8      	it	lt
 800476a:	9204      	strlt	r2, [sp, #16]
 800476c:	7823      	ldrb	r3, [r4, #0]
 800476e:	2b2e      	cmp	r3, #46	; 0x2e
 8004770:	d10c      	bne.n	800478c <_svfiprintf_r+0x130>
 8004772:	7863      	ldrb	r3, [r4, #1]
 8004774:	2b2a      	cmp	r3, #42	; 0x2a
 8004776:	d135      	bne.n	80047e4 <_svfiprintf_r+0x188>
 8004778:	9b03      	ldr	r3, [sp, #12]
 800477a:	1d1a      	adds	r2, r3, #4
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	9203      	str	r2, [sp, #12]
 8004780:	2b00      	cmp	r3, #0
 8004782:	bfb8      	it	lt
 8004784:	f04f 33ff 	movlt.w	r3, #4294967295
 8004788:	3402      	adds	r4, #2
 800478a:	9305      	str	r3, [sp, #20]
 800478c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004858 <_svfiprintf_r+0x1fc>
 8004790:	7821      	ldrb	r1, [r4, #0]
 8004792:	2203      	movs	r2, #3
 8004794:	4650      	mov	r0, sl
 8004796:	f7fb fd23 	bl	80001e0 <memchr>
 800479a:	b140      	cbz	r0, 80047ae <_svfiprintf_r+0x152>
 800479c:	2340      	movs	r3, #64	; 0x40
 800479e:	eba0 000a 	sub.w	r0, r0, sl
 80047a2:	fa03 f000 	lsl.w	r0, r3, r0
 80047a6:	9b04      	ldr	r3, [sp, #16]
 80047a8:	4303      	orrs	r3, r0
 80047aa:	3401      	adds	r4, #1
 80047ac:	9304      	str	r3, [sp, #16]
 80047ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047b2:	4826      	ldr	r0, [pc, #152]	; (800484c <_svfiprintf_r+0x1f0>)
 80047b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047b8:	2206      	movs	r2, #6
 80047ba:	f7fb fd11 	bl	80001e0 <memchr>
 80047be:	2800      	cmp	r0, #0
 80047c0:	d038      	beq.n	8004834 <_svfiprintf_r+0x1d8>
 80047c2:	4b23      	ldr	r3, [pc, #140]	; (8004850 <_svfiprintf_r+0x1f4>)
 80047c4:	bb1b      	cbnz	r3, 800480e <_svfiprintf_r+0x1b2>
 80047c6:	9b03      	ldr	r3, [sp, #12]
 80047c8:	3307      	adds	r3, #7
 80047ca:	f023 0307 	bic.w	r3, r3, #7
 80047ce:	3308      	adds	r3, #8
 80047d0:	9303      	str	r3, [sp, #12]
 80047d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047d4:	4433      	add	r3, r6
 80047d6:	9309      	str	r3, [sp, #36]	; 0x24
 80047d8:	e767      	b.n	80046aa <_svfiprintf_r+0x4e>
 80047da:	fb0c 3202 	mla	r2, ip, r2, r3
 80047de:	460c      	mov	r4, r1
 80047e0:	2001      	movs	r0, #1
 80047e2:	e7a5      	b.n	8004730 <_svfiprintf_r+0xd4>
 80047e4:	2300      	movs	r3, #0
 80047e6:	3401      	adds	r4, #1
 80047e8:	9305      	str	r3, [sp, #20]
 80047ea:	4619      	mov	r1, r3
 80047ec:	f04f 0c0a 	mov.w	ip, #10
 80047f0:	4620      	mov	r0, r4
 80047f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047f6:	3a30      	subs	r2, #48	; 0x30
 80047f8:	2a09      	cmp	r2, #9
 80047fa:	d903      	bls.n	8004804 <_svfiprintf_r+0x1a8>
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0c5      	beq.n	800478c <_svfiprintf_r+0x130>
 8004800:	9105      	str	r1, [sp, #20]
 8004802:	e7c3      	b.n	800478c <_svfiprintf_r+0x130>
 8004804:	fb0c 2101 	mla	r1, ip, r1, r2
 8004808:	4604      	mov	r4, r0
 800480a:	2301      	movs	r3, #1
 800480c:	e7f0      	b.n	80047f0 <_svfiprintf_r+0x194>
 800480e:	ab03      	add	r3, sp, #12
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	462a      	mov	r2, r5
 8004814:	4b0f      	ldr	r3, [pc, #60]	; (8004854 <_svfiprintf_r+0x1f8>)
 8004816:	a904      	add	r1, sp, #16
 8004818:	4638      	mov	r0, r7
 800481a:	f3af 8000 	nop.w
 800481e:	1c42      	adds	r2, r0, #1
 8004820:	4606      	mov	r6, r0
 8004822:	d1d6      	bne.n	80047d2 <_svfiprintf_r+0x176>
 8004824:	89ab      	ldrh	r3, [r5, #12]
 8004826:	065b      	lsls	r3, r3, #25
 8004828:	f53f af2c 	bmi.w	8004684 <_svfiprintf_r+0x28>
 800482c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800482e:	b01d      	add	sp, #116	; 0x74
 8004830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004834:	ab03      	add	r3, sp, #12
 8004836:	9300      	str	r3, [sp, #0]
 8004838:	462a      	mov	r2, r5
 800483a:	4b06      	ldr	r3, [pc, #24]	; (8004854 <_svfiprintf_r+0x1f8>)
 800483c:	a904      	add	r1, sp, #16
 800483e:	4638      	mov	r0, r7
 8004840:	f000 f87a 	bl	8004938 <_printf_i>
 8004844:	e7eb      	b.n	800481e <_svfiprintf_r+0x1c2>
 8004846:	bf00      	nop
 8004848:	08005008 	.word	0x08005008
 800484c:	08005012 	.word	0x08005012
 8004850:	00000000 	.word	0x00000000
 8004854:	080045a5 	.word	0x080045a5
 8004858:	0800500e 	.word	0x0800500e

0800485c <_printf_common>:
 800485c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004860:	4616      	mov	r6, r2
 8004862:	4699      	mov	r9, r3
 8004864:	688a      	ldr	r2, [r1, #8]
 8004866:	690b      	ldr	r3, [r1, #16]
 8004868:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800486c:	4293      	cmp	r3, r2
 800486e:	bfb8      	it	lt
 8004870:	4613      	movlt	r3, r2
 8004872:	6033      	str	r3, [r6, #0]
 8004874:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004878:	4607      	mov	r7, r0
 800487a:	460c      	mov	r4, r1
 800487c:	b10a      	cbz	r2, 8004882 <_printf_common+0x26>
 800487e:	3301      	adds	r3, #1
 8004880:	6033      	str	r3, [r6, #0]
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	0699      	lsls	r1, r3, #26
 8004886:	bf42      	ittt	mi
 8004888:	6833      	ldrmi	r3, [r6, #0]
 800488a:	3302      	addmi	r3, #2
 800488c:	6033      	strmi	r3, [r6, #0]
 800488e:	6825      	ldr	r5, [r4, #0]
 8004890:	f015 0506 	ands.w	r5, r5, #6
 8004894:	d106      	bne.n	80048a4 <_printf_common+0x48>
 8004896:	f104 0a19 	add.w	sl, r4, #25
 800489a:	68e3      	ldr	r3, [r4, #12]
 800489c:	6832      	ldr	r2, [r6, #0]
 800489e:	1a9b      	subs	r3, r3, r2
 80048a0:	42ab      	cmp	r3, r5
 80048a2:	dc26      	bgt.n	80048f2 <_printf_common+0x96>
 80048a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048a8:	1e13      	subs	r3, r2, #0
 80048aa:	6822      	ldr	r2, [r4, #0]
 80048ac:	bf18      	it	ne
 80048ae:	2301      	movne	r3, #1
 80048b0:	0692      	lsls	r2, r2, #26
 80048b2:	d42b      	bmi.n	800490c <_printf_common+0xb0>
 80048b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048b8:	4649      	mov	r1, r9
 80048ba:	4638      	mov	r0, r7
 80048bc:	47c0      	blx	r8
 80048be:	3001      	adds	r0, #1
 80048c0:	d01e      	beq.n	8004900 <_printf_common+0xa4>
 80048c2:	6823      	ldr	r3, [r4, #0]
 80048c4:	68e5      	ldr	r5, [r4, #12]
 80048c6:	6832      	ldr	r2, [r6, #0]
 80048c8:	f003 0306 	and.w	r3, r3, #6
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	bf08      	it	eq
 80048d0:	1aad      	subeq	r5, r5, r2
 80048d2:	68a3      	ldr	r3, [r4, #8]
 80048d4:	6922      	ldr	r2, [r4, #16]
 80048d6:	bf0c      	ite	eq
 80048d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048dc:	2500      	movne	r5, #0
 80048de:	4293      	cmp	r3, r2
 80048e0:	bfc4      	itt	gt
 80048e2:	1a9b      	subgt	r3, r3, r2
 80048e4:	18ed      	addgt	r5, r5, r3
 80048e6:	2600      	movs	r6, #0
 80048e8:	341a      	adds	r4, #26
 80048ea:	42b5      	cmp	r5, r6
 80048ec:	d11a      	bne.n	8004924 <_printf_common+0xc8>
 80048ee:	2000      	movs	r0, #0
 80048f0:	e008      	b.n	8004904 <_printf_common+0xa8>
 80048f2:	2301      	movs	r3, #1
 80048f4:	4652      	mov	r2, sl
 80048f6:	4649      	mov	r1, r9
 80048f8:	4638      	mov	r0, r7
 80048fa:	47c0      	blx	r8
 80048fc:	3001      	adds	r0, #1
 80048fe:	d103      	bne.n	8004908 <_printf_common+0xac>
 8004900:	f04f 30ff 	mov.w	r0, #4294967295
 8004904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004908:	3501      	adds	r5, #1
 800490a:	e7c6      	b.n	800489a <_printf_common+0x3e>
 800490c:	18e1      	adds	r1, r4, r3
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	2030      	movs	r0, #48	; 0x30
 8004912:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004916:	4422      	add	r2, r4
 8004918:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800491c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004920:	3302      	adds	r3, #2
 8004922:	e7c7      	b.n	80048b4 <_printf_common+0x58>
 8004924:	2301      	movs	r3, #1
 8004926:	4622      	mov	r2, r4
 8004928:	4649      	mov	r1, r9
 800492a:	4638      	mov	r0, r7
 800492c:	47c0      	blx	r8
 800492e:	3001      	adds	r0, #1
 8004930:	d0e6      	beq.n	8004900 <_printf_common+0xa4>
 8004932:	3601      	adds	r6, #1
 8004934:	e7d9      	b.n	80048ea <_printf_common+0x8e>
	...

08004938 <_printf_i>:
 8004938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800493c:	7e0f      	ldrb	r7, [r1, #24]
 800493e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004940:	2f78      	cmp	r7, #120	; 0x78
 8004942:	4691      	mov	r9, r2
 8004944:	4680      	mov	r8, r0
 8004946:	460c      	mov	r4, r1
 8004948:	469a      	mov	sl, r3
 800494a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800494e:	d807      	bhi.n	8004960 <_printf_i+0x28>
 8004950:	2f62      	cmp	r7, #98	; 0x62
 8004952:	d80a      	bhi.n	800496a <_printf_i+0x32>
 8004954:	2f00      	cmp	r7, #0
 8004956:	f000 80d8 	beq.w	8004b0a <_printf_i+0x1d2>
 800495a:	2f58      	cmp	r7, #88	; 0x58
 800495c:	f000 80a3 	beq.w	8004aa6 <_printf_i+0x16e>
 8004960:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004964:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004968:	e03a      	b.n	80049e0 <_printf_i+0xa8>
 800496a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800496e:	2b15      	cmp	r3, #21
 8004970:	d8f6      	bhi.n	8004960 <_printf_i+0x28>
 8004972:	a101      	add	r1, pc, #4	; (adr r1, 8004978 <_printf_i+0x40>)
 8004974:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004978:	080049d1 	.word	0x080049d1
 800497c:	080049e5 	.word	0x080049e5
 8004980:	08004961 	.word	0x08004961
 8004984:	08004961 	.word	0x08004961
 8004988:	08004961 	.word	0x08004961
 800498c:	08004961 	.word	0x08004961
 8004990:	080049e5 	.word	0x080049e5
 8004994:	08004961 	.word	0x08004961
 8004998:	08004961 	.word	0x08004961
 800499c:	08004961 	.word	0x08004961
 80049a0:	08004961 	.word	0x08004961
 80049a4:	08004af1 	.word	0x08004af1
 80049a8:	08004a15 	.word	0x08004a15
 80049ac:	08004ad3 	.word	0x08004ad3
 80049b0:	08004961 	.word	0x08004961
 80049b4:	08004961 	.word	0x08004961
 80049b8:	08004b13 	.word	0x08004b13
 80049bc:	08004961 	.word	0x08004961
 80049c0:	08004a15 	.word	0x08004a15
 80049c4:	08004961 	.word	0x08004961
 80049c8:	08004961 	.word	0x08004961
 80049cc:	08004adb 	.word	0x08004adb
 80049d0:	682b      	ldr	r3, [r5, #0]
 80049d2:	1d1a      	adds	r2, r3, #4
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	602a      	str	r2, [r5, #0]
 80049d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049e0:	2301      	movs	r3, #1
 80049e2:	e0a3      	b.n	8004b2c <_printf_i+0x1f4>
 80049e4:	6820      	ldr	r0, [r4, #0]
 80049e6:	6829      	ldr	r1, [r5, #0]
 80049e8:	0606      	lsls	r6, r0, #24
 80049ea:	f101 0304 	add.w	r3, r1, #4
 80049ee:	d50a      	bpl.n	8004a06 <_printf_i+0xce>
 80049f0:	680e      	ldr	r6, [r1, #0]
 80049f2:	602b      	str	r3, [r5, #0]
 80049f4:	2e00      	cmp	r6, #0
 80049f6:	da03      	bge.n	8004a00 <_printf_i+0xc8>
 80049f8:	232d      	movs	r3, #45	; 0x2d
 80049fa:	4276      	negs	r6, r6
 80049fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a00:	485e      	ldr	r0, [pc, #376]	; (8004b7c <_printf_i+0x244>)
 8004a02:	230a      	movs	r3, #10
 8004a04:	e019      	b.n	8004a3a <_printf_i+0x102>
 8004a06:	680e      	ldr	r6, [r1, #0]
 8004a08:	602b      	str	r3, [r5, #0]
 8004a0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a0e:	bf18      	it	ne
 8004a10:	b236      	sxthne	r6, r6
 8004a12:	e7ef      	b.n	80049f4 <_printf_i+0xbc>
 8004a14:	682b      	ldr	r3, [r5, #0]
 8004a16:	6820      	ldr	r0, [r4, #0]
 8004a18:	1d19      	adds	r1, r3, #4
 8004a1a:	6029      	str	r1, [r5, #0]
 8004a1c:	0601      	lsls	r1, r0, #24
 8004a1e:	d501      	bpl.n	8004a24 <_printf_i+0xec>
 8004a20:	681e      	ldr	r6, [r3, #0]
 8004a22:	e002      	b.n	8004a2a <_printf_i+0xf2>
 8004a24:	0646      	lsls	r6, r0, #25
 8004a26:	d5fb      	bpl.n	8004a20 <_printf_i+0xe8>
 8004a28:	881e      	ldrh	r6, [r3, #0]
 8004a2a:	4854      	ldr	r0, [pc, #336]	; (8004b7c <_printf_i+0x244>)
 8004a2c:	2f6f      	cmp	r7, #111	; 0x6f
 8004a2e:	bf0c      	ite	eq
 8004a30:	2308      	moveq	r3, #8
 8004a32:	230a      	movne	r3, #10
 8004a34:	2100      	movs	r1, #0
 8004a36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a3a:	6865      	ldr	r5, [r4, #4]
 8004a3c:	60a5      	str	r5, [r4, #8]
 8004a3e:	2d00      	cmp	r5, #0
 8004a40:	bfa2      	ittt	ge
 8004a42:	6821      	ldrge	r1, [r4, #0]
 8004a44:	f021 0104 	bicge.w	r1, r1, #4
 8004a48:	6021      	strge	r1, [r4, #0]
 8004a4a:	b90e      	cbnz	r6, 8004a50 <_printf_i+0x118>
 8004a4c:	2d00      	cmp	r5, #0
 8004a4e:	d04d      	beq.n	8004aec <_printf_i+0x1b4>
 8004a50:	4615      	mov	r5, r2
 8004a52:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a56:	fb03 6711 	mls	r7, r3, r1, r6
 8004a5a:	5dc7      	ldrb	r7, [r0, r7]
 8004a5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a60:	4637      	mov	r7, r6
 8004a62:	42bb      	cmp	r3, r7
 8004a64:	460e      	mov	r6, r1
 8004a66:	d9f4      	bls.n	8004a52 <_printf_i+0x11a>
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	d10b      	bne.n	8004a84 <_printf_i+0x14c>
 8004a6c:	6823      	ldr	r3, [r4, #0]
 8004a6e:	07de      	lsls	r6, r3, #31
 8004a70:	d508      	bpl.n	8004a84 <_printf_i+0x14c>
 8004a72:	6923      	ldr	r3, [r4, #16]
 8004a74:	6861      	ldr	r1, [r4, #4]
 8004a76:	4299      	cmp	r1, r3
 8004a78:	bfde      	ittt	le
 8004a7a:	2330      	movle	r3, #48	; 0x30
 8004a7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a84:	1b52      	subs	r2, r2, r5
 8004a86:	6122      	str	r2, [r4, #16]
 8004a88:	f8cd a000 	str.w	sl, [sp]
 8004a8c:	464b      	mov	r3, r9
 8004a8e:	aa03      	add	r2, sp, #12
 8004a90:	4621      	mov	r1, r4
 8004a92:	4640      	mov	r0, r8
 8004a94:	f7ff fee2 	bl	800485c <_printf_common>
 8004a98:	3001      	adds	r0, #1
 8004a9a:	d14c      	bne.n	8004b36 <_printf_i+0x1fe>
 8004a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa0:	b004      	add	sp, #16
 8004aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aa6:	4835      	ldr	r0, [pc, #212]	; (8004b7c <_printf_i+0x244>)
 8004aa8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004aac:	6829      	ldr	r1, [r5, #0]
 8004aae:	6823      	ldr	r3, [r4, #0]
 8004ab0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ab4:	6029      	str	r1, [r5, #0]
 8004ab6:	061d      	lsls	r5, r3, #24
 8004ab8:	d514      	bpl.n	8004ae4 <_printf_i+0x1ac>
 8004aba:	07df      	lsls	r7, r3, #31
 8004abc:	bf44      	itt	mi
 8004abe:	f043 0320 	orrmi.w	r3, r3, #32
 8004ac2:	6023      	strmi	r3, [r4, #0]
 8004ac4:	b91e      	cbnz	r6, 8004ace <_printf_i+0x196>
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	f023 0320 	bic.w	r3, r3, #32
 8004acc:	6023      	str	r3, [r4, #0]
 8004ace:	2310      	movs	r3, #16
 8004ad0:	e7b0      	b.n	8004a34 <_printf_i+0xfc>
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	f043 0320 	orr.w	r3, r3, #32
 8004ad8:	6023      	str	r3, [r4, #0]
 8004ada:	2378      	movs	r3, #120	; 0x78
 8004adc:	4828      	ldr	r0, [pc, #160]	; (8004b80 <_printf_i+0x248>)
 8004ade:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ae2:	e7e3      	b.n	8004aac <_printf_i+0x174>
 8004ae4:	0659      	lsls	r1, r3, #25
 8004ae6:	bf48      	it	mi
 8004ae8:	b2b6      	uxthmi	r6, r6
 8004aea:	e7e6      	b.n	8004aba <_printf_i+0x182>
 8004aec:	4615      	mov	r5, r2
 8004aee:	e7bb      	b.n	8004a68 <_printf_i+0x130>
 8004af0:	682b      	ldr	r3, [r5, #0]
 8004af2:	6826      	ldr	r6, [r4, #0]
 8004af4:	6961      	ldr	r1, [r4, #20]
 8004af6:	1d18      	adds	r0, r3, #4
 8004af8:	6028      	str	r0, [r5, #0]
 8004afa:	0635      	lsls	r5, r6, #24
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	d501      	bpl.n	8004b04 <_printf_i+0x1cc>
 8004b00:	6019      	str	r1, [r3, #0]
 8004b02:	e002      	b.n	8004b0a <_printf_i+0x1d2>
 8004b04:	0670      	lsls	r0, r6, #25
 8004b06:	d5fb      	bpl.n	8004b00 <_printf_i+0x1c8>
 8004b08:	8019      	strh	r1, [r3, #0]
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	6123      	str	r3, [r4, #16]
 8004b0e:	4615      	mov	r5, r2
 8004b10:	e7ba      	b.n	8004a88 <_printf_i+0x150>
 8004b12:	682b      	ldr	r3, [r5, #0]
 8004b14:	1d1a      	adds	r2, r3, #4
 8004b16:	602a      	str	r2, [r5, #0]
 8004b18:	681d      	ldr	r5, [r3, #0]
 8004b1a:	6862      	ldr	r2, [r4, #4]
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	4628      	mov	r0, r5
 8004b20:	f7fb fb5e 	bl	80001e0 <memchr>
 8004b24:	b108      	cbz	r0, 8004b2a <_printf_i+0x1f2>
 8004b26:	1b40      	subs	r0, r0, r5
 8004b28:	6060      	str	r0, [r4, #4]
 8004b2a:	6863      	ldr	r3, [r4, #4]
 8004b2c:	6123      	str	r3, [r4, #16]
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b34:	e7a8      	b.n	8004a88 <_printf_i+0x150>
 8004b36:	6923      	ldr	r3, [r4, #16]
 8004b38:	462a      	mov	r2, r5
 8004b3a:	4649      	mov	r1, r9
 8004b3c:	4640      	mov	r0, r8
 8004b3e:	47d0      	blx	sl
 8004b40:	3001      	adds	r0, #1
 8004b42:	d0ab      	beq.n	8004a9c <_printf_i+0x164>
 8004b44:	6823      	ldr	r3, [r4, #0]
 8004b46:	079b      	lsls	r3, r3, #30
 8004b48:	d413      	bmi.n	8004b72 <_printf_i+0x23a>
 8004b4a:	68e0      	ldr	r0, [r4, #12]
 8004b4c:	9b03      	ldr	r3, [sp, #12]
 8004b4e:	4298      	cmp	r0, r3
 8004b50:	bfb8      	it	lt
 8004b52:	4618      	movlt	r0, r3
 8004b54:	e7a4      	b.n	8004aa0 <_printf_i+0x168>
 8004b56:	2301      	movs	r3, #1
 8004b58:	4632      	mov	r2, r6
 8004b5a:	4649      	mov	r1, r9
 8004b5c:	4640      	mov	r0, r8
 8004b5e:	47d0      	blx	sl
 8004b60:	3001      	adds	r0, #1
 8004b62:	d09b      	beq.n	8004a9c <_printf_i+0x164>
 8004b64:	3501      	adds	r5, #1
 8004b66:	68e3      	ldr	r3, [r4, #12]
 8004b68:	9903      	ldr	r1, [sp, #12]
 8004b6a:	1a5b      	subs	r3, r3, r1
 8004b6c:	42ab      	cmp	r3, r5
 8004b6e:	dcf2      	bgt.n	8004b56 <_printf_i+0x21e>
 8004b70:	e7eb      	b.n	8004b4a <_printf_i+0x212>
 8004b72:	2500      	movs	r5, #0
 8004b74:	f104 0619 	add.w	r6, r4, #25
 8004b78:	e7f5      	b.n	8004b66 <_printf_i+0x22e>
 8004b7a:	bf00      	nop
 8004b7c:	08005019 	.word	0x08005019
 8004b80:	0800502a 	.word	0x0800502a

08004b84 <memcpy>:
 8004b84:	440a      	add	r2, r1
 8004b86:	4291      	cmp	r1, r2
 8004b88:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b8c:	d100      	bne.n	8004b90 <memcpy+0xc>
 8004b8e:	4770      	bx	lr
 8004b90:	b510      	push	{r4, lr}
 8004b92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b9a:	4291      	cmp	r1, r2
 8004b9c:	d1f9      	bne.n	8004b92 <memcpy+0xe>
 8004b9e:	bd10      	pop	{r4, pc}

08004ba0 <memmove>:
 8004ba0:	4288      	cmp	r0, r1
 8004ba2:	b510      	push	{r4, lr}
 8004ba4:	eb01 0402 	add.w	r4, r1, r2
 8004ba8:	d902      	bls.n	8004bb0 <memmove+0x10>
 8004baa:	4284      	cmp	r4, r0
 8004bac:	4623      	mov	r3, r4
 8004bae:	d807      	bhi.n	8004bc0 <memmove+0x20>
 8004bb0:	1e43      	subs	r3, r0, #1
 8004bb2:	42a1      	cmp	r1, r4
 8004bb4:	d008      	beq.n	8004bc8 <memmove+0x28>
 8004bb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bbe:	e7f8      	b.n	8004bb2 <memmove+0x12>
 8004bc0:	4402      	add	r2, r0
 8004bc2:	4601      	mov	r1, r0
 8004bc4:	428a      	cmp	r2, r1
 8004bc6:	d100      	bne.n	8004bca <memmove+0x2a>
 8004bc8:	bd10      	pop	{r4, pc}
 8004bca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bd2:	e7f7      	b.n	8004bc4 <memmove+0x24>

08004bd4 <_free_r>:
 8004bd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bd6:	2900      	cmp	r1, #0
 8004bd8:	d044      	beq.n	8004c64 <_free_r+0x90>
 8004bda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bde:	9001      	str	r0, [sp, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f1a1 0404 	sub.w	r4, r1, #4
 8004be6:	bfb8      	it	lt
 8004be8:	18e4      	addlt	r4, r4, r3
 8004bea:	f000 f913 	bl	8004e14 <__malloc_lock>
 8004bee:	4a1e      	ldr	r2, [pc, #120]	; (8004c68 <_free_r+0x94>)
 8004bf0:	9801      	ldr	r0, [sp, #4]
 8004bf2:	6813      	ldr	r3, [r2, #0]
 8004bf4:	b933      	cbnz	r3, 8004c04 <_free_r+0x30>
 8004bf6:	6063      	str	r3, [r4, #4]
 8004bf8:	6014      	str	r4, [r2, #0]
 8004bfa:	b003      	add	sp, #12
 8004bfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c00:	f000 b90e 	b.w	8004e20 <__malloc_unlock>
 8004c04:	42a3      	cmp	r3, r4
 8004c06:	d908      	bls.n	8004c1a <_free_r+0x46>
 8004c08:	6825      	ldr	r5, [r4, #0]
 8004c0a:	1961      	adds	r1, r4, r5
 8004c0c:	428b      	cmp	r3, r1
 8004c0e:	bf01      	itttt	eq
 8004c10:	6819      	ldreq	r1, [r3, #0]
 8004c12:	685b      	ldreq	r3, [r3, #4]
 8004c14:	1949      	addeq	r1, r1, r5
 8004c16:	6021      	streq	r1, [r4, #0]
 8004c18:	e7ed      	b.n	8004bf6 <_free_r+0x22>
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	b10b      	cbz	r3, 8004c24 <_free_r+0x50>
 8004c20:	42a3      	cmp	r3, r4
 8004c22:	d9fa      	bls.n	8004c1a <_free_r+0x46>
 8004c24:	6811      	ldr	r1, [r2, #0]
 8004c26:	1855      	adds	r5, r2, r1
 8004c28:	42a5      	cmp	r5, r4
 8004c2a:	d10b      	bne.n	8004c44 <_free_r+0x70>
 8004c2c:	6824      	ldr	r4, [r4, #0]
 8004c2e:	4421      	add	r1, r4
 8004c30:	1854      	adds	r4, r2, r1
 8004c32:	42a3      	cmp	r3, r4
 8004c34:	6011      	str	r1, [r2, #0]
 8004c36:	d1e0      	bne.n	8004bfa <_free_r+0x26>
 8004c38:	681c      	ldr	r4, [r3, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	6053      	str	r3, [r2, #4]
 8004c3e:	4421      	add	r1, r4
 8004c40:	6011      	str	r1, [r2, #0]
 8004c42:	e7da      	b.n	8004bfa <_free_r+0x26>
 8004c44:	d902      	bls.n	8004c4c <_free_r+0x78>
 8004c46:	230c      	movs	r3, #12
 8004c48:	6003      	str	r3, [r0, #0]
 8004c4a:	e7d6      	b.n	8004bfa <_free_r+0x26>
 8004c4c:	6825      	ldr	r5, [r4, #0]
 8004c4e:	1961      	adds	r1, r4, r5
 8004c50:	428b      	cmp	r3, r1
 8004c52:	bf04      	itt	eq
 8004c54:	6819      	ldreq	r1, [r3, #0]
 8004c56:	685b      	ldreq	r3, [r3, #4]
 8004c58:	6063      	str	r3, [r4, #4]
 8004c5a:	bf04      	itt	eq
 8004c5c:	1949      	addeq	r1, r1, r5
 8004c5e:	6021      	streq	r1, [r4, #0]
 8004c60:	6054      	str	r4, [r2, #4]
 8004c62:	e7ca      	b.n	8004bfa <_free_r+0x26>
 8004c64:	b003      	add	sp, #12
 8004c66:	bd30      	pop	{r4, r5, pc}
 8004c68:	2001000c 	.word	0x2001000c

08004c6c <sbrk_aligned>:
 8004c6c:	b570      	push	{r4, r5, r6, lr}
 8004c6e:	4e0e      	ldr	r6, [pc, #56]	; (8004ca8 <sbrk_aligned+0x3c>)
 8004c70:	460c      	mov	r4, r1
 8004c72:	6831      	ldr	r1, [r6, #0]
 8004c74:	4605      	mov	r5, r0
 8004c76:	b911      	cbnz	r1, 8004c7e <sbrk_aligned+0x12>
 8004c78:	f000 f8bc 	bl	8004df4 <_sbrk_r>
 8004c7c:	6030      	str	r0, [r6, #0]
 8004c7e:	4621      	mov	r1, r4
 8004c80:	4628      	mov	r0, r5
 8004c82:	f000 f8b7 	bl	8004df4 <_sbrk_r>
 8004c86:	1c43      	adds	r3, r0, #1
 8004c88:	d00a      	beq.n	8004ca0 <sbrk_aligned+0x34>
 8004c8a:	1cc4      	adds	r4, r0, #3
 8004c8c:	f024 0403 	bic.w	r4, r4, #3
 8004c90:	42a0      	cmp	r0, r4
 8004c92:	d007      	beq.n	8004ca4 <sbrk_aligned+0x38>
 8004c94:	1a21      	subs	r1, r4, r0
 8004c96:	4628      	mov	r0, r5
 8004c98:	f000 f8ac 	bl	8004df4 <_sbrk_r>
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	d101      	bne.n	8004ca4 <sbrk_aligned+0x38>
 8004ca0:	f04f 34ff 	mov.w	r4, #4294967295
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	bd70      	pop	{r4, r5, r6, pc}
 8004ca8:	20010010 	.word	0x20010010

08004cac <_malloc_r>:
 8004cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cb0:	1ccd      	adds	r5, r1, #3
 8004cb2:	f025 0503 	bic.w	r5, r5, #3
 8004cb6:	3508      	adds	r5, #8
 8004cb8:	2d0c      	cmp	r5, #12
 8004cba:	bf38      	it	cc
 8004cbc:	250c      	movcc	r5, #12
 8004cbe:	2d00      	cmp	r5, #0
 8004cc0:	4607      	mov	r7, r0
 8004cc2:	db01      	blt.n	8004cc8 <_malloc_r+0x1c>
 8004cc4:	42a9      	cmp	r1, r5
 8004cc6:	d905      	bls.n	8004cd4 <_malloc_r+0x28>
 8004cc8:	230c      	movs	r3, #12
 8004cca:	603b      	str	r3, [r7, #0]
 8004ccc:	2600      	movs	r6, #0
 8004cce:	4630      	mov	r0, r6
 8004cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cd4:	4e2e      	ldr	r6, [pc, #184]	; (8004d90 <_malloc_r+0xe4>)
 8004cd6:	f000 f89d 	bl	8004e14 <__malloc_lock>
 8004cda:	6833      	ldr	r3, [r6, #0]
 8004cdc:	461c      	mov	r4, r3
 8004cde:	bb34      	cbnz	r4, 8004d2e <_malloc_r+0x82>
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	4638      	mov	r0, r7
 8004ce4:	f7ff ffc2 	bl	8004c6c <sbrk_aligned>
 8004ce8:	1c43      	adds	r3, r0, #1
 8004cea:	4604      	mov	r4, r0
 8004cec:	d14d      	bne.n	8004d8a <_malloc_r+0xde>
 8004cee:	6834      	ldr	r4, [r6, #0]
 8004cf0:	4626      	mov	r6, r4
 8004cf2:	2e00      	cmp	r6, #0
 8004cf4:	d140      	bne.n	8004d78 <_malloc_r+0xcc>
 8004cf6:	6823      	ldr	r3, [r4, #0]
 8004cf8:	4631      	mov	r1, r6
 8004cfa:	4638      	mov	r0, r7
 8004cfc:	eb04 0803 	add.w	r8, r4, r3
 8004d00:	f000 f878 	bl	8004df4 <_sbrk_r>
 8004d04:	4580      	cmp	r8, r0
 8004d06:	d13a      	bne.n	8004d7e <_malloc_r+0xd2>
 8004d08:	6821      	ldr	r1, [r4, #0]
 8004d0a:	3503      	adds	r5, #3
 8004d0c:	1a6d      	subs	r5, r5, r1
 8004d0e:	f025 0503 	bic.w	r5, r5, #3
 8004d12:	3508      	adds	r5, #8
 8004d14:	2d0c      	cmp	r5, #12
 8004d16:	bf38      	it	cc
 8004d18:	250c      	movcc	r5, #12
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	4638      	mov	r0, r7
 8004d1e:	f7ff ffa5 	bl	8004c6c <sbrk_aligned>
 8004d22:	3001      	adds	r0, #1
 8004d24:	d02b      	beq.n	8004d7e <_malloc_r+0xd2>
 8004d26:	6823      	ldr	r3, [r4, #0]
 8004d28:	442b      	add	r3, r5
 8004d2a:	6023      	str	r3, [r4, #0]
 8004d2c:	e00e      	b.n	8004d4c <_malloc_r+0xa0>
 8004d2e:	6822      	ldr	r2, [r4, #0]
 8004d30:	1b52      	subs	r2, r2, r5
 8004d32:	d41e      	bmi.n	8004d72 <_malloc_r+0xc6>
 8004d34:	2a0b      	cmp	r2, #11
 8004d36:	d916      	bls.n	8004d66 <_malloc_r+0xba>
 8004d38:	1961      	adds	r1, r4, r5
 8004d3a:	42a3      	cmp	r3, r4
 8004d3c:	6025      	str	r5, [r4, #0]
 8004d3e:	bf18      	it	ne
 8004d40:	6059      	strne	r1, [r3, #4]
 8004d42:	6863      	ldr	r3, [r4, #4]
 8004d44:	bf08      	it	eq
 8004d46:	6031      	streq	r1, [r6, #0]
 8004d48:	5162      	str	r2, [r4, r5]
 8004d4a:	604b      	str	r3, [r1, #4]
 8004d4c:	4638      	mov	r0, r7
 8004d4e:	f104 060b 	add.w	r6, r4, #11
 8004d52:	f000 f865 	bl	8004e20 <__malloc_unlock>
 8004d56:	f026 0607 	bic.w	r6, r6, #7
 8004d5a:	1d23      	adds	r3, r4, #4
 8004d5c:	1af2      	subs	r2, r6, r3
 8004d5e:	d0b6      	beq.n	8004cce <_malloc_r+0x22>
 8004d60:	1b9b      	subs	r3, r3, r6
 8004d62:	50a3      	str	r3, [r4, r2]
 8004d64:	e7b3      	b.n	8004cce <_malloc_r+0x22>
 8004d66:	6862      	ldr	r2, [r4, #4]
 8004d68:	42a3      	cmp	r3, r4
 8004d6a:	bf0c      	ite	eq
 8004d6c:	6032      	streq	r2, [r6, #0]
 8004d6e:	605a      	strne	r2, [r3, #4]
 8004d70:	e7ec      	b.n	8004d4c <_malloc_r+0xa0>
 8004d72:	4623      	mov	r3, r4
 8004d74:	6864      	ldr	r4, [r4, #4]
 8004d76:	e7b2      	b.n	8004cde <_malloc_r+0x32>
 8004d78:	4634      	mov	r4, r6
 8004d7a:	6876      	ldr	r6, [r6, #4]
 8004d7c:	e7b9      	b.n	8004cf2 <_malloc_r+0x46>
 8004d7e:	230c      	movs	r3, #12
 8004d80:	603b      	str	r3, [r7, #0]
 8004d82:	4638      	mov	r0, r7
 8004d84:	f000 f84c 	bl	8004e20 <__malloc_unlock>
 8004d88:	e7a1      	b.n	8004cce <_malloc_r+0x22>
 8004d8a:	6025      	str	r5, [r4, #0]
 8004d8c:	e7de      	b.n	8004d4c <_malloc_r+0xa0>
 8004d8e:	bf00      	nop
 8004d90:	2001000c 	.word	0x2001000c

08004d94 <_realloc_r>:
 8004d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d98:	4680      	mov	r8, r0
 8004d9a:	4614      	mov	r4, r2
 8004d9c:	460e      	mov	r6, r1
 8004d9e:	b921      	cbnz	r1, 8004daa <_realloc_r+0x16>
 8004da0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004da4:	4611      	mov	r1, r2
 8004da6:	f7ff bf81 	b.w	8004cac <_malloc_r>
 8004daa:	b92a      	cbnz	r2, 8004db8 <_realloc_r+0x24>
 8004dac:	f7ff ff12 	bl	8004bd4 <_free_r>
 8004db0:	4625      	mov	r5, r4
 8004db2:	4628      	mov	r0, r5
 8004db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004db8:	f000 f838 	bl	8004e2c <_malloc_usable_size_r>
 8004dbc:	4284      	cmp	r4, r0
 8004dbe:	4607      	mov	r7, r0
 8004dc0:	d802      	bhi.n	8004dc8 <_realloc_r+0x34>
 8004dc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004dc6:	d812      	bhi.n	8004dee <_realloc_r+0x5a>
 8004dc8:	4621      	mov	r1, r4
 8004dca:	4640      	mov	r0, r8
 8004dcc:	f7ff ff6e 	bl	8004cac <_malloc_r>
 8004dd0:	4605      	mov	r5, r0
 8004dd2:	2800      	cmp	r0, #0
 8004dd4:	d0ed      	beq.n	8004db2 <_realloc_r+0x1e>
 8004dd6:	42bc      	cmp	r4, r7
 8004dd8:	4622      	mov	r2, r4
 8004dda:	4631      	mov	r1, r6
 8004ddc:	bf28      	it	cs
 8004dde:	463a      	movcs	r2, r7
 8004de0:	f7ff fed0 	bl	8004b84 <memcpy>
 8004de4:	4631      	mov	r1, r6
 8004de6:	4640      	mov	r0, r8
 8004de8:	f7ff fef4 	bl	8004bd4 <_free_r>
 8004dec:	e7e1      	b.n	8004db2 <_realloc_r+0x1e>
 8004dee:	4635      	mov	r5, r6
 8004df0:	e7df      	b.n	8004db2 <_realloc_r+0x1e>
	...

08004df4 <_sbrk_r>:
 8004df4:	b538      	push	{r3, r4, r5, lr}
 8004df6:	4d06      	ldr	r5, [pc, #24]	; (8004e10 <_sbrk_r+0x1c>)
 8004df8:	2300      	movs	r3, #0
 8004dfa:	4604      	mov	r4, r0
 8004dfc:	4608      	mov	r0, r1
 8004dfe:	602b      	str	r3, [r5, #0]
 8004e00:	f7fc f91c 	bl	800103c <_sbrk>
 8004e04:	1c43      	adds	r3, r0, #1
 8004e06:	d102      	bne.n	8004e0e <_sbrk_r+0x1a>
 8004e08:	682b      	ldr	r3, [r5, #0]
 8004e0a:	b103      	cbz	r3, 8004e0e <_sbrk_r+0x1a>
 8004e0c:	6023      	str	r3, [r4, #0]
 8004e0e:	bd38      	pop	{r3, r4, r5, pc}
 8004e10:	20010014 	.word	0x20010014

08004e14 <__malloc_lock>:
 8004e14:	4801      	ldr	r0, [pc, #4]	; (8004e1c <__malloc_lock+0x8>)
 8004e16:	f000 b811 	b.w	8004e3c <__retarget_lock_acquire_recursive>
 8004e1a:	bf00      	nop
 8004e1c:	20010018 	.word	0x20010018

08004e20 <__malloc_unlock>:
 8004e20:	4801      	ldr	r0, [pc, #4]	; (8004e28 <__malloc_unlock+0x8>)
 8004e22:	f000 b80c 	b.w	8004e3e <__retarget_lock_release_recursive>
 8004e26:	bf00      	nop
 8004e28:	20010018 	.word	0x20010018

08004e2c <_malloc_usable_size_r>:
 8004e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e30:	1f18      	subs	r0, r3, #4
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	bfbc      	itt	lt
 8004e36:	580b      	ldrlt	r3, [r1, r0]
 8004e38:	18c0      	addlt	r0, r0, r3
 8004e3a:	4770      	bx	lr

08004e3c <__retarget_lock_acquire_recursive>:
 8004e3c:	4770      	bx	lr

08004e3e <__retarget_lock_release_recursive>:
 8004e3e:	4770      	bx	lr

08004e40 <_init>:
 8004e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e42:	bf00      	nop
 8004e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e46:	bc08      	pop	{r3}
 8004e48:	469e      	mov	lr, r3
 8004e4a:	4770      	bx	lr

08004e4c <_fini>:
 8004e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4e:	bf00      	nop
 8004e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e52:	bc08      	pop	{r3}
 8004e54:	469e      	mov	lr, r3
 8004e56:	4770      	bx	lr
